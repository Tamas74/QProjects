// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace gloPMUnitTesting
{
    /// <summary>
    ///This is a test class for gloAppointmentBook.gloAppointmentBook and is intended
    ///to contain all gloAppointmentBook.gloAppointmentBook Unit Tests
    ///</summary>
    [TestClass()]
    public class gloAppointmentBookTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddModifyFollowUps (long, string, long, int, long)
        ///</summary>
        [TestMethod()]
        public void AddModifyFollowUpsTest1()
        {
            string DatabaseConnectionString = BasicUnitTest.Databasestring; ; 
            global::gloAppointmentBook.gloAppointmentBook target = new global::gloAppointmentBook.gloAppointmentBook(DatabaseConnectionString);

            //BasicUnitTest utest = new BasicUnitTest();
            //actual = utest.TesttheFunction(target, "AddModifyFollowUps", 0);

            long lFollowUpID = 0;
            long lDuration = 0;
            long lClinicID = 0;

            string sName = string.Empty;
            int iCriteria = 0;

            long expected = 0;
            long actual = target.AddModifyFollowUps(lFollowUpID, sName, lDuration, iCriteria, lClinicID);

            if (actual == 0)
            {
                Assert.AreEqual(expected, actual, "Test failed..");
            }
        }

        /// <summary>
        ///A test for AddModifyFollowUps (long, string, long, int, long)
        ///</summary>
       
    }


}
