// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;

namespace gloPMUnitTesting
{
    /// <summary>
    ///This is a test class for gloAppointmentBook.Books.Department and is intended
    ///to contain all gloAppointmentBook.Books.Department Unit Tests
    ///</summary>
    [TestClass()]
    public class DepartmentTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{

        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for IsExists (long, string)
        ///</summary>
        [TestMethod()]
        public void IsExistsTest()
        {
            string DatabaseConnectionString = BasicUnitTest.Databasestring;
            global::gloAppointmentBook.Books.Department target = new global::gloAppointmentBook.Books.Department(DatabaseConnectionString);

            bool expected = true;
            bool actual;
            BasicUnitTest utest = new BasicUnitTest();
           actual= utest.TesttheFunction(target, "IsExists", false);
          //  object target1=utest.GetClassObject("gloAppointmentBook.Books", "Department");
            // System.Reflection.MethodInfo m = typeof(target).GetMethod("IsExistsTest");
            //System.Reflection.ParameterInfo[] parameterdata = utest.ListProperties(target, "IsExists");
            //System.Collections.ArrayList paralist = new System.Collections.ArrayList();
            //paralist = utest.ParameterArray(parameterdata);

            //for (int i = 0; i < paralist.Count; i++)
            //{

            //    string parameter = paralist[i].ToString().Remove(paralist[i].ToString().Length - 1);
            //    string[] values;
            //    values = parameter.Split(",".ToCharArray());
             
            //    long DeptID = Convert.ToInt64(values[0]);

            //    string DepartmentName = values[1].ToString();
            //    actual = target.IsExists(DeptID, DepartmentName);
            //    if (actual == expected)
            //    {

            //    }
            //    else
            //    {
            //        System.Windows.Forms.MessageBox.Show("Tested with this parameter :- Departmen ID ->" + DeptID + "DepartmentName ->" + DepartmentName);
            //    }
            //    //            MethodBody mb = m.GetMethodBody();
             Assert.AreEqual(expected, actual, "gloAppointmentBook.Books.Department.IsExists did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
            //}
        }

        /// <summary>
        ///A test for GetDeptsofLocation (long)
        ///</summary>
        [TestMethod()]
        public void GetDeptsofLocationTest()
        {
            string DatabaseConnectionString = BasicUnitTest.Databasestring;  

            global::gloAppointmentBook.Books.Department target = new global::gloAppointmentBook.Books.Department(DatabaseConnectionString);

            global::System.Data.DataTable expected = null;
            global::System.Data.DataTable actual;
            BasicUnitTest utest = new BasicUnitTest();

            System.Reflection.ParameterInfo[] parameterdata = utest.ListProperties(target, "GetDeptsofLocation");
            System.Collections.ArrayList paralist = new System.Collections.ArrayList();
            paralist = utest.ParameterArray(parameterdata);

            for (int i = 0; i < paralist.Count; i++)
            {
                string parameter = paralist[i].ToString().Remove(paralist[i].ToString().Length - 1);
                string[] values;
                values = parameter.Split(",".ToCharArray());

                long LocationID = Convert.ToInt64(values[0]);
                actual = target.GetDeptsofLocation(LocationID);

                try
                {
                    if (actual.Rows.Count >= 0)
                    {

                    }                    
                }
                catch (Exception ex)
                {
                    System.Windows.Forms.MessageBox.Show("Tested with this parameter " + LocationID);
                }
                //Assert.AreEqual(expected, actual, "gloAppointmentBook.Books.Department.GetDeptsofLocation did not return the expecte" +
                //     "d value.");
            }

            //   Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsBlock (string)
        ///</summary>
        [TestMethod()]
        public void IsBlockTest()
        {
            string DatabaseConnectionString = BasicUnitTest.Databasestring; ; // TODO: Initialize to an appropriate value

            global::gloAppointmentBook.Books.Department target = new global::gloAppointmentBook.Books.Department(DatabaseConnectionString);

            bool expected = true;
            bool actual;

            BasicUnitTest utest = new BasicUnitTest();
            // System.Reflection.MethodInfo m = typeof(target).GetMethod("IsExistsTest");
            System.Reflection.ParameterInfo[] parameterdata = utest.ListProperties(target, "IsBlock");
            System.Collections.ArrayList paralist = new System.Collections.ArrayList();
            paralist = utest.ParameterArray(parameterdata);

            for (int i = 0; i < paralist.Count; i++)
            {

                string parameter = paralist[i].ToString().Remove(paralist[i].ToString().Length - 1);
                string[] values;
                values = parameter.Split(",".ToCharArray());

                string  Description = values[0].ToString();

                actual = target.IsBlock(Description);
                if (actual == expected)
                {

                }
                else
                {
                    //Assert.Fail("Tested with this parameter :- Description ->" + Description);
                    System.Windows.Forms.MessageBox.Show("Tested with this parameter :- Description ->" + Description);
                }
                //            MethodBody mb = m.GetMethodBody();
                // Assert.AreEqual(expected, actual, "gloAppointmentBook.Books.Department.IsExists did not return the expected value.");
                //Assert.Inconclusive("Verify the correctness of this test method.");
            }
            
           // Assert.AreEqual(expected, actual, "gloAppointmentBook.Books.Department.IsBlock did not return the expected value.");
           // Assert.Inconclusive("Verify the correctness of this test method.");
        }
    }


}
