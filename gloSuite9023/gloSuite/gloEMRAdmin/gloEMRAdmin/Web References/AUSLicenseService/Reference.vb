'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace AUSLicenseService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="gloAUSServiceSoap", [Namespace]:="https://ophit.net/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class gloAUSService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private DownloadProductUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadProductUpdate_70v1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInstalogRequestsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInstaLogStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecieveLogFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFtpCredentialsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFtpPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFtpDownloadPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUpdateDownloadDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateInstalledStatusDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogUpdateDownloadDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogUpdateDownloadDetailsV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogUpdateInstallDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckAusIDExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateLicenseKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogUpdateInfoForManualProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogUpdateInfoForManualProcessV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFtpCredentialsForDrugAndICD9CPTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIsAssestDataRequestedForAusIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadAssestDataRequestDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendAssestRequestedDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendProviderLicenseDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadServicesDataRequestDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendServicesRequestedDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgingDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.gloEMRAdmin.My.MySettings.Default.gloEMRAdmin_AUSLicenseService_gloAUSService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event DownloadProductUpdateCompleted As DownloadProductUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadProductUpdate_70v1Completed As DownloadProductUpdate_70v1CompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInstalogRequestsCompleted As GetInstalogRequestsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInstaLogStatusCompleted As GetInstaLogStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event RecieveLogFileCompleted As RecieveLogFileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFtpCredentialsCompleted As GetFtpCredentialsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFtpPasswordCompleted As GetFtpPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFtpDownloadPathCompleted As GetFtpDownloadPathCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUpdateDownloadDetailsCompleted As InsertUpdateDownloadDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateInstalledStatusDetailsCompleted As UpdateInstalledStatusDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event LogUpdateDownloadDetailsCompleted As LogUpdateDownloadDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event LogUpdateDownloadDetailsV2Completed As LogUpdateDownloadDetailsV2CompletedEventHandler
        
        '''<remarks/>
        Public Event LogUpdateInstallDetailsCompleted As LogUpdateInstallDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckAusIDExistCompleted As CheckAusIDExistCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateLicenseKeyCompleted As ValidateLicenseKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event LogUpdateInfoForManualProcessCompleted As LogUpdateInfoForManualProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event LogUpdateInfoForManualProcessV2Completed As LogUpdateInfoForManualProcessV2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFtpCredentialsForDrugAndICD9CPTCompleted As GetFtpCredentialsForDrugAndICD9CPTCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductIDCompleted As GetProductIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFtpDownloadPathForDrugAndICD9CPTCompleted As GetFtpDownloadPathForDrugAndICD9CPTCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIsAssestDataRequestedForAusIdCompleted As CheckIsAssestDataRequestedForAusIdCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadAssestDataRequestDetailsCompleted As DownloadAssestDataRequestDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event SendAssestRequestedDataCompleted As SendAssestRequestedDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SendProviderLicenseDataCompleted As SendProviderLicenseDataCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadServicesDataRequestDetailsCompleted As DownloadServicesDataRequestDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event SendServicesRequestedDataCompleted As SendServicesRequestedDataCompletedEventHandler
        
        '''<remarks/>
        Public Event AgingDataCompleted As AgingDataCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadProductUpdate", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadProductUpdate(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal RequestXmlStream() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadProductUpdate", New Object() {RequestXmlStream})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadProductUpdateAsync(ByVal RequestXmlStream() As Byte)
            Me.DownloadProductUpdateAsync(RequestXmlStream, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadProductUpdateAsync(ByVal RequestXmlStream() As Byte, ByVal userState As Object)
            If (Me.DownloadProductUpdateOperationCompleted Is Nothing) Then
                Me.DownloadProductUpdateOperationCompleted = AddressOf Me.OnDownloadProductUpdateOperationCompleted
            End If
            Me.InvokeAsync("DownloadProductUpdate", New Object() {RequestXmlStream}, Me.DownloadProductUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadProductUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadProductUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadProductUpdateCompleted(Me, New DownloadProductUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadProductUpdate_70v1", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadProductUpdate_70v1(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal RequestXmlStream() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadProductUpdate_70v1", New Object() {RequestXmlStream})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadProductUpdate_70v1Async(ByVal RequestXmlStream() As Byte)
            Me.DownloadProductUpdate_70v1Async(RequestXmlStream, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadProductUpdate_70v1Async(ByVal RequestXmlStream() As Byte, ByVal userState As Object)
            If (Me.DownloadProductUpdate_70v1OperationCompleted Is Nothing) Then
                Me.DownloadProductUpdate_70v1OperationCompleted = AddressOf Me.OnDownloadProductUpdate_70v1OperationCompleted
            End If
            Me.InvokeAsync("DownloadProductUpdate_70v1", New Object() {RequestXmlStream}, Me.DownloadProductUpdate_70v1OperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadProductUpdate_70v1OperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadProductUpdate_70v1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadProductUpdate_70v1Completed(Me, New DownloadProductUpdate_70v1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/Login", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal userid As String, ByVal password As String) As String
            Dim results() As Object = Me.Invoke("Login", New Object() {userid, password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal userid As String, ByVal password As String)
            Me.LoginAsync(userid, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal userid As String, ByVal password As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {userid, password}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetInstalogRequests", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInstalogRequests(ByVal strClinicId As String) As String()
            Dim results() As Object = Me.Invoke("GetInstalogRequests", New Object() {strClinicId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInstalogRequestsAsync(ByVal strClinicId As String)
            Me.GetInstalogRequestsAsync(strClinicId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInstalogRequestsAsync(ByVal strClinicId As String, ByVal userState As Object)
            If (Me.GetInstalogRequestsOperationCompleted Is Nothing) Then
                Me.GetInstalogRequestsOperationCompleted = AddressOf Me.OnGetInstalogRequestsOperationCompleted
            End If
            Me.InvokeAsync("GetInstalogRequests", New Object() {strClinicId}, Me.GetInstalogRequestsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInstalogRequestsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInstalogRequestsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInstalogRequestsCompleted(Me, New GetInstalogRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetInstaLogStatus", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInstaLogStatus(ByVal sClientIdentifier As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInstaLogStatus", New Object() {sClientIdentifier})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInstaLogStatusAsync(ByVal sClientIdentifier As String)
            Me.GetInstaLogStatusAsync(sClientIdentifier, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInstaLogStatusAsync(ByVal sClientIdentifier As String, ByVal userState As Object)
            If (Me.GetInstaLogStatusOperationCompleted Is Nothing) Then
                Me.GetInstaLogStatusOperationCompleted = AddressOf Me.OnGetInstaLogStatusOperationCompleted
            End If
            Me.InvokeAsync("GetInstaLogStatus", New Object() {sClientIdentifier}, Me.GetInstaLogStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInstaLogStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInstaLogStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInstaLogStatusCompleted(Me, New GetInstaLogStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/RecieveLogFile", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecieveLogFile(ByVal FileDetails() As Object, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal cntFromRequest() As Byte, ByVal blnIsGeneral As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("RecieveLogFile", New Object() {FileDetails, cntFromRequest, blnIsGeneral})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecieveLogFileAsync(ByVal FileDetails() As Object, ByVal cntFromRequest() As Byte, ByVal blnIsGeneral As Boolean)
            Me.RecieveLogFileAsync(FileDetails, cntFromRequest, blnIsGeneral, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecieveLogFileAsync(ByVal FileDetails() As Object, ByVal cntFromRequest() As Byte, ByVal blnIsGeneral As Boolean, ByVal userState As Object)
            If (Me.RecieveLogFileOperationCompleted Is Nothing) Then
                Me.RecieveLogFileOperationCompleted = AddressOf Me.OnRecieveLogFileOperationCompleted
            End If
            Me.InvokeAsync("RecieveLogFile", New Object() {FileDetails, cntFromRequest, blnIsGeneral}, Me.RecieveLogFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecieveLogFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecieveLogFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecieveLogFileCompleted(Me, New RecieveLogFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpCredentials", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFtpCredentials(ByVal updateId As Integer, ByVal _key As String) As String
            Dim results() As Object = Me.Invoke("GetFtpCredentials", New Object() {updateId, _key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFtpCredentialsAsync(ByVal updateId As Integer, ByVal _key As String)
            Me.GetFtpCredentialsAsync(updateId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFtpCredentialsAsync(ByVal updateId As Integer, ByVal _key As String, ByVal userState As Object)
            If (Me.GetFtpCredentialsOperationCompleted Is Nothing) Then
                Me.GetFtpCredentialsOperationCompleted = AddressOf Me.OnGetFtpCredentialsOperationCompleted
            End If
            Me.InvokeAsync("GetFtpCredentials", New Object() {updateId, _key}, Me.GetFtpCredentialsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFtpCredentialsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFtpCredentialsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFtpCredentialsCompleted(Me, New GetFtpCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpPassword", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFtpPassword(ByVal updateId As Integer, ByVal _key As String) As String
            Dim results() As Object = Me.Invoke("GetFtpPassword", New Object() {updateId, _key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFtpPasswordAsync(ByVal updateId As Integer, ByVal _key As String)
            Me.GetFtpPasswordAsync(updateId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFtpPasswordAsync(ByVal updateId As Integer, ByVal _key As String, ByVal userState As Object)
            If (Me.GetFtpPasswordOperationCompleted Is Nothing) Then
                Me.GetFtpPasswordOperationCompleted = AddressOf Me.OnGetFtpPasswordOperationCompleted
            End If
            Me.InvokeAsync("GetFtpPassword", New Object() {updateId, _key}, Me.GetFtpPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFtpPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFtpPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFtpPasswordCompleted(Me, New GetFtpPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpDownloadPath", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFtpDownloadPath(ByVal updateId As Integer, ByVal _key As String) As String
            Dim results() As Object = Me.Invoke("GetFtpDownloadPath", New Object() {updateId, _key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFtpDownloadPathAsync(ByVal updateId As Integer, ByVal _key As String)
            Me.GetFtpDownloadPathAsync(updateId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFtpDownloadPathAsync(ByVal updateId As Integer, ByVal _key As String, ByVal userState As Object)
            If (Me.GetFtpDownloadPathOperationCompleted Is Nothing) Then
                Me.GetFtpDownloadPathOperationCompleted = AddressOf Me.OnGetFtpDownloadPathOperationCompleted
            End If
            Me.InvokeAsync("GetFtpDownloadPath", New Object() {updateId, _key}, Me.GetFtpDownloadPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFtpDownloadPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFtpDownloadPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFtpDownloadPathCompleted(Me, New GetFtpDownloadPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/InsertUpdateDownloadDetails", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertUpdateDownloadDetails(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertUpdateDownloadDetails", New Object() {strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, _key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertUpdateDownloadDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String)
            Me.InsertUpdateDownloadDetailsAsync(strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUpdateDownloadDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal userState As Object)
            If (Me.InsertUpdateDownloadDetailsOperationCompleted Is Nothing) Then
                Me.InsertUpdateDownloadDetailsOperationCompleted = AddressOf Me.OnInsertUpdateDownloadDetailsOperationCompleted
            End If
            Me.InvokeAsync("InsertUpdateDownloadDetails", New Object() {strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, _key}, Me.InsertUpdateDownloadDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUpdateDownloadDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUpdateDownloadDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUpdateDownloadDetailsCompleted(Me, New InsertUpdateDownloadDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/UpdateInstalledStatusDetails", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateInstalledStatusDetails(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateInstalledStatusDetails", New Object() {strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, strProductVersion, strProductPreviousVersion, strDBName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateInstalledStatusDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String)
            Me.UpdateInstalledStatusDetailsAsync(strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, strProductVersion, strProductPreviousVersion, strDBName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateInstalledStatusDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal userState As Object)
            If (Me.UpdateInstalledStatusDetailsOperationCompleted Is Nothing) Then
                Me.UpdateInstalledStatusDetailsOperationCompleted = AddressOf Me.OnUpdateInstalledStatusDetailsOperationCompleted
            End If
            Me.InvokeAsync("UpdateInstalledStatusDetails", New Object() {strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, strProductVersion, strProductPreviousVersion, strDBName}, Me.UpdateInstalledStatusDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateInstalledStatusDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateInstalledStatusDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateInstalledStatusDetailsCompleted(Me, New UpdateInstalledStatusDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateDownloadDetails", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogUpdateDownloadDetails(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal _key As String) As Boolean
            Dim results() As Object = Me.Invoke("LogUpdateDownloadDetails", New Object() {strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, _key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogUpdateDownloadDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal _key As String)
            Me.LogUpdateDownloadDetailsAsync(strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogUpdateDownloadDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal _key As String, ByVal userState As Object)
            If (Me.LogUpdateDownloadDetailsOperationCompleted Is Nothing) Then
                Me.LogUpdateDownloadDetailsOperationCompleted = AddressOf Me.OnLogUpdateDownloadDetailsOperationCompleted
            End If
            Me.InvokeAsync("LogUpdateDownloadDetails", New Object() {strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, _key}, Me.LogUpdateDownloadDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogUpdateDownloadDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogUpdateDownloadDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogUpdateDownloadDetailsCompleted(Me, New LogUpdateDownloadDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateDownloadDetailsV2", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogUpdateDownloadDetailsV2(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal IsDbReplication As Boolean, ByVal _key As String) As Boolean
            Dim results() As Object = Me.Invoke("LogUpdateDownloadDetailsV2", New Object() {strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, IsDbReplication, _key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogUpdateDownloadDetailsV2Async(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal IsDbReplication As Boolean, ByVal _key As String)
            Me.LogUpdateDownloadDetailsV2Async(strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, IsDbReplication, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogUpdateDownloadDetailsV2Async(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateDownloadStatus As Boolean, ByVal nUpdateDownloadDetailId As Integer, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal IsDbReplication As Boolean, ByVal _key As String, ByVal userState As Object)
            If (Me.LogUpdateDownloadDetailsV2OperationCompleted Is Nothing) Then
                Me.LogUpdateDownloadDetailsV2OperationCompleted = AddressOf Me.OnLogUpdateDownloadDetailsV2OperationCompleted
            End If
            Me.InvokeAsync("LogUpdateDownloadDetailsV2", New Object() {strClientAusId, updateId, bIsUpdateDownloadStatus, nUpdateDownloadDetailId, bIsUpdateInstallStatus, strMachineName, nProductId, strProductVersion, strProductPreviousVersion, strDBName, IsDbReplication, _key}, Me.LogUpdateDownloadDetailsV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnLogUpdateDownloadDetailsV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.LogUpdateDownloadDetailsV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogUpdateDownloadDetailsV2Completed(Me, New LogUpdateDownloadDetailsV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateInstallDetails", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogUpdateInstallDetails(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String) As Boolean
            Dim results() As Object = Me.Invoke("LogUpdateInstallDetails", New Object() {strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, nProductId, strProductVersion, strProductPreviousVersion, strDBName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogUpdateInstallDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String)
            Me.LogUpdateInstallDetailsAsync(strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, nProductId, strProductVersion, strProductPreviousVersion, strDBName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogUpdateInstallDetailsAsync(ByVal strClientAusId As String, ByVal updateId As Long, ByVal bIsUpdateInstallStatus As Boolean, ByVal strMachineName As String, ByVal _key As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strProductPreviousVersion As String, ByVal strDBName As String, ByVal userState As Object)
            If (Me.LogUpdateInstallDetailsOperationCompleted Is Nothing) Then
                Me.LogUpdateInstallDetailsOperationCompleted = AddressOf Me.OnLogUpdateInstallDetailsOperationCompleted
            End If
            Me.InvokeAsync("LogUpdateInstallDetails", New Object() {strClientAusId, updateId, bIsUpdateInstallStatus, strMachineName, _key, nProductId, strProductVersion, strProductPreviousVersion, strDBName}, Me.LogUpdateInstallDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogUpdateInstallDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogUpdateInstallDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogUpdateInstallDetailsCompleted(Me, New LogUpdateInstallDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/CheckAusIDExist", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckAusIDExist(ByVal strClientAusId As String, ByVal _key As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckAusIDExist", New Object() {strClientAusId, _key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckAusIDExistAsync(ByVal strClientAusId As String, ByVal _key As String)
            Me.CheckAusIDExistAsync(strClientAusId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckAusIDExistAsync(ByVal strClientAusId As String, ByVal _key As String, ByVal userState As Object)
            If (Me.CheckAusIDExistOperationCompleted Is Nothing) Then
                Me.CheckAusIDExistOperationCompleted = AddressOf Me.OnCheckAusIDExistOperationCompleted
            End If
            Me.InvokeAsync("CheckAusIDExist", New Object() {strClientAusId, _key}, Me.CheckAusIDExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckAusIDExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAusIDExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAusIDExistCompleted(Me, New CheckAusIDExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/ValidateLicenseKey", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateLicenseKey(ByVal strLicensekey As String, ByVal strFirstName As String, ByVal strMiddleName As String, ByVal strLastName As String, ByVal ClinicExternalCode As String, ByVal ProviderID As Long, ByVal AUSPortalID As Long, ByVal _key As String) As String
            Dim results() As Object = Me.Invoke("ValidateLicenseKey", New Object() {strLicensekey, strFirstName, strMiddleName, strLastName, ClinicExternalCode, ProviderID, AUSPortalID, _key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateLicenseKeyAsync(ByVal strLicensekey As String, ByVal strFirstName As String, ByVal strMiddleName As String, ByVal strLastName As String, ByVal ClinicExternalCode As String, ByVal ProviderID As Long, ByVal AUSPortalID As Long, ByVal _key As String)
            Me.ValidateLicenseKeyAsync(strLicensekey, strFirstName, strMiddleName, strLastName, ClinicExternalCode, ProviderID, AUSPortalID, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateLicenseKeyAsync(ByVal strLicensekey As String, ByVal strFirstName As String, ByVal strMiddleName As String, ByVal strLastName As String, ByVal ClinicExternalCode As String, ByVal ProviderID As Long, ByVal AUSPortalID As Long, ByVal _key As String, ByVal userState As Object)
            If (Me.ValidateLicenseKeyOperationCompleted Is Nothing) Then
                Me.ValidateLicenseKeyOperationCompleted = AddressOf Me.OnValidateLicenseKeyOperationCompleted
            End If
            Me.InvokeAsync("ValidateLicenseKey", New Object() {strLicensekey, strFirstName, strMiddleName, strLastName, ClinicExternalCode, ProviderID, AUSPortalID, _key}, Me.ValidateLicenseKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateLicenseKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateLicenseKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateLicenseKeyCompleted(Me, New ValidateLicenseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateInfoForManualProcess", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogUpdateInfoForManualProcess(ByVal strClientAusId As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strMachineName As String, ByVal _key As String, ByVal strPreviouVersion As String, ByVal strDBName As String) As Boolean
            Dim results() As Object = Me.Invoke("LogUpdateInfoForManualProcess", New Object() {strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogUpdateInfoForManualProcessAsync(ByVal strClientAusId As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strMachineName As String, ByVal _key As String, ByVal strPreviouVersion As String, ByVal strDBName As String)
            Me.LogUpdateInfoForManualProcessAsync(strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogUpdateInfoForManualProcessAsync(ByVal strClientAusId As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strMachineName As String, ByVal _key As String, ByVal strPreviouVersion As String, ByVal strDBName As String, ByVal userState As Object)
            If (Me.LogUpdateInfoForManualProcessOperationCompleted Is Nothing) Then
                Me.LogUpdateInfoForManualProcessOperationCompleted = AddressOf Me.OnLogUpdateInfoForManualProcessOperationCompleted
            End If
            Me.InvokeAsync("LogUpdateInfoForManualProcess", New Object() {strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName}, Me.LogUpdateInfoForManualProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogUpdateInfoForManualProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogUpdateInfoForManualProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogUpdateInfoForManualProcessCompleted(Me, New LogUpdateInfoForManualProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/LogUpdateInfoForManualProcessV2", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogUpdateInfoForManualProcessV2(ByVal strClientAusId As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strMachineName As String, ByVal _key As String, ByVal strPreviouVersion As String, ByVal strDBName As String, ByVal IsDbReplication As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("LogUpdateInfoForManualProcessV2", New Object() {strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName, IsDbReplication})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogUpdateInfoForManualProcessV2Async(ByVal strClientAusId As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strMachineName As String, ByVal _key As String, ByVal strPreviouVersion As String, ByVal strDBName As String, ByVal IsDbReplication As Boolean)
            Me.LogUpdateInfoForManualProcessV2Async(strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName, IsDbReplication, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogUpdateInfoForManualProcessV2Async(ByVal strClientAusId As String, ByVal nProductId As Integer, ByVal strProductVersion As String, ByVal strMachineName As String, ByVal _key As String, ByVal strPreviouVersion As String, ByVal strDBName As String, ByVal IsDbReplication As Boolean, ByVal userState As Object)
            If (Me.LogUpdateInfoForManualProcessV2OperationCompleted Is Nothing) Then
                Me.LogUpdateInfoForManualProcessV2OperationCompleted = AddressOf Me.OnLogUpdateInfoForManualProcessV2OperationCompleted
            End If
            Me.InvokeAsync("LogUpdateInfoForManualProcessV2", New Object() {strClientAusId, nProductId, strProductVersion, strMachineName, _key, strPreviouVersion, strDBName, IsDbReplication}, Me.LogUpdateInfoForManualProcessV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnLogUpdateInfoForManualProcessV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.LogUpdateInfoForManualProcessV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogUpdateInfoForManualProcessV2Completed(Me, New LogUpdateInfoForManualProcessV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpCredentialsForDrugAndICD9CPT", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFtpCredentialsForDrugAndICD9CPT(ByVal _key As String) As String
            Dim results() As Object = Me.Invoke("GetFtpCredentialsForDrugAndICD9CPT", New Object() {_key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFtpCredentialsForDrugAndICD9CPTAsync(ByVal _key As String)
            Me.GetFtpCredentialsForDrugAndICD9CPTAsync(_key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFtpCredentialsForDrugAndICD9CPTAsync(ByVal _key As String, ByVal userState As Object)
            If (Me.GetFtpCredentialsForDrugAndICD9CPTOperationCompleted Is Nothing) Then
                Me.GetFtpCredentialsForDrugAndICD9CPTOperationCompleted = AddressOf Me.OnGetFtpCredentialsForDrugAndICD9CPTOperationCompleted
            End If
            Me.InvokeAsync("GetFtpCredentialsForDrugAndICD9CPT", New Object() {_key}, Me.GetFtpCredentialsForDrugAndICD9CPTOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFtpCredentialsForDrugAndICD9CPTOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFtpCredentialsForDrugAndICD9CPTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFtpCredentialsForDrugAndICD9CPTCompleted(Me, New GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetProductID", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductID(ByVal nProductCode As Integer, ByVal strProductVersion As String, ByVal _key As String) As Long
            Dim results() As Object = Me.Invoke("GetProductID", New Object() {nProductCode, strProductVersion, _key})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductIDAsync(ByVal nProductCode As Integer, ByVal strProductVersion As String, ByVal _key As String)
            Me.GetProductIDAsync(nProductCode, strProductVersion, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductIDAsync(ByVal nProductCode As Integer, ByVal strProductVersion As String, ByVal _key As String, ByVal userState As Object)
            If (Me.GetProductIDOperationCompleted Is Nothing) Then
                Me.GetProductIDOperationCompleted = AddressOf Me.OnGetProductIDOperationCompleted
            End If
            Me.InvokeAsync("GetProductID", New Object() {nProductCode, strProductVersion, _key}, Me.GetProductIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductIDCompleted(Me, New GetProductIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/GetFtpDownloadPathForDrugAndICD9CPT", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFtpDownloadPathForDrugAndICD9CPT(ByVal strFlag As String, ByVal strDownloadType As String, ByVal _key As String) As String
            Dim results() As Object = Me.Invoke("GetFtpDownloadPathForDrugAndICD9CPT", New Object() {strFlag, strDownloadType, _key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFtpDownloadPathForDrugAndICD9CPTAsync(ByVal strFlag As String, ByVal strDownloadType As String, ByVal _key As String)
            Me.GetFtpDownloadPathForDrugAndICD9CPTAsync(strFlag, strDownloadType, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFtpDownloadPathForDrugAndICD9CPTAsync(ByVal strFlag As String, ByVal strDownloadType As String, ByVal _key As String, ByVal userState As Object)
            If (Me.GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted Is Nothing) Then
                Me.GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted = AddressOf Me.OnGetFtpDownloadPathForDrugAndICD9CPTOperationCompleted
            End If
            Me.InvokeAsync("GetFtpDownloadPathForDrugAndICD9CPT", New Object() {strFlag, strDownloadType, _key}, Me.GetFtpDownloadPathForDrugAndICD9CPTOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFtpDownloadPathForDrugAndICD9CPTOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFtpDownloadPathForDrugAndICD9CPTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFtpDownloadPathForDrugAndICD9CPTCompleted(Me, New GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/CheckIsAssestDataRequestedForAusId", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIsAssestDataRequestedForAusId(ByVal strClientAusId As String, ByVal _key As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIsAssestDataRequestedForAusId", New Object() {strClientAusId, _key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIsAssestDataRequestedForAusIdAsync(ByVal strClientAusId As String, ByVal _key As String)
            Me.CheckIsAssestDataRequestedForAusIdAsync(strClientAusId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIsAssestDataRequestedForAusIdAsync(ByVal strClientAusId As String, ByVal _key As String, ByVal userState As Object)
            If (Me.CheckIsAssestDataRequestedForAusIdOperationCompleted Is Nothing) Then
                Me.CheckIsAssestDataRequestedForAusIdOperationCompleted = AddressOf Me.OnCheckIsAssestDataRequestedForAusIdOperationCompleted
            End If
            Me.InvokeAsync("CheckIsAssestDataRequestedForAusId", New Object() {strClientAusId, _key}, Me.CheckIsAssestDataRequestedForAusIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIsAssestDataRequestedForAusIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsAssestDataRequestedForAusIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsAssestDataRequestedForAusIdCompleted(Me, New CheckIsAssestDataRequestedForAusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadAssestDataRequestDetails", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadAssestDataRequestDetails(ByVal strClientAusId As String, ByVal _key As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadAssestDataRequestDetails", New Object() {strClientAusId, _key})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadAssestDataRequestDetailsAsync(ByVal strClientAusId As String, ByVal _key As String)
            Me.DownloadAssestDataRequestDetailsAsync(strClientAusId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadAssestDataRequestDetailsAsync(ByVal strClientAusId As String, ByVal _key As String, ByVal userState As Object)
            If (Me.DownloadAssestDataRequestDetailsOperationCompleted Is Nothing) Then
                Me.DownloadAssestDataRequestDetailsOperationCompleted = AddressOf Me.OnDownloadAssestDataRequestDetailsOperationCompleted
            End If
            Me.InvokeAsync("DownloadAssestDataRequestDetails", New Object() {strClientAusId, _key}, Me.DownloadAssestDataRequestDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadAssestDataRequestDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadAssestDataRequestDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadAssestDataRequestDetailsCompleted(Me, New DownloadAssestDataRequestDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/SendAssestRequestedData", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendAssestRequestedData(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ResponseXmlStream() As Byte, ByVal Key As String)
            Me.Invoke("SendAssestRequestedData", New Object() {ResponseXmlStream, Key})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAssestRequestedDataAsync(ByVal ResponseXmlStream() As Byte, ByVal Key As String)
            Me.SendAssestRequestedDataAsync(ResponseXmlStream, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAssestRequestedDataAsync(ByVal ResponseXmlStream() As Byte, ByVal Key As String, ByVal userState As Object)
            If (Me.SendAssestRequestedDataOperationCompleted Is Nothing) Then
                Me.SendAssestRequestedDataOperationCompleted = AddressOf Me.OnSendAssestRequestedDataOperationCompleted
            End If
            Me.InvokeAsync("SendAssestRequestedData", New Object() {ResponseXmlStream, Key}, Me.SendAssestRequestedDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendAssestRequestedDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendAssestRequestedDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendAssestRequestedDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/SendProviderLicenseData", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendProviderLicenseData(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ResponseXmlStream() As Byte, ByVal Key As String) As Boolean
            Dim results() As Object = Me.Invoke("SendProviderLicenseData", New Object() {ResponseXmlStream, Key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendProviderLicenseDataAsync(ByVal ResponseXmlStream() As Byte, ByVal Key As String)
            Me.SendProviderLicenseDataAsync(ResponseXmlStream, Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendProviderLicenseDataAsync(ByVal ResponseXmlStream() As Byte, ByVal Key As String, ByVal userState As Object)
            If (Me.SendProviderLicenseDataOperationCompleted Is Nothing) Then
                Me.SendProviderLicenseDataOperationCompleted = AddressOf Me.OnSendProviderLicenseDataOperationCompleted
            End If
            Me.InvokeAsync("SendProviderLicenseData", New Object() {ResponseXmlStream, Key}, Me.SendProviderLicenseDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendProviderLicenseDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendProviderLicenseDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendProviderLicenseDataCompleted(Me, New SendProviderLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/DownloadServicesDataRequestDetails", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadServicesDataRequestDetails(ByVal strClientAusId As String, ByVal _key As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DownloadServicesDataRequestDetails", New Object() {strClientAusId, _key})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadServicesDataRequestDetailsAsync(ByVal strClientAusId As String, ByVal _key As String)
            Me.DownloadServicesDataRequestDetailsAsync(strClientAusId, _key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadServicesDataRequestDetailsAsync(ByVal strClientAusId As String, ByVal _key As String, ByVal userState As Object)
            If (Me.DownloadServicesDataRequestDetailsOperationCompleted Is Nothing) Then
                Me.DownloadServicesDataRequestDetailsOperationCompleted = AddressOf Me.OnDownloadServicesDataRequestDetailsOperationCompleted
            End If
            Me.InvokeAsync("DownloadServicesDataRequestDetails", New Object() {strClientAusId, _key}, Me.DownloadServicesDataRequestDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadServicesDataRequestDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadServicesDataRequestDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadServicesDataRequestDetailsCompleted(Me, New DownloadServicesDataRequestDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/SendServicesRequestedData", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SendServicesRequestedData(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal ResponseXmlStream() As Byte)
            Me.Invoke("SendServicesRequestedData", New Object() {ResponseXmlStream})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendServicesRequestedDataAsync(ByVal ResponseXmlStream() As Byte)
            Me.SendServicesRequestedDataAsync(ResponseXmlStream, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendServicesRequestedDataAsync(ByVal ResponseXmlStream() As Byte, ByVal userState As Object)
            If (Me.SendServicesRequestedDataOperationCompleted Is Nothing) Then
                Me.SendServicesRequestedDataOperationCompleted = AddressOf Me.OnSendServicesRequestedDataOperationCompleted
            End If
            Me.InvokeAsync("SendServicesRequestedData", New Object() {ResponseXmlStream}, Me.SendServicesRequestedDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendServicesRequestedDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendServicesRequestedDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendServicesRequestedDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://ophit.net/AgingData", RequestNamespace:="https://ophit.net/", ResponseNamespace:="https://ophit.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AgingData(ByVal data As RequestData)
            Me.Invoke("AgingData", New Object() {data})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgingDataAsync(ByVal data As RequestData)
            Me.AgingDataAsync(data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgingDataAsync(ByVal data As RequestData, ByVal userState As Object)
            If (Me.AgingDataOperationCompleted Is Nothing) Then
                Me.AgingDataOperationCompleted = AddressOf Me.OnAgingDataOperationCompleted
            End If
            Me.InvokeAsync("AgingData", New Object() {data}, Me.AgingDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgingDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgingDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgingDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://ophit.net/")>  _
    Partial Public Class AgingReportData
        
        Private practiceNameField As String
        
        Private agingDateField As Date
        
        Private reporttypeField As String
        
        Private aging_0_30Field As Decimal
        
        Private aging_31_60Field As Decimal
        
        Private aging_61_90Field As Decimal
        
        Private aging_91_120Field As Decimal
        
        Private aging_120Field As Decimal
        
        '''<remarks/>
        Public Property PracticeName() As String
            Get
                Return Me.practiceNameField
            End Get
            Set
                Me.practiceNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AgingDate() As Date
            Get
                Return Me.agingDateField
            End Get
            Set
                Me.agingDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Reporttype() As String
            Get
                Return Me.reporttypeField
            End Get
            Set
                Me.reporttypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Aging_0_30() As Decimal
            Get
                Return Me.aging_0_30Field
            End Get
            Set
                Me.aging_0_30Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Aging_31_60() As Decimal
            Get
                Return Me.aging_31_60Field
            End Get
            Set
                Me.aging_31_60Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Aging_61_90() As Decimal
            Get
                Return Me.aging_61_90Field
            End Get
            Set
                Me.aging_61_90Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Aging_91_120() As Decimal
            Get
                Return Me.aging_91_120Field
            End Get
            Set
                Me.aging_91_120Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Aging_120() As Decimal
            Get
                Return Me.aging_120Field
            End Get
            Set
                Me.aging_120Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1067.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://ophit.net/")>  _
    Partial Public Class RequestData
        
        Private practiceNameField As String
        
        Private reportNameField As String
        
        Private dataValueField() As AgingReportData
        
        '''<remarks/>
        Public Property PracticeName() As String
            Get
                Return Me.practiceNameField
            End Get
            Set
                Me.practiceNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReportName() As String
            Get
                Return Me.reportNameField
            End Get
            Set
                Me.reportNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DataValue() As AgingReportData()
            Get
                Return Me.dataValueField
            End Get
            Set
                Me.dataValueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub DownloadProductUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadProductUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadProductUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub DownloadProductUpdate_70v1CompletedEventHandler(ByVal sender As Object, ByVal e As DownloadProductUpdate_70v1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadProductUpdate_70v1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetInstalogRequestsCompletedEventHandler(ByVal sender As Object, ByVal e As GetInstalogRequestsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInstalogRequestsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetInstaLogStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetInstaLogStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInstaLogStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub RecieveLogFileCompletedEventHandler(ByVal sender As Object, ByVal e As RecieveLogFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecieveLogFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetFtpCredentialsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFtpCredentialsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFtpCredentialsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetFtpPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As GetFtpPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFtpPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetFtpDownloadPathCompletedEventHandler(ByVal sender As Object, ByVal e As GetFtpDownloadPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFtpDownloadPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub InsertUpdateDownloadDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUpdateDownloadDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUpdateDownloadDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub UpdateInstalledStatusDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateInstalledStatusDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateInstalledStatusDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub LogUpdateDownloadDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As LogUpdateDownloadDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogUpdateDownloadDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub LogUpdateDownloadDetailsV2CompletedEventHandler(ByVal sender As Object, ByVal e As LogUpdateDownloadDetailsV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogUpdateDownloadDetailsV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub LogUpdateInstallDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As LogUpdateInstallDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogUpdateInstallDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CheckAusIDExistCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAusIDExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckAusIDExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub ValidateLicenseKeyCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateLicenseKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateLicenseKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub LogUpdateInfoForManualProcessCompletedEventHandler(ByVal sender As Object, ByVal e As LogUpdateInfoForManualProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogUpdateInfoForManualProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub LogUpdateInfoForManualProcessV2CompletedEventHandler(ByVal sender As Object, ByVal e As LogUpdateInfoForManualProcessV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogUpdateInfoForManualProcessV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetFtpCredentialsForDrugAndICD9CPTCompletedEventHandler(ByVal sender As Object, ByVal e As GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFtpCredentialsForDrugAndICD9CPTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetProductIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub GetFtpDownloadPathForDrugAndICD9CPTCompletedEventHandler(ByVal sender As Object, ByVal e As GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFtpDownloadPathForDrugAndICD9CPTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub CheckIsAssestDataRequestedForAusIdCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsAssestDataRequestedForAusIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIsAssestDataRequestedForAusIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub DownloadAssestDataRequestDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadAssestDataRequestDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadAssestDataRequestDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendAssestRequestedDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendProviderLicenseDataCompletedEventHandler(ByVal sender As Object, ByVal e As SendProviderLicenseDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendProviderLicenseDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub DownloadServicesDataRequestDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadServicesDataRequestDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadServicesDataRequestDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub SendServicesRequestedDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")>  _
    Public Delegate Sub AgingDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
