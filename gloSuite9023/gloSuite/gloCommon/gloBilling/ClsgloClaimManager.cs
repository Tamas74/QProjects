using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Windows.Forms;
using System.Collections;
using Edidev.FrameworkEDI;
using gloBilling.Common;
using gloAppointmentBook.Books;
using System.IO;


namespace gloBilling
{
    public partial class gloClaimManager
    {
        #region " Variable Declarations "

        System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
        private string _databaseconnectionstring = "";
        private string _emrdatabaseconnectionstring = "";
        private string _messageBoxCaption = "";
        private Int64 _ClinicID = 0;
        private Int64 _UserID = 0;
        private string _UserName = "";
        private string _serverPath = "";
        public string sSEFPath = "";

        //Rendering Provider
        private string _RenderingFName = "";
        private string _RenderingLName = "";
        private string _RenderingMName = "";
        private string _RenderingAddress = "";
        private string _RenderingCity = "";
        private string _RenderingState = "";
        private string _RenderingZIP = "";
        private string _RenderingNPI = "";
        private string _RenderingSSN = "";
        private string _RenderingEmployerID = "";
        private string _RenderingStateMedicalNo = "";
        private string _RenderingTaxonomy = "";

        #endregion

        #region Enum

        //MaheshB 20091109 
        //Enums Like B0x32 and Box31 Settings

        public enum AddressType
        {
            None = 0,
            ProviderAddress = 1,
            FacilityAddress = 2,
            ClinicAddress = 3
        }

        public enum NPIType
        {
            None = 0,
            BillingProviderNPI = 1,
            FacilityNPI = 2,
            ClinicNPI = 3,
        }


        #endregion

        #region " Private and Public Variables for EDI"

      //  private Int64 _BatchID = 0;
        private Int32 nHlCount = 0;
        private Int32 nHlProvParent = 0;
        private Int32 nHlSubscriberParent = 0;
        private Int32 iItemCount = 0;
        //gloPatient.Referrals oReferral = new gloPatient.Referrals();
        //ediDocument oEdiDoc = null;
        //ediInterchange oInterchange = null;
        //ediGroup oGroup = null;
        //ediTransactionSet oTransactionset = null;
        //ediDataSegment oSegment = null;
        //ediSchema oSchema = null;
        //ediSchemas oSchemas = null;
        //ediWarnings oWarnings = null;
        //ediWarning oWarning = null;

        //string sSEFFile = "";
        //string sEdiFile = "";
        //string sPath = "";

        //string sSEFFile1 = "";
        //string sEdiFile1 = "";
      //  private bool bSecondaryInsurance = false;
        //private bool _IsSEFPresent = true;

        //ediAcknowledgment oAck = null;




        //Billing Provider Address Type
    //    private AddressType _BillingAddressType = AddressType.None;
        //Billing Provider NPI
   //     private NPIType _Billing_A_NPI = NPIType.None;
   //     private AddressType _FacilityAddressType = AddressType.None;
        //Billing Provider NPI
   //     private NPIType _Facility_A_NPI = NPIType.None;
  //      private NPIType _Facility_B_NPI = NPIType.None;

        bool _IsAccessAssignment = false;
    //    bool _bIncludeTaxonomyForElectronic = false;
        string _sClaimOfficeNumber = String.Empty;

        //MaheshB 02182010
     //   string _CompanyName = "";

        ////Added By MaheshB For Saving group Control Numberfor comparison with 997 Acknowledgment
        //string _ 

        #endregion " Private and Public Variables for EDI"

        #region " Property Procedures "

        public Int64 ClinicID
        {
            get { return _ClinicID; }
            set { _ClinicID = value; }
        }

        public string ServerPath
        {
            get { return _serverPath; }
            set { _serverPath = value; }
        }

        public Int64 UserID
        {
            get { return _UserID; }
            set { _UserID = value; }
        }

        public string UserName
        {
            get { return _UserName; }
            set { _UserName = value; }
        }

        #endregion " Property Procedures "

        #region " Delegates "

        public delegate void OnFileProcessed(string fileName, string PatientName, int TotalFiles, int CurrentFileCounter);
        public event OnFileProcessed On_FileProcessed;

        #endregion

        #region "Constructor & Destructor"

        public gloClaimManager(string DatabaseConnectionString, string EMRDatabaseConnectionString)
        {
            _databaseconnectionstring = DatabaseConnectionString;
            _emrdatabaseconnectionstring = EMRDatabaseConnectionString;

            #region " Retrive ClinicID from appsettings "

            if (appSettings["ClinicID"] != null)
            {
                if (appSettings["ClinicID"] != "")
                { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
                else { _ClinicID = 0; }
            }
            else
            { _ClinicID = 0; }

            #endregion " Retrive ClinicID from appsettings "

            #region " Retrive UserID from appSettings "

            if (appSettings["UserID"] != null)
            {
                if (appSettings["UserID"] != "")
                {
                    _UserID = Convert.ToInt64(appSettings["UserID"]);
                }
            }
            else
            {
                _UserID = 0;
            }

            #endregion

            #region " Retrive UserName from appSettings "

            if (appSettings["UserName"] != null)
            {
                if (appSettings["UserName"] != "")
                {
                    _UserName = Convert.ToString(appSettings["UserName"]);
                }
            }
            else
            {
                _UserName = "";
            }

            #endregion

            #region " Retrieve MessageBoxCaption from AppSettings "

            if (appSettings["MessageBOXCaption"] != null)
            {
                if (appSettings["MessageBOXCaption"] != "")
                {
                    _messageBoxCaption = Convert.ToString(appSettings["MessageBOXCaption"]);
                }
                else
                {
                    _messageBoxCaption = "";
                }
            }
            else
            { _messageBoxCaption = ""; }

            #endregion

            sSEFPath = AppDomain.CurrentDomain.BaseDirectory;

            //GetServerPath(); // SUDHIR 20100213 // 

        }

        private bool disposed = false;

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {

                }
            }
            disposed = true;
        }

        ~gloClaimManager()
        {
            Dispose(false);
        }

        #endregion

        #region " Private & Public Methods "
        //int RetriveNoOfRecords_Min1ToAll
        public DataTable GetTransactions()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtCharges = null;
            string _sqlQuery = "";
            string _selCol = "Select";
            string _StatusIcon = "StsIcon";
            try
            {
                //...Method to load only the Transacted Charges
                oDB.Connect(false);
                _sqlQuery = " SELECT  DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = ''," +
                " case len(BL_Transaction_MST.nClaimNo) " +
                " when 5 then convert(varchar, BL_Transaction_MST.nClaimNo) " +
                " when 4 then '0' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
                " when 3 then '00' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
                " when 2 then '000' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
                " when 1 then convert(varchar, '0000' + convert(varchar,BL_Transaction_MST.nClaimNo)) " +
                " end AS Claim , " +
                " BL_Transaction_MST.nClaimNo AS ClaimNo ," +
                " BL_Transaction_MST.nTransactionID,BL_Transaction_MST.nTransactionDate, " +
                " CONVERT(VARCHAR,CONVERT(DateTime,CONVERT(VARCHAR,BL_Transaction_MST.nTransactionDate),101),101) AS Date, " +
                " BL_Transaction_MST.nPatientID,Patient.sPatientCode as Code, " +
                " ISNULL(Patient.sFirstName,'')+SPACE(1)+ISNULL(Patient.sMiddleName,'')+SPACE(1)+ISNULL(Patient.sLastName,'') AS PatientName, " +
                " ISNULL(Patient.sFirstName,'') AS FirstName, " +
                " ISNULL(Patient.sMiddleName,'') AS MI,ISNULL(Patient.sLastName,'') AS LastName, " +
                " ISNULL(Patient.nSSN,'') AS nPatientSSN, " +
                " BL_Transaction_MST.nTransactionProviderID, " +
                " ISNULL(Provider_MST.sFirstName,'')+SPACE(1)+ISNULL(Provider_MST.sMiddleName,'')+SPACE(1)+ISNULL(Provider_MST.sLastName,'') AS ProviderName, " +
                " ISNULL(Provider_MST.sFirstName,'') AS ProviderFName, " +
                " ISNULL(Provider_MST.sMiddleName,'') AS ProviderMName,ISNULL(Provider_MST.sLastName,'') AS ProviderLName, " +
                " ISNULL(BL_Transaction_MST.sFacilityCode,'') AS sFacilityCode, " +
                " ISNULL(BL_Transaction_MST.sFacilityDescription,'') AS Facility, " +
                " ISNULL(BL_Transaction_MST.nSendCounter,0) AS nSendCounter, " +
                " ISNULL(BL_Transaction_MST.nSendToRejection,0) AS nSendToRejection, " +
                " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sSubscriberID,'') AS InsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceID, " +
                " ( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceID, 0) AS PatientInsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS PatientInsuranceID, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sInsuranceName,'') AS LineInsuranceName FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceName, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceFlag,0) AS LineInsuranceFlag FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceFlag, " +


                " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, " +

                " case ISNULL(BL_Transaction_MST.nTransactionStatusID,0) " +
                " when 0 then 'None' " +
                " when 1 then 'Transacted' " +
                " when 2 then 'Queue' " +
                " when 3 then 'Batch' " +
                " when 4 then 'Send' " +
                " when 5 then 'Rejected' " +
                " when 6 then 'Accepted' " +
                " when 7 then 'ReQueue' " +
                " when 8 then 'ReBatch' " +
                " when 9 then 'ReSend' " +
                " when 10 then 'FullyPaid' " +
                " when 11 then 'PartialPaid' " +
                " when 12 then 'Hold ' " +
                " when 13 then 'Challenge' " +
                " when 14 then 'Alert' " +
                " when 15 then 'Pending' " +
                " when 16 then 'SendToClaimManager' " +
                " when 17 then 'SendToClearingHouse' " +
                " end AS Status " +

                " FROM BL_Transaction_MST WITH(NOLOCK) LEFT OUTER JOIN " +
                " Provider_MST WITH(NOLOCK) ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
                " Patient WITH(NOLOCK) ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
                " WHERE " +
                " BL_Transaction_MST.nTransactionStatusID = " + TransactionStatus.Transacted.GetHashCode() + " AND " +
                " BL_Transaction_MST.nClinicID = " + this.ClinicID + " ORDER BY BL_Transaction_MST.nTransactionDate desc";

                oDB.Retrive_Query(_sqlQuery, out dtCharges);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }

        public DataTable GetTransactions(TransactionStatus oTrnStatus)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtCharges = null;
            string _sqlQuery = "";
            string _selCol = "Select";
            string _StatusIcon = "StsIcon";
            try
            {
                oDB.Connect(false);

                _sqlQuery = " SELECT  DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = ''," +
                " case len(BL_Transaction_MST.nClaimNo) " +
                " when 5 then convert(varchar, BL_Transaction_MST.nClaimNo) " +
                " when 4 then '0' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
                " when 3 then '00' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
                " when 2 then '000' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
                " when 1 then convert(varchar, '0000' + convert(varchar,BL_Transaction_MST.nClaimNo)) " +
                " end AS Claim , " +
                " BL_Transaction_MST.nClaimNo AS ClaimNo ," +
                " BL_Transaction_MST.nTransactionID,BL_Transaction_MST.nTransactionDate, " +
                " CONVERT(VARCHAR,CONVERT(DateTime,CONVERT(VARCHAR,BL_Transaction_MST.nTransactionDate),101),101) AS Date, " +
                " BL_Transaction_MST.nPatientID,Patient.sPatientCode as Code, " +
                " ISNULL(Patient.sFirstName,'')+SPACE(1)+ISNULL(Patient.sMiddleName,'')+SPACE(1)+ISNULL(Patient.sLastName,'') AS PatientName, " +
                " ISNULL(Patient.sFirstName,'') AS FirstName, " +
                " ISNULL(Patient.sMiddleName,'') AS MI,ISNULL(Patient.sLastName,'') AS LastName, " +
                " ISNULL(Patient.nSSN,'') AS nPatientSSN, " +
                " BL_Transaction_MST.nTransactionProviderID, " +
                " ISNULL(Provider_MST.sFirstName,'')+SPACE(1)+ISNULL(Provider_MST.sMiddleName,'')+SPACE(1)+ISNULL(Provider_MST.sLastName,'') AS ProviderName, " +
                " ISNULL(Provider_MST.sFirstName,'') AS ProviderFName, " +
                " ISNULL(Provider_MST.sMiddleName,'') AS ProviderMName,ISNULL(Provider_MST.sLastName,'') AS ProviderLName, " +
                " ISNULL(BL_Transaction_MST.sFacilityCode,'') AS sFacilityCode, " +
                " ISNULL(BL_Transaction_MST.sFacilityDescription,'') AS Facility, " +
                " ISNULL(BL_Transaction_MST.nSendCounter,0) AS nSendCounter, " +
                " ISNULL(BL_Transaction_MST.nSendToRejection,0) AS nSendToRejection, " +
                " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
                " ISNULL(BL_Transaction_Status.nSendToInsuranceID,0) AS nSendToInsuranceID, " +
                " ISNULL(BL_Transaction_Status.nClaimSendType,0) AS nClaimSendType, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sSubscriberID,'') AS InsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceID, " +
                " ( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceID, 0) AS PatientInsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS PatientInsuranceID, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sInsuranceName,'') AS LineInsuranceName FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceName, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceFlag,0) AS LineInsuranceFlag FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceFlag, " +

                    //" ISNULL(BL_Transaction_Status.nBatchID,0) AS nBatchID " +
                " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, " +

                " case ISNULL(BL_Transaction_MST.nTransactionStatusID,0) " +
                " when 0 then 'None' " +
                " when 1 then 'Transacted' " +
                " when 2 then 'Queue' " +
                " when 3 then 'Batch' " +
                " when 4 then 'Send' " +
                " when 5 then 'Rejected' " +
                " when 6 then 'Accepted' " +
                " when 7 then 'ReQueue' " +
                " when 8 then 'ReBatch' " +
                " when 9 then 'ReSend' " +
                " when 10 then 'FullyPaid' " +
                " when 11 then 'PartialPaid' " +
                " when 12 then 'Hold ' " +
                " when 13 then 'Challenge' " +
                " when 14 then 'Alert' " +
                " when 15 then 'Pending' " +
                " when 16 then 'SendToClaimManager' " +
                " when 17 then 'SendToClearingHouse' " +
                " end AS Status " +

                " FROM BL_Transaction_MST WITH(NOLOCK) INNER JOIN " +
                " BL_Transaction_Status WITH(NOLOCK) ON BL_Transaction_MST.nLastStatusId = BL_Transaction_Status.nStatusID LEFT OUTER JOIN " +
                " Provider_MST WITH(NOLOCK) ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
                " Patient WITH(NOLOCK) ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
                " WHERE " +
                " BL_Transaction_MST.nTransactionStatusID = " + oTrnStatus.GetHashCode() + "" +
                " AND BL_Transaction_MST.nClinicID = " + this.ClinicID + " ";


                oDB.Retrive_Query(_sqlQuery, out dtCharges);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }

        public DataTable GetTransactions(Int64 Batchid, TransactionStatus oStatus)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtCharges = null;
            string _sqlQuery = "";
            string _selCol = "Select";
            string _StatusIcon = "StsIcon";

            try
            {
                oDB.Connect(false);


                _sqlQuery = " SELECT DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = '', " +
                " CASE len(BL_Transaction_MST.nClaimNo) " +
                " WHEN 5 THEN CONVERT(varchar, BL_Transaction_MST.nClaimNo) " +
                " WHEN 4 THEN '0' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 3 THEN '00' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 2 THEN '000' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 1 THEN CONVERT(varchar, '0000' + CONVERT(varchar,BL_Transaction_MST.nClaimNo)) END AS Claim, " +
                " BL_Transaction_MST.nClaimNo AS ClaimNo, BL_Transaction_MST.nTransactionID,  " +
                " BL_Transaction_MST.nTransactionDate, CONVERT(VARCHAR, CONVERT(DateTime, CONVERT(VARCHAR, BL_Transaction_MST.nTransactionDate),101), 101) AS Date,  " +
                " BL_Transaction_MST.nPatientID, Patient.sPatientCode AS Code, ISNULL(Patient.sFirstName, '') + SPACE(1)  " +
                " + ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '') AS PatientName, ISNULL(Patient.sFirstName, '') AS FirstName,  " +
                " ISNULL(Patient.sMiddleName, '') AS MI, ISNULL(Patient.sLastName, '') AS LastName, ISNULL(Patient.nSSN, '') AS nPatientSSN,  " +
                " BL_Transaction_MST.nTransactionProviderID, ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1)  " +
                " + ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,  " +
                " ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName,  " +
                " ISNULL(BL_Transaction_MST.sFacilityCode, '') AS sFacilityCode, ISNULL(BL_Transaction_MST.sFacilityDescription, '') AS Facility,  " +
                " ISNULL(BL_Transaction_MST.nSendCounter, 0) AS nSendCounter,  " +
                " ISNULL(BL_Transaction_MST.nSendToRejection, 0) AS nSendToRejection , " +
                " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
                " ISNULL(BL_Transaction_Status.nSendToInsuranceID,0) AS nSendToInsuranceID, " +
                " ISNULL(BL_Transaction_Status.nClaimSendType,0) AS nClaimSendType, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sSubscriberID,'') AS InsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceID, " +
                 " ( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceID, 0) AS PatientInsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS PatientInsuranceID , " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sInsuranceName,'') AS LineInsuranceName FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceName, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceFlag,0) AS LineInsuranceFlag FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceFlag, " +

                    //" ISNULL(BL_Transaction_Status.nBatchID,0) AS nBatchID "+

                " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, " +

                " case ISNULL(BL_Transaction_MST.nTransactionStatusID,0) " +
                " when 0 then 'None' " +
                " when 1 then 'Transacted' " +
                " when 2 then 'Queue' " +
                " when 3 then 'Batch' " +
                " when 4 then 'Send' " +
                " when 5 then 'Rejected' " +
                " when 6 then 'Accepted' " +
                " when 7 then 'ReQueue' " +
                " when 8 then 'ReBatch' " +
                " when 9 then 'ReSend' " +
                " when 10 then 'FullyPaid' " +
                " when 11 then 'PartialPaid' " +
                " when 12 then 'Hold ' " +
                " when 13 then 'Challenge' " +
                " when 14 then 'Alert' " +
                " when 15 then 'Pending' " +
                " when 16 then 'SendToClaimManager' " +
                " when 17 then 'SendToClearingHouse' " +
                " end AS Status " +

                " FROM BL_Transaction_MST WITH(NOLOCK) INNER JOIN " +
                " BL_Transaction_Status WITH(NOLOCK) ON BL_Transaction_MST.nLastStatusId = BL_Transaction_Status.nStatusID LEFT OUTER JOIN " +
                " Provider_MST WITH(NOLOCK) ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
                " Patient WITH(NOLOCK) ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
                " WHERE     (BL_Transaction_MST.nClinicID = " + this.ClinicID + ")  " +
                " AND (BL_Transaction_Status.nBatchID = " + Batchid + ")  " +
                " AND (BL_Transaction_Status.nStatus = " + oStatus.GetHashCode() + ")  " +
                " AND (BL_Transaction_MST.nTransactionStatusID = " + oStatus.GetHashCode() + ") " +
                " ORDER BY BL_Transaction_MST.nTransactionDate DESC ";

                oDB.Retrive_Query(_sqlQuery, out dtCharges);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }

        public DataTable GetBatchTransactions(Int64 BatchId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtCharges = null;
            string _sqlQuery = "";
            string _selCol = "Select";
            string _StatusIcon = "StsIcon";
            try
            {
                oDB.Connect(false);


                _sqlQuery = " SELECT DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = '', " +
                " CASE len(BL_Transaction_MST.nClaimNo) " +
                " WHEN 5 THEN CONVERT(varchar, BL_Transaction_MST.nClaimNo) " +
                " WHEN 4 THEN '0' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 3 THEN '00' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 2 THEN '000' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 1 THEN CONVERT(varchar, '0000' + CONVERT(varchar,BL_Transaction_MST.nClaimNo)) END AS Claim, " +
                " BL_Transaction_MST.nClaimNo AS ClaimNo, BL_Transaction_MST.nTransactionID,  " +
                " BL_Transaction_MST.nTransactionDate, CONVERT(VARCHAR, CONVERT(DateTime, CONVERT(VARCHAR, BL_Transaction_MST.nTransactionDate),101), 101) AS Date,  " +
                " BL_Transaction_MST.nPatientID, Patient.sPatientCode AS Code, ISNULL(Patient.sFirstName, '') + SPACE(1)  " +
                " + ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '') AS PatientName, ISNULL(Patient.sFirstName, '') AS FirstName,  " +
                " ISNULL(Patient.sMiddleName, '') AS MI, ISNULL(Patient.sLastName, '') AS LastName, ISNULL(Patient.nSSN, '') AS nPatientSSN,  " +
                " BL_Transaction_MST.nTransactionProviderID, ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1)  " +
                " + ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,  " +
                " ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName,  " +
                " ISNULL(BL_Transaction_MST.sFacilityCode, '') AS sFacilityCode, ISNULL(BL_Transaction_MST.sFacilityDescription, '') AS Facility,  " +
                " ISNULL(BL_Transaction_MST.nSendCounter, 0) AS nSendCounter,  " +
                " ISNULL(BL_Transaction_MST.nSendToRejection, 0) AS nSendToRejection , " +
                " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
                " ISNULL(BL_Transaction_Status.nSendToInsuranceID,0) AS nSendToInsuranceID, " +
                " ISNULL(BL_Transaction_Status.nClaimSendType,0) AS nClaimSendType, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sSubscriberID,'') AS InsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceID, " +
                 " ( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceID, 0) AS PatientInsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS PatientInsuranceID, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sInsuranceName,'') AS LineInsuranceName FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceName, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceFlag,0) AS LineInsuranceFlag FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceFlag, " +


                 " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, " +

                " case ISNULL(BL_Transaction_MST.nTransactionStatusID,0) " +
                " when 0 then 'None' " +
                " when 1 then 'Transacted' " +
                " when 2 then 'Queue' " +
                " when 3 then 'Batch' " +
                " when 4 then 'Send' " +
                " when 5 then 'Rejected' " +
                " when 6 then 'Accepted' " +
                " when 7 then 'ReQueue' " +
                " when 8 then 'ReBatch' " +
                " when 9 then 'ReSend' " +
                " when 10 then 'FullyPaid' " +
                " when 11 then 'PartialPaid' " +
                " when 12 then 'Hold ' " +
                " when 13 then 'Challenge' " +
                " when 14 then 'Alert' " +
                " when 15 then 'Pending' " +
                " when 16 then 'SendToClaimManager' " +
                " when 17 then 'SendToClearingHouse' " +
                " end AS Status " +

                " FROM BL_Transaction_MST WITH(NOLOCK) INNER JOIN " +
                " BL_Transaction_Status WITH(NOLOCK) ON BL_Transaction_MST.nLastStatusId = BL_Transaction_Status.nStatusID LEFT OUTER JOIN " +
                " Provider_MST WITH(NOLOCK) ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
                " Patient WITH(NOLOCK) ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
                " WHERE     (BL_Transaction_MST.nClinicID = " + this.ClinicID + ")  " +
                " AND (BL_Transaction_Status.nBatchID = " + BatchId + ")  " +
                " AND (BL_Transaction_Status.nStatus IN (" + TransactionStatus.Batch.GetHashCode() + "," + TransactionStatus.ReBatch.GetHashCode() + "," + TransactionStatus.SendToClaimManager.GetHashCode() + "," + TransactionStatus.SendToClearingHouse.GetHashCode() + ") )  " +
                " AND (BL_Transaction_MST.nTransactionStatusID IN (" + TransactionStatus.Batch.GetHashCode() + "," + TransactionStatus.ReBatch.GetHashCode() + "," + TransactionStatus.SendToClaimManager.GetHashCode() + "," + TransactionStatus.SendToClearingHouse.GetHashCode() + ")  ) " +
                " ORDER BY BL_Transaction_MST.nTransactionDate DESC ";

                oDB.Retrive_Query(_sqlQuery, out dtCharges);

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }

        public DataTable GetAllBatchTransactions()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtCharges = null;
            string _sqlQuery = "";
            string _selCol = "Select";
            string _StatusIcon = "StsIcon";
            try
            {
                oDB.Connect(false);


                _sqlQuery = " SELECT DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = '', " +
                " CASE len(BL_Transaction_MST.nClaimNo) " +
                " WHEN 5 THEN CONVERT(varchar, BL_Transaction_MST.nClaimNo) " +
                " WHEN 4 THEN '0' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 3 THEN '00' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 2 THEN '000' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
                " WHEN 1 THEN CONVERT(varchar, '0000' + CONVERT(varchar,BL_Transaction_MST.nClaimNo)) END AS Claim, " +
                " BL_Transaction_MST.nClaimNo AS ClaimNo, BL_Transaction_MST.nTransactionID,  " +
                " BL_Transaction_MST.nTransactionDate, CONVERT(VARCHAR, CONVERT(DateTime, CONVERT(VARCHAR, BL_Transaction_MST.nTransactionDate),101), 101) AS Date,  " +
                " BL_Transaction_MST.nPatientID, Patient.sPatientCode AS Code, ISNULL(Patient.sFirstName, '') + SPACE(1)  " +
                " + ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '') AS PatientName, ISNULL(Patient.sFirstName, '') AS FirstName,  " +
                " ISNULL(Patient.sMiddleName, '') AS MI, ISNULL(Patient.sLastName, '') AS LastName, ISNULL(Patient.nSSN, '') AS nPatientSSN,  " +
                " BL_Transaction_MST.nTransactionProviderID, ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1)  " +
                " + ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,  " +
                " ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName,  " +
                " ISNULL(BL_Transaction_MST.sFacilityCode, '') AS sFacilityCode, ISNULL(BL_Transaction_MST.sFacilityDescription, '') AS Facility,  " +
                " ISNULL(BL_Transaction_MST.nSendCounter, 0) AS nSendCounter,  " +
                " ISNULL(BL_Transaction_MST.nSendToRejection, 0) AS nSendToRejection , " +
                " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
                " ISNULL(BL_Transaction_Status.nSendToInsuranceID,0) AS nSendToInsuranceID, " +
                " ISNULL(BL_Transaction_Status.nClaimSendType,0) AS nClaimSendType, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sSubscriberID,'') AS InsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceID, " +
                " ( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceID, 0) AS PatientInsuranceID FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS PatientInsuranceID, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.sInsuranceName,'') AS LineInsuranceName FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceName, " +
                "	( " +
                "	SELECT  DISTINCT TOP 1 ISNULL(PatientInsurance_DTL.nInsuranceFlag,0) AS LineInsuranceFlag FROM BL_Transaction_MST_Ins WITH(NOLOCK) INNER JOIN PatientInsurance_DTL WITH(NOLOCK) ON BL_Transaction_MST_Ins.nInsuranceID = PatientInsurance_DTL.nInsuranceID  " +
                "	WHERE (BL_Transaction_MST_Ins.nTransactionID = BL_Transaction_MST.nTransactionID)  AND (PatientInsurance_DTL.nPatientID = BL_Transaction_MST.nPatientID) AND (BL_Transaction_MST_Ins.nClinicID = " + this.ClinicID + ")  " +
                "	) AS InsuranceFlag, " +


                 " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, " +

                " case ISNULL(BL_Transaction_MST.nTransactionStatusID,0) " +
                " when 0 then 'None' " +
                " when 1 then 'Transacted' " +
                " when 2 then 'Queue' " +
                " when 3 then 'Batch' " +
                " when 4 then 'Send' " +
                " when 5 then 'Rejected' " +
                " when 6 then 'Accepted' " +
                " when 7 then 'ReQueue' " +
                " when 8 then 'ReBatch' " +
                " when 9 then 'ReSend' " +
                " when 10 then 'FullyPaid' " +
                " when 11 then 'PartialPaid' " +
                " when 12 then 'Hold ' " +
                " when 13 then 'Challenge' " +
                " when 14 then 'Alert' " +
                " when 15 then 'Pending' " +
                " when 16 then 'SendToClaimManager' " +
                " when 17 then 'SendToClearingHouse' " +
                " end AS Status " +

                " FROM BL_Transaction_MST WITH(NOLOCK) INNER JOIN " +
                " BL_Transaction_Status WITH(NOLOCK) ON BL_Transaction_MST.nLastStatusId = BL_Transaction_Status.nStatusID LEFT OUTER JOIN " +
                " Provider_MST WITH(NOLOCK) ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
                " Patient WITH(NOLOCK) ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
                " WHERE     (BL_Transaction_MST.nClinicID = " + this.ClinicID + ")  " +
                    //" AND (BL_Transaction_Status.nBatchID = " + BatchId + ")  " +
                " AND (BL_Transaction_Status.nStatus IN (" + TransactionStatus.Batch.GetHashCode() + "," + TransactionStatus.ReBatch.GetHashCode() + "," + TransactionStatus.SendToClaimManager.GetHashCode() + "," + TransactionStatus.SendToClearingHouse.GetHashCode() + ") )  " +
                " AND (BL_Transaction_MST.nTransactionStatusID IN (" + TransactionStatus.Batch.GetHashCode() + "," + TransactionStatus.ReBatch.GetHashCode() + "," + TransactionStatus.SendToClaimManager.GetHashCode() + "," + TransactionStatus.SendToClearingHouse.GetHashCode() + ")  ) " +
                " ORDER BY BL_Transaction_MST.nTransactionDate DESC ";

                oDB.Retrive_Query(_sqlQuery, out dtCharges);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }

        public DataTable GetBatchClaims(string ClaimType, string SearchText, Int64 BatchID, int NoOfClaims, bool NoOfClaimsApplicable, bool ShowAll, bool IsSearching)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
     //       string _sqlQuery = "";
     //       string _selCol = "Select";
      //      string _StatusIcon = "StsIcon";
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@ClaimType", ClaimType, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@SearchText", SearchText, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@BatchID", BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@NoOfClaims", NoOfClaims, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@NoOfClaimsApplicable", NoOfClaimsApplicable, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@ShowAll", ShowAll, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@IsSearching", IsSearching, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Retrive("BL_SELECT_BatchClaims", oDBParameters, out dtCharges);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }


        //MaheshB 20091201 Not Used.

        public DataTable GetCharges()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
     //       string _sqlQuery = "";
      //      string _selCol = "Select";
        //    string _StatusIcon = "StsIcon";
            try
            {
                oDB.Connect(false);
                //oDBParameters.Add("@ClaimType", ClaimType, ParameterDirection.Input, SqlDbType.VarChar);
                //oDBParameters.Add("@SearchText", SearchText, ParameterDirection.Input, SqlDbType.VarChar);
                //oDBParameters.Add("@BatchID", BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDBParameters.Add("@NoOfClaims", NoOfClaims, ParameterDirection.Input, SqlDbType.Int);
                //oDBParameters.Add("@NoOfClaimsApplicable", NoOfClaimsApplicable, ParameterDirection.Input, SqlDbType.Bit);
                //oDBParameters.Add("@ShowAll", ShowAll, ParameterDirection.Input, SqlDbType.Bit);
                //oDBParameters.Add("@IsSearching", IsSearching, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nClaimStatus", ClaimStatus.Open.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@Status", TransactionStatus.Queue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Retrive("BL_SELECT_BatchClaims_New", oDBParameters, out dtCharges);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return dtCharges;
        }


        public DataTable GetMidLevelProviders(Int64 nRenderingProviderID, Int64 nBillingProviderID, Int64 nContactID, Int64 nClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtProviders = null;
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@nRenderingProviderID", nRenderingProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nBillingProviderID", nBillingProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Retrive("GET_PROVIDER_MIDLEVEL_SETTINGS", oDBParameters, out dtProviders);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Dispose(); oDB = null; }
                
            }
            return dtProviders;
        }



        private Int64 GetPrefixTransactionID(Int64 PatientID)
        {
            Int64 _Result = 0;
            string _result = "";
            DateTime _PatientDOB = DateTime.Now;
            DateTime _CurrentDate = DateTime.Now;
            DateTime _BaseDate = Convert.ToDateTime("1/1/1900");

            string strID1 = "";
            string strID2 = "";
            string strID3 = "";

            TimeSpan oTS;

            object _internalresult = null;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            try
            {
                oDB.Connect(false);
                _strSQL = "SELECT dtDOB FROM Patient WITH(NOLOCK) WHERE nPatientID = " + PatientID + "";
                _internalresult = oDB.ExecuteScalar_Query(_strSQL);
                if (_internalresult != null)
                {
                    if (_internalresult.ToString() != null)
                    {
                        if (_internalresult.GetType() != typeof(System.DBNull))
                        {
                            if (_internalresult.ToString() != "")
                            {
                                _PatientDOB = Convert.ToDateTime(_internalresult);
                            }
                        }
                    }
                }
                oDB.Disconnect();

                _result = "";

                oTS = new TimeSpan();
                oTS = _CurrentDate.Subtract(_BaseDate);
                strID1 = oTS.Days.ToString().Replace("-", "");

                oTS = new TimeSpan();
                oTS = _CurrentDate.Subtract(_CurrentDate.Date);
                strID2 = Convert.ToInt32(oTS.TotalSeconds).ToString().Replace("-", "");

                oTS = new TimeSpan();
                oTS = _PatientDOB.Subtract(_BaseDate);
                strID3 = oTS.Days.ToString().Replace("-", "");

                _result = strID1 + strID2 + strID3;

                _Result = Convert.ToInt64(_result);
            }
            catch //(Exception ex)
            {
                return 0;
            }
            finally
            {
                _internalresult = null;
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return _Result;
        }

        public Int64 UpdateTransactionStatus(Int64 patientid, Int64 statusid, Int64 batchid, string batchname, Int64 batchdate, Int32 batchtype, Int64 batchno, Int64 transactionid, Int64 claimno, Int64 transactionlinefrom, Int64 transactionlineto, TransactionStatus status, Int64 statusdate, Int64 statustime, string statusnote, Int64 clinicid, Int64 sendtoinsuranceid, gloPatient.TypeOfBilling sendclaimtype)
        {
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

       //     Int64 _PrefixID = 123;
            Int64 _returnid = 0;
            try
            {
                oDB.Connect(false);

                oDBParameters.Add("@nStatusID", statusid, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchID", batchid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sBatchName", batchname, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nBatchDate", batchdate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchType", batchtype, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nBatchNo", batchno, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", transactionid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClaimNo", claimno, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineFrom", transactionlinefrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineTo", transactionlineto, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nStatus", status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nStatusDate", statusdate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nStatusTime", statustime, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sStatusNote", statusnote, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClinicID", clinicid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nSendToInsuranceID", sendtoinsuranceid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClaimSendType", sendclaimtype.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@PrefixID", GetPrefixTransactionID(patientid), ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_INUP_Transaction_Status", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                _returnid = (Int64)objectID;

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                _returnid = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                _returnid = 0;
            }
            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                objectID = null;
            }
            return _returnid;

        }

        public Int64 UpdateBatchCounter(Int64 batchid, Int64 claimcounter, Int64 clinicid)
        {
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            Int64 _currentcounter = 0;
            Int64 _returnid = 0;

            try
            {
                oDB.Connect(false);
                objectID = oDB.ExecuteScalar_Query("SELECT nClaimCounter FROM BL_Transaction_Batch WITH(NOLOCK) WHERE nBatchID = " + batchid + " AND nClinicID = " + clinicid + "");

                if (objectID != null && objectID.ToString().Trim() != "")
                {
                    _currentcounter = Convert.ToInt64(objectID.ToString().Trim());
                }
                _currentcounter = _currentcounter + claimcounter;
                oDB.Execute_Query("UPDATE BL_Transaction_Batch WITH(READPAST) SET nClaimCounter = " + _currentcounter + " WHERE nBatchID = " + batchid + " AND nClinicID = " + clinicid + "");
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                _returnid = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                _returnid = 0;
            }
            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                objectID = null;
            }
            return _returnid;

        }

        public Int64 UpdateClaimSendType(Int64 statusid, Int64 batchid, Int64 transactionid, Int64 insuranceid, gloPatient.TypeOfBilling sendclaimtype, Int64 clinicid, bool updateinsurance, bool updateboth)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Int64 _returnid = 0;

            try
            {
                oDB.Connect(false);
                if (updateboth == true)
                {
                    _returnid = oDB.Execute_Query("UPDATE BL_Transaction_Status WITH(READPAST) SET nSendToInsuranceID = " + insuranceid + ", nClaimSendType = " + sendclaimtype.GetHashCode() + " " +
                        " WHERE nStatusID = " + statusid + " AND nBatchID = " + batchid + " AND nTransactionID = " + transactionid + " AND nClinicID = " + clinicid + "");
                }
                else
                {
                    if (updateinsurance == true)
                    {
                        _returnid = oDB.Execute_Query("UPDATE BL_Transaction_Status WITH(READPAST) SET nSendToInsuranceID = " + insuranceid + " " +
                        " WHERE nStatusID = " + statusid + " AND nBatchID = " + batchid + " AND nTransactionID = " + transactionid + " AND nClinicID = " + clinicid + "");
                    }
                    else
                    {
                        _returnid = oDB.Execute_Query("UPDATE BL_Transaction_Status WITH(READPAST) SET nClaimSendType = " + sendclaimtype.GetHashCode() + " " +
                        " WHERE nStatusID = " + statusid + " AND nBatchID = " + batchid + " AND nTransactionID = " + transactionid + " AND nClinicID = " + clinicid + "");
                    }
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                _returnid = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                _returnid = 0;
            }
            finally
            {
               if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return _returnid;
        }

        public void UpdateCurrentStatus(Int64 Transactionid, TransactionStatus oStatus, Int64 StatusId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                if (Transactionid > 0)
                {
                    oDB.Connect(false);
                    _sqlQuery = "UPDATE BL_Transaction_MST WITH(READPAST) SET nLastStatusId = " + StatusId + ",nTransactionStatusID = " + oStatus.GetHashCode() + " WHERE nTransactionID = " + Transactionid + " ";
                    oDB.Execute_Query(_sqlQuery);
                    oDB.Disconnect();
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
        }

        public void UpdateCurrentStatus(string Transactionids, TransactionStatus oStatus)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                if (Transactionids.Trim() != "")
                {
                    oDB.Connect(false);
                    _sqlQuery = "UPDATE BL_Transaction_MST WITH(READPAST) SET nTransactionStatusID = " + oStatus.GetHashCode() + " WHERE nTransactionID IN ('" + Transactionids + "') ";
                    oDB.Execute_Query(_sqlQuery);
                    oDB.Disconnect();
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
        }

        public DataTable GetClearingHouse(Int64 PatientId, InsuranceTypeFlag InsuranceType, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtClearingHouse = null;
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                //**Method to retrive the Clearing House details for Patient Insurance
                _sqlQuery = " SELECT BL_ClearingHouse_MST.nClearingHouseID,ISNULL(BL_ClearingHouse_MST.sClearingHouseCode,'') AS sClearingHouseCode,  " +
                " ISNULL(BL_ClearingHouse_MST.sReceiverID,'') AS sReceiverID,ISNULL(BL_ClearingHouse_MST.sReceiverName,'') AS sReceiverName,ISNULL(BL_ClearingHouse_MST.sSubmitterID,'') AS sSubmitterID,  " +
                " ISNULL(BL_ClearingHouse_MST.bIsOneJQulifier,0) AS bIsOneJQulifier,ISNULL(BL_ClearingHouse_MST.sOneJQulifier,0) AS sOneJQulifier,ISNULL(BL_ClearingHouse_MST.bIsSenderCode,'') AS bIsSenderCode, " +
                " ISNULL(BL_ClearingHouse_MST.sSenderCode,'') AS sSenderCode,BL_ClearingHouse_MST.bIsVenderIDCode, BL_ClearingHouse_MST.sVenderIDCode,  " +
                " ISNULL(BL_ClearingHouse_MST.nTypeOfData,0) AS nTypeOfData, " +
                " BL_ClearingHouse_MST.bIsISA,BL_ClearingHouse_MST.nClinicID,ISNULL(BL_ClearingHouse_DTL.sURL,'') AS sURL,ISNULL(BL_ClearingHouse_DTL.sUserName,'') AS sUserName, " +
                " ISNULL(BL_ClearingHouse_DTL.sPassword,'') AS sPassword " +
                " FROM BL_ClearingHouse_DTL WITH(NOLOCK) INNER JOIN " +
                " BL_ClearingHouse_MST WITH(NOLOCK) ON BL_ClearingHouse_DTL.nClearingHouseID = BL_ClearingHouse_MST.nClearingHouseID INNER JOIN " +
                " Patient WITH(NOLOCK) INNER JOIN " +
                " PatientInsurance_DTL WITH(NOLOCK) ON Patient.nPatientID = PatientInsurance_DTL.nPatientID ON  " +
                " BL_ClearingHouse_MST.nClearingHouseID = PatientInsurance_DTL.nClearingHouse " +
                " WHERE     (Patient.nPatientID = " + PatientId + ") AND (PatientInsurance_DTL.nInsuranceFlag = " + InsuranceType.GetHashCode() + ") " +
                " AND (Patient.nClinicID = " + ClinicId + "";

                oDB.Retrive_Query(_sqlQuery, out dtClearingHouse);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtClearingHouse;
        }

        public Int64 GetClearingHouseId(Int64 PatientId, InsuranceTypeFlag InsuranceType, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object retVal = null;
            Int64 _ClearingHouseId = 0;
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                //**Method to retrive the Clearing House Id for Patient Insurance

                _sqlQuery = " SELECT ISNULL(BL_ClearingHouse_MST.nClearingHouseID,'') AS nClearingHouseID " +
                " FROM  BL_ClearingHouse_MST WITH(NOLOCK) INNER JOIN " +
                " Patient WITH(NOLOCK) INNER JOIN " +
                " PatientInsurance_DTL WITH(NOLOCK) ON Patient.nPatientID = PatientInsurance_DTL.nPatientID ON  " +
                " BL_ClearingHouse_MST.nClearingHouseID = PatientInsurance_DTL.nClearingHouse " +
                " WHERE  (Patient.nPatientID = " + PatientId + ") AND (PatientInsurance_DTL.nInsuranceFlag = " + InsuranceType.GetHashCode() + ") " +
                " AND (Patient.nClinicID = " + ClinicId + "";

                retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (retVal != null && retVal != DBNull.Value)
                { _ClearingHouseId = Convert.ToInt64(retVal); }
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                retVal = null;
            }
            return _ClearingHouseId;
        }

        public Int64 InsertUpdateClaimManager(Int64 ManagerId, Int64 BatchId, Int64 TransactionId, Int64 ClaimNumber, Int64 PatientId, Int64 ClearingHouseId, string InterchangeNumber, string TransationSetNumber, string FunctionalGroupNumber, Int64 Date, Int64 Time, Int64 UserId, int ClaimType, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            Object retVal = null;
            Int64 _MangId = 0;

            try
            {
                //nManagerId,nBatchId,nTransactionId,nClaimNumber,nPatientId,nClearingHouseId,sInterchangeNumber,sTransationSetNumber,sFunctionalGroupNumber,nDate,nTime,nUserId,nClinicId
                oDB.Connect(false);

                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nManagerId", ManagerId, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oParameters.Add("@nBatchId", BatchId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionId", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClaimNumber", ClaimNumber, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nPatientId", PatientId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClearingHouseId", ClearingHouseId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sInterchangeNumber", InterchangeNumber, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sTransationSetNumber", TransationSetNumber, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sFunctionalGroupNumber", FunctionalGroupNumber, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nDate", Date, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTime", Time, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nUserId", UserId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClaimType", ClaimType, ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@nClinicId", ClinicId, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_INUP_Transaction_ClaimMgr_MST", oParameters, out retVal);
                oDB.Disconnect();

                if (retVal != null && retVal != DBNull.Value)
                { _MangId = Convert.ToInt64(retVal); }

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                 retVal = null; 
            }

            return _MangId;

        }

        public void SetClaimManagerTVP(Int64 BatchId, Int64 TransactionId, Int64 ClaimNumber, Int64 PatientId,
                                       Int64 ClearingHouseId, string InterchangeNumber, string TransationSetNumber,
                                       string FunctionalGroupNumber, Int64 Date, Int64 Time, Int64 UserId, int ClaimType,
                                       Int64 ClinicId, dsEDIClaimdetails odsEDIClaimDetails)
        {
            try
            {
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows.Add();
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nBatchID"] = BatchId;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nTransactionId"] = TransactionId;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nClaimNumber"] = ClaimNumber;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nPatientId"] = PatientId;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nClearingHouseId"] = ClearingHouseId;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["sInterchangeNumber"] = InterchangeNumber;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["sTransationSetNumber"] = TransationSetNumber;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["sFunctionalGroupNumber"] = FunctionalGroupNumber;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nDate"] = Date;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nTime"] = Time;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nUserId"] = UserId;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nClaimType"] = ClaimType;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].Rows[0]["nClinicId"] = ClinicId;
                odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"].AcceptChanges();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
            }

        }

        public void SetElectronicClaimTVP(Int64 nBatchID, string sBatchName, string s837FilePath, TransactionStatus enmStatus,
                                           BillingType BillingType, Int32 BatchBillingMethod, dsEDIClaimdetails odsEDIClaimDetails)
        {
            try
            {

                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows.Add();
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["nBatchID"] = nBatchID;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["sBatchName"] = sBatchName;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["i837File"] = ConvertFileToBinary(s837FilePath);
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["nStatus"] = Convert.ToInt32(enmStatus.GetHashCode());
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["nUserID"] = _UserID;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["nClinicID"] = 1;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["BillingType"] = Convert.ToInt16(BillingType.GetHashCode());
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["nsendUserID"] = _UserID;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["sSendUserName"] = UserName;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].Rows[0]["nBatchBillingMethod"] = BatchBillingMethod;
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"].AcceptChanges();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {

            }
        }

        public void SetElectronicClaimDetailTVP(gloGeneralItem.gloItems oTrnIds, dsEDIClaimdetails odsEDIClaimDetails)
        {
            DataTable _dtLinesUniqueIds = null;
            try
            {
                //..Get Unique Ids
                _dtLinesUniqueIds = GetUniqueIDsForLines(oTrnIds.Count);

                for (int _counter = 0; _counter < oTrnIds.Count; _counter++)
                {
                    odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].Rows.Add();
                    odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].Rows[_counter]["nDetailID"] = Convert.ToInt64(_dtLinesUniqueIds.Rows[_counter]["ID"]);
                    odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].Rows[_counter]["nClaimNo"] = Convert.ToInt64(oTrnIds[_counter].Code);
                    odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].Rows[_counter]["sSubClaimNumber"] = Convert.ToString(oTrnIds[_counter].Description);
                    odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].Rows[_counter]["nBillingTransactionID"] = Convert.ToInt64(oTrnIds[_counter].ID);
                    odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].Rows[_counter]["nClinicID"] = 1;
                }
                odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"].AcceptChanges();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (_dtLinesUniqueIds != null)
                {
                    _dtLinesUniqueIds.Dispose();
                    _dtLinesUniqueIds = null;
                }
            }
        }

        public void SaveElectronicClaimTVP(dsEDIClaimdetails odsEDIClaimDetails)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;

            try
            {

                if (odsEDIClaimDetails.BL_Transaction_ClaimMgr_MST != null && odsEDIClaimDetails.BL_CMSEDI_ElectronicClaim != null && odsEDIClaimDetails.BL_CMSEDI_ElectronicClaim_DTL != null &&
                    odsEDIClaimDetails.BL_Transaction_ClaimMgr_MST.Rows.Count > 0 && odsEDIClaimDetails.BL_CMSEDI_ElectronicClaim.Rows.Count > 0 && odsEDIClaimDetails.BL_CMSEDI_ElectronicClaim_DTL.Rows.Count > 0)
                {
                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDBParameters = new gloDatabaseLayer.DBParameters();
                    oDB.Connect(false);
                    oDBParameters.Add("@tvpClaimMangr", odsEDIClaimDetails.Tables["BL_Transaction_ClaimMgr_MST"], ParameterDirection.Input, SqlDbType.Structured);
                    oDBParameters.Add("@tvpClaimMST", odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim"], ParameterDirection.Input, SqlDbType.Structured);
                    oDBParameters.Add("@tvpClaim_DTL", odsEDIClaimDetails.Tables["BL_CMSEDI_ElectronicClaim_DTL"], ParameterDirection.Input, SqlDbType.Structured);
                    oDB.Execute("SaveElectronicClaim_TVP", oDBParameters);
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
            }
        }

        public byte[] ConvertFileToBinary(string sFileName)
        {
            if (File.Exists(sFileName) == false)
                return null;
            FileStream oFile = default(FileStream);
            BinaryReader oReader = default(BinaryReader);
            byte[] bytesRead=null;
            try
            {


                //'Please uncomment the following line of code to read the file, even the file is in use by same or another process
                //oFile = New FileStream(strFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite, 8, FileOptions.Asynchronous)

                //'To read the file only when it is not in use by any process
                oFile = new FileStream(sFileName, FileMode.Open, FileAccess.Read);

                oReader = new BinaryReader(oFile);
                bytesRead = oReader.ReadBytes(Convert.ToInt32(oFile.Length));

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                return null;
            }
            finally
            {
                if (oFile != null)
                {
                    oFile.Close();
                    oFile.Dispose();
                    oFile = null;
                }
                if (oReader != null)
                {
                    oReader.Close();
                    oReader.Dispose();
                    oReader = null;
                }
            }
            return bytesRead;
        }

        private DataTable GetUniqueIDsForLines(int claimLinesCount)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            DataTable _dtLineIds = null;

            try
            {

                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@IDCount", claimLinesCount, ParameterDirection.Input, SqlDbType.Int);
                oDB.Connect(false);
                oDB.Retrive("gsp_GetUniqueIDs", oParameters, out _dtLineIds);
                oDB.Disconnect();

                if (_dtLineIds != null && _dtLineIds.Rows.Count > 0)
                {
                    _dtLineIds.Columns.Add("ChargeLineNo");
                    _dtLineIds.AcceptChanges();
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                throw dbEx;
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }

            return _dtLineIds;

        }

        public bool DeleteBatch(Int64 BatchId, Int64 ClinicId) // Not used in PM
        {
            System.Data.SqlClient.SqlConnection _sqlConnection = null;
            System.Data.SqlClient.SqlTransaction _sqlTransaction = null;
            System.Data.SqlClient.SqlCommand _sqlCommand = new System.Data.SqlClient.SqlCommand();
            gloDatabaseLayer.DBLayer oDB = null;

            string _sqlQuery = "";
            string _sbatchtrnsIds = "";
            bool _isBatchDeleted = false;
            DataTable _dtBatchTransactionIDs = null;
            ArrayList _batchTransactionIds = null;
            Int64 _tempTranId = 0;

            try
            {
                if (BatchId > 0)
                {
                    #region " Get TransactionID's againts the Batch "

                    //.1 Get all TransactionID's againts the Batch using BatchId from BL_Transaction_Batch table
                    //. where the Batch is not send yet
                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _sqlQuery = " SELECT DISTINCT ISNULL(BL_Transaction_Status.nTransactionID,0) AS nTransactionID, " +
                    " ISNULL(BL_Transaction_Status.nClaimNo,0) AS nClaimNo " +
                    " FROM BL_Transaction_Batch WITH(NOLOCK) INNER JOIN " +
                    " BL_Transaction_Status WITH(NOLOCK) ON BL_Transaction_Batch.nBatchID = BL_Transaction_Status.nBatchID " +
                    " WHERE " +
                    " (BL_Transaction_Batch.nBatchID = " + BatchId + ") AND  " +
                    " (BL_Transaction_Status.nSendToInsuranceID IS NULL OR BL_Transaction_Status.nSendToInsuranceID <= 0) AND " +
                    "  BL_Transaction_Batch.nClinicID = " + this.ClinicID + "";
                    oDB.Retrive_Query(_sqlQuery, out _dtBatchTransactionIDs);
                    oDB.Disconnect();
                    if (oDB != null) { oDB.Dispose(); oDB = null; }

                    if (_dtBatchTransactionIDs != null && _dtBatchTransactionIDs.Rows.Count > 0)
                    {
                        _batchTransactionIds = new ArrayList();
                        _sbatchtrnsIds = "";
                        for (int dtRowIndex = 0; dtRowIndex < _dtBatchTransactionIDs.Rows.Count; dtRowIndex++)
                        {
                            _tempTranId = Convert.ToInt64(_dtBatchTransactionIDs.Rows[dtRowIndex]["nTransactionID"]);
                            if (_tempTranId > 0)
                            {
                                _sbatchtrnsIds += _tempTranId + ",";
                                _batchTransactionIds.Add(_tempTranId);
                            }
                        }
                        _sbatchtrnsIds = _sbatchtrnsIds.TrimEnd(',');
                    }
                    if (_dtBatchTransactionIDs != null) { _dtBatchTransactionIDs.Dispose(); _dtBatchTransactionIDs = null; }

                    #endregion " Get TransactionID's againts the Batch "

                    if (_batchTransactionIds.Count > 0 && _sbatchtrnsIds.Trim().Length > 0)
                    {
                        _sqlConnection = new System.Data.SqlClient.SqlConnection(_databaseconnectionstring);
                        _sqlConnection.Open();
                        _sqlTransaction = _sqlConnection.BeginTransaction("TransactionDeleteBatch");

                        #region " Update BL_Transaction_DTL "

                        //.2 Update the BL_Transaction_DTL(Transaction Lines) Table for nTransactionLineStatus set to "Transacted"
                        //.. using TransactionID which are not in accept or reject tab
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_Transaction_Lines WITH(READPAST) SET nTransactionLineStatus = " + TransactionStatus.Transacted.GetHashCode() + " " +
                        " WHERE nTransactionID IN (" + _sbatchtrnsIds + ") AND nTransactionLineStatus NOT IN (5,6) AND nClinicID = " + this.ClinicID + " ";

                        _sqlCommand = new System.Data.SqlClient.SqlCommand();
                        _sqlCommand.Connection = _sqlConnection;
                        _sqlCommand.Transaction = _sqlTransaction;
                        _sqlCommand.CommandType = CommandType.Text;
                        _sqlCommand.CommandText = _sqlQuery;
                        _sqlCommand.ExecuteNonQuery();
                        if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                        #endregion " Update BL_Transaction_DTL "

                        #region " Update BL_Transaction_MST "

                        //.3 Update the BL_Transaction_MST Table for (nTransactionStatusID,nSendCounter,nSendToRejection,nLastStatusId) using nTransactionID
                        //which are not in accept or reject tab
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_Transaction_MST WITH(READPAST) SET nTransactionStatusID = " + TransactionStatus.Transacted.GetHashCode() + ", " +
                        " nLastStatusId = 0,nSendCounter = 0 , nSendToRejection = 0 " +
                        " WHERE nTransactionID IN (" + _sbatchtrnsIds + ") AND nTransactionStatusID NOT IN (5,6) AND nClinicID =" + this.ClinicID + "";
                        _sqlCommand = new System.Data.SqlClient.SqlCommand();
                        _sqlCommand.Connection = _sqlConnection;
                        _sqlCommand.Transaction = _sqlTransaction;
                        _sqlCommand.CommandType = CommandType.Text;
                        _sqlCommand.CommandText = _sqlQuery;
                        _sqlCommand.ExecuteNonQuery();
                        if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                        #endregion " Update BL_Transaction_MST "

                        #region " Delete from BL_Transaction_Status "

                        //.4 Delete BL_Transaction_Status entries for BatchID using nBatchId
                        _sqlQuery = "";

                        //_sqlQuery = " DELETE FROM BL_Transaction_Status WHERE nBatchID = " + BatchId + " AND nClinicID = " + this.ClinicID + " AND " +
                        //" (nSendToInsuranceID IS NULL OR nSendToInsuranceID <= 0)";

                        _sqlQuery = " DELETE FROM BL_Transaction_Status WHERE nBatchID = " + BatchId + " AND nClinicID = " + this.ClinicID + " AND " +
                        " (nSendToInsuranceID IS NULL OR nSendToInsuranceID <= 0) AND nStatus = " + TransactionStatus.Batch.GetHashCode() + " ";

                        _sqlCommand = new System.Data.SqlClient.SqlCommand();
                        _sqlCommand.Connection = _sqlConnection;
                        _sqlCommand.Transaction = _sqlTransaction;
                        _sqlCommand.CommandType = CommandType.Text;
                        _sqlCommand.CommandText = _sqlQuery;
                        _sqlCommand.ExecuteNonQuery();
                        if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                        #endregion " Delete from BL_Transaction_Status "

                        #region " Check if the Batch is used for any other status than Batch (ex.If Batch claim is in rejection or accept tab "

                        _sqlQuery = "";
                        Object _retVal = new object();
                        bool _isBatchInAcceptRejectTab = false;

                        _sqlQuery = "SELECT COUNT(nBatchID) FROM BL_Transaction_Status WITH(NOLOCK) where nStatus IN (" + TransactionStatus.Accepted.GetHashCode() + "," + TransactionStatus.Rejected.GetHashCode() + ") AND nBatchID = " + BatchId + "";
                        _sqlCommand = new System.Data.SqlClient.SqlCommand();
                        _sqlCommand.Connection = _sqlConnection;
                        _sqlCommand.Transaction = _sqlTransaction;
                        _sqlCommand.CommandType = CommandType.Text;
                        _sqlCommand.CommandText = _sqlQuery;
                        _retVal = _sqlCommand.ExecuteScalar();
                        if (_retVal != null && Convert.ToString(_retVal).Trim() != "" && Convert.ToInt64(_retVal) > 0)
                        { _isBatchInAcceptRejectTab = Convert.ToBoolean(_retVal); }
                        if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }
                        if (_isBatchInAcceptRejectTab == false)
                        {

                            #region " Delete BL_Transaction_Batch entry "

                            //.5 Delete BL_Transaction_Batch Master entry nBatchId
                            _sqlQuery = "";
                            _sqlQuery = "DELETE FROM BL_Transaction_Batch WHERE nBatchID = " + BatchId + " AND nClinicID=" + this.ClinicID + "";
                            _sqlCommand = new System.Data.SqlClient.SqlCommand();
                            _sqlCommand.Connection = _sqlConnection;
                            _sqlCommand.Transaction = _sqlTransaction;
                            _sqlCommand.CommandType = CommandType.Text;
                            _sqlCommand.CommandText = _sqlQuery;
                            _sqlCommand.ExecuteNonQuery();
                            if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                            #endregion " Delete BL_Transaction_Batch entry "

                        }

                        #endregion " Check if the Batch is used for any other status than Batch (ex.If Batch claim is in rejection or accept tab "

                        _sqlTransaction.Commit();
                        _isBatchDeleted = true;
                    }
                }
            }
            catch (System.Data.SqlClient.SqlException sqlEx)
            { _sqlTransaction.Rollback(); MessageBox.Show("Error deleting records", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); gloAuditTrail.gloAuditTrail.ExceptionLog(sqlEx.Message, true); }
            catch (gloDatabaseLayer.DBException dbEx)
            { _sqlTransaction.Rollback(); dbEx.ERROR_Log(dbEx.ToString()); }
            catch (Exception ex)
            { _sqlTransaction.Rollback(); gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }
            finally
            {
                if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }
                if (_sqlTransaction != null) { _sqlTransaction.Dispose(); _sqlTransaction = null; }
                if (_sqlConnection != null) { _sqlConnection.Close(); _sqlConnection.Dispose(); _sqlConnection = null; }
            }
            return _isBatchDeleted;
        }

        public bool DeleteBatchTransaction(Int64 BatchId, Int64 TransactionId, Int64 ClinicId)  // Not used in PM
        {
            System.Data.SqlClient.SqlConnection _sqlConnection = null;
            System.Data.SqlClient.SqlTransaction _sqlTransaction = null;
            System.Data.SqlClient.SqlCommand _sqlCommand = null;
            string _sqlQuery = "";
            bool _isRecordDeleted = false;

            try
            {
                if (BatchId > 0 && TransactionId > 0)
                {
                    _sqlConnection = new System.Data.SqlClient.SqlConnection(_databaseconnectionstring);
                    _sqlConnection.Open();
                    _sqlTransaction = _sqlConnection.BeginTransaction();

                    #region  " Delete BL_Transaction_Status Entries "

                    //..1 Delete BL_Transaction_Status entries for Batch's Transaction using nBatchID and nTrasactionID 
                    _sqlQuery = "";
                    _sqlQuery = "DELETE FROM BL_Transaction_Status WHERE nBatchID = " + BatchId + " AND nTransactionID = " + TransactionId + " AND nClinicID = " + this.ClinicID + " ";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion  " Delete BL_Transaction_Status Entries "

                    #region " Update BL_Transaction_Lines Table "

                    //..2 Update BL_Trasaction_Lines Table for nTransactionLineStatus set to "Transacted" using nTransactionID
                    _sqlQuery = "";
                    _sqlQuery = " UPDATE BL_Transaction_Lines WITH(READPAST) SET nTransactionLineStatus = " + TransactionStatus.Transacted.GetHashCode() + " " +
                    " WHERE nTransactionID = " + TransactionId + " AND nClinicID = " + this.ClinicID + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " Update BL_Transaction_Lines Table "

                    #region " Update BL_Transaction_MST Table "

                    //..3 Update BL_Transaction_MST Table for (nTransactionStatusID,nSendCounter,nSendToRejection,nLastStatusId) using nTransactionID
                    _sqlQuery = "";
                    _sqlQuery = " UPDATE BL_Transaction_MST WITH(READPAST) SET nTransactionStatusID = " + TransactionStatus.Transacted.GetHashCode() + ", " +
                        " nLastStatusId = 0,nSendCounter = 0 , nSendToRejection = 0 " +
                        " WHERE nTransactionID = " + TransactionId + " AND nClinicID =" + this.ClinicID + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " Update BL_Transaction_MST Table "

                    #region " Update BL_Transaction_Batch Table "

                    //..4 Update BL_Transaction_Batch for nClaimCounter (i.e No. of Claims in the Batch) decrement it by one each
                    _sqlQuery = "";
                    _sqlQuery = " UPDATE BL_Transaction_Batch WITH(READPAST) " +
                    " SET nClaimCounter = (nClaimCounter-1) WHERE " +
                    " nBatchID = " + BatchId + " AND nClinicID = " + this.ClinicID + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " Update BL_Transaction_Batch Table "

                    _sqlTransaction.Commit();
                    _isRecordDeleted = true;
                }
            }
            catch (System.Data.SqlClient.SqlException sqlEx)
            { _sqlTransaction.Rollback(); MessageBox.Show("Error deleting records", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); gloAuditTrail.gloAuditTrail.ExceptionLog(sqlEx.Message, true); }
            catch (Exception ex)
            { _sqlTransaction.Rollback(); gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }
            finally
            {
                if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }
                if (_sqlTransaction != null) { _sqlTransaction.Dispose(); _sqlTransaction = null; }
                if (_sqlConnection != null) { _sqlConnection.Close(); _sqlConnection.Dispose(); _sqlConnection = null; }
            }
            return _isRecordDeleted;
        }

        #endregion " Private & Public Methods "

        #region "Generate Paper Claims"

        public bool GeneratePaperClaim(string ClaimManagerRootPath, Int64 ClinicID, ref gloGeneralItem.gloItems TransactionIDsNReturnPaths, string BatchName, Int64 BatchId) // Not used in PM
        {
            string _InputClaimFilePath = Application.StartupPath.ToString() + "\\CMS1500_NEW.tif";
            string _OutPutClaimFilePath = "";
            string _fileName = "";
            decimal TotCharges = 0;
            Int64 _TransactionID = 0;
            bool _IsSecondaryInsurance = false;
            bool _PaperClaimGenerated = false;

            gloGeneralItem.gloItems _TransactionIDsNReturnPaths =  TransactionIDsNReturnPaths;
            Common.gloHCFA1500PaperForm oHCFA1500PaperForm = null;
            gloPrintPaperForm oPrintForm = new gloPrintPaperForm();
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            Common.Transaction oTransaction = null;
            gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
            DataTable dtPatientInsurances = null;

            string _ServerPath = this.ServerPath;
            string _BaseFolder = "Claim Management";
            string _OutInFolder = "OutBox";
            string _ClaimFolder = "837P Claim submission";
            string _ElectroniPaperFolder = "Paper";
            string _BatchFolderName = "";
            string _claimFolderPath = "";

            bool _retValue = true;


            try
            {
                if (_TransactionIDsNReturnPaths != null && _TransactionIDsNReturnPaths.Count > 0)
                {
                    _BatchFolderName = BatchName;
                    _claimFolderPath = _serverPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;
                    ClaimManagerRootPath = ClaimManagerRootPath + "\\" + "My Claims";

                    for (int i = 0; i <= _TransactionIDsNReturnPaths.Count - 1; i++)
                    {

                        _PaperClaimGenerated = false;
                    //    oHCFA1500PaperForm = new Common.gloHCFA1500PaperForm();

                        _RenderingFName = "";
                        _RenderingLName = "";
                        _RenderingMName = "";
                        _RenderingAddress = "";
                        _RenderingCity = "";
                        _RenderingState = "";
                        _RenderingZIP = "";
                        _RenderingNPI = "";
                        _RenderingSSN = "";
                        _RenderingEmployerID = "";
                        _RenderingStateMedicalNo = "";
                        _RenderingTaxonomy = "";
                        _fileName = "";

                        TotCharges = 0;

                        _TransactionID = _TransactionIDsNReturnPaths[i].ID;
                        if (System.IO.Directory.Exists(ClaimManagerRootPath) == false)
                        { System.IO.Directory.CreateDirectory(ClaimManagerRootPath); }

                        if (_TransactionIDsNReturnPaths[i].Description.Trim() != "")
                        {
                            _fileName = "Claim-" + _TransactionIDsNReturnPaths[i].Description.ToString() + "_" + gloGlobal.clsFileExtensions.GetUniqueDateString("MMddyyyyHHmmssffff") + ".tif";
                        }
                        else
                        { _fileName = _TransactionIDsNReturnPaths[i].ID.ToString() + "_" + gloGlobal.clsFileExtensions.GetUniqueDateString("MMddyyyyHHmmssffff") + ".tif"; }

                        //_fileName = _TransactionIDsNReturnPaths[i].Description.ToString() + "_" + DateTime.Now.ToString("MMddyyyyhhmmsstt") + ".tif";

                        //_OutPutClaimFilePath = ClaimManagerRootPath + "\\" + _TransactionIDsNReturnPaths[i].ID.ToString()+"_"+DateTime.Now.ToString("yyyyMMddhhmmsstt")+ ".tif";

                        //_OutPutClaimFilePath = ClaimManagerRootPath + "\\" + _fileName;
                        _OutPutClaimFilePath = _claimFolderPath + "\\" + _fileName;
                        _IsSecondaryInsurance = false;

                        #region "Fill Data into Paper Claim"
                        //oHCFA1500PaperForm = SetHCFA1500PaperForm();
                        oHCFA1500PaperForm = new Common.gloHCFA1500PaperForm();
                       // oTransaction = new Common.Transaction();
                        //dtPatientInsurances = new DataTable();
                        //Transaction thisTransaction = null;
                        if (_TransactionID > 0)
                        {
                            if (oTransaction != null)
                            {
                                oTransaction.Dispose();
                                oTransaction = null;
                            }
                            oTransaction = ogloBilling.GetHCFATransactionDetails(_TransactionID, ClinicID);

                            if (oTransaction != null)
                            {
                                if (oTransaction.Lines.Count > 0)
                                {
                                    string _patName = "";
                                    _patName = oTransaction.Transaction_Details.HCFA_PatientFName + " " + oTransaction.Transaction_Details.HCFA_PatientLName;
                                    On_FileProcessed(_fileName, _patName, _TransactionIDsNReturnPaths.Count, (i + 1));

                                    dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID, InsuranceTypeFlag.Primary.GetHashCode());

                                    #region "Assign Values to HCFA1500 Object"

                                    #region "1 Insurance "

                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                    {
                                        #region " Insurance Type Code "

                                        if (dtPatientInsurances.Rows[0]["InsuranceTypeCode"] != null && dtPatientInsurances.Rows[0]["InsuranceTypeCode"].ToString().Trim() != "")
                                        {
                                            switch (dtPatientInsurances.Rows[0]["InsuranceTypeCode"].ToString().Trim())
                                            {
                                                case "MB":
                                                    { oHCFA1500PaperForm.CF_1_Insuracne_Type_Medicare.Value = true; } break;
                                                case "MC":
                                                    { oHCFA1500PaperForm.CF_1_Insuracne_Type_Medicaid.Value = true; } break;
                                                case "CH":
                                                    { oHCFA1500PaperForm.CF_1_Insuracne_Type_Champva.Value = true; } break;
                                                case "CI":
                                                case "HM":
                                                    { oHCFA1500PaperForm.CF_1_Insuracne_Type_GroupHealthPlan.Value = true; } break;
                                                default:
                                                    { oHCFA1500PaperForm.CF_1_Insuracne_Type_Other.Value = true; } break;
                                            }
                                        }

                                        #endregion " Insurance Type Code "

                                        #region " .Insured's Name "

                                        oHCFA1500PaperForm.CF_4_Insureds_Name.Value = Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]) + " " +
                                                Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]) + " " + Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]);

                                        #endregion " .Insured's Name "

                                        #region " .Paient Relationship to Insured "

                                        oHCFA1500PaperForm.CF_6_PatientRelationship_Self.Value = false;
                                        oHCFA1500PaperForm.CF_6_PatientRelationship_Spouse.Value = false;
                                        oHCFA1500PaperForm.CF_6_PatientRelationship_Child.Value = false;
                                        oHCFA1500PaperForm.CF_6_PatientRelationship_Other.Value = false;

                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim() != "")
                                        {
                                            switch (Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().ToUpper())
                                            {
                                                case "01": //Spouse  - 01
                                                    oHCFA1500PaperForm.CF_6_PatientRelationship_Spouse.Value = true;
                                                    break;
                                                case "18": // Self - 18 
                                                    oHCFA1500PaperForm.CF_6_PatientRelationship_Self.Value = true;
                                                    break;
                                                case "19": // Child - 19
                                                    oHCFA1500PaperForm.CF_6_PatientRelationship_Child.Value = true;
                                                    break;
                                                default:
                                                    oHCFA1500PaperForm.CF_6_PatientRelationship_Other.Value = true;
                                                    break;
                                            }

                                        }

                                        #endregion " .Paient Relationship to Insured "

                                        #region " .Insured's Address "

                                        oHCFA1500PaperForm.CF_7_Insureds_Address.Value = Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]);
                                        oHCFA1500PaperForm.CF_7_Insureds_City.Value = Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]);
                                        oHCFA1500PaperForm.CF_7_Insureds_State.Value = Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]);
                                        oHCFA1500PaperForm.CF_7_Insureds_Zip.Value = Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]);

                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["sPhone"]).Trim() != "")
                                        {
                                            string _strPhone = Convert.ToString(dtPatientInsurances.Rows[0]["sPhone"]).Trim();
                                            oHCFA1500PaperForm.CF_7_Insureds_Tel_AreaCode.Value = _strPhone.Substring(0, 3);
                                            oHCFA1500PaperForm.CF_7_Insureds_Tel_Number.Value = _strPhone.Substring(3, _strPhone.Length - 3);
                                        }

                                        #endregion " .Insured's Address "

                                        #region " .Insured's Information "

                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim() != "")
                                        {
                                            oHCFA1500PaperForm.CF_11_Insureds_PolicyGroupNo.Value = Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]);
                                        }
                                        //     Int64 _insuranceDOB = 0;
                                        DateTime _dtinsuranceDOB = DateTime.MinValue;
                                        if (dtPatientInsurances.Rows[0]["dtDOB"] != DBNull.Value)
                                        {
                                            _dtinsuranceDOB = Convert.ToDateTime(dtPatientInsurances.Rows[0]["dtDOB"]);

                                            oHCFA1500PaperForm.CF_11_Insureds_DOB_MM.Value = _dtinsuranceDOB.ToString("MM"); //gloDateMaster.gloDate.DateAsDate(_insuranceDOB).ToString("MM");
                                            oHCFA1500PaperForm.CF_11_Insureds_DOB_DD.Value = _dtinsuranceDOB.ToString("dd");//gloDateMaster.gloDate.DateAsDate(_insuranceDOB).ToString("dd");
                                            oHCFA1500PaperForm.CF_11_Insureds_DOB_YY.Value = _dtinsuranceDOB.ToString("yy");//gloDateMaster.gloDate.DateAsDate(_insuranceDOB).ToString("yy");
                                        }

                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim() != "")
                                        {
                                            string _strSubGender = "";
                                            _strSubGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().ToUpper();

                                            switch (_strSubGender.Substring(0, 1))
                                            {
                                                case "M":
                                                    oHCFA1500PaperForm.CF_11_Insureds_Sex_Male.Value = true;
                                                    break;
                                                case "F":
                                                    oHCFA1500PaperForm.CF_11_Insureds_Sex_Female.Value = true;
                                                    break;
                                                default:
                                                    oHCFA1500PaperForm.CF_11_Insureds_Sex_Male.Value = false;
                                                    oHCFA1500PaperForm.CF_11_Insureds_Sex_Female.Value = false;
                                                    break;
                                            }
                                        }



                                        oHCFA1500PaperForm.CF_11_Insureds_EmployerName.Value = "";
                                        oHCFA1500PaperForm.CF_11_Insureds_InsuracnePlan.Value = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]);
                                        oHCFA1500PaperForm.CF_11_Insureds_OtherHealthPlan_Yes.Value = false;
                                        oHCFA1500PaperForm.CF_11_Insureds_OtherHealthPlan_No.Value = false;

                                        #endregion " .Insured's Information "

                                        #region " Insured's ID Number "

                                        oHCFA1500PaperForm.CF_1a_InsuredsIDNumber.Value = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]);

                                        #endregion "  .Insured's ID Number "
                                    }
                                    if (dtPatientInsurances != null)
                                    {
                                        dtPatientInsurances.Dispose();
                                        dtPatientInsurances = null;
                                    }
                                    #endregion

                                    #region " .Patient's Name "

                                    oHCFA1500PaperForm.CF_2_Patient_Name.Value = oTransaction.Transaction_Details.HCFA_PatientLName.Trim() + " " + oTransaction.Transaction_Details.HCFA_PatientFName.Trim()
                                    + " " + oTransaction.Transaction_Details.HCFA_PatientMName.Trim();

                                    #endregion " .Patient's Name "

                                    #region " Patient Account Number "

                                    oHCFA1500PaperForm.CF_26_PatientAccount_No.Value = oTransaction.Transaction_Details.HCFA_PatientCode;

                                    #endregion " Patient Account Number "

                                    #region " Accept Assignment "

                                    //**Need to implement logic for this
                                    //**Hard coded for time being
                                    if (true)
                                    {
                                        oHCFA1500PaperForm.CF_27_AcceptAssignment_YES.Value = true;
                                    }
                                    /*
                                else if (oHCFA1500PaperForm.CF_27_AcceptAssignment_YES.Value == true)
                                {
                                    oHCFA1500PaperForm.CF_27_AcceptAssignment_NO.Value = true;
                                }
                                */
                                    #endregion " Accept Assignment "

                                    #region " .Patient's Birth Date "

                                    if (oTransaction.Transaction_Details.HCFA_PatientDOB > 0)
                                    {
                                        oHCFA1500PaperForm.CF_3_Patient_DOB_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.Transaction_Details.HCFA_PatientDOB).ToString("MM");
                                        oHCFA1500PaperForm.CF_3_Patient_DOB_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.Transaction_Details.HCFA_PatientDOB).ToString("dd");
                                        oHCFA1500PaperForm.CF_3_Patient_DOB_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.Transaction_Details.HCFA_PatientDOB).ToString("yy");
                                    }

                                    #endregion " .Patient's Birth Date "

                                    #region " .Patient's Sex "

                                    if (oTransaction.Transaction_Details.HCFA_PatientGender.ToUpper().Trim() != "")
                                    {
                                        switch (oTransaction.Transaction_Details.HCFA_PatientGender.ToUpper().Trim().Substring(0, 1))
                                        {
                                            case "M":
                                                {
                                                    oHCFA1500PaperForm.CF_3_Patient_Sex_Male.Value = true;
                                                    oHCFA1500PaperForm.CF_3_Patient_Sex_Female.Value = false;
                                                }
                                                break;
                                            case "F":
                                                {
                                                    oHCFA1500PaperForm.CF_3_Patient_Sex_Male.Value = false;
                                                    oHCFA1500PaperForm.CF_3_Patient_Sex_Female.Value = true;
                                                }
                                                break;
                                            default:
                                                {
                                                    oHCFA1500PaperForm.CF_3_Patient_Sex_Male.Value = false;
                                                    oHCFA1500PaperForm.CF_3_Patient_Sex_Female.Value = false;
                                                }
                                                break;
                                        }
                                    }

                                    #endregion " .Patient's Sex "

                                    #region " .Patient's Address "

                                    oHCFA1500PaperForm.CF_5_Patient_Address.Value = oTransaction.Transaction_Details.HCFA_PatientAddress1.Trim() + " " + oTransaction.Transaction_Details.HCFA_PatientAddress2.Trim();
                                    oHCFA1500PaperForm.CF_5_Patient_City.Value = oTransaction.Transaction_Details.HCFA_PatientCity.Trim();
                                    oHCFA1500PaperForm.CF_5_Patient_State.Value = oTransaction.Transaction_Details.HCFA_PatientState.Trim();
                                    oHCFA1500PaperForm.CF_5_Patient_Zip.Value = oTransaction.Transaction_Details.HCFA_PatientZip.Trim();
                                    if (oTransaction.Transaction_Details.HCFA_PatientPhone.Trim() != "")
                                    {
                                        oHCFA1500PaperForm.CF_5_Patient_Tel_AreaCode.Value = oTransaction.Transaction_Details.HCFA_PatientPhone.Trim().Substring(0, 3);
                                        oHCFA1500PaperForm.CF_5_Patient_Tel_Number.Value = oTransaction.Transaction_Details.HCFA_PatientPhone.Trim().Substring(3, oTransaction.Transaction_Details.HCFA_PatientPhone.Trim().Length - 3);
                                    }

                                    #endregion " .Patient's Address "

                                    #region " .Patient Marital Status "


                                    oHCFA1500PaperForm.CF_8_PatientStatus_Single.Value = false;
                                    oHCFA1500PaperForm.CF_8_PatientStatus_Married.Value = false;
                                    oHCFA1500PaperForm.CF_8_PatientStatus_Other.Value = false;

                                    if (oTransaction.MaritalStatus.Trim() != "")
                                    {
                                        switch (oTransaction.MaritalStatus.ToUpper())
                                        {
                                            case "SINGLE":
                                                oHCFA1500PaperForm.CF_8_PatientStatus_Single.Value = true;
                                                break;
                                            case "MARRIED":
                                                oHCFA1500PaperForm.CF_8_PatientStatus_Married.Value = true;
                                                break;
                                            default:
                                                oHCFA1500PaperForm.CF_8_PatientStatus_Other.Value = false;
                                                break;
                                        }
                                    }

                                    #endregion " .Patient Marital Status "

                                    #region " .Patient Status "

                                    oHCFA1500PaperForm.CF_8_PatientStatus_Employed.Value = oTransaction.Transaction_Details.HCFA_IsEmployed;
                                    oHCFA1500PaperForm.CF_8_PatientStatus_FullTimeStudent.Value = oTransaction.Transaction_Details.HCFA_IsFullTimeStudent;
                                    oHCFA1500PaperForm.CF_8_PatientStatus_PartTimeStudent.Value = oTransaction.Transaction_Details.HCFA_IsPartTimeStudent;

                                    #endregion " .Patient Status "

                                    #region " .Other Insurance Details  "

                                    DataTable dtOtherInsurance = null;
                                    dtOtherInsurance = ogloPatient.getPatientInsurances(oTransaction.PatientID, InsuranceTypeFlag.Secondary.GetHashCode());

                                    if (dtOtherInsurance != null && dtOtherInsurance.Rows.Count > 0)
                                    {
                                        oHCFA1500PaperForm.CF_9_Other_Insureds_Name.Value = Convert.ToString(dtOtherInsurance.Rows[0]["SubLName"]) + " " +
                                                Convert.ToString(dtOtherInsurance.Rows[0]["SubFName"]) + " " + Convert.ToString(dtOtherInsurance.Rows[0]["SubMName"]);

                                        oHCFA1500PaperForm.CF_9_Other_Insureds_PolicyGroupNo.Value = Convert.ToString(dtOtherInsurance.Rows[0]["sGroup"]);

                                        //      Int64 _insuranceDOB = 0;
                                        DateTime _dtotherinsuranceDOB = DateTime.MinValue;
                                        if (dtOtherInsurance.Rows[0]["dtDOB"] != DBNull.Value)
                                        {
                                            _dtotherinsuranceDOB = Convert.ToDateTime(dtOtherInsurance.Rows[0]["dtDOB"]);
                                            oHCFA1500PaperForm.CF_9_Other_Insureds_DOB_MM.Value = _dtotherinsuranceDOB.ToString("MM");
                                            oHCFA1500PaperForm.CF_9_Other_Insureds_DOB_DD.Value = _dtotherinsuranceDOB.ToString("dd");
                                            oHCFA1500PaperForm.CF_9_Other_Insureds_DOB_YY.Value = _dtotherinsuranceDOB.ToString("yy");
                                        }

                                        if (Convert.ToString(dtOtherInsurance.Rows[0]["sSubscriberGender"]).Trim() != "")
                                        {
                                            string _strSubGender = "";
                                            _strSubGender = Convert.ToString(dtOtherInsurance.Rows[0]["sSubscriberGender"]).Trim().ToUpper();

                                            switch (_strSubGender.Substring(0, 1))
                                            {
                                                case "M":
                                                    oHCFA1500PaperForm.CF_9_Other_Insureds_Sex_Male.Value = true;
                                                    break;
                                                case "F":
                                                    oHCFA1500PaperForm.CF_9_Other_Insureds_Sex_Female.Value = true;
                                                    break;

                                            }
                                        }

                                        oHCFA1500PaperForm.CF_9_Other_Insureds_EmployerName.Value = "";
                                        oHCFA1500PaperForm.CF_9_Other_Insureds_InsuracnePlan.Value = Convert.ToString(dtOtherInsurance.Rows[0]["InsuranceName"]);
                                        _IsSecondaryInsurance = true;
                                    }
                                    if (_IsSecondaryInsurance == true)
                                    {
                                        oHCFA1500PaperForm.CF_11_Insureds_OtherHealthPlan_Yes.Value = true;
                                    }
                                    else
                                    {
                                        oHCFA1500PaperForm.CF_11_Insureds_OtherHealthPlan_No.Value = true;
                                    }
                                    if (dtOtherInsurance != null)
                                    {
                                        dtOtherInsurance.Dispose();
                                        dtOtherInsurance = null;
                                    }
                                    #endregion " .Other Insurance Details "

                                    #region " .Patient Condition Related to  Workers Comp/AutoClaim/Other "

                                    if (oTransaction.WorkersComp == true)
                                    {
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_Employement_Yes.Value = true;
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_Employement_No.Value = false;
                                    }
                                    else
                                    {
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_Employement_Yes.Value = false;
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_Employement_No.Value = true;
                                    }

                                    if (oTransaction.AutoClaim == true)
                                    {
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_AutoAccident_Yes.Value = true;
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_AutoAccident_No.Value = false;
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_AutoAccident_State.Value = oTransaction.State.Trim();
                                    }
                                    else
                                    {
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_AutoAccident_Yes.Value = false;
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_AutoAccident_No.Value = true;
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_AutoAccident_State.Value = "";
                                    }
                                    if (oTransaction.OtherAccident == false)
                                    {
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_OtherAccident_No.Value = true;
                                    }
                                    else
                                    {
                                        oHCFA1500PaperForm.CF_10_PatientConditionTo_OtherAccident_Yes.Value = true;
                                    }
                                    oHCFA1500PaperForm.CF_10_PatientConditionTo_ResForLocaluse.Value = "";

                                    #endregion " .Patient Condition Related to  Workers Comp/AutoClaim/Other "

                                    #region " Authorized Persons Signature "

                                    oHCFA1500PaperForm.CF_12_PatientAuthorizedPersons_Signature.Value = "SIGNATURE ON FILE";
                                    oHCFA1500PaperForm.CF_12_PatientAuthorizedPersons_Signature_Date.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.TransactionDate).ToString("MM/dd/yyyy");
                                    oHCFA1500PaperForm.CF_13_InsuredsAuthorizedPersons_Signature.Value = "SIGNATURE ON FILE";

                                    #endregion " Authorized Persons Signature "

                                    #region " Date of Current Illness/Injury/Pregnancy "

                                    oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.OnsiteDate).ToString("MM");
                                    oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.OnsiteDate).ToString("dd");
                                    oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.OnsiteDate).ToString("yy");

                                    #endregion " Date of Current Illness/Injury/Pregnancy "

                                    #region " First Date of Similar Illness "

                                    //oHCFA1500PaperForm.CF_15_FirstDateOfSimilar_Illness_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.AccidentDate).ToString("MM");
                                    //oHCFA1500PaperForm.CF_15_FirstDateOfSimilar_Illness_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.AccidentDate).ToString("dd");
                                    //oHCFA1500PaperForm.CF_15_FirstDateOfSimilar_Illness_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.AccidentDate).ToString("yy");

                                    #endregion " First Date of Similar Illness "

                                    #region " Auto Claim "

                                    if (oTransaction.AutoClaim == true)
                                    {
                                        oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.AccidentDate).ToString("MM");
                                        oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.AccidentDate).ToString("dd");
                                        oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.AccidentDate).ToString("yy");
                                    }

                                    #endregion

                                    #region " Workers Comp "

                                    if (oTransaction.WorkersComp == true)
                                    {
                                        oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.InjuryDate).ToString("MM");
                                        oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.InjuryDate).ToString("dd");
                                        oHCFA1500PaperForm.CF_14_DateOfCurrent_Illness_Injury_Pregnancy_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.InjuryDate).ToString("yy");
                                    }

                                    #endregion

                                    #region " Unable To Work From/To date "

                                    if (oTransaction.UnableToWorkFromDate > 0)
                                    {
                                        oHCFA1500PaperForm.CF_16_UnableToWorkFromDate_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.UnableToWorkFromDate).ToString("MM");
                                        oHCFA1500PaperForm.CF_16_UnableToWorkFromDate_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.UnableToWorkFromDate).ToString("dd");
                                        oHCFA1500PaperForm.CF_16_UnableToWorkFromDate_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.UnableToWorkFromDate).ToString("yy");
                                    }

                                    if (oTransaction.UnableToWorkTillDate > 0)
                                    {
                                        oHCFA1500PaperForm.CF_16_UnableToWorkTillDate_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.UnableToWorkTillDate).ToString("MM");
                                        oHCFA1500PaperForm.CF_16_UnableToWorkTillDate_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.UnableToWorkTillDate).ToString("dd");
                                        oHCFA1500PaperForm.CF_16_UnableToWorkTillDate_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.UnableToWorkTillDate).ToString("yy");
                                    }

                                    #endregion

                                    #region " Patient Referral "

                                    if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider)
                                    {
                                        DataTable dtReferral = null;
                                        //dtReferral = GetReferralProvider(oTransaction.PatientID, oTransaction.ReferralProviderID);
                                        dtReferral = GetReferralProvider(oTransaction.PatientID, oTransaction.ProviderID, oTransaction.ReferalProviderID_New, oTransaction.IsSameAsBillingProvider, _databaseconnectionstring);
                                        if (dtReferral != null && dtReferral.Rows.Count > 0)
                                        {
                                            oHCFA1500PaperForm.CF_17_ReferringProvider_Name.Value = Convert.ToString(dtReferral.Rows[0]["sLastName"]) +
                                                " " + Convert.ToString(dtReferral.Rows[0]["sFirstName"]) + " " + Convert.ToString(dtReferral.Rows[0]["sMiddleName"]);
                                            oHCFA1500PaperForm.CF_17b_ReferringProvider_NPI.Value = Convert.ToString(dtReferral.Rows[0]["sNPI"]);
                                            oHCFA1500PaperForm.CF_17a_ReferringProvider_UnknownField.Value = "";

                                        }
                                        if (dtReferral != null)
                                        {
                                            dtReferral.Dispose();
                                            dtReferral = null;
                                        }
                                    }

                                    #endregion " Patient Referral "

                                    #region " Hospitalization Dates "

                                    if (oTransaction.HospitalizationDateFrom > 0)
                                    {
                                        oHCFA1500PaperForm.CF_18_HospitalizationFromDate_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.HospitalizationDateFrom).ToString("MM");
                                        oHCFA1500PaperForm.CF_18_HospitalizationFromDate_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.HospitalizationDateFrom).ToString("dd");
                                        oHCFA1500PaperForm.CF_18_HospitalizationFromDate_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.HospitalizationDateFrom).ToString("yy");
                                    }

                                    if (oTransaction.HospitalizationDateTo > 0)
                                    {
                                        oHCFA1500PaperForm.CF_18_HospitalizationTillDate_MM.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.HospitalizationDateTo).ToString("MM");
                                        oHCFA1500PaperForm.CF_18_HospitalizationTillDate_DD.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.HospitalizationDateTo).ToString("dd");
                                        oHCFA1500PaperForm.CF_18_HospitalizationTillDate_YY.Value = gloDateMaster.gloDate.DateAsDate(oTransaction.HospitalizationDateTo).ToString("yy");
                                    }

                                    #endregion

                                    #region " Out Side Lab Charges "

                                    if (oTransaction.OutSideLab == true)
                                    {
                                        oHCFA1500PaperForm.CF_20_OutsideLab_Yes.Value = true;
                                        oHCFA1500PaperForm.CF_20_OutsideLab_No.Value = false;
                                        oHCFA1500PaperForm.CF_20_OutsideLab_Charges_Principal.Value = oTransaction.OutSideLabCharges.ToString().Split('.')[0];
                                        oHCFA1500PaperForm.CF_20_OutsideLab_Charges_Secondary.Value = oTransaction.OutSideLabCharges.ToString().Split('.')[1];
                                    }
                                    else
                                    {
                                        oHCFA1500PaperForm.CF_20_OutsideLab_Yes.Value = false;
                                        oHCFA1500PaperForm.CF_20_OutsideLab_No.Value = true;
                                        oHCFA1500PaperForm.CF_20_OutsideLab_Charges_Principal.Value = "";
                                        oHCFA1500PaperForm.CF_20_OutsideLab_Charges_Secondary.Value = "";
                                    }

                                    #endregion" Out Side Lab Charges "

                                    #region " Set Diagnosis "

                                    DataTable dtDx = null;
                                    dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

                                    if (dtDx != null && dtDx.Rows.Count > 0)
                                    {
                                        for (int k = 0; k < dtDx.Rows.Count; k++)
                                        {
                                            string[] Dx = Convert.ToString(dtDx.Rows[k]["DX"]).Split('.');
                                            if (k == 0)
                                            {
                                                if (Dx.Length > 0)
                                                {
                                                    if (Dx.Length > 1)
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_1_Principal.Value = Dx[0];
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_1_Secondary.Value = Dx[1];
                                                    }
                                                    else
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_1_Principal.Value = Dx[0];
                                                    }
                                                }
                                            }
                                            if (k == 1)
                                            {
                                                if (Dx.Length > 0)
                                                {
                                                    if (Dx.Length > 1)
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_2_Principal.Value = Dx[0];
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_2_Secondary.Value = Dx[1];
                                                    }
                                                    else
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_2_Principal.Value = Dx[0];
                                                    }
                                                }
                                            }
                                            if (k == 2)
                                            {
                                                if (Dx.Length > 0)
                                                {
                                                    if (Dx.Length > 1)
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_3_Principal.Value = Dx[0];
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_3_Secondary.Value = Dx[1];
                                                    }
                                                    else
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_3_Principal.Value = Dx[0];
                                                    }
                                                }
                                            }
                                            if (k == 3)
                                            {
                                                if (Dx.Length > 0)
                                                {
                                                    if (Dx.Length > 1)
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_4_Principal.Value = Dx[0];
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_4_Secondary.Value = Dx[1];
                                                    }
                                                    else
                                                    {
                                                        oHCFA1500PaperForm.CF_21_Diagnosis_4_Principal.Value = Dx[0];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (dtDx != null)
                                    {
                                        dtDx.Dispose();
                                        dtDx = null;
                                    }
                                    #endregion " Set Diagnosis "

                                    #region " Federal Tax I.D Number "

                                    if (oTransaction.Transaction_Details.HCFA_ProviderEIN.Trim() != "")
                                    {
                                        oHCFA1500PaperForm.CF_25_FederalTax_ID_No.Value = oTransaction.Transaction_Details.HCFA_ProviderEIN.Trim();
                                        oHCFA1500PaperForm.CF_25_FederalTaxID_Qualifier_EIN.Value = true;
                                    }
                                    else if (oTransaction.Transaction_Details.HCFA_ProviderSSN.Trim() != "")
                                    {
                                        oHCFA1500PaperForm.CF_25_FederalTax_ID_No.Value = oTransaction.Transaction_Details.HCFA_ProviderSSN.Trim();
                                        oHCFA1500PaperForm.CF_25_FederalTaxID_Qualifier_SSN.Value = true;
                                    }

                                    #endregion

                                    #region " Service Facility Location Information "

                                    oHCFA1500PaperForm.CF_32_Service_Facility_Name.Value = oTransaction.Transaction_Details.HCFA_FacilityName.Trim();
                                    oHCFA1500PaperForm.CF_32_Service_Facility_Address_Line1.Value = oTransaction.Transaction_Details.HCFA_FacilityAddress1.Trim();
                                    string _addr2 = "";
                                    _addr2 = oTransaction.Transaction_Details.HCFA_FacilityCity.Trim();
                                    _addr2 += " " + oTransaction.Transaction_Details.HCFA_FacilityState.Trim();
                                    _addr2 += " " + oTransaction.Transaction_Details.HCFA_FacilityZip.Trim();
                                    oHCFA1500PaperForm.CF_32_Service_Facility_Address_Line2.Value = _addr2.Trim();

                                    //oHCFA1500PaperForm.CF_32_Service_Facility_Address_Line2.Value = oTransaction.Transaction_Details.HCFA_FacilityAddress2.Trim();
                                    //oHCFA1500PaperForm.CF_32_Service_Facility_City.Value = oTransaction.Transaction_Details.HCFA_FacilityCity.Trim();
                                    //oHCFA1500PaperForm.CF_32_Service_Facility_State.Value = oTransaction.Transaction_Details.HCFA_FacilityState.Trim();
                                    //oHCFA1500PaperForm.CF_32_Service_Facility_Zip.Value = oTransaction.Transaction_Details.HCFA_FacilityZip.Trim();

                                    oHCFA1500PaperForm.CF_32a_Service_Facility_NPI.Value = oTransaction.Transaction_Details.HCFA_FacilityNPI.Trim();
                                    oHCFA1500PaperForm.CF_32b_Service_Facility_UPIN_OtherID.Value = "";

                                    #endregion " Service Facility Location Information "

                                    #region " Billing Provider Information "

                                    gloAppointmentBook.Books.Provider oProvider = null;
                                    Object retVal = null;
                                    string _Setting = "";

                                    oProvider = GetProvider(oTransaction.ProviderID, ProviderType.BillingProvider);
                                    if (oProvider != null)
                                    {
                                        gloSettings.GeneralSettings oSetting = new gloSettings.GeneralSettings(_databaseconnectionstring);
 
                                        oSetting.GetSetting("BillingSetting", oTransaction.ProviderID, this.ClinicID, out retVal);
                                        oSetting.Dispose();
                                        oSetting = null;

                                        if (retVal != null && Convert.ToString(retVal).Trim() != "")
                                        { _Setting = Convert.ToString(retVal).Trim(); }


                                        oHCFA1500PaperForm.CF_33_BillingProvider_Name.Value = oProvider.FirstName.Trim() + " " + oProvider.MiddleName.Trim() + " " + oProvider.LastName.Trim();
                                        //" " + oProvider.FirstName.Trim() + " " + oProvider.LastName.Trim();
                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_Number.Value = "";
                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_AreaCode.Value = "";
                                        oHCFA1500PaperForm.CF_33a_BillingProvider_NPI.Value = oProvider.NPI.Trim();
                                        oHCFA1500PaperForm.CF_33b_BillingProvider_UPIN_OtherID.Value = oProvider.UPIN.Trim();

                                        switch (_Setting.ToUpper())
                                        {
                                            case "BUSINESS":
                                                {
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line1.Value = oProvider.BMAddress1;
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line2.Value = oProvider.BMCity +
                                                    " " + oProvider.BMState + " " + oProvider.BMZIP;

                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_City.Value = oProvider.BMCity;
                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_State.Value = oProvider.BMState;
                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_Zip.Value = oProvider.BMZIP;

                                                    if (oProvider.BMPhone.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_AreaCode.Value = oProvider.BMPhone.Substring(0, 3);
                                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_Number.Value = oProvider.BMPhone.Substring(3, oProvider.BMPhone.Length - 3);
                                                    }

                                                } break;
                                            case "PRACTICE":
                                                {
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line1.Value = oProvider.BPracAddress1;
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line2.Value = oProvider.BPracCity +
                                                    " " + oProvider.BPracState + " " + oProvider.BPracZIP;

                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_City.Value = oProvider.BPracCity;
                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_State.Value = oProvider.BPracState;
                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_Zip.Value = oProvider.BPracZIP;

                                                    if (oProvider.BPracPhone.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_AreaCode.Value = oProvider.BPracPhone.Substring(0, 3);
                                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_Number.Value = oProvider.BPracPhone.Substring(3, oProvider.BPracPhone.Length - 3);
                                                    }
                                                } break;
                                            case "COMPANY":
                                                {
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line1.Value = oProvider.CompanyAddress1;
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line2.Value = oProvider.CompanyCity +
                                                    " " + oProvider.CompanyState + " " + oProvider.CompanyZip;

                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_City.Value = oProvider.CompanyCity;
                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_State.Value = oProvider.CompanyState;
                                                    //oHCFA1500PaperForm.CF_33_BillingProvider_Zip.Value = oProvider.CompanyZip;

                                                    if (oProvider.CompanyPhone.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_AreaCode.Value = oProvider.CompanyPhone.Substring(0, 3);
                                                        oHCFA1500PaperForm.CF_33_BillingProvider_Tel_Number.Value = oProvider.CompanyPhone.Substring(3, oProvider.CompanyPhone.Length - 3);
                                                    }
                                                } break;
                                            default:
                                                oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line1.Value = oProvider.BMAddress1 + " " + oProvider.BMAddress2;
                                                oHCFA1500PaperForm.CF_33_BillingProvider_Address_Line2.Value = oProvider.BMCity +
                                                " " + oProvider.BMState + " " + oProvider.BMZIP;

                                                //oHCFA1500PaperForm.CF_33_BillingProvider_City.Value = oProvider.BMCity;
                                                //oHCFA1500PaperForm.CF_33_BillingProvider_State.Value = oProvider.BMState;
                                                //oHCFA1500PaperForm.CF_33_BillingProvider_Zip.Value = oProvider.BMZIP;

                                                if (oProvider.BMPhone.Trim() != "")
                                                {
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Tel_AreaCode.Value = oProvider.BMPhone.Substring(0, 3);
                                                    oHCFA1500PaperForm.CF_33_BillingProvider_Tel_Number.Value = oProvider.BMPhone.Substring(3, oProvider.BMPhone.Length - 3);
                                                }
                                                break;
                                        }
                                        oProvider.Dispose();
                                        oProvider = null;
                                    }

                                    #endregion " Billing Provider Information "

                                    #region " Service Lines "

                                    for (int lineIndex = 0; lineIndex < oTransaction.Lines.Count; lineIndex++)
                                    {

                                        switch (lineIndex)
                                        {
                                            case 0:
                                                {
                                                    #region " Service Line 1 "

                                                    oHCFA1500PaperForm.CF_24A_L1_DOS_From_DD.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L1_DOS_From_MM.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L1_DOS_From_YY.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("yy");
                                                    oHCFA1500PaperForm.CF_24A_L1_DOS_To_DD.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L1_DOS_To_MM.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L1_DOS_To_YY.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("yy");

                                                    oHCFA1500PaperForm.CF_24B_L1_POS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].POSCode);
                                                    oHCFA1500PaperForm.CF_24C_L1_EMG_Code.Value = "";
                                                    if (oTransaction.Lines[lineIndex].CPTCode.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_24D_L1_CPT_HCPCS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].CPTCode);
                                                        oHCFA1500PaperForm.CF_IsPresent_Line1 = true;
                                                    }
                                                    else { oHCFA1500PaperForm.CF_IsPresent_Line1 = false; }

                                                    oHCFA1500PaperForm.CF_24D_L1_Modifier_1_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod1Code);
                                                    oHCFA1500PaperForm.CF_24D_L1_Modifier_2_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod2Code);
                                                    oHCFA1500PaperForm.CF_24D_L1_Modifier_3_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod3Code);
                                                    oHCFA1500PaperForm.CF_24D_L1_Modifier_4_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod4Code);

                                                    string _DxPtrSL1 = "";
                                                    if (oTransaction.Lines[lineIndex].Dx1Ptr) { _DxPtrSL1 = "1"; }
                                                    if (oTransaction.Lines[lineIndex].Dx2Ptr) { _DxPtrSL1 = _DxPtrSL1 + "," + "2"; }
                                                    if (oTransaction.Lines[lineIndex].Dx3Ptr) { _DxPtrSL1 = _DxPtrSL1 + "," + "3"; }
                                                    if (oTransaction.Lines[lineIndex].Dx4Ptr) { _DxPtrSL1 = _DxPtrSL1 + "," + "4"; }
                                                    oHCFA1500PaperForm.CF_24E_L1_Diagnosis_Pointers.Value = _DxPtrSL1.TrimEnd(',');

                                                    string[] Charges = Convert.ToString(oTransaction.Lines[lineIndex].Charges).Split('.');
                                                    if (Charges.Length > 0)
                                                    {
                                                        if (Charges.Length > 1)
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L1_Charges_Principal.Value = Charges[0];
                                                            oHCFA1500PaperForm.CF_24F_L1_Charges_Secondary.Value = Charges[1];
                                                        }
                                                        else
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L1_Charges_Principal.Value = Charges[0];
                                                        }
                                                    }

                                                    oHCFA1500PaperForm.CF_24G_L1_Days_Units.Value = oTransaction.Lines[lineIndex].Unit.ToString();
                                                    oHCFA1500PaperForm.CF_24H_L1_EPSDT_FamilyPlan.Value = "";

                                                    if (oTransaction.Lines[lineIndex].RefferingProviderId > 0)
                                                    {
                                                        FillProviderDetails(oTransaction.Lines[lineIndex].RefferingProviderId, ProviderType.RenderingProvider);
                                                        oHCFA1500PaperForm.CF_24J_L1_RenderingProvider_NPI.Value = _RenderingNPI;
                                                    }

                                                    //**We show the first note only need to discuss on notes**
                                                    if (oTransaction.Lines[lineIndex].LineNotes.Count > 0)
                                                    {
                                                        oHCFA1500PaperForm.CF_24A_L1_Note.Value = oTransaction.Lines[lineIndex].LineNotes[0].NoteDescription;
                                                    }

                                                    TotCharges += oTransaction.Lines[lineIndex].Total;

                                                    oHCFA1500PaperForm.CF_IsPresent_Line1 = true;

                                                    #endregion " Service Line 1 "
                                                }
                                                break;
                                            case 1:
                                                {
                                                    #region " Service Line 2 "

                                                    oHCFA1500PaperForm.CF_24A_L2_DOS_From_DD.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L2_DOS_From_MM.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L2_DOS_From_YY.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("yy");
                                                    oHCFA1500PaperForm.CF_24A_L2_DOS_To_DD.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L2_DOS_To_MM.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L2_DOS_To_YY.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("yy");

                                                    oHCFA1500PaperForm.CF_24B_L2_POS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].POSCode);
                                                    oHCFA1500PaperForm.CF_24C_L2_EMG_Code.Value = "";
                                                    if (oTransaction.Lines[lineIndex].CPTCode.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_24D_L2_CPT_HCPCS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].CPTCode);
                                                        oHCFA1500PaperForm.CF_IsPresent_Line1 = true;
                                                    }
                                                    else { oHCFA1500PaperForm.CF_IsPresent_Line1 = false; }

                                                    oHCFA1500PaperForm.CF_24D_L2_Modifier_1_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod1Code);
                                                    oHCFA1500PaperForm.CF_24D_L2_Modifier_2_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod2Code);
                                                    oHCFA1500PaperForm.CF_24D_L2_Modifier_3_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod3Code);
                                                    oHCFA1500PaperForm.CF_24D_L2_Modifier_4_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod4Code);

                                                    string _DxPtrSL2 = "";
                                                    if (oTransaction.Lines[lineIndex].Dx1Ptr) { _DxPtrSL2 = "1"; }
                                                    if (oTransaction.Lines[lineIndex].Dx2Ptr) { _DxPtrSL2 = _DxPtrSL2 + "," + "2"; }
                                                    if (oTransaction.Lines[lineIndex].Dx3Ptr) { _DxPtrSL2 = _DxPtrSL2 + "," + "3"; }
                                                    if (oTransaction.Lines[lineIndex].Dx4Ptr) { _DxPtrSL2 = _DxPtrSL2 + "," + "4"; }
                                                    oHCFA1500PaperForm.CF_24E_L2_Diagnosis_Pointers.Value = _DxPtrSL2.TrimEnd(',');

                                                    string[] Charges = Convert.ToString(oTransaction.Lines[lineIndex].Charges).Split('.');
                                                    if (Charges.Length > 0)
                                                    {
                                                        if (Charges.Length > 1)
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L2_Charges_Principal.Value = Charges[0];
                                                            oHCFA1500PaperForm.CF_24F_L2_Charges_Secondary.Value = Charges[1];
                                                        }
                                                        else
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L2_Charges_Principal.Value = Charges[0];
                                                        }
                                                    }

                                                    oHCFA1500PaperForm.CF_24G_L2_Days_Units.Value = oTransaction.Lines[lineIndex].Unit.ToString();
                                                    oHCFA1500PaperForm.CF_24H_L2_EPSDT_FamilyPlan.Value = "";

                                                    if (oTransaction.Lines[lineIndex].RefferingProviderId > 0)
                                                    {
                                                        FillProviderDetails(oTransaction.Lines[lineIndex].RefferingProviderId, ProviderType.RenderingProvider);
                                                        oHCFA1500PaperForm.CF_24J_L2_RenderingProvider_NPI.Value = _RenderingNPI;
                                                    }

                                                    //**We show the first note only need to discuss on notes**
                                                    if (oTransaction.Lines[lineIndex].LineNotes.Count > 0)
                                                    {
                                                        oHCFA1500PaperForm.CF_24A_L2_Note.Value = oTransaction.Lines[lineIndex].LineNotes[0].NoteDescription;
                                                    }

                                                    TotCharges += oTransaction.Lines[lineIndex].Total;
                                                    oHCFA1500PaperForm.CF_IsPresent_Line2 = true;

                                                    #endregion " Service Line 2 "
                                                }
                                                break;
                                            case 2:
                                                {
                                                    #region " Service Line 3 "

                                                    oHCFA1500PaperForm.CF_24A_L3_DOS_From_DD.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L3_DOS_From_MM.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L3_DOS_From_YY.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("yy");
                                                    oHCFA1500PaperForm.CF_24A_L3_DOS_To_DD.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L3_DOS_To_MM.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L3_DOS_To_YY.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("yy");

                                                    oHCFA1500PaperForm.CF_24B_L3_POS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].POSCode);
                                                    oHCFA1500PaperForm.CF_24C_L3_EMG_Code.Value = "";
                                                    if (oTransaction.Lines[lineIndex].CPTCode.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_24D_L3_CPT_HCPCS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].CPTCode);
                                                        oHCFA1500PaperForm.CF_IsPresent_Line1 = true;
                                                    }
                                                    else { oHCFA1500PaperForm.CF_IsPresent_Line1 = false; }

                                                    oHCFA1500PaperForm.CF_24D_L3_Modifier_1_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod1Code);
                                                    oHCFA1500PaperForm.CF_24D_L3_Modifier_2_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod2Code);
                                                    oHCFA1500PaperForm.CF_24D_L3_Modifier_3_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod3Code);
                                                    oHCFA1500PaperForm.CF_24D_L3_Modifier_4_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod4Code);

                                                    string _DxPtrSL3 = "";
                                                    if (oTransaction.Lines[lineIndex].Dx1Ptr) { _DxPtrSL3 = "1"; }
                                                    if (oTransaction.Lines[lineIndex].Dx2Ptr) { _DxPtrSL3 = _DxPtrSL3 + "," + "2"; }
                                                    if (oTransaction.Lines[lineIndex].Dx3Ptr) { _DxPtrSL3 = _DxPtrSL3 + "," + "3"; }
                                                    if (oTransaction.Lines[lineIndex].Dx4Ptr) { _DxPtrSL3 = _DxPtrSL3 + "," + "4"; }
                                                    oHCFA1500PaperForm.CF_24E_L3_Diagnosis_Pointers.Value = _DxPtrSL3.TrimEnd(',');

                                                    string[] Charges = Convert.ToString(oTransaction.Lines[lineIndex].Charges).Split('.');
                                                    if (Charges.Length > 0)
                                                    {
                                                        if (Charges.Length > 1)
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L3_Charges_Principal.Value = Charges[0];
                                                            oHCFA1500PaperForm.CF_24F_L3_Charges_Secondary.Value = Charges[1];
                                                        }
                                                        else
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L3_Charges_Principal.Value = Charges[0];
                                                        }
                                                    }

                                                    oHCFA1500PaperForm.CF_24G_L3_Days_Units.Value = oTransaction.Lines[lineIndex].Unit.ToString();
                                                    oHCFA1500PaperForm.CF_24H_L3_EPSDT_FamilyPlan.Value = "";

                                                    if (oTransaction.Lines[lineIndex].RefferingProviderId > 0)
                                                    {
                                                        FillProviderDetails(oTransaction.Lines[lineIndex].RefferingProviderId, ProviderType.RenderingProvider);
                                                        oHCFA1500PaperForm.CF_24J_L3_RenderingProvider_NPI.Value = _RenderingNPI;
                                                    }

                                                    //**We show the first note only need to discuss on notes**
                                                    if (oTransaction.Lines[lineIndex].LineNotes.Count > 0)
                                                    {
                                                        oHCFA1500PaperForm.CF_24A_L3_Note.Value = oTransaction.Lines[lineIndex].LineNotes[0].NoteDescription;
                                                    }

                                                    TotCharges += oTransaction.Lines[lineIndex].Total;
                                                    oHCFA1500PaperForm.CF_IsPresent_Line3 = true;

                                                    #endregion " Service Line 3 "
                                                }
                                                break;
                                            case 3:
                                                {
                                                    #region " Service Line 4 "

                                                    oHCFA1500PaperForm.CF_24A_L4_DOS_From_DD.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L4_DOS_From_MM.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L4_DOS_From_YY.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("yy");
                                                    oHCFA1500PaperForm.CF_24A_L4_DOS_To_DD.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L4_DOS_To_MM.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L4_DOS_To_YY.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("yy");

                                                    oHCFA1500PaperForm.CF_24B_L4_POS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].POSCode);
                                                    oHCFA1500PaperForm.CF_24C_L4_EMG_Code.Value = "";
                                                    if (oTransaction.Lines[lineIndex].CPTCode.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_24D_L4_CPT_HCPCS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].CPTCode);
                                                        oHCFA1500PaperForm.CF_IsPresent_Line1 = true;
                                                    }
                                                    else { oHCFA1500PaperForm.CF_IsPresent_Line1 = false; }

                                                    oHCFA1500PaperForm.CF_24D_L4_Modifier_1_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod1Code);
                                                    oHCFA1500PaperForm.CF_24D_L4_Modifier_2_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod2Code);
                                                    oHCFA1500PaperForm.CF_24D_L4_Modifier_3_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod3Code);
                                                    oHCFA1500PaperForm.CF_24D_L4_Modifier_4_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod4Code);

                                                    string _DxPtrSL4 = "";
                                                    if (oTransaction.Lines[lineIndex].Dx1Ptr) { _DxPtrSL4 = "1"; }
                                                    if (oTransaction.Lines[lineIndex].Dx2Ptr) { _DxPtrSL4 = _DxPtrSL4 + "," + "2"; }
                                                    if (oTransaction.Lines[lineIndex].Dx3Ptr) { _DxPtrSL4 = _DxPtrSL4 + "," + "3"; }
                                                    if (oTransaction.Lines[lineIndex].Dx4Ptr) { _DxPtrSL4 = _DxPtrSL4 + "," + "4"; }
                                                    oHCFA1500PaperForm.CF_24E_L4_Diagnosis_Pointers.Value = _DxPtrSL4.TrimEnd(',');

                                                    string[] Charges = Convert.ToString(oTransaction.Lines[lineIndex].Charges).Split('.');
                                                    if (Charges.Length > 0)
                                                    {
                                                        if (Charges.Length > 1)
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L4_Charges_Principal.Value = Charges[0];
                                                            oHCFA1500PaperForm.CF_24F_L4_Charges_Secondary.Value = Charges[1];
                                                        }
                                                        else
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L4_Charges_Principal.Value = Charges[0];
                                                        }
                                                    }

                                                    oHCFA1500PaperForm.CF_24G_L4_Days_Units.Value = oTransaction.Lines[lineIndex].Unit.ToString();
                                                    oHCFA1500PaperForm.CF_24H_L4_EPSDT_FamilyPlan.Value = "";

                                                    if (oTransaction.Lines[lineIndex].RefferingProviderId > 0)
                                                    {
                                                        FillProviderDetails(oTransaction.Lines[lineIndex].RefferingProviderId, ProviderType.RenderingProvider);
                                                        oHCFA1500PaperForm.CF_24J_L4_RenderingProvider_NPI.Value = _RenderingNPI;
                                                    }

                                                    //**We show the first note only need to discuss on notes**
                                                    if (oTransaction.Lines[lineIndex].LineNotes.Count > 0)
                                                    {
                                                        oHCFA1500PaperForm.CF_24A_L4_Note.Value = oTransaction.Lines[lineIndex].LineNotes[0].NoteDescription;
                                                    }

                                                    TotCharges += oTransaction.Lines[lineIndex].Total;
                                                    oHCFA1500PaperForm.CF_IsPresent_Line4 = true;

                                                    #endregion " Service Line 4 "
                                                }
                                                break;
                                            case 4:
                                                {
                                                    #region " Service Line 5 "

                                                    oHCFA1500PaperForm.CF_24A_L5_DOS_From_DD.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L5_DOS_From_MM.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L5_DOS_From_YY.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("yy");
                                                    oHCFA1500PaperForm.CF_24A_L5_DOS_To_DD.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L5_DOS_To_MM.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L5_DOS_To_YY.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("yy");

                                                    oHCFA1500PaperForm.CF_24B_L5_POS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].POSCode);
                                                    oHCFA1500PaperForm.CF_24C_L5_EMG_Code.Value = "";
                                                    if (oTransaction.Lines[lineIndex].CPTCode.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_24D_L5_CPT_HCPCS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].CPTCode);
                                                        oHCFA1500PaperForm.CF_IsPresent_Line1 = true;
                                                    }
                                                    else { oHCFA1500PaperForm.CF_IsPresent_Line1 = false; }

                                                    oHCFA1500PaperForm.CF_24D_L5_Modifier_1_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod1Code);
                                                    oHCFA1500PaperForm.CF_24D_L5_Modifier_2_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod2Code);
                                                    oHCFA1500PaperForm.CF_24D_L5_Modifier_3_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod3Code);
                                                    oHCFA1500PaperForm.CF_24D_L5_Modifier_4_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod4Code);

                                                    string _DxPtrSL5 = "";
                                                    if (oTransaction.Lines[lineIndex].Dx1Ptr) { _DxPtrSL5 = "1"; }
                                                    if (oTransaction.Lines[lineIndex].Dx2Ptr) { _DxPtrSL5 = _DxPtrSL5 + "," + "2"; }
                                                    if (oTransaction.Lines[lineIndex].Dx3Ptr) { _DxPtrSL5 = _DxPtrSL5 + "," + "3"; }
                                                    if (oTransaction.Lines[lineIndex].Dx4Ptr) { _DxPtrSL5 = _DxPtrSL5 + "," + "4"; }
                                                    oHCFA1500PaperForm.CF_24E_L5_Diagnosis_Pointers.Value = _DxPtrSL5.TrimEnd(',');

                                                    string[] Charges = Convert.ToString(oTransaction.Lines[lineIndex].Charges).Split('.');
                                                    if (Charges.Length > 0)
                                                    {
                                                        if (Charges.Length > 1)
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L5_Charges_Principal.Value = Charges[0];
                                                            oHCFA1500PaperForm.CF_24F_L5_Charges_Secondary.Value = Charges[1];
                                                        }
                                                        else
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L5_Charges_Principal.Value = Charges[0];
                                                        }
                                                    }

                                                    oHCFA1500PaperForm.CF_24G_L5_Days_Units.Value = oTransaction.Lines[lineIndex].Unit.ToString();
                                                    oHCFA1500PaperForm.CF_24H_L5_EPSDT_FamilyPlan.Value = "";

                                                    if (oTransaction.Lines[lineIndex].RefferingProviderId > 0)
                                                    {
                                                        FillProviderDetails(oTransaction.Lines[lineIndex].RefferingProviderId, ProviderType.RenderingProvider);
                                                        oHCFA1500PaperForm.CF_24J_L5_RenderingProvider_NPI.Value = _RenderingNPI;
                                                    }

                                                    //**We show the first note only need to discuss on notes**
                                                    if (oTransaction.Lines[lineIndex].LineNotes.Count > 0)
                                                    {
                                                        oHCFA1500PaperForm.CF_24A_L5_Note.Value = oTransaction.Lines[lineIndex].LineNotes[0].NoteDescription;
                                                    }

                                                    TotCharges += oTransaction.Lines[lineIndex].Total;
                                                    oHCFA1500PaperForm.CF_IsPresent_Line5 = true;

                                                    #endregion " Service Line 5 "
                                                }
                                                break;
                                            case 5:
                                                {
                                                    #region " Service Line 6 "

                                                    oHCFA1500PaperForm.CF_24A_L6_DOS_From_DD.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L6_DOS_From_MM.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L6_DOS_From_YY.Value = oTransaction.Lines[lineIndex].DateServiceFrom.ToString("yy");
                                                    oHCFA1500PaperForm.CF_24A_L6_DOS_To_DD.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("dd");
                                                    oHCFA1500PaperForm.CF_24A_L6_DOS_To_MM.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("MM");
                                                    oHCFA1500PaperForm.CF_24A_L6_DOS_To_YY.Value = oTransaction.Lines[lineIndex].DateServiceTill.ToString("yy");

                                                    oHCFA1500PaperForm.CF_24B_L6_POS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].POSCode);
                                                    oHCFA1500PaperForm.CF_24C_L6_EMG_Code.Value = "";
                                                    if (oTransaction.Lines[lineIndex].CPTCode.Trim() != "")
                                                    {
                                                        oHCFA1500PaperForm.CF_24D_L6_CPT_HCPCS_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].CPTCode);
                                                        oHCFA1500PaperForm.CF_IsPresent_Line1 = true;
                                                    }
                                                    else { oHCFA1500PaperForm.CF_IsPresent_Line1 = false; }

                                                    oHCFA1500PaperForm.CF_24D_L6_Modifier_1_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod1Code);
                                                    oHCFA1500PaperForm.CF_24D_L6_Modifier_2_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod2Code);
                                                    oHCFA1500PaperForm.CF_24D_L6_Modifier_3_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod3Code);
                                                    oHCFA1500PaperForm.CF_24D_L6_Modifier_4_Code.Value = Convert.ToString(oTransaction.Lines[lineIndex].Mod4Code);

                                                    string _DxPtrSL6 = "";
                                                    if (oTransaction.Lines[lineIndex].Dx1Ptr) { _DxPtrSL6 = "1"; }
                                                    if (oTransaction.Lines[lineIndex].Dx2Ptr) { _DxPtrSL6 = _DxPtrSL6 + "," + "2"; }
                                                    if (oTransaction.Lines[lineIndex].Dx3Ptr) { _DxPtrSL6 = _DxPtrSL6 + "," + "3"; }
                                                    if (oTransaction.Lines[lineIndex].Dx4Ptr) { _DxPtrSL6 = _DxPtrSL6 + "," + "4"; }
                                                    oHCFA1500PaperForm.CF_24E_L6_Diagnosis_Pointers.Value = _DxPtrSL6.TrimEnd(',');

                                                    string[] Charges = Convert.ToString(oTransaction.Lines[lineIndex].Charges).Split('.');
                                                    if (Charges.Length > 0)
                                                    {
                                                        if (Charges.Length > 1)
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L6_Charges_Principal.Value = Charges[0];
                                                            oHCFA1500PaperForm.CF_24F_L6_Charges_Secondary.Value = Charges[1];
                                                        }
                                                        else
                                                        {
                                                            oHCFA1500PaperForm.CF_24F_L6_Charges_Principal.Value = Charges[0];
                                                        }
                                                    }

                                                    oHCFA1500PaperForm.CF_24G_L6_Days_Units.Value = oTransaction.Lines[lineIndex].Unit.ToString();
                                                    oHCFA1500PaperForm.CF_24H_L6_EPSDT_FamilyPlan.Value = "";

                                                    if (oTransaction.Lines[lineIndex].RefferingProviderId > 0)
                                                    {
                                                        FillProviderDetails(oTransaction.Lines[lineIndex].RefferingProviderId, ProviderType.RenderingProvider);
                                                        oHCFA1500PaperForm.CF_24J_L6_RenderingProvider_NPI.Value = _RenderingNPI;
                                                    }

                                                    //**We show the first note only need to discuss on notes**
                                                    if (oTransaction.Lines[lineIndex].LineNotes.Count > 0)
                                                    {
                                                        oHCFA1500PaperForm.CF_24A_L6_Note.Value = oTransaction.Lines[lineIndex].LineNotes[0].NoteDescription;
                                                    }

                                                    TotCharges += oTransaction.Lines[lineIndex].Total;
                                                    oHCFA1500PaperForm.CF_IsPresent_Line6 = true;

                                                    #endregion " Service Line 6 "
                                                }
                                                break;
                                        }
                                    }

                                    #endregion " Service Lines "

                                    #region " Total Charges "

                                    string[] TotalCharges = Convert.ToString(TotCharges).Split('.');
                                    if (TotalCharges.Length > 0)
                                    {
                                        if (TotalCharges.Length > 1)
                                        {
                                            oHCFA1500PaperForm.CF_28_TotalCharge_Principal.Value = TotalCharges[0];
                                            oHCFA1500PaperForm.CF_28_TotalCharge_Secondary.Value = TotalCharges[1];

                                            oHCFA1500PaperForm.CF_30_BalanceDue_Principal.Value = TotalCharges[0];
                                            oHCFA1500PaperForm.CF_30_BalanceDue_Secondary.Value = TotalCharges[1];
                                        }
                                        else
                                        {
                                            oHCFA1500PaperForm.CF_28_TotalCharge_Principal.Value = TotalCharges[0];
                                            oHCFA1500PaperForm.CF_30_BalanceDue_Principal.Value = TotalCharges[0];
                                        }
                                    }

                                    #endregion " Total Charges "

                                    #region " Paid Amount "

                                    decimal _paidAmount = 0;
                                    _paidAmount = GetClaimPayment(oTransaction.TransactionID, oTransaction.ClaimNo);
                                    if (_paidAmount > 0)
                                    {
                                        string[] PaidCharges = Convert.ToString(_paidAmount).Split('.');

                                        if (PaidCharges.Length > 0)
                                        {
                                            if (PaidCharges.Length > 1)
                                            {
                                                oHCFA1500PaperForm.CF_29_AmountPaid_Principal.Value = PaidCharges[0];
                                                oHCFA1500PaperForm.CF_29_AmountPaid_Secondary.Value = PaidCharges[1];
                                            }
                                            else
                                            {
                                                oHCFA1500PaperForm.CF_29_AmountPaid_Principal.Value = PaidCharges[0];
                                            }
                                        }
                                    }

                                    #endregion " Paid Amount "

                                    #region " Physican Signature "

                                    oHCFA1500PaperForm.CF_31_Physician_Supplier_Signature.Value = "";
                                    oHCFA1500PaperForm.CF_31_Physician_Supplier_Signature_Date.Value = DateTime.Now.ToString("MM/dd/yyyy");

                                    #endregion " Physican Signature "

                                    #region " ReSubmission Code "


                                    string _ReSubCode = "";

                                    //In the Original Ref. No. field, enter the previous Transaction
                                    //Control Number (TCN) for the line you are adjusting.
                                    //Attach a copy of your original claim and remittance advice
                                    //statement (RA) that shows the corresponding TCN.
                                    string _TransactionControlNumber = "";
                                    _ReSubCode = ""; // "replacement";
                                    _TransactionControlNumber = "";// "002005045520029000"; //**temp hard coded need to implement logic

                                    switch (_ReSubCode.ToUpper())
                                    {
                                        case "REPLACEMENT":
                                            oHCFA1500PaperForm.CF_22_MecaidResubmission_Code.Value = "7";
                                            oHCFA1500PaperForm.CF_22_Original_Refrence_No.Value = _TransactionControlNumber;
                                            break;
                                        case "VOID":
                                        case "CANCEL":
                                            oHCFA1500PaperForm.CF_22_MecaidResubmission_Code.Value = "8";
                                            oHCFA1500PaperForm.CF_22_Original_Refrence_No.Value = "";
                                            break;
                                        default:
                                            oHCFA1500PaperForm.CF_22_MecaidResubmission_Code.Value = "";
                                            oHCFA1500PaperForm.CF_22_Original_Refrence_No.Value = "";
                                            break;
                                    }

                                    #endregion " ReSubmission Code "

                                    oHCFA1500PaperForm.CF_23_PriorAuthorization_No.Value = oTransaction.PriorAuthorizationNo;
                                    oHCFA1500PaperForm.CF_19_LocalUse_Field.Value = "";

                                    //MaheshB 20091110
                                    //oTransaction.Transaction_Details.HCFA_IsSignatureOnFile;
                                }

                                    #endregion

                                _PaperClaimGenerated = true;
                            }
                         
                        }
                        if( oTransaction == null)
                        {
                            oTransaction = new Transaction();
                        }


                        #endregion

                        #region "Print Paper Claim at Claim Manager"

                        if (_PaperClaimGenerated == true)
                        {
                            //*****
                            if (CreateFolderStructure(_claimFolderPath))
                            {
                                if (oHCFA1500PaperForm != null)
                                {
                                    _OutPutClaimFilePath = oPrintForm.PrintHCFA1500Form(oHCFA1500PaperForm, _InputClaimFilePath, _OutPutClaimFilePath);
                                }
                                if (oHCFA1500PaperForm != null) { oHCFA1500PaperForm.Dispose(); oHCFA1500PaperForm = null; }
                            }
                            else
                            {
                                _retValue = false;
                                break; // break the for loop if folder stucture not found
                            }
                            //*****

                            //if (oHCFA1500PaperForm != null)
                            //{
                            //    _OutPutClaimFilePath = oPrintForm.PrintHCFA1500Form(oHCFA1500PaperForm, _InputClaimFilePath, _OutPutClaimFilePath);
                            //}

                            //if (oHCFA1500PaperForm != null) { oHCFA1500PaperForm.Dispose(); }

                            _TransactionIDsNReturnPaths[i].Description = _OutPutClaimFilePath;

                            #region " Update Claim Manager Table "

                            Int64 _date = 0;
                            Int64 _time = 0;
                            _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                            _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
                            Int64 _id = InsertUpdateClaimManager(0, BatchId, oTransaction.TransactionID, oTransaction.ClaimNo, oTransaction.PatientID, 0, "", "", "", _date, _time, this.UserID, gloPatient.TypeOfBilling.Paper.GetHashCode(), this.ClinicID);

                            #endregion

                        }

                        #endregion

                        //string _patName = "";
                        //_patName = oTransaction.Transaction_Details.HCFA_PatientFName + "" + oTransaction.Transaction_Details.HCFA_PatientLName;
                        //On_FileProcessed(_fileName,_patName,_TransactionIDsNReturnPaths.Count, (i + 1));

                        if (oTransaction != null) { oTransaction.Dispose(); oTransaction = null; }
                        if (oHCFA1500PaperForm != null) { oHCFA1500PaperForm.Dispose(); oHCFA1500PaperForm = null; }
                        if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); dtPatientInsurances = null; }
                        _PaperClaimGenerated = false;


                    }
                }
                TransactionIDsNReturnPaths = _TransactionIDsNReturnPaths;
            }
            catch (Exception ex)
            {
                string Err = ex.Message;
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _retValue = false;
            }
            finally
            {
                if (oHCFA1500PaperForm != null) { oHCFA1500PaperForm.Dispose(); oHCFA1500PaperForm = null; }
                if (oPrintForm != null) { oPrintForm.Dispose(); oPrintForm = null; }
               // if (_TransactionIDsNReturnPaths != null) { _TransactionIDsNReturnPaths.Dispose(); _TransactionIDsNReturnPaths = null; }
                if (ogloBilling != null) { ogloBilling.Dispose(); ogloBilling = null; }
                if (oTransaction != null) { oTransaction.Dispose(); oTransaction = null; }
                if (ogloPatient != null) { ogloPatient.Dispose(); ogloPatient = null; }
                if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); dtPatientInsurances = null; }
               
            }
           
            return _retValue;
        }

        private bool CreateFolderStructure(string Path)
        {
            bool _isExists = false;
            try
            {
                if (System.IO.Directory.Exists(Path) == false)
                { System.IO.Directory.CreateDirectory(Path); }
                _isExists = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Invalid server path please check the server path settings in gloPMAdmin", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            return _isExists;
        }

        private string FormattedClaimNumberGeneration(string NumberSize)
        {
            int _length = 0;
            _length = NumberSize.Length;
            if (_length == 1)
            {
                NumberSize = "0000" + NumberSize;
            }
            else if (_length == 2)
            {
                NumberSize = "000" + NumberSize;
            }
            else if (_length == 3)
            {
                NumberSize = "00" + NumberSize;
            }
            else if (_length == 4)
            {
                NumberSize = "0" + NumberSize;
            }
            else if (_length == 5)
            {
               // NumberSize = NumberSize;
            }
            return NumberSize;
        }

        #region " Dx Pointer Code chages 5061 "

        //private DataTable GetDistinctDiagnosis(Int64 TransactionID, Int64 ClinicID, Int64 ClaimNo)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string strSQL = "";
        //    DataTable dtDX = new DataTable();
        //    try
        //    {
        //        oDB.Connect(false);

        //        //strSQL = " Select sDx1Code AS DX from BL_Transaction_Lines " +
        //        //         " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") AND (nClaimNumber = " + ClaimNo + ") " +
        //        //         " AND sDx1Code IS NOT NULL AND sDx1Code <> '' " +
        //        //         " Union " +
        //        //         " Select sDx2Code AS DX from BL_Transaction_Lines  " +
        //        //         " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") AND (nClaimNumber = " + ClaimNo + ") " +
        //        //         " AND sDx2Code IS NOT NULL AND sDx2Code <> '' " +
        //        //         " Union  " +
        //        //         " Select sDx3Code AS DX from BL_Transaction_Lines " +
        //        //         " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") AND (nClaimNumber = " + ClaimNo + ") " +
        //        //         " AND sDx3Code IS NOT NULL AND sDx3Code <> '' " +
        //        //         " Union  " +
        //        //         " Select sDx4Code AS DX from BL_Transaction_Lines  " +
        //        //         " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") AND (nClaimNumber = " + ClaimNo + ") " +
        //        //         " AND sDx4Code IS NOT NULL AND sDx4Code <> '' ";

        //        //20100322 Dignosis Pointer as per Split Claim logic.
        //        strSQL = " Select sDx1Code AS DX from BL_Transaction_claim_Lines " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx1Code IS NOT NULL AND sDx1Code <> '' " +
        //                 " Union " +
        //                 " Select sDx2Code AS DX from BL_Transaction_claim_Lines  " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx2Code IS NOT NULL AND sDx2Code <> '' " +
        //                 " Union  " +
        //                 " Select sDx3Code AS DX from BL_Transaction_claim_Lines " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx3Code IS NOT NULL AND sDx3Code <> '' " +
        //                 " Union  " +
        //                 " Select sDx4Code AS DX from BL_Transaction_claim_Lines  " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx4Code IS NOT NULL AND sDx4Code <> '' ";

        //        oDB.Retrive_Query(strSQL, out dtDX);
        //        if (dtDX != null)
        //        {
        //            return dtDX;
        //        }
        //        return null;
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //        return null;
        //    }
        //    finally
        //    {
        //        if (oDB != null)
        //        {
        //            oDB.Disconnect();
        //            oDB.Dispose();
        //        }
        //    }
        //}

        private DataTable GetDistinctDiagnosis(Int64 TransactionID, Int64 ClinicID, Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string strSQL = "";
            DataTable dtAllDx = null;
            DataTable dtClaimDx = new DataTable();
            dtClaimDx.Columns.Add("DX");

            try
            {
                oDB.Connect(false);

                strSQL = "Select ISNULL(sDx1Code,'') AS sDx1Code,ISNULL(sDx2Code,'') AS sDx2Code, " +
                " ISNULL(sDx3Code,'') AS sDx3Code,ISNULL(sDx4Code,'') AS sDx4Code,ISNULL(sLinePrimaryDxCode,'') AS sLinePrimaryDxCode, " +
                " ISNULL(ntransactionlineno,0) AS ntransactionlineno " +
                " from BL_Transaction_Claim_Lines WITH(NOLOCK)  WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
                " order by ntransactionlineno";

                oDB.Retrive_Query(strSQL, out dtAllDx);
                DataRow dr;
                ArrayList _claimDx = new ArrayList();
                string _tempDxCode = "";

                if (dtAllDx != null && dtAllDx.Rows.Count > 0)
                {
                    for (int i = 0; i < dtAllDx.Rows.Count; i++)
                    {

                        //...Line 1 Primary Diagnosis
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sLinePrimaryDxCode"]).Trim().ToUpper();
                        if (Convert.ToInt32(dtAllDx.Rows[i]["ntransactionlineno"]) == 1 && _tempDxCode != "")
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx1
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx1Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx2
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx2Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx3
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx3Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx4
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx4Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                    }

                    if (_claimDx != null && _claimDx.Count > 0)
                    {
                        for (int DxIndex = 0; DxIndex < _claimDx.Count; DxIndex++)
                        {
                            dr = dtClaimDx.NewRow();
                            dr["DX"] = _claimDx[DxIndex].ToString();
                            dtClaimDx.Rows.Add(dr);
                            dr = null;
                        }
                        _claimDx.Clear();
                        if (dtClaimDx != null)
                        { return dtClaimDx; }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                return null;
            }
            finally
            {
                if (oDB != null){oDB.Disconnect(); oDB.Dispose();}
                if (dtAllDx != null) { dtAllDx.Dispose(); dtAllDx = null; }
            }
        }

        private DataTable GetDistinctDiagnosis(DataTable dtAllDx)
        {
            // gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
           // string strSQL = "";
            // DataTable dtAllDx = new DataTable();
            DataTable dtClaimDx = new DataTable();
            dtClaimDx.Columns.Add("DX");

            try
            {
                //oDB.Connect(false);

                //strSQL = "Select ISNULL(sDx1Code,'') AS sDx1Code,ISNULL(sDx2Code,'') AS sDx2Code, " +
                //" ISNULL(sDx3Code,'') AS sDx3Code,ISNULL(sDx4Code,'') AS sDx4Code,ISNULL(sLinePrimaryDxCode,'') AS sLinePrimaryDxCode, " +
                //" ISNULL(ntransactionlineno,0) AS ntransactionlineno " +
                //" from BL_Transaction_Claim_Lines WITH(NOLOCK)  WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
                //" order by ntransactionlineno";

                //oDB.Retrive_Query(strSQL, out dtAllDx);
                DataRow dr;
                ArrayList _claimDx = new ArrayList();
                string _tempDxCode = "";

                if (dtAllDx != null && dtAllDx.Rows.Count > 0)
                {
                    for (int i = 0; i < dtAllDx.Rows.Count; i++)
                    {

                        //...Line 1 Primary Diagnosis
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sLinePrimaryDxCode"]).Trim().ToUpper();
                        if (Convert.ToInt32(dtAllDx.Rows[i]["ntransactionlineno"]) == 1 && _tempDxCode != "")
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx1
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx1Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx2
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx2Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx3
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx3Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                        //..... Line Dx4
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx4Code"]).Trim().ToUpper();
                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); }

                    }

                    if (_claimDx != null && _claimDx.Count > 0)
                    {
                        for (int DxIndex = 0; DxIndex < _claimDx.Count; DxIndex++)
                        {
                            dr = dtClaimDx.NewRow();
                            dr["DX"] = _claimDx[DxIndex].ToString();
                            dtClaimDx.Rows.Add(dr);
                            dr = null;
                        }
                        _claimDx.Clear();
                        if (dtClaimDx != null)
                        { return dtClaimDx; }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                return null;
            }
        }

        #endregion " Dx Pointer Code changes 5061 "


        public DataTable GetTransaction_DX(Int64 MasterTransactionID, Int64 TransactionID) //  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
         //   string strSQL = "";
            DataTable dtDX = null;
            try
            {
                oDB.Connect(false);
                oParameters.Add("@nMasterTransactionid", MasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionid", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_Select_Transaction_DX", oParameters, out dtDX);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return null;
            }
            finally
            {
                if (oParameters != null){oParameters.Dispose();oParameters = null;}
                if (oDB != null){oDB.Disconnect();oDB.Dispose();oDB = null;}
                
            }

            return dtDX;
        }

        public DataTable GetTransaction_DX_Professional(Int64 MasterTransactionID, Int64 TransactionID) //  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
        //    string strSQL = "";
            DataTable dtDX = null;
            try
            {
                //oDB.Connect(false);
                //oParameters.Add("@nMasterTransactionid", MasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //oParameters.Add("@nTransactionid", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDB.Retrive("EDI837_GetDistinctDiagnosis", oParameters, out dtDX);
                dtDX = GetDistinctDiagnosis(TransactionID, _ClinicID, 0);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return null;
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }

            return dtDX;
        }


        private void FillProviderDetails(long _SelectedProviderId, ProviderType _ProviderType)
        {
            gloAppointmentBook.Books.Resource oResource = new gloAppointmentBook.Books.Resource(_databaseconnectionstring);
            gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //    DataTable dtProviderDetails = null;
            gloAppointmentBook.Books.Provider _Provider = null;
            Object _objResult = null;
        //    string strBillingSetting = "";
            string strRenderingSetting = "";
            try
            {

                _Provider = oResource.GetProviderDetail(_SelectedProviderId);

                if (_Provider != null)
                {
                    switch (_ProviderType)
                    {
                        case ProviderType.BillingProvider:
                            {
                                //oSettings.GetSetting("BillingSetting", _SelectedProviderId, _ClinicID, out _objResult);
                                //if (_objResult != null)
                                //{
                                //    // |Company|Practice|Business"
                                //    strBillingSetting = Convert.ToString(_objResult);
                                //}

                                //_BillingFName = _Provider.FirstName;
                                //_BillingLName = _Provider.LastName;
                                //_BillingMName = _Provider.MiddleName;
                                //_BillingNPI = _Provider.NPI;
                                //_BillingStateMedicalNo = _Provider.StateMedicalNo;
                                //_BillingSSN = _Provider.SSN;
                                //_BillingEmployerID = _Provider.EmployerID;
                                //_BillingTaxonomy = _Provider.Taxonomy;

                                //switch (strBillingSetting)
                                //{
                                //    case "Business":
                                //        {
                                //            _BillingAddress = _Provider.BMAddress1;
                                //            _BillingCity = _Provider.BMCity;
                                //            _BillingState = _Provider.BMState;
                                //            _BillingZIP = _Provider.BMZIP;
                                //            _BillingPhone = _Provider.BMPhone;
                                //        } break;
                                //    case "Practice":
                                //        {
                                //            _BillingAddress = _Provider.BPracAddress1;
                                //            _BillingCity = _Provider.BPracCity;
                                //            _BillingState = _Provider.BPracState;
                                //            _BillingZIP = _Provider.BPracZIP;
                                //            _BillingPhone = _Provider.BPracPhone;
                                //        } break;
                                //    case "Company":
                                //        {
                                //            _BillingAddress = _Provider.CompanyAddress1;
                                //            _BillingCity = _Provider.CompanyCity;
                                //            _BillingState = _Provider.CompanyState;
                                //            _BillingZIP = _Provider.CompanyZip;
                                //            _BillingPhone = _Provider.CompanyPhone;
                                //        } break;
                                //    default:
                                //        _BillingAddress = _Provider.BMAddress1;
                                //        _BillingCity = _Provider.BMCity;
                                //        _BillingState = _Provider.BMState;
                                //        _BillingZIP = _Provider.BMZIP;
                                //        _BillingPhone = _Provider.BMPhone;
                                //        break;
                                //}
                            }
                            break;
                        case ProviderType.PayToProvider:
                            {
                                //txtPTPAddress.Text = _Provider.BMAddress1;
                                //txtPTPCity.Text = _Provider.BMCity;
                                //txtPTPState.Text = _Provider.BMState;
                                //txtPTPZip.Text = _Provider.BMZIP;
                                //txtPTPNPI_ID.Text = _Provider.NPI;
                                //txtPTPUPIN.Text = _Provider.UPIN;
                            }
                            break;
                        case ProviderType.RefferingProvider:
                            {
                                //_ReferralId = Convert.ToString(_Provider.ProviderID);
                                //_ReferralFName = _Provider.FirstName;
                                //_ReferralAddress = _Provider.BMAddress1;
                                //_ReferralLName = _Provider.LastName;
                                //_ReferralMName = _Provider.MiddleName;
                                //_ReferralCity = _Provider.BMCity;
                                //_ReferralState = _Provider.BMState;
                                //_ReferralZIP = _Provider.BMZIP;
                                //_ReferralNPI = _Provider.NPI;
                                //_ReferralStateMedicalNo = _Provider.StateMedicalNo;
                                //_ReferralSSN = _Provider.SSN;
                                //_ReferralEmployerID = _Provider.EmployerID;
                                //_ReferralTaxonomy = _Provider.Taxonomy;

                            }
                            break;
                        case ProviderType.RenderingProvider:
                            {
                                oSettings.GetSetting("RenderingSetting", _SelectedProviderId, _ClinicID, out _objResult);
                                if (_objResult != null)
                                {
                                    // |Company|Practice|Business"
                                    strRenderingSetting = Convert.ToString(_objResult);
                                }

                                _RenderingFName = _Provider.FirstName;
                                _RenderingLName = _Provider.LastName;
                                _RenderingMName = _Provider.MiddleName;
                                _RenderingNPI = _Provider.NPI;
                                _RenderingStateMedicalNo = _Provider.StateMedicalNo;
                                _RenderingSSN = _Provider.SSN;
                                _RenderingEmployerID = _Provider.EmployerID;
                                _RenderingTaxonomy = _Provider.Taxonomy;

                                switch (strRenderingSetting)
                                {
                                    case "Business":
                                        {
                                            _RenderingAddress = _Provider.BMAddress1;
                                            _RenderingCity = _Provider.BMCity;
                                            _RenderingState = _Provider.BMState;
                                            _RenderingZIP = _Provider.BMZIP;

                                        } break;
                                    case "Practice":
                                        {
                                            _RenderingAddress = _Provider.BPracAddress1;
                                            _RenderingCity = _Provider.BPracCity;
                                            _RenderingState = _Provider.BPracState;
                                            _RenderingZIP = _Provider.BPracZIP;
                                        } break;
                                    case "Company":
                                        {
                                            _RenderingAddress = _Provider.CompanyAddress1;
                                            _RenderingCity = _Provider.CompanyCity;
                                            _RenderingState = _Provider.CompanyState;
                                            _RenderingZIP = _Provider.CompanyZip;
                                        } break;
                                    default:
                                        _RenderingAddress = _Provider.BMAddress1;
                                        _RenderingCity = _Provider.BMCity;
                                        _RenderingState = _Provider.BMState;
                                        _RenderingZIP = _Provider.BMZIP;
                                        break;
                                }

                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);

            }
            finally
            {
                if (_Provider != null) { _Provider.Dispose(); _Provider = null; }
                if (oResource != null) { oResource.Dispose(); oResource=null;}
                if (oSettings != null) { oSettings.Dispose(); oSettings = null; }
                _objResult = null;
            }
        }

        public DataTable GetBillingProviderFacility(Int64 nProviderId, Int64 nFacilityId, Int64 ContactID, string SettingName, string Type) //  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlquery = String.Empty;
            DataTable dtProviders = null;
            try
            {
                oDB.Connect(false);

                gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nProviderID", nProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nFacilityID", nFacilityId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactId", ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sSettingName", SettingName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@bIsEDI", 1, ParameterDirection.Input, SqlDbType.Bit);
                oDB.Retrive("BL_Get_AlternateID_Settings", oDBParameters, out dtProviders);

                oDB.Disconnect();


                if (dtProviders != null && dtProviders.Rows.Count > 0)
                {
                    if (Type == "Provider")
                    {

                    }
                    else if (Type == "Facility")
                    {
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtProviders;
        }

        public DataTable GetBillingProviderFacility_5010(Int64 nProviderId, Int64 nFacilityId, Int64 ContactID, string SettingName, string Type) //  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlquery = String.Empty;
            DataTable dtProviders = null;
            try
            {
                oDB.Connect(false);

                gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nProviderID", nProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nFacilityID", nFacilityId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactId", ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sSettingName", SettingName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@bIsEDI", 1, ParameterDirection.Input, SqlDbType.Bit);
                oDB.Retrive("BL_Get_AlternateID_Settings_5010", oDBParameters, out dtProviders);
                oDB.Disconnect();


            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtProviders;
        }

        public DataTable GetBillingProviderFacility_UB04_4010(Int64 nProviderId, Int64 nFacilityId, Int64 ContactID, string SettingName, string Type)//  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlquery = String.Empty;
            DataTable dtProviders = null;
            try
            {
                oDB.Connect(false);

                gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nProviderID", nProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nFacilityID", nFacilityId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactId", ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sSettingName", SettingName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@bIsEDI", 1, ParameterDirection.Input, SqlDbType.Bit);
                oDB.Retrive("BL_Get_AlternateID_Settings_UB04_4010", oDBParameters, out dtProviders);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtProviders;
        }


        private DataTable GetReferralProvider(Int64 PatientID, Int64 RefferalId) //  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            String _strSQL = "";
            DataTable dtProvider = null;

            try
            {
                oDB.Connect(false);
                _strSQL = " SELECT  nContactId, sAddressLine1, sAddressLine2, sCity, sState, sZIP, sPhone, sFirstName, sMiddleName, sLastName, sTaxonomy, sTaxonomyDesc,  " +
                          " sTaxID, sUPIN, sNPI, sDegree, nContactFlag, sNotes " +
                          " FROM Patient_DTL WITH(NOLOCK) " +
                          " WHERE  (nClinicID = " + _ClinicID + ") AND (nPatientID = " + PatientID + ") AND nPatientDetailID = " + RefferalId + " AND (nContactFlag = 3)";
                oDB.Retrive_Query(_strSQL, out dtProvider);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbex)
            {
                dbex.ERROR_Log(dbex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtProvider;
        }

        private gloAppointmentBook.Books.Provider GetProvider(Int64 ProviderId, ProviderType TypeProvder)
        {
            gloAppointmentBook.Books.Resource oResource = new gloAppointmentBook.Books.Resource(_databaseconnectionstring);
            gloAppointmentBook.Books.Provider oProvider = null;

            try
            {
                oProvider = oResource.GetProviderDetail(ProviderId);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oResource != null) { oResource.Dispose(); oResource = null; }
            }

            return oProvider;
        }

        private decimal GetClaimPayment(Int64 TransactionId, Int64 ClaimId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object retVal = null;
            decimal _paidAmount = 0;
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = " SELECT ISNULL(SUM(dCurrentPaymentAmt),0) AS PaidAmount " +
                " FROM BL_Transaction_Payment_DTL WITH(NOLOCK) " +
                " WHERE  " +
                " nBillingTransactionID = " + TransactionId + " " +
                " AND nClaimNo = " + ClaimId + " " +
                " AND nClinicID = " + this.ClinicID + " ";
                retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (retVal != null && retVal != DBNull.Value)
                {
                    _paidAmount = Convert.ToDecimal(retVal);
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (retVal != null) { retVal = null; }
            }
            return _paidAmount;
        }

        public bool GetServerPath() //  Not used in PM
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object retVal = null;
         //   string _serverPath = "";
            string _sqlQuery = "";
            bool _isValidPath = false;

            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT sSettingsValue FROM Settings WITH(NOLOCK) WHERE UPPER(sSettingsName) = 'SERVERPATH'";
                retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (retVal != null && retVal != DBNull.Value)
                {
                    this.ServerPath = Convert.ToString(retVal);
                    try
                    {
                        if (System.IO.Directory.Exists(ServerPath) == true)
                        { _isValidPath = true; }
                    }
                    catch //(Exception ex)
                    { _isValidPath = false; }
                }
                else
                { this.ServerPath = ""; }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (retVal != null) { retVal = null; }
            }
            return _isValidPath;
        }

        public bool getSecondaryIDFacility(Int64 nContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            bool _result = false;

            try
            {
                oDB.Connect(false);
                _sqlQuery = "Select ISNULL(bISOtherID,0) as bISOtherID from BL_AlternateID_Settings WITH(NOLOCK) where sSettingName='IsOtherIDForEDIFacility' and nContactID=" + nContactID + "";
                DataTable _dtresult = null;
                oDB.Retrive_Query(_sqlQuery, out _dtresult);
                if (_dtresult != null && _dtresult.Rows.Count > 0)
                {
                    _result = Convert.ToBoolean(_dtresult.Rows[0]["bISOtherID"]);
                }
                if (_dtresult != null)
                {
                    _dtresult.Dispose();
                    _dtresult = null;
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return _result;
        }

        #endregion

        #region " EDI Generation Private Methods "

        private bool GetValidationFieldsSettings(string SettingName)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            object _result = null;
            bool _IsSettingPresent = false;
            try
            {
                oDB.Connect(false);
                _strSQL = "SELECT  sSettingsValue FROM Settings WITH(NOLOCK) WHERE nUserClinicFlag=5 AND sSettingsName='" + SettingName + "'";
                _result = oDB.ExecuteScalar_Query(_strSQL);
                if (_result != null)
                {
                    _IsSettingPresent = Convert.ToBoolean(_result);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                _result = null;
            }
            return _IsSettingPresent;
        }

        #region

        //public void LoadEDIObject()
        //{
        //    try
        //    {
        //        //Here Interchange Loop should come
        //        sPath = AppDomain.CurrentDomain.BaseDirectory;
        //        sSEFFile = "837_X098A1.SEF";     //ToDO :Give the file name at runtime, since it can change
        //        sEdiFile = "837A1.x12";

        //        sSEFFile1 = "276_X093A1.SEF";
        //        sEdiFile1 = "276OUTPUT.x12";

        //        oEdiDoc = new ediDocument();
        //        ediDocument.Set(ref oEdiDoc, new ediDocument());
        //        ediSchemas.Set(ref oSchemas, (ediSchemas)oEdiDoc.GetSchemas());
        //        oSchemas.EnableStandardReference = false;

        //        ediSchema.Set(ref oSchema, (ediSchema)oEdiDoc.LoadSchema(sPath + sSEFFile, 0));
        //        //5050 MaheshB
        //        //ediSchema.Set(ref oSchema, (ediSchema)oEdiDoc.LoadSchema(sPath + sSEFFile1, 0));
        //        //ediSchema.Set(ref oSchema, (ediSchema)oEdiDoc.LoadSchema("997_X12-4010.SEF", 0));
        //        //oEdiDoc.LoadSchema("997_X12-4010.SEF", 0);
        //        System.IO.FileInfo ofile = new System.IO.FileInfo(sPath + sSEFFile);
        //        //5050 MaheshB
        //        //System.IO.FileInfo ofile1 = new System.IO.FileInfo(sPath + sSEFFile1);


        //        if (ofile.Exists == false)
        //        {
        //            MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //            _IsSEFPresent = false;
        //            return;
        //        }
        //        //if (ofile1.Exists == false)
        //        //{
        //        //    MessageBox.Show("276 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //        //    return;
        //        //}
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //    }
        //}

        //public void LoadEDIObject5010()
        //{
        //    try
        //    {
        //        //Here Interchange Loop should come
        //        sPath = AppDomain.CurrentDomain.BaseDirectory;
        //        sSEFFile = "837_005010X222A1.SemRef.SEF";     //ToDO :Give the file name at runtime, since it can change               

        //        oEdiDoc = new ediDocument();
        //        ediDocument.Set(ref oEdiDoc, new ediDocument());
        //        ediSchemas.Set(ref oSchemas, (ediSchemas)oEdiDoc.GetSchemas());
        //        oSchemas.EnableStandardReference = false;

        //        ediSchema.Set(ref oSchema, (ediSchema)oEdiDoc.LoadSchema(sPath + sSEFFile, 0));

        //        System.IO.FileInfo ofile = new System.IO.FileInfo(sPath + sSEFFile);

        //        if (ofile.Exists == false)
        //        {
        //            MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //            _IsSEFPresent = false;
        //            return;
        //        }




        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //    }
        //}

        //public void LoadEDIObjectForUB()
        //{
        //    try
        //    {

        //        sPath = AppDomain.CurrentDomain.BaseDirectory;
        //        sSEFFile = "837_X096A1.SEF";


        //        oEdiDoc = new ediDocument();
        //        ediDocument.Set(ref oEdiDoc, new ediDocument());
        //        ediSchemas.Set(ref oSchemas, (ediSchemas)oEdiDoc.GetSchemas());
        //        oSchemas.EnableStandardReference = false;

        //        ediSchema.Set(ref oSchema, (ediSchema)oEdiDoc.LoadSchema(sPath + sSEFFile, 0));

        //        System.IO.FileInfo ofile = new System.IO.FileInfo(sPath + sSEFFile);

        //        if (ofile.Exists == false)
        //        {
        //            MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //            _IsSEFPresent = false;
        //            return;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //    }
        //}

        #endregion

        public bool IsValidICD9(string ICD9Code, bool _IsUndo)//Used for generation of EDI
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            object ReturnValue = null;
            string _sqlQuery = "";
            bool _retVal = true;

            try
            {
                oDB.Connect(false);
                _sqlQuery = "select ISNULL(sICD9Code,'') AS sICD9Code from ICD9_InvalidEDI where UPPER(sICD9Code) = '" + ICD9Code.ToUpper() + "'";
                ReturnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                if (ReturnValue != null && ReturnValue != DBNull.Value && Convert.ToString(ReturnValue) != "")
                {
                    if (_IsUndo == true)
                    {
                        // string _message = "For Claim No :" + claim_no + Environment.NewLine + "ICD9 is Invalid." + Environment.NewLine + "Code : " + ICD9Code + "  ";
                        // MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        _retVal = true;
                    }
                    else
                    {
                        // string _message = "For Claim No :" + claim_no + Environment.NewLine + "ICD9 is Invalid." + Environment.NewLine + "Code : " + ICD9Code + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "
                        //if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                        //{

                        _retVal = false;

                        // }
                    }
                }

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                ReturnValue = null; 
            }
            return _retVal;
        }

        public bool IsValidICD9Code(string ICD9Code)//Used For Validation
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            object ReturnValue = null;
            string _sqlQuery = "";
            bool _retVal = true;

            try
            {
                oDB.Connect(false);
                _sqlQuery = "select ISNULL(sICD9Code,'') AS sICD9Code from ICD9_InvalidEDI WITH(NOLOCK) where UPPER(sICD9Code) = '" + ICD9Code.ToUpper() + "'";
                ReturnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                if (ReturnValue != null && ReturnValue != DBNull.Value && Convert.ToString(ReturnValue) != "")
                {
                    //string _message = "ICD9 is Invalid." + Environment.NewLine + "Code : " + ICD9Code + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "
                    //if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                    //{
                    _retVal = false;
                    //}
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                ReturnValue = null;
            }
            return _retVal;
        }

        public string IsValidICD9Code_New(string ICD9Code, bool _IsUndo)//Used For Validation
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable _DtIcd9 = null;
            string _sqlQuery = "";
            string _retVal = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = "select ISNULL(sICD9Code,'') AS sICD9Code from ICD9_InvalidEDI WITH(NOLOCK) where UPPER(sICD9Code) in(" + ICD9Code.ToUpper() + ")";

                oDB.Retrive_Query(_sqlQuery, out  _DtIcd9);

                for (int i = 0; i < _DtIcd9.Rows.Count; i++)
                {
                    _retVal += " " + Convert.ToString(_DtIcd9.Rows[i][0].ToString().Trim()) + ", ";
                }

                oDB.Disconnect();
                if (_IsUndo == true)
                {
                    return "";
                }
                else
                {
                    return _retVal.Trim();
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                return "";
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return "";
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_DtIcd9 != null) {  _DtIcd9.Dispose(); _DtIcd9 = null; }
            }

        }

        private string FormattedTime(string TimeFormat)
        {
            int _length = 0;
            _length = TimeFormat.Length;
            if (_length == 0)
            {
                TimeFormat = "0000";
            }
            if (_length == 1)
            {
                TimeFormat = "000" + TimeFormat;
            }
            else if (_length == 2)
            {
                TimeFormat = "00" + TimeFormat;
            }
            else if (_length == 3)
            {
                TimeFormat = "0" + TimeFormat;
            }
            else if (_length == 4)
            {
         //       TimeFormat = TimeFormat;
            }
            return TimeFormat;
        }

        private string GetPriorAuthorizationNumber(Int64 PatientID, Int64 InsuranceID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            Object _result = null;
            string _PriorAuthorizationNo = "";
            try
            {
                _strSQL = "SELECT sAuthorizationNumber FROM PatientPriorAuthorization WITH(NOLOCK) WHERE nPatientID=" + PatientID + "  AND nInsuranceID=" + InsuranceID + " ";
                oDB.Connect(false);
                _result = oDB.ExecuteScalar_Query(_strSQL);
                if (_result != null)
                {
                    _PriorAuthorizationNo = Convert.ToString(_result);
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                _result = null;
            }
            return _PriorAuthorizationNo;
        }

        private string GetPriorAuthorizationNumber(Int64 TransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            Object _result = null;
            string _PriorAuthorizationNo = "";
            try
            {
                _strSQL = "SELECT PriorAuthorization_Mst.sPriorAuthorizationNo FROM BL_Transaction_MST WITH(NOLOCK) " +
                        " INNER JOIN PriorAuthorization_Mst WITH(NOLOCK) ON BL_Transaction_MST.nAuthorizationID=PriorAuthorization_Mst.nPriorAuthorizationID " +
                        " WHERE BL_Transaction_MST.nTransactionID=" + TransactionID;
                oDB.Connect(false);
                _result = oDB.ExecuteScalar_Query(_strSQL);
                if (_result != null)
                {
                    _PriorAuthorizationNo = Convert.ToString(_result);
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                _result = null;
            }
            return _PriorAuthorizationNo;
        }

        private bool ValidateEDIData(ArrayList SelectedTrans)
        {
            DataTable dtClearingHouse = null;
           
            //DataTable dtReceiver = new DataTable();
            //DataTable dtBillingProvider = new DataTable();
            //DataTable dtRenderingProvider = new DataTable();
            
       
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            string _Message = "";
            Transaction oTransaction = null;
            string strMissingText = "";
            string _MessageHeader = "";
            //string _FilePath = AppDomain.CurrentDomain.BaseDirectory;
            string _FilePath = gloSettings.FolderSettings.AppTempFolderPath;
            ArrayList oClaimNoArray = new ArrayList();
            bool _bSendingToBatch = false;

            try
            {
                _MessageHeader += "";

                //Get Clearing House Information in Datatable
                //dtClearingHouse = new DataTable();
                dtClearingHouse = ogloBilling.GetClearingHouseSettings();
                if (dtClearingHouse == null || dtClearingHouse.Rows.Count < 1)
                {
                    MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
                DataTable dtSubmitter = null;
                if (SelectedTrans != null)
                {
                    if (SelectedTrans.Count > 0)
                    {
                        for (int i = 0; i < SelectedTrans.Count; i++)
                        {
                            //oTransaction = new Transaction();
                       //     TransactionLine oTransLine = null;
                            oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTrans[i]), _ClinicID);
                            if (oTransaction != null)
                            {
                                if (oTransaction.Lines.Count > 0)
                                {
                                    //Get Submitter Information in Datatable
                                    //dtSubmitter = new DataTable();
                                    dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), oTransaction.ProviderID);
                                    if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                                    {
                                        MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        if (dtSubmitter != null)
                                        {
                                            dtSubmitter.Dispose();
                                            dtSubmitter = null;
                                        }
                                        oTransaction.Dispose();
                                        oTransaction = null;
                                        return false;
                                    }
                                }
                                oTransaction.Dispose();
                                oTransaction = null;
                            }
                        }
                    }
                }

                #region " Clearing House "
                //ISA and GS Settings
                if (Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Sender ID"))
                        strMissingText += "Sender ID" + Environment.NewLine + "" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Receiver ID"))
                        strMissingText += "Receiver ID" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Sender Code"))
                        strMissingText += "Sender Code" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Receiver Code"))
                        strMissingText += "Receiver Code" + Environment.NewLine + "";
                }
                #endregion " Clearing House "

                #region " Submitter "
                //Submitter
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Submitter Name"))
                        strMissingText += "Submitter Name" + Environment.NewLine + "";
                }
                //if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim() == "")
                //{
                //    if (GetValidationFieldsSettings("Submitter Contact Person Name"))
                //        strMissingText += "Submitter Contact Person Name" + Environment.NewLine + "";
                //}
                if (Convert.ToString(dtSubmitter.Rows[0]["sPhoneNo"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Submitter Contact Person Number"))
                        strMissingText += "Submitter Contact Person Number" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterCity"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Submitter City"))
                        strMissingText += "Submitter City" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterState"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Submitter State"))
                        strMissingText += "Submitter State" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterZIP"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Submitter Zip"))
                        strMissingText += "Submitter Zip" + Environment.NewLine + "";
                }
                //if (_SubmitterETIN == "")
                //{
                //    if (GetValidationFieldsSettings("Submitter ETIN"))
                //    strMissingText += "Submitter ETIN" + Environment.NewLine + "";
                //}
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterAddress1"]).Trim() + " " + Convert.ToString(dtSubmitter.Rows[0]["SubmitterAddress2"]).Trim() == "")
                {
                    if (GetValidationFieldsSettings("Submitter Address"))
                        strMissingText += "Submitter Address" + Environment.NewLine + "";
                }
                #endregion " Submitter "

                if (strMissingText.Trim() != "")
                {
                    _MessageHeader = _MessageHeader + strMissingText;
                }
                else
                {
                    _MessageHeader = "";
                }
                if (dtSubmitter != null)
                {
                    dtSubmitter.Dispose();
                    dtSubmitter = null;
                }

                if (SelectedTrans != null)
                {
                    if (SelectedTrans.Count > 0)
                    {
                        for (int i = 0; i < SelectedTrans.Count; i++)
                        {
                            string strMessage = "";
                          //  oTransaction = new Transaction();
                         //   TransactionLine oTransLine = null;
                            if (oTransaction != null)
                            {
                                oTransaction.Dispose();
                                oTransaction = null;
                            }

                            oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTrans[i]), _ClinicID);
                            string _ClaimMessageHeader = "";
                            Resource oResource = new Resource(_databaseconnectionstring);
                            Provider _Provider = null;
                            gloPatient.Patient oPatient = null;
                         //   gloPatient.Referrals oReferral = new gloPatient.Referrals();
                            gloPatient.gloPatient ogloPatient = null;
                            DataTable dtPatientInsurances = null;
                            DataTable dtFacility = null;
                            Object _objResult = null;
                            string strBillingSetting = "";
                            try
                            {
                                if (oTransaction != null)
                                {
                                    if (oTransaction.Lines.Count > 0)
                                    {
                                        if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
                                        {
                                            try
                                            {
                                                _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
                                                if (_Provider == null)
                                                {
                                                    MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return false;
                                                }
                                                ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
                                                dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID);
                                                if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                                {
                                                    MessageBox.Show("Patient Insurance is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return false;
                                                }

                                                dtFacility = ogloBilling.GetFacilityInfo(oTransaction.FacilityCode, oTransaction.ProviderID);
                                                //if (dtFacility == null && dtFacility.Rows.Count < 1)
                                                //{
                                                //    MessageBox.Show("Facility information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                //    return false;
                                                //}
                                                oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
                                                if (oPatient == null)
                                                {
                                                    MessageBox.Show("Patient information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return false;
                                                }
                                            }
                                            catch
                                            {
                                            }
                                            finally
                                            {
                                                if (ogloPatient != null)
                                                {
                                                    ogloPatient.Dispose();
                                                    ogloPatient = null;
                                                }
                                            }
                                        }

                                        _ClaimMessageHeader = " " + Environment.NewLine + "For Patient: " + oPatient.DemographicsDetail.PatientFirstName.Trim() + " " + oPatient.DemographicsDetail.PatientLastName.Trim() + "  and Claim Number: " + FormattedClaimNumberGeneration(oTransaction.ClaimNo.ToString()) + " " + Environment.NewLine + "" + Environment.NewLine + "";

                                        for (int j = 0; j < oTransaction.Lines.Count; j++)
                                        {
                                            #region " ICD9 Validation "
                                            if (Convert.ToString(oTransaction.Lines[j].Dx1Code).Trim() != "")
                                            {
                                                if (IsValidICD9Code(Convert.ToString(oTransaction.Lines[j].Dx1Code.Trim())) == false)
                                                {
                                                    strMessage += "Invalid ICD9 Code1: " + Convert.ToString(oTransaction.Lines[j].Dx1Code.Trim()) + "" + Environment.NewLine + "";
                                                }
                                            }
                                            if (Convert.ToString(oTransaction.Lines[j].Dx2Code).Trim() != "")
                                            {
                                                if (IsValidICD9Code(Convert.ToString(oTransaction.Lines[j].Dx2Code.Trim())) == false)
                                                {
                                                    strMessage += "Invalid ICD9 Code2: " + Convert.ToString(oTransaction.Lines[j].Dx2Code.Trim()) + "" + Environment.NewLine + "";
                                                }
                                            }
                                            if (Convert.ToString(oTransaction.Lines[j].Dx3Code).Trim() != "")
                                            {
                                                if (IsValidICD9Code(Convert.ToString(oTransaction.Lines[j].Dx3Code.Trim())) == false)
                                                {
                                                    strMessage += "Invalid ICD9 Code3: " + Convert.ToString(oTransaction.Lines[j].Dx3Code.Trim()) + "" + Environment.NewLine + "";
                                                }
                                            }
                                            if (Convert.ToString(oTransaction.Lines[j].Dx4Code).Trim() != "")
                                            {
                                                if (IsValidICD9Code(Convert.ToString(oTransaction.Lines[j].Dx4Code.Trim())) == false)
                                                {
                                                    strMessage += "Invalid ICD9 Code4: " + Convert.ToString(oTransaction.Lines[j].Dx4Code.Trim()) + "" + Environment.NewLine + "";
                                                }
                                            }
                                            #endregion " ICD9 Validation "
                                        }
                                    }
                                }

                                #region " Billing Provider "
                                //Billing Provider
                                if (_Provider != null)
                                {
                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);

                                    oSettings.GetSetting("BillingSetting", oTransaction.ProviderID, _ClinicID, out _objResult);
                                    oSettings.Dispose();
                                    oSettings = null;
                                    if (_objResult != null)
                                    {
                                        // |Company|Practice|Business"
                                        strBillingSetting = Convert.ToString(_objResult);
                                    }
                                    string _BillingAddress = "";
                                    string _BillingCity = "";
                                    string _BillingState = "";
                                    string _BillingZIP = "";
                                    switch (strBillingSetting)
                                    {
                                        case "Business":
                                            {
                                                _BillingAddress = _Provider.BMAddress1;
                                                _BillingCity = _Provider.BMCity;
                                                _BillingState = _Provider.BMState;
                                                _BillingZIP = _Provider.BMZIP;
                                            } break;
                                        case "Practice":
                                            {
                                                _BillingAddress = _Provider.BPracAddress1;
                                                _BillingCity = _Provider.BPracCity;
                                                _BillingState = _Provider.BPracState;
                                                _BillingZIP = _Provider.BPracZIP;
                                            } break;
                                        case "Company":
                                            {
                                                _BillingAddress = _Provider.CompanyAddress1;
                                                _BillingCity = _Provider.CompanyCity;
                                                _BillingState = _Provider.CompanyState;
                                                _BillingZIP = _Provider.CompanyZip;
                                            } break;
                                        default:
                                            _BillingAddress = _Provider.BMAddress1;
                                            _BillingCity = _Provider.BMCity;
                                            _BillingState = _Provider.BMState;
                                            _BillingZIP = _Provider.BMZIP;
                                            break;
                                    }

                                    if (_Provider.FirstName.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider First Name"))
                                            strMessage += "Billing Provider First Name" + Environment.NewLine + "";
                                    }
                                    if (_Provider.LastName.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider Last Name"))
                                            strMessage += "Billing Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (_Provider.MiddleName.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider Middle Name"))
                                            strMessage += "Billing Provider Middle Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider City"))
                                            strMessage += "Billing Provider City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider State"))
                                            strMessage += "Billing Provider State" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider Address"))
                                            strMessage += "Billing Provider Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider Zip"))
                                            strMessage += "Billing Provider Zip" + Environment.NewLine + "";
                                    }
                                    if (_Provider.NPI.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider NPI"))
                                            strMessage += "Billing Provider NPI" + Environment.NewLine + "";
                                    }
                                    if (_Provider.SSN.Trim() == "")
                                    {
                                        //strMessage += "Billing Provider SSN" + Environment.NewLine + "";
                                    }
                                    if (_Provider.EmployerID.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider Employer ID"))
                                            strMessage += "Billing Provider Employer ID" + Environment.NewLine + "";
                                    }
                                    if (_Provider.StateMedicalNo.Trim() == "")
                                    {
                                        //strMessage += "Billing Provider State Medical No" + Environment.NewLine + "";
                                    }
                                    if (_Provider.Taxonomy.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Billing Provider Taxonomy"))
                                            strMessage += "Billing Provider Taxonomy" + Environment.NewLine + "";
                                    }
                                }

                                #endregion " Billing Provider "

                                #region " Facility "
                                //Facility Information
                                if (oTransaction.FacilityCode.Trim() != "")
                                {
                                    if (dtFacility != null && dtFacility.Rows.Count > 0)
                                    {
                                        if (Convert.ToString(dtFacility.Rows[0]["FacilityName"]).Trim() == "")
                                        {
                                            if (GetValidationFieldsSettings("Facility Name"))
                                                strMessage += "Facility Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtFacility.Rows[0]["FacilityAddress1"]).Trim() == "")
                                        {
                                            if (GetValidationFieldsSettings("Facility Address"))
                                                strMessage += "Facility Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtFacility.Rows[0]["FacilityCity"]).Trim() == "")
                                        {
                                            if (GetValidationFieldsSettings("Facility City"))
                                                strMessage += "Facility City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtFacility.Rows[0]["FacilityState"]).Trim() == "")
                                        {
                                            if (GetValidationFieldsSettings("Facility State"))
                                                strMessage += "Facility State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtFacility.Rows[0]["FacilityZip"]).Trim() == "")
                                        {
                                            if (GetValidationFieldsSettings("Facility Zip"))
                                                strMessage += "Facility Zip" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtFacility.Rows[0]["FacilityNPI"]).Trim() == "")
                                        {
                                            if (GetValidationFieldsSettings("Facility NPI"))
                                                strMessage += "Facility NPI" + Environment.NewLine + "";
                                        }
                                    }
                                }

                                //Receiver
                                //if (_ReceiverName == "")
                                //{
                                //    if (GetValidationFieldsSettings("Receiver Name"))
                                //    strMessage += "Receiver Name" + Environment.NewLine + "";
                                //}
                                //if (_ReceiverETIN == "")
                                //{
                                //     if (GetValidationFieldsSettings("Receiver ETIN"))
                                //    strMessage += "Receiver ETIN" + Environment.NewLine + "";
                                //}
                                #endregion " Facility "

                                #region " Subscriber "
                                //Subscriber
                                if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                {
                                    for (int _InsRow = 0; _InsRow < dtPatientInsurances.Rows.Count; _InsRow++)
                                    {
                                        if (_InsRow == 0)
                                        {
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Last Name"))
                                                    strMessage += "Subscriber Last Name" + Environment.NewLine + "";
                                            }
                                            //if (_SubscriberInsurancePST == "")
                                            //{
                                            //    // if (GetValidationFieldsSettings("Subscriber Insurance Type"))
                                            //    //strMessage += "Subscriber Insurance Type(P/S/T)" + Environment.NewLine + "";
                                            //}
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Relationship"))
                                                    strMessage += "Subscriber Relationship" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Insurance Type"))
                                                    strMessage += "Insurance Type" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber First Name"))
                                                    strMessage += "Subscriber First Name" + Environment.NewLine + "";
                                            }
                                            //if (_SubscriberMName == "")
                                            //{
                                            //    if (GetValidationFieldsSettings("Subscriber Middle Name"))
                                            //    // strMessage += "Subscriber Middle Name"+Environment.NewLine+"";
                                            //}
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Insurance ID"))
                                                    strMessage += "Insurance ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Address"))
                                                    strMessage += "Subscriber Address" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Group ID"))
                                                    strMessage += "Subscriber Group ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber City"))
                                                    strMessage += "Subscriber City" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber State"))
                                                    strMessage += "Subscriber State" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Zip"))
                                                    strMessage += "Subscriber Zip" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Date of Birth"))
                                                    strMessage += "Subscriber Date of Birth" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Subscriber Gender"))
                                                    strMessage += "Subscriber Gender" + Environment.NewLine + "";
                                            }

                                            //Payer
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Payer Name"))
                                                    strMessage += "Payer/Insurance Name" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Payer ID"))
                                                    strMessage += "Payer ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerAddress1"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Payer Address"))
                                                    strMessage += "Payer Address" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerCity"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Payer City"))
                                                    strMessage += "Payer City" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerState"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Payer State"))
                                                    strMessage += "Payer State" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerZip"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Payer Zip"))
                                                    strMessage += "Payer Zip" + Environment.NewLine + "";
                                            }

                                        }
                                        if (_InsRow == 1)
                                        {

                                            //Other Insurance
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Secondary Insurance Subscriber First Name"))
                                                    strMessage += "Secondary Insurance Subscriber First Name" + Environment.NewLine + "";
                                            }
                                            //if (_OtherInsurancePST == "")
                                            //{
                                            //     if (GetValidationFieldsSettings("Other Insurance Type"))
                                            //    //strMessage += "Secondary Insurance Type" + Environment.NewLine + "";
                                            //}
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Belongs To Type"))
                                                    strMessage += "Other Insurance Type" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Subscriber Relationship"))
                                                    strMessage += "Other Insurance Subscriber Relationship" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance ID"))
                                                    strMessage += "Other Insurance ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Group ID"))
                                                    strMessage += "Other Insurance Group ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Address"))
                                                    strMessage += "Other Insurance Address" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Subscriber First Name"))
                                                    strMessage += "Other Insurance Subscriber First Name" + Environment.NewLine + "";
                                            }
                                            //if (_OtherInsuranceSubscriberMName == "")
                                            //{
                                            //     if (GetValidationFieldsSettings("Other Insurance Subscriber Middle Name"))
                                            //    //strMessage += "Other Insurance Subscriber Middle Name" + Environment.NewLine + "";
                                            //}
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]) == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Name"))
                                                    strMessage += "Other Insurance Name" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Payer ID"))
                                                    strMessage += "Other Insurance Payer ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance City"))
                                                    strMessage += "Other Insurance City" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance State"))
                                                    strMessage += "Other Insurance State" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Zip"))
                                                    strMessage += "Other Insurance Zip" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Subscriber Date of Birth"))
                                                    strMessage += "Other Insurance Subscriber Date of Birth" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "")
                                            {
                                                if (GetValidationFieldsSettings("Other Insurance Subscriber Gender"))
                                                    strMessage += "Other Insurance Subscriber Gender" + Environment.NewLine + "";
                                            }
                                        }
                                    }
                                }
                                #endregion " Subscriber "

                                #region " Patient Information "

                                //Patient Information
                                if (oPatient != null)
                                {
                                    if (Convert.ToString(oTransaction.ClaimNo).Trim() == "")
                                    {
                                        strMessage += "Patient Account No" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientLastName.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient Last Name"))
                                            strMessage += "Patient Last Name" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientFirstName.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient First Name"))
                                            strMessage += "Patient First Name" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientMiddleName.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient Middle Name"))
                                            strMessage += "Patient Middle Name" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientSSN.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient SSN"))
                                            strMessage += "Patient SSN" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientGender.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient Gender"))
                                            strMessage += "Patient Gender" + Environment.NewLine + "";
                                    }
                                    if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oPatient.DemographicsDetail.PatientDOB.ToShortDateString())).Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient Date of Birth"))
                                            strMessage += "Patient Date of Birth" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientAddress1.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient Address"))
                                            strMessage += "Patient Address" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientCity.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient City"))
                                            strMessage += "Patient City" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientState.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient State"))
                                            strMessage += "Patient State" + Environment.NewLine + "";
                                    }
                                    if (oPatient.DemographicsDetail.PatientZip.Trim() == "")
                                    {
                                        if (GetValidationFieldsSettings("Patient Zip"))
                                            strMessage += "Patient Zip" + Environment.NewLine + "";
                                    }
                                }

                                #endregion " Patient Information "

                                #region " Rendering Provider "

                                if (_Provider != null)
                                {
                                    _Provider.Dispose();
                                    _Provider = null;
                                }
                                _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);

                                if (_Provider != null)
                                {
                                    if (_Provider.LastName.Trim() == "")
                                    {
                                        strMessage += "Rendering Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (_Provider.FirstName.Trim() == "")
                                    {
                                        strMessage += "Rendering Provider First Name" + Environment.NewLine + "";
                                    }
                                    if (_Provider.NPI.Trim() == "")
                                    {
                                        strMessage += "Rendering Provider NPI" + Environment.NewLine + "";
                                    }
                                    if (_Provider.Taxonomy.Trim() == "")
                                    {
                                        strMessage += "Rendering Provider Taxonomy Code" + Environment.NewLine + "";
                                    }
                                }

                                //Prior Authorization Number
                                //if (_PriorAuthorizationNo == "")
                                //{
                                //    //strMessage += "Prior Authorization Number" + Environment.NewLine + "";
                                //}

                                #endregion " Rendering Provider "

                                if (strMessage.Trim() != "")
                                {
                                    oClaimNoArray.Add(oTransaction.ClaimNo);
                                    _MessageHeader += _ClaimMessageHeader + strMessage;
                                }
                            }
                            catch
                            {
                            }
                            finally
                            {

                                if (oResource != null)
                                {
                                    oResource.Dispose();
                                    oResource = null;
                                }
                                if (_Provider != null)
                                {
                                    _Provider.Dispose();
                                    _Provider = null;
                                }
                                if (oPatient != null)
                                {
                                    oPatient.Dispose();
                                    oPatient = null;
                                }
                                if (ogloPatient != null)
                                {
                                    ogloPatient.Dispose();
                                    ogloPatient = null;
                                }
                                if (dtPatientInsurances != null)
                                {
                                    dtPatientInsurances.Dispose();
                                    dtPatientInsurances = null;
                                }
                                if (dtFacility != null)
                                {
                                    dtFacility.Dispose();
                                    dtFacility = null;
                                }
                            }
                        }

                    }
                    if (_MessageHeader != "")
                    {
                        _Message = "";
                        _Message = _MessageHeader;
                    }
                }

                if (_Message.Trim() != "")
                {
                    string _Header = "Following fields are missing in database:" + Environment.NewLine + "" + Environment.NewLine + "";
                    _Header += _Message;
                    _FilePath = _FilePath + "EDIValidation.txt";
                    System.IO.StreamWriter oStreamWriter = new System.IO.StreamWriter(_FilePath, false);
                    oStreamWriter.WriteLine(_Header);
                    oStreamWriter.Close();
                    oStreamWriter.Dispose();
                    oStreamWriter = null;
                    System.Diagnostics.Process.Start(_FilePath);
                    return true;
                }
                else
                {
                    if (_bSendingToBatch == false)
                    {
                        MessageBox.Show("All mandatory data is present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    return true;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return false;
            }
            finally
            {
                if (dtClearingHouse != null) { dtClearingHouse.Dispose(); dtClearingHouse = null; }
               // if (dtSubmitter != null) { dtSubmitter.Dispose(); dtSubmitter = null; }
                //if (dtReceiver != null) { dtReceiver.Dispose(); }
                //if (dtBillingProvider != null) { dtBillingProvider.Dispose(); }
                //if (dtRenderingProvider != null) { dtRenderingProvider.Dispose(); }
                //if (dtFacility != null) { dtFacility.Dispose(); dtFacility = null; }
                //if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); dtPatientInsurances = null; }
                if (ogloBilling != null) { ogloBilling.Dispose(); ogloBilling = null; }
                if (oTransaction != null) { oTransaction.Dispose(); oTransaction = null; }
                if (oClaimNoArray != null) { oClaimNoArray.Clear(); oClaimNoArray = null; }

            }

        }

        private string ControlNumberGeneration(string HeaderType)
        {
            string strNumber = DateTime.Now.ToString("hhmmss");
            int _length = 0;
            string NumberSize = "";
            _length = strNumber.Trim().Length;
            if (_length == 5)
            {
                NumberSize = "000" + strNumber;
            }
            else if (_length == 6)
            {
                NumberSize = "00" + strNumber;
            }
            else if (_length == 7)
            {
                NumberSize = "0" + strNumber;
            }
            else if (_length == 8)
            {
                NumberSize = strNumber;
            }
            NumberSize = HeaderType + NumberSize;
            return NumberSize;
        }

        private string GetEDIFileName(string DirectoryFullPath, string StartName)
        {
            string _result = "";
            try
            {
                string _EDIFileName = StartName;
                string _FileName = DirectoryFullPath + _EDIFileName + "_1" + "." + "txt";
                int i = 0;
                bool _DocNameFound = true;

                while ((_DocNameFound == true) && (i<int.MaxValue))
                {
                    _DocNameFound = File.Exists(_FileName);
                    if (_DocNameFound == true)
                    {
                        i++;
                        _FileName = DirectoryFullPath + _EDIFileName + "_" + i.ToString() + "." + "txt";
                    }
                }
                _result = _FileName;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                _result = "";
            }
            finally
            {
            }
            return _result;
        }

        public string ControlNumberGeneration()
        {
            string strNumber = String.Empty;
            strNumber = "0";

            //while loop added to avoid preceding zeros as X12 standards doesn't accepts leading zeros.
            strNumber = String.Format("{0:d9}", (DateTime.Now.Ticks / 10) % 1000000000);

            if (strNumber.StartsWith("0") == true)
            {
                strNumber = strNumber.PadLeft(10, '1').Remove(strNumber.Length-1,1);
            }
            return strNumber;

            //DateTime _dtTime = DateTime.Now;
            //_dtTime = DateTime.Now;
            //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //oDB.Connect(false);
            //string _sqlQuery = "";
            //_sqlQuery = "INSERT INTO Test_UniqueID " +
            //" (ID, dtActualDateTime) " +
            //" VALUES " +
            //" (" + strNumber + ",'" + _dtTime + "') ";
            //oDB.ExecuteScalar_Query(_sqlQuery);
            //oDB.Disconnect();

            //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //oDB.Connect(false);
            //string _sqlQuery = "";

            //for (int i = 0; i <= 10000; i++)
            //{
            //    string number = String.Format("{0:d9}", (DateTime.Now.Ticks / 10) % 1000000000);
            //    DateTime _dtTime = DateTime.Now;
            //    _sqlQuery = "INSERT INTO Test_UniqueID " +
            //    " (ID, dtActualDateTime) " +
            //    " VALUES " +
            //    " (" + number + ",'" + _dtTime + "') ";
            //    oDB.ExecuteScalar_Query(_sqlQuery);

            //}
        }

        //MaheshB 20091109
        public void SetContactSettings(Int64 _ContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = null;
            try
            {

                //Get Box 32 and Box 33 Settings from Contacts Insurance Details
                
                string _sqlQuery = "select ISNULL(sBox32,'') as sBox32,ISNULL(sBox32A,'') as sBox32A,ISNULL(sBox32B,'') as sBox32B," +
                            "ISNULL(sBox33,'') as sBox33,ISNULL(sBox33A,'') as sBox33A,ISNULL(sBox33B,'') as sBox33B,Isnull(bAccessAssignment,0) as bAccessAssignment," +
                            "ISNULL(bIncludeTaxonomyForElectronic,0) as bIncludeTaxonomyForElectronic,ISNULL(sClaimOfficeNumber,'')	as sClaimOfficeNumber " +
                            "from dbo.Contacts_Insurance_DTL WITH(NOLOCK) where nContactID = " + _ContactID;
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out dt);
                if (dt != null && dt.Rows.Count > 0)
                {
                    /*
                    //BOX 32
                    if (Convert.ToString(dt.Rows[0]["sBox32"]) == "Provider Address")
                        _FacilityAddressType = AddressType.ProviderAddress;
                    else if (Convert.ToString(dt.Rows[0]["sBox32"]) == "Facility Address")
                        _FacilityAddressType = AddressType.FacilityAddress;
                    else if (Convert.ToString(dt.Rows[0]["sBox32"]) == "Clinic Address")
                        _FacilityAddressType = AddressType.ClinicAddress;

                    //BOX 32A
                    if (Convert.ToString(dt.Rows[0]["sBox32A"]) == "Billing Provider NPI")
                        _Facility_A_NPI = NPIType.BillingProviderNPI;
                    else if (Convert.ToString(dt.Rows[0]["sBox32A"]) == "Facility NPI")
                        _Facility_A_NPI = NPIType.FacilityNPI;
                    else if (Convert.ToString(dt.Rows[0]["sBox32A"]) == "Clinic NPI")
                        _Facility_A_NPI = NPIType.ClinicNPI;
                    ////BOX 32B
                    //if (Convert.ToString(dt.Rows[0]["sBox32B"]) == "Billing Provider NPI")
                    //    _Facility_B_NPI = NPIType.BillingProviderNPI;
                    //else if (Convert.ToString(dt.Rows[0]["sBox32B"]) == "Facility NPI" || Convert.ToString(dt.Rows[0]["sBox32B"]) == "")
                    //    _Facility_B_NPI = NPIType.FacilityNPI;
                    //else if (Convert.ToString(dt.Rows[0]["sBox32B"]) == "Clinic NPI")
                    //    _Facility_B_NPI = NPIType.ClinicNPI;


                    //BOX 33
                    if (Convert.ToString(dt.Rows[0]["sBox33"]) == "Provider Address")
                        _BillingAddressType = AddressType.ProviderAddress;
                    else if (Convert.ToString(dt.Rows[0]["sBox33"]) == "Facility Address")
                        _BillingAddressType = AddressType.FacilityAddress;
                    else if (Convert.ToString(dt.Rows[0]["sBox33"]) == "Clinic Address")
                        _BillingAddressType = AddressType.ClinicAddress;

                    //BOX 33A
                    if (Convert.ToString(dt.Rows[0]["sBox33A"]) == "Billing Provider NPI")
                        _Billing_A_NPI = NPIType.BillingProviderNPI;
                    else if (Convert.ToString(dt.Rows[0]["sBox33A"]) == "Facility NPI")
                        _Billing_A_NPI = NPIType.FacilityNPI;
                    else if (Convert.ToString(dt.Rows[0]["sBox33A"]) == "Clinic NPI")
                        _Billing_A_NPI = NPIType.ClinicNPI;
                    ////BOX 33B
                    //if (Convert.ToString(dt.Rows[0]["sBox33B"]) == "Billing Provider NPI" || Convert.ToString(dt.Rows[0]["sBox33B"]) == "")
                    //    _Billing_B_NPI = NPIType.BillingProviderNPI;
                    //else if (Convert.ToString(dt.Rows[0]["sBox33B"]) == "Facility NPI" )
                    //    _Billing_B_NPI = NPIType.FacilityNPI;
                    //else if (Convert.ToString(dt.Rows[0]["sBox33B"]) == "Clinic NPI")
                    //    _Billing_B_NPI = NPIType.ClinicNPI;
                    */
                    _IsAccessAssignment = Convert.ToBoolean(dt.Rows[0]["bAccessAssignment"]);
                    _sClaimOfficeNumber = Convert.ToString(dt.Rows[0]["sClaimOfficeNumber"]);

                }
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                throw;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (dt != null) { dt.Dispose(); dt = null; }
            }
        }

        public string EDI837Generation_New(ArrayList SelectedTransactions, string _BatchName, bool _IsUndo, Int64 _ContactID, dsEDIClaimdetails odsEDIClaimDetail, Int64 _nBatchID)
        {

            DataSet dsMaster = null;
            DataSet dsHeader = null;

            string _result = "";
            string InterchangeHeader = "";
            string FunctionalGroupHeader = "";
            string TransactionSetHeader = "";
            string _ClaimStatus = "1";
            string _TypeOfData = "T";

            string sEdiFile, sPath;
            ediDocument oEdiDoc = null;
            ediSchema oSchema = null;
            ediSchemas oSchemas = null;
            ediInterchange oInterchange = null;
            ediGroup oGroup = null;
            ediTransactionSet oTransactionset = null;
            ediDataSegment oSegment = null;
            string sSEFFile = "";
            bool _IsSEFPresent = true;

            #region " Generate EDI "
            try
            {
                #region  " Load EDI "

                string sInstance = "";
               // gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
               // gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
             


                // sPath = AppDomain.CurrentDomain.BaseDirectory;
                sSEFFile = "837_X098A1.SEF";

                if (File.Exists(sSEFPath + sSEFFile) == false)
                {
                    MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _IsSEFPresent = false;
                    return "";
                }

                oEdiDoc = new ediDocument();

                // Change the cursor type from dynamic to forward to improve speed performance
                oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;

                // Disable the internal standard reference library to be memory efficient 
                oSchemas = oEdiDoc.GetSchemas();
                oSchemas.EnableStandardReference = false;

                // Load the SEF file
                oSchema = oEdiDoc.ImportSchema(sSEFPath + sSEFFile, 0);

                oEdiDoc.SegmentTerminator = "~\r\n";
                oEdiDoc.ElementTerminator = "*";
                oEdiDoc.CompositeTerminator = ":";

                #endregion

                if (_IsSEFPresent == true)
                {

                    #region "Header Data - Dataset define in table"

                    dsHeader = GetHeader_EDI_4010(_ContactID, _ClinicID, Convert.ToInt64(SelectedTransactions[SelectedTransactions.Count - 1]), false);
                    if (dsHeader == null)
                    {
                        return "";
                    }
                    if (dsHeader.Tables == null)
                    {
                        return "";
                    }

                    DataTable dtClearingHouse = dsHeader.Tables["ClearingHouseData"];
                    DataTable dtSubmitter = dsHeader.Tables["SubmitterData"];

                    #endregion

                    if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
                    {
                        MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return "";
                    }

                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                            if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                            {
                                MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return "";
                            }
                        }
                    }


                    #region " Interchange Segment "
                    //Create the interchange segment
                    ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

                    if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
                    {
                        _TypeOfData = "T";
                    }
                    else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
                    {
                        _TypeOfData = "P";
                    }

                    oSegment.set_DataElementValue(1, 0, "00");
                    oSegment.set_DataElementValue(3, 0, "00");
                    oSegment.set_DataElementValue(5, 0, "ZZ");
                    oSegment.set_DataElementValue(6, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"])));//Sender ID
                    oSegment.set_DataElementValue(7, 0, "ZZ");
                    oSegment.set_DataElementValue(8, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"])));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
                    string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
                    oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
                    string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim());
                    oSegment.set_DataElementValue(11, 0, "U");
                    oSegment.set_DataElementValue(12, 0, "00401");
                    InterchangeHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
                    oSegment.set_DataElementValue(14, 0, "0");
                    oSegment.set_DataElementValue(15, 0, _TypeOfData);
                    oSegment.set_DataElementValue(16, 0, ":");

                    #endregion " Interchange Segment "

                    #region " Functional Group "

                    //Create the functional group segment
                    ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X098A1"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
                    oSegment.set_DataElementValue(1, 0, "HC");
                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"])));////_SenderName);
                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"])));//// _ReceiverCode.Trim());//"ClarEDI");
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
                    string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim());
                    FunctionalGroupHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
                    oSegment.set_DataElementValue(7, 0, "X");
                    oSegment.set_DataElementValue(8, 0, "004010X098A1");

                    #endregion " Functional Group "

                    #region ST - TRANSACTION SET HEADER

                    ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
                    TransactionSetHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

                    #endregion ST - TRANSACTION SET HEADER

                    #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    // beginning Segment 
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
                    oSegment.set_DataElementValue(1, 0, "0019"); //Hierarchical Structure Code
                    oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
                    oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));//Date of claim
                    string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim();
                    oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim()); //"1230");
                    oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
                    #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    #region REF - TRANSMISSION TYPE IDENTIFICATION

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
                    oSegment.set_DataElementValue(1, 0, "87");
                    oSegment.set_DataElementValue(2, 0, "004010X098A1");//"ReferenceID"

                    #endregion REF - TRANSMISSION TYPE IDENTIFICATION

                    #region NM1 - SUBMITTER


                    //1000A SUBMITTER
                    //NM1 SUBMITTER

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "41");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"])));//_SubmitterName)// clinic name
                    if (dtClearingHouse != null && FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"])) != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"])));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.
                    }

                    //PER SUBMITTER EDI CONTACT INFORMATION
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
                    oSegment.set_DataElementValue(1, 0, "IC");
                    if (FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"])) == "")
                    {
                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"])));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
                    }
                    else
                    {
                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"])));
                    }
                    oSegment.set_DataElementValue(3, 0, "TE");
                    if (dtSubmitter != null && FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"])) != "")
                    {
                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"])));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone
                    }

                    #endregion NM1 - SUBMITTER

                    #region NM1 - RECEIVER NAME

                    //1000B RECEIVER
                    //NM1 RECEIVER NAME
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "40");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"])));//"GatewayEDI");//clearing house or contractor or carrier or FI name
                    if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]) != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.
                    }

                    #endregion NM1 - RECEIVER NAME

                    nHlCount = 0;

                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                           
                            TransactionLineEDI oTransLine = null;
                            TransactionEDI thisTransaction = new TransactionEDI();
                            for (int i = 0; i < SelectedTransactions.Count; i++)
                            {
                                TransactionEDI oTransaction = GetChargesClaimDetails_EDI(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
                                
       
                                #region "Master EDI data - Dataset data set in data table "

                                dsMaster = null;
                                dsMaster = GetMaster_EDI_4010(oTransaction.ContactID, oTransaction.Lines[0].RenderingProviderId, oTransaction.ProviderID, oTransaction.ResponsibilityNo,
                                    oTransaction.TransactionMasterID, Convert.ToInt64(oTransaction.FacilityCode), _ClinicID, oTransaction.IsSameAsBillingProvider,
                                    oTransaction.TransactionID, oTransaction.ReferalProviderID_New, false);

                                DataTable dtPatientInsurances = dsMaster.Tables["PatientInsurance"];
                                DataTable dtFacility = dsMaster.Tables["Facility"];
                                DataTable dtBillingProvider = dsMaster.Tables["BillingProvider"];
                                DataTable dtPatientPaid = dsMaster.Tables["PatientPaid"];
                                DataTable dtDx = dsMaster.Tables["Diagnosis"];
                                DataTable dtRefProvider = dsMaster.Tables["RefferingProvider"];
                                DataTable dtRendProvider = dsMaster.Tables["RenderingProvider"];
                                DataTable dtMasterSetting = dsMaster.Tables["MasterSetting"];

                                #endregion
                                try
                                {
                                    if (oTransaction != null)
                                    {
                                        thisTransaction.TransactionMasterID = oTransaction.TransactionMasterID;
                                        thisTransaction.ClaimNo = oTransaction.ClaimNo;
                                        thisTransaction.PatientID = oTransaction.PatientID;


                                        if (oTransaction.Lines.Count > 0)
                                        {
                                            //Split Claim No.
                                            #region "Formatting the Claim Number"

                                            string _ClaimNo = "";
                                            _ClaimNo = FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNumber));

                                            #endregion

                                            if (oTransaction.PatientID <= 0)
                                            {
                                                MessageBox.Show("Patient information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return "";
                                            }
                                            if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                            {
                                                MessageBox.Show("Patient " + oTransaction.PatientFirstName + " " + oTransaction.PatientLastName + " Insurance details are missing for claim number " + _ClaimNo + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return "";
                                            }
                                            if (dtFacility == null)
                                            {
                                                MessageBox.Show("Facility information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return "";
                                            }

                                            for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
                                            {
                                                //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

                                                nHlCount = nHlCount + 1;
                                                nHlProvParent = nHlCount;
                                                //2000A BILLING/PAY-TO PROVIDER HL LOOP
                                                //HL-BILLING PROVIDER
                                                string _PayerResponsibilityName = "";
                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim());
                                                oSegment.set_DataElementValue(3, 0, "20");
                                                oSegment.set_DataElementValue(4, 0, "1");

                                                #region Billing Provider


                                                //2010AA BILLING PROVIDER
                                                //NM1 BILLING PROVIDER NAME
                                                if (dtBillingProvider != null && dtBillingProvider.Rows.Count > 0)
                                                {
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "85");
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["EntityType"])));
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])));//Billing provider name
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])));
                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])));

                                                    }

                                                    //Check the Code
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])));
                                                    }

                                                    //N3 BILLING PROVIDER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])));//Provider Address

                                                    //N4 BILLING PROVIDER LOCATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])));////Provider City
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["State"])));//Provider state                                                
                                                    oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["ZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["AreaCode"]))));//Provider ZIP                                               
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])));
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])));
                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])));
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])));
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }

                                                #endregion

                                                //'******************************************************************************************************
                                                //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
                                                //'******************************************************************************************************
                                                #region Subscriber
                                                if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                {
                                                    string _strRelation = "";
                                                    string _strInsuranceType = "";
                                                    _strRelation = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]));
                                                    _strInsuranceType = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]));

                                                    #region Subscriber HL Loop - 2000B

                                                    nHlCount = nHlCount + 1;
                                                    nHlSubscriberParent = nHlCount;

                                                    //2000B SUBSCRIBER HL LOOP
                                                    //HL-SUBSCRIBER
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                    oSegment.set_DataElementValue(2, 0, FormatString(nHlProvParent.ToString()));
                                                    oSegment.set_DataElementValue(3, 0, "22");

                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "0");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "1");

                                                    }

                                                    //SBR SUBSCRIBER INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));
                                                    oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST
                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "18");
                                                    }

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]))); //Commercial Insurance company
                                                    }

                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludePlanname"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]))); //Commercial Insurance name
                                                    }

                                                    //This is Claim filling Indicator code in EDI implementation guide.
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]))); //Commercial Insurance company
                                                    }

                                                    //2010BA SUBSCRIBER
                                                    //NM1 SUBSCRIBER NAME
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "IL");
                                                    oSegment.set_DataElementValue(2, 0, "1");
                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"])));//"SubscriberLastOrgName"
                                                    oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"])));//"SubscriberFirstname"


                                                    //WorkerComp and AutoClaimNo.
                                                    if (FormatString(Convert.ToString(oTransaction.WorkersCompNo)) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "MI");
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(oTransaction.WorkersCompNo)));//"Insurance Id"
                                                    }
                                                    else if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "MI");
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"])));//"Insurance Id"
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + "Insurance ID for subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        return "";
                                                    }
                                                    //N3 SUBSCRIBER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"])));//"SubscriberAddress"
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"])));//"SubscriberAddress"
                                                    }

                                                    //N4 SUBSCRIBER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"])));//"SubscriberCity"
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"])));//"SubscrberState"
                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"])));//"SubscriberZip"

                                                    #endregion SubscriberHL Loop - 2000B

                                                    if (_strRelation == "18")
                                                    {
                                                        //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"])) == "" || FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"])) == "" || FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"])) == "")
                                                        {
                                                            MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + " State or City or ZipCode for Subscriber is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                    }
                                                    string _SubscriberGender = "";
                                                    if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"])) != "")
                                                    {
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"])) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                            oSegment.set_DataElementValue(1, 0, "D8");
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"                                                           
                                                            _SubscriberGender = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]));
                                                            if (FormatString(_SubscriberGender).ToUpper() == "OTHER")
                                                            {
                                                                _SubscriberGender = "U";
                                                            }
                                                            oSegment.set_DataElementValue(3, 0, FormatString(_SubscriberGender).Substring(0, 1).ToUpper());//"SubscriberGender"
                                                        }
                                                        else
                                                        {
                                                            if (_strRelation == "18")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber gender is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        if (_strRelation == "18")
                                                        {
                                                            MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                    }

                                                    #region Payer Information Loop 2010BB
                                                    //2010BB SUBSCRIBER/PAYER
                                                    //NM1 PAYER NAME
                                                    string _ModifiedPayerName = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]));
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"])).Length > 35)
                                                    {
                                                        _ModifiedPayerName = "";
                                                        _ModifiedPayerName = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"])).Substring(0, 34);

                                                    }
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "PR");
                                                    oSegment.set_DataElementValue(2, 0, "2");
                                                    oSegment.set_DataElementValue(3, 0, FormatString(_ModifiedPayerName));//"PayerLastOrgName"
                                                    if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"])));//PayerID
                                                    }
                                                    ////////N3 PAYER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"])));//"InsuranceAddress"

                                                    ////////N4 PAYER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"])));//"InsuranceCity"
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"])));//"InsuranceState"
                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"])));//"InsuranceZip"

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"])) != "" && dtPatientInsurances.Rows[0]["sClaimOfficeNumber"] != null)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "FY");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"])));
                                                    }
                                                    #endregion

                                                    if (_strRelation != "18")
                                                    {
                                                        nHlCount = nHlCount + 1;

                                                        //2000B DEPENDENT HL LOOP
                                                        //HL-DEPENDENT
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                        oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
                                                        oSegment.set_DataElementValue(3, 0, "23");
                                                        oSegment.set_DataElementValue(4, 0, "0");

                                                        //PAT - PATIENT/DEPENDENT INFORMATION

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]))); //01 - Spouse 19 - Child

                                                        #region " Patient Info"

                                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "QC");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.PatientLastName));//Patient Last Name
                                                        oSegment.set_DataElementValue(4, 0, FormatString(oTransaction.PatientFirstName));//Patient First Name

                                                        //N3 - ADDRESS INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(oTransaction.PatientAddress1));//"Address"

                                                        //N4 - GEOGRAPHIC LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(oTransaction.PatientCity));//"City"
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.PatientState));//"State"
                                                        oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.PatientZip));//"Zip"

                                                        //DMG - DEMOGRAPHIC INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                        oSegment.set_DataElementValue(1, 0, "D8");
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.PatientDOB.ToShortDateString())));
                                                        if (FormatString(oTransaction.PatientGender) == "" || FormatString(oTransaction.PatientGender).ToUpper() == "OTHER")
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"                                                                   
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.PatientGender));//"SubscriberGender"
                                                        }

                                                        #endregion " Patient Info"
                                                    }

                                                    //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
                                                    //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
                                                    string _FirstPOS = "";
                                                    //   string _NewPOS = "";
                                                    string _ClaimTotal = "";
                                                    iItemCount = 0;
                                                    decimal _claimAmount = 0;
                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        _claimAmount = _claimAmount + oTransaction.Lines[nLine].Total;
                                                        _FirstPOS = oTransaction.Lines[0].POSCode;
                                                    }

                                                    _ClaimTotal = _claimAmount.ToString("#0.00");
                                                    if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
                                                    }
                                                    else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
                                                    }

                                                    #region Claim Details - Loop 2300
                                                    //2300 CLAIM
                                                    //CLM CLAIM LEVEL INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
                                                    oSegment.set_DataElementValue(1, 0, _ClaimNo); //Patient Account no         
                                                    oSegment.set_DataElementValue(2, 0, FormatString(_ClaimTotal)); //Claim Amount
                                                    oSegment.set_DataElementValue(5, 1, FormatString(_FirstPOS)); //21 - Inpatient Hospital

                                                    if (oTransaction.IsRebill == true || oTransaction.IsReplacementClaim == true)
                                                    {
                                                        _ClaimStatus = "7";
                                                    }
                                                    else
                                                    {
                                                        _ClaimStatus = "1";
                                                    }
                                                    oSegment.set_DataElementValue(5, 3, _ClaimStatus);
                                                    oSegment.set_DataElementValue(6, 0, "Y");

                                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                    {
                                                        _IsAccessAssignment = Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAccessAssignment"]);
                                                    }
                                                    if (_IsAccessAssignment == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "A");
                                                    }
                                                    else if (_IsAccessAssignment == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == false)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "P");
                                                    }
                                                    else if (_IsAccessAssignment == false && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == false)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "P");
                                                    }
                                                    else if (_IsAccessAssignment == false && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "C");
                                                    }

                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "Y");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "N");
                                                    }

                                                    oSegment.set_DataElementValue(9, 0, "Y");
                                                    oSegment.set_DataElementValue(10, 0, "C");
                                                    if (oTransaction.AutoClaim == true)
                                                    {
                                                        if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "AA");
                                                            oSegment.set_DataElementValue(11, 4, FormatString(oTransaction.State));
                                                        }
                                                    }
                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "EM");
                                                        }
                                                    }
                                                    if (oTransaction.OtherAccident == true)
                                                    {
                                                        if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "OA");
                                                        }
                                                    }

                                                    if (oTransaction.DelayReasonCodeID != "")
                                                    {
                                                        oSegment.set_DataElementValue(20, 0, oTransaction.DelayReasonCodeID);
                                                    }



                                                    string OnsetDate = "";
                                                    if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "" || oTransaction.OtherAccidentDate.ToString() != "")
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.InjuryDate);
                                                            ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "439");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                        }
                                                        else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
                                                            ////DTP DATE OF CURRENT INJURY
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "431");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                        }
                                                        else if (oTransaction.AutoClaim == true)
                                                        {
                                                            if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.AccidentDate);
                                                                ////DTP DATE OF ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                            }
                                                        }
                                                        else if (oTransaction.OtherAccident == true)
                                                        {
                                                            if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.OtherAccidentDate);
                                                                ////DTP DATE OF Other ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                            }
                                                        }
                                                    }

                                                    //DTP DATE OF ONSET of similar symptoms or illness
                                                    if (Convert.ToString(oTransaction.IllnessDate) != "" && oTransaction.IllnessDate > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "438");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(oTransaction.IllnessDate).Trim());
                                                    }

                                                    if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
                                                    {
                                                        //DTP DATE OF Hospitalization (Admission) 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "435");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());
                                                    }

                                                    if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
                                                    {
                                                        //DTP DATE OF Discharge 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "096");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());
                                                        //
                                                    }

                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period last day worked)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "297");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());
                                                            //
                                                        }

                                                        if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period return to work)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "296");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());
                                                            //
                                                        }
                                                    }



                                                    #region Patient Paid Amount.



                                                    string _AmountPaid = String.Empty;
                                                    if (dtPatientPaid != null && dtPatientPaid.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]).Trim() != "")
                                                            _AmountPaid = FormatAmount(Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]));
                                                    }
                                                    #endregion

                                                    if (_AmountPaid.Trim() != string.Empty && _AmountPaid.Trim() != "0.00" && _AmountPaid.Trim() != "0.0" && _AmountPaid.Trim() != "0")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
                                                        oSegment.set_DataElementValue(1, 0, "F5");
                                                        oSegment.set_DataElementValue(2, 0, _AmountPaid);
                                                    }

                                                    #region Service Authorization exception code

                                                    if (oTransaction.ServiceAuthExceCode.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "4N");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.ServiceAuthExceCode);
                                                    }

                                                    #endregion
                                                    #region MammogramCertNumber
                                                    if (oTransaction.sMammogramCertNumber.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "EW");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sMammogramCertNumber);
                                                    }

                                                    #endregion 

                                                    if (FormatString(oTransaction.PriorAuthorizationNo) != "")
                                                    {
                                                        //REF CLEARING HOUSE CLAIM NUMBER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "G1");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.PriorAuthorizationNo)); //Claim No
                                                    }

                                                    #region IDE Number
                                                    if (oTransaction.sIDENo.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "P4");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sIDENo);
                                                    }
                                                    #endregion 

                                                    #region Claim RemittanceReference #

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"])) != "" && _ClaimStatus == "7")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "F8");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"])));
                                                    }

                                                    #endregion

                                                    #region "BOX19 Note"

                                                    if (FormatString(oTransaction.Box19NoteDescription) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NTE"));
                                                        oSegment.set_DataElementValue(1, 0, "ADD");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.Box19NoteDescription)); //Claim No
                                                    }

                                                    #endregion

                                                    #endregion

                                                    #region HI - Diagnosis

                                                    //HI HEALTH CARE DIAGNOSIS CODES                                                                                                                                                                                                    

                                                    string code_no = "";
                                                    if (dtDx != null && dtDx.Rows.Count > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

                                                        for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                        {
                                                            if (DxIndex == 0)
                                                            {
                                                                if (FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) + "'";
                                                                    }
                                                                    oSegment.set_DataElementValue(1, 1, "BK");
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "")));
                                                                }
                                                            }
                                                            if (DxIndex > 0)
                                                            {
                                                                if (FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) + "'";
                                                                    }
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "")));//
                                                                }
                                                            }
                                                        }

                                                        if (code_no != "" && _IsUndo != true)
                                                        {
                                                            code_no = Convert.ToString(dtMasterSetting.Rows[0]["InvalidICD9"]);
                                                        }
                                                        else
                                                        {
                                                            code_no = "";
                                                        }
                                                    }

                                                    if (code_no != "")
                                                    {
                                                        string _message;

                                                        _message = "ICD9 is Invalid." + Environment.NewLine + "For Claim No :" + _ClaimNo + Environment.NewLine + "Code : " + code_no + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "                                                            

                                                        if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                                        {
                                                            return "";
                                                        }
                                                    }
                                                    #endregion

                                                    #region Referring Provider - 2310A

                                                    if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true)
                                                    {

                                                        if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                        {
                                                            //2310B Referring PROVIDER
                                                            //NM1 Referring PROVIDER NAME
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "DN");
                                                            oSegment.set_DataElementValue(2, 0, "1");
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString())); //"ReferringLastname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString()));//"ReferringFirstname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(5, 0, FormatString(dtRefProvider.Rows[0]["sMiddleName"].ToString()));
                                                            }
                                                            if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "XX");
                                                                oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString()));//"NPI"
                                                            }

                                                            //PRV REFERRING PROVIDER INFORMATION

                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sTaxonomy"])) != "")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
                                                                oSegment.set_DataElementValue(1, 0, "RF");
                                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
                                                                oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sTaxonomy"].ToString()));//Reference Identification
                                                            }

                                                            // REF
                                                            if (Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim() != "" && Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim() != "")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim());
                                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim());
                                                            }


                                                        }
                                                    }


                                                    #endregion Referring Provider

                                                    #region Rendering Provider - 2310B

                                                    //2310B RENDERING PROVIDER
                                                    //NM1 RENDERING PROVIDER NAME
                                                    if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "82");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["sLastName"])));//Billing provider name
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["sFirstName"])));
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["sMiddleName"])));

                                                        if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "XX");
                                                            oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                        }
                                                        if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])) != "" && FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])) != "" && Convert.ToInt64(dtRendProvider.Rows[0]["QualifierMstID"]) > 1)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])));
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                        }

                                                        //PRV RENDERING PROVIDER INFORMATION                                                           
                                                        if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"])) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
                                                            oSegment.set_DataElementValue(1, 0, "PE");
                                                            oSegment.set_DataElementValue(2, 0, "ZZ");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"])));//Reference Identification
                                                        }
                                                    }



                                                    #endregion

                                                    #region Facility - 2310D

                                                    //2310D SERVICE LOCATION
                                                    //NM1 SERVICE FACILITY LOCATION

                                                    if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bIsPOS"]) == true)
                                                    {
                                                        if (dtFacility != null && dtFacility.Rows.Count > 0)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "77");
                                                            oSegment.set_DataElementValue(2, 0, "2");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["LastName"])));//"FacilityName"

                                                            if (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"]));//NPI code
                                                                oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])));//NPI
                                                            }


                                                            //N3 SERVICE FACILITY ADDRESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["Address1"])));//"FacilityAddr"

                                                            //N4 SERVICE FACILITY CITY/STATE/ZIP
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["City"])));//"FacilityCity"
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["State"])));//"FacilityState"

                                                            //oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//"FacilityZip"
                                                            oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])), FormatString(Convert.ToString(dtFacility.Rows[0]["AreaCode"]))));//"FacilityZip"

                                                            //Facility Secondary Identification
                                                            if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bISOtherID"]) == true)
                                                            {
                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])) != "")
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\REF"));
                                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]));//NPI code
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])));//NPI
                                                                }
                                                            }
                                                            if (FormatString(Convert.ToString(dtFacility.Rows[0]["City"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["State"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])) == "")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + " Facility Details(City/State/ZIP Code) is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    for (int _Insrow = 1; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
                                                    {
                                                        #region Subscriber Secondary Insurance - Loop 2320

                                                        //LOOP - 2320                                                        
                                                        if (_Insrow < 3)
                                                        {

                                                            #region SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
                                                            //1.Payer Responsibility  Sequence No.

                                                            if (_Insrow == 1)
                                                            {
                                                                _PayerResponsibilityName = "Secondary";
                                                                oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
                                                            }
                                                            else if (_Insrow == 2)
                                                            {
                                                                _PayerResponsibilityName = "Tertiary";
                                                                oSegment.set_DataElementValue(1, 0, "T");//_OtherInsurancePST.Trim().Replace("*","")); //T - Tertiary
                                                            }

                                                            //2.Individual Relationship code
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"])));//"18"); // Hard coded(Individual Relationship code) 18 - Self

                                                            //3.Refrence identification
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"])));//"22145");///Policy no


                                                            //4. Plan Name
                                                            if (Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIncludePlanname"]) == true)
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]))); //Commercial Insurance name
                                                            }


                                                            //5.Insurance Type Code  Implement the New Logic
                                                            oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsTypeCodeDefault"]))); // default Insurance Type Code 


                                                            //9.Claim Filing Indicator
                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]))); //Commercial Insurance company
                                                            }

                                                            #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                            #region DMG  - Demographic

                                                            if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])) != "")
                                                            {
                                                                if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]) != "")
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
                                                                    oSegment.set_DataElementValue(1, 0, "D8");
                                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
                                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"
                                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]).ToUpper()) == "OTHER")
                                                                    {
                                                                        oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + " subscriber gender is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                            }
                                                            else
                                                            {

                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";

                                                            }
                                                            #endregion DMG  - Demographic

                                                            #region OI - Other Insurance

                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
                                                            // Assignment of Benefit.
                                                            bool _bAssignmentofbenefit = false;
                                                            _bAssignmentofbenefit = Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bAssignmentofBenifit"]);
                                                            if (_bAssignmentofbenefit == true)
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, "Y");
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, "N");
                                                            }
                                                            oSegment.set_DataElementValue(4, 0, "C");

                                                            //Signature on file.
                                                            if (oTransaction.SOF == true)
                                                            {
                                                                oSegment.set_DataElementValue(6, 0, "Y");
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(6, 0, "N");
                                                            }

                                                            #endregion OI - Other Insurance

                                                            //2330A SUBSCRIBER
                                                            #region NM1 SUBSCRIBER NAME - 2330A

                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "IL");
                                                            oSegment.set_DataElementValue(2, 0, "1");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"])));//"SubscriberLastOrgName"
                                                            oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"])));//"SubscriberFirstname"

                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"])) == "")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber Last name is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                            if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "MI");
                                                                oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"])));//"SubscriberMemberID"
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("For Claim No: " + _ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }

                                                            //N3 SUBSCRIBER ADDRESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"])));//"SubscriberAddress"
                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"])));//"SubscriberAddress"
                                                            }

                                                            //N4 SUBSCRIBER CITY
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"])));//"SubscriberCity"
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"])));//"SubscrberState"
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"])).Replace("-", ""));//"SubscriberZip"

                                                            #endregion NM1 SUBSCRIBER NAME

                                                            #region Payer Information - 2330B

                                                            //2330B SUBSCRIBER/PAYER
                                                            //NM1 PAYER NAME
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "PR");
                                                            oSegment.set_DataElementValue(2, 0, "2");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"])));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

                                                            if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                                oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"])));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
                                                            }

                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"] != null)
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                                oSegment.set_DataElementValue(1, 0, "FY");
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()));
                                                            }

                                                            #endregion Payer Information

                                                        }

                                                        #endregion Subscriber Secondary Insurance
                                                    }//End for loop of Patient Insurance 

                                                    int _Noteindex;
                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        iItemCount = 1;
                                                        iItemCount = iItemCount + nLine;
                                                        oTransLine = null;
                                                        oTransLine = oTransaction.Lines[nLine];

                                                        #region Service Line
                                                        //******* SUBSCRIBER SERVICE LINE *************************************************************
                                                        //TODO: Get the datatable for service info to add fields of service in EDI file.
                                                        //2400 SERVICE LINE
                                                        sInstance = FormatString(iItemCount.ToString());
                                                        //LX SERVICE LINE COUNTER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
                                                        oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

                                                        //SV1 PROFESSIONAL SERVICE
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
                                                        oSegment.set_DataElementValue(1, 1, "HC");
                                                        //Check the Crosswalk
                                                        if (oTransLine.CPTCode.ToString().Trim() == oTransLine.CrosswalkCPTCode.ToString().Trim() || oTransLine.CrosswalkCPTCode.ToString().Trim() == "" || oTransLine.CrosswalkCPTCode == null)
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CrosswalkCPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        }

                                                        if (FormatString(oTransLine.Mod1Code.ToString()) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
                                                        }
                                                        if (FormatString(oTransLine.Mod2Code.ToString()) != "")
                                                        {
                                                            if (FormatString(oTransLine.Mod1Code.ToString()) == "")
                                                            {
                                                                oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
                                                            }
                                                        }
                                                        if (FormatString(oTransLine.Mod3Code.ToString()) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 5, oTransLine.Mod3Code.ToString());//Modifier 1
                                                        }
                                                        if (FormatString(oTransLine.Mod4Code.ToString()) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 6, oTransLine.Mod4Code.ToString());//Modifier 1
                                                        }
                                                        string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

                                                        if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
                                                        }
                                                        else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
                                                        }
                                                        oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
                                                        oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
                                                        oSegment.set_DataElementValue(4, 0, FormatUnit(oTransLine.Unit.ToString()));//Unit/Quantity


                                                        #region " Dx Pointer Code changes for 5061 "

                                                        if (dtDx != null && dtDx.Rows.Count > 0)
                                                        {
                                                            int _CompTerminatorPos = 0;
                                                            //    int _elementCounter = 0;

                                                            for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                            {

                                                                if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", "")
                                                                    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", "")
                                                                    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", "")
                                                                    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
                                                                {
                                                                    _CompTerminatorPos = _CompTerminatorPos + 1;
                                                                    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(DxIndex + 1));
                                                                }
                                                            }
                                                        }

                                                        #endregion " Dx Pointer Code changes for 5061 "

                                                        if (Convert.ToBoolean(oTransLine.EMG) == true)
                                                        {
                                                            oSegment.set_DataElementValue(9, 0, "Y");
                                                        }


                                                        //DTP DATE - SERVICE DATE(S)
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "472");
                                                        if (oTransLine.DateServiceTill != null)
                                                        {
                                                            if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) == Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString())) || Convert.ToString(oTransLine.DateServiceTill) == "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"                                                             
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "RD8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) + "-" + Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

                                                            }
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
                                                        }

                                                        #endregion

                                                        #region " LINE ITEM CONTROL NUMBER "

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "6R"); //Provider Control Number
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].TransactionDetailID.ToString()); //Line Item Control Number
                                                        #endregion

                                                        #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
                                                        if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "" && oTransaction.Lines[nLine].IsLabCPT == true)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//
                                                        }
                                                        #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "

                                                        #region " Line Notes"
                                                        //20100310 Add the Service Line Notes
                                                        _Noteindex = -1;
                                                        for (int _NoteCount = 0; _NoteCount < oTransaction.Lines[nLine].LineNotes.Count; _NoteCount++)
                                                        {
                                                            if ((EOBPaymentSubType)oTransaction.Lines[nLine].LineNotes[_NoteCount].BillingNoteType == EOBPaymentSubType.Charges_BillingNote)
                                                            {
                                                                _Noteindex = _NoteCount;
                                                            }
                                                        }
                                                        if (_Noteindex >= 0)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD"); //Note Reference Code
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].LineNotes[_Noteindex].NoteDescription.ToString().Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "").Trim());//Description                                                            
                                                        }
                                                        #endregion

                                                        #region " NDC Code Loop - 2410 "

                                                        if (oTransLine.NDCCode != null && oTransLine.NDCCode.Trim() != "")
                                                        {
                                                            //Start - Loop 2410 NDC Code implementation
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN"));
                                                            oSegment.set_DataElementValue(2, 0, oTransLine.NDCCodeQualifier.Trim()); //LIN - Qualifier
                                                            oSegment.set_DataElementValue(3, 0, oTransLine.NDCCode.Trim());//LIN - NDC Code 11 digit
                                                        }
                                                        if (oTransLine.NDCUnit != null && oTransLine.NDCUnitCode != null && oTransLine.NDCUnit.Trim() != "" && oTransLine.NDCUnitCode.Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\CTP"));

                                                            if (oTransLine.NDCUnitPricing == "" || oTransLine.NDCUnitPricing == null || oTransLine.NDCUnitPricing == "0")
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, "0"); //Unit Price
                                                            }
                                                            else
                                                            {
                                                                //oSegment.set_DataElementValue(3, 0, oTransLine.NDCUnitPricing); //Unit Price
                                                                string _NDCUnitPricing = Convert.ToString(oTransLine.NDCUnitPricing);

                                                                if (_NDCUnitPricing.Substring(_NDCUnitPricing.Length - 2, 2) == "00")
                                                                {
                                                                    _NDCUnitPricing = _NDCUnitPricing.Substring(0, _NDCUnitPricing.Length - 3);
                                                                }
                                                                else if (_NDCUnitPricing.Substring(_NDCUnitPricing.Length - 1, 1) == "0")
                                                                {
                                                                    _NDCUnitPricing = _NDCUnitPricing.Substring(0, _NDCUnitPricing.Length - 1);
                                                                }
                                                                oSegment.set_DataElementValue(3, 0, _NDCUnitPricing); //Unit Price
                                                            }
                                                            oSegment.set_DataElementValue(4, 0, oTransLine.NDCUnit); //Quantity
                                                            oSegment.set_DataElementValue(5, 1, oTransLine.NDCUnitCode); //Unit or Basis of Measurement
                                                            //End - Loop 2410 NDC Code implementation
                                                        }

                                                        //Add Prescription Number 
                                                        if (FormatString(oTransLine.Prescription) != null && FormatString(oTransLine.Prescription.Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "XZ");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(oTransLine.Prescription.Trim()));
                                                        }


                                                        #endregion " NDC Code Loop - 2410 "
                                                    }
                                                }
                                                #endregion " Subscriber "

                                                //end of if loop for Subscriber as Patient

                                                else
                                                {
                                                    MessageBox.Show("For ClaimNo:" + oTransaction.ClaimNo.ToString() + "  " + _PayerResponsibilityName + " subscriber relationship is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                }
                                finally
                                {
                                    if (dsMaster != null) { dsMaster.Dispose(); dsMaster = null; }
                                    if (oTransaction != null)
                                    {
                                        oTransaction.Dispose();
                                        oTransaction = null;
                                    }
                                }
                            }

                            #region " Save EDI File "

                            sPath = "";
                            sPath = gloSettings.FolderSettings.AppTempFolderPath + "837 EDI\\";

                            if (System.IO.Directory.Exists(sPath) == false)
                            { System.IO.Directory.CreateDirectory(sPath); }
                            sEdiFile = GetEDIFileName(sPath, _BatchName);
                            oEdiDoc.Save(sEdiFile);
                            System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
                            string strData;
                            strData = oReader.ReadToEnd();
                            oReader.Close();
                            oReader.Dispose();
                            oReader = null;
                            System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
                            oWriter.Write(strData);
                            oWriter.Close();
                            oWriter.Dispose();
                            oWriter = null;
                            _result = sEdiFile;

                            #endregion " Save EDI File "

                            #region " Update Claim Manager Table "

                            Int64 _date = 0;
                            Int64 _time = 0;
                            _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                            _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
                            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
                            //Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionMasterID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
                            ogloClaimManager.SetClaimManagerTVP(_nBatchID, thisTransaction.TransactionMasterID, thisTransaction.ClaimNo, thisTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID, odsEDIClaimDetail);
                            ogloClaimManager.Dispose();
                            ogloClaimManager = null;
                            #endregion

                            //DESTROYS OBJECTS
                            oSegment.Dispose();
                            oSegment = null;
                            oTransactionset.Dispose();
                            oTransactionset = null;
                            oGroup.Dispose();
                            oGroup = null;
                            oInterchange.Dispose();
                            oInterchange = null;
                            if (thisTransaction != null)
                            {
                                thisTransaction.Dispose();
                                thisTransaction = null;
                            }
                        }
                    }
                }
            }
            catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
            {
                string _strEx = "";
                ediException oException = null;
                oException = (ediException)Rex.WrappedException;
                _strEx = oException.get_Description();
                gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
                _result = "";
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                _result = "";
            }
            finally
            {
                if (dsHeader != null) { dsHeader.Dispose(); dsHeader = null; }
                if (dsMaster != null) { dsMaster.Dispose(); dsMaster = null; }


                if (oEdiDoc != null) { oEdiDoc.Dispose(); oEdiDoc = null; }
                if (oInterchange != null) { oInterchange.Dispose(); oInterchange = null; }
                if (oGroup != null) { oGroup.Dispose(); oGroup = null; }
                if (oTransactionset != null) { oTransactionset.Dispose(); oTransactionset = null; }
                if (oSegment != null) { oSegment.Dispose(); oSegment = null; }
                if (oSchema != null) { oSchema.Dispose(); oSchema = null; }
                if (oSchemas != null) { oSchemas.Dispose(); oSchemas = null; }
            }
            #endregion " Generate EDI "


            return _result;
        }

        #region Capitalized DataTable And DataSet CommentdLogic

        // private static DataTable CapitalizedDataTable(DataTable dtEDIDataTable)
        //{

        //    DataTable dtEDICapitalDataTable = new DataTable();
        //    dtEDICapitalDataTable = dtEDIDataTable.Clone();

        //    for (int row = 0; row < dtEDIDataTable.Rows.Count; row++)
        //    {
        //        dtEDICapitalDataTable.Rows.Add();
        //        for (int col = 0; col < dtEDIDataTable.Columns.Count; col++)
        //        {
        //            if (dtEDIDataTable.Columns[col].DataType == typeof(System.String))
        //                dtEDICapitalDataTable.Rows[row][col] = dtEDIDataTable.Rows[row][col].ToString().ToUpper();
        //            else
        //                dtEDICapitalDataTable.Rows[row][col] = dtEDIDataTable.Rows[row][col];
        //        }

        //    }

        //        //IEnumerable<DataRow> query = from n in dtPatientInsurances.AsEnumerable() select n ;

        //        //foreach (DataRow r in query)
        //        //{
        //        //    if (true)
        //        //    {
        //        //        r.BeginEdit();
        //        //        r.ItemArra
        //        //        r.EndEdit();
        //        //        r.AcceptChanges();

        //        //    }
        //        //}
        //        //DataTable boundTable = query.CopyToDataTable<DataRow>();

        //    return dtEDICapitalDataTable; 
        //}

        // private static DataSet CapitalizedDataSet(DataSet dsEDIDataSet)
        //{


        //    DataSet dsCapitilizedDataSet = new DataSet();

        //    DataTable dtEDIDataTable = new DataTable();

        //    DataTable dtEDICapitalDataTable = new DataTable();            


        //     for (int TableCount = 0; TableCount < dsEDIDataSet.Tables.Count; TableCount++)
        //     {
        //         dtEDIDataTable = dsEDIDataSet.Tables[TableCount];
        //         dtEDICapitalDataTable = dtEDIDataTable.Clone();
        //         for (int row = 0; row < dtEDIDataTable.Rows.Count; row++)
        //         {
        //             dtEDICapitalDataTable.Rows.Add();
        //             for (int col = 0; col < dtEDIDataTable.Columns.Count; col++)
        //             {
        //                 if (dtEDIDataTable.Columns[col].DataType == typeof(System.String))
        //                     dtEDICapitalDataTable.Rows[row][col] = dtEDIDataTable.Rows[row][col].ToString().ToUpper();
        //                 else
        //                     dtEDICapitalDataTable.Rows[row][col] = dtEDIDataTable.Rows[row][col];
        //             }
        //         }

        //             dsCapitilizedDataSet.Tables.Add(dtEDICapitalDataTable);



        //     }
        //    //IEnumerable<DataRow> query = from n in dtPatientInsurances.AsEnumerable() select n ;

        //    //foreach (DataRow r in query)
        //    //{
        //    //    if (true)
        //    //    {
        //    //        r.BeginEdit();
        //    //        r.ItemArra
        //    //        r.EndEdit();
        //    //        r.AcceptChanges();

        //    //    }
        //    //}
        //    //DataTable boundTable = query.CopyToDataTable<DataRow>();

        //     return dsCapitilizedDataSet;
        //}
        #endregion

        public string EDI837Generation_5010(ArrayList SelectedTransactions, string _BatchName, bool _IsUndo, Int64 _ContactID, dsEDIClaimdetails odsEDIClaimDetail, Int64 _nBatchID)
        {

            DataSet dsMaster = null;
            DataSet dsHeader = null;
            int IndexCount;
            string _result = "";
            string InterchangeHeader = "";
            string FunctionalGroupHeader = "";
            string TransactionSetHeader = "";
            string _ClaimStatus = "1";
            int _Rendering = 1;
            string sEdiFile, sPath;
            ediDocument oEdiDoc = null;
            ediSchema oSchema = null;
            ediSchemas oSchemas = null;
            ediInterchange oInterchange = null;
            ediGroup oGroup = null;
            ediTransactionSet oTransactionset = null;
            ediDataSegment oSegment = null;
            string sSEFFile = "";
            bool _IsSEFPresent = true;
            string _TypeOfData = "T";
            bool _bIntialTreatmentDate = false;
            bool _bIsCaptionize = false;
            bool _bEDPDTSV11 = false;
            bool _bEDPDTCRC = false;
            bool _bBillEPSDTorFamilyPlanning = false;
            bool _bSuppressRendreing = false;
            bool _bincludeorderingprovider = false;

            //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
            string sReceiverQualifier = "ZZ";
            string sSenderQualifier = "ZZ";
            

            #region " Generate EDI "

            string sInstance = "";
            //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
           

            try
            {

                #region "Load EDI"


                //  sPath = AppDomain.CurrentDomain.BaseDirectory;
                sSEFFile = "837_005010X222A1.SemRef.SEF";

                oEdiDoc = new ediDocument();

                // Change the cursor type from dynamic to forward to improve speed performance
                oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;

                // Disable the internal standard reference library to be memory efficient
                oSchemas = oEdiDoc.GetSchemas();
                oSchemas.EnableStandardReference = false;

                // Load the SEF file
                oSchema = oEdiDoc.ImportSchema(sSEFPath + sSEFFile, 0);



                if (File.Exists(sSEFPath + sSEFFile) == false)
                {
                    MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _IsSEFPresent = false;
                    return "";
                }


                oEdiDoc.SegmentTerminator = "~\r\n";
                oEdiDoc.ElementTerminator = "*";
                oEdiDoc.CompositeTerminator = ":";

                #endregion


                if (_IsSEFPresent == true)
                {
                    //Get Clearing House Information in Data table                   

                    #region "Header Data - Dataset define in table"

                    dsHeader = GetHeader_EDI_5010(_ContactID, _ClinicID, Convert.ToInt64(SelectedTransactions[SelectedTransactions.Count - 1]), false);
                    if (dsHeader == null)
                    {
                        return "";
                    }
                    if (dsHeader.Tables == null)
                    {
                        return "";
                    }

                    DataTable dtClearingHouse = dsHeader.Tables["ClearingHouseData"];
                    DataTable dtSubmitter = dsHeader.Tables["SubmitterData"];
                    DataTable dtChargesSetting = dsHeader.Tables["ChargesSetting"];
                //    DataTable dtEPSDTSetting = dsHeader.Tables["EPSSTSetting"];
                    DataTable dtbIsCaptionize = dsHeader.Tables["bIsCaptionize"];
                    
                    if (dtChargesSetting != null && dtChargesSetting.Rows.Count > 0)
                    {
                        _bIntialTreatmentDate = Convert.ToBoolean(dtChargesSetting.Rows[0]["sSettingsValue"]);
                    }

                    if (dtbIsCaptionize != null && dtbIsCaptionize.Rows.Count > 0)
                    {
                        _bIsCaptionize = Convert.ToBoolean(dtbIsCaptionize.Rows[0]["sSettingsValue"]);
                    }
                    //if (dtEPSDTSetting != null && dtEPSDTSetting.Rows.Count > 0)
                    //{
                    //    _bEDPDTSV11 = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeSV"]);
                    //    _bEDPDTCRC = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeCRC"]);
                    //    _bSuppressRendreing = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bSupressRenderEPSDTClaimOnPaperEDI"]);
                    //    _bBillEPSDTorFamilyPlanning = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bBillEPSDTorFamilyPlanning"]);
                    //}

                    if (dsHeader != null && dsHeader.Tables["ProviderSettings"] != null && dsHeader.Tables["ProviderSettings"].Rows.Count > 0)
                    {
                        _bincludeorderingprovider = Convert.ToBoolean(dsHeader.Tables["ProviderSettings"].Rows[0]["bIncludeOrderingProvider"]);
                    }

                    #endregion

                    //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                 

                    if (dtClearingHouse == null)
                    {
                        MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return "";
                    }

                    if (dtClearingHouse.Rows.Count < 1)
                    {
                        MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return "";
                    }

                    if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                    {
                        MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return "";
                    }
                    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                    DataTable dtClearingHouseID = ogloBilling.GetClearingHouseSettings();
                    ogloBilling.Dispose();
                    ogloBilling = null;
                    //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                    if (dtClearingHouseID != null && dtClearingHouseID.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtClearingHouseID.Rows.Count; i++)
                        {
                            if (dtClearingHouseID.Rows[i]["bIsDefault"].ToString() == "True")
                            {
                                if (Convert.ToString(dtClearingHouseID.Rows[i]["sSenderIDQualifier"]) != "")
                                { sSenderQualifier = Convert.ToString(dtClearingHouseID.Rows[i]["sSenderIDQualifier"]); }

                                if (Convert.ToString(dtClearingHouseID.Rows[i]["sReceiverIDQualifier"]) != "")
                                { sReceiverQualifier = Convert.ToString(dtClearingHouseID.Rows[i]["sReceiverIDQualifier"]); }
                            }
                        }
                    }
                    if (dtClearingHouseID != null) { dtClearingHouseID.Dispose(); dtClearingHouseID = null; }

                    #region " Interchange Segment "

                    //Create the interchange segment
                    ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "005010"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

                    if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
                    {
                        _TypeOfData = "T";
                    }
                    else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
                    {
                        _TypeOfData = "P";
                    }

                    oSegment.set_DataElementValue(1, 0, "00");
                    oSegment.set_DataElementValue(3, 0, "00");
                    oSegment.set_DataElementValue(5, 0, sSenderQualifier);//7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                    oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_SenderID.Trim());//"1234545");//
                    oSegment.set_DataElementValue(7, 0, sReceiverQualifier);//7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                    oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
                    string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
                    oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
                    string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    oSegment.set_DataElementValue(11, 0, "^");
                    oSegment.set_DataElementValue(12, 0, "00501");
                    InterchangeHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(13, 0, InterchangeHeader);
                    oSegment.set_DataElementValue(14, 0, "0");
                    oSegment.set_DataElementValue(15, 0, _TypeOfData);
                    oSegment.set_DataElementValue(16, 0, ":");

                    #endregion " Interchange Segment "

                    #region " Functional Group "

                    //Create the functional group segment
                    ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("005010X222A1"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
                    oSegment.set_DataElementValue(1, 0, "HC");
                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////_SenderName);
                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//// _ReceiverCode.Trim());//"ClarEDI");
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
                    string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    FunctionalGroupHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
                    oSegment.set_DataElementValue(7, 0, "X");
                    oSegment.set_DataElementValue(8, 0, "005010X222A1");

                    #endregion " Functional Group "

                    #region ST - TRANSACTION SET HEADER

                    ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
                    TransactionSetHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(2, 0, TransactionSetHeader);
                    oSegment.set_DataElementValue(3, 0, "005010X222A1");

                    #endregion ST - TRANSACTION SET HEADER

                    #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    //Beginning Segment 
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
                    oSegment.set_DataElementValue(1, 0, "0019"); //Hierarchical Structure Code
                    oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
                    oSegment.set_DataElementValue(3, 0, TransactionSetHeader); //Reference identification
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Date of claim
                    string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                    oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
                    #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION



                    #region NM1 - SUBMITTER


                    //1000A SUBMITTER
                    //NM1 SUBMITTER

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "41");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
                    if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.
                    }

                    //PER SUBMITTER EDI CONTACT INFORMATION
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
                    oSegment.set_DataElementValue(1, 0, "IC");
                    if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                    {
                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
                    }
                    else
                    {
                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    }
                    oSegment.set_DataElementValue(3, 0, "TE");
                    if (dtSubmitter != null && Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                    {
                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("(", "").Replace(")", "").Replace("-", "").Replace("_", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone
                    }

                    #endregion NM1 - SUBMITTER

                    #region NM1 - RECEIVER NAME

                    //1000B RECEIVER
                    //NM1 RECEIVER NAME
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "40");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//clearing house or contractor or carrier or FI name
                    if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]) != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));// Electronic Transmitter Identification No.
                    }

                    #endregion NM1 - RECEIVER NAME

                    nHlCount = 0;

                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                            TransactionEDI thisTransaction = new TransactionEDI();
                            for (int i = 0; i < SelectedTransactions.Count; i++)
                            {
                                 
                                TransactionLineEDI oTransLine = null;
                                 TransactionEDI oTransaction =   GetChargesClaimDetails_EDI(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);

                                #region "Master EDI data - Dataset data set in data table "

                                dsMaster = null;
                                dsMaster = GetMaster_EDI_5010(oTransaction.ContactID, oTransaction.Lines[0].RenderingProviderId, oTransaction.ProviderID, oTransaction.ResponsibilityNo,
                                    oTransaction.TransactionMasterID, Convert.ToInt64(oTransaction.FacilityCode), _ClinicID, oTransaction.IsSameAsBillingProvider,
                                    oTransaction.TransactionID, oTransaction.ReferalProviderID_New, false);

                                DataTable dtPatientInsurances = dsMaster.Tables["PatientInsurance"];
                                DataTable dtFacility = dsMaster.Tables["Facility"];
                                DataTable dtBillingProvider = dsMaster.Tables["BillingProvider"];
                                DataTable dtPatientPaid = dsMaster.Tables["PatientPaid"];
                                DataTable dtDx = dsMaster.Tables["Diagnosis"];
                                DataTable dtRefProvider = dsMaster.Tables["RefferingProvider"];
                                DataTable dtRendProvider = dsMaster.Tables["RenderingProvider"];
                                DataTable dtMasterSetting = dsMaster.Tables["MasterSetting"];
                                DataTable dtBillingProviderTaxonomy = dsMaster.Tables["BillingProviderTaxonomy"];
                                DataTable dtProviderReportingSetting = dsMaster.Tables["ProviderReportingSetting"];
                                DataTable dtEPSDTSetting = dsMaster.Tables["EPSDTSetting"];
                                DataTable dtPWKData = dsMaster.Tables["PWKData"];
                                #endregion
                                if (dtEPSDTSetting != null && dtEPSDTSetting.Rows.Count > 0)
                                {
                                    _bEDPDTSV11 = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeSV"]);
                                    _bEDPDTCRC = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeCRC"]);
                                    _bSuppressRendreing = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bSupressRenderEPSDTClaimOnPaperEDI"]);
                                    _bBillEPSDTorFamilyPlanning = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bBillEPSDTorFamilyPlanning"]);
                                }
                                if (dtProviderReportingSetting != null && dtProviderReportingSetting.Rows.Count > 0)
                                {
                                    _bincludeorderingprovider = Convert.ToBoolean(dtProviderReportingSetting.Rows[0]["bIncludeOrderingProvider"]);
                                }
                                try
                                {
                                    if (oTransaction != null)
                                    {
                                        thisTransaction.TransactionMasterID = oTransaction.TransactionMasterID;
                                        thisTransaction.ClaimNo = oTransaction.ClaimNo;
                                        thisTransaction.PatientID = oTransaction.PatientID;            
                                        if (oTransaction.Lines.Count > 0)
                                        {
                                            //Split Claim No.
                                            #region "Formatting the Claim Number"
                                            string _ClaimNo = "";

                                            _ClaimNo = FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNumber));

                                            #endregion

                                            if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
                                            {
                                                if (oTransaction.PatientID <= 0)
                                                {
                                                    MessageBox.Show("Patient information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                                if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                                {
                                                    MessageBox.Show("Patient " + oTransaction.PatientFirstName + " " + oTransaction.PatientLastName + " Insurance details are missing for claim number " + _ClaimNo + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }

                                                if (dtFacility == null)
                                                {
                                                    MessageBox.Show("Facility information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }

                                            }

                                            for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
                                            {
                                                //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

                                                nHlCount = nHlCount + 1;
                                                nHlProvParent = nHlCount;
                                                //2000A BILLING/PAY-TO PROVIDER HL LOOP
                                                //HL-BILLING PROVIDER
                                                string _PayerResponsibilityName = "";
                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                oSegment.set_DataElementValue(3, 0, "20");
                                                oSegment.set_DataElementValue(4, 0, "1");


                                                #region Billing Provider

                                                string PrimaryBillingProviderID = "";
                                                string PrimaryOrderingProviderID = "";
                                                string PrimaryRenderingProviderID = "";

                                                //2010AA BILLING PROVIDER
                                                //NM1 BILLING PROVIDER NAME
                                                if (dtBillingProvider != null && dtBillingProvider.Rows.Count > 0)
                                                {
                                                    if (dtBillingProviderTaxonomy != null && dtBillingProviderTaxonomy.Rows.Count > 0)
                                                    {
                                                        if (FormatString(dtBillingProviderTaxonomy.Rows[0]["sTaxonomyCode"].ToString().Trim()) != ""
                                                            && FormatString(dtBillingProviderTaxonomy.Rows[0]["sTaxonomyQualifier"].ToString().Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PRV"));
                                                            oSegment.set_DataElementValue(1, 0, "BI");
                                                            oSegment.set_DataElementValue(2, 0, "PXC");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(dtBillingProviderTaxonomy.Rows[0]["sTaxonomyCode"].ToString().Trim()));
                                                        }
                                                    }

                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "85");
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["EntityType"])));
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])));//Billing provider name
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])));
                                                    }


                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])));

                                                    }

                                                    //Check the Code
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])) != "")
                                                    {
                                                        //oSegment.set_DataElementValue(8, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])));
                                                        oSegment.set_DataElementValue(8, 0, "XX"); // Set XX 5010
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])) != "")
                                                    {
                                                        PrimaryBillingProviderID = FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"]));
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])));
                                                    }

                                                    if (Convert.ToString(dtBillingProvider.Rows[0]["PhyAddline1"]).Trim() == "" || Convert.ToString(dtBillingProvider.Rows[0]["PhyCity"]).Trim() == "" || Convert.ToString(dtBillingProvider.Rows[0]["PhyState"]).Trim() == "" || Convert.ToString(dtBillingProvider.Rows[0]["PhyZIP"]).Trim() == "")
                                                    {
                                                        //N3 BILLING PROVIDER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])));//Provider Address

                                                        //N4 BILLING PROVIDER LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])));////Provider City
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["State"])));//Provider state

                                                        //oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//Provider ZIP
                                                        oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["ZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["AreaCode"]))));//Provider ZIP
                                                        if (Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim() != "")
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim());
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //N3 BILLING PROVIDER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyAddline1"])));//Provider Address

                                                        //N4 BILLING PROVIDER LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyCity"])));////Provider City
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyState"])));//Provider state                                               
                                                        oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyAreaCode"]))));//Provider ZIP
                                                        if (Convert.ToString(dtBillingProvider.Rows[0]["PhyCountryCode"]).Trim() != "")
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtBillingProvider.Rows[0]["PhyCountryCode"]).Trim());
                                                        }
                                                    }



                                                    //Billing Provider 2010AA Provider Tax Identification
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])));
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])));

                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])) != "")
                                                    {
                                                        if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) == "0B" || FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) == "1G")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])));
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])));
                                                        }
                                                    }

                                                    #region "Billing Contact Information"

                                                    //Contact Information for 5010
                                                    if (FormatString(dtBillingProvider.Rows[0]["PhoneNo"].ToString().Trim()) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\PER"));
                                                        oSegment.set_DataElementValue(1, 0, "IC");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(dtBillingProvider.Rows[0]["ContactName"].ToString().Trim()));
                                                        oSegment.set_DataElementValue(3, 0, "TE");
                                                        oSegment.set_DataElementValue(4, 0, FormatString(dtBillingProvider.Rows[0]["PhoneNo"].ToString().Trim()));
                                                    }

                                                    #endregion

                                                    #region "Billing Provider Pay to Address "
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyAddline1"]).Trim()) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyCity"]).Trim()) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyState"]).Trim()) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyZIP"]).Trim()) != "")
                                                    {

                                                        if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])) != "")
                                                        {
                                                            //In 5010 Billing Provider Pay to address 
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "87");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["EntityType"])));

                                                            //N3 BILLING PROVIDER ADDRESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])));//Provider Address

                                                            //N4 BILLING PROVIDER LOCATION
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])));////Provider City
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["State"])));//Provider state

                                                            //oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//Provider ZIP
                                                            oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["ZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["AreaCode"]))));//Provider ZIP

                                                            if (Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim() != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim());
                                                            }
                                                        }
                                                    }

                                                    #endregion

                                                }
                                                else
                                                {
                                                    MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }

                                                #endregion


                                                //'******************************************************************************************************
                                                //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
                                                //'******************************************************************************************************
                                                #region Subscriber
                                                if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                {
                                                    string _strRelation = "";
                                                    string _strInsuranceType = "";
                                                    _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                    _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");

                                                    #region Subscriber HL Loop - 2000B

                                                    nHlCount = nHlCount + 1;
                                                    nHlSubscriberParent = nHlCount;

                                                    //2000B SUBSCRIBER HL LOOP
                                                    //HL-SUBSCRIBER
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                    oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                    oSegment.set_DataElementValue(3, 0, "22");

                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "0");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "1");

                                                    }

                                                    //SBR SUBSCRIBER INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));
                                                    oSegment.set_DataElementValue(1, 0, "P");
                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "18");
                                                    }


                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
                                                    }

                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludePlanname"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance name
                                                    }


                                                    //This is Claim filling Indicator code in EDI implementation guide.
                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
                                                    }

                                                    //2010BA SUBSCRIBER
                                                    //NM1 SUBSCRIBER NAME
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "IL");
                                                    if (_strRelation != "18" && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIsCompnay"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "2");
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sCompanyName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberOrgName"                                                   
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberLastOrgName"
                                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberFirstname"
                                                        //7030 Extension.
                                                        //Problem #00000395: Bill with middle initial.
                                                        //Added Middle Initial in Subscriber name.
                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMiddlename"
                                                        }


                                                        // WorkerComp and AutoClaimNo.
                                                        if (Convert.ToString(oTransaction.WorkersCompNo).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bShowClaimNo"]) == true)
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "MI");
                                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(oTransaction.WorkersCompNo).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }
                                                        else if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "MI");
                                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }

                                                        else
                                                        {

                                                            MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + "Insurance ID for subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                            return "";
                                                        }
                                                    }

                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludeSubscriberAddress"]) == true || _strRelation == "18")
                                                    {
                                                        //N3 SUBSCRIBER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                        }

                                                        //N4 SUBSCRIBER CITY 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberCity"
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscrberState"
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"SubscriberZip"

                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCountryCode"]).Trim() != "")
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCountryCode"]).Trim());
                                                        }

                                                        if (_strRelation == "18")
                                                        {
                                                            //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
                                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "") == "")
                                                            {
                                                                MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + " State or City or ZipCode for Subscriber is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }


                                                        //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "") == "")
                                                        {
                                                            MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + " State or City or ZipCode for Subscriber is not present.");
                                                        }

                                                        string _SubscriberGender = "";
                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                                oSegment.set_DataElementValue(1, 0, "D8");

                                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"

                                                                _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                                if (_SubscriberGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "OTHER")
                                                                {
                                                                    _SubscriberGender = "U";
                                                                }
                                                                oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 1).ToUpper());//"SubscriberGender"
                                                            }
                                                            else
                                                            {
                                                                if (_strRelation == "18")
                                                                {
                                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber gender is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (_strRelation == "18")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }
                                                    }

                                                    // REF - PROPERTY AND CASUALTY CLAIM NUMBER  --Send Y4 if Claim is Worker Comp or Auto Claim 
                                                    if (_strRelation == "18")
                                                    {
                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bworkerscomp"]) || Convert.ToBoolean(dtPatientInsurances.Rows[0]["bautoclaim"]))
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "Y4");
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }
                                                    }
                                                    #endregion SubscriberHL Loop - 2000B

                                                    #region Payer Information Loop 2010BB
                                                    //2010BB SUBSCRIBER/PAYER
                                                    //NM1 PAYER NAME
                                                    string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Length > 35)
                                                    {
                                                        _ModifiedPayerName = "";
                                                        _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 34);
                                                    }
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "PR");
                                                    oSegment.set_DataElementValue(2, 0, "2");
                                                    oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"PayerLastOrgName"

                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
                                                    }

                                                    ////////N3 PAYER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceAddress"                                               

                                                    ////////N4 PAYER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceCity"
                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceState"
                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"InsuranceZip"

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[0]["sClaimOfficeNumber"] != null)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sEDIAltPayerIDType"]).Trim()) != "" && dtPatientInsurances.Rows[0]["sEDIAltPayerIDType"] != null)
                                                        {
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sEDIAltPayerIDType"]).Trim()));
                                                        }
                                                        else
                                                            oSegment.set_DataElementValue(1, 0, "FY");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"]).Trim()));
                                                    }

                                                    if (dtBillingProvider != null)
                                                    {
                                                        if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])) != "")
                                                        {
                                                            if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "0B" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "1G")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])));
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])));
                                                            }
                                                        }
                                                    }

                                                    #endregion



                                                    if (_strRelation != "18")
                                                    {

                                                        nHlCount = nHlCount + 1;

                                                        //2000B DEPENDENT HL LOOP
                                                        //HL-DEPENDENT
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                        oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
                                                        oSegment.set_DataElementValue(3, 0, "23");
                                                        oSegment.set_DataElementValue(4, 0, "0");

                                                        //PAT - PATIENT/DEPENDENT INFORMATION

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //01 - Spouse 19 - Child

                                                        #region " Patient Info"

                                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "QC");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.PatientLastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient Last Name
                                                        oSegment.set_DataElementValue(4, 0, oTransaction.PatientFirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient First Name
                                                        //7030 Extension.
                                                        //Problem #00000395: Bill with middle initial.
                                                        //Added Middle Initial in Patient name.
                                                        if (oTransaction.PatientMiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(5, 0, oTransaction.PatientMiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient Middle Name
                                                        }

                                                        //N3 - ADDRESS INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, oTransaction.PatientAddress1.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Address"

                                                        //N4 - GEOGRAPHIC LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, oTransaction.PatientCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"City"
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.PatientState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"State"
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.PatientZip.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"Zip"
                                                        if (oTransaction.PatientCountry.Trim().ToUpper() != "US")
                                                        {
                                                            gloContacts.gloContact oContact = new gloContacts.gloContact(_databaseconnectionstring);
                                                            oSegment.set_DataElementValue(4, 0, oContact.getCountryCode(oTransaction.PatientCountry.Trim().ToUpper()));
                                                            oContact.Dispose();
                                                        }


                                                        //DMG - DEMOGRAPHIC INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                        oSegment.set_DataElementValue(1, 0, "D8");
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.PatientDOB.ToShortDateString())));
                                                        if (oTransaction.PatientGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || oTransaction.PatientGender.Trim().Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "OTHER")
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"                                                                   
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.PatientGender.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberGender"
                                                        }

                                                        //REF - PROPERTY AND CASUALTY CLAIM NUMBER
                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bworkerscomp"]) || Convert.ToBoolean(dtPatientInsurances.Rows[0]["bautoclaim"]))
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "Y4");
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }

                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludePatientSSN"]) && (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bworkerscomp"]) || Convert.ToBoolean(dtPatientInsurances.Rows[0]["bautoclaim"])))
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "SY");
                                                            if (oTransaction.PatientSSN != null && oTransaction.PatientSSN != "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, oTransaction.PatientSSN);//"Insurance Id"
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "999999999");//"Insurance Id"
                                                            }
                                                        }

                                                        #endregion " Patient Info"
                                                    }

                                                    //******* DEPENDENT CLAIM INFORMATION *************************************************************
                                                    //TODO: Get the data table for Claim info to add fields of service in EDI file
                                                    string _FirstPOS = String.Empty;
                                                    string _ClaimTotal = "";
                                                    iItemCount = 0;
                                                    iItemCount = 1;
                                                    decimal _claimAmount = 0;

                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        oTransLine = oTransaction.Lines[nLine];
                                                        _claimAmount = _claimAmount + oTransLine.Total;
                                                        if (nLine == 0)
                                                        {
                                                            _FirstPOS = oTransaction.Lines[0].POSCode;
                                                        }
                                                    }

                                                    _ClaimTotal = _claimAmount.ToString("#0.00");
                                                    if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
                                                    }
                                                    else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
                                                    }

                                                    //  #region "Dependent Claim Level"
                                                    //2300 CLAIM
                                                    //CLM CLAIM LEVEL INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));

                                                    if (gloGlobal.gloPMGlobal.IsUseClaimPrefix && gloGlobal.gloPMGlobal.sClaimPrefix != "")
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, String.Concat(gloGlobal.gloPMGlobal.sClaimPrefix, _ClaimNo)); //Patient Account no                                                         
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, _ClaimNo);
                                                    }                                                         
                                                    oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Claim Amount
                                                    oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //21 - Inpatient Hospital
                                                    oSegment.set_DataElementValue(5, 2, "B");

                                                    if (oTransaction.IsReplacementClaim == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIsClaimFrequencyOne"]) == false)
                                                    {
                                                        _ClaimStatus = "7";
                                                    }
                                                    else
                                                    {
                                                        _ClaimStatus = "1";
                                                    }
                                                    oSegment.set_DataElementValue(5, 3, _ClaimStatus);
                                                    oSegment.set_DataElementValue(6, 0, "Y");


                                                    //Access of Assignment
                                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                    {
                                                        _IsAccessAssignment = Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAccessAssignment"]);
                                                    }
                                                    if (_IsAccessAssignment == true)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "A");
                                                    }
                                                    else if (_IsAccessAssignment == false)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "C");
                                                    }

                                                    //Assignment of Benefit
                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "Y");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "N");
                                                    }
                                                    //Signature on file.
                                                    if (oTransaction.SOF == true)
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, "Y");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, "I");
                                                    }

                                                    if (oTransaction.AutoClaim == true)
                                                    {
                                                        if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "AA");
                                                            oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                        }
                                                    }
                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "EM");
                                                        }
                                                    }
                                                    if (oTransaction.OtherAccident == true)
                                                    {
                                                        if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "OA");
                                                        }
                                                    }

                                                    if (oTransaction.DelayReasonCodeID != "")
                                                    {
                                                        oSegment.set_DataElementValue(20, 0, oTransaction.DelayReasonCodeID);
                                                    }


                                                    string OnsetDate = "";
                                                    if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "" || oTransaction.OtherAccidentDate.ToString() != "")
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.InjuryDate);
                                                            ////DTP DATE OF ONSET of current symptoms or illness
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "439");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                        }
                                                        else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0 && oTransaction.sBox14DateQualifier.ToString() != "")
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
                                                            ////DTP DATE OF ONSET of current symptoms or illness
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, oTransaction.sBox14DateQualifier);
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                        }
                                                        else if (oTransaction.AutoClaim == true)
                                                        {
                                                            if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.AccidentDate);
                                                                ////DTP DATE OF ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                            }
                                                        }
                                                        else if (oTransaction.OtherAccident == true)
                                                        {
                                                            if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.OtherAccidentDate);
                                                                ////DTP DATE OF Other ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                            }
                                                        }


                                                    }
                                                    //if (oTransaction.InitialTreatmentDate != "" && _bIntialTreatmentDate == true)
                                                    //{
                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                    //    oSegment.set_DataElementValue(1, 0, "454");
                                                    //    oSegment.set_DataElementValue(2, 0, "D8");
                                                    //    oSegment.set_DataElementValue(3, 0, oTransaction.InitialTreatmentDate);
                                                    //}

                                                    ////include DTP*304 if last seen date is present
                                                    //if (oTransaction.LastSeenDate > 0 && oTransaction.LastSeenDate.ToString() != "")
                                                    //{
                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                    //    oSegment.set_DataElementValue(1, 0, "304");
                                                    //    oSegment.set_DataElementValue(2, 0, "D8");
                                                    //    oSegment.set_DataElementValue(3, 0, oTransaction.LastSeenDate.ToString());
                                                    //}

                                                    if (oTransaction.Box15Date != "" && oTransaction.Box15DateQualifier != "" && oTransaction.Box15DateQualifier != "438")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, oTransaction.Box15DateQualifier);
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.Box15Date);
                                                    }



                                                    if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
                                                    {
                                                        //DTP DATE OF Hospitalization (Admission) 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "435");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());
                                                    }

                                                    if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
                                                    {
                                                        //DTP DATE OF Discharge 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "096");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());

                                                    }

                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial  Disability period last day worked)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "297");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());
                                                            //
                                                        }

                                                        if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period return to work)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "296");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());
                                                        }
                                                    }

                                                    #region PWk Data
                                                    if (dtPWKData != null && dtPWKData.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(dtPWKData.Rows[0]["ReportTypeCode"]).Trim() != "" && Convert.ToString(dtPWKData.Rows[0]["ReportTransmissionCode"]).Trim() != "" && Convert.ToString(dtPWKData.Rows[0]["AttachmentControlNumber"]).Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\PWK"));
                                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPWKData.Rows[0]["ReportTypeCode"]).Trim());
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPWKData.Rows[0]["ReportTransmissionCode"]).Trim());
                                                            oSegment.set_DataElementValue(5, 0, "AC");
                                                            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtPWKData.Rows[0]["AttachmentControlNumber"]).Trim());
                                                        }
                                                    }
                                                    #endregion
                                                    #region Patient Paid Amount.

                                                    string _AmountPaid = String.Empty;
                                                 
                                                    if (dtPatientPaid != null && dtPatientPaid.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]).Trim() != "")
                                                            _AmountPaid = FormatAmount(Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]));
                                                    }
                                                  //  _AmountPaid = GetBox29Setting(oTransaction.TransactionID,oTransaction.ContactID);
                                                    #endregion

                                                    if (GetIncludePriorPatPaymentSetting(oTransaction.ContactID) && _AmountPaid.Trim() != string.Empty && _AmountPaid.Trim() != "0.00" && _AmountPaid.Trim() != "0.0" && _AmountPaid.Trim() != "0")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
                                                        oSegment.set_DataElementValue(1, 0, "F5");
                                                        oSegment.set_DataElementValue(2, 0, _AmountPaid);
                                                    }

                                                    #region Service Authorization exception code

                                                    if (oTransaction.ServiceAuthExceCode.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "4N");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.ServiceAuthExceCode);
                                                    }

                                                    #endregion
                                                    #region MammogramCertNumber
                                                    if (oTransaction.sMammogramCertNumber.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "EW");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sMammogramCertNumber);
                                                    }

                                                    #endregion 


                                                    if (FormatString(oTransaction.PriorAuthorizationNo) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "G1");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.PriorAuthorizationNo)); //Claim No
                                                    }


                                                    #region Claim Remittance Reference #

                                                    if ((Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"])).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "F8");
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                    }

                                                    if (FormatString(oTransaction.ClaimCLIANo) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "X4");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.ClaimCLIANo)); //Claim No
                                                    }
                                                    #endregion

                                                    #region IDE Number
                                                    if (oTransaction.sIDENo.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "P4");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sIDENo);
                                                    }
                                                    #endregion 


                                                    #region "BOX19 Note"

                                                    if (oTransaction.Box19NoteDescription != "")
                                                    {
                                                        if (FormatString(Convert.ToString(oTransaction.Box19NoteDescription).Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(oTransaction.Box19NoteDescription).Trim())); //Claim No
                                                        }
                                                    }

                                                    #endregion

                                                    #region HI - Diagnosis


                                                    //HI HEALTH CARE DIAGNOSIS CODES                                                                                             


                                                    string code_no = "";
                                                    if (dtDx != null && dtDx.Rows.Count > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

                                                        for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                        {
                                                            if (DxIndex == 0)
                                                            {
                                                                if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    if (oTransaction.nICDRevision == gloGlobal.gloICD.CodeRevision.ICD9.GetHashCode())
                                                                    {
                                                                        oSegment.set_DataElementValue(1, 1, "BK");
                                                                    }
                                                                    else
                                                                    {
                                                                        oSegment.set_DataElementValue(1, 1, "ABK");
                                                                    }
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                }
                                                            }
                                                            if (DxIndex > 0)
                                                            {
                                                                if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    if (oTransaction.nICDRevision == gloGlobal.gloICD.CodeRevision.ICD9.GetHashCode())
                                                                    {
                                                                        oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
                                                                    }
                                                                    else
                                                                    {
                                                                        oSegment.set_DataElementValue(DxIndex + 1, 1, "ABF");
                                                                    }
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//
                                                                }
                                                            }
                                                        }

                                                        if (code_no != "" && _IsUndo != true)
                                                        {
                                                            code_no = Convert.ToString(dtMasterSetting.Rows[0]["InvalidICD9"]);
                                                        }
                                                        else
                                                        {
                                                            code_no = "";
                                                        }
                                                    }

                                                    if (code_no != "")
                                                    {
                                                        string _message;

                                                        _message = "ICD9 is Invalid." + Environment.NewLine + "For Claim No :" + _ClaimNo + Environment.NewLine + "Code : " + code_no + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "                                                            

                                                        if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                                        {
                                                            return "";
                                                        }
                                                    }
                                                    #endregion

                                                    #region CRC
                                                    if (_bEDPDTCRC == true && oTransaction.EPSDTScreening == true && _bBillEPSDTorFamilyPlanning == true)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CRC"));
                                                        oSegment.set_DataElementValue(1, 0, "ZZ");
                                                        if (oTransaction.EPSDTReferral == true)
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "Y");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.ReferralType));
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "N");
                                                            oSegment.set_DataElementValue(3, 0, "NU");
                                                        }
                                                    }
                                                    #endregion
                                                    #region Referring Provider - 2310A
                                                    if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                    {
                                                        PrimaryOrderingProviderID = FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim());
                                                    }

                                                    if ((Convert.ToBoolean(dtProviderReportingSetting.Rows[0]["bIncludeReferring_ordering"]) == true && oTransaction.providerQualifier.Trim() == "DK") || (Convert.ToBoolean(dtProviderReportingSetting.Rows[0]["bIncludeReferring_supervising"]) == true && oTransaction.providerQualifier.Trim() == "DQ") || (oTransaction.providerQualifier.Trim() == "DN")) // Setting Condition Added for Reffering Provider
                                                    {



                                                        if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true)
                                                        {

                                                            if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                            {
                                                                //2310B Referring PROVIDER
                                                                //NM1 Referring PROVIDER NAME
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                                oSegment.set_DataElementValue(1, 0, "DN");
                                                                oSegment.set_DataElementValue(2, 0, "1");
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"]).Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString().Trim())); //"ReferringLastname"
                                                                }
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"]).Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString().Trim()));//"ReferringFirstname"
                                                                }
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"]).Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(5, 0, dtRefProvider.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                }

                                                                if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, "XX");
                                                                    PrimaryOrderingProviderID = FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim());
                                                                    oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()));//"NPI"
                                                                }

                                                                // REF                                                      
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim()) != "" && FormatString(Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim()) != "")
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim()));
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim()));
                                                                }

                                                            }
                                                        }
                                                    } // End Setting Condition Added for Reffering Provider
                                                    #endregion Referring Provider

                                                    _Rendering = 1;

                                                    #region Rendering Provider - 2310B

                                                    //2310B RENDERING PROVIDER
                                                    //NM1 RENDERING PROVIDER NAME

                                                    if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                                                    {
                                                        bool IsincludeRenderingProvider = false;
                                                        IsincludeRenderingProvider = Convert.ToBoolean(dtRendProvider.Rows[0]["bIncludeRenderingProvider"]);
                                                        if (_bSuppressRendreing != true || oTransaction.EPSDTScreening != true)
                                                            if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) != PrimaryBillingProviderID || (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) == PrimaryBillingProviderID && IsincludeRenderingProvider == true))
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                                oSegment.set_DataElementValue(1, 0, "82");
                                                                oSegment.set_DataElementValue(2, 0, "1");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtRendProvider.Rows[0]["sLastName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtRendProvider.Rows[0]["sFirstName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                oSegment.set_DataElementValue(5, 0, Convert.ToString(dtRendProvider.Rows[0]["sMiddleName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));

                                                                if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, "XX");
                                                                    PrimaryRenderingProviderID = FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])).Trim();
                                                                    oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                                }
                                                                if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])) != "" && FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])) != "" && Convert.ToInt64(dtRendProvider.Rows[0]["QualifierMstID"]) > 1)
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])));
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                                }

                                                                //PRV RENDERING PROVIDER INFORMATION
                                                                if (Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
                                                                    oSegment.set_DataElementValue(1, 0, "PE");
                                                                    oSegment.set_DataElementValue(2, 0, "PXC");//Mutually Defined
                                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Reference Identification
                                                                }
                                                                _Rendering = 2;
                                                            }
                                                    }


                                                    #endregion


                                                    #region Facility - 2310C

                                                    //2310D SERVICE LOCATION
                                                    //NM1 SERVICE FACILITY LOCATION

                                                    if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bIsPOS"]) == true)
                                                    {
                                                        if (dtFacility != null && dtFacility.Rows.Count > 0)
                                                        {
                                                            bool IsincludeFacility = false;
                                                            IsincludeFacility = Convert.ToBoolean(dtFacility.Rows[0]["bIncludeFacility"]);
                                                            if (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) != PrimaryBillingProviderID || (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) == PrimaryBillingProviderID && IsincludeFacility == true))
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\NM1"));
                                                                oSegment.set_DataElementValue(1, 0, "77");
                                                                oSegment.set_DataElementValue(2, 0, "2");
                                                                oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["LastName"])));//"FacilityName"

                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"]));//NPI code
                                                                    oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])));//NPI
                                                                }

                                                                //N3 SERVICE FACILITY ADDRESS
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\N3"));
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["Address1"])));//"FacilityAddr1"
                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["Address2"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["Address2"])));//"FacilityAddr2"
                                                                }


                                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\N4"));
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["City"])));//"FacilityCity"
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["State"])));//"FacilityState"

                                                                //oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//"FacilityZip"
                                                                oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])), FormatString(Convert.ToString(dtFacility.Rows[0]["AreaCode"]))));//"FacilityZip"
                                                                if (Convert.ToString(dtFacility.Rows[0]["CountryCode"]).Trim() != "")
                                                                {
                                                                    oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["CountryCode"])));
                                                                }


                                                                //Facility Secondary Identification
                                                                if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bISOtherID"]) == true)
                                                                {
                                                                    if (FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])) != "")
                                                                    {
                                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\REF"));
                                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]));//NPI code
                                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])));//NPI
                                                                    }
                                                                }

                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["City"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["State"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])) == "")
                                                                {
                                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + " Facility Details(City/State/ZIP Code) is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    #region Supervising Provuder 2310D

                                                    if ((oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true) && oTransaction.providerQualifier.Trim() == "DQ")
                                                    {

                                                        if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                        {
                                                            //2310B Referring PROVIDER
                                                            //NM1 Referring PROVIDER NAME
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "DQ");
                                                            oSegment.set_DataElementValue(2, 0, "1");
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"]).Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString().Trim())); //"ReferringLastname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"]).Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString().Trim()));//"ReferringFirstname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"]).Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(5, 0, dtRefProvider.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                            }

                                                            if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "XX");
                                                                oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()));//"NPI"
                                                            }


                                                        }
                                                    }
                                                    #endregion

                                                    for (int _Insrow = 1; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
                                                    {
                                                        #region Subscriber Secondary Insurance - Loop 2320

                                                        //LOOP - 2320
                                                        //Send the all payer information
                                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                        if (_Insrow < 3)
                                                        {

                                                            #region SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
                                                            //1.Payer Responsibility Sequence No.
                                                            if (_Insrow == 1)
                                                            {
                                                                _PayerResponsibilityName = "Secondary";
                                                                oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //S-Secondary
                                                            }
                                                            else if (_Insrow == 2)
                                                            {
                                                                _PayerResponsibilityName = "Tertiary";
                                                                oSegment.set_DataElementValue(1, 0, "T");//_OtherInsurancePST.Trim().Replace("*","")); //T - Tertiary
                                                            }
                                                            //2.Individual Relationship code
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

                                                            //3.Refrence identification
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"22145");///Policy no

                                                            //4. Plan Name
                                                            if (Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIncludePlanname"]) == true)
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance name
                                                            }

                                                            //5.Insurance Type Code    

                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).ToUpper() == "MA" || Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).ToUpper() == "MB")
                                                            {
                                                                if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).ToUpper().Trim() != "PRIMARY")
                                                                {
                                                                    oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsTypeCodeMedicare"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Insurance Type Code of the Medicare                                                                
                                                                }
                                                            }

                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
                                                            }

                                                            #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                            #region OI - Other Insurance

                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
                                                            bool _bAssignmentofbenefit = false;
                                                            _bAssignmentofbenefit = Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bAssignmentofBenifit"]);
                                                            if (_bAssignmentofbenefit == true)
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, "Y");
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, "N");
                                                            }

                                                            //Patient Signature On File

                                                            if (oTransaction.SOF == true)
                                                            {
                                                                oSegment.set_DataElementValue(6, 0, "Y");
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(6, 0, "I");
                                                            }

                                                            #endregion OI - Other Insurance

                                                            //2330A SUBSCRIBER
                                                            #region NM1 SUBSCRIBER NAME - 2330A

                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "IL");
                                                            if (_strRelation != "18" && Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIsCompnay"]) == true)
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "2");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sCompanyName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberOrgName"
                                                                if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sCompanyName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                                {
                                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber CompanyName is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                                if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, "MI");
                                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMemberID"

                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("For Claim No: " + oTransaction.ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }

                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "1");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberLastOrgName"

                                                                if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                                {
                                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber Last name is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberFirstname"
                                                                //7030 Extension.
                                                                //Problem #00000395: Bill with middle initial.
                                                                //Added Middle Initial in Subscriber name.
                                                                if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMiddlename"
                                                                }

                                                                if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, "MI");
                                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMemberID"

                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("For Claim No: " + oTransaction.ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                            }
                                                            //N3 SUBSCRIBER ADDRESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
                                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                            }

                                                            //N4 SUBSCRIBER CITY
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
                                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberCity"
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscrberState"
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"SubscriberZip"

                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCountryCode"]).Trim() != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCountryCode"]).Trim());
                                                            }


                                                            #endregion NM1 SUBSCRIBER NAME

                                                            #region Payer Information - 2330B

                                                            //2330B SUBSCRIBER/PAYER
                                                            //NM1 PAYER NAME
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "PR");
                                                            oSegment.set_DataElementValue(2, 0, "2");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

                                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
                                                            }
                                                            if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                            {
                                                                if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludeSecondaryPayerAddress"]))
                                                                {
                                                                    ////////N3 PAYER ADDRESS
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
                                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceAddress"                                               

                                                                    ////////N4 PAYER CITY
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
                                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceCity"
                                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceState"
                                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"InsuranceZip"
                                                                }
                                                            }

                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"] != null)
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                                if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sEDIAltPayerIDType"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sEDIAltPayerIDType"] != null)
                                                                {
                                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sEDIAltPayerIDType"]).Trim()));
                                                                }
                                                                else
                                                                    oSegment.set_DataElementValue(1, 0, "FY");
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()));
                                                            }
                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"] != null)
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                                oSegment.set_DataElementValue(1, 0, "F8");
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"]).Trim()));
                                                            }

                                                            #endregion Payer Information


                                                            #region "Set Table Index as per Master SP"

                                                            IndexCount = _Insrow + 9;

                                                            #endregion

                                                            //2330G Billing Provider                                                        
                                                            //NM1 BILLING PROVIDER NAME
                                                            //Commented from gloPM6034 DLL Fix.
                                                            //if (dsMaster.Tables[IndexCount] != null && dsMaster.Tables[IndexCount].Rows.Count > 0)
                                                            //{
                                                            //    if (FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifierValue"])) != "")
                                                            //    {
                                                            //        if (FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])) != "0B" && FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])) != "1G")
                                                            //        {
                                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                            //            oSegment.set_DataElementValue(1, 0, "85");
                                                            //            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["EntityType"])));

                                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                            //            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])));
                                                            //            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifierValue"])));
                                                            //        }
                                                            //    }
                                                            //}
                                                        }
                                                        #endregion Subscriber Secondary Insurance
                                                    }//End for loop of Patient Insurance 
                                                    int _Noteindex;
                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        iItemCount = 1;
                                                        iItemCount = iItemCount + nLine;
                                                        oTransLine = null;
                                                        oTransLine = oTransaction.Lines[nLine];

                                                        #region Service Line
                                                        //******* SUBSCRIBER SERVICE LINE *************************************************************
                                                        //TODO: Get the data table for service info to add fields of service in EDI file.
                                                        //2400 SERVICE LINE
                                                        sInstance = iItemCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                        //LX SERVICE LINE COUNTER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
                                                        oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

                                                        //SV1 PROFESSIONAL SERVICE
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
                                                        oSegment.set_DataElementValue(1, 1, "HC");

                                                        //Check the Crosswalk
                                                        if (oTransLine.CPTCode.ToString().Trim() == oTransLine.CrosswalkCPTCode.ToString().Trim() || oTransLine.CrosswalkCPTCode.ToString().Trim() == "" || oTransLine.CrosswalkCPTCode == null)
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", "").Replace("*", "").Replace("~", "").Replace(":", ""));//"ServiceID"
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CrosswalkCPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        }

                                                        if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Modifier 1
                                                        }
                                                        if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                            {
                                                                oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
                                                            }
                                                        }
                                                        if (oTransLine.Mod3Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 5, oTransLine.Mod3Code.ToString());//Modifier 1
                                                        }
                                                        if (oTransLine.Mod4Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 6, oTransLine.Mod4Code.ToString());//Modifier 1
                                                        }
                                                        if (FormatString(Convert.ToString(oTransLine.PrescriptionDesc)) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 7, FormatString(Convert.ToString(oTransLine.PrescriptionDesc).Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "")));
                                                        }

                                                        string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

                                                        if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
                                                        }
                                                        else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
                                                        }
                                                        oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
                                                        if (oTransLine.AnesthesiaUnit > 0)
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "MJ");//MJ stands for minutes
                                                            oSegment.set_DataElementValue(4, 0, FormatUnit(oTransLine.AnesthesiaUnit.ToString()));//Unit/Quantity
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
                                                            oSegment.set_DataElementValue(4, 0, FormatUnit(oTransLine.Unit.ToString()));//Unit/Quantity                                                  
                                                        }

                                                        #region " Dx Pointer Code changes for 5061 "

                                                        //// solving Problem# - 231 
                                                        //// show the Dx Pointer in sequence as they are enter.
                                                        GetDxPointers_EDI5010(oSegment, oTransaction, dtDx, nLine);
                                                        // end

                                                        #endregion " Dx Pointer Code changes for 5061 "

                                                        if (Convert.ToBoolean(oTransLine.EMG) == true)
                                                        {
                                                            oSegment.set_DataElementValue(9, 0, "Y");
                                                        }


                                                        if (_bBillEPSDTorFamilyPlanning == true && _bEDPDTSV11 == true && oTransLine.ServiceResultofScreening == true)
                                                        {
                                                            oSegment.set_DataElementValue(11, 0, "Y");
                                                        }

                                                        if (_bBillEPSDTorFamilyPlanning == true && _bEDPDTSV11 == true && oTransLine.FamilyPlanningIndicator == true)
                                                        {
                                                            oSegment.set_DataElementValue(12, 0, "Y");
                                                        }
                                                        //DTP DATE - SERVICE DATE(S)
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "472");
                                                        if (oTransLine.DateServiceTill != null)
                                                        {
                                                            if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) == Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString()))
                                                                || Convert.ToString(oTransLine.DateServiceTill) == "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"                                                             
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "RD8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) + "-" + Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

                                                            }
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
                                                        }

                                                        #endregion

                                                        #region " LINE ITEM CONTROL NUMBER "

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "6R"); //Provider Control Number
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].TransactionDetailID.ToString()); //Line Item Control Number

                                                        #endregion

                                                        #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
                                                        if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "" && oTransaction.Lines[nLine].IsLabCPT == true)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//
                                                        }
                                                        #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "

                                                        #region " Line Notes"
                                                        //Add the Service Line Notes
                                                        _Noteindex = -1;
                                                        for (int _NoteCount = 0; _NoteCount < oTransaction.Lines[nLine].LineNotes.Count; _NoteCount++)
                                                        {
                                                            if ((EOBPaymentSubType)oTransaction.Lines[nLine].LineNotes[_NoteCount].BillingNoteType == EOBPaymentSubType.Charges_BillingNote)
                                                            {
                                                                _Noteindex = _NoteCount;
                                                            }
                                                        }
                                                        if (_Noteindex >= 0)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD"); //Note Reference Code
                                                            //Bug #83519: 00000922: Application throwing error while edi generation
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].LineNotes[_Noteindex].NoteDescription.ToString().Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "").Trim());//Description                                                            
                                                        }
                                                        #endregion

                                                        #region " NDC Code Loop - 2410 "

                                                        if (oTransLine.NDCCode != null && oTransLine.NDCCode.Trim() != "")
                                                        {
                                                            //Start - Loop 2410 NDC Code implementation
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN"));
                                                            oSegment.set_DataElementValue(2, 0, oTransLine.NDCCodeQualifier.Trim()); //LIN - Qualifier
                                                            oSegment.set_DataElementValue(3, 0, oTransLine.NDCCode.Trim());//LIN - NDC Code 11 digit
                                                        }
                                                        if (oTransLine.NDCUnit != null && oTransLine.NDCUnitCode != null && oTransLine.NDCUnit.Trim() != "" && oTransLine.NDCUnitCode.Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\CTP"));
                                                            oSegment.set_DataElementValue(4, 0, oTransLine.NDCUnit); //Quantity
                                                            oSegment.set_DataElementValue(5, 1, oTransLine.NDCUnitCode); //Unit or Basis of Measurement                                                       
                                                        }
                                                        //Prescription number
                                                        if (FormatString(oTransLine.Prescription) != null && FormatString(oTransLine.Prescription.Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "XZ");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(oTransLine.Prescription.Trim()));
                                                        }

                                                        #endregion " NDC Code Loop - 2410 "


                                                        #region "Ordering Provider Loop-2420"

                                                        if ((PrimaryOrderingProviderID != PrimaryRenderingProviderID) || (PrimaryOrderingProviderID == PrimaryRenderingProviderID && _bincludeorderingprovider == true))
                                                        {
                                                            if (oTransaction.providerQualifier.Trim() == "DK")
                                                            {
                                                                if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                                {

                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\NM1"));
                                                                    oSegment.set_DataElementValue(1, 0, "DK");
                                                                    oSegment.set_DataElementValue(2, 0, "1");
                                                                    if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"]).Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString().Trim())); //"ReferringLastname"
                                                                    }
                                                                    if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"]).Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString().Trim()));//"ReferringFirstname"
                                                                    }
                                                                    if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"]).Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(5, 0, dtRefProvider.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                    }

                                                                    if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(8, 0, "XX");
                                                                        oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()));//"NPI"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        #endregion "Ordering Provider Loop"

                                                    }
                                                }
                                                #endregion
                                                else
                                                {
                                                    MessageBox.Show("For ClaimNo:" + oTransaction.ClaimNo.ToString() + "  " + _PayerResponsibilityName + " subscriber relationship is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                }
                                finally
                                {
                                    if (dsMaster != null)
                                    {
                                        dsMaster.Dispose();
                                        dsMaster = null;
                                    }
                                    if (oTransaction != null)
                                    {
                                        oTransaction.Dispose();
                                        oTransaction = null;
                                    }
                                }
                            }

                            #region " Save EDI File "

                            sPath = "";
                            sPath = gloSettings.FolderSettings.AppTempFolderPath + "837 EDI\\";
                            if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }
                            sEdiFile = GetEDIFileName(sPath, _BatchName);
                            oEdiDoc.Save(sEdiFile);
                            System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
                            string strData;
                            strData = oReader.ReadToEnd();
                            oReader.Close();
                            oReader.Dispose();
                            oReader = null;
                            System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
                            if (_bIsCaptionize)
                            {
                                oWriter.Write(strData.ToUpper());
                            }
                            else
                            {
                                oWriter.Write(strData);
                            }
                            oWriter.Close();
                            oWriter.Dispose();
                            oWriter = null;
                            _result = sEdiFile;

                            #endregion " Save EDI File "

                            #region " Update Claim Manager Table "
                            Int64 _date = 0;
                            Int64 _time = 0;
                            _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                            _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
                            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
                            //Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionMasterID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
                            ogloClaimManager.SetClaimManagerTVP(_nBatchID, thisTransaction.TransactionMasterID, thisTransaction.ClaimNo, thisTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID, odsEDIClaimDetail);
                            ogloClaimManager.Dispose();
                            ogloClaimManager = null;
                            #endregion

                            //DESTROYS OBJECTS
                            oSegment.Dispose();
                            oSegment = null;
                            oTransactionset.Dispose();
                            oTransactionset = null;
                            oGroup.Dispose();
                            oGroup = null;
                            oInterchange.Dispose();
                            oInterchange = null;
                            if (thisTransaction != null)
                            {
                                thisTransaction.Dispose();
                                thisTransaction = null;
                            }
                        }
                    }
                }
            }
            catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
            {
                string _strEx = "";
                ediException oException = null;
                oException = (ediException)Rex.WrappedException;
                _strEx = oException.get_Description();
                gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
                _result = "";
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                _result = "";
            }
            finally
            {
                if (dsHeader != null) { dsHeader.Dispose(); dsHeader = null; }
                if (dsMaster != null) { dsMaster.Dispose(); dsMaster = null; }

                if (oEdiDoc != null) { oEdiDoc.Dispose(); oEdiDoc = null; }
                if (oInterchange != null) { oInterchange.Dispose(); oInterchange = null; }
                if (oGroup != null) { oGroup.Dispose(); oGroup = null; }
                if (oTransactionset != null) { oTransactionset.Dispose(); oTransactionset = null; }
                if (oSegment != null) { oSegment.Dispose(); oSegment = null; }
                if (oSchema != null) { oSchema.Dispose(); oSchema = null; }
                if (oSchemas != null) { oSchemas.Dispose(); oSchemas = null; }
                //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
            //    if (dtClearingHouseID != null) { dtClearingHouseID.Dispose(); dtClearingHouseID = null; }
                //if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                //if (ogloBilling != null) { ogloBilling.Dispose(); ogloBilling = null; }
                //if (oTransaction != null) { oTransaction.Dispose(); oTransaction = null; }
            }

            #endregion " Generate EDI "


            return _result;

        }

        //// solving Problem# - 231 
        //// show the Dx Pointer in sequence as they are enter.
        private static void GetDxPointers_EDI5010(ediDataSegment oSegment, TransactionEDI oTransaction, DataTable dtDx, int nLine)
        {
            if (dtDx != null && dtDx.Rows.Count > 0)
            {

                int _CompTerminatorPos = 0;
                int _dxIndex = 0;
                string _FindString = "";

                if (!string.IsNullOrEmpty(oTransaction.Lines[nLine].Dx1Code))
                {

                    
                    _CompTerminatorPos = _CompTerminatorPos + 1;
                    _FindString = "DX='" + oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", "") + "'";
                    DataRow[] dr = dtDx.Select(_FindString);
                    _dxIndex = dtDx.Rows.IndexOf(dr[0]);
                    
                    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(_dxIndex + 1));
                }
                if (!string.IsNullOrEmpty(oTransaction.Lines[nLine].Dx2Code))
                {

                    _CompTerminatorPos = _CompTerminatorPos + 1;
                    _FindString = "DX='" + oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", "") + "'";
                    DataRow []dr =  dtDx.Select(_FindString);
                    _dxIndex = dtDx.Rows.IndexOf(dr[0]);

                    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(_dxIndex + 1));
                }
                if (!string.IsNullOrEmpty(oTransaction.Lines[nLine].Dx3Code))
                {

                    _CompTerminatorPos = _CompTerminatorPos + 1;
                    _FindString = "DX='" + oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", "") + "'";
                    DataRow[] dr = dtDx.Select(_FindString);
                    _dxIndex = dtDx.Rows.IndexOf(dr[0]);

                    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(_dxIndex + 1));
                }
                if (!string.IsNullOrEmpty(oTransaction.Lines[nLine].Dx4Code))
                {

                    _CompTerminatorPos = _CompTerminatorPos + 1;
                    _FindString = "DX='" + oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", "") + "'";
                     DataRow[] dr = dtDx.Select(_FindString);
                    _dxIndex = dtDx.Rows.IndexOf(dr[0]);

                    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(_dxIndex + 1));
                }
                // end

                //if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", "")
                //    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", "")
                //    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", "")
                //    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
                //{
                //    _CompTerminatorPos = _CompTerminatorPos + 1;
                //    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(DxIndex + 1));
                //}
                //}
            }
        }
        // end

        public string EDI837GenerationForSecondary_New(ArrayList SelectedTransactions, string _BatchName, bool _IsUndo, Int64 _ContactID, dsEDIClaimdetails odsEDIClaimDetail, Int64 _nBatchID)
        {

            DataSet dsMaster = null;
            DataSet dsHeader = null;

            string _result = string.Empty;
            string InterchangeHeader = string.Empty;
            string FunctionalGroupHeader = string.Empty;
            string TransactionSetHeader = string.Empty;
            string _ClaimStatus = "1";
            Int64 _PrimaryInsuranceId = 0;
            Int64 _PrimaryContactID = 0;
            string _TypeOfData = "T";
            string sEdiFile, sPath;
            ediDocument oEdiDoc = null;
            ediSchema oSchema = null;
            ediSchemas oSchemas = null;
            ediInterchange oInterchange = null;
            ediGroup oGroup = null;
            ediTransactionSet oTransactionset = null;
            ediDataSegment oSegment = null;
            string sSEFFile = string.Empty;
            bool _IsSEFPresent = true;


            #region " Generate Secondary EDI "
            string sInstance = "";
          //  gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
         //   gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
        
            try
            {

               

                #region "Load EDI"


                // sPath = AppDomain.CurrentDomain.BaseDirectory;
                sSEFFile = "837_X098A1.SEF";

                oEdiDoc = new ediDocument();

                // Change the cursor type from dynamic to forward to improve speed performance
                oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;

                // Disable the internal standard reference library to be memory efficient 
                oSchemas = oEdiDoc.GetSchemas();
                oSchemas.EnableStandardReference = false;
                // Load the SEF file
                oSchema = oEdiDoc.ImportSchema(sSEFPath + sSEFFile, 0);

                if (File.Exists(sSEFPath + sSEFFile) == false)
                {
                    MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _IsSEFPresent = false;
                    return "";
                }
                oEdiDoc.SegmentTerminator = "~\r\n";
                oEdiDoc.ElementTerminator = "*";
                oEdiDoc.CompositeTerminator = ":";

                #endregion

                if (_IsSEFPresent == true)
                {

                    #region "Header Data - Dataset define in table"

                    dsHeader = GetHeader_EDI_5010(_ContactID, _ClinicID, Convert.ToInt64(SelectedTransactions[SelectedTransactions.Count - 1]), false);
                    if (dsHeader == null)
                    {
                        return "";
                    }
                    if (dsHeader.Tables == null)
                    {
                        return "";
                    }

                    DataTable dtClearingHouse = dsHeader.Tables["ClearingHouseData"];
                    DataTable dtSubmitter = dsHeader.Tables["SubmitterData"];

                    #endregion


                    if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
                    {
                        MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return "";
                    }

                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                            if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                            {
                                MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return "";
                            }
                        }
                    }

                    #region " Interchange Segment "
                    //Create the interchange segment
                    ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

                    if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
                    {
                        _TypeOfData = "T";
                    }
                    else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
                    {
                        _TypeOfData = "P";
                    }

                    oSegment.set_DataElementValue(1, 0, "00");
                    oSegment.set_DataElementValue(3, 0, "00");
                    oSegment.set_DataElementValue(5, 0, "ZZ");
                    oSegment.set_DataElementValue(6, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"])));//_SenderID.Trim());//"1234545");//
                    oSegment.set_DataElementValue(7, 0, "ZZ");
                    oSegment.set_DataElementValue(8, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"])));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
                    string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
                    oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
                    string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time));
                    oSegment.set_DataElementValue(11, 0, "U");
                    oSegment.set_DataElementValue(12, 0, "00401");
                    InterchangeHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
                    oSegment.set_DataElementValue(14, 0, "0");
                    oSegment.set_DataElementValue(15, 0, _TypeOfData);
                    oSegment.set_DataElementValue(16, 0, ":");

                    #endregion " Interchange Segment "

                    #region " Functional Group "

                    //Create the functional group segment
                    ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X098A1"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
                    oSegment.set_DataElementValue(1, 0, "HC");
                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"])));////_SenderName);
                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"])));//// _ReceiverCode.Trim());//"ClarEDI");
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
                    string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim());
                    FunctionalGroupHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
                    oSegment.set_DataElementValue(7, 0, "X");
                    oSegment.set_DataElementValue(8, 0, "004010X098A1");

                    #endregion " Functional Group "

                    #region ST - TRANSACTION SET HEADER

                    ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
                    TransactionSetHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

                    #endregion ST - TRANSACTION SET HEADER

                    #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    //Beginning Segment 
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
                    oSegment.set_DataElementValue(1, 0, "0019"); //Hierarchical Structure Code
                    oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
                    oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));//Date of claim
                    string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim()); //"1230");
                    oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
                    #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    #region REF - TRANSMISSION TYPE IDENTIFICATION

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
                    oSegment.set_DataElementValue(1, 0, "87");
                    oSegment.set_DataElementValue(2, 0, "004010X098A1");//"ReferenceID"

                    #endregion REF - TRANSMISSION TYPE IDENTIFICATION

                    #region NM1 - SUBMITTER


                    //1000A SUBMITTER
                    //NM1 SUBMITTER

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "41");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"])));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
                    if (dtClearingHouse != null && FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"])) != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"])));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.
                    }

                    //PER SUBMITTER EDI CONTACT INFORMATION
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
                    oSegment.set_DataElementValue(1, 0, "IC");
                    if (FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"])) != "")
                    {
                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"])));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
                    }
                    else
                    {
                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"])));
                    }

                    oSegment.set_DataElementValue(3, 0, "TE");
                    if (dtSubmitter != null && Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                    {
                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("(", "").Replace(")", "").Replace("-", "").Replace("_", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone
                    }

                    #endregion "SUBMITTER"

                    //1000B
                    #region "RECEIVER NAME "

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "40");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"])));//"GatewayEDI");//clearing house or contractor or carrier or FI name
                    if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]) != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.
                    }

                    #endregion NM1 - RECEIVER NAME

                    nHlCount = 0;

                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                            TransactionEDI thisTransaction = new TransactionEDI();

                            for (int i = 0; i < SelectedTransactions.Count; i++)
                            {
                               
                                TransactionLineEDI oTransLine = null;
                                TransactionEDI oTransaction =   GetChargesClaimDetails_EDI(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);

                                #region "Master EDI data - Dataset data set in data table "

                                dsMaster = null;
                                dsMaster = GetMaster_EDI_4010(oTransaction.ContactID, oTransaction.Lines[0].RenderingProviderId, oTransaction.ProviderID, oTransaction.ResponsibilityNo,
                                    oTransaction.TransactionMasterID, Convert.ToInt64(oTransaction.FacilityCode), _ClinicID, oTransaction.IsSameAsBillingProvider,
                                    oTransaction.TransactionID, oTransaction.ReferalProviderID_New, true);

                                DataTable dtPatientInsurances = dsMaster.Tables["PatientInsurance"];
                                DataTable dtFacility = dsMaster.Tables["Facility"];
                                DataTable dtBillingProvider = dsMaster.Tables["BillingProvider"];
                                DataTable dtPatientPaid = dsMaster.Tables["PatientPaid"];
                                DataTable dtDx = dsMaster.Tables["Diagnosis"];
                                DataTable dtRefProvider = dsMaster.Tables["RefferingProvider"];
                                DataTable dtRendProvider = dsMaster.Tables["RenderingProvider"];
                                DataTable dtMasterSetting = dsMaster.Tables["MasterSetting"];
                                DataTable _dtPayment = dsMaster.Tables["SVDData"];
                                DataTable dtAllcasdata = dsMaster.Tables["CASData"];

                                #endregion
                                try
                                {
                                    if (oTransaction != null)
                                    {
                                        thisTransaction.TransactionMasterID = oTransaction.TransactionMasterID;
                                        thisTransaction.ClaimNo = oTransaction.ClaimNo;
                                        thisTransaction.PatientID = oTransaction.PatientID;
                                        if (oTransaction.Lines.Count > 0)
                                        {
                                            //Split Claim No.
                                            string _ClaimNo = "";

                                            #region "Formatting the Claim Number"

                                            _ClaimNo = FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNumber));

                                            #endregion

                                            if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
                                            {
                                                if (oTransaction.PatientID <= 0)
                                                {
                                                    MessageBox.Show("Patient information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                                if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                                {
                                                    MessageBox.Show("Patient " + oTransaction.PatientFirstName + " " + oTransaction.PatientLastName + " Insurance details are missing for claim number " + _ClaimNo + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                            }

                                            for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
                                            {
                                                //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

                                                nHlCount = nHlCount + 1;
                                                nHlProvParent = nHlCount;
                                                //2000A BILLING/PAY-TO PROVIDER HL LOOP
                                                //HL-BILLING PROVIDER
                                                string _PayerResponsibilityName = "";
                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                oSegment.set_DataElementValue(3, 0, "20");
                                                oSegment.set_DataElementValue(4, 0, "1");


                                                #region Billing Provider


                                                //2010AA BILLING PROVIDER
                                                //NM1 BILLING PROVIDER NAME
                                                if (dtBillingProvider != null && dtBillingProvider.Rows.Count > 0)
                                                {

                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "85");
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["EntityType"])));
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])));//Billing provider name
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])));
                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])));

                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])));
                                                    }

                                                    //N3 BILLING PROVIDER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])));//Provider Address

                                                    //N4 BILLING PROVIDER LOCATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])));////Provider City
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["State"])));//Provider state

                                                    //oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//Provider ZIP
                                                    oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["ZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["AreaCode"]))));//Provider ZIP

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])));
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])));
                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])));
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])));
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }



                                                #endregion

                                                //'******************************************************************************************************
                                                //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
                                                //'******************************************************************************************************
                                                #region Subscriber
                                                if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                {
                                                    string _strRelation = "";
                                                    string _strInsuranceType = "";
                                                    _strRelation = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]));
                                                    _strInsuranceType = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]));


                                                    #region Subscriber HL Loop - 2000B

                                                    nHlCount = nHlCount + 1;
                                                    nHlSubscriberParent = nHlCount;

                                                    //2000B SUBSCRIBER HL LOOP
                                                    //HL-SUBSCRIBER
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                    oSegment.set_DataElementValue(2, 0, FormatString(nHlProvParent.ToString()));
                                                    oSegment.set_DataElementValue(3, 0, "22");

                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "0");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "1");

                                                    }

                                                    //SBR SUBSCRIBER INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));

                                                    #region "Responsibility No"

                                                    if (oTransaction.ResponsibilityNo == 1)
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST);//"P");
                                                    }
                                                    else if (oTransaction.ResponsibilityNo == 2)
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, "S");//_SubscriberInsurancePST);//"P");
                                                    }
                                                    else if (oTransaction.ResponsibilityNo == 3)
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, "T");//_SubscriberInsurancePST);//"P");
                                                    }

                                                    #endregion

                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "18");//20091222                                                    
                                                    }

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]))); //Commercial Insurance company
                                                    }

                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludePlanname"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]))); //Commercial Insurance name
                                                    }
                                                    if (dtPatientInsurances.Rows[0]["InsuranceTypeCode"].ToString().ToUpper() == "MA" || dtPatientInsurances.Rows[0]["InsuranceTypeCode"].ToString().ToUpper() == "MB")
                                                    {
                                                        if (dtPatientInsurances.Rows[0]["sInsuranceFlag"].ToString().ToUpper().Trim() != "PRIMARY")
                                                        {

                                                            oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsTypeCodeMedicare"]))); //Insurance Type Code of the Medicare                                                       
                                                        }
                                                    }

                                                    //This is Claim filling Indicator code in EDI implementation guide.
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]))); //Commercial Insurance company
                                                    }

                                                    //2010BA SUBSCRIBER
                                                    //NM1 SUBSCRIBER NAME
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "IL");
                                                    oSegment.set_DataElementValue(2, 0, "1");
                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"])));//"SubscriberLastOrgName"
                                                    oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"])));//"SubscriberFirstname"


                                                    //For WorkerComp and AutoClaimNo.
                                                    if (FormatString(Convert.ToString(oTransaction.WorkersCompNo)) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "MI");
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(oTransaction.WorkersCompNo)));//"Insurance Id"
                                                    }
                                                    else if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "MI");
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"])));//"Insurance Id"
                                                    }

                                                    else
                                                    {
                                                        MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + "Insurance ID for subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        return "";
                                                    }

                                                    //N3 SUBSCRIBER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"])));//"SubscriberAddress"
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"])));//"SubscriberAddress"
                                                    }

                                                    //N4 SUBSCRIBER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"])));//"SubscriberCity"
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"])));//"SubscrberState"
                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"])).Replace("-", ""));//"SubscriberZip"

                                                    #endregion SubscriberHL Loop - 2000B

                                                    string _SubscriberGender = "";
                                                    if (_strRelation == "18")
                                                    {
                                                        //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"])) == "" || FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"])) == "" || FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"])).Replace("-", "") == "")
                                                        {
                                                            MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + " State or City or ZipCode for Subscriber is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                    }
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"])) != "" && FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                        oSegment.set_DataElementValue(1, 0, "D8");

                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"

                                                        _SubscriberGender = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]));
                                                        if (FormatString(_SubscriberGender).ToUpper() == "OTHER")
                                                        {
                                                            _SubscriberGender = "U";
                                                        }
                                                        oSegment.set_DataElementValue(3, 0, FormatString(_SubscriberGender).Substring(0, 1).ToUpper());//"SubscriberGender"
                                                    }
                                                    else
                                                    {
                                                        if (_strRelation == "18")
                                                        {
                                                            MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                    }

                                                    #region Payer Information Loop 2010BB
                                                    //2010BB SUBSCRIBER/PAYER
                                                    //NM1 PAYER NAME
                                                    string _ModifiedPayerName = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]));
                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"])).Length > 35)
                                                    {
                                                        _ModifiedPayerName = "";
                                                        _ModifiedPayerName = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"])).Substring(0, 34);

                                                    }
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "PR");
                                                    oSegment.set_DataElementValue(2, 0, "2");
                                                    oSegment.set_DataElementValue(3, 0, FormatString(_ModifiedPayerName));//"PayerLastOrgName"
                                                    if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"])).Trim() != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"])).Trim());//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
                                                    }

                                                    string str = FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"])).Trim();
                                                    ////////N3 PAYER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"])));//"InsuranceAddress"

                                                    ////////N4 PAYER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"])));//"InsuranceCity"
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"])));//"InsuranceState"
                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"])).Replace("-", ""));//"InsuranceZip"
                                                    #endregion

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[0]["sClaimOfficeNumber"] != null)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "FY");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"]).Trim()));
                                                    }


                                                    if (_strRelation != "18")
                                                    {
                                                        nHlCount = nHlCount + 1;
                                                        //2000B DEPENDENT HL LOOP
                                                        //HL-DEPENDENT
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                        oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
                                                        oSegment.set_DataElementValue(3, 0, "23");
                                                        oSegment.set_DataElementValue(4, 0, "0");

                                                        //PAT - PATIENT/DEPENDENT INFORMATION

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]))); //01 - Spouse 19 - Child

                                                        #region " Patient Info"

                                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "QC");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.PatientLastName));//Patient Last Name
                                                        oSegment.set_DataElementValue(4, 0, FormatString(oTransaction.PatientFirstName));//Patient First Name

                                                        //N3 - ADDRESS INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(oTransaction.PatientAddress1));//"Address"

                                                        //N4 - GEOGRAPHIC LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(oTransaction.PatientCity));//"City"
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.PatientState));//"State"
                                                        oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.PatientZip).Replace("-", ""));//"Zip"

                                                        //DMG - DEMOGRAPHIC INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                        oSegment.set_DataElementValue(1, 0, "D8");
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.PatientDOB.ToShortDateString())));
                                                        if (FormatString(oTransaction.PatientGender) == "" || FormatString(oTransaction.PatientGender.Trim()).ToUpper() == "OTHER")
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"                                                                   
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.PatientGender));//"SubscriberGender"
                                                        }

                                                        #endregion " Patient Info"

                                                    }
                                                    //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
                                                    //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
                                                    string _FirstPOS = "";
                                                    string _ClaimTotal = "";
                                                    iItemCount = 0;
                                                    decimal _claimAmount = 0;
                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        _claimAmount = _claimAmount + oTransaction.Lines[nLine].Total;
                                                        _FirstPOS = oTransaction.Lines[0].POSCode;
                                                    }

                                                    _ClaimTotal = _claimAmount.ToString("#0.00");
                                                    if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
                                                    }
                                                    else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
                                                    }

                                                    #region Claim Details - Loop 2300
                                                    //2300 CLAIM
                                                    //CLM CLAIM LEVEL INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));


                                                    oSegment.set_DataElementValue(1, 0, _ClaimNo); //Patient Account no         

                                                    oSegment.set_DataElementValue(2, 0, FormatString(_ClaimTotal));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount
                                                    oSegment.set_DataElementValue(5, 1, FormatString(_FirstPOS)); //21 - Inpatient Hospital

                                                    if (oTransaction.IsRebill == true || oTransaction.IsReplacementClaim == true)
                                                    {
                                                        _ClaimStatus = "7";
                                                    }
                                                    else
                                                    {
                                                        _ClaimStatus = "1";
                                                    }
                                                    oSegment.set_DataElementValue(5, 3, _ClaimStatus);
                                                    oSegment.set_DataElementValue(6, 0, "Y");

                                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                    {
                                                        _IsAccessAssignment = Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAccessAssignment"]);
                                                    }
                                                    if (_IsAccessAssignment == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "A");
                                                    }
                                                    else if (_IsAccessAssignment == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == false)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "P");
                                                    }
                                                    else if (_IsAccessAssignment == false && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == false)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "P");
                                                    }
                                                    else if (_IsAccessAssignment == false && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "C");
                                                    }
                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "Y");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "N");
                                                    }

                                                    oSegment.set_DataElementValue(9, 0, "Y");
                                                    oSegment.set_DataElementValue(10, 0, "C");
                                                    if (oTransaction.AutoClaim == true)
                                                    {
                                                        if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "AA");
                                                            oSegment.set_DataElementValue(11, 4, FormatString(oTransaction.State));
                                                        }
                                                    }
                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "EM");
                                                        }
                                                    }
                                                    if (oTransaction.OtherAccident == true)
                                                    {
                                                        if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "OA");
                                                        }
                                                    }

                                                    if (oTransaction.DelayReasonCodeID != "")
                                                    {
                                                        oSegment.set_DataElementValue(20, 0, oTransaction.DelayReasonCodeID);
                                                    }

                                                    string OnsetDate = "";
                                                    if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "" || oTransaction.OtherAccidentDate.ToString() != "")
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.InjuryDate);
                                                            ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "439");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);//Claim Date
                                                        }
                                                        else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
                                                            ////DTP DATE OF CURRENT INJURY
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "431");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);   //Claim Date
                                                        }
                                                        else if (oTransaction.AutoClaim == true)
                                                        {
                                                            if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.AccidentDate);
                                                                ////DTP DATE OF ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);//Claim Date
                                                            }
                                                        }
                                                        else if (oTransaction.OtherAccident == true)
                                                        {
                                                            if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.OtherAccidentDate);
                                                                ////DTP DATE OF Other ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                            }
                                                        }
                                                    }
                                                    else if (Convert.ToString(oTransaction.IllnessDate) != "" && oTransaction.IllnessDate > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "438");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(oTransaction.IllnessDate).Trim().Replace("*", ""));
                                                    }
                                                    else if (oTransaction.OtherAccident == true)
                                                    {
                                                        if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.OtherAccidentDate);
                                                            ////DTP DATE OF Other ACCIDENT 
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "439");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                        }
                                                    }


                                                    if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
                                                    {
                                                        //DTP DATE OF Hospitalization (Admission) 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "435");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                    }

                                                    if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
                                                    {
                                                        //DTP DATE OF Discharge 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "096");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                        //
                                                    }
                                                    // }

                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period last day worked)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "297");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                            //
                                                        }

                                                        if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period return to work)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "296");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                            //
                                                        }
                                                    }

                                                    #region Patient Paid Amount.

                                                    string _AmountPaid = String.Empty;
                                                    if (dtPatientPaid != null && dtPatientPaid.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]).Trim() != "")
                                                            _AmountPaid = FormatAmount(Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]));
                                                    }
                                                    #endregion

                                                    if (_AmountPaid.Trim() != string.Empty && _AmountPaid.Trim() != "0.00" && _AmountPaid.Trim() != "0.0" && _AmountPaid.Trim() != "0")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
                                                        oSegment.set_DataElementValue(1, 0, "F5");
                                                        oSegment.set_DataElementValue(2, 0, _AmountPaid);
                                                    }

                                                    #region Service Authorization exception code

                                                    if (oTransaction.ServiceAuthExceCode.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "4N");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.ServiceAuthExceCode);
                                                    }

                                                    #endregion

                                                    #region MammogramCertNumber
                                                    if (oTransaction.sMammogramCertNumber.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "EW");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sMammogramCertNumber);
                                                    }

                                                    #endregion 

                                                    if (FormatString(oTransaction.PriorAuthorizationNo) != "")
                                                    {
                                                        //REF CLEARING HOUSE CLAIM NUMBER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "G1");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.PriorAuthorizationNo)); //Claim No
                                                    }

                                                    #region IDE Number
                                                    if (oTransaction.sIDENo.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "P4");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sIDENo);
                                                    }
                                                    #endregion 

                                                    #endregion

                                                    #region Claim Remittance Reference #

                                                    if (FormatString((Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"]))) != "" && _ClaimStatus == "7")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "F8");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"])));
                                                    }

                                                    #endregion

                                                    #region "BOX19 Note"

                                                    if (oTransaction.Box19NoteDescription != "")
                                                    {
                                                        if (FormatString(Convert.ToString(oTransaction.Box19NoteDescription).Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(oTransaction.Box19NoteDescription).Trim())); //Claim No
                                                        }
                                                    }

                                                    #endregion

                                                    #region HI - Diagnosis


                                                    //HI HEALTH CARE DIAGNOSIS CODES                                                                                             


                                                    string code_no = "";
                                                    if (dtDx != null && dtDx.Rows.Count > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

                                                        for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                        {
                                                            if (DxIndex == 0)
                                                            {
                                                                if (FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) + "'";
                                                                    }
                                                                    oSegment.set_DataElementValue(1, 1, "BK");
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "")));
                                                                }
                                                            }
                                                            if (DxIndex > 0)
                                                            {
                                                                if (FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])) != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])).Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"])).Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, FormatString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "")).Replace("~", "").Replace(":", ""));//
                                                                }
                                                            }
                                                        }

                                                        if (code_no != "" && _IsUndo != true)
                                                        {
                                                            code_no = Convert.ToString(dtMasterSetting.Rows[0]["InvalidICD9"]);
                                                        }
                                                        else
                                                        {
                                                            code_no = "";
                                                        }
                                                    }
                                                    if (code_no != "")
                                                    {
                                                        string _message;

                                                        _message = "ICD9 is Invalid." + Environment.NewLine + "For Claim No :" + _ClaimNo + Environment.NewLine + "Code : " + code_no + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "                                                            

                                                        if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                                        {
                                                            return "";
                                                        }
                                                    }


                                                    #endregion

                                                    #region Referring Provider - 2310A

                                                    if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true)
                                                    {

                                                        if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                        {
                                                            //2310B Referring PROVIDER
                                                            //NM1 Referring PROVIDER NAME
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "DN");
                                                            oSegment.set_DataElementValue(2, 0, "1");
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString())); //"ReferringLastname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString()));//"ReferringFirstname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(5, 0, FormatString(dtRefProvider.Rows[0]["sMiddleName"].ToString()));
                                                            }

                                                            if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "XX");
                                                                oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString()));//"NPI"
                                                            }

                                                            //PRV REFERRING PROVIDER INFORMATION                                                        
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sTaxonomy"])) != "")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
                                                                oSegment.set_DataElementValue(1, 0, "RF");
                                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
                                                                oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sTaxonomy"].ToString()));//Reference Identification
                                                            }

                                                            // REF
                                                            if (Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim() != "" && Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim() != "")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim());
                                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim());
                                                            }
                                                        }
                                                    }


                                                    #endregion Referring Provider

                                                    #region Rendering Provider - 2310B

                                                    //2310B RENDERING PROVIDER
                                                    //NM1 RENDERING PROVIDER NAME
                                                    if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "82");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["sLastName"])));//Billing provider name
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["sFirstName"])));
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["sMiddleName"])));


                                                        if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "XX");
                                                            oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                        }
                                                        if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])) != "" && FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])) != "" && FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])) != "" && Convert.ToInt64(dtRendProvider.Rows[0]["QualifierMstID"]) > 1)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])));
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                        }

                                                        //PRV RENDERING PROVIDER INFORMATION
                                                        if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"])) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
                                                            oSegment.set_DataElementValue(1, 0, "PE");
                                                            oSegment.set_DataElementValue(2, 0, "ZZ");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"])));//Reference Identification
                                                        }
                                                    }

                                                    #endregion

                                                    #region Facility - 2310D

                                                    //2310D SERVICE LOCATION
                                                    //NM1 SERVICE FACILITY LOCATION

                                                    if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bIsPOS"]) == true)
                                                    {
                                                        if (dtFacility != null && dtFacility.Rows.Count > 0)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "77");
                                                            oSegment.set_DataElementValue(2, 0, "2");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["LastName"])));//"FacilityName"

                                                            if (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"]));//NPI code
                                                                oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])));//NPI
                                                            }


                                                            //N3 SERVICE FACILITY ADDRESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["Address1"])));//"FacilityAddr"

                                                            //N4 SERVICE FACILITY CITY/STATE/ZIP
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["City"])));//"FacilityCity"
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["State"])));//"FacilityState"

                                                            //oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//"FacilityZip"
                                                            oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])), FormatString(Convert.ToString(dtFacility.Rows[0]["AreaCode"]))));//"FacilityZip"

                                                            //Facility Secondary Identification
                                                            if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bISOtherID"]) == true)
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\REF"));
                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]));//NPI code
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])));//NPI
                                                                }
                                                            }

                                                            if (FormatString(Convert.ToString(dtFacility.Rows[0]["City"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["State"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])) == "")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + " Facility Details(City/State/ZIP Code) is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    #region SET PRIMARY INSURANCE IDS

                                                    DataView _dv = dtPatientInsurances.Copy().DefaultView;

                                                    _dv.RowFilter = "(sInsuranceFlag)='Primary'";

                                                    DataTable _dtAllowed = _dv.ToTable();
                                                    if (_dtAllowed != null && _dtAllowed.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(_dtAllowed.Rows[0]["nInsuranceID"]) != "")
                                                        {
                                                            _PrimaryInsuranceId = Convert.ToInt64(_dtAllowed.Rows[0]["nInsuranceID"]);
                                                        }
                                                        if (Convert.ToString(_dtAllowed.Rows[0]["nContactID"]) != "")
                                                        {
                                                            _PrimaryContactID = Convert.ToInt64(_dtAllowed.Rows[0]["nContactID"]);
                                                        }

                                                    }
                                                    if (_dtAllowed != null)
                                                    {
                                                        _dtAllowed.Dispose();
                                                        _dtAllowed = null;
                                                    }
                                                    if (_dv != null)
                                                    {
                                                        _dv.Dispose();
                                                        _dv = null;
                                                    }
                                                    #endregion



                                                    //_dtPayment=GetAllPaymnet(oTransaction.TransactionMasterID).Copy();                                                
                                                    //dtAllcasdata = GetCasData(oTransaction.TransactionMasterID);

                                                    #region GET Claim Allowed Amount

                                                    string _ClaimAllowedAmount = getFilteredClaimAllowed(oTransaction.TransactionMasterID, _PrimaryInsuranceId, _PrimaryContactID, _dtPayment);
                                                    _ClaimAllowedAmount = FormatAmount(_ClaimAllowedAmount);

                                                    #endregion

                                                    for (int _Insrow = 1; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
                                                    {
                                                        #region Subscriber Secondary Insurance - Loop 2320

                                                        //LOOP - 2320                                               

                                                        #region SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
                                                        //1.Payer Resposibilty Sequence No.

                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"])) == "Primary")
                                                        {
                                                            _PayerResponsibilityName = "Primary";
                                                            oSegment.set_DataElementValue(1, 0, "P");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
                                                        }
                                                        else if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"])) == "Secondary")
                                                        {
                                                            _PayerResponsibilityName = "Secondary";
                                                            oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
                                                        }
                                                        else if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"])) == "Tertiary")
                                                        {
                                                            _PayerResponsibilityName = "Tertiary";
                                                            oSegment.set_DataElementValue(1, 0, "T");//_OtherInsurancePST.Trim().Replace("*","")); //T - Tertiary
                                                        }

                                                        //2.Individual Relationship code
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"])));//"18"); // Hard coded(Individual Relationship code) 18 - Self

                                                        //3.Refrence identification
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"])));//"22145");///Policy no

                                                        //4. Plan Name
                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIncludePlanname"]) == true)
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]))); //Commercial Insurance name
                                                        }

                                                        //5.Insurance Type Code  Implement the New Logic
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsTypeCodeDefault"]))); //Insurance Type code Default


                                                        //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

                                                        ////8.Employment Status Code(Not Used)
                                                        //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

                                                        //9.Claim Filing Indicator
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"])) != "")
                                                        {
                                                            oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]))); //Commercial Insurance company
                                                        }

                                                        #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                        #region AMT - Amount Payer Paid

                                                        string _PayercontactID = Convert.ToString(dtPatientInsurances.Rows[_Insrow]["nContactID"]);
                                                        string _PayerInsuranceID = Convert.ToString(dtPatientInsurances.Rows[_Insrow]["nInsuranceID"]);

                                                        string _amt = getFilteredPayerPaid(oTransaction.TransactionMasterID, oTransaction.TransactionID, _PayercontactID, _PayerInsuranceID, _dtPayment);
                                                        _amt = FormatAmount(_amt);
                                                        if (_amt != "")// && _amt != "0.00" && _amt!="0")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
                                                            oSegment.set_DataElementValue(1, 0, "D");
                                                            oSegment.set_DataElementValue(2, 0, _amt);
                                                        }


                                                        #endregion AMT - Amount

                                                        #region Claim Allowed Amount

                                                        if (_amt != "" && _ClaimAllowedAmount.Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
                                                            oSegment.set_DataElementValue(1, 0, "B6");
                                                            oSegment.set_DataElementValue(2, 0, _ClaimAllowedAmount);
                                                        }

                                                        #endregion

                                                        #region DMG  - Demographic


                                                        if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])) != "")
                                                        {
                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]) != "")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
                                                                oSegment.set_DataElementValue(1, 0, "D8");

                                                                oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"
                                                                if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]).ToUpper()) == "OTHER")
                                                                {
                                                                    oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"
                                                                }
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + " subscriber gender is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                        #endregion DMG  - Demographic

                                                        #region OI - Other Insurance

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
                                                        //Assignment of Benefit.
                                                        bool _bAssignmentofbenefit = false;
                                                        _bAssignmentofbenefit = Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bAssignmentofBenifit"]);
                                                        if (_bAssignmentofbenefit == true)
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "Y");
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "N");
                                                        }
                                                        oSegment.set_DataElementValue(4, 0, "C");

                                                        if (oTransaction.SOF == true)
                                                        {
                                                            oSegment.set_DataElementValue(6, 0, "Y");
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(6, 0, "N");
                                                        }


                                                        #endregion OI - Other Insurance

                                                        //2330A SUBSCRIBER
                                                        #region NM1 SUBSCRIBER NAME - 2330A

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "IL");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"])));//"SubscriberLastOrgName"
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"])));//"SubscriberFirstname"

                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"])) == "")
                                                        {
                                                            MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber Last name is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                        if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"])) != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "MI");
                                                            oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"])));//"SubscriberMemberID"
                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("For Claim No: " + _ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }

                                                        //N3 SUBSCRIBER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"])));//"SubscriberAddress"
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"])) != "")
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"])));//"SubscriberAddress"
                                                        }

                                                        //N4 SUBSCRIBER CITY
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"])));//"SubscriberCity"
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"])));//"SubscrberState"
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"])).Replace("-", ""));//"SubscriberZip"

                                                        #endregion NM1 SUBSCRIBER NAME

                                                        #region Payer Information - 2330B

                                                        //2330B SUBSCRIBER/PAYER
                                                        //NM1 PAYER NAME
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "PR");
                                                        oSegment.set_DataElementValue(2, 0, "2");


                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"])));//"PayerLastOrgName"                                                                                                      
                                                        if (dtPatientInsurances != null && FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"])) != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                            oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"])));//PayerID
                                                        }

                                                        #endregion Payer Information

                                                        #region "Claim Office Number"

                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"] != null)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "FY");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()));
                                                        }

                                                        #endregion

                                                        #endregion Subscriber Secondary Insurance
                                                    }//End for loop of Patient Insurance 
                                                    //}//end of IF loop for POS
                                                    int _Noteindex;
                                                    bool _IncludeOTAF = Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIsOTAFAmount"]);
                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        iItemCount = 1;
                                                        iItemCount = iItemCount + nLine;
                                                        oTransLine = oTransaction.Lines[nLine];

                                                        #region Service Line
                                                        //******* SUBSCRIBER SERVICE LINE *************************************************************
                                                        //TODO: Get the datatable for service info to add fields of service in EDI file.
                                                        //2400 SERVICE LINE
                                                        sInstance = FormatString(iItemCount.ToString());
                                                        //LX SERVICE LINE COUNTER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
                                                        oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

                                                        //SV1 PROFESSIONAL SERVICE
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
                                                        oSegment.set_DataElementValue(1, 1, "HC");

                                                        //Check the Crosswalk
                                                        if (oTransLine.CPTCode.ToString().Trim() == oTransLine.CrosswalkCPTCode.ToString().Trim() || oTransLine.CrosswalkCPTCode.ToString().Trim() == "" || oTransLine.CrosswalkCPTCode == null)
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CrosswalkCPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        }

                                                        if (FormatString(oTransLine.Mod1Code.ToString()) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
                                                        }
                                                        if (FormatString(oTransLine.Mod2Code.ToString()) != "")
                                                        {
                                                            if (FormatString(oTransLine.Mod1Code.ToString()) == "")
                                                            {
                                                                oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
                                                            }
                                                        }
                                                        if (FormatString(oTransLine.Mod3Code.ToString()) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 5, oTransLine.Mod3Code.ToString());//Modifier 1
                                                        }
                                                        if (FormatString(oTransLine.Mod4Code.ToString()) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 6, oTransLine.Mod4Code.ToString());//Modifier 1
                                                        }
                                                        string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

                                                        if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
                                                        }
                                                        else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
                                                        }
                                                        oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"                                                   
                                                        oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
                                                        oSegment.set_DataElementValue(4, 0, FormatUnit(oTransLine.Unit.ToString()));//Unit/Quantity




                                                        #region " Dx Code Pointer changes 5061 "

                                                        //if (dtDx != null && dtDx.Rows.Count > 0)
                                                        //{


                                                        //    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                        //    {
                                                        //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~","").Replace(":","") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", "").Replace("~","").Replace(":",""))
                                                        //        {                                                            
                                                        //            oSegment.set_DataElementValue(7, 1, Convert.ToString(DxIndex + 1));
                                                        //        }
                                                        //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~","").Replace(":","") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", "").Replace("~","").Replace(":",""))
                                                        //        {                                                                 
                                                        //            oSegment.set_DataElementValue(7, 2, Convert.ToString(DxIndex + 1));
                                                        //        }
                                                        //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~","").Replace(":","") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", "").Replace("~","").Replace(":",""))
                                                        //        {                                                                    
                                                        //            oSegment.set_DataElementValue(7, 3, Convert.ToString(DxIndex + 1));
                                                        //        }
                                                        //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~","").Replace(":","") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", "").Replace("~","").Replace(":",""))
                                                        //        {                                                                 
                                                        //            oSegment.set_DataElementValue(7, 4, Convert.ToString(DxIndex + 1));
                                                        //        }
                                                        //    }
                                                        //}
                                                        if (dtDx != null && dtDx.Rows.Count > 0)
                                                        {
                                                            int _CompTerminatorPos = 0;
                                                            //  int _elementCounter = 0;

                                                            for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                            {

                                                                if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", "")
                                                                    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", "")
                                                                    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", "")
                                                                    || Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
                                                                {
                                                                    _CompTerminatorPos = _CompTerminatorPos + 1;
                                                                    oSegment.set_DataElementValue(7, _CompTerminatorPos, Convert.ToString(DxIndex + 1));
                                                                }
                                                            }
                                                        }

                                                        #endregion " Dx Code Pointer changes 5061 "

                                                        if (Convert.ToBoolean(oTransLine.EMG) == true)
                                                        {
                                                            oSegment.set_DataElementValue(9, 0, "Y");
                                                        }

                                                        //DTP DATE - SERVICE DATE(S)
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "472");

                                                        if (oTransLine.DateServiceTill != null)
                                                        {
                                                            if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) == Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString()))
                                                                || Convert.ToString(oTransLine.DateServiceTill) == "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"                                                             
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "RD8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) + "-" + Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

                                                            }
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
                                                        }



                                                        #endregion

                                                        #region OTAF Amount

                                                        string _amountallowed = String.Empty;

                                                        _amountallowed = getFilteredLineAllowed(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, _PrimaryInsuranceId, _PrimaryContactID, _dtPayment);
                                                        _amountallowed = FormatAmount(_amountallowed);
                                                        if (_amountallowed != "" && _IncludeOTAF == true)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\CN1"));
                                                            oSegment.set_DataElementValue(1, 0, "09");
                                                            oSegment.set_DataElementValue(2, 0, _amountallowed);
                                                        }

                                                        #endregion

                                                        #region " LINE ITEM CONTROL NUMBER "

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "6R"); //Provider Control Number
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].TransactionDetailID.ToString()); //Line Item Control Number

                                                        #endregion

                                                        #region " CLIA (Clinical Laboratory Improvement Amendment Number) "

                                                        if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "" && oTransaction.Lines[nLine].IsLabCPT == true)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
                                                        }

                                                        #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "

                                                        #region Allowed Amount(Approved Amount)

                                                        if (_amountallowed != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\AMT"));
                                                            oSegment.set_DataElementValue(1, 0, "AAE");
                                                            oSegment.set_DataElementValue(2, 0, _amountallowed);//
                                                        }

                                                        #endregion

                                                        #region " Line Notes"
                                                        //Service Line Notes
                                                        _Noteindex = -1;
                                                        for (int _NoteCount = 0; _NoteCount < oTransaction.Lines[nLine].LineNotes.Count; _NoteCount++)
                                                        {
                                                            if ((EOBPaymentSubType)oTransaction.Lines[nLine].LineNotes[_NoteCount].BillingNoteType == EOBPaymentSubType.Charges_BillingNote)
                                                            {
                                                                _Noteindex = _NoteCount;
                                                            }
                                                        }
                                                        if (_Noteindex >= 0)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD"); //Note Reference Code
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].LineNotes[_Noteindex].NoteDescription.ToString().Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "").Trim());//Description                                                            
                                                        }
                                                        #endregion

                                                        #region " NDC Code Loop - 2410 "

                                                        if (oTransLine.NDCCode != null && oTransLine.NDCCode.Trim() != "")
                                                        {
                                                            //Start - Loop 2410 NDC Code implementation
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN"));
                                                            oSegment.set_DataElementValue(2, 0, oTransLine.NDCCodeQualifier.Trim()); //LIN - Qualifier
                                                            oSegment.set_DataElementValue(3, 0, oTransLine.NDCCode.Trim());//LIN - NDC Code 11 digit
                                                        }
                                                        if (oTransLine.NDCUnit != null && oTransLine.NDCUnitCode != null && oTransLine.NDCUnit.Trim() != "" && oTransLine.NDCUnitCode.Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\CTP"));
                                                            if (oTransLine.NDCUnitPricing == "" || oTransLine.NDCUnitPricing == null || oTransLine.NDCUnitPricing == "0")
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, "0"); //Unit Price
                                                            }
                                                            else
                                                            {
                                                                //oSegment.set_DataElementValue(3, 0, oTransLine.NDCUnitPricing); //Unit Price
                                                                string _NDCUnitPricing = Convert.ToString(oTransLine.NDCUnitPricing);

                                                                if (_NDCUnitPricing.Substring(_NDCUnitPricing.Length - 2, 2) == "00")
                                                                {
                                                                    _NDCUnitPricing = _NDCUnitPricing.Substring(0, _NDCUnitPricing.Length - 3);
                                                                }
                                                                else if (_NDCUnitPricing.Substring(_NDCUnitPricing.Length - 1, 1) == "0")
                                                                {
                                                                    _NDCUnitPricing = _NDCUnitPricing.Substring(0, _NDCUnitPricing.Length - 1);
                                                                }
                                                                oSegment.set_DataElementValue(3, 0, _NDCUnitPricing); //Unit Price
                                                            }

                                                            oSegment.set_DataElementValue(4, 0, oTransLine.NDCUnit); //Quantity
                                                            oSegment.set_DataElementValue(5, 1, oTransLine.NDCUnitCode); //Unit or Basis of Measurement
                                                            //End - Loop 2410 NDC Code implementation
                                                        }
                                                        //Add Prescription Number 
                                                        if (FormatString(oTransLine.Prescription) != null && FormatString(oTransLine.Prescription.Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "XZ");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(oTransLine.Prescription.Trim()));
                                                        }



                                                        #endregion " NDC Code Loop - 2410 "

                                                        #region "SVD -LINE ADJUDICATION INFORMATION"

                                                        DataTable dtSVDdata = null;

                                                        dtSVDdata = getFilteredSVDLine(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, _dtPayment).Copy();


                                                        if (dtSVDdata != null && dtSVDdata.Rows.Count > 0)
                                                        {
                                                            for (int nSVD = 0; nSVD < dtSVDdata.Rows.Count; nSVD++)
                                                            {
                                                                if (Convert.ToString(dtPatientInsurances.Rows[0]["nInsuranceID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != Convert.ToString(dtSVDdata.Rows[nSVD]["InsuranceID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
                                                                {
                                                                    if (Convert.ToString(dtSVDdata.Rows[nSVD]["InsPaidAmount"]).Replace("*", "").Replace("~", "").Replace(":", "").Trim() != "")
                                                                    {
                                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD"));
                                                                        oSegment.set_DataElementValue(1, 0, dtSVDdata.Rows[nSVD]["PayerID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Other Payer identification code
                                                                        oSegment.set_DataElementValue(2, 0, FormatAmount(Convert.ToString(dtSVDdata.Rows[nSVD]["InsPaidAmount"])));//Service Line Paid Amount
                                                                        oSegment.set_DataElementValue(3, 1, "HC");//COMPOSITE MEDICAL PROCEDURE IDENTIFIER
                                                                        oSegment.set_DataElementValue(3, 2, dtSVDdata.Rows[nSVD]["CPTCode"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//CPT
                                                                        oSegment.set_DataElementValue(5, 0, FormatAmount(Convert.ToString(dtSVDdata.Rows[nSVD]["Unit"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")));//Quantity

                                                                        #region "CAS -LINE ADJUSTMENT"

                                                                        DataTable dtcasdata = null;
                                                                        dtcasdata = getFilteredCasData(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, Convert.ToInt64(dtSVDdata.Rows[nSVD]["ContactID"]), Convert.ToInt64(dtSVDdata.Rows[nSVD]["InsuranceID"]), dtAllcasdata);


                                                                        if (dtcasdata != null && dtcasdata.Rows.Count > 0)
                                                                        {


                                                                            string _payerId = "";
                                                                            string _grpCode = "";
                                                                            Int64 _contactId = 0;

                                                                            for (int rIndex = 0; rIndex < dtcasdata.Rows.Count; rIndex++)
                                                                            {
                                                                                _payerId = Convert.ToString(dtcasdata.Rows[rIndex]["PayerID"]);
                                                                                _contactId = Convert.ToInt64(dtcasdata.Rows[rIndex]["ContactID"]);//20100416

                                                                                //if (_payerId.Trim() != "")
                                                                                if (_contactId > 0)
                                                                                {
                                                                                    _grpCode = Convert.ToString(dtcasdata.Rows[rIndex]["GroupCode"]);

                                                                                    for (int dIndex = rIndex + 1; dIndex < dtcasdata.Rows.Count; dIndex++)
                                                                                    {
                                                                                        if (_contactId == Convert.ToInt64(dtcasdata.Rows[dIndex]["ContactID"])
                                                                                        && _grpCode == Convert.ToString(dtcasdata.Rows[dIndex]["GroupCode"]))
                                                                                        {
                                                                                            dtcasdata.Rows[dIndex]["InsuranceID"] = -1;
                                                                                            dtcasdata.Rows[dIndex]["ContactID"] = -1;
                                                                                            dtcasdata.Rows[dIndex]["InsuranceName"] = "";
                                                                                            dtcasdata.Rows[dIndex]["PayerID"] = "";
                                                                                            dtcasdata.Rows[dIndex]["GroupCode"] = "";
                                                                                            dtcasdata.AcceptChanges();
                                                                                        }
                                                                                    }
                                                                                }

                                                                            }
                                                                        }

                                                                        #region "Adding CAS"

                                                                        if (dtcasdata != null && dtcasdata.Rows.Count > 0)
                                                                        {
                                                                            for (int CASIndex = 0, ResonCodeIndex = 1; CASIndex < dtcasdata.Rows.Count; CASIndex++)
                                                                            {

                                                                                if (Convert.ToInt64(dtcasdata.Rows[CASIndex]["ContactID"]) != -1 &&
                                                                                    Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"]) != "")
                                                                                {
                                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\CAS"));
                                                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"])); //
                                                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["ReasonCode"]));

                                                                                    #region "Amount Formatting"

                                                                                    //FormatAmount(Convert.ToString(dtcasdata.Rows[CASIndex]["Amount"]));
                                                                                    string _ClmTotal = Convert.ToString(dtcasdata.Rows[CASIndex]["Amount"]).Trim();
                                                                                    _ClmTotal = FormatAmount(_ClmTotal);

                                                                                    #endregion

                                                                                    //if (_ClmTotal != String.Empty && _ClmTotal != "0" && _ClmTotal != "0.00")
                                                                                    if (_ClmTotal != "")
                                                                                    {
                                                                                        oSegment.set_DataElementValue(3, 0, _ClmTotal);
                                                                                        ResonCodeIndex = 5;
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    string _Total = Convert.ToString((dtcasdata.Rows[CASIndex]["Amount"]));
                                                                                    _Total = FormatAmount(_Total);

                                                                                    //if (_Total != String.Empty && _Total != "0" && _Total != "0.00")
                                                                                    if (_Total != "")
                                                                                    {
                                                                                        oSegment.set_DataElementValue(ResonCodeIndex, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["ReasonCode"]));

                                                                                        ResonCodeIndex += 1;
                                                                                        oSegment.set_DataElementValue(ResonCodeIndex, 0, _Total);
                                                                                        ResonCodeIndex += 2;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        if (dtcasdata != null)
                                                                        {
                                                                            dtcasdata.Dispose();
                                                                            dtcasdata = null;
                                                                        }
                                                                        #endregion



                                                                        #endregion

                                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\DTP"));
                                                                        oSegment.set_DataElementValue(1, 0, "573");
                                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                                        oSegment.set_DataElementValue(3, 0, dtSVDdata.Rows[nSVD]["ClaimPaidDate"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"ServiceDate"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (dtSVDdata != null)
                                                        {
                                                            dtSVDdata.Dispose();
                                                            dtSVDdata = null;
                                                        }
                                                        #endregion


                                                    }
                                                #endregion " Subscriber "


                                                }//If loop for Patient Insurance
                                                //Transaction Line Loop
                                            }//Transaction SETS Loop
                                        }
                                    }
                                }
                                catch
                                {
                                }
                                finally
                                {
                                    if (oTransaction != null)
                                    {
                                        oTransaction.Dispose();
                                        oTransaction = null;
                                    }
                                    if (dsMaster != null)
                                    {
                                        dsMaster.Dispose();
                                        dsMaster = null;
                                    }
                                }
                            }

                            #region " Save EDI File "

                            sPath = "";
                            sPath = gloSettings.FolderSettings.AppTempFolderPath + "837 EDI\\";
                            if (System.IO.Directory.Exists(sPath) == false)
                            { System.IO.Directory.CreateDirectory(sPath); }
                            sEdiFile = GetEDIFileName(sPath, _BatchName);

                            oEdiDoc.Save(sEdiFile);
                            System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
                            string strData;
                            strData = oReader.ReadToEnd();
                            oReader.Close();
                            oReader.Dispose();
                            oReader = null;
                            System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
                            oWriter.Write(strData);
                            oWriter.Close();
                            oWriter.Dispose();
                            oWriter = null;

                            _result = sEdiFile;

                            #endregion " Save EDI File "

                            #region " Update Claim Manager Table "
                            Int64 _date = 0;
                            Int64 _time = 0;
                            _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                            _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
                            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
                            //Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionMasterID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
                            ogloClaimManager.SetClaimManagerTVP(_nBatchID, thisTransaction.TransactionMasterID, thisTransaction.ClaimNo, thisTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID, odsEDIClaimDetail);
                            ogloClaimManager.Dispose();
                            ogloClaimManager = null;
                            #endregion

                            //DESTROYS OBJECTS
                            oSegment.Dispose();
                            oSegment = null;
                            oTransactionset.Dispose();
                            oTransactionset = null;
                            oGroup.Dispose();
                            oGroup = null;
                            oInterchange.Dispose();
                            oInterchange = null;

                        }
                    }

                }
            }
            catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
            {
                string _strEx = "";
                ediException oException = null;
                oException = (ediException)Rex.WrappedException;
                _strEx = oException.get_Description();
                gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
                _result = "";
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                _result = "";
            }
            finally
            {
                if (dsHeader != null) { dsHeader.Dispose(); dsHeader = null; }
                if (dsMaster != null) { dsMaster.Dispose(); dsMaster = null; }

                if (oEdiDoc != null) { oEdiDoc.Dispose(); oEdiDoc = null; }
                if (oInterchange != null) { oInterchange.Dispose(); oInterchange = null; }
                if (oGroup != null) { oGroup.Dispose(); oGroup = null; }
                if (oTransactionset != null) { oTransactionset.Dispose(); oTransactionset = null; }
                if (oSegment != null) { oSegment.Dispose(); oSegment = null; }
                if (oSchema != null) { oSchema.Dispose(); oSchema = null; }
                if (oSchemas != null) { oSchemas.Dispose(); oSchemas = null; }
                //if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                //if (ogloBilling != null) { ogloBilling.Dispose(); ogloBilling = null; }
             //   if (oTransaction != null) { oTransaction.Dispose(); oTransaction = null; }

            }
            #endregion " Generate EDI "

            return _result;
        }

        public string EDI837GenerationForSecondary_5010(ArrayList SelectedTransactions, string _BatchName, bool _IsUndo, Int64 _ContactID, dsEDIClaimdetails odsEDIClaimDetail, Int64 _nBatchID)
        {

            DataSet dsMaster = null;
            DataSet dsHeader = null;
            int IndexCount;
            string _result = "";
            string InterchangeHeader = "";
            string FunctionalGroupHeader = "";
            string TransactionSetHeader = "";
            string _ClaimStatus = "1";
            Int64 _PrimaryInsuranceId = 0;
            Int64 _PrimaryContactID = 0;
            int _Rendering = 1;
            string _TypeOfData = "T";
            string sEdiFile, sPath;
            ediDocument oEdiDoc = null;
            ediSchema oSchema = null;
            ediSchemas oSchemas = null;
            ediInterchange oInterchange = null;
            ediGroup oGroup = null;
            ediTransactionSet oTransactionset = null;
            ediDataSegment oSegment = null;
            bool _IsSEFPresent = true;
            string sSEFFile = "";
            bool _bIntialTreatmentDate = false;
            bool _bEDPDTSV11 = false;
            bool _bEDPDTCRC = false;
            bool _bSuppressRendreing = false;
            bool _bBillEPSDTorFamilyPlanning = false;
            bool _bIsCaptionize = false;
            bool _bincludeorderingprovider = false;
            
            //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
            string sReceiverQualifier = "ZZ";
            string sSenderQualifier = "ZZ";
          
            #region " Generate Secondary EDI "
                string sInstance = "";
                //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                

            try
            {

                #region "Load EDI"


                // sPath = AppDomain.CurrentDomain.BaseDirectory;
                sSEFFile = "837_005010X222A1.SemRef.SEF";

                oEdiDoc = new ediDocument();

                // Change the cursor type from dynamic to forward to improve speed performance
                oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;

                // Disable the internal standard reference library to be memory effecient
                oSchemas = oEdiDoc.GetSchemas();
                oSchemas.EnableStandardReference = false;

                // Load the SEF file
                oSchema = oEdiDoc.ImportSchema(sSEFPath + sSEFFile, 0);



                if (File.Exists(sSEFPath + sSEFFile) == false)
                {
                    MessageBox.Show("837 SEF file is not present in the base directory.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _IsSEFPresent = false;
                    return "";
                }


                oEdiDoc.SegmentTerminator = "~\r\n";
                oEdiDoc.ElementTerminator = "*";
                oEdiDoc.CompositeTerminator = ":";

                #endregion


                if (_IsSEFPresent == true)
                {

                    //Get Clearing House Information in Data table

                    #region "Header Data - Dataset define in table"

                    dsHeader = GetHeader_EDI_5010(_ContactID, _ClinicID, Convert.ToInt64(SelectedTransactions[SelectedTransactions.Count - 1]), false);
                    if (dsHeader == null)
                    {
                        return "";
                    }
                    if (dsHeader.Tables == null)
                    {
                        return "";
                    }

                    DataTable dtClearingHouse = dsHeader.Tables["ClearingHouseData"];
                    DataTable dtSubmitter = dsHeader.Tables["SubmitterData"];
                    DataTable dtChargesSetting = dsHeader.Tables["ChargesSetting"];
                 //   DataTable dtEPSDTSetting = dsHeader.Tables["EPSSTSetting"];
                    DataTable dtbIsCaptionize = dsHeader.Tables["bIsCaptionize"];                   
                    if (dtChargesSetting != null && dtChargesSetting.Rows.Count > 0)
                    {
                        _bIntialTreatmentDate = Convert.ToBoolean(dtChargesSetting.Rows[0]["sSettingsValue"]);
                    }

                    if (dtbIsCaptionize != null && dtbIsCaptionize.Rows.Count > 0)
                    {
                        _bIsCaptionize = Convert.ToBoolean(dtbIsCaptionize.Rows[0]["sSettingsValue"]);
                    }
                    //if (dtEPSDTSetting != null && dtEPSDTSetting.Rows.Count > 0)
                    //{
                    //    _bEDPDTSV11 = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeSV"]);
                    //    _bEDPDTCRC = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeCRC"]);
                    //    _bSuppressRendreing = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bSupressRenderEPSDTClaimOnPaperEDI"]);
                    //    _bBillEPSDTorFamilyPlanning = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bBillEPSDTorFamilyPlanning"]);
                    //}
                    if (dsHeader != null && dsHeader.Tables["ProviderSettings"] != null && dsHeader.Tables["ProviderSettings"].Rows.Count > 0)
                    {
                        _bincludeorderingprovider = Convert.ToBoolean(dsHeader.Tables["ProviderSettings"].Rows[0]["bIncludeOrderingProvider"]);
                    }
                    #endregion

                    //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                   

                    if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
                    {
                        MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return "";
                    }

                    //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                    DataTable dtClearingHouseID  = ogloBilling.GetClearingHouseSettings();
                    ogloBilling.Dispose();
                    ogloBilling = null;

                    if (dtClearingHouseID != null && dtClearingHouseID.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtClearingHouseID.Rows.Count; i++)
                        {
                            if (dtClearingHouseID.Rows[i]["bIsDefault"].ToString() == "True")
                            {
                                if (Convert.ToString(dtClearingHouseID.Rows[i]["sSenderIDQualifier"]) != "")
                                { sSenderQualifier = Convert.ToString(dtClearingHouseID.Rows[i]["sSenderIDQualifier"]); }

                                if (Convert.ToString(dtClearingHouseID.Rows[i]["sReceiverIDQualifier"]) != "")
                                { sReceiverQualifier = Convert.ToString(dtClearingHouseID.Rows[i]["sReceiverIDQualifier"]); }
                            }
                        }
                    }
                    if (dtClearingHouseID != null)
                    {
                        dtClearingHouseID.Dispose();
                        dtClearingHouseID = null;
                    }
                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                            if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                            {
                                MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return "";
                            }
                        }
                    }

                    #region " Interchange Segment "
                    //Create the interchange segment
                    ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "005010"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

                    if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
                    {
                        _TypeOfData = "T";
                    }
                    else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
                    {
                        _TypeOfData = "P";
                    }

                    oSegment.set_DataElementValue(1, 0, "00");
                    oSegment.set_DataElementValue(3, 0, "00");
                    oSegment.set_DataElementValue(5, 0, sSenderQualifier);//7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                    oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_SenderID.Trim());//"1234545");//
                    oSegment.set_DataElementValue(7, 0, sReceiverQualifier);//7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                    oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
                    string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
                    oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
                    string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    oSegment.set_DataElementValue(11, 0, "^");
                    oSegment.set_DataElementValue(12, 0, "00501");
                    InterchangeHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
                    oSegment.set_DataElementValue(14, 0, "0");
                    oSegment.set_DataElementValue(15, 0, _TypeOfData);
                    oSegment.set_DataElementValue(16, 0, ":");

                    #endregion " Interchange Segment "

                    #region " Functional Group "

                    //Create the functional group segment
                    ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("005010X222A1"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
                    oSegment.set_DataElementValue(1, 0, "HC");
                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////_SenderName);
                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//// _ReceiverCode.Trim());//"ClarEDI");
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
                    string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
                    oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    FunctionalGroupHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
                    oSegment.set_DataElementValue(7, 0, "X");
                    oSegment.set_DataElementValue(8, 0, "005010X222A1");

                    #endregion " Functional Group "

                    #region ST - TRANSACTION SET HEADER

                    ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
                    TransactionSetHeader = ControlNumberGeneration();
                    oSegment.set_DataElementValue(2, 0, TransactionSetHeader);
                    oSegment.set_DataElementValue(3, 0, "005010X222A1");

                    #endregion ST - TRANSACTION SET HEADER

                    #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    //Beginning  Segment 
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
                    oSegment.set_DataElementValue(1, 0, "0019"); //Hierarchical Structure Code
                    oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
                    oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//Reference identification
                    oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Date of claim
                    string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                    oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
                    #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

                    #region NM1 - SUBMITTER


                    //1000A SUBMITTER
                    //NM1 SUBMITTER

                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "41");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
                    if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.
                    }

                    //PER SUBMITTER EDI CONTACT INFORMATION
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
                    oSegment.set_DataElementValue(1, 0, "IC");
                    if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                    {
                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
                    }
                    else
                    {
                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                    }


                    oSegment.set_DataElementValue(3, 0, "TE");
                    if (dtSubmitter != null && Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                    {
                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("(", "").Replace(")", "").Replace("-", "").Replace("_", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone
                    }

                    #endregion NM1 - SUBMITTER

                    #region NM1 - RECEIVER NAME

                    //1000B RECEIVER
                    //NM1 RECEIVER NAME
                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
                    oSegment.set_DataElementValue(1, 0, "40");
                    oSegment.set_DataElementValue(2, 0, "2");
                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"GatewayEDI");//clearing house or contractor or carrier or FI name
                    if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]) != "")
                    {
                        oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.
                    }

                    #endregion NM1 - RECEIVER NAME

                    nHlCount = 0;

                    if (SelectedTransactions != null)
                    {
                        if (SelectedTransactions.Count > 0)
                        {
                            TransactionEDI thisTransaction = new TransactionEDI();
                            for (int i = 0; i < SelectedTransactions.Count; i++)
                            {
                                
                                TransactionLineEDI oTransLine = null;
                                TransactionEDI oTransaction = GetChargesClaimDetails_EDI(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
                                #region "Master EDI data - Dataset data set in data table "

                                dsMaster = null;
                                dsMaster = GetMaster_EDI_5010(oTransaction.ContactID, oTransaction.Lines[0].RenderingProviderId, oTransaction.ProviderID, oTransaction.ResponsibilityNo,
                                    oTransaction.TransactionMasterID, Convert.ToInt64(oTransaction.FacilityCode), _ClinicID, oTransaction.IsSameAsBillingProvider,
                                    oTransaction.TransactionID, oTransaction.ReferalProviderID_New, true);

                                DataTable dtPatientInsurances = dsMaster.Tables["PatientInsurance"];
                                DataTable dtFacility = dsMaster.Tables["Facility"];
                                DataTable dtBillingProvider = dsMaster.Tables["BillingProvider"];
                                DataTable dtPatientPaid = dsMaster.Tables["PatientPaid"];
                                DataTable dtDx = dsMaster.Tables["Diagnosis"];
                                DataTable dtRefProvider = dsMaster.Tables["RefferingProvider"];
                                DataTable dtRendProvider = dsMaster.Tables["RenderingProvider"];
                                DataTable dtMasterSetting = dsMaster.Tables["MasterSetting"];
                                DataTable _dtPayment = dsMaster.Tables["SVDData"];
                                DataTable dtAllcasdata = dsMaster.Tables["CASData"];
                                DataTable dtBillingProviderTaxonomy = dsMaster.Tables["BillingProviderTaxonomy"];
                                DataTable dtProviderReportingSetting = dsMaster.Tables["ProviderReportingSetting"];
                                DataTable dtEPSDTSetting = dsMaster.Tables["EPSDTSetting"];
                                DataTable dtPWKData = dsMaster.Tables["PWKData"];
                                #endregion
                              
                                if (dtEPSDTSetting != null && dtEPSDTSetting.Rows.Count > 0)
                                {
                                    _bEDPDTSV11 = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeSV"]);
                                    _bEDPDTCRC = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bEDIIncludeCRC"]);
                                    _bSuppressRendreing = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bSupressRenderEPSDTClaimOnPaperEDI"]);
                                    _bBillEPSDTorFamilyPlanning = Convert.ToBoolean(dtEPSDTSetting.Rows[0]["bBillEPSDTorFamilyPlanning"]);
                                }

                                if (dtProviderReportingSetting != null && dtProviderReportingSetting.Rows.Count > 0)
                                {
                                    _bincludeorderingprovider = Convert.ToBoolean(dtProviderReportingSetting.Rows[0]["bIncludeOrderingProvider"]);
                                }

                                try
                                {
                                    if (oTransaction != null)
                                    {
                                        thisTransaction.TransactionMasterID = oTransaction.TransactionMasterID;
                                        thisTransaction.ClaimNo = oTransaction.ClaimNo;
                                        thisTransaction.PatientID = oTransaction.PatientID;

                                        if (oTransaction.Lines.Count > 0)
                                        {
                                            //Split Claim No.
                                            string _ClaimNo = "";

                                            #region "Formatting the Claim Number"

                                            _ClaimNo = FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNumber));

                                            #endregion

                                            if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
                                            {
                                                if (oTransaction.PatientID <= 0)
                                                {
                                                    MessageBox.Show("Patient information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                                if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                                {
                                                    MessageBox.Show("Patient " + oTransaction.PatientFirstName + " " + oTransaction.PatientLastName + " Insurance details are missing for claim number " + _ClaimNo + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }
                                            }


                                            for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
                                            {
                                                //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

                                                nHlCount = nHlCount + 1;
                                                nHlProvParent = nHlCount;
                                                //2000A BILLING/PAY-TO PROVIDER HL LOOP
                                                //HL-BILLING PROVIDER
                                                string _PayerResponsibilityName = "";
                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                oSegment.set_DataElementValue(3, 0, "20");
                                                oSegment.set_DataElementValue(4, 0, "1");

                                                #region Billing Provider

                                                //  gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
                                                string PrimaryBillingProviderID = "";
                                                string PrimaryOrderingProviderID = "";
                                                string PrimaryRenderingProviderID = "";
                                                //2010AA BILLING PROVIDER
                                                //NM1 BILLING PROVIDER NAME
                                                if (dtBillingProvider != null && dtBillingProvider.Rows.Count > 0)
                                                {
                                                    if (dtBillingProviderTaxonomy != null && dtBillingProviderTaxonomy.Rows.Count > 0)
                                                    {
                                                        if (FormatString(dtBillingProviderTaxonomy.Rows[0]["sTaxonomyCode"].ToString().Trim()) != ""
                                                           && FormatString(dtBillingProviderTaxonomy.Rows[0]["sTaxonomyQualifier"].ToString().Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PRV"));
                                                            oSegment.set_DataElementValue(1, 0, "BI");
                                                            oSegment.set_DataElementValue(2, 0, "PXC");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(dtBillingProviderTaxonomy.Rows[0]["sTaxonomyCode"].ToString().Trim()));
                                                        }
                                                    }

                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "85");
                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["EntityType"])));
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["LastName"])));//Billing provider name
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["FirstName"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(5, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["MiddleName"])));
                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["sSuffix"])));

                                                    }

                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])) != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"])));
                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])) != "")
                                                    {
                                                        PrimaryBillingProviderID = FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"]));
                                                        oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"])));
                                                    }


                                                    //Add Physical Address in Pay to address .
                                                    if (Convert.ToString(dtBillingProvider.Rows[0]["PhyAddline1"]).Trim() == "" || Convert.ToString(dtBillingProvider.Rows[0]["PhyCity"]).Trim() == "" || Convert.ToString(dtBillingProvider.Rows[0]["PhyState"]).Trim() == "" || Convert.ToString(dtBillingProvider.Rows[0]["PhyZIP"]).Trim() == "")
                                                    {
                                                        //N3 BILLING PROVIDER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])));//Provider Address

                                                        //N4 BILLING PROVIDER LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])));////Provider City
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["State"])));//Provider state                                                   
                                                        oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["ZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["AreaCode"]))));//Provider ZIP
                                                        if (Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim() != "")
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim());
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //N3 BILLING PROVIDER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyAddline1"])));//Provider Address

                                                        //N4 BILLING PROVIDER LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyCity"])));////Provider City
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyState"])));//Provider state                                               
                                                        oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["PhyAreaCode"]))));//Provider ZIP
                                                        if (Convert.ToString(dtBillingProvider.Rows[0]["PhyCountryCode"]).Trim() != "")
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtBillingProvider.Rows[0]["PhyCountryCode"]).Trim());
                                                        }
                                                    }

                                                    //Billing Provider 2010AA Provider Tax Identification
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifier"])));
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["TaxIdentifierValue"])));

                                                    }
                                                    if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])) != "")
                                                    {
                                                        if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) == "0B" || FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) == "1G")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])));
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])));
                                                        }
                                                    }

                                                    #region "Billing Contact Information"
                                                    //Contact Information 
                                                    if (FormatString(dtBillingProvider.Rows[0]["PhoneNo"].ToString().Trim()) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\PER"));
                                                        oSegment.set_DataElementValue(1, 0, "IC");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(dtBillingProvider.Rows[0]["ContactName"].ToString().Trim()));

                                                        oSegment.set_DataElementValue(3, 0, "TE");
                                                        oSegment.set_DataElementValue(4, 0, FormatString(dtBillingProvider.Rows[0]["PhoneNo"].ToString().Trim()));
                                                    }

                                                    #endregion

                                                    #region "Billing Provider Pay to Address "

                                                    if (Convert.ToString(dtBillingProvider.Rows[0]["PhyAddline1"]).Trim() != "" && Convert.ToString(dtBillingProvider.Rows[0]["PhyCity"]).Trim() != "" && Convert.ToString(dtBillingProvider.Rows[0]["PhyState"]).Trim() != "" && Convert.ToString(dtBillingProvider.Rows[0]["PhyZIP"]).Trim() != "")
                                                    {

                                                        if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])) != "")
                                                        {
                                                            //In 5010 Billing Provider Pay to address 
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "87");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["EntityType"])));

                                                            //N3 BILLING PROVIDER ADDRESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["Address1"])));//Provider Address

                                                            //N4 BILLING PROVIDER LOCATION
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["City"])));////Provider City
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["State"])));//Provider state

                                                            //oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//Provider ZIP
                                                            oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtBillingProvider.Rows[0]["ZIP"])), FormatString(Convert.ToString(dtBillingProvider.Rows[0]["AreaCode"]))));//Provider ZIP

                                                            if (Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim() != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtBillingProvider.Rows[0]["CountryCode"]).Trim());
                                                            }
                                                        }
                                                    }

                                                    #endregion


                                                }
                                                else
                                                {
                                                    MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return "";
                                                }

                                                #endregion

                                                //'******************************************************************************************************
                                                //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
                                                //'******************************************************************************************************
                                                #region Subscriber
                                                if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                {
                                                    string _strRelation = "";
                                                    string _strInsuranceType = "";
                                                    _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                    _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");


                                                    #region Subscriber HL Loop - 2000B

                                                    nHlCount = nHlCount + 1;
                                                    nHlSubscriberParent = nHlCount;

                                                    //2000B SUBSCRIBER HL LOOP
                                                    //HL-SUBSCRIBER
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                    oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                    oSegment.set_DataElementValue(3, 0, "22");

                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "0");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, "1");

                                                    }

                                                    //SBR SUBSCRIBER INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));

                                                    #region "Responsibility No"

                                                    if (oTransaction.ResponsibilityNo == 1)
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, "P");
                                                    }
                                                    else if (oTransaction.ResponsibilityNo == 2)
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, "S");
                                                    }
                                                    else if (oTransaction.ResponsibilityNo == 3)
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, "T");
                                                    }

                                                    #endregion

                                                    if (_strRelation == "18")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "18");
                                                    }

                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
                                                    }
                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludePlanname"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance name
                                                    }

                                                    if (dtPatientInsurances.Rows[0]["InsuranceTypeCode"].ToString().ToUpper() == "MA" || dtPatientInsurances.Rows[0]["InsuranceTypeCode"].ToString().ToUpper() == "MB")
                                                    {
                                                        if (dtPatientInsurances.Rows[0]["sInsuranceFlag"].ToString().ToUpper().Trim() != "PRIMARY")
                                                        {
                                                            oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsTypeCodeMedicare"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Insurance Type Code of the Medicare
                                                        }
                                                    }

                                                    //This is Claim filling Indicator code in EDI implementation guide.
                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
                                                    }


                                                    //2010BA SUBSCRIBER
                                                    //NM1 SUBSCRIBER NAME
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "IL");
                                                    if (_strRelation != "18" && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIsCompnay"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "2");
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sCompanyName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberOrgName"                                                   
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberLastOrgName"
                                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberFirstname"
                                                        //7030 Extension.
                                                        //Problem #00000395: Bill with middle initial.
                                                        //Added Middle Initial in Subscriber name.
                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMiddlename"
                                                        }


                                                        //For WorkerComp and AutoClaimNo.
                                                        if (Convert.ToString(oTransaction.WorkersCompNo).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bShowClaimNo"]) == true)
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "MI");
                                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(oTransaction.WorkersCompNo).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }
                                                        else if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "MI");
                                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }

                                                        else
                                                        {
                                                            MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + "Insurance ID for subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                    }
                                                    //N3 SUBSCRIBER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                    }

                                                    //N4 SUBSCRIBER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberCity"
                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscrberState"
                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"SubscriberZip"

                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCountryCode"]).Trim() != "")
                                                    {
                                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCountryCode"]).Trim());
                                                    }

                                                    #endregion SubscriberHL Loop - 2000B
                                                    string _SubscriberGender = "";
                                                    if (_strRelation == "18")
                                                    {
                                                        //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
                                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "") == "")
                                                        {
                                                            MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + " State or City or ZipCode for Subscriber is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }

                                                    }
                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                        oSegment.set_DataElementValue(1, 0, "D8");

                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"

                                                        _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                        if (_SubscriberGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "OTHER")
                                                        {
                                                            _SubscriberGender = "U";
                                                        }
                                                        oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 1).ToUpper());//"SubscriberGender"
                                                    }
                                                    else
                                                    {
                                                        if (_strRelation == "18")
                                                        {
                                                            MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return "";
                                                        }
                                                    }
                                                    if (_strRelation == "18")
                                                    {
                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bworkerscomp"]) || Convert.ToBoolean(dtPatientInsurances.Rows[0]["bautoclaim"]))
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "Y4");
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }
                                                    }
                                                    #region Payer Information Loop 2010BB
                                                    //2010BB SUBSCRIBER/PAYER
                                                    //NM1 PAYER NAME
                                                    string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                    if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Length > 35)
                                                    {
                                                        _ModifiedPayerName = "";
                                                        _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 34);

                                                    }
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
                                                    oSegment.set_DataElementValue(1, 0, "PR");
                                                    oSegment.set_DataElementValue(2, 0, "2");
                                                    oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"PayerLastOrgName"
                                                    if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Trim() != "")
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Trim());//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
                                                    }

                                                    string str = Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Trim();
                                                    ////////N3 PAYER ADDRESS
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceAddress"

                                                    ////////N4 PAYER CITY
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceCity"
                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceState"
                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"InsuranceZip"
                                                    #endregion

                                                    #region Claim office Number

                                                    if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[0]["sClaimOfficeNumber"] != null)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sEDIAltPayerIDType"]).Trim()) != "" && dtPatientInsurances.Rows[0]["sEDIAltPayerIDType"] != null)
                                                        {
                                                            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sEDIAltPayerIDType"]).Trim()));
                                                        }
                                                        else
                                                            oSegment.set_DataElementValue(1, 0, "FY");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimOfficeNumber"]).Trim()));
                                                    }

                                                    #endregion

                                                    if (dtBillingProvider != null && dtBillingProvider.Rows.Count > 0)
                                                    {
                                                        if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])) != "")
                                                        {
                                                            if (FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "0B" && FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])) != "1G")
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"])));
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifierValue"])));
                                                            }
                                                        }
                                                    }

                                                    if (_strRelation != "18")
                                                    {
                                                        nHlCount = nHlCount + 1;
                                                        //2000B DEPENDENT HL LOOP
                                                        //HL-DEPENDENT
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
                                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
                                                        oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
                                                        oSegment.set_DataElementValue(3, 0, "23");
                                                        oSegment.set_DataElementValue(4, 0, "0");

                                                        //PAT - PATIENT/DEPENDENT INFORMATION

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //01 - Spouse 19 - Child

                                                        #region " Patient Info"

                                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "QC");
                                                        oSegment.set_DataElementValue(2, 0, "1");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.PatientLastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient Last Name
                                                        oSegment.set_DataElementValue(4, 0, oTransaction.PatientFirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient First Name
                                                        //7030 Extension.
                                                        //Problem #00000395: Bill with middle initial.
                                                        //Added Middle Initial in Patient name.
                                                        if (oTransaction.PatientMiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(5, 0, oTransaction.PatientMiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient Middle Name
                                                        }

                                                        //N3 - ADDRESS INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, oTransaction.PatientAddress1.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Address"

                                                        //N4 - GEOGRAPHIC LOCATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, oTransaction.PatientCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"City"
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.PatientState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"State"
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.PatientZip.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"Zip"
                                                        if (oTransaction.PatientCountry.Trim().ToUpper() != "US")
                                                        {
                                                            gloContacts.gloContact oContact = new gloContacts.gloContact(_databaseconnectionstring);
                                                            oSegment.set_DataElementValue(4, 0, oContact.getCountryCode(oTransaction.PatientCountry.Trim().ToUpper()));
                                                            oContact.Dispose();
                                                        }


                                                        //DMG - DEMOGRAPHIC INFORMATION
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
                                                        oSegment.set_DataElementValue(1, 0, "D8");
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.PatientDOB.ToShortDateString())));
                                                        if (oTransaction.PatientGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || oTransaction.PatientGender.Trim().Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "OTHER")
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"                                                                   
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.PatientGender.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberGender"
                                                        }

                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bworkerscomp"]) || Convert.ToBoolean(dtPatientInsurances.Rows[0]["bautoclaim"]))
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "Y4");
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
                                                        }

                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludePatientSSN"]) && (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bworkerscomp"]) || Convert.ToBoolean(dtPatientInsurances.Rows[0]["bautoclaim"])))
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "SY");
                                                            if (oTransaction.PatientSSN != null && oTransaction.PatientSSN != "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, oTransaction.PatientSSN);//"Insurance Id"
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "999999999");//"Insurance Id"
                                                            }
                                                        }
                                                        #endregion " Patient Info"

                                                    }
                                                    //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
                                                    //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
                                                    string _FirstPOS = "";
                                                    string _ClaimTotal = "";
                                                    iItemCount = 0;
                                                    decimal _claimAmount = 0;
                                                    //Remove this loop
                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        _claimAmount = _claimAmount + oTransaction.Lines[nLine].Total;
                                                        _FirstPOS = oTransaction.Lines[0].POSCode;
                                                    }
                                                    _ClaimTotal = _claimAmount.ToString("#0.00");
                                                    if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
                                                    }
                                                    else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
                                                    {
                                                        _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
                                                    }

                                                    #region Claim Details - Loop 2300
                                                    //2300 CLAIM
                                                    //CLM CLAIM LEVEL INFORMATION
                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));


                                                    if (gloGlobal.gloPMGlobal.IsUseClaimPrefix && gloGlobal.gloPMGlobal.sClaimPrefix != "")
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, String.Concat(gloGlobal.gloPMGlobal.sClaimPrefix, _ClaimNo)); //Patient Account no                                                         
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(1, 0, _ClaimNo); //Patient Account no         
                                                    }         

                                                    oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount
                                                    oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //21 - Inpatient Hospital
                                                    oSegment.set_DataElementValue(5, 2, "B");//Change For 5010

                                                    if (oTransaction.IsReplacementClaim == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIsClaimFrequencyOne"]) == false)
                                                    {
                                                        _ClaimStatus = "7";
                                                    }
                                                    else
                                                    {
                                                        _ClaimStatus = "1";
                                                    }
                                                    oSegment.set_DataElementValue(5, 3, _ClaimStatus);
                                                    oSegment.set_DataElementValue(6, 0, "Y");

                                                    //Access of Assignment
                                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                    {
                                                        _IsAccessAssignment = Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAccessAssignment"]);
                                                    }
                                                    if (_IsAccessAssignment == true)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "A");
                                                    }
                                                    else if (_IsAccessAssignment == false)
                                                    {
                                                        oSegment.set_DataElementValue(7, 0, "C");
                                                    }

                                                    //Assignment of Benefit
                                                    if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "Y");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(8, 0, "N");
                                                    }
                                                    // oSegment.set_DataElementValue(9, 0, "Y");
                                                    //Signature on file.
                                                    if (oTransaction.SOF == true)
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, "Y");
                                                    }
                                                    else
                                                    {
                                                        oSegment.set_DataElementValue(9, 0, "I");
                                                    }

                                                    // oSegment.set_DataElementValue(10, 0, "C");
                                                    if (oTransaction.AutoClaim == true)
                                                    {
                                                        if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "AA");
                                                            oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                        }
                                                    }
                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "EM");
                                                        }
                                                    }
                                                    if (oTransaction.OtherAccident == true)
                                                    {
                                                        if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                        {
                                                            oSegment.set_DataElementValue(11, 1, "OA");
                                                        }
                                                    }
                                                    if (oTransaction.DelayReasonCodeID != "")
                                                    {
                                                        oSegment.set_DataElementValue(20, 0, oTransaction.DelayReasonCodeID);
                                                    }


                                                    string OnsetDate = "";
                                                    if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "" || oTransaction.OtherAccidentDate.ToString() != "")
                                                    {
                                                        if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.InjuryDate);
                                                            ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "439");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);//Claim Date
                                                        }
                                                        else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0 && oTransaction.sBox14DateQualifier.ToString() != "")
                                                        {
                                                            OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
                                                            ////DTP DATE OF CURRENT INJURY
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, oTransaction.sBox14DateQualifier);
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, OnsetDate);   //Claim Date
                                                        }
                                                        else if (oTransaction.AutoClaim == true)
                                                        {
                                                            if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.AccidentDate);
                                                                ////DTP DATE OF ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);//Claim Date
                                                            }
                                                        }
                                                        else if (oTransaction.OtherAccident == true)
                                                        {
                                                            if (oTransaction.OtherAccidentDate.ToString() != "" && oTransaction.OtherAccidentDate > 0)
                                                            {
                                                                OnsetDate = Convert.ToString(oTransaction.OtherAccidentDate);
                                                                ////DTP DATE OF Other ACCIDENT 
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                                oSegment.set_DataElementValue(1, 0, "439");
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, OnsetDate);
                                                            }
                                                        }
                                                    }
                                                    //if (oTransaction.InitialTreatmentDate != "" && _bIntialTreatmentDate == true)
                                                    //{
                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                    //    oSegment.set_DataElementValue(1, 0, "454");
                                                    //    oSegment.set_DataElementValue(2, 0, "D8");
                                                    //    oSegment.set_DataElementValue(3, 0, oTransaction.InitialTreatmentDate);
                                                    //}

                                                    ////include DTP*304 if last seen date is present
                                                    //if (oTransaction.LastSeenDate > 0 && oTransaction.LastSeenDate.ToString()!="")
                                                    //{
                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                    //    oSegment.set_DataElementValue(1, 0, "304");
                                                    //    oSegment.set_DataElementValue(2, 0, "D8");
                                                    //    oSegment.set_DataElementValue(3, 0, oTransaction.LastSeenDate.ToString());
                                                    //}

                                                    if (oTransaction.Box15Date != "" && oTransaction.Box15DateQualifier != "" && oTransaction.Box15DateQualifier != "438")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, oTransaction.Box15DateQualifier);
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.Box15Date);
                                                    }
                                                    if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
                                                    {
                                                        //DTP DATE OF Hospitalization (Admission) 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "435");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                    }

                                                    if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
                                                    {
                                                        //DTP DATE OF Discharge 
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "096");
                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                        oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                        //
                                                    }
                                                    // }

                                                    if (oTransaction.WorkersComp == true)
                                                    {
                                                        if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period last day worked)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "297");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                            //
                                                        }

                                                        if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
                                                        {
                                                            //DTP DATE OF (Initial Disability period return to work)
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
                                                            oSegment.set_DataElementValue(1, 0, "296");
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
                                                            //
                                                        }
                                                    }
                                                    #region PWk Data
                                                    if (dtPWKData != null && dtPWKData.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(dtPWKData.Rows[0]["ReportTypeCode"]).Trim() != "" && Convert.ToString(dtPWKData.Rows[0]["ReportTransmissionCode"]).Trim() != "" && Convert.ToString(dtPWKData.Rows[0]["AttachmentControlNumber"]).Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\PWK"));
                                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPWKData.Rows[0]["ReportTypeCode"]).Trim());
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPWKData.Rows[0]["ReportTransmissionCode"]).Trim());
                                                            oSegment.set_DataElementValue(5, 0, "AC");
                                                            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtPWKData.Rows[0]["AttachmentControlNumber"]).Trim());
                                                        }
                                                    }
                                                    #endregion
                                                    #region Patient Paid Amount.


                                                    string _AmountPaid = String.Empty;
                                                  //  _AmountPaid = GetBox29Setting(oTransaction.TransactionID, oTransaction.ContactID);
                                                    if (dtPatientPaid != null && dtPatientPaid.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]).Trim() != "")
                                                            _AmountPaid = FormatAmount(Convert.ToString(dtPatientPaid.Rows[0]["TotalPaid"]));
                                                    }
                                                    #endregion

                                                    if (GetIncludePriorPatPaymentSetting(oTransaction.ContactID) && _AmountPaid.Trim() != string.Empty && _AmountPaid.Trim() != "0.00" && _AmountPaid.Trim() != "0.0" && _AmountPaid.Trim() != "0")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
                                                        oSegment.set_DataElementValue(1, 0, "F5");
                                                        oSegment.set_DataElementValue(2, 0, _AmountPaid);
                                                    }

                                                    #region Service Authorization exception code

                                                    if (oTransaction.ServiceAuthExceCode.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "4N");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.ServiceAuthExceCode);
                                                    }

                                                    #endregion
                                                    #region MammogramCertNumber
                                                    if (oTransaction.sMammogramCertNumber.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "EW");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sMammogramCertNumber);
                                                    }

                                                    #endregion 


                                                    if (FormatString(oTransaction.PriorAuthorizationNo) != "")
                                                    {
                                                        //REF CLEARING HOUSE CLAIM NUMBER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "G1");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.PriorAuthorizationNo)); //Claim No
                                                    }
                                                    //20100426 gloPM5040
                                                    if (FormatString(oTransaction.ClaimCLIANo) != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "X4");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(oTransaction.ClaimCLIANo)); //Claim No
                                                    }
                                                    #endregion
                                                    #region IDE Number
                                                    if (oTransaction.sIDENo.ToString().Trim() != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "P4");
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.sIDENo);
                                                    }
                                                    #endregion 


                                                    #region Claim Remittance Reference #
                                                    //20100426 gloPM5040

                                                    if ((Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"])).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "F8");
                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"]).Trim()));
                                                    }

                                                    #endregion

                                                    #region "BOX19 Note"

                                                    if (oTransaction.Box19NoteDescription != "")
                                                    {
                                                        if (FormatString(Convert.ToString(oTransaction.Box19NoteDescription).Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(oTransaction.Box19NoteDescription).Trim())); //Claim No
                                                        }
                                                    }

                                                    #endregion

                                                    #region HI - Diagnosis

                                                    //HI HEALTH CARE DIAGNOSIS CODES                                                                                                                                           


                                                    string code_no = "";
                                                    if (dtDx != null && dtDx.Rows.Count > 0)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

                                                        for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
                                                        {
                                                            if (DxIndex == 0)
                                                            {
                                                                if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    if (oTransaction.nICDRevision == gloGlobal.gloICD.CodeRevision.ICD9.GetHashCode())
                                                                    {
                                                                        oSegment.set_DataElementValue(1, 1, "BK");
                                                                    }
                                                                    else
                                                                    {
                                                                        oSegment.set_DataElementValue(1, 1, "ABK");
                                                                    }
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                }
                                                            }
                                                            if (DxIndex > 0)
                                                            {
                                                                if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                {
                                                                    if (code_no == "")
                                                                    {
                                                                        code_no = "'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    else
                                                                    {
                                                                        code_no += ",'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("~", "").Replace(":", "") + "'";
                                                                    }
                                                                    if (oTransaction.nICDRevision == gloGlobal.gloICD.CodeRevision.ICD9.GetHashCode())
                                                                    {
                                                                        oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
                                                                    }
                                                                    else
                                                                    {
                                                                        oSegment.set_DataElementValue(DxIndex + 1, 1, "ABF");
                                                                    }
                                                                    oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("~", "").Replace(":", ""));//
                                                                }
                                                            }
                                                        }

                                                        if (code_no != "" && _IsUndo != true)
                                                        {
                                                            code_no = Convert.ToString(dtMasterSetting.Rows[0]["InvalidICD9"]);
                                                        }
                                                        else
                                                        {
                                                            code_no = "";
                                                        }
                                                    }

                                                    if (code_no != "")
                                                    {
                                                        string _message;

                                                        _message = "ICD9 is Invalid." + Environment.NewLine + "For Claim No :" + _ClaimNo + Environment.NewLine + "Code : " + code_no + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "                                                            

                                                        if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                                        {
                                                            return "";
                                                        }
                                                    }
                                                    #endregion

                                                    #region CRC
                                                    if (_bEDPDTCRC == true && oTransaction.EPSDTScreening == true && _bBillEPSDTorFamilyPlanning == true)
                                                    {
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CRC"));
                                                        oSegment.set_DataElementValue(1, 0, "ZZ");
                                                        if (oTransaction.EPSDTReferral == true)
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "Y");
                                                            oSegment.set_DataElementValue(3, 0, FormatString(oTransaction.ReferralType));
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "N");
                                                            oSegment.set_DataElementValue(3, 0, "NU");
                                                        }
                                                    }
                                                    #endregion

                                                    #region Referring Provider - 2310A
                                                    if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                    {
                                                        PrimaryOrderingProviderID = FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim());
                                                    }

                                                    if ((Convert.ToBoolean(dtProviderReportingSetting.Rows[0]["bIncludeReferring_ordering"]) == true && oTransaction.providerQualifier.Trim() == "DK") || (Convert.ToBoolean(dtProviderReportingSetting.Rows[0]["bIncludeReferring_supervising"]) == true && oTransaction.providerQualifier.Trim() == "DQ") || (oTransaction.providerQualifier.Trim() == "DN")) // Setting Condition Added for Reffering Provider
                                                    {
                                                        if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true)
                                                        {

                                                            if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                            {
                                                                //2310B Referring PROVIDER
                                                                //NM1 Referring PROVIDER NAME
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                                oSegment.set_DataElementValue(1, 0, "DN");
                                                                oSegment.set_DataElementValue(2, 0, "1");
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"]).Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString().Trim())); //"ReferringLastname"
                                                                }
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"]).Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString().Trim()));//"ReferringFirstname"
                                                                }
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"]).Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(5, 0, FormatString(dtRefProvider.Rows[0]["sMiddleName"].ToString().Trim()));
                                                                }

                                                                if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, "XX");
                                                                    PrimaryOrderingProviderID = FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim());
                                                                    oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()));//"NPI"
                                                                }


                                                                // REF
                                                                if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim()) != "" && FormatString(Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim()) != "")
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtRefProvider.Rows[0]["Code"]).Trim()));
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtRefProvider.Rows[0]["Value"]).Trim()));
                                                                }

                                                            }
                                                        }

                                                    }//End Setting Condition Added for Reffering Provider
                                                    #endregion Referring Provider

                                                    _Rendering = 1;
                                                    #region Rendering Provider - 2310B

                                                    //2310B RENDERING PROVIDER
                                                    //NM1 RENDERING PROVIDER NAME

                                                    if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                                                    {

                                                        bool IsincludeRenderingProvider = false;
                                                        IsincludeRenderingProvider = Convert.ToBoolean(dtRendProvider.Rows[0]["bIncludeRenderingProvider"]);
                                                        if (_bSuppressRendreing != true || oTransaction.EPSDTScreening != true)
                                                            if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) != PrimaryBillingProviderID || (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) == PrimaryBillingProviderID && IsincludeRenderingProvider == true))
                                                            {
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                                oSegment.set_DataElementValue(1, 0, "82");
                                                                oSegment.set_DataElementValue(2, 0, "1");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtRendProvider.Rows[0]["sLastName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name
                                                                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtRendProvider.Rows[0]["sFirstName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                oSegment.set_DataElementValue(5, 0, Convert.ToString(dtRendProvider.Rows[0]["sMiddleName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));

                                                                if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, "XX");
                                                                    PrimaryRenderingProviderID = FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])).Trim();
                                                                    oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                                }
                                                                if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])) != "" && FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])) != "" && FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])) != "" && Convert.ToInt64(dtRendProvider.Rows[0]["QualifierMstID"]) > 1)
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
                                                                    oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Qualifier"])));
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["QualifierValue"])));//oProviderDetails.NPI);//Billing provider ID/NPI
                                                                }


                                                                //PRV RENDERING PROVIDER INFORMATION
                                                                if (FormatString(Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"]).Trim()) != "")
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
                                                                    oSegment.set_DataElementValue(1, 0, "PE");
                                                                    oSegment.set_DataElementValue(2, 0, "PXC");
                                                                    oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtRendProvider.Rows[0]["Taxonomy"]).Trim()));//Reference Identification
                                                                }
                                                                _Rendering = 2;
                                                            }
                                                    }

                                                    #endregion

                                                    #region Facility - 2310C

                                                    //2310D SERVICE LOCATION
                                                    //NM1 SERVICE FACILITY LOCATION

                                                    if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bIsPOS"]) == true)
                                                    {
                                                        if (dtFacility != null && dtFacility.Rows.Count > 0)
                                                        {

                                                            bool IsincludeFacility = false;
                                                            IsincludeFacility = Convert.ToBoolean(dtFacility.Rows[0]["bIncludeFacility"]);
                                                            if (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) != PrimaryBillingProviderID || (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) == PrimaryBillingProviderID && IsincludeFacility == true))
                                                            {


                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\NM1"));
                                                                oSegment.set_DataElementValue(1, 0, "77");
                                                                oSegment.set_DataElementValue(2, 0, "2");
                                                                oSegment.set_DataElementValue(3, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["LastName"])));//"FacilityName"

                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(8, 0, Convert.ToString(dtFacility.Rows[0]["PrimaryQualifier"]));//NPI code
                                                                    oSegment.set_DataElementValue(9, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"])));//NPI
                                                                }


                                                                //N3 SERVICE FACILITY ADDRESS
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\N3"));
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["Address1"])));//"FacilityAddr"
                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["Address2"])) != "")
                                                                {
                                                                    oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["Address2"])));//"FacilityAddr2"
                                                                }

                                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\N4"));
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["City"])));//"FacilityCity"
                                                                oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["State"])));//"FacilityState"

                                                                //oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","").Replace("-",""));//"FacilityZip"
                                                                oSegment.set_DataElementValue(3, 0, GetFormattedZipCode(FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])), FormatString(Convert.ToString(dtFacility.Rows[0]["AreaCode"]))));//"FacilityZip"
                                                                if (Convert.ToString(dtFacility.Rows[0]["CountryCode"]).Trim() != "")
                                                                {
                                                                    oSegment.set_DataElementValue(4, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["CountryCode"])));
                                                                }
                                                                //Facility Secondary Identification
                                                                if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bISOtherID"]) == true)
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(" + _Rendering.ToString() + ")\\REF"));
                                                                    if (FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]));//NPI code
                                                                        oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierValue"])));//NPI
                                                                    }
                                                                }

                                                                if (FormatString(Convert.ToString(dtFacility.Rows[0]["City"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["State"])) == "" || FormatString(Convert.ToString(dtFacility.Rows[0]["Zip"])) == "")
                                                                {
                                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + " Facility Details(City/State/ZIP Code) is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                    return "";
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    #region Supervising Provuder 2310D

                                                    if ((oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true) && oTransaction.providerQualifier.Trim() == "DQ")
                                                    {

                                                        if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                        {
                                                            //2310B Referring PROVIDER
                                                            //NM1 Referring PROVIDER NAME
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
                                                            oSegment.set_DataElementValue(1, 0, "DQ");
                                                            oSegment.set_DataElementValue(2, 0, "1");
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"]).Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString().Trim())); //"ReferringLastname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"]).Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString().Trim()));//"ReferringFirstname"
                                                            }
                                                            if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"]).Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(5, 0, dtRefProvider.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                            }

                                                            if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()) != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "XX");
                                                                oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()));//"NPI"
                                                            }


                                                        }
                                                    }
                                                    #endregion

                                                    #region SET PRIMARY INSURANCE IDS

                                                    DataView _dv = dtPatientInsurances.Copy().DefaultView;

                                                    _dv.RowFilter = "(sInsuranceFlag)='Primary'";

                                                    DataTable _dtAllowed = _dv.ToTable();
                                                    if (_dtAllowed != null && _dtAllowed.Rows.Count > 0)
                                                    {
                                                        if (Convert.ToString(_dtAllowed.Rows[0]["nInsuranceID"]) != "")
                                                        {
                                                            _PrimaryInsuranceId = Convert.ToInt64(_dtAllowed.Rows[0]["nInsuranceID"]);
                                                        }
                                                        if (Convert.ToString(_dtAllowed.Rows[0]["nContactID"]) != "")
                                                        {
                                                            _PrimaryContactID = Convert.ToInt64(_dtAllowed.Rows[0]["nContactID"]);
                                                        }

                                                    }

                                                    if (_dtAllowed != null)
                                                    {
                                                        _dtAllowed.Dispose();
                                                        _dtAllowed = null;
                                                    }
                                                    if (_dv != null)
                                                    {
                                                        _dv.Dispose();
                                                        _dv = null;
                                                    }
                                                    #endregion


                                                    for (int _Insrow = 1; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
                                                    {
                                                        #region Subscriber Secondary Insurance - Loop 2320
                                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                        //LOOP - 2320                                                   
                                                        #region SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
                                                        //1.Payer Responsibility  Sequence No.

                                                        if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "Primary")
                                                        {
                                                            _PayerResponsibilityName = "Primary";
                                                            oSegment.set_DataElementValue(1, 0, "P");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
                                                        }
                                                        else if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "Secondary")
                                                        {
                                                            _PayerResponsibilityName = "Secondary";
                                                            oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
                                                        }
                                                        else if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "Tertiary")
                                                        {
                                                            _PayerResponsibilityName = "Tertiary";
                                                            oSegment.set_DataElementValue(1, 0, "T");//_OtherInsurancePST.Trim().Replace("*","")); //T - Tertiary
                                                        }

                                                        //2.Individual Relationship code
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

                                                        //3.Refrence identification
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"22145");///Policy no

                                                        //4. Plan Name
                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIncludePlanname"]) == true)
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance name
                                                        }


                                                        //5.Insurance Type Code  

                                                        if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).ToUpper() == "MA" || Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).ToUpper() == "MB")
                                                        {
                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).ToUpper().Trim() != "PRIMARY")
                                                            {
                                                                oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsTypeCodeMedicare"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Insurance Type Code of the Medicare                                                                
                                                            }
                                                        }


                                                        //9.Claim Filing Indicator
                                                        if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
                                                        }

                                                        #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

                                                        #region AMT - Amount Payer Paid


                                                        string _PayercontactID = Convert.ToString(dtPatientInsurances.Rows[_Insrow]["nContactID"]);
                                                        string _PayerInsuranceID = Convert.ToString(dtPatientInsurances.Rows[_Insrow]["nInsuranceID"]);

                                                        string _amt = getFilteredPayerPaid(oTransaction.TransactionMasterID, oTransaction.TransactionID, _PayercontactID, _PayerInsuranceID, _dtPayment);
                                                        _amt = FormatAmount(_amt);
                                                        if (_amt != "")// && _amt != "0.00" && _amt!="0")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
                                                            oSegment.set_DataElementValue(1, 0, "D");
                                                            oSegment.set_DataElementValue(2, 0, _amt);
                                                        }



                                                        #endregion AMT - Amount

                                                        #region OI - Other Insurance

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
                                                        //Assignment of Benefit.
                                                        bool _bAssignmentofbenefit = false;
                                                        _bAssignmentofbenefit = Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bAssignmentofBenifit"]);
                                                        if (_bAssignmentofbenefit == true)
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "Y");
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "N");
                                                        }

                                                        if (oTransaction.SOF == true)
                                                        {
                                                            oSegment.set_DataElementValue(6, 0, "Y");
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(6, 0, "I");
                                                        }


                                                        #endregion OI - Other Insurance

                                                        //2330A SUBSCRIBER
                                                        #region NM1 SUBSCRIBER NAME - 2330A

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "IL");
                                                        if (_strRelation != "18" && Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIsCompnay"]) == true)
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "2");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sCompanyName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberOrgName"
                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sCompanyName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber CompanyName is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "MI");
                                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMemberID"
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("For Claim No: " + _ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "1");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberLastOrgName"
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberFirstname"
                                                            //7030 Extension.
                                                            //Problem #00000395: Bill with middle initial.
                                                            //Added Middle Initial in Subscriber name.
                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubMName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMiddlename"
                                                            }

                                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                            {
                                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber Last name is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                            {
                                                                oSegment.set_DataElementValue(8, 0, "MI");
                                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMemberID"
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("For Claim No: " + _ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                return "";
                                                            }
                                                        }
                                                        //N3 SUBSCRIBER ADDRESS
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                        if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
                                                        }

                                                        //N4 SUBSCRIBER CITY
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberCity"
                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscrberState"
                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"SubscriberZip"

                                                        if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCountryCode"]).Trim() != "")
                                                        {
                                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCountryCode"]).Trim());
                                                        }


                                                        #endregion NM1 SUBSCRIBER NAME

                                                        #region Payer Information - 2330B

                                                        //2330B SUBSCRIBER/PAYER
                                                        //NM1 PAYER NAME
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                        oSegment.set_DataElementValue(1, 0, "PR");
                                                        oSegment.set_DataElementValue(2, 0, "2");


                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"PayerLastOrgName"                                                                                                      
                                                        if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
                                                            int _row = 0;
                                                            if (_dtPayment.Rows.Count > 0)
                                                            {
                                                                for (_row = 0; _row < _dtPayment.Rows.Count; _row++)
                                                                {
                                                                    if (_dtPayment.Rows[_row]["ContactID"].ToString() == dtPatientInsurances.Rows[_Insrow]["nContactID"].ToString())
                                                                    {
                                                                        break;
                                                                    }

                                                                }
                                                            }


                                                            if (_row != _dtPayment.Rows.Count && dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bIncludeEdiAltPayerID"]))
                                                            {
                                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//PayerID
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//PayerID
                                                            }
                                                        }

                                                        #endregion Payer Information
                                                        if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                                                        {
                                                            if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludeSecondaryPayerAddress"]))
                                                            {
                                                                ////////N3 PAYER ADDRESS
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
                                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceAddress"                                               

                                                                ////////N4 PAYER CITY
                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
                                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceCity"
                                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceState"
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"InsuranceZip"
                                                            }
                                                        }
                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"] != null)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                            if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sEDIAltPayerIDType"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sEDIAltPayerIDType"] != null)
                                                            {
                                                                oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sEDIAltPayerIDType"]).Trim()));
                                                            }
                                                            else
                                                                oSegment.set_DataElementValue(1, 0, "FY");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimOfficeNumber"]).Trim()));
                                                        }
                                                        //Change 5010 add new segment for Claim Remittance Number (Claim control number)

                                                        ////Start - > when loop 2320 reads SBR09=MB then the Medicare Report Number must be submitted in Loop 2330B 
                                                        ////if the setting Include Medicare Claim Reference # on Secondary Claims is on

                                                        //if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludeMedicareClaimRef"]))
                                                        //{
                                                        //    if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "MA" || Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "MB")
                                                        //    {
                                                        //        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"] != null)
                                                        //        {
                                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                        //            oSegment.set_DataElementValue(1, 0, "F8");
                                                        //            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"]).Trim()));
                                                        //        }
                                                        //    }
                                                        //}

                                                        ////End - > when loop 2320 reads SBR09=MB then the Medicare Report Number must be submitted in Loop 2330B 
                                                        ////if the setting Include Medicare Claim Reference # on Secondary Claims is on

                                                        if (FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"]).Trim()) != "" && dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"] != null)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "F8");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sClaimRemittanceRefNo"]).Trim()));
                                                        }

                                                        #region "Set Table Index as per Master SP"

                                                        IndexCount = _Insrow + 11;

                                                        #endregion


                                                        //2330G Billing Provider                                                   
                                                        //NM1 BILLING PROVIDER NAME
                                                        //Commented from gloPM6034 DLL Fix.
                                                        //if (dsMaster.Tables[IndexCount] != null && dsMaster.Tables[IndexCount].Rows.Count > 0)
                                                        //{
                                                        //    if (FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])) != "" && FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifierValue"])) != "")
                                                        //    {
                                                        //        if (FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])) != "0B" && FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])) != "1G")
                                                        //        {
                                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
                                                        //            oSegment.set_DataElementValue(1, 0, "85");
                                                        //            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["EntityType"])));

                                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\REF"));
                                                        //            oSegment.set_DataElementValue(1, 0, FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifier"])));
                                                        //            oSegment.set_DataElementValue(2, 0, FormatString(Convert.ToString(dsMaster.Tables[IndexCount].Rows[0]["SecondaryQualifierValue"])));
                                                        //        }
                                                        //    }
                                                        //}


                                                        #endregion Subscriber Secondary Insurance
                                                    }//End for loop of Patient Insurance 


                                                    int _Noteindex;

                                                    for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
                                                    {
                                                        iItemCount = 1;
                                                        iItemCount = iItemCount + nLine;
                                                        oTransLine = null;
                                                        oTransLine = oTransaction.Lines[nLine];

                                                        #region Service Line
                                                        //******* SUBSCRIBER SERVICE LINE *************************************************************
                                                        //TODO: Get the datatable for service info to add fields of service in EDI file.
                                                        //2400 SERVICE LINE
                                                        sInstance = iItemCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "");
                                                        //LX SERVICE LINE COUNTER
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
                                                        oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

                                                        //SV1 PROFESSIONAL SERVICE
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
                                                        oSegment.set_DataElementValue(1, 1, "HC");

                                                        //Mahesh Nawal 12072010 Check the Crosswalk
                                                        if (oTransLine.CPTCode.ToString().Trim() == oTransLine.CrosswalkCPTCode.ToString().Trim() || oTransLine.CrosswalkCPTCode.ToString().Trim() == "" || oTransLine.CrosswalkCPTCode == null)
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", "").Replace("*", "").Replace("~", "").Replace(":", ""));//"ServiceID"
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(1, 2, oTransLine.CrosswalkCPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        }
                                                        //oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
                                                        if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
                                                        }
                                                        if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                            {
                                                                oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
                                                            }
                                                        }
                                                        if (oTransLine.Mod3Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 5, oTransLine.Mod3Code.ToString());//Modifier 1
                                                        }
                                                        if (oTransLine.Mod4Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 6, oTransLine.Mod4Code.ToString());//Modifier 1
                                                        }
                                                        if (FormatString(Convert.ToString(oTransLine.PrescriptionDesc)) != "")
                                                        {
                                                            oSegment.set_DataElementValue(1, 7, FormatString(Convert.ToString(oTransLine.PrescriptionDesc).Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "")));
                                                        }

                                                        string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

                                                        if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
                                                        }
                                                        else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
                                                        {
                                                            _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
                                                        }
                                                        oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
                                                        if (oTransLine.AnesthesiaUnit > 0)
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "MJ");//MJ stands for minutesoSegment.set_DataElementValue(3, 0, "MJ");//MJ stands for minutes
                                                            oSegment.set_DataElementValue(4, 0, FormatUnit(oTransLine.AnesthesiaUnit.ToString()));//Unit/Quantity
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
                                                            oSegment.set_DataElementValue(4, 0, FormatUnit(oTransLine.Unit.ToString()));//Unit/Quantity                                                    
                                                        }
                                                        #region " Dx Code Pointer changes 5061 "

                                                        //// solving Problem# - 231 
                                                        //// show the Dx Pointer in sequence as they are enter.
                                                        GetDxPointers_EDI5010(oSegment, oTransaction, dtDx, nLine);
                                                        // end

                                                        #endregion " Dx Code Pointer changes 5061 "

                                                        if (Convert.ToBoolean(oTransLine.EMG) == true)
                                                        {
                                                            oSegment.set_DataElementValue(9, 0, "Y");
                                                        }

                                                        if (_bBillEPSDTorFamilyPlanning == true && _bEDPDTSV11 == true && oTransLine.ServiceResultofScreening == true)
                                                        {
                                                            oSegment.set_DataElementValue(11, 0, "Y");
                                                        }

                                                        if (_bBillEPSDTorFamilyPlanning == true && _bEDPDTSV11 == true && oTransLine.FamilyPlanningIndicator == true)
                                                        {
                                                            oSegment.set_DataElementValue(12, 0, "Y");
                                                        }

                                                        //DTP DATE - SERVICE DATE(S)
                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
                                                        oSegment.set_DataElementValue(1, 0, "472");

                                                        if (oTransLine.DateServiceTill != null)
                                                        {
                                                            if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) == Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString()))
                                                                || Convert.ToString(oTransLine.DateServiceTill) == "")
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "D8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"                                                             
                                                            }
                                                            else
                                                            {
                                                                oSegment.set_DataElementValue(2, 0, "RD8");
                                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())) + "-" + Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceTill.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

                                                            }
                                                        }
                                                        else
                                                        {
                                                            oSegment.set_DataElementValue(2, 0, "D8");
                                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
                                                        }



                                                        #endregion

                                                        #region OTAF Amount

                                                        bool _IncludeOTAF = Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIsOTAFAmount"]);
                                                        string _amountallowed = String.Empty;

                                                        _amountallowed = getFilteredLineAllowed(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, _PrimaryInsuranceId, _PrimaryContactID, _dtPayment);
                                                        _amountallowed = FormatAmount(_amountallowed);
                                                        if (_amountallowed != "" && _IncludeOTAF == true)// && _amountallowed!="0.0" && _amountallowed!="0.00")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\CN1"));
                                                            oSegment.set_DataElementValue(1, 0, "09");
                                                            oSegment.set_DataElementValue(2, 0, _amountallowed);
                                                        }

                                                        #endregion

                                                        #region " LINE ITEM CONTROL NUMBER "

                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                        oSegment.set_DataElementValue(1, 0, "6R"); //Provider Control Number
                                                        oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].TransactionDetailID.ToString()); //Line Item Control Number
                                                        #endregion

                                                        #region " CLIA (Clinical Laboratory Improvement Amendment Number) "

                                                        if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "" && oTransaction.Lines[nLine].IsLabCPT == true)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//
                                                        }

                                                        #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "

                                                        #region " Line Notes"
                                                        //Service Line Notes
                                                        _Noteindex = -1;
                                                        for (int _NoteCount = 0; _NoteCount < oTransaction.Lines[nLine].LineNotes.Count; _NoteCount++)
                                                        {
                                                            if ((EOBPaymentSubType)oTransaction.Lines[nLine].LineNotes[_NoteCount].BillingNoteType == EOBPaymentSubType.Charges_BillingNote)
                                                            {
                                                                _Noteindex = _NoteCount;
                                                            }
                                                        }
                                                        if (_Noteindex >= 0)
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\NTE"));
                                                            oSegment.set_DataElementValue(1, 0, "ADD"); //Note Reference Code
                                                            oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].LineNotes[_Noteindex].NoteDescription.ToString().Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "").Trim());//Description                                                            
                                                        }
                                                        #endregion

                                                        #region " NDC Code Loop - 2410 "

                                                        if (oTransLine.NDCCode != null && oTransLine.NDCCode.Trim() != "")
                                                        {
                                                            //Start - Loop 2410 NDC Code implementation
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN"));
                                                            oSegment.set_DataElementValue(2, 0, oTransLine.NDCCodeQualifier.Trim()); //LIN - Qualifier
                                                            oSegment.set_DataElementValue(3, 0, oTransLine.NDCCode.Trim());//LIN - NDC Code 11 digit
                                                        }
                                                        if (oTransLine.NDCUnit != null && oTransLine.NDCUnitCode != null && oTransLine.NDCUnit.Trim() != "" && oTransLine.NDCUnitCode.Trim() != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\CTP"));

                                                            //Delete below element in 5010 
                                                            //if (oTransLine.NDCUnitPricing == "" || oTransLine.NDCUnitPricing == null)
                                                            //{
                                                            //    oSegment.set_DataElementValue(3, 0, "0.00"); //Unit Price
                                                            //}
                                                            //else
                                                            //{
                                                            //    oSegment.set_DataElementValue(3, 0, oTransLine.NDCUnitPricing); //Unit Price
                                                            //}
                                                            // oSegment.set_DataElementValue(3, 0, oTransLine.NDCUnitPricing); //Unit Price
                                                            oSegment.set_DataElementValue(4, 0, oTransLine.NDCUnit); //Quantity
                                                            oSegment.set_DataElementValue(5, 1, oTransLine.NDCUnitCode); //Unit or Basis of Measurement
                                                            //End - Loop 2410 NDC Code implementation
                                                        }
                                                        //Add Prescription Number 
                                                        if (FormatString(oTransLine.Prescription) != null && FormatString(oTransLine.Prescription.Trim()) != "")
                                                        {
                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\REF"));
                                                            oSegment.set_DataElementValue(1, 0, "XZ");
                                                            oSegment.set_DataElementValue(2, 0, FormatString(oTransLine.Prescription.Trim()));
                                                        }



                                                        #endregion " NDC Code Loop - 2410 "


                                                        #region "Ordering Provider Loop -2420"
                                                        if ((PrimaryOrderingProviderID != PrimaryRenderingProviderID) || (PrimaryOrderingProviderID == PrimaryRenderingProviderID && _bincludeorderingprovider == true))
                                                        {
                                                            if (oTransaction.providerQualifier.Trim() == "DK")
                                                            {
                                                                if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                                                {
                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\NM1"));
                                                                    oSegment.set_DataElementValue(1, 0, "DK");
                                                                    oSegment.set_DataElementValue(2, 0, "1");
                                                                    if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sLastName"]).Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(3, 0, FormatString(dtRefProvider.Rows[0]["sLastName"].ToString().Trim())); //"ReferringLastname"
                                                                    }
                                                                    if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sFirstName"]).Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(4, 0, FormatString(dtRefProvider.Rows[0]["sFirstName"].ToString().Trim()));//"ReferringFirstname"
                                                                    }
                                                                    if (FormatString(Convert.ToString(dtRefProvider.Rows[0]["sMiddleName"]).Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(5, 0, dtRefProvider.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
                                                                    }

                                                                    if (FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()) != "")
                                                                    {
                                                                        oSegment.set_DataElementValue(8, 0, "XX");
                                                                        oSegment.set_DataElementValue(9, 0, FormatString(dtRefProvider.Rows[0]["sNPI"].ToString().Trim()));//"NPI"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        #endregion "Ordering Provider Loop"


                                                        #region "SVD -LINE ADJUDICATION INFORMATION"

                                                        DataTable dtSVDdata = null;

                                                        dtSVDdata = getFilteredSVDLine(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, _dtPayment).Copy();


                                                        if (dtSVDdata != null && dtSVDdata.Rows.Count > 0)
                                                        {
                                                            for (int nSVD = 0; nSVD < dtSVDdata.Rows.Count; nSVD++)
                                                            {
                                                                if (Convert.ToString(dtPatientInsurances.Rows[0]["nInsuranceID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != Convert.ToString(dtSVDdata.Rows[nSVD]["InsuranceID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
                                                                {
                                                                    if (Convert.ToString(dtSVDdata.Rows[nSVD]["InsPaidAmount"]).Replace("*", "").Replace("~", "").Replace(":", "").Trim() != "")
                                                                    {
                                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD"));
                                                                        if (dtSVDdata.Rows[nSVD]["AlternatePayerID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToBoolean(dtSVDdata.Rows[nSVD]["bIncludeEdiAltPayerID"]))
                                                                        {
                                                                            oSegment.set_DataElementValue(1, 0, dtSVDdata.Rows[nSVD]["AlternatePayerID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Other Payer identification code
                                                                        }
                                                                        else
                                                                        {
                                                                            oSegment.set_DataElementValue(1, 0, dtSVDdata.Rows[nSVD]["PayerID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Other Payer identification code
                                                                        }

                                                                        oSegment.set_DataElementValue(2, 0, FormatAmount(Convert.ToString(dtSVDdata.Rows[nSVD]["InsPaidAmount"])));//Service Line Paid Amount
                                                                        oSegment.set_DataElementValue(3, 1, "HC");//COMPOSITE MEDICAL PROCEDURE IDENTIFIER
                                                                        //Bug #51048: 00000399 : Claim set up
                                                                        //Description: Replacement CPT not shown in SVD segment if CPTCrosswalk is asociated to patient.
                                                                        //So commented the code and add condition as it is present for sending primary batch.
                                                                        //oSegment.set_DataElementValue(3, 2, dtSVDdata.Rows[nSVD]["CPTCode"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//CPT
                                                                        //Check the Crosswalk
                                                                        if (dtSVDdata.Rows[nSVD]["CPTCode"].ToString().Trim() == dtSVDdata.Rows[nSVD]["sCrossWalkCPTCode"].ToString().Trim() || dtSVDdata.Rows[nSVD]["sCrossWalkCPTCode"].ToString().Trim() == "" || dtSVDdata.Rows[nSVD]["sCrossWalkCPTCode"].ToString() == null)
                                                                        {
                                                                            oSegment.set_DataElementValue(3, 2, dtSVDdata.Rows[nSVD]["CPTCode"].ToString().Replace(".", ""));//"ServiceID"
                                                                        }
                                                                        else
                                                                        {
                                                                            oSegment.set_DataElementValue(3, 2, dtSVDdata.Rows[nSVD]["sCrossWalkCPTCode"].ToString().Replace(".", ""));//"ServiceID"
                                                                        }
                                                                        //Code added to add modifiers in svd segment 06-23-2017
                                                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludeModInSVD"]))
                                                                        {
                                                                            if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                            {
                                                                                oSegment.set_DataElementValue(3, 3, oTransLine.Mod1Code.ToString());
                                                                            }
                                                                            if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                            {
                                                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
                                                                                {
                                                                                    oSegment.set_DataElementValue(3, 3, oTransLine.Mod2Code.ToString());
                                                                                }
                                                                                else
                                                                                {
                                                                                    oSegment.set_DataElementValue(3, 4, oTransLine.Mod2Code.ToString());
                                                                                }
                                                                            }
                                                                            if (oTransLine.Mod3Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                            {
                                                                                oSegment.set_DataElementValue(3, 5, oTransLine.Mod3Code.ToString());
                                                                            }
                                                                            if (oTransLine.Mod4Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
                                                                            {
                                                                                oSegment.set_DataElementValue(3, 6, oTransLine.Mod4Code.ToString());
                                                                            }
                                                                        }
                                                                        if (Convert.ToDecimal(dtSVDdata.Rows[nSVD]["AnesthesiaUnit"]) > 0)
                                                                            oSegment.set_DataElementValue(5, 0, FormatAmount(Convert.ToString(dtSVDdata.Rows[nSVD]["AnesthesiaUnit"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")));//Quantity
                                                                        else
                                                                            oSegment.set_DataElementValue(5, 0, FormatAmount(Convert.ToString(dtSVDdata.Rows[nSVD]["Unit"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")));//Quantity

                                                                        #region "CAS -LINE ADJUSTMENT"

                                                                        DataTable dtcasdata = null;
                                                                        dtcasdata = getFilteredCasData(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, Convert.ToInt64(dtSVDdata.Rows[nSVD]["ContactID"]), Convert.ToInt64(dtSVDdata.Rows[nSVD]["InsuranceID"]), dtAllcasdata);


                                                                        if (dtcasdata != null && dtcasdata.Rows.Count > 0)
                                                                        {


                                                                            string _payerId = "";
                                                                            string _grpCode = "";
                                                                            Int64 _contactId = 0;

                                                                            for (int rIndex = 0; rIndex < dtcasdata.Rows.Count; rIndex++)
                                                                            {
                                                                                _payerId = Convert.ToString(dtcasdata.Rows[rIndex]["PayerID"]);
                                                                                _contactId = Convert.ToInt64(dtcasdata.Rows[rIndex]["ContactID"]);//20100416

                                                                                //if (_payerId.Trim() != "")
                                                                                if (_contactId > 0)
                                                                                {
                                                                                    _grpCode = Convert.ToString(dtcasdata.Rows[rIndex]["GroupCode"]);

                                                                                    for (int dIndex = rIndex + 1; dIndex < dtcasdata.Rows.Count; dIndex++)
                                                                                    {
                                                                                        if (_contactId == Convert.ToInt64(dtcasdata.Rows[dIndex]["ContactID"])
                                                                                        && _grpCode == Convert.ToString(dtcasdata.Rows[dIndex]["GroupCode"]))
                                                                                        {
                                                                                            dtcasdata.Rows[dIndex]["InsuranceID"] = -1;
                                                                                            dtcasdata.Rows[dIndex]["ContactID"] = -1;
                                                                                            dtcasdata.Rows[dIndex]["InsuranceName"] = "";
                                                                                            dtcasdata.Rows[dIndex]["PayerID"] = "";
                                                                                            dtcasdata.Rows[dIndex]["GroupCode"] = "";
                                                                                            dtcasdata.AcceptChanges();
                                                                                        }
                                                                                    }
                                                                                }

                                                                            }
                                                                        }

                                                                        #region "Adding CAS"

                                                                        if (dtcasdata != null && dtcasdata.Rows.Count > 0)
                                                                        {
                                                                            for (int CASIndex = 0, ResonCodeIndex = 1; CASIndex < dtcasdata.Rows.Count; CASIndex++)
                                                                            {

                                                                                if (Convert.ToInt64(dtcasdata.Rows[CASIndex]["ContactID"]) != -1 &&
                                                                                    Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"]) != "")
                                                                                {
                                                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\CAS"));
                                                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"])); //
                                                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["ReasonCode"]));

                                                                                    #region "Amount Formatting"

                                                                                    //FormatAmount(Convert.ToString(dtcasdata.Rows[CASIndex]["Amount"]));
                                                                                    string _ClmTotal = Convert.ToString(dtcasdata.Rows[CASIndex]["Amount"]).Trim();
                                                                                    _ClmTotal = FormatAmount(_ClmTotal);

                                                                                    #endregion

                                                                                    //if (_ClmTotal != String.Empty && _ClmTotal != "0" && _ClmTotal != "0.00")
                                                                                    if (_ClmTotal != "")
                                                                                    {
                                                                                        oSegment.set_DataElementValue(3, 0, _ClmTotal);
                                                                                        ResonCodeIndex = 5;
                                                                                    }

                                                                                }
                                                                                else
                                                                                {
                                                                                    string _Total = Convert.ToString((dtcasdata.Rows[CASIndex]["Amount"]));
                                                                                    _Total = FormatAmount(_Total);

                                                                                    //if (_Total != String.Empty && _Total != "0" && _Total != "0.00")
                                                                                    if (_Total != "")
                                                                                    {
                                                                                        oSegment.set_DataElementValue(ResonCodeIndex, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["ReasonCode"]));

                                                                                        ResonCodeIndex += 1;
                                                                                        oSegment.set_DataElementValue(ResonCodeIndex, 0, _Total);
                                                                                        ResonCodeIndex += 2;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        #endregion



                                                                        #endregion

                                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\DTP"));
                                                                        oSegment.set_DataElementValue(1, 0, "573");
                                                                        oSegment.set_DataElementValue(2, 0, "D8");
                                                                        oSegment.set_DataElementValue(3, 0, dtSVDdata.Rows[nSVD]["ClaimPaidDate"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"ServiceDate"
                                                                        if (dtcasdata != null)
                                                                        {
                                                                            dtcasdata.Dispose();
                                                                            dtcasdata = null;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (dtSVDdata != null)
                                                        {
                                                            dtSVDdata.Dispose();
                                                            dtSVDdata = null;
                                                        }
                                                        #endregion


                                                    }
                                                #endregion " Subscriber "


                                                }//If loop for Patient Insurance
                                                //Transaction Line Loop
                                            }//Transaction SETS Loop
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    throw new Exception(ex.ToString());
                                }
                                finally
                                {
                                    if (oTransaction != null)
                                    {
                                        oTransaction.Dispose();
                                        oTransaction = null;
                                    }
                                    if (dsMaster != null)
                                    {
                                        dsMaster.Dispose();
                                        dsMaster = null;
                                    }

                                }
                            }

                            #region " Save EDI File "

                            sPath = "";                            
                            sPath = gloSettings.FolderSettings.AppTempFolderPath + "837 EDI\\";
                            if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }

                            sEdiFile = GetEDIFileName(sPath, _BatchName);

                            oEdiDoc.Save(sEdiFile);
                            System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
                            string strData;
                            strData = oReader.ReadToEnd();
                            oReader.Close();
                            oReader.Dispose();
                            oReader = null;
                            System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
                            if (_bIsCaptionize)
                            {
                                oWriter.Write(strData.ToUpper());
                            }
                            else
                            {
                                oWriter.Write(strData);
                            }
                            oWriter.Close();
                            oWriter.Dispose();
                            oWriter = null;
                            _result = sEdiFile;

                            #endregion " Save EDI File "

                            #region " Update Claim Manager Table "
                            Int64 _date = 0;
                            Int64 _time = 0;
                            _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                            _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
                            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
                            //Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionMasterID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
                            ogloClaimManager.SetClaimManagerTVP(_nBatchID, thisTransaction.TransactionMasterID, thisTransaction.ClaimNo, thisTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID, odsEDIClaimDetail);
                            ogloClaimManager.Dispose();
                            ogloClaimManager = null;
                            #endregion

                            //DESTROYS OBJECTS
                            oSegment.Dispose();
                            oSegment = null;
                            oTransactionset.Dispose();
                            oTransactionset = null;
                            oGroup.Dispose();
                            oGroup = null;
                            oInterchange.Dispose();
                            oInterchange = null;
                            if (thisTransaction != null)
                            {
                                thisTransaction.Dispose();
                                thisTransaction = null;
                            }

                        }
                    }
                }
            }
            catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
            {
                string _strEx = "";
                ediException oException = null;
                oException = (ediException)Rex.WrappedException;
                _strEx = oException.get_Description();
                gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
                _result = "";
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                _result = "";
            }
            finally
            {
                if (dsHeader != null) { dsHeader.Dispose(); dsHeader = null; }
                if (dsMaster != null) { dsMaster.Dispose(); dsMaster = null; }

                if (oEdiDoc != null) { oEdiDoc.Dispose(); oEdiDoc = null; }
                if (oInterchange != null) { oInterchange.Dispose(); oInterchange = null; }
                if (oGroup != null) { oGroup.Dispose(); oGroup = null; }
                if (oTransactionset != null) { oTransactionset.Dispose(); oTransactionset = null; }
                if (oSegment != null) { oSegment.Dispose(); oSegment = null; }
                if (oSchema != null) { oSchema.Dispose(); oSchema = null; }
                if (oSchemas != null) { oSchemas.Dispose(); oSchemas = null; }
                //if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                //if (ogloBilling != null) { ogloBilling.Dispose(); ogloBilling = null; }
                //if (oTransaction != null) { oTransaction.Dispose(); oTransaction = null; }
                //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
               // if (dtClearingHouseID != null) { dtClearingHouseID.Dispose(); dtClearingHouseID = null; }
            }
            #endregion " Generate EDI "

            //SEF File present IF loop
            return _result;
        }

        public string GetOperatingProviderBox77Setting(Int64 TransactionId, Int64 MstTransactionId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            object _result;
            try
            {
                oDB.Connect(false);

                _strSQL = "SELECT TOP 1 sUBBox77 FROM Contacts_Insurance_DTL WHERE nContactID=(SELECT top 1 nContactID FROM BL_Transaction_Claim_MST WITH (NOLOCK) WHERE nTransactionID=" + TransactionId + " AND nTransactionMasterID=" + MstTransactionId + ")";
                _result = oDB.ExecuteScalar_Query(_strSQL);
                if (_result != null)
                {
                    return _result.ToString();
                }



            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return "";
        }
        private DataTable FillOtherReferrinfProviderInfo(Int64 ContactID, string SettingName, Int64 ProviderID, bool bSameasBillingProvider, string VersionNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlquery = String.Empty;
            DataTable dtOthersInfo = null;
            try
            {
                oDB.Connect(false);

                gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nProviderID", ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nFacilityID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactId", ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sSettingName", SettingName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@bIsEDI", 0, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@bIsPhysician", !bSameasBillingProvider, ParameterDirection.Input, SqlDbType.Bit);

                if (VersionNo == "4010")
                {
                    oDB.Retrive("BL_Get_AlternateID_Settings", oDBParameters, out dtOthersInfo);
                }
                else
                {
                    oDB.Retrive("BL_Get_AlternateID_Settings_5010", oDBParameters, out dtOthersInfo);
                }

                oDB.Disconnect();

                return dtOthersInfo;
                //txtReferringProvider_OtherType.Text = "MM";
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                return null;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                return null;
            }

            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
        }

        #region " Commented & shifted to Ex1 "
        //public string EDI837GenerationForUB(ArrayList SelectedTransactions, ArrayList SelectedMasterTransactions, string _BatchName, bool _IsUndo)
        //{
        //    DataTable dtClearingHouse = new DataTable();
        //    DataTable dtSubmitter = new DataTable();
        //    DataTable dtReceiver = new DataTable();
        //    DataTable dtBillingProvider = new DataTable();
        //    DataTable dtRenderingProvider = new DataTable();
        //    DataTable dtFacility = new DataTable();
        //    DataTable dtPatientInsurances = new DataTable();
        //    DataTable dtReferral = new DataTable();
        //    string _result = "";
        //    string InterchangeHeader = "";
        //    string FunctionalGroupHeader = "";
        //    string TransactionSetHeader = "";
        //    string _ClaimStatus = "1";
        //    string _Priorauthno = "";
        //    Int64 _PrimaryInsuranceId = 0;
        //    Int64 _PrimaryContactID = 0;

        //    if (_IsSEFPresent == true)
        //    {
        //        #region " Generate UB EDI "

        //        string sInstance = "";
        //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
        //        gloUB04 ogloUB04 = new gloUB04();//ub
        //        Transaction oTransaction = new Transaction();
        //        //UB04Transaction oUBTransaction = new UB04Transaction();
        //        bool _SecondayInsuranceAddressDetailsRequired = false;

        //        try
        //        {
        //            //Get Clearing House Information in Datatable

        //            dtClearingHouse = new DataTable();
        //            dtClearingHouse = ogloBilling.GetClearingHouseSettings();
        //            if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
        //            {
        //                MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                return "";
        //            }


        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    Int64 _ProviderID;
        //                    _ProviderID = ogloBilling.GetProviderID(Convert.ToInt64(SelectedTransactions[SelectedTransactions.Count - 1]), _ClinicID);

        //                    if (_ProviderID != 0)
        //                    {
        //                        dtSubmitter = new DataTable();
        //                        dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), _ProviderID);
        //                    }
        //                    if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
        //                    {
        //                        MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                        return "";
        //                    }
        //                }
        //            }


        //            oEdiDoc.New();
        //            oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;
        //            oEdiDoc.set_Property(DocumentPropertyIDConstants.Property_DocumentBufferIO, 2000);

        //            oEdiDoc.SegmentTerminator = "~\r\n";
        //            oEdiDoc.ElementTerminator = "*";
        //            oEdiDoc.CompositeTerminator = ":";

        //            string _TypeOfData = "T";

        //            #region " Interchange Segment "
        //            //Create the interchange segment
        //            ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

        //            if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
        //            {
        //                _TypeOfData = "T";
        //            }
        //            else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
        //            {
        //                _TypeOfData = "P";
        //            }

        //            oSegment.set_DataElementValue(1, 0, "00");
        //            oSegment.set_DataElementValue(3, 0, "00");
        //            oSegment.set_DataElementValue(5, 0, "ZZ");
        //            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_SenderID.Trim());//"1234545");//
        //            oSegment.set_DataElementValue(7, 0, "ZZ");
        //            oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
        //            string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
        //            oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
        //            string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //            oSegment.set_DataElementValue(11, 0, "U");
        //            oSegment.set_DataElementValue(12, 0, "00401");
        //            InterchangeHeader = ControlNumberGeneration("1");
        //            oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
        //            oSegment.set_DataElementValue(14, 0, "0");
        //            oSegment.set_DataElementValue(15, 0, _TypeOfData);
        //            oSegment.set_DataElementValue(16, 0, ":");

        //            #endregion " Interchange Segment "

        //            #region " Functional Group "

        //            //Create the functional group segment
        //            ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X096A1"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
        //            oSegment.set_DataElementValue(1, 0, "HC");
        //            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////_SenderName);
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//// _ReceiverCode.Trim());//"ClarEDI");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
        //            string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //            FunctionalGroupHeader = ControlNumberGeneration("2");
        //            oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
        //            oSegment.set_DataElementValue(7, 0, "X");
        //            oSegment.set_DataElementValue(8, 0, "004010X096A1");

        //            #endregion " Functional Group "

        //            #region ST - TRANSACTION SET HEADER

        //            ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
        //            TransactionSetHeader = ControlNumberGeneration("3");
        //            oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

        //            #endregion ST - TRANSACTION SET HEADER

        //            #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            //Begining Segment 
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
        //            oSegment.set_DataElementValue(1, 0, "0019"); //Herarchical Structure Code
        //            oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
        //            oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Date of claim
        //            string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //"1230");
        //            oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
        //            #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            #region REF - TRANSMISSION TYPE IDENTIFICATION

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
        //            oSegment.set_DataElementValue(1, 0, "87");
        //            oSegment.set_DataElementValue(2, 0, "004010X096A1");//"ReferenceID"

        //            #endregion REF - TRANSMISSION TYPE IDENTIFICATION

        //            #region NM1 - SUBMITTER


        //            //1000A SUBMITTER
        //            //NM1 SUBMITTER

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "41");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
        //            if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //            {
        //                oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
        //                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.
        //            }

        //            //PER SUBMITTER EDI CONTACT INFORMATION
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
        //            oSegment.set_DataElementValue(1, 0, "IC");
        //            if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
        //            }
        //            else
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //            }

        //            oSegment.set_DataElementValue(3, 0, "TE");
        //            if (dtSubmitter != null && Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //            {
        //                oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("(", "").Replace(")", "").Replace("-", "").Replace("_", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone
        //            }

        //            #endregion NM1 - SUBMITTER

        //            #region NM1 - RECEIVER NAME

        //            //1000B RECEIVER
        //            //NM1 RECEIVER NAME
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "40");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"GatewayEDI");//clearing house or contractor or carrier or FI name
        //            if (dtClearingHouse != null && Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]) != "")
        //            {
        //                oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
        //                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.
        //            }

        //            #endregion NM1 - RECEIVER NAME

        //            nHlCount = 0;

        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        //oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        UB04Transaction oUBTransaction = ogloUB04.GetUBClaim(Convert.ToInt64(SelectedMasterTransactions[i]), Convert.ToInt64(SelectedTransactions[i]));
        //                        if (oUBTransaction != null)
        //                        {
        //                            oTransaction = oUBTransaction.Transaction;
        //                        }
        //                        if (oUBTransaction!= null && oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {

        //                                string _ClaimNo = "";

        //                                #region "Formating the Claim Number"

        //                                _ClaimNo = FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNumber));

        //                                #endregion



        //                                Resource oResource = new Resource(_databaseconnectionstring);
        //                                Provider _Provider = null;
        //                                gloPatient.Patient oPatient = null;
        //                                gloPatient.Referrals oReferral = new gloPatient.Referrals();
        //                                if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
        //                                {
        //                                    _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
        //                                    if (_Provider == null)
        //                                    {
        //                                        MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);



        //                                    dtPatientInsurances = ogloPatient.getTransactionInsurances(oTransaction.TransactionMasterID, oTransaction.ResponsibilityNo);
        //                                    oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
        //                                    if (oPatient == null)
        //                                    {

        //                                        MessageBox.Show("Patient information is not present for claim number " + _ClaimNo.ToString() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
        //                                    {

        //                                        MessageBox.Show("Patient " + oPatient.DemographicsDetail.PatientFirstName + " " + oPatient.DemographicsDetail.PatientLastName + " Insurance details are missing for claim number " + _ClaimNo + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

        //                                        return "";
        //                                    }
        //                                    dtFacility = ogloBilling.GetFacilityInfo(oTransaction.FacilityCode, oTransaction.ProviderID);
        //                                    //MaheshB Set Settings As Per Insurance.
        //                                    //Select ContactId as per InsuranceID
        //                                    if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[0]["nInsuranceID"]) != "")
        //                                    {
        //                                        string _strQuery = "SELECT     PatientInsurance_DTL.nPatientID, PatientInsurance_DTL.nInsuranceID, PatientInsurance_DTL.sSubscriberName, " +
        //                                                         " PatientInsurance_DTL.nContactID " +
        //                                                         " FROM         PatientInsurance_DTL INNER JOIN " +
        //                                                         " Contacts_MST ON PatientInsurance_DTL.nContactID = Contacts_MST.nContactID " +
        //                                                         " WHERE     (PatientInsurance_DTL.nInsuranceID = '" + Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"]) + "' and nPatientID='" + oTransaction.PatientID + "' and nClinicID='" + oTransaction.ClinicID + "') ";
        //                                        oDB.Connect(false);
        //                                        DataTable dtContact = new DataTable();
        //                                        oDB.Retrive_Query(_strQuery, out dtContact);
        //                                        if (dtContact != null && dtContact.Rows.Count > 0)
        //                                        {
        //                                            SetContactSettings(Convert.ToInt64(dtContact.Rows[0]["nContactID"]));
        //                                        }
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    SetContactSettings(0);//Set DefaultSettings
        //                                }

        //                                for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
        //                                {
        //                                    //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

        //                                    nHlCount = nHlCount + 1;
        //                                    nHlProvParent = nHlCount;
        //                                    //2000A BILLING/PAY-TO PROVIDER HL LOOP
        //                                    //HL-BILLING PROVIDER
        //                                    string _PayerResponsibilityName = "";
        //                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                    oSegment.set_DataElementValue(3, 0, "20");
        //                                    oSegment.set_DataElementValue(4, 0, "1");


        //                                    #region " Get Clinic Information "

        //                                    string _ClinicName = String.Empty;
        //                                    string _ClinicAddress = String.Empty;
        //                                    string _ClinicStreet = String.Empty;
        //                                    string _ClinicCity = String.Empty;
        //                                    string _ClinicState = String.Empty;
        //                                    string _ClinicZip = String.Empty;
        //                                    string _ClinicNPI = String.Empty;
        //                                    string _ClinicTaxID = String.Empty;

        //                                    oDB.Connect(false);
        //                                    DataTable dtClinic = new DataTable();
        //                                    string _sqlQuery1 = "Select ISNULL(sClinicName,'') as sClinicName,ISNULL(sAddress1,'') as sAddress1,ISNULL(sAddress2,'') as sAddress2,ISNULL(sStreet,'') as sStreet,ISNULL(sCity,'') as sCity,ISNULL(sState,'') as sState,ISNULL(sZIP,'') as sZIP,ISNULL(sPhoneNo,'') as sPhoneNo,ISNULL(sClinicNPI,'') as sClinicNPI, " +
        //                                                "sTAXID as nClinicTaxId from Clinic_MST where nClinicID=" + _ClinicID;
        //                                    oDB.Retrive_Query(_sqlQuery1, out dtClinic);
        //                                    if (dtClinic != null && dtClinic.Rows.Count > 0)
        //                                    {
        //                                        _ClinicName = Convert.ToString(dtClinic.Rows[0]["sClinicName"]);
        //                                        _ClinicAddress = Convert.ToString(dtClinic.Rows[0]["sAddress1"]) + " " + Convert.ToString(dtClinic.Rows[0]["sAddress2"]);
        //                                        _ClinicStreet = Convert.ToString(dtClinic.Rows[0]["sStreet"]);
        //                                        _ClinicCity = Convert.ToString(dtClinic.Rows[0]["sCity"]);
        //                                        _ClinicState = Convert.ToString(dtClinic.Rows[0]["sState"]);
        //                                        _ClinicZip = Convert.ToString(dtClinic.Rows[0]["sZIP"]);
        //                                        //_ClinicPhone = Convert.ToString(dt.Rows[0]["sPhoneNo"]);
        //                                        _ClinicTaxID = Convert.ToString(dtClinic.Rows[0]["nClinicTaxId"]);
        //                                        _ClinicNPI = Convert.ToString(dtClinic.Rows[0]["sClinicNPI"]);
        //                                    }
        //                                    dtClinic = null;
        //                                    oDB.Dispose();
        //                                    #endregion

        //                                    #region Billing Provider


        //                                    //Get the Address Setting for Billing Provider
        //                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //                                    Object _objResult = null;
        //                                    string strBillingSetting = "";
        //                                    oSettings.GetSetting("BillingSetting", Convert.ToInt64(oTransaction.ProviderID), _ClinicID, out _objResult);
        //                                    if (_objResult != null)
        //                                    {
        //                                        // |Company|Practice|Business"
        //                                        strBillingSetting = Convert.ToString(_objResult);
        //                                    }
        //                                    switch (strBillingSetting)
        //                                    {
        //                                        case "Business":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name

        //                                                //Check the Code
        //                                                if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BMState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                            } break;
        //                                        case "Practice":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name

        //                                                if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracAddress1.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BPracState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BPracZIP.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                            } break;
        //                                        case "Company":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name

        //                                                if (_Provider.CompanyNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.CompanyNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyAddress1.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.CompanyState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyZip.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.CompanyTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.CompanyTaxID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                            } break;

        //                                        case "Clinic":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 Clinic  NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _ClinicName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Clinic name


        //                                                if (_ClinicNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _ClinicNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Clinic ID/NPI
        //                                                }
        //                                                //N3 Clinic  ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _ClinicAddress.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Clinic Address

        //                                                //N4 Clinic  LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _ClinicCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));////Clinic City
        //                                                oSegment.set_DataElementValue(2, 0, _ClinicState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Clinic state
        //                                                oSegment.set_DataElementValue(3, 0, _ClinicZip.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//Clinic ZIP

        //                                                //REF 
        //                                                if (_ClinicTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    oSegment.set_DataElementValue(2, 0, _ClinicTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                            } break;
        //                                        default:

        //                                            //2010AA BILLING PROVIDER
        //                                            //NM1 BILLING PROVIDER NAME

        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "85");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name


        //                                            oSegment.set_DataElementValue(8, 0, "XX");
        //                                            if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider ID/NPI
        //                                            }

        //                                            //N3 BILLING PROVIDER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Replace("*", "").Replace("~", "").Replace(":", ""));//Provider Address

        //                                            //N4 BILLING PROVIDER LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Replace("*", "").Replace("~", "").Replace(":", ""));////Provider City
        //                                            oSegment.set_DataElementValue(2, 0, _Provider.BMState.Replace("*", "").Replace("~", "").Replace(":", ""));//Provider state
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//Provider ZIP

        //                                            //REF 
        //                                            if (_Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                            }
        //                                            //REF 
        //                                            else if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)                                                        
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                            }

        //                                            break;
        //                                    }

        //                                    #endregion

        //                                    //'******************************************************************************************************
        //                                    //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
        //                                    //'******************************************************************************************************
        //                                    #region Subscriber
        //                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
        //                                    {
        //                                        string _strRelation = "";
        //                                        string _strInsuranceType = "";
        //                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //                                        _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //                                        if (_strInsuranceType == "MB")
        //                                        {
        //                                            if (_strRelation != "18")
        //                                            {
        //                                                //_strRelation = "18"; 
        //                                            }
        //                                        }

        //                                        #region Subscriber HL Loop - 2000B

        //                                        nHlCount = nHlCount + 1;
        //                                        nHlSubscriberParent = nHlCount;

        //                                        //2000B SUBSCRIBER HL LOOP
        //                                        //HL-SUBSCRIBER
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                        oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                        oSegment.set_DataElementValue(3, 0, "22");

        //                                        if (_strRelation == "18")
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "0");
        //                                        }
        //                                        else
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "1");

        //                                        }

        //                                        //SBR SUBSCRIBER INFORMATION
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));

        //                                        #region "Responsiblity No"

        //                                        if (oTransaction.ResponsibilityNo == 1)
        //                                        {
        //                                            oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST);//"P");
        //                                        }
        //                                        else if (oTransaction.ResponsibilityNo == 2)
        //                                        {
        //                                            oSegment.set_DataElementValue(1, 0, "S");//_SubscriberInsurancePST);//"P");
        //                                        }
        //                                        else if (oTransaction.ResponsibilityNo == 3)
        //                                        {
        //                                            oSegment.set_DataElementValue(1, 0, "T");//_SubscriberInsurancePST);//"P");
        //                                        }

        //                                        #endregion

        //                                        if (_strRelation == "18")
        //                                        {
        //                                            oSegment.set_DataElementValue(2, 0, "18");//20091222                                                    
        //                                        }

        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        {
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
        //                                        }

        //                                        //This is Claim filling Indicator code in EDI implementation guide.
        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        {
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
        //                                        }

        //                                        //2010BA SUBSCRIBER
        //                                        //NM1 SUBSCRIBER NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "IL");
        //                                        oSegment.set_DataElementValue(2, 0, "1");
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberLastOrgName"
        //                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberFirstname"


        //                                        ////For WorkerComp and AutoClaimNo.
        //                                        //if (Convert.ToString(oTransaction.WorkersCompNo).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(8, 0, "MI");
        //                                        //    oSegment.set_DataElementValue(9, 0, Convert.ToString(oTransaction.WorkersCompNo).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
        //                                        //}
        //                                        //else
        //                                        if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        {
        //                                            oSegment.set_DataElementValue(8, 0, "MI");
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Insurance Id"
        //                                        }

        //                                        //N3 SUBSCRIBER ADDRESS
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"

        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress2"

        //                                        //N4 SUBSCRIBER CITY
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberCity"
        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscrberState"
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"SubscriberZip"

        //                                        #endregion SubscriberHL Loop - 2000B
        //                                        //Add the Self and Dependent Loop
        //                                        string _SubscriberGender = "";
        //                                        if (_strRelation == "18")
        //                                        {

        //                                            //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "") == "")
        //                                            {
        //                                                //MessageBox.Show("For Claim No:" + _ClaimNo + Environment.NewLine + " State or City or ZipCode for Subscriber is not present.");
        //                                                //return "";
        //                                            }

        //                                        }
        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        {
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");

        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"

        //                                            _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //                                            if (_SubscriberGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "OTHER")
        //                                            {
        //                                                _SubscriberGender = "U";
        //                                            }
        //                                            oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                        }
        //                                        else
        //                                        {
        //                                            //Sub-Claim No if Claim is Splitted.
        //                                            //UB04
        //                                            //MessageBox.Show("For ClaimNo:" + _ClaimNo + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                            //return "";
        //                                        }



        //                                        #region Payer Information Loop 2010BB
        //                                        //2010BC SUBSCRIBER/PAYER
        //                                        //NM1 PAYER NAME
        //                                        string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Length > 35)
        //                                        {
        //                                            _ModifiedPayerName = "";
        //                                            _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Substring(0, 34);

        //                                        }
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "PR");
        //                                        oSegment.set_DataElementValue(2, 0, "2");
        //                                        oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"PayerLastOrgName"
        //                                        if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Trim() != "")
        //                                        {
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Trim());//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                        }

        //                                        string str = Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Trim();
        //                                        ////////N3 PAYER ADDRESS
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceAddress"

        //                                        ////////N4 PAYER CITY
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceCity"
        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceState"
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"InsuranceZip"
        //                                        #endregion

        //                                        if (_strRelation != "18")
        //                                        {
        //                                            nHlCount = nHlCount + 1;
        //                                            //2000B DEPENDENT HL LOOP
        //                                            //HL-DEPENDENT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                            oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
        //                                            oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
        //                                            oSegment.set_DataElementValue(3, 0, "23");
        //                                            oSegment.set_DataElementValue(4, 0, "0");

        //                                            //PAT - PATIENT/DEPENDENT INFORMATION

        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //01 - Spouse 19 - Child

        //                                            #region " Patient Info"

        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "QC");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientLastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient Last Name
        //                                            oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientFirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Patient First Name

        //                                            //N3 - ADDRESS INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientAddress1.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"Address"

        //                                            //N4 - GEOGRAPHIC LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientCity.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"City"
        //                                            oSegment.set_DataElementValue(2, 0, oPatient.DemographicsDetail.PatientState.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"State"
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientZip.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"Zip"

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oPatient.DemographicsDetail.PatientDOB.ToShortDateString())));
        //                                            if (oPatient.DemographicsDetail.PatientGender.Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || oPatient.DemographicsDetail.PatientGender.Trim().Trim().Replace("*", "").Replace("~", "").Replace(":", "").ToUpper() == "OTHER")
        //                                            {
        //                                                oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"                                                                   
        //                                            }
        //                                            else
        //                                            {
        //                                                oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientGender.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberGender"
        //                                            }

        //                                            #endregion " Patient Info"

        //                                        }
        //                                        //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
        //                                        //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
        //                                        string _FirstPOS = "";
        //                                        string _NewPOS = "";
        //                                        string _ClaimTotal = "";
        //                                        iItemCount = 0;
        //                                        decimal _claimAmount = 0;
        //                                        for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                        {
        //                                            oTransLine = new TransactionLine();
        //                                            oTransLine = oTransaction.Lines[nLine];
        //                                            _claimAmount = _claimAmount + oTransLine.Total;
        //                                            _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                            _NewPOS = oTransLine.POSCode;
        //                                            oTransLine.Dispose();//UB04
        //                                        }

        //                                        _ClaimTotal = _claimAmount.ToString("#0.00");
        //                                        if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                        {
        //                                            _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                        }
        //                                        else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                        {
        //                                            _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                        }

        //                                        #region Claim Details - Loop 2300
        //                                        //2300 CLAIM
        //                                        //CLM CLAIM LEVEL INFORMATION
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));


        //                                        oSegment.set_DataElementValue(1, 0, _ClaimNo); //Patient Account no         

        //                                        oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount
        //                                        oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //21 - Inpatient Hospital

        //                                        if (oTransaction.IsRebill == true)
        //                                        {
        //                                            _ClaimStatus = "7";
        //                                        }
        //                                        else
        //                                        {
        //                                            _ClaimStatus = "1";
        //                                        }
        //                                        oSegment.set_DataElementValue(5, 2, "A");//UB HardCoded Facility Code Qualifier
        //                                        oSegment.set_DataElementValue(5, 3, "1"); //Question......
        //                                        oSegment.set_DataElementValue(6, 0, "Y");

        //                                        #region

        //                                        //if (_IsAccessAssignment == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(7, 0, "A");
        //                                        //}
        //                                        //else if (_IsAccessAssignment == true && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == false)
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(7, 0, "P");
        //                                        //}
        //                                        //else if (_IsAccessAssignment == false && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == false)
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(7, 0, "P");
        //                                        //}
        //                                        //else if (_IsAccessAssignment == false && Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(7, 0, "C");
        //                                        //}
        //                                        //if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bAssignmentofBenifit"]) == true)
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(8, 0, "Y");
        //                                        //}
        //                                        //else
        //                                        //{
        //                                        //    oSegment.set_DataElementValue(8, 0, "N");
        //                                        //}
        //                                        #endregion

        //                                        oSegment.set_DataElementValue(7, 0, "A");
        //                                        oSegment.set_DataElementValue(8, 0, "Y");

        //                                        oSegment.set_DataElementValue(9, 0, "Y");
        //                                        //oSegment.set_DataElementValue(10, 0, "C");//UB
        //                                        if (oTransaction.AutoClaim == true)
        //                                        {
        //                                            if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                            {
        //                                                oSegment.set_DataElementValue(11, 1, "AA");
        //                                                oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                            }
        //                                        }

        //                                        oSegment.set_DataElementValue(18, 0, "Y");//UB04

        //                                        #region "Statement Dates"

        //                                        if (oUBTransaction.MaxDOS.ToString() != "" && oUBTransaction.MinDOS.ToString() !="")
        //                                        {
        //                                            string StatementDate=gloDateMaster.gloDate.DateAsNumber(oUBTransaction.MinDOS.ToShortDateString())+"-"+gloDateMaster.gloDate.DateAsNumber(oUBTransaction.MaxDOS.ToShortDateString());
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                            oSegment.set_DataElementValue(1, 0, "434");
        //                                            oSegment.set_DataElementValue(2, 0, "RD8");
        //                                            oSegment.set_DataElementValue(3, 0, StatementDate);//Claim Date
        //                                        }

        //                                        #endregion

        //                                        #region 
        //                                        //string OnsetDate = "";
        //                                        //if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "")
        //                                        //{
        //                                        //    if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                        //    {
        //                                        //        OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                        //        ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "431");
        //                                        //        oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //        oSegment.set_DataElementValue(3, 0, OnsetDate);//Claim Date
        //                                        //    }
        //                                        //    else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                        //    {
        //                                        //        OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                        //        ////DTP DATE OF CURRENT INJURY
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "431");
        //                                        //        oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //        oSegment.set_DataElementValue(3, 0, OnsetDate);   //Claim Date
        //                                        //    }
        //                                        //    if (oTransaction.AutoClaim == true)
        //                                        //    {
        //                                        //        if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                        //        {
        //                                        //            OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                        //            ////DTP DATE OF ACCIDENT 
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "439");
        //                                        //            oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //            oSegment.set_DataElementValue(3, 0, OnsetDate);//Claim Date
        //                                        //        }
        //                                        //    }
        //                                        //}

        //                                        ////20100401 UnComment the Code of the Discharge Date by Mahesh Nawal
        //                                        ////if (_FirstPOS.Trim().Replace("*", "").Replace("~","").Replace(":","") != "11")
        //                                        ////{
        //                                        //if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                        //{
        //                                        //    //DTP DATE OF Hospitalization (Admission) 
        //                                        //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //    oSegment.set_DataElementValue(1, 0, "435");
        //                                        //    oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                        //}

        //                                        //if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                        //{
        //                                        //    //DTP DATE OF Discharge 
        //                                        //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //    oSegment.set_DataElementValue(1, 0, "096");
        //                                        //    oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                        //    //
        //                                        //}
        //                                        //// }

        //                                        //if (oTransaction.WorkersComp == true)
        //                                        //{
        //                                        //    if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                        //    {
        //                                        //        //DTP DATE OF (Intial Disability period last day worked)
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "297");
        //                                        //        oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //        oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                        //        //
        //                                        //    }

        //                                        //    if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                        //    {
        //                                        //        //DTP DATE OF (Intial Disability period return to work)
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "296");
        //                                        //        oSegment.set_DataElementValue(2, 0, "D8");
        //                                        //        oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                        //        //
        //                                        //    }
        //                                        //}
        //                                        #endregion

        //                                        #region "Admission Date"
        //                                        if ((oUBTransaction.MinDOS).ToShortDateString() != "" && oUBTransaction.MinDOS!=DateTime.MaxValue)
        //                                        {
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                            oSegment.set_DataElementValue(1, 0, "435");
        //                                            oSegment.set_DataElementValue(2, 0, "DT");
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oUBTransaction.MinDOS.ToShortDateString())));
        //                                        }

        //                                        #endregion

        //                                        #region "Admission Type Code"

        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CL1"));

        //                                        if (Convert.ToString(oUBTransaction.AdmissionTypeCode)!="")
        //                                        {
        //                                            oSegment.set_DataElementValue(1, 0, oUBTransaction.AdmissionTypeCode);
        //                                        }

        //                                        if (Convert.ToString(oUBTransaction.AdmissionSource) != "")
        //                                        {
        //                                            oSegment.set_DataElementValue(2, 0, oUBTransaction.AdmissionSource);
        //                                        }

        //                                        if (Convert.ToString(oUBTransaction.DischargeStatus) != "")
        //                                        {
        //                                            oSegment.set_DataElementValue(3, 0, oUBTransaction.DischargeStatus);
        //                                        }

        //                                        #endregion


        //                                        #region Patient Paid Amount.

        //                                        DataTable dtTotalPaid = new DataTable();
        //                                        dtTotalPaid = getPateintPaid(oTransaction.TransactionID);

        //                                        string _AmountPaid = String.Empty;
        //                                        if (dtTotalPaid != null && dtTotalPaid.Rows.Count > 0)
        //                                        {
        //                                            if (Convert.ToString(dtTotalPaid.Rows[0]["TotalPaid"]).Trim() != "")
        //                                                _AmountPaid = FormatAmount(Convert.ToString(dtTotalPaid.Rows[0]["TotalPaid"]));
        //                                        }
        //                                        #endregion

        //                                        #region "Prior Authorization Number"

        //                                        if (_AmountPaid.Trim() != string.Empty && _AmountPaid.Trim() != "0.00" && _AmountPaid.Trim() != "0.0" && _AmountPaid.Trim() != "0")
        //                                        {
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
        //                                            oSegment.set_DataElementValue(1, 0, "F5");
        //                                            oSegment.set_DataElementValue(2, 0, _AmountPaid);
        //                                        }

        //                                        _Priorauthno = GetPriorAuthorizationNumber(oTransaction.TransactionMasterID).Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //                                        if (_Priorauthno != "")
        //                                        {
        //                                            //REF CLEARING HOUSE CLAIM NUMBER
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                            oSegment.set_DataElementValue(1, 0, "G1");
        //                                            oSegment.set_DataElementValue(2, 0, _Priorauthno); //Claim No
        //                                        }
        //                                        //20100426 gloPM5040

        //                                        #endregion

        //                                        #endregion

        //                                        #region Claim Remittance Reference #
        //                                        //20100426 gloPM5040

        //                                        if ((Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"])).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "" && _ClaimStatus == "7")
        //                                        {
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                            oSegment.set_DataElementValue(1, 0, "F8");
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sClaimRemittanceRefNo"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                        }

        //                                        #endregion

        //                                        #region HI - Diagnosis

        //                                        //HI HEALTH CARE DIAGNOSIS CODES                                                                                             
        //                                        DataTable dtDx = new DataTable();
        //                                        dtDx = GetTransaction_DX(oTransaction.TransactionMasterID, oTransaction.TransactionID);
        //                                        bool IsOtherDignosisAdded = false;
        //                                        int DxOtherIndex = 0;

        //                                        string code_no = "";
        //                                        if (dtDx != null && dtDx.Rows.Count > 0)
        //                                        {


        //                                            for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                            {
        //                                                if (DxIndex == 0)
        //                                                {
        //                                                    if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                                        if (code_no == "")
        //                                                        {
        //                                                            code_no = "'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            code_no += ",'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") + "'";
        //                                                        }
        //                                                        oSegment.set_DataElementValue(1, 1, "BK");
        //                                                        oSegment.set_DataElementValue(1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", ""));

        //                                                        //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                                        oSegment.set_DataElementValue(2, 1, "BJ");
        //                                                        oSegment.set_DataElementValue(2, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }
        //                                                }
        //                                                if (DxIndex >0)
        //                                                {
        //                                                    if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {

        //                                                        if (code_no == "")
        //                                                        {
        //                                                            code_no = "'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("~", "").Replace(":", "") + "'";
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            code_no += ",'" + Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("~", "").Replace(":", "") + "'";
        //                                                        }
        //                                                        if (IsOtherDignosisAdded == false)
        //                                                        {
        //                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                                        }
        //                                                        DxOtherIndex++;
        //                                                        IsOtherDignosisAdded = true;
        //                                                        oSegment.set_DataElementValue(DxOtherIndex, 1, "BF");
        //                                                        oSegment.set_DataElementValue(DxOtherIndex, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("~", "").Replace(":", ""));
        //                                                    }
        //                                                }
        //                                            }

        //                                            if (code_no != "" && ogloBilling.GetSettings("ISCHECKINVALIDICD9") == false)
        //                                              {
        //                                                code_no = IsValidICD9Code_New(code_no, _IsUndo);
        //                                            }
        //                                            if (ogloBilling.GetSettings("ISCHECKINVALIDICD9") == true)
        //                                            {
        //                                                code_no = "";
        //                                            }
        //                                        }

        //                                        if (code_no != "")
        //                                        {
        //                                            string _message;

        //                                            _message = "ICD9 is Invalid." + Environment.NewLine + "For Claim No :" + _ClaimNo + Environment.NewLine + "Code : " + code_no + "  " + Environment.NewLine + "Do you want to Continue? ";//" + Environment.NewLine + ""Description : " + Convert.ToString(ReturnValue) + "                                                            

        //                                            if (MessageBox.Show(_message, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
        //                                            {
        //                                                return "";
        //                                            }
        //                                        }
        //                                        #endregion

        //                                        #region Attending Provider(Same as Billing Provider)


        //                                        //Get the Address Setting for Billing Provider

        //                                        switch (strBillingSetting)
        //                                        {
        //                                            case "Business":
        //                                                {
        //                                                    //2010AA BILLING PROVIDER
        //                                                    //NM1 BILLING PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "71");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name
        //                                                    if (_Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }
        //                                                    if (_Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                    //Check the Code
        //                                                    if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(8, 0, "XX");
        //                                                        oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "AT");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));

        //                                                    //REF 
        //                                                    if (_Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));

        //                                                    }
        //                                                    //REF 
        //                                                    else if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                } break;
        //                                            case "Practice":
        //                                                {
        //                                                    //2010AA BILLING PROVIDER
        //                                                    //NM1 BILLING PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "71");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name
        //                                                    if (_Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }
        //                                                    if (_Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                    if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(8, 0, "XX");
        //                                                        oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider ID/NPI
        //                                                    }

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "AT");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));



        //                                                    //REF 
        //                                                    if (_Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }
        //                                                    //REF 
        //                                                    else if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                } break;
        //                                            case "Company":
        //                                                {
        //                                                    //2010AA BILLING PROVIDER
        //                                                    //NM1 BILLING PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "71");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.CompanyName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name

        //                                                    if (_Provider.CompanyNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(8, 0, "XX");
        //                                                        oSegment.set_DataElementValue(9, 0, _Provider.CompanyNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider ID/NPI
        //                                                    }

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\PRV"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "AT");
        //                                                    //oSegment.set_DataElementValue(2, 0, "ZZ");
        //                                                    //oSegment.set_DataElementValue(9, 0, _Provider.Taxonomy.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));


        //                                                    //REF 
        //                                                    if (_Provider.CompanyTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                } break;

        //                                            case "Clinic":
        //                                                {
        //                                                    //2010AA BILLING PROVIDER
        //                                                    //NM1 Clinic  NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "71");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");
        //                                                    oSegment.set_DataElementValue(3, 0, _ClinicName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Clinic name


        //                                                    if (_ClinicNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(8, 0, "XX");
        //                                                        oSegment.set_DataElementValue(9, 0, _ClinicNPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Clinic ID/NPI
        //                                                    }

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\PRV"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "AT");
        //                                                    //oSegment.set_DataElementValue(2, 0, "ZZ");
        //                                                    //oSegment.set_DataElementValue(9, 0, _Clini.Taxonomy.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));


        //                                                    //REF 
        //                                                    if (_ClinicTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                        oSegment.set_DataElementValue(2, 0, _ClinicTaxID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                    }

        //                                                } break;
        //                                            default:

        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME

        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "71");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name
        //                                                if (_Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }
        //                                                if (_Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider ID/NPI
        //                                                }


        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)                                                        
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                                }

        //                                                break;
        //                                        }



        //                                        #endregion





        //                                        #region Referring Provider - 2310A

        //                                        //if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider == true)
        //                                        //{

        //                                        //    dtReferral = new DataTable();
        //                                        //    //ReferalProviderID_New==>This ID is ConatctID from gloPM5050.
        //                                        //    dtReferral = GetReferralProvider(oTransaction.PatientID, oTransaction.ProviderID, oTransaction.ReferalProviderID_New, oTransaction.IsSameAsBillingProvider, _databaseconnectionstring);
        //                                        //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                        //    {
        //                                        //        //2310B Referring PROVIDER
        //                                        //        //NM1 Referring PROVIDER NAME
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                        //        oSegment.set_DataElementValue(2, 0, "1");
        //                                        //        if (Convert.ToString(dtReferral.Rows[0]["sLastName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //"ReferringLastname"
        //                                        //        }
        //                                        //        if (Convert.ToString(dtReferral.Rows[0]["sFirstName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"ReferringFirstname"
        //                                        //        }
        //                                        //        if (Convert.ToString(dtReferral.Rows[0]["sMiddleName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                        //        }
        //                                        //        //20100125 Mahesh Nawal
        //                                        //        if (dtReferral != null && dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            oSegment.set_DataElementValue(8, 0, "XX");
        //                                        //            oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"NPI"
        //                                        //        }

        //                                        //        //PRV REFERRING PROVIDER INFORMATION
        //                                        //        //20100414 Uragent Outage
        //                                        //        if (Convert.ToString(dtReferral.Rows[0]["sTaxonomy"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "RF");
        //                                        //            oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                        //            oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Reference Identification
        //                                        //        }

        //                                        //        //REF
        //                                        //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                        //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"1039255");// 
        //                                        //        }
        //                                        //    }
        //                                        //}
        //                                        //else
        //                                        //{
        //                                        //    if (_Provider != null)
        //                                        //    {
        //                                        //        //2310B Referring PROVIDER
        //                                        //        //NM1 Referring PROVIDER NAME
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                        //        oSegment.set_DataElementValue(2, 0, "1");
        //                                        //        oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //"ReferringLastname"
        //                                        //        oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"ReferringFirstname"
        //                                        //        oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                        //        //20100125 Mahesh Nawal
        //                                        //        if (_Provider.NPI.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            oSegment.set_DataElementValue(8, 0, "XX");
        //                                        //            oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"NPI"
        //                                        //        }

        //                                        //        //PRV REFERRING PROVIDER INFORMATION
        //                                        //        //20100414 Urgent Outage
        //                                        //        if (_Provider != null && _Provider.Taxonomy.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "RF");
        //                                        //            oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                        //            oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Reference Identification
        //                                        //        }
        //                                        //        //REF
        //                                        //        if (_Provider.EmployerID.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //        {
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                        //            oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"1039255");// 
        //                                        //        }
        //                                        //        else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                        //        {
        //                                        //            if (_Provider.SSN.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //            {
        //                                        //                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                        //                oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                        //                oSegment.set_DataElementValue(2, 0, _Provider.SSN.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"1039255");// 
        //                                        //            }
        //                                        //        }
        //                                        //    }
        //                                        //}
        //                                        #region
        //                                        //Commented on 20100616 gloPM5050
        //                                        /*
        //                                        if (oTransaction.ReferralProviderID > 0)
        //                                        {
        //                                            oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            dtReferral = new DataTable();
        //                                            string _sqlQuery = "";

        //                                            oDB.Connect(false);

        //                                            //_sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                            //           " ISNULL(sName,'') AS sName,  " +
        //                                            //           " ISNULL(sContact,'') AS sContact,   " +
        //                                            //           " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                            //           " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                            //           " ISNULL(sCity,'') AS sCity,   " +
        //                                            //           " ISNULL(sState,'') AS sState,   " +
        //                                            //           " ISNULL(sZIP,'') AS sZIP,   " +
        //                                            //           " ISNULL(sPhone,'') AS sPhone,   " +
        //                                            //           " ISNULL(sFax,'') AS sFax,   " +
        //                                            //           " ISNULL(sEmail,'') AS sEmail,   " +
        //                                            //           " ISNULL(sURL,'') AS sURL,   " +
        //                                            //           " ISNULL(sMobile,'') AS sMobile,   " +
        //                                            //           " ISNULL(sPager,'') AS sPager,   " +
        //                                            //           " ISNULL(sNotes,'') AS sNotes,   " +
        //                                            //           " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                            //           " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                            //           " ISNULL(sLastName,'') AS sLastName,   " +
        //                                            //           " ISNULL(sGender,'') AS sGender,   " +
        //                                            //           " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                            //           " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                            //           " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                            //           " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                            //           " ISNULL(sNPI,'') AS sNPI,   " +
        //                                            //           " ISNULL(sDegree,'') AS sDegree   " +
        //                                            //           " FROM  Patient_DTL " +
        //                                            //           " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";


        //                                            //20100322 Take the Data from Contact MST 

        //                                            _sqlQuery = "SELECT ISNULL(Contacts_MST.sFirstName,'') AS sFirstName, " +
        //                                                         "ISNULL(Contacts_MST.sMiddleName,'') AS sMiddleName , ISNULL(Contacts_MST.sLastName,'') AS sLastName ,ISNULL(Contacts_MST.sGender,'') AS  sGender ,  " +
        //                                                         "ISNULL(Contacts_Physician_DTL.sTaxonomy,'') AS sTaxonomy , ISNULL(Contacts_Physician_DTL.sTaxonomyDesc,'') AS sTaxonomyDesc, " +
        //                                                         "ISNULL(Contacts_Physician_DTL.sTaxID,'') AS sTaxID,ISNULL(Contacts_Physician_DTL.sNPI,'') AS sNPI  " +
        //                                                         "FROM Contacts_MST left outer join Contacts_Physician_DTL ON Contacts_MST.nContactID = Contacts_Physician_DTL.nContactID  " +
        //                                                         " WHERE  Contacts_MST.nContactID =(SELECT ISNULL(nContactId,0) from Patient_DTL " +
        //                                                         " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + ") AND ISNULL(Contacts_MST.nClinicID,1)=" + ClinicID + " AND ISNULL(bIsBlocked,0)= 0";



        //                                            oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            {
        //                                                //2310B Referring PROVIDER
        //                                                //NM1 Referring PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "DN");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","")); //"ReferringLastname"
        //                                                oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"ReferringFirstname"
        //                                                oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));
        //                                                //20100125 Mahesh Nawal
        //                                                if (dtReferral != null && dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"NPI"
        //                                                }

        //                                                //PRV REFERRING PROVIDER INFORMATION
        //                                                //20100414 Uragent Outage
        //                                                if (Convert.ToString(dtReferral.Rows[0]["sTaxonomy"]).Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//Reference Identification
        //                                                }

        //                                                //REF
        //                                                if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"1039255");// 
        //                                                }
        //                                                else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                {
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"1039255");// 
        //                                                }
        //                                            }
        //                                        }
        //                                        else
        //                                        {
        //                                            if (_Provider != null)
        //                                            {
        //                                                //2310B Referring PROVIDER
        //                                                //NM1 Referring PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "DN");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "").Replace("~","").Replace(":","")); //"ReferringLastname"
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"ReferringFirstname"
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));
        //                                                //20100125 Mahesh Nawal
        //                                                if (_Provider.NPI.ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") !="")
        //                                                {
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"NPI"
        //                                                }

        //                                                //PRV REFERRING PROVIDER INFORMATION
        //                                                //20100414 Urgent Outage
        //                                                if (_Provider != null && _Provider.Taxonomy.ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//Reference Identification
        //                                                }
        //                                                //REF
        //                                                if (_Provider.EmployerID.ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"1039255");// 
        //                                                }
        //                                                else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                {
        //                                                    if (_Provider.SSN.ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }
        //                                        }

        //                                        */
        //                                        //oReferral = oPatient.Referrals;
        //                                        //if (oReferral.Count > 0)
        //                                        //{
        //                                        //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                        //    dtReferral = new DataTable();
        //                                        //    string _sqlQuery = "";

        //                                        //    oDB.Connect(false);
        //                                        //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                        //                " FROM Contacts_MST  " +
        //                                        //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                        //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                        //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                        //    {
        //                                        //        //2310B Referring PROVIDER
        //                                        //        //NM1 Referring PROVIDER NAME
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                        //        oSegment.set_DataElementValue(2, 0, "1");
        //                                        //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","")); //"ReferringLastname"
        //                                        //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"ReferringFirstname"
        //                                        //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));
        //                                        //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                        //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"NPI"

        //                                        //        //PRV REFERRING PROVIDER INFORMATION
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                        //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                        //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//Reference Identification

        //                                        //        //REF
        //                                        //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":","") != "")
        //                                        //        {
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                        //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "").Replace("~","").Replace(":",""));//"1039255");// 
        //                                        //        }
        //                                        //        else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                        //        {
        //                                        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                        //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                        //            oSegment.set_DataElementValue(2, 0, "232929");//"1039255");// 
        //                                        //        }
        //                                        //    }
        //                                        //}
        //                                        #endregion
        //                                        #endregion Referring Provider
        //                                        //Look at Nm1 from Facilty

        //                                        #region Rendering Provider - 2310B

        //                                        //_Provider = null;
        //                                        //_Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                        //if (_Provider != null)
        //                                        //{
        //                                        //    //2310B RENDERING PROVIDER
        //                                        //    //NM1 RENDERING PROVIDER NAME
        //                                        //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                        //    oSegment.set_DataElementValue(1, 0, "82");
        //                                        //    oSegment.set_DataElementValue(2, 0, "1");
        //                                        //    oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Billing provider name
        //                                        //    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));
        //                                        //    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));

        //                                        //    if (_Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //    {
        //                                        //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                        //        oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//oProviderDetails.NPI);//Billing provider ID/NPI
        //                                        //    }

        //                                        //    //20100416 Urgent Outage 5031
        //                                        //    //PRV RENDERING PROVIDER INFORMATION                                                        
        //                                        //    if (_Provider.Taxonomy.Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                        //    {
        //                                        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                        //        oSegment.set_DataElementValue(1, 0, "PE");
        //                                        //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                        //        oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//Reference Identification
        //                                        //    }
        //                                        //}


        //                                        #endregion

        //                                        #region Facility - 2310D

        //                                        //2310E SERVICE LOCATION
        //                                        //NM1 SERVICE FACILITY LOCATION

        //                                        if (IsPos11(oTransaction.FacilityCode, oTransaction.ContactID) == true)
        //                                        {

        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "FA");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"FacilityName"


        //                                            if (Convert.ToString(dtFacility.Rows[0]["FacilityNPI"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//NPI
        //                                            }

        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {


        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"FacilityZip"

        //                                                if (dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "" || dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "") == "")
        //                                                {
        //                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + " Facility Details(City/State/ZIP Code) is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                                    return "";
        //                                                }
        //                                            }

        //                                        }
        //                                        #endregion

        //                                        #region SET PRIMARY INSURANCE IDS

        //                                        DataView _dv = dtPatientInsurances.DefaultView;

        //                                        _dv.RowFilter = "(sInsuranceFlag)='Primary'";

        //                                        DataTable _dtAllowed = _dv.ToTable();
        //                                        if (_dtAllowed != null && _dtAllowed.Rows.Count > 0)
        //                                        {
        //                                            if (Convert.ToString(_dtAllowed.Rows[0]["nInsuranceID"]) != "")
        //                                            {
        //                                                _PrimaryInsuranceId = Convert.ToInt64(_dtAllowed.Rows[0]["nInsuranceID"]);
        //                                            }
        //                                            if (Convert.ToString(_dtAllowed.Rows[0]["nContactID"]) != "")
        //                                            {
        //                                                _PrimaryContactID = Convert.ToInt64(_dtAllowed.Rows[0]["nContactID"]);
        //                                            }

        //                                        }

        //                                        #endregion





        //                                        for (int _Insrow = 1; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                        {
        //                                            #region Subscriber Secondary Insurance - Loop 2320

        //                                            //LOOP - 2320
        //                                            //To send all subscriber info in PM5030
        //                                            //if (_Insrow < 3)
        //                                            // {

        //                                            #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                            //1.Payer Resposibilty Sequence No.

        //                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "Primary")
        //                                            {
        //                                                _PayerResponsibilityName = "Primary";
        //                                                oSegment.set_DataElementValue(1, 0, "P");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
        //                                            }
        //                                            else if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "Secondary")
        //                                            {
        //                                                _PayerResponsibilityName = "Secondary";
        //                                                oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //S- Secondary
        //                                            }
        //                                            else if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sInsuranceFlag"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "Tertiary")
        //                                            {
        //                                                _PayerResponsibilityName = "Tertiary";
        //                                                oSegment.set_DataElementValue(1, 0, "T");//_OtherInsurancePST.Trim().Replace("*","")); //T - Tertiary
        //                                            }

        //                                            //2.Individual Relationship code
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                            //3.Refrence identification
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"22145");///Policy no

        //                                            //5.Insurance Type Code  Implement the New Logic
        //                                           // oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsTypeCodeDefault"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Insurance Type code Default


        //                                            //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                            ////8.Employment Status Code(Not Used)
        //                                            //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                            //9.Claim Filing Indicator
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Commercial Insurance company
        //                                            }
        //                                            //20100416 Urgent Outage 5031
        //                                            //else
        //                                            //{
        //                                            //    MessageBox.Show("For Claim No: " + _ClaimNo + Environment.NewLine + "Claim Filing Indicator Code for " + _PayerResponsibilityName + " Payer is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                            //    return "";
        //                                            //}
        //                                            #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                            #region CAS - Claim Adjustment


        //                                            #endregion CAS - Claim Adjustment

        //                                            #region AMT - Amount Payer Paid

        //                                            //string _amt = getPayerPaidAmount(oTransaction.TransactionID, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]), Convert.ToString(dtPatientInsurances.Rows[_Insrow]["nContactID"]), Convert.ToString(dtPatientInsurances.Rows[_Insrow]["nInsuranceID"]));
        //                                            //_amt = FormatAmount(_amt);
        //                                            //if (_amt != "")// && _amt != "0.00" && _amt!="0")
        //                                            //{
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                            //    oSegment.set_DataElementValue(1, 0, "D");
        //                                            //    oSegment.set_DataElementValue(2, 0, _amt);
        //                                            //}


        //                                            #endregion AMT - Amount

        //                                            #region Allowed Amount
        //                                            //string _ClaimAllowedAmount = getClaimAllowedAmount(_PrimaryInsuranceId, _PrimaryContactID, oTransaction.TransactionID);
        //                                            //_ClaimAllowedAmount = FormatAmount(_ClaimAllowedAmount);
        //                                            ////if (_amt != "" && _amt != "0.00" && _amt != "0" && _amt != "0.0" && _ClaimAllowedAmount.Trim() != string.Empty && _ClaimAllowedAmount.Trim() != "0.00" && _ClaimAllowedAmount.Trim() != "0.0")
        //                                            //if (_amt != "" && _ClaimAllowedAmount.Trim() != "")
        //                                            //{
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                            //    oSegment.set_DataElementValue(1, 0, "B6");
        //                                            //    oSegment.set_DataElementValue(2, 0, _ClaimAllowedAmount);
        //                                            //}

        //                                            #endregion

        //                                            #region DMG  - Demographic


        //                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]) != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");

        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"
        //                                                    if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]).ToUpper().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "OTHER")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"
        //                                                    }
        //                                                }
        //                                                else
        //                                                {
        //                                                    MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + " subscriber gender is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                                    return "";
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + " subscriber date of birth is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                                return "";
        //                                            }
        //                                            #endregion DMG  - Demographic

        //                                            #region OI - Other Insurance

        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                            //Assignment of Benefit.
        //                                            bool _bAssignmentofbenefit = false;
        //                                            _bAssignmentofbenefit = Convert.ToBoolean(dtPatientInsurances.Rows[_Insrow]["bAssignmentofBenifit"]);
        //                                            if (_bAssignmentofbenefit == true)
        //                                            {
        //                                                oSegment.set_DataElementValue(3, 0, "Y");
        //                                            }
        //                                            else
        //                                            {
        //                                                oSegment.set_DataElementValue(3, 0, "Y"); //UB04
        //                                            }
        //                                            //oSegment.set_DataElementValue(4, 0, "C"); //UB04

        //                                            if (oPatient.PatientDemographicOtherInfo.SOF == true)
        //                                            {
        //                                                oSegment.set_DataElementValue(6, 0, "Y");
        //                                            }
        //                                              else
        //                                            {
        //                                                oSegment.set_DataElementValue(6, 0, "Y"); //UB04
        //                                            }


        //                                            #endregion OI - Other Insurance

        //                                            //2330A SUBSCRIBER
        //                                            #region NM1 SUBSCRIBER NAME - 2330A

        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "IL");
        //                                            oSegment.set_DataElementValue(2, 0, "1");

        //                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberLastOrgName"
        //                                            }
        //                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberFirstname"

        //                                            if (Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
        //                                            {
        //                                                MessageBox.Show("For ClaimNo:" + _ClaimNo + "  " + _PayerResponsibilityName + "  Subscriber Last name is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                                return "";
        //                                            }
        //                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(8, 0, "MI");
        //                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberMemberID"
        //                                            }
        //                                            else
        //                                            {
        //                                                MessageBox.Show("For Claim No: " + _ClaimNo + Environment.NewLine + "Insurance ID for " + _PayerResponsibilityName + " subscriber is not present. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                                return "";
        //                                            }

        //                                            //N3 SUBSCRIBER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"

        //                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr2"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberAddress"
        //                                            }

        //                                            //N4 SUBSCRIBER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscriberCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"SubscrberState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"SubscriberZip"

        //                                            #endregion NM1 SUBSCRIBER NAME

        //                                            #region Payer Information - 2330B

        //                                            //2330B SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");


        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"PayerLastOrgName"                                                                                                      
        //                                            if (dtPatientInsurances != null && Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//PayerID
        //                                            }

        //                                            if (_SecondayInsuranceAddressDetailsRequired)
        //                                            {
        //                                            //    //No Loop Exists....
        //                                            //    ////////N3 PAYER ADDRESS
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            //    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceAddress"

        //                                            //    ////////N4 PAYER CITY
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            //    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceCity"
        //                                            //    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"InsuranceState"
        //                                            //    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""));//"InsuranceZip"
        //                                            }
        //                                            #endregion Payer Information

        //                                            //   }

        //                                            #endregion Subscriber Secondary Insurance
        //                                        }//End for loop of Patient Insurance 
        //                                        //}//end of IF loop for POS
        //                                        int _Noteindex;
        //                                        for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                        {
        //                                            iItemCount = 1;
        //                                            iItemCount = iItemCount + nLine;
        //                                            oTransLine = new TransactionLine();
        //                                            oTransLine = oTransaction.Lines[nLine];

        //                                            #region Service Line
        //                                            //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                            //2400 SERVICE LINE
        //                                            sInstance = iItemCount.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "");
        //                                            //LX SERVICE LINE COUNTER
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                            oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                            //SV1 PROFESSIONAL SERVICE
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV2"));


        //                                            //Revenue
        //                                            if (oTransLine.RevenueCode.ToString().Trim() != "")// || oTransLine.CrosswalkCPTCode.ToString().Trim() == "" || oTransLine.CrosswalkCPTCode == null)
        //                                            {
        //                                                oSegment.set_DataElementValue(1, 0, oTransLine.RevenueCode.ToString().Replace(".", ""));//"ServiceID"
        //                                            }

        //                                            //CPT
        //                                            oSegment.set_DataElementValue(2, 1, "HC");
        //                                            if (oTransLine.CPTCode.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(2, 2, oTransLine.CPTCode.ToString());
        //                                            }

        //                                            if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(2, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                            }
        //                                            if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") != "")
        //                                            {
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "") == "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 3, oTransLine.Mod2Code.ToString());
        //                                                }
        //                                                else
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                }
        //                                            }
        //                                            string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                            if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                            }
        //                                            else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                            }
        //                                            oSegment.set_DataElementValue(3, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                            oSegment.set_DataElementValue(4, 0, "UN");//UN stands for UNITS
        //                                            oSegment.set_DataElementValue(5, 0, oTransLine.Unit.ToString());//Unit/Quantity

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {

        //                                                //UB04
        //                                                //for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                //{
        //                                                //    if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
        //                                                //    {
        //                                                //        oSegment.set_DataElementValue(7, 1, Convert.ToString(DxIndex + 1));
        //                                                //    }
        //                                                //    if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
        //                                                //    {
        //                                                //        oSegment.set_DataElementValue(7, 2, Convert.ToString(DxIndex + 1));
        //                                                //    }
        //                                                //    if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
        //                                                //    {
        //                                                //        oSegment.set_DataElementValue(7, 3, Convert.ToString(DxIndex + 1));
        //                                                //    }
        //                                                //    if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
        //                                                //    {
        //                                                //        oSegment.set_DataElementValue(7, 4, Convert.ToString(DxIndex + 1));
        //                                                //    }
        //                                                //}
        //                                            }
        //                                            //DTP DATE - SERVICE DATE(S)
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                            oSegment.set_DataElementValue(1, 0, "472");
        //                                            oSegment.set_DataElementValue(2, 0, "D8");
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"



        //                                            #endregion

        //                                            #region OTAF Amount

        //                                            //UB04
        //                                            //bool _IncludeOTAF = IsInCludeOTAFAmount(Convert.ToInt64(oTransaction.ContactID));//(Convert.ToInt64(dtPatientInsurances.Rows[_Insrow]["nInsuranceID"]),oTransaction.PatientID,oTransaction.ClinicID);
        //                                            //string _amountallowed = String.Empty;

        //                                            //_amountallowed = getAllowedAmount(oTransaction.TransactionMasterID, oTransaction.Lines[nLine].TransactionMasterDetailID, _PrimaryInsuranceId, _PrimaryContactID);
        //                                            //_amountallowed = FormatAmount(_amountallowed);
        //                                            //if (_amountallowed != "" && _IncludeOTAF == true)// && _amountallowed!="0.0" && _amountallowed!="0.00")
        //                                            //{
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\CN1"));
        //                                            //    oSegment.set_DataElementValue(1, 0, "09");
        //                                            //    oSegment.set_DataElementValue(2, 0, _amountallowed);
        //                                            //}

        //                                            #endregion

        //                                            #region " LINE ITEM CONTROL NUMBER "

        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                            //oSegment.set_DataElementValue(1, 0, "6R"); //Provider Control Number
        //                                            //oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].TransactionDetailID.ToString()); //Line Item Control Number
        //                                            #endregion

        //                                            #region " CLIA (Clinical Laboratory Improvement Amendment Number) "

        //                                            if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                            }

        //                                            #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "

        //                                            #region Allowed Amount(Approved Amount)
        //                                            //UB04
        //                                            //if (_amountallowed != "")// && _amountallowed!="0.0" && _amountallowed!="0.00")
        //                                            //{
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\AMT"));
        //                                            //    oSegment.set_DataElementValue(1, 0, "AAE"); //Clinical Laboratory Improvement Amendment Number
        //                                            //    oSegment.set_DataElementValue(2, 0, _amountallowed);//
        //                                            //}

        //                                            #endregion

        //                                            #region " Line Notes"
        //                                            ////Service Line Notes
        //                                            //UB04
        //                                            //_Noteindex = -1;
        //                                            //for (int _NoteCount = 0; _NoteCount < oTransaction.Lines[nLine].LineNotes.Count; _NoteCount++)
        //                                            //{
        //                                            //    if ((EOBPaymentSubType)oTransaction.Lines[nLine].LineNotes[_NoteCount].BillingNoteType == EOBPaymentSubType.Charges_BillingNote)
        //                                            //    {
        //                                            //        _Noteindex = _NoteCount;
        //                                            //    }
        //                                            //}
        //                                            //if (_Noteindex >= 0)
        //                                            //{
        //                                            //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\NTE"));
        //                                            //    oSegment.set_DataElementValue(1, 0, "ADD"); //Note Reference Code
        //                                            //    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].LineNotes[_Noteindex].NoteDescription.ToString().Replace("\r\n", " ").Replace("*", "").Replace("~", "").Replace(":", "").Trim());//Description                                                            
        //                                            //}
        //                                            #endregion

        //                                            #region " NDC Code Loop - 2410 "

        //                                            if (oTransLine.NDCCode != null && oTransLine.NDCCode.Trim() != "")
        //                                            {
        //                                                //Start - Loop 2410 NDC Code implementation
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN"));
        //                                                oSegment.set_DataElementValue(2, 0, oTransLine.NDCCodeQualifier.Trim()); //LIN - Qualifier
        //                                                oSegment.set_DataElementValue(3, 0, oTransLine.NDCCode.Trim());//LIN - NDC Code 11 digit
        //                                            }
        //                                            if (oTransLine.NDCUnit != null && oTransLine.NDCUnitCode != null && oTransLine.NDCUnit.Trim() != "" && oTransLine.NDCUnitCode.Trim() != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LIN\\CTP"));
        //                                                oSegment.set_DataElementValue(3, 0, oTransLine.NDCUnitPricing); //Unit Price
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.NDCUnit); //Quantity
        //                                                oSegment.set_DataElementValue(5, 1, oTransLine.NDCUnitCode); //Unit or Basis of Measurement
        //                                                //End - Loop 2410 NDC Code implementation
        //                                            }


        //                                            #endregion " NDC Code Loop - 2410 "

        //                                            //UB04
        //                                            /* 
        //                                            #region "SVD -LINE ADJUDICATION INFORMATION"
        //                                            //UB04

        //                                            DataTable dtPaymentdata = new DataTable();
        //                                            gloDatabaseLayer.DBParameters oDBParameters;
        //                                            oDBParameters = new gloDatabaseLayer.DBParameters();
        //                                            oDBParameters.Add("@nMasterTransactionID", oTransaction.Lines[nLine].TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
        //                                            oDBParameters.Add("@nMasterTransactionDetailID", oTransaction.Lines[nLine].TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);

        //                                            oDB.Retrive("BL_SELECT_SVD_DATA", oDBParameters, out dtPaymentdata);

        //                                            for (int nSVD = 0; nSVD < dtPaymentdata.Rows.Count; nSVD++)
        //                                            {
        //                                                //This is added to avoid Rebilled CAS CODES.
        //                                                //if (Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", "").Replace("~","").Replace(":","") != Convert.ToString(dtPaymentdata.Rows[nSVD]["PayerID"]).Trim().Replace("*", "").Replace("~","").Replace(":",""))
        //                                                //{
        //                                                if (Convert.ToString(dtPatientInsurances.Rows[0]["nInsuranceID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "") != Convert.ToString(dtPaymentdata.Rows[nSVD]["InsuranceID"]).Trim().Replace("*", "").Replace("~", "").Replace(":", ""))
        //                                                {
        //                                                    if (Convert.ToString(dtPaymentdata.Rows[nSVD]["InsPaidAmount"]).Replace("*", "").Replace("~", "").Replace(":", "").Trim() != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD"));
        //                                                        oSegment.set_DataElementValue(1, 0, dtPaymentdata.Rows[nSVD]["PayerID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", "")); //Other Payer identification code
        //                                                        oSegment.set_DataElementValue(2, 0, FormatAmount(Convert.ToString(dtPaymentdata.Rows[nSVD]["InsPaidAmount"])));//Service Line Paid Amount
        //                                                        oSegment.set_DataElementValue(3, 1, "HC");//COMPOSITE MEDICAL PROCEDURE IDENTIFIER
        //                                                        oSegment.set_DataElementValue(3, 2, dtPaymentdata.Rows[nSVD]["CPTCode"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//CPT
        //                                                        oSegment.set_DataElementValue(5, 0, FormatAmount(Convert.ToString(dtPaymentdata.Rows[nSVD]["Unit"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "")));//Quantity

        //                                                        #region "CAS -LINE ADJUSTMENT"

        //                                                        DataTable dtcasdata = new DataTable();
        //                                                        gloDatabaseLayer.DBParameters oDBParams;
        //                                                        oDBParams = new gloDatabaseLayer.DBParameters();
        //                                                        oDBParams.Add("@nMasterTransactionID", oTransaction.Lines[nLine].TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
        //                                                        oDBParams.Add("@nMasterTransactionDetailID", oTransaction.Lines[nLine].TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
        //                                                        oDBParams.Add("@sPayerID", dtPaymentdata.Rows[nSVD]["PayerID"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""), ParameterDirection.Input, SqlDbType.VarChar);

        //                                                        oDBParams.Add("@nContactID", Convert.ToInt64(dtPaymentdata.Rows[nSVD]["ContactID"]), ParameterDirection.Input, SqlDbType.BigInt);
        //                                                        //20100406
        //                                                        oDBParams.Add("@nInsuranceID", Convert.ToInt64(dtPaymentdata.Rows[nSVD]["InsuranceID"]), ParameterDirection.Input, SqlDbType.BigInt);

        //                                                        oDB.Retrive("BL_SELECT_CAS_DATA", oDBParams, out dtcasdata);
        //                                                        oDBParameters.Dispose();


        //                                                        if (dtcasdata != null && dtcasdata.Rows.Count > 0)
        //                                                        {


        //                                                            string _payerId = "";
        //                                                            string _grpCode = "";
        //                                                            Int64 _contactId = 0;

        //                                                            for (int rIndex = 0; rIndex < dtcasdata.Rows.Count; rIndex++)
        //                                                            {
        //                                                                _payerId = Convert.ToString(dtcasdata.Rows[rIndex]["PayerID"]);
        //                                                                _contactId = Convert.ToInt64(dtcasdata.Rows[rIndex]["ContactInsuranceID"]);//20100416

        //                                                                //if (_payerId.Trim() != "")
        //                                                                if (_contactId > 0)
        //                                                                {
        //                                                                    _grpCode = Convert.ToString(dtcasdata.Rows[rIndex]["GroupCode"]);

        //                                                                    for (int dIndex = rIndex + 1; dIndex < dtcasdata.Rows.Count; dIndex++)
        //                                                                    {
        //                                                                        if (_contactId == Convert.ToInt64(dtcasdata.Rows[dIndex]["ContactInsuranceID"])
        //                                                                        && _grpCode == Convert.ToString(dtcasdata.Rows[dIndex]["GroupCode"]))
        //                                                                        {
        //                                                                            dtcasdata.Rows[dIndex]["PatientInsuranceID"] = -1;
        //                                                                            dtcasdata.Rows[dIndex]["ContactInsuranceID"] = -1;
        //                                                                            dtcasdata.Rows[dIndex]["ContactInsuraneName"] = "";
        //                                                                            dtcasdata.Rows[dIndex]["PayerID"] = "";
        //                                                                            dtcasdata.Rows[dIndex]["GroupCode"] = "";
        //                                                                            dtcasdata.AcceptChanges();
        //                                                                        }
        //                                                                    }
        //                                                                }

        //                                                            }
        //                                                        }

        //                                                        #region "Adding CAS"

        //                                                        for (int CASIndex = 0, ResonCodeIndex = 1; CASIndex < dtcasdata.Rows.Count; CASIndex++)
        //                                                        {

        //                                                            //if (Convert.ToString(dtcasdata.Rows[CASIndex]["PayerID"]) != "" &&
        //                                                            //    Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"]) != "")
        //                                                            if (Convert.ToInt64(dtcasdata.Rows[CASIndex]["ContactInsuranceID"]) != -1 &&
        //                                                                Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"]) != "")
        //                                                            {
        //                                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\CAS"));
        //                                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["GroupCode"])); //
        //                                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["ReasonCode"]));

        //                                                                #region "Amount Formatting"

        //                                                                //FormatAmount(Convert.ToString(dtcasdata.Rows[CASIndex]["Amount"]));
        //                                                                string _ClmTotal = Convert.ToString(dtcasdata.Rows[CASIndex]["Amount"]).Trim();
        //                                                                _ClmTotal = FormatAmount(_ClmTotal);

        //                                                                #endregion

        //                                                                //if (_ClmTotal != String.Empty && _ClmTotal != "0" && _ClmTotal != "0.00")
        //                                                                if (_ClmTotal != "")
        //                                                                {
        //                                                                    oSegment.set_DataElementValue(3, 0, _ClmTotal);
        //                                                                    ResonCodeIndex = 5;
        //                                                                }

        //                                                            }
        //                                                            else
        //                                                            {
        //                                                                string _Total = Convert.ToString((dtcasdata.Rows[CASIndex]["Amount"]));
        //                                                                _Total = FormatAmount(_Total);

        //                                                                //if (_Total != String.Empty && _Total != "0" && _Total != "0.00")
        //                                                                if (_Total != "")
        //                                                                {
        //                                                                    oSegment.set_DataElementValue(ResonCodeIndex, 0, Convert.ToString(dtcasdata.Rows[CASIndex]["ReasonCode"]));

        //                                                                    ResonCodeIndex += 1;
        //                                                                    oSegment.set_DataElementValue(ResonCodeIndex, 0, _Total);
        //                                                                    ResonCodeIndex += 2;
        //                                                                }
        //                                                            }
        //                                                        }

        //                                                        #endregion

        //                                                        //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\CAS"));
        //                                                        //oSegment.set_DataElementValue(1, 0, "CO"); //
        //                                                        //oSegment.set_DataElementValue(2, 0, "45");
        //                                                        //oSegment.set_DataElementValue(3, 0, "4");





        //                                                        #endregion

        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\SVD\\DTP"));
        //                                                        oSegment.set_DataElementValue(1, 0, "573");
        //                                                        oSegment.set_DataElementValue(2, 0, "D8");
        //                                                        oSegment.set_DataElementValue(3, 0, dtPaymentdata.Rows[nSVD]["ClaimPaidDate"].ToString().Trim().Replace("*", "").Replace("~", "").Replace(":", ""));//"ServiceDate"
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                             */
        //                                        }
        //                                    #endregion " Subscriber "


        //                                    }//If loop for Patient Insurance
        //                                    //Transaction Line Loop
        //                                }//Transaction SETS Loop
        //                            }
        //                        }
        //                    }

        //                    #region " Save EDI File "

        //                    sPath = "";
        //                    //sPath = AppDomain.CurrentDomain.BaseDirectory + "837 EDI\\";
        //                    sPath = appSettings["StartupPath"].ToString() + "\\" + "837 EDI\\";
        //                    if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }

        //                    sEdiFile = GetEDIFileName(sPath, _BatchName);

        //                    oEdiDoc.Save(sEdiFile);
        //                    System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
        //                    string strData;
        //                    strData = oReader.ReadToEnd();
        //                    oReader.Close();

        //                    System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
        //                    oWriter.Write(strData);
        //                    oWriter.Close();
        //                    _result = sEdiFile;

        //                    #endregion " Save EDI File "

        //                    #region " Update Claim Manager Table "
        //                    Int64 _date = 0;
        //                    Int64 _time = 0;
        //                    _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
        //                    _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
        //                    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
        //                    Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionMasterID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
        //                    ogloClaimManager.Dispose();
        //                    #endregion

        //                    //DESTROYS OBJECTS
        //                    oSegment.Dispose();
        //                    oTransactionset.Dispose();
        //                    oGroup.Dispose();
        //                    oInterchange.Dispose();

        //                }
        //            }
        //        }
        //        catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
        //        {
        //            string _strEx = "";
        //            ediException oException = null;
        //            oException = (ediException)Rex.WrappedException;
        //            _strEx = oException.get_Description();
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
        //            _result = "";
        //        }
        //        catch (Exception ex)
        //        {
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //            _result = "";
        //        }
        //        finally
        //        {
        //            if (dtClearingHouse != null) { dtClearingHouse.Dispose(); }
        //            if (dtSubmitter != null) { dtSubmitter.Dispose(); }
        //            if (dtReceiver != null) { dtReceiver.Dispose(); }
        //            if (dtBillingProvider != null) { dtBillingProvider.Dispose(); }
        //            if (dtRenderingProvider != null) { dtRenderingProvider.Dispose(); }
        //            if (dtFacility != null) { dtFacility.Dispose(); }
        //            if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); }
        //            if (dtReferral != null) { dtReferral.Dispose(); }
        //        }
        //        #endregion " Generate EDI "

        //    }//SEF File present IF loop
        //    return _result;
        //}
        #endregion " Commented & shifted to Ex1 "

        #region

        //public string EDI837Generation(ArrayList SelectedTransactions, string _BatchName)
        //{
        //    DataTable dtClearingHouse = new DataTable();
        //    DataTable dtSubmitter = new DataTable();
        //    DataTable dtReceiver = new DataTable();
        //    DataTable dtBillingProvider = new DataTable();
        //    DataTable dtRenderingProvider = new DataTable();
        //    DataTable dtFacility = new DataTable();
        //    DataTable dtPatientInsurances = new DataTable();
        //    DataTable dtReferral = new DataTable();
        //    string _result = "";
        //    string InterchangeHeader = "";
        //    string FunctionalGroupHeader = "";
        //    string TransactionSetHeader = "";
        //    string _ClaimStatus = "1";
        //    if (_IsSEFPresent == true)
        //    {
        //        #region " Generate EDI "

        //        string sEntity = "";
        //        string sInstance = "";
        //        string _strSQL = "";
        //        DataTable dt;
        //        string _BillingProviderDetails = "";
        //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
        //        bool IsSecondaryInsurance = false;
        //        Transaction oTransaction = new Transaction();
        //        bool _SecondayInsuranceAddressDetailsRequired = false;
        //        //string _result = "";
        //        try
        //        {
        //            //Get Clearing House Information in Datatable

        //            dtClearingHouse = new DataTable();
        //            dtClearingHouse = ogloBilling.GetClearingHouseSettings();
        //            if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
        //            {
        //                MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                return "";
        //            }
        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //Get Submitter Information in Datatable
        //                                dtSubmitter = new DataTable();
        //                                dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), oTransaction.ProviderID);
        //                                if (dtSubmitter == null && dtSubmitter.Rows.Count < 1)
        //                                {
        //                                    MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                    return "";
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            oEdiDoc.New();
        //            oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;
        //            oEdiDoc.set_Property(DocumentPropertyIDConstants.Property_DocumentBufferIO, 2000);

        //            oEdiDoc.SegmentTerminator = "~\r\n";
        //            oEdiDoc.ElementTerminator = "*";
        //            oEdiDoc.CompositeTerminator = ":";

        //            string _TypeOfData = "T";

        //            #region " Interchange Segment "
        //            //Create the interchange segment
        //            ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

        //            if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
        //            {
        //                _TypeOfData = "T";
        //            }
        //            else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
        //            {
        //                _TypeOfData = "P";
        //            }

        //            oSegment.set_DataElementValue(1, 0, "00");
        //            oSegment.set_DataElementValue(3, 0, "00");
        //            oSegment.set_DataElementValue(5, 0, "ZZ");
        //            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//_SenderID.Trim());//"1234545");//
        //            oSegment.set_DataElementValue(7, 0, "ZZ");
        //            oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
        //            string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
        //            oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
        //            string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", ""));
        //            oSegment.set_DataElementValue(11, 0, "U");
        //            oSegment.set_DataElementValue(12, 0, "00401");
        //            InterchangeHeader = ControlNumberGeneration("1");
        //            oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
        //            oSegment.set_DataElementValue(14, 0, "0");
        //            oSegment.set_DataElementValue(15, 0, _TypeOfData);
        //            oSegment.set_DataElementValue(16, 0, ":");

        //            #endregion " Interchange Segment "

        //            #region " Functional Group "

        //            //Create the functional group segment
        //            ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X098A1"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
        //            oSegment.set_DataElementValue(1, 0, "HC");
        //            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", ""));////_SenderName);
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", ""));//// _ReceiverCode.Trim());//"ClarEDI");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
        //            string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", ""));
        //            FunctionalGroupHeader = ControlNumberGeneration("2");
        //            oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
        //            oSegment.set_DataElementValue(7, 0, "X");
        //            oSegment.set_DataElementValue(8, 0, "004010X098A1");

        //            #endregion " Functional Group "

        //            #region ST - TRANSACTION SET HEADER

        //            ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
        //            TransactionSetHeader = ControlNumberGeneration("3");
        //            oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

        //            #endregion ST - TRANSACTION SET HEADER

        //            #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            //Begining Segment 
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
        //            oSegment.set_DataElementValue(1, 0, "0019"); //Herarchical Structure Code
        //            oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
        //            oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", ""));//Date of claim
        //            string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "");
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "")); //"1230");
        //            oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
        //            #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            #region REF - TRANSMISSION TYPE IDENTIFICATION

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
        //            oSegment.set_DataElementValue(1, 0, "87");
        //            oSegment.set_DataElementValue(2, 0, "004010X098A1");//"ReferenceID"

        //            #endregion REF - TRANSMISSION TYPE IDENTIFICATION

        //            #region NM1 - SUBMITTER


        //            //1000A SUBMITTER
        //            //NM1 SUBMITTER

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "41");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
        //            oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
        //            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.


        //            //PER SUBMITTER EDI CONTACT INFORMATION
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
        //            oSegment.set_DataElementValue(1, 0, "IC");
        //            if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "") == "")
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
        //            }
        //            else
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", ""));
        //            }

        //            oSegment.set_DataElementValue(3, 0, "TE");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", "").Replace("(", "").Replace(")", "").Replace("-", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone


        //            #endregion NM1 - SUBMITTER

        //            #region NM1 - RECEIVER NAME

        //            //1000B RECEIVER
        //            //NM1 RECEIVER NAME
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "40");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", ""));//"GatewayEDI");//clearing house or contractor or carrier or FI name
        //            oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
        //            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.

        //            #endregion NM1 - RECEIVER NAME

        //            nHlCount = 0;

        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //FillAllDetails(oTransaction);
        //                                Resource oResource = new Resource(_databaseconnectionstring);
        //                                Provider _Provider = null;
        //                                gloPatient.Patient oPatient = null;
        //                                gloPatient.Referrals oReferral = new gloPatient.Referrals();
        //                                if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
        //                                {
        //                                    _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
        //                                    if (_Provider == null)
        //                                    {
        //                                        MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
        //                                    dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID);
        //                                    oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
        //                                    if (oPatient == null)
        //                                    {
        //                                        MessageBox.Show("Patient information is not present for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
        //                                    {
        //                                        MessageBox.Show("Patient " + oPatient.DemographicsDetail.PatientFirstName + " " + oPatient.DemographicsDetail.PatientLastName + " Insurance details are missing for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    dtFacility = ogloBilling.GetFacilityInfo(oTransaction.FacilityCode, oTransaction.ProviderID);


        //                                }

        //                                for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
        //                                {
        //                                    //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

        //                                    nHlCount = nHlCount + 1;
        //                                    nHlProvParent = nHlCount;
        //                                    //2000A BILLING/PAY-TO PROVIDER HL LOOP
        //                                    //HL-BILLING PROVIDER

        //                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                    oSegment.set_DataElementValue(3, 0, "20");
        //                                    oSegment.set_DataElementValue(4, 0, "1");

        //                                    #region Billing Provider


        //                                    //Get the Address Setting for Billing Provider
        //                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //                                    Object _objResult = null;
        //                                    string strBillingSetting = "";
        //                                    oSettings.GetSetting("BillingSetting", Convert.ToInt64(oTransaction.ProviderID), _ClinicID, out _objResult);
        //                                    if (_objResult != null)
        //                                    {
        //                                        // |Company|Practice|Business"
        //                                        strBillingSetting = Convert.ToString(_objResult);
        //                                    }
        //                                    switch (strBillingSetting)
        //                                    {
        //                                        case "Business":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BMState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("-", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Practice":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BPracState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BPracZIP.Trim().Replace("*", "").Replace("-", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Company":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyName.Trim().Replace("*", ""));//Billing provider name
        //                                                //oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*",""));
        //                                                //oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*",""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.CompanyNPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.CompanyNPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.CompanyState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyZip.Trim().Replace("*", "").Replace("-", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.CompanyTaxID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.CompanyTaxID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        default:

        //                                            //2010AA BILLING PROVIDER
        //                                            //NM1 BILLING PROVIDER NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "85");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                            oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                            oSegment.set_DataElementValue(8, 0, "XX");
        //                                            if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                            }

        //                                            //N3 BILLING PROVIDER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Trim().Replace("*", ""));//Provider Address

        //                                            //N4 BILLING PROVIDER LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Trim().Replace("*", ""));////Provider City
        //                                            oSegment.set_DataElementValue(2, 0, _Provider.BMState.Trim().Replace("*", ""));//Provider state
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", "").Replace("-", ""));//Provider ZIP

        //                                            //REF 
        //                                            if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                if (_Provider.EmployerID.Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                            }
        //                                            //REF 
        //                                            else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                            }
        //                                            break;
        //                                    }

        //                                    #endregion

        //                                    //'******************************************************************************************************
        //                                    //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
        //                                    //'******************************************************************************************************
        //                                    #region Subscriber
        //                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
        //                                    {
        //                                        string _strRelation = "";
        //                                        string _strInsuranceType = "";
        //                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "");
        //                                        _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "");
        //                                        if (_strInsuranceType == "MB")
        //                                        {
        //                                            if (_strRelation != "18")
        //                                            {
        //                                                _strRelation = "18";
        //                                            }
        //                                        }

        //                                        #region Subscriber HL Loop - 2000B

        //                                        nHlCount = nHlCount + 1;
        //                                        nHlSubscriberParent = nHlCount;

        //                                        //2000B SUBSCRIBER HL LOOP
        //                                        //HL-SUBSCRIBER
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(3, 0, "22");

        //                                        if (_strRelation == "18")
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "0");
        //                                        }
        //                                        else
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "1");

        //                                        }

        //                                        //SBR SUBSCRIBER INFORMATION
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));
        //                                        oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST);//"P");
        //                                        //if (_strRelation == "18")
        //                                        //{
        //                                        oSegment.set_DataElementValue(2, 0, "18");
        //                                        //}
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", ""));//"HM");

        //                                        //2010BA SUBSCRIBER
        //                                        //NM1 SUBSCRIBER NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "IL");
        //                                        oSegment.set_DataElementValue(2, 0, "1");
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                        oSegment.set_DataElementValue(8, 0, "MI");
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", ""));//"Insurance Id"

        //                                        //N3 SUBSCRIBER ADDRESS
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                        //N4 SUBSCRIBER CITY
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", "").Replace("-", ""));//"SubscriberZip"

        //                                        #endregion SubscriberHL Loop - 2000B

        //                                        if (_strRelation == "18")
        //                                        {

        //                                            //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
        //                                            string _SubscriberGender = "";
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim().Replace("*", "") != "")
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "") != "")
        //                                            {
        //                                                _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "");
        //                                                if (_SubscriberGender.Trim().Replace("*", "").ToUpper() == "OTHER" || _SubscriberGender.Trim() == "")
        //                                                {
        //                                                    _SubscriberGender = "U";
        //                                                }
        //                                                oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                            }


        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                            {
        //                                                _ModifiedPayerName = "";
        //                                                _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                            }
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan

        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                            ////////N3 PAYER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                            ////////N4 PAYER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", "").Replace("-", ""));//"InsuranceZip"

        //                                            #endregion


        //                                            //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
        //                                            //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }

        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");

        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }
        //                                            //if (_FirstPOS ==_NewPOS)
        //                                            //{
        //                                            #region Claim Details - Loop 2300
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", ""));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount

        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");
        //                                            if (oTransaction.AutoClaim == true)
        //                                            {
        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    oSegment.set_DataElementValue(11, 1, "AA");
        //                                                    oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", ""));
        //                                                }
        //                                            }

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF CURRENT INJURY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                if (oTransaction.AutoClaim == true)
        //                                                {
        //                                                    if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                    {
        //                                                        OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                        ////DTP DATE OF ACCIDENT 
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                        oSegment.set_DataElementValue(1, 0, "439");
        //                                                        oSegment.set_DataElementValue(2, 0, "D8");
        //                                                        oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    }
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                            //oSegment.set_DataElementValue(1, 0, "438");
        //                                            //oSegment.set_DataElementValue(2, 0, "D8");
        //                                            //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetoSimilarSyptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }

        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                //REF CLEARING HOUSE CLAIM NUMBER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }



        //                                            #endregion

        //                                            #region HI - Diagnosis


        //                                            //HI HEALTH CARE DIAGNOSIS CODES
        //                                            #region Commented code
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                            //oSegment.set_DataElementValue(1, 1, "BK");
        //                                            //if (oTransaction.Lines[0].Dx1Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(1, 2, oTransaction.Lines[0].Dx1Code.ToString().Replace(".", "").Trim());// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE)));  // "0340");
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx1Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //else
        //                                            //{
        //                                            //    //MessageBox.Show("Principle Diagnosis is not given.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                            //    //return;
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx2Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(2, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(2, 2, oTransaction.Lines[0].Dx2Code.ToString().Replace(".", "").Trim());//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE))); // oCase.CaseDiagnosis[0].DiagnosisCode.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx2Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx3Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(3, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(3, 2, oTransaction.Lines[0].Dx3Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx3Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx4Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(4, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(4, 2, oTransaction.Lines[0].Dx4Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx4Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx5Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(5, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(5, 2, oTransaction.Lines[0].Dx5Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx6Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(6, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(6, 2, oTransaction.Lines[0].Dx6Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx7Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(7, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(7, 2, oTransaction.Lines[0].Dx7Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx8Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(8, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(8, 2, oTransaction.Lines[0].Dx8Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            ////} 
        //                                            #endregion Commented code
        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                           " ISNULL(sName,'') AS sName,  " +
        //                                                           " ISNULL(sContact,'') AS sContact,   " +
        //                                                           " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                           " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                           " ISNULL(sCity,'') AS sCity,   " +
        //                                                           " ISNULL(sState,'') AS sState,   " +
        //                                                           " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                           " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                           " ISNULL(sFax,'') AS sFax,   " +
        //                                                           " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                           " ISNULL(sURL,'') AS sURL,   " +
        //                                                           " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                           " ISNULL(sPager,'') AS sPager,   " +
        //                                                           " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                           " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                           " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                           " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                           " ISNULL(sGender,'') AS sGender,   " +
        //                                                           " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                           " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                           " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                           " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                           " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                           " ISNULL(sDegree,'') AS sDegree   " +
        //                                                           " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                           " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        //oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        //oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        if (_Provider.SSN.ToString().Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                            oSegment.set_DataElementValue(2, 0, _Provider.SSN.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }


        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "232929");//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {
        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }


        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI

        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", "").Replace("-", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 1)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)


        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", "").Replace("-", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 
        //                                            //}//end of IF loop for POS
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity

        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }



        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }
        //                                    #endregion " Subscriber "

        //                                        }//end of if loop for Subscriber as Patient
        //                                        else
        //                                        {
        //                                            #region "Dependent Loop"

        //                                            //////*****************************************************************************************************
        //                                            //////******* DEPENDENT HIERARCHICAL LEVEL ****************************************************************
        //                                            //////*****************************************************************************************************
        //                                            ////TODO: Get the datatable for dependent info to add fields of service in EDI file.

        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                            {
        //                                                _ModifiedPayerName = "";
        //                                                _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                            }
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                            ////////N3 PAYER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                            ////////N4 PAYER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"

        //                                            #endregion

        //                                            nHlCount = nHlCount + 1;

        //                                            //2000B DEPENDENT HL LOOP
        //                                            //HL-DEPENDENT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                            oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
        //                                            oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
        //                                            oSegment.set_DataElementValue(3, 0, "23");
        //                                            oSegment.set_DataElementValue(4, 0, "0");

        //                                            //PAT - PATIENT/DEPENDENT INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "")); //01 - Spouse 19 - Child

        //                                            #region " Patient Info"

        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "QC");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientLastName.Trim().Replace("*", ""));//Patient Last Name
        //                                            oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientFirstName.Trim().Replace("*", ""));//Patient First Name

        //                                            //N3 - ADDRESS INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientAddress1.Trim().Replace("*", ""));//"Address"

        //                                            //N4 - GEOGRAPHIC LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientCity.Trim().Replace("*", ""));//"City"
        //                                            oSegment.set_DataElementValue(2, 0, oPatient.DemographicsDetail.PatientState.Trim().Replace("*", ""));//"State"
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientZip.Trim().Replace("*", ""));//"Zip"

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oPatient.DemographicsDetail.PatientDOB.ToShortDateString())));
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientGender.Trim().Replace("*", ""));

        //                                            #endregion " Patient Info"

        //                                            //******* DEPENDENT CLAIM INFORMATION *************************************************************
        //                                            //TODO: Get the datatable for Claim info to add fields of service in EDI file
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            iItemCount = 1;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }
        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");
        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }

        //                                            #region "Dependent Claim Level"
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "")); //Claim Amount
        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus);
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                    ////DTP DATE OF ACCIDENT 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "439");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            if (oTransaction.OnsiteDate > 0 && oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "438");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.OnsiteDate.ToString())).Trim().Replace("*",""));
        //                                            }
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }
        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }

        //                                            //REF CLEARING HOUSE CLAIM NUMBER
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }
        //                                            #endregion "Dependent Claim Level"


        //                                            #region HI - Diagnosis for Dependent
        //                                            //HI HEALTH CARE DIAGNOSIS CODES

        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex][0]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                            " ISNULL(sName,'') AS sName,  " +
        //                                                            " ISNULL(sContact,'') AS sContact,   " +
        //                                                            " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                            " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                            " ISNULL(sCity,'') AS sCity,   " +
        //                                                            " ISNULL(sState,'') AS sState,   " +
        //                                                            " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                            " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                            " ISNULL(sFax,'') AS sFax,   " +
        //                                                            " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                            " ISNULL(sURL,'') AS sURL,   " +
        //                                                            " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                            " ISNULL(sPager,'') AS sPager,   " +
        //                                                            " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                            " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                            " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                            " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                            " ISNULL(sGender,'') AS sGender,   " +
        //                                                            " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                            " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                            " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                            " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                            " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                            " ISNULL(sDegree,'') AS sDegree   " +
        //                                                            " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                            " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN);//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }

        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim() != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "32432432");//dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*",""));//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {

        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }

        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI

        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 1)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)


        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 

        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                //iItemCount = 1;
        //                                                //iItemCount = iItemCount + nLine;
        //                                                //oTransLine = new TransactionLine();
        //                                                //oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                ////******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                ////TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                ////2400 SERVICE LINE
        //                                                //sInstance = iItemCount.ToString().Trim();
        //                                                ////LX SERVICE LINE COUNTER
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                //oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                ////SV1 PROFESSIONAL SERVICE
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                //oSegment.set_DataElementValue(1, 1, "HC");
        //                                                //oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                //if (oTransLine.Mod1Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                //}
        //                                                //if (oTransLine.Mod2Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                //}
        //                                                //string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                //if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                //{
        //                                                //    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                //}
        //                                                //oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                //oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                //oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity


        //                                                ////if (oTransLine.Dx1Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "1");//"Diagnosis Pointer1" (Must Use)
        //                                                ////    if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 2, "2");//"Diagnosis Pointer2"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 3, "3");//"Diagnosis Pointer3"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 4, "4");//"Diagnosis Pointer4"
        //                                                ////    }
        //                                                ////}
        //                                                ////else if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "2");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "3");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "4");//"Diagnosis Pointer1"
        //                                                ////}

        //                                                ////////oSegment.set_DataElementValue(9, 0, "N");////Y=Yes, N=No

        //                                                //if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                //{
        //                                                //    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                //    {
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx1Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx2Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx3Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx4Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //    }
        //                                                //}

        //                                                ////DTP DATE - SERVICE DATE(S)
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "472");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", "").Trim().Replace("*", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString().Trim().Replace("*", ""));//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity
        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }

        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //Date should not be more than 2 Years Old.
        //                                                //if (DateTime.Now.Date - oTransLine.DateServiceFrom <= 2)
        //                                                {
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
        //                                                }
        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }

        //                                            #endregion " Dependent "
        //                                        }//end of else loop for dependent

        //                                    }//If loop for Patient Insurance
        //                                    //Transaction Line Loop
        //                                }//Transaction SETS Loop
        //                            }
        //                        }
        //                    }

        //                    #region " Save EDI File "

        //                    //Save to a file
        //                    //SaveFileDialog oSave = new SaveFileDialog();
        //                    //oSave.Filter = "TEXT Files (*.txt)|*.txt|EDI Files (*.edi)|*.edi|X12 Files (*.X12)|*.X12";
        //                    //if (oSave.ShowDialog() == DialogResult.OK)
        //                    //{
        //                    // sPath = sPath + "837 EDI\\";
        //                    sPath = "";
        //                    //sPath = AppDomain.CurrentDomain.BaseDirectory + "837 EDI\\";
        //                    sPath = appSettings["StartupPath"].ToString() + "\\" + "837 EDI\\";
        //                    if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }

        //                    sEdiFile = GetEDIFileName(sPath, _BatchName);

        //                    oEdiDoc.Save(sEdiFile);
        //                    System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
        //                    string strData;
        //                    strData = oReader.ReadToEnd();
        //                    oReader.Close();

        //                    System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
        //                    oWriter.Write(strData);
        //                    oWriter.Close();
        //                    _result = sEdiFile;
        //                    //MessageBox.Show("EDI claim generated successfully.", "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                    //}


        //                    #endregion " Save EDI File "

        //                    #region " Update Claim Manager Table "
        //                    Int64 _date = 0;
        //                    Int64 _time = 0;
        //                    _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
        //                    _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
        //                    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
        //                    Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
        //                    ogloClaimManager.Dispose();
        //                    #endregion

        //                    //DESTROYS OBJECTS
        //                    oSegment.Dispose();
        //                    oTransactionset.Dispose();
        //                    oGroup.Dispose();
        //                    oInterchange.Dispose();

        //                }
        //            }
        //        }
        //        catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
        //        {
        //            string _strEx = "";
        //            ediException oException = null;
        //            oException = (ediException)Rex.WrappedException;
        //            _strEx = oException.get_Description();
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
        //            _result = "";
        //        }
        //        catch (Exception ex)
        //        {
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //            _result = "";
        //        }
        //        finally
        //        {
        //            if (dtClearingHouse != null) { dtClearingHouse.Dispose(); }
        //            if (dtSubmitter != null) { dtSubmitter.Dispose(); }
        //            if (dtReceiver != null) { dtReceiver.Dispose(); }
        //            if (dtBillingProvider != null) { dtBillingProvider.Dispose(); }
        //            if (dtRenderingProvider != null) { dtRenderingProvider.Dispose(); }
        //            if (dtFacility != null) { dtFacility.Dispose(); }
        //            if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); }
        //            if (dtReferral != null) { dtReferral.Dispose(); }
        //        }
        //        #endregion " Generate EDI "

        //    }//SEF File present IF loop
        //    return _result;
        //}

        //public string Generate276EDI(ArrayList SelectedTransactions)
        //{
        //    DataTable dtClearingHouse = new DataTable();
        //    DataTable dtSubmitter = new DataTable();
        //    DataTable dtPatientInsurances = new DataTable();

        //    Transaction oTransaction = null;
        //    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");

        //    int nHlCounter = 0;
        //    int nHlInfoReceiverParent;
        //    int nHlServiceProviderParent;
        //    int nHlSubscriberParent;
        //    int nHlDependentParent;
        //    string _result = "";
        //    try
        //    {
        //        //Get Clearing House Information in Datatable
        //        dtClearingHouse = new DataTable();
        //        dtClearingHouse = ogloBilling.GetClearingHouseSettings();

        //        //This New method clears the oEdiDoc object except the schema loaded
        //        oEdiDoc.New();
        //        //Set the properties for oEdiDoc object
        //        oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;
        //        oEdiDoc.set_Property(DocumentPropertyIDConstants.Property_DocumentBufferIO, 2000);
        //        oEdiDoc.SegmentTerminator = "~\r\n";
        //        oEdiDoc.ElementTerminator = "*";
        //        oEdiDoc.CompositeTerminator = ":";


        //        #region Interchange Segment

        //        //Create the interchange segment
        //        ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

        //        oSegment.set_DataElementValue(1, 0, "00");
        //        oSegment.set_DataElementValue(3, 0, "00");
        //        oSegment.set_DataElementValue(5, 0, "12");
        //        oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]));//txtSenderID1.Text.Trim());// "Sender");
        //        oSegment.set_DataElementValue(7, 0, "12");
        //        oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]));//txtReceiverID1.Text.Trim());//"ReceiverID");
        //        string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
        //        oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));//txtEnquiryDate.Text.Trim());//"010821");
        //        string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //        oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim());//txtEnquiryTime.Text.Trim());//"1548");
        //        oSegment.set_DataElementValue(11, 0, "U");
        //        oSegment.set_DataElementValue(12, 0, "00401");
        //        oSegment.set_DataElementValue(13, 0, "00020");//txtControlNo.Text.Trim());//"000000020");
        //        oSegment.set_DataElementValue(14, 0, "0");
        //        oSegment.set_DataElementValue(15, 0, "T");
        //        oSegment.set_DataElementValue(16, 0, ":");

        //        #endregion Interchange Segment

        //        #region Functional Group

        //        //Create the functional group segment
        //        ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X093A1"));
        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
        //        oSegment.set_DataElementValue(1, 0, "HR");//txtFunctionID.Text.Trim());
        //        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim());//txtSenderDept.Text.Trim());//"SenderDept");
        //        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim());//txtReceiverDept.Text.Trim());//"ReceiverDept");
        //        string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //        oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));//txtFunGroupDate.Text.Trim());//"20010821");
        //        oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim());//txtFuncGroupTime.Text.Trim());//"1548");
        //        oSegment.set_DataElementValue(6, 0, "11000");//txtControlNo.Text.Trim());//"000001");
        //        oSegment.set_DataElementValue(7, 0, "X");
        //        oSegment.set_DataElementValue(8, 0, "004010X093A1");

        //        #endregion Functional Group

        //        #region Transaction Set
        //        //HEADER
        //        //ST TRANSACTION SET HEADER
        //        ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("276"));
        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
        //        oSegment.set_DataElementValue(2, 0, "000020");
        //        #endregion Transaction Set

        //        #region BHT Segment

        //        //Begining of Herarchical Transaction Segment 
        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
        //        oSegment.set_DataElementValue(1, 0, "0010");
        //        oSegment.set_DataElementValue(2, 0, "13");//Code 13=Request
        //        oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim());//txtBHTDate.Text.Trim());//"19990501");//Date

        //        #endregion BHT Segment

        //        nHlCounter = 0;

        //        if (SelectedTransactions != null)
        //        {
        //            if (SelectedTransactions.Count > 0)
        //            {
        //                for (int i = 0; i < SelectedTransactions.Count; i++)
        //                {
        //                    oTransaction = new Transaction();
        //                    TransactionLine oTransLine = null;
        //                    oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                    if (oTransaction != null)
        //                    {
        //                        if (oTransaction.Lines.Count > 0)
        //                        {
        //                            //Get Submitter Information in Datatable
        //                            dtSubmitter = new DataTable();
        //                            dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), oTransaction.ProviderID);

        //                            //FillAllDetails(oTransaction);
        //                            Resource oResource = new Resource(_databaseconnectionstring);
        //                            Provider _Provider = null;
        //                            gloPatient.Patient oPatient = null;
        //                            if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
        //                            {
        //                                _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
        //                                gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
        //                                dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID);
        //                                oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
        //                            }
        //                            for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
        //                            {

        //                                #region Calculate Claim Amount

        //                                string _ClaimTotal = "";

        //                                decimal _claimAmount = 0;
        //                                for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                {
        //                                    _claimAmount = _claimAmount + oTransaction.Lines[nLine].Total;
        //                                }

        //                                _ClaimTotal = _claimAmount.ToString("#0.00");

        //                                if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                {
        //                                    _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                }
        //                                else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                {
        //                                    _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                }
        //                                #endregion " Calculate Claim Amount "

        //                                if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
        //                                {
        //                                    for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                    {

        //                                        #region HL Loop
        //                                        //'*************************************************************************************************
        //                                        //'DETAIL INFORMATION SOURCE LEVEL
        //                                        //Do While nInfoSourceCounter <= nInfoSources

        //                                        nHlCounter = nHlCounter + 1;
        //                                        nHlInfoReceiverParent = nHlCounter;
        //                                        //'HL - HIERARCHICAL LEVEL
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCounter.ToString());     //Hierarchical ID Number
        //                                        oSegment.set_DataElementValue(3, 0, "20");//txtInfoSourceLevel.Text.Trim());//"20");      //Hierarchical Level Code
        //                                        oSegment.set_DataElementValue(4, 0, "1");//txtInfoSourceLevel.Text.Trim());//"1");     //Hierarchical Child Code

        //                                        #endregion HL Loop

        //                                        #region Payer Loop

        //                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                        string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim();
        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Length > 35)
        //                                        {
        //                                            _ModifiedPayerName = "";
        //                                            _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Substring(0, 34);
        //                                        }
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "PR");  //Entity Identifier Code - PAYER
        //                                        oSegment.set_DataElementValue(2, 0, "2");    //Entity Type Qualifier
        //                                        oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim());//"Payer Name");     //Name Last or Organization Name
        //                                        oSegment.set_DataElementValue(8, 0, "PI");    //Identification Code Qualifier
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim());//"12345");     //Identification Code

        //                                        #endregion Payer Loop

        //                                        #region HL Loop
        //                                        //*************************************************************************************************
        //                                        //DETAIL INFORMATION RECEIVER LEVEL
        //                                        //Do While nInfoReceiverCounter <= nInfoReceivers

        //                                        nHlCounter = nHlCounter + 1;
        //                                        nHlServiceProviderParent = nHlCounter;
        //                                        //HL - HIERARCHICAL LEVEL
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCounter.ToString());     //Hierarchical ID Number
        //                                        oSegment.set_DataElementValue(2, 0, nHlInfoReceiverParent.ToString());      //Hierarchical Parent ID Number
        //                                        oSegment.set_DataElementValue(3, 0, "21");    //Hierarchical Level Code
        //                                        oSegment.set_DataElementValue(4, 0, "1");    //Hierarchical Child Code
        //                                        #endregion HL Loop

        //                                        #region Submitter
        //                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "41");     //Entity Identifier Code - SUBMITTER
        //                                        oSegment.set_DataElementValue(2, 0, "2");   //Entity Type Qualifier
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Trim());//"Receiver Name");     //Name Last or Organization Name
        //                                        oSegment.set_DataElementValue(8, 0, "46");     //Identification Code Qualifier
        //                                        oSegment.set_DataElementValue(9, 0, "C0923");//_SubmitterETIN.Trim());//"X67E");    //Identification Code
        //                                        #endregion Submitter

        //                                        #region HL Loop
        //                                        //*************************************************************************************************
        //                                        //DETAIL SERVICE PROVIDER LEVEL
        //                                        //Do While nServiceProviderCounter <= nServiceProviders

        //                                        nHlCounter = nHlCounter + 1;
        //                                        nHlSubscriberParent = nHlCounter;
        //                                        //HL - HIERARCHICAL LEVEL
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCounter.ToString());     //Hierarchical ID Number
        //                                        oSegment.set_DataElementValue(2, 0, nHlServiceProviderParent.ToString());     //Hierarchical Parent ID Number
        //                                        oSegment.set_DataElementValue(3, 0, "19");     //Hierarchical Level Code
        //                                        oSegment.set_DataElementValue(4, 0, "1");   //Hierarchical Child Code
        //                                        #endregion HL Loop

        //                                        #region Provider/Receiver Loop
        //                                        //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "1P");     //Entity Identifier Code - PROVIDER
        //                                        oSegment.set_DataElementValue(2, 0, "1");    //Entity Type Qualifier
        //                                        oSegment.set_DataElementValue(3, 0, _Provider.FirstName.Trim() + " " + _Provider.MiddleName.Trim() + " " + _Provider.LastName.Trim());     //Name Last or Organization Name
        //                                        oSegment.set_DataElementValue(8, 0, "XX");   //Identification Code Qualifier
        //                                        oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim());//"987666");    //Identification Code
        //                                        #endregion Provider/Receiver Loop

        //                                        #region HL Loop
        //                                        //*************************************************************************************************
        //                                        //DETAIL SUBSCRIBER LEVEL
        //                                        //Do While nSubscriberCounter <= nSubscribers

        //                                        nHlCounter = nHlCounter + 1;
        //                                        nHlDependentParent = nHlCounter;

        //                                        //nDependents = Val(txtNoDependents.Lines(nSubscriberCounter - 1))
        //                                        //HL - HIERARCHICAL LEVEL
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCounter.ToString());     //Hierarchical ID Number
        //                                        oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());   //Hierarchical Parent ID Number
        //                                        oSegment.set_DataElementValue(3, 0, "22");      //Hierarchical Level Code
        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim() == "18")
        //                                            oSegment.set_DataElementValue(4, 0, "0");     //Hierarchical Child Code
        //                                        else
        //                                            oSegment.set_DataElementValue(4, 0, "1");//Hierarchical Child Code
        //                                        #endregion HL Loop

        //                                        if (Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim() == "18")
        //                                        {
        //                                            #region Subscriber Demographics

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");    //Date Time Period Format Qualifier
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim() != "")
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"19201210");     //Date Time Period
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim() != "")
        //                                            {
        //                                                if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().ToUpper() == "OTHER")
        //                                                {
        //                                                    oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"
        //                                                }
        //                                                else
        //                                                {
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                                }
        //                                            }
        //                                            #endregion Subscriber Demographics

        //                                            #region Subscriber
        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim() == "18")
        //                                                oSegment.set_DataElementValue(1, 0, "QC");    //Entity Identifier Code
        //                                            else
        //                                                oSegment.set_DataElementValue(1, 0, "IL");      //Entity Identifier Code

        //                                            oSegment.set_DataElementValue(2, 0, "1");     //Entity Type Qualifier
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim());//"Subscriber Last Name");     //Name Last or Organization Name
        //                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim());//"Subscriber First Name");      //Name First
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim() != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim());
        //                                            }
        //                                            oSegment.set_DataElementValue(8, 0, "MI");     //Identification Code Qualifier
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim());//"123456789A");       //Identification Code
        //                                            #endregion Subscriber

        //                                            #region Trace Number
        //                                            //TRN - TRACE
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\TRN"));
        //                                            oSegment.set_DataElementValue(1, 0, "1");    //Trace Type Code
        //                                            oSegment.set_DataElementValue(2, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)));//"1625032606");     //Reference Identification
        //                                            #endregion Trace Number

        //                                            #region Reference ID
        //                                            //REF - REFERENCE IDENTIFICATION
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\REF"));
        //                                            //oSegment.set_DataElementValue(1, 0, "BLT");    //Reference Identification Qualifier
        //                                            //oSegment.set_DataElementValue(2, 0, "111");//"111");     //Reference Identification
        //                                            #endregion Reference ID

        //                                            #region AMT Loop
        //                                            //AMT - MONETARY AMOUNT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\AMT"));
        //                                            oSegment.set_DataElementValue(1, 0, "T3");     //Amount Qualifier Code
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal);//"8513.88");      //Monetary Amount
        //                                            #endregion AMT Loop

        //                                            #region Service Date Loop
        //                                            ////DTP - DATE OR TIME OR PERIOD
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\DTP"));
        //                                            //oSegment.set_DataElementValue(1, 0, "232");    //Date/Time Qualifier
        //                                            //oSegment.set_DataElementValue(2, 0, "RD8");  //Date Time Period Format Qualifier
        //                                            //oSegment.set_DataElementValue(3, 0, gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[0].DateServiceFrom.ToShortDateString()) + "-" + gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[oTransaction.Lines.Count-1].DateServiceTill.ToShortDateString()));//"19960831-19960906");    //Date Time Period

        //                                            #endregion Service Date Loop

        //                                            for (int j = 0; j < oTransaction.Lines.Count; j++)
        //                                            {
        //                                                #region Service Information Loop
        //                                                ////SVC Service Information
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\SVC\\SVC"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");     //Product/Service ID Qualifier
        //                                                oSegment.set_DataElementValue(1, 2, oTransaction.Lines[j].CPTCode.Trim());     //Product/Service ID
        //                                                string _charges = "";
        //                                                if (Convert.ToString(oTransaction.Lines[j].Total).Substring(Convert.ToString(oTransaction.Lines[j].Total).Length - 2, 2) == "00")
        //                                                {
        //                                                    _charges = Convert.ToString(oTransaction.Lines[j].Total).Substring(0, Convert.ToString(oTransaction.Lines[j].Total).Length - 3);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _charges);     //Monetary Amount
        //                                                #endregion Service Information Loop

        //                                                #region REF Loop
        //                                                ////REF - REFERENCE IDENTIFICATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\SVC\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "FJ");     //Reference Identification Qualifier
        //                                                oSegment.set_DataElementValue(2, 0, "02");      //Reference Identification
        //                                                #endregion REF Loop

        //                                                #region Service Line Date
        //                                                ////DTP - DATE OR TIME OR PERIOD
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\SVC\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");     //Date/Time Qualifier
        //                                                oSegment.set_DataElementValue(2, 0, "RD8");      //Date Time Period Format Qualifier
        //                                                oSegment.set_DataElementValue(3, 0, gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[j].DateServiceFrom.ToShortDateString()) + "-" + gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[j].DateServiceTill.ToShortDateString()));//"19960931-19961030");     //Date Time Period

        //                                                #endregion Service Line Date
        //                                            }
        //                                        }
        //                                        else
        //                                        {
        //                                            #region " DETAIL DEPENDENT LEVEL "

        //                                            #region Subscriber
        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim() == "18")
        //                                                oSegment.set_DataElementValue(1, 0, "QC");    //Entity Identifier Code
        //                                            else
        //                                                oSegment.set_DataElementValue(1, 0, "IL");      //Entity Identifier Code

        //                                            oSegment.set_DataElementValue(2, 0, "1");     //Entity Type Qualifier
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim());//"Subscriber Last Name");     //Name Last or Organization Name
        //                                            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim());//"Subscriber First Name");      //Name First
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim() != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubMName"]).Trim());
        //                                            }
        //                                            oSegment.set_DataElementValue(8, 0, "MI");     //Identification Code Qualifier
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim());//"123456789A");       //Identification Code
        //                                            #endregion Subscriber

        //                                            #region HL Loop

        //                                            ////DETAIL DEPENDENT LEVEL
        //                                            //Do While nDependentCounter <= nDependents
        //                                            nHlCounter = nHlCounter + 1;

        //                                            //HL - HIERARCHICAL LEVEL
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                            oSegment.set_DataElementValue(1, 0, nHlCounter.ToString());     //Hierarchical ID Number
        //                                            oSegment.set_DataElementValue(2, 0, nHlDependentParent.ToString());     //Hierarchical Parent ID Number
        //                                            oSegment.set_DataElementValue(3, 0, "23");    //Hierarchical Level Code

        //                                            #endregion HL Loop

        //                                            #region Patient Demographics

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");     //Date Time Period Format Qualifier
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(oPatient.DemographicsDetail.PatientDOB))).Trim());     //Date Time Period
        //                                            if (Convert.ToString(oPatient.DemographicsDetail.PatientGender).Trim() != "")
        //                                            {
        //                                                if (Convert.ToString(oPatient.DemographicsDetail.PatientGender).Trim().ToUpper() == "OTHER")
        //                                                {
        //                                                    oSegment.set_DataElementValue(3, 0, "U");//"SubscriberGender"
        //                                                }
        //                                                else
        //                                                {
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(oPatient.DemographicsDetail.PatientGender).Trim().Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                                }
        //                                            }
        //                                            #endregion Patient Demographics

        //                                            #region Patient Info
        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME\
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "QC");                        //Entity Identifier Code
        //                                            oSegment.set_DataElementValue(2, 0, "1");                         //Entity Type Qualifier
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientLastName.Trim());     //Name Last or Organization Name
        //                                            oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientFirstName.Trim());    //Name First
        //                                            if (oPatient.DemographicsDetail.PatientMiddleName.Trim() != "")
        //                                                oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientMiddleName.Trim());    //Name First
        //                                            oSegment.set_DataElementValue(8, 0, "MI");                        //Identification Code Qualifier
        //                                            oSegment.set_DataElementValue(9, 0, oPatient.DemographicsDetail.PatientSSN.Trim());            //"9876453B");      //Identification Code
        //                                            #endregion Patient Info

        //                                            #region Trace Loop
        //                                            //TRN - TRACE
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\TRN"));
        //                                            oSegment.set_DataElementValue(1, 0, "1");               //Trace Type Code
        //                                            oSegment.set_DataElementValue(2, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim()));//"1347897353");      //Reference Identification
        //                                            #endregion Trace Loop

        //                                            #region REF Loop
        //                                            ////REF - REFERENCE IDENTIFICATION
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\REF"));
        //                                            //oSegment.set_DataElementValue(1, 0, "BLT");      //Reference Identification Qualifier
        //                                            //oSegment.set_DataElementValue(2, 0, "111");      //Reference Identification
        //                                            #endregion REF Loop

        //                                            #region AMT Loop
        //                                            //AMT - MONETARY AMOUNT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\AMT"));
        //                                            oSegment.set_DataElementValue(1, 0, "T3");       //Amount Qualifier Code
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal);      //Monetary Amount
        //                                            #endregion AMT Loop

        //                                            #region Date Time Loop
        //                                            //DTP - DATE OR TIME OR PERIOD
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\DTP"));
        //                                            //oSegment.set_DataElementValue(1, 0, "232");    //Date/Time Qualifier
        //                                            //oSegment.set_DataElementValue(2, 0, "RD8");  //Date Time Period Format Qualifier
        //                                            //oSegment.set_DataElementValue(3, 0, gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[0].DateServiceFrom.ToShortDateString()) + "-" + gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[oTransaction.Lines.Count - 1].DateServiceTill.ToShortDateString()));//"19960831-19960906");    //Date Time Period

        //                                            #endregion Date Time Loop

        //                                            for (int j = 0; j < oTransaction.Lines.Count; j++)
        //                                            {
        //                                                #region SVC Loop
        //                                                //SVC Service Information
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\SVC\\SVC"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");     //Product/Service ID Qualifier
        //                                                oSegment.set_DataElementValue(1, 2, oTransaction.Lines[j].CPTCode.Trim());     //Product/Service ID
        //                                                string _charges = "";
        //                                                if (Convert.ToString(oTransaction.Lines[j].Total).Substring(Convert.ToString(oTransaction.Lines[j].Total).Length - 2, 2) == "00")
        //                                                {
        //                                                    _charges = Convert.ToString(oTransaction.Lines[j].Total).Substring(0, Convert.ToString(oTransaction.Lines[j].Total).Length - 3);
        //                                                }
        //                                                else if (Convert.ToString(oTransaction.Lines[j].Total).Substring(Convert.ToString(oTransaction.Lines[j].Total).Length - 1, 1) == "0")
        //                                                {
        //                                                    _charges = Convert.ToString(oTransaction.Lines[j].Total).Substring(0, Convert.ToString(oTransaction.Lines[j].Total).Length - 1);
        //                                                }

        //                                                oSegment.set_DataElementValue(2, 0, _charges);     //Monetary Amount

        //                                                #endregion SVC Loop

        //                                                #region REF Loop
        //                                                //REF - REFERENCE IDENTIFICATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\SVC\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "FJ");      //Reference Identification Qualifier
        //                                                oSegment.set_DataElementValue(2, 0, "78");      //Reference Identification
        //                                                #endregion REF Loop

        //                                                #region Date Time Loop for Service Line

        //                                                //DTP - DATE OR TIME OR PERIOD
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\TRN\\SVC\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");     //Date/Time Qualifier
        //                                                oSegment.set_DataElementValue(2, 0, "RD8");      //Date Time Period Format Qualifier
        //                                                oSegment.set_DataElementValue(3, 0, gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[j].DateServiceFrom.ToShortDateString()) + "-" + gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[j].DateServiceTill.ToShortDateString()));//"19960931-19961030");     //Date Time Period
        //                                                // }
        //                                                #endregion Date Time Loop for Service Line
        //                                            }
        //                                            #endregion " DETAIL DEPENDENT LEVEL "
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }

        //                #region Save EDI File

        //                //oEdiDoc.Save(sPath + sEdiFile);
        //                //SaveFileDialog oSave = new SaveFileDialog();
        //                //oSave.Filter = "TEXT Files (*.txt)|*.txt|EDI Files (*.edi)|*.edi";
        //                //if (oSave.ShowDialog() == DialogResult.OK)
        //                //{
        //                //    System.IO.StreamReader oReader = new System.IO.StreamReader(sPath + sEdiFile);
        //                //    string strData;
        //                //    strData = oReader.ReadToEnd();
        //                //    oReader.Close();

        //                //    System.IO.StreamWriter oWriter = new System.IO.StreamWriter(oSave.FileName);
        //                //    oWriter.Write(strData);
        //                //    oWriter.Close();
        //                //    //MessageBox.Show("File Created Successfully", "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                //}

        //                sEdiFile1 = GetEDIFileName(sPath, "276_");
        //                oEdiDoc.Save(sEdiFile1);
        //                System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile1);
        //                string strData;
        //                strData = oReader.ReadToEnd();
        //                oReader.Close();

        //                System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile1);
        //                oWriter.Write(strData);
        //                oWriter.Close();
        //                _result = sEdiFile1;
        //                #endregion Save EDI

        //                //DESTROY OBJECTS
        //                oSegment.Dispose();
        //                oTransactionset.Dispose();
        //                oGroup.Dispose();
        //                oInterchange.Dispose();
        //            }
        //        }
        //    }

        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //        _result = "";
        //    }
        //    finally
        //    {
        //        if (dtClearingHouse != null) { dtClearingHouse.Dispose(); }
        //        if (dtSubmitter != null) { dtSubmitter.Dispose(); }
        //        if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); }
        //    }
        //    return _result;
        //}

        //public string EDI837GenerationBCBSM(ArrayList SelectedTransactions, string _BatchName)
        //{
        //    DataTable dtClearingHouse = new DataTable();
        //    DataTable dtSubmitter = new DataTable();
        //    DataTable dtReceiver = new DataTable();
        //    DataTable dtBillingProvider = new DataTable();
        //    DataTable dtRenderingProvider = new DataTable();
        //    DataTable dtFacility = new DataTable();
        //    DataTable dtPatientInsurances = new DataTable();
        //    DataTable dtReferral = new DataTable();
        //    string _result = "";
        //    string InterchangeHeader = "";
        //    string FunctionalGroupHeader = "";
        //    string TransactionSetHeader = "";
        //    string _ClaimStatus = "1";
        //    if (_IsSEFPresent == true)
        //    {
        //        #region " Generate EDI "

        //        string sEntity = "";
        //        string sInstance = "";
        //        string _strSQL = "";
        //        DataTable dt;
        //        string _BillingProviderDetails = "";
        //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
        //        bool IsSecondaryInsurance = false;
        //        Transaction oTransaction = new Transaction();
        //        bool _SecondayInsuranceAddressDetailsRequired = false;
        //        //string _result = "";
        //        try
        //        {
        //            //Get Clearing House Information in Datatable

        //            dtClearingHouse = new DataTable();
        //            dtClearingHouse = ogloBilling.GetClearingHouseSettings();
        //            if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
        //            {
        //                MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                return "";
        //            }
        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //Get Submitter Information in Datatable
        //                                dtSubmitter = new DataTable();
        //                                dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), oTransaction.ProviderID);
        //                                if (dtSubmitter == null && dtSubmitter.Rows.Count < 1)
        //                                {
        //                                    MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                    return "";
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            oEdiDoc.New();
        //            oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;
        //            oEdiDoc.set_Property(DocumentPropertyIDConstants.Property_DocumentBufferIO, 2000);

        //            oEdiDoc.SegmentTerminator = "~\r\n";
        //            oEdiDoc.ElementTerminator = "*";
        //            oEdiDoc.CompositeTerminator = ":";

        //            string _TypeOfData = "T";

        //            #region " Interchange Segment "
        //            //Create the interchange segment
        //            ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

        //            if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
        //            {
        //                _TypeOfData = "T";
        //            }
        //            else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
        //            {
        //                _TypeOfData = "P";
        //            }

        //            oSegment.set_DataElementValue(1, 0, "00");
        //            oSegment.set_DataElementValue(3, 0, "00");
        //            oSegment.set_DataElementValue(5, 0, "ZZ");
        //            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//_SenderID.Trim());//"1234545");//
        //            oSegment.set_DataElementValue(7, 0, "ZZ");
        //            //oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
        //            //This is the receiver ID given by BCBSM
        //            oSegment.set_DataElementValue(8, 0, "382069753");
        //            string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
        //            oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
        //            string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", ""));
        //            oSegment.set_DataElementValue(11, 0, "U");
        //            oSegment.set_DataElementValue(12, 0, "00401");
        //            InterchangeHeader = ControlNumberGeneration("1");
        //            oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
        //            oSegment.set_DataElementValue(14, 0, "0");
        //            oSegment.set_DataElementValue(15, 0, _TypeOfData);
        //            oSegment.set_DataElementValue(16, 0, ":");

        //            #endregion " Interchange Segment "

        //            #region " Functional Group "

        //            //Create the functional group segment
        //            ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X098A1"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
        //            oSegment.set_DataElementValue(1, 0, "HC");
        //            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", ""));////_SenderName);
        //            //oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", ""));//// _ReceiverCode.Trim());//"ClarEDI");
        //            //This is the receiver ID given by BCBSM
        //            oSegment.set_DataElementValue(3, 0, "382069753");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
        //            string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", ""));
        //            FunctionalGroupHeader = ControlNumberGeneration("2");
        //            oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
        //            oSegment.set_DataElementValue(7, 0, "X");
        //            oSegment.set_DataElementValue(8, 0, "004010X098A1");

        //            #endregion " Functional Group "

        //            #region ST - TRANSACTION SET HEADER

        //            ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
        //            TransactionSetHeader = ControlNumberGeneration("3");
        //            oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

        //            #endregion ST - TRANSACTION SET HEADER

        //            #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            //Begining Segment 
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
        //            oSegment.set_DataElementValue(1, 0, "0019"); //Herarchical Structure Code
        //            oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
        //            oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", ""));//Date of claim
        //            string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "");
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "")); //"1230");
        //            oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
        //            #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            #region REF - TRANSMISSION TYPE IDENTIFICATION

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
        //            oSegment.set_DataElementValue(1, 0, "87");
        //            oSegment.set_DataElementValue(2, 0, "004010X098A1");//"ReferenceID"

        //            #endregion REF - TRANSMISSION TYPE IDENTIFICATION

        //            #region NM1 - SUBMITTER


        //            //1000A SUBMITTER
        //            //NM1 SUBMITTER

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "41");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
        //            oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
        //            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.


        //            //PER SUBMITTER EDI CONTACT INFORMATION
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
        //            oSegment.set_DataElementValue(1, 0, "IC");
        //            if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "") == "")
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
        //            }
        //            else
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", ""));
        //            }

        //            oSegment.set_DataElementValue(3, 0, "TE");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone


        //            #endregion NM1 - SUBMITTER

        //            #region NM1 - RECEIVER NAME

        //            //1000B RECEIVER
        //            //NM1 RECEIVER NAME
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "40");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", ""));//"GatewayEDI");//clearing house or contractor or carrier or FI name
        //            oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
        //            /*ID Code?*/
        //            ///This is the Receiver ID For BCBSM Clearing House
        //            oSegment.set_DataElementValue(9, 0, "00710");// Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.

        //            #endregion NM1 - RECEIVER NAME

        //            nHlCount = 0;

        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //FillAllDetails(oTransaction);
        //                                Resource oResource = new Resource(_databaseconnectionstring);
        //                                Provider _Provider = null;
        //                                gloPatient.Patient oPatient = null;
        //                                gloPatient.Referrals oReferral = new gloPatient.Referrals();
        //                                if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
        //                                {
        //                                    _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
        //                                    if (_Provider == null)
        //                                    {
        //                                        MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
        //                                    dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID);
        //                                    oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
        //                                    if (oPatient == null)
        //                                    {
        //                                        MessageBox.Show("Patient information is not present for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
        //                                    {
        //                                        MessageBox.Show("Patient " + oPatient.DemographicsDetail.PatientFirstName + " " + oPatient.DemographicsDetail.PatientLastName + " Insurance details are missing for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    dtFacility = ogloBilling.GetFacilityInfo(oTransaction.FacilityCode, oTransaction.ProviderID);


        //                                }

        //                                for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
        //                                {
        //                                    //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

        //                                    nHlCount = nHlCount + 1;
        //                                    nHlProvParent = nHlCount;
        //                                    //2000A BILLING/PAY-TO PROVIDER HL LOOP
        //                                    //HL-BILLING PROVIDER

        //                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                    oSegment.set_DataElementValue(3, 0, "20");
        //                                    oSegment.set_DataElementValue(4, 0, "1");

        //                                    #region Billing Provider


        //                                    //Get the Address Setting for Billing Provider
        //                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //                                    Object _objResult = null;
        //                                    string strBillingSetting = "";
        //                                    oSettings.GetSetting("BillingSetting", Convert.ToInt64(oTransaction.ProviderID), _ClinicID, out _objResult);
        //                                    if (_objResult != null)
        //                                    {
        //                                        // |Company|Practice|Business"
        //                                        strBillingSetting = Convert.ToString(_objResult);
        //                                    }
        //                                    switch (strBillingSetting)
        //                                    {
        //                                        case "Business":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BMState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Practice":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BPracState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BPracZIP.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Company":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyName.Trim().Replace("*", ""));//Billing provider name
        //                                                //oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*",""));
        //                                                //oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*",""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.CompanyNPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.CompanyNPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.CompanyState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyZip.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.CompanyTaxID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.CompanyTaxID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        default:

        //                                            //2010AA BILLING PROVIDER
        //                                            //NM1 BILLING PROVIDER NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "85");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                            oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                            oSegment.set_DataElementValue(8, 0, "XX");
        //                                            if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                            }

        //                                            //N3 BILLING PROVIDER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1);//Provider Address

        //                                            //N4 BILLING PROVIDER LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMCity);////Provider City
        //                                            oSegment.set_DataElementValue(2, 0, _Provider.BMState);//Provider state
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.BMZIP);//Provider ZIP

        //                                            //REF 
        //                                            if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                if (_Provider.EmployerID.Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                            }
        //                                            //REF 
        //                                            else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                            }
        //                                            break;
        //                                    }

        //                                    #endregion

        //                                    //'******************************************************************************************************
        //                                    //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
        //                                    //'******************************************************************************************************
        //                                    #region Subscriber
        //                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
        //                                    {
        //                                        string _strRelation = "";
        //                                        string _strInsuranceType = "";
        //                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "");
        //                                        _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "");
        //                                        if (_strInsuranceType == "MB")
        //                                        {
        //                                            if (_strRelation != "18")
        //                                            {
        //                                                _strRelation = "18";
        //                                            }
        //                                        }

        //                                        #region Subscriber HL Loop - 2000B

        //                                        nHlCount = nHlCount + 1;
        //                                        nHlSubscriberParent = nHlCount;

        //                                        //2000B SUBSCRIBER HL LOOP
        //                                        //HL-SUBSCRIBER
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(3, 0, "22");

        //                                        if (_strRelation == "18")
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "0");
        //                                        }
        //                                        else
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "1");

        //                                        }

        //                                        //SBR SUBSCRIBER INFORMATION
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));
        //                                        /*Should not be T */
        //                                        oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST);//"P");
        //                                        if (_strRelation == "18")
        //                                        {
        //                                            //For Medicare      
        //                                            oSegment.set_DataElementValue(2, 0, "18");
        //                                        }
        //                                        oSegment.set_DataElementValue(4, 0, "Insured's Group Name");
        //                                        //oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", ""));
        //                                        /*BL for Blue Shield*/
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", ""));//"HM");

        //                                        //2010BA SUBSCRIBER 
        //                                        //NM1 SUBSCRIBER NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "IL");
        //                                        oSegment.set_DataElementValue(2, 0, "1");
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                        oSegment.set_DataElementValue(8, 0, "MI");
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", ""));//"Insurance Id"

        //                                        //N3 SUBSCRIBER ADDRESS
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                        //N4 SUBSCRIBER CITY
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                        #endregion SubscriberHL Loop - 2000B

        //                                        if (_strRelation == "18")
        //                                        {

        //                                            //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
        //                                            string _SubscriberGender = "";
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim().Replace("*", "") != "")
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "") != "")
        //                                            {
        //                                                _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "");
        //                                                if (_SubscriberGender.Trim().Replace("*", "").ToUpper() == "OTHER")
        //                                                {
        //                                                    _SubscriberGender = "U";
        //                                                }
        //                                                oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                            }


        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                            {
        //                                                _ModifiedPayerName = "";
        //                                                _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                            }
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                            /*Should be 00710 FOR BCBS*/
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                            ////////N3 PAYER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                            ////////N4 PAYER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"

        //                                            #endregion


        //                                            //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
        //                                            //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }

        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");

        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }
        //                                            //if (_FirstPOS ==_NewPOS)
        //                                            //{
        //                                            #region Claim Details - Loop 2300
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", ""));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount

        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");
        //                                            if (oTransaction.AutoClaim == true)
        //                                            {
        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    oSegment.set_DataElementValue(11, 1, "AA");
        //                                                    oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", ""));
        //                                                }
        //                                            }

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF CURRENT INJURY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                if (oTransaction.AutoClaim == true)
        //                                                {
        //                                                    if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                    {
        //                                                        OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                        ////DTP DATE OF ACCIDENT 
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                        oSegment.set_DataElementValue(1, 0, "439");
        //                                                        oSegment.set_DataElementValue(2, 0, "D8");
        //                                                        oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    }
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                            //oSegment.set_DataElementValue(1, 0, "438");
        //                                            //oSegment.set_DataElementValue(2, 0, "D8");
        //                                            //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetoSimilarSyptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }

        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                //REF CLEARING HOUSE CLAIM NUMBER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }



        //                                            #endregion

        //                                            #region HI - Diagnosis


        //                                            //HI HEALTH CARE DIAGNOSIS CODES
        //                                            #region Commented code
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                            //oSegment.set_DataElementValue(1, 1, "BK");
        //                                            //if (oTransaction.Lines[0].Dx1Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(1, 2, oTransaction.Lines[0].Dx1Code.ToString().Replace(".", "").Trim());// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE)));  // "0340");
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx1Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //else
        //                                            //{
        //                                            //    //MessageBox.Show("Principle Diagnosis is not given.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                            //    //return;
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx2Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(2, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(2, 2, oTransaction.Lines[0].Dx2Code.ToString().Replace(".", "").Trim());//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE))); // oCase.CaseDiagnosis[0].DiagnosisCode.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx2Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx3Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(3, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(3, 2, oTransaction.Lines[0].Dx3Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx3Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx4Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(4, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(4, 2, oTransaction.Lines[0].Dx4Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx4Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx5Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(5, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(5, 2, oTransaction.Lines[0].Dx5Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx6Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(6, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(6, 2, oTransaction.Lines[0].Dx6Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx7Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(7, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(7, 2, oTransaction.Lines[0].Dx7Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx8Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(8, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(8, 2, oTransaction.Lines[0].Dx8Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            ////} 
        //                                            #endregion Commented code
        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                           " ISNULL(sName,'') AS sName,  " +
        //                                                           " ISNULL(sContact,'') AS sContact,   " +
        //                                                           " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                           " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                           " ISNULL(sCity,'') AS sCity,   " +
        //                                                           " ISNULL(sState,'') AS sState,   " +
        //                                                           " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                           " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                           " ISNULL(sFax,'') AS sFax,   " +
        //                                                           " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                           " ISNULL(sURL,'') AS sURL,   " +
        //                                                           " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                           " ISNULL(sPager,'') AS sPager,   " +
        //                                                           " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                           " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                           " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                           " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                           " ISNULL(sGender,'') AS sGender,   " +
        //                                                           " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                           " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                           " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                           " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                           " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                           " ISNULL(sDegree,'') AS sDegree   " +
        //                                                           " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                           " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    //if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    //oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //    //oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    ////REF
        //                                                    //if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    if (_Provider.SSN.ToString().Trim().Replace("*", "") != "")
        //                                                    //    {
        //                                                    //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //        oSegment.set_DataElementValue(2, 0, _Provider.SSN.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //    }
        //                                                    //}
        //                                                }
        //                                            }


        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "232929");//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {
        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }


        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI

        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                /* _FirstPOS=12 then don't provide this */
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 1)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)

        //                                                    /*5 and 9 same?*/
        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    /*Other Insured Identifier*/
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 
        //                                            //}//end of IF loop for POS
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity

        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }



        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }
        //                                    #endregion " Subscriber "

        //                                        }//end of if loop for Subscriber as Patient
        //                                        else
        //                                        {
        //                                            #region "Dependent Loop"

        //                                            //////*****************************************************************************************************
        //                                            //////******* DEPENDENT HIERARCHICAL LEVEL ****************************************************************
        //                                            //////*****************************************************************************************************
        //                                            ////TODO: Get the datatable for dependent info to add fields of service in EDI file.

        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                            {
        //                                                _ModifiedPayerName = "";
        //                                                _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                            }
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                            ////////N3 PAYER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                            ////////N4 PAYER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"

        //                                            #endregion

        //                                            nHlCount = nHlCount + 1;

        //                                            //2000B DEPENDENT HL LOOP
        //                                            //HL-DEPENDENT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                            oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
        //                                            oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
        //                                            oSegment.set_DataElementValue(3, 0, "23");
        //                                            oSegment.set_DataElementValue(4, 0, "0");

        //                                            //PAT - PATIENT/DEPENDENT INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "")); //01 - Spouse 19 - Child

        //                                            #region " Patient Info"

        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "QC");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientLastName.Trim().Replace("*", ""));//Patient Last Name
        //                                            oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientFirstName.Trim().Replace("*", ""));//Patient First Name

        //                                            //N3 - ADDRESS INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientAddress1.Trim().Replace("*", ""));//"Address"

        //                                            //N4 - GEOGRAPHIC LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientCity.Trim().Replace("*", ""));//"City"
        //                                            oSegment.set_DataElementValue(2, 0, oPatient.DemographicsDetail.PatientState.Trim().Replace("*", ""));//"State"
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientZip.Trim().Replace("*", ""));//"Zip"

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oPatient.DemographicsDetail.PatientDOB.ToShortDateString())));
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientGender.Trim().Replace("*", ""));

        //                                            #endregion " Patient Info"

        //                                            //******* DEPENDENT CLAIM INFORMATION *************************************************************
        //                                            //TODO: Get the datatable for Claim info to add fields of service in EDI file
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            iItemCount = 1;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }
        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");
        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }

        //                                            #region "Dependent Claim Level"
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "")); //Claim Amount
        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus);
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                    ////DTP DATE OF ACCIDENT 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "439");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            if (oTransaction.OnsiteDate > 0 && oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "438");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.OnsiteDate.ToString())).Trim().Replace("*",""));
        //                                            }
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }
        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }

        //                                            //REF CLEARING HOUSE CLAIM NUMBER
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }
        //                                            #endregion "Dependent Claim Level"


        //                                            #region HI - Diagnosis for Dependent
        //                                            //HI HEALTH CARE DIAGNOSIS CODES

        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex][0]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                            " ISNULL(sName,'') AS sName,  " +
        //                                                            " ISNULL(sContact,'') AS sContact,   " +
        //                                                            " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                            " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                            " ISNULL(sCity,'') AS sCity,   " +
        //                                                            " ISNULL(sState,'') AS sState,   " +
        //                                                            " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                            " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                            " ISNULL(sFax,'') AS sFax,   " +
        //                                                            " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                            " ISNULL(sURL,'') AS sURL,   " +
        //                                                            " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                            " ISNULL(sPager,'') AS sPager,   " +
        //                                                            " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                            " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                            " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                            " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                            " ISNULL(sGender,'') AS sGender,   " +
        //                                                            " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                            " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                            " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                            " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                            " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                            " ISNULL(sDegree,'') AS sDegree   " +
        //                                                            " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                            " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    ////REF
        //                                                    //if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    //if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, _Provider.SSN);//"1039255");// 
        //                                                    //}
        //                                                }
        //                                            }

        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim() != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "32432432");//dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*",""));//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {

        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }

        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                /*Do not report service/facility  */
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI
        //                                                /*location when 2300 CLM5-1 is equal to 12*/
        //                                                /*(home) _FirstPOS!=12 */
        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 1)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self
        //                                                    //Chec for SBR05,SBR09
        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)


        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    /*If OI06 present*/
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 

        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                //iItemCount = 1;
        //                                                //iItemCount = iItemCount + nLine;
        //                                                //oTransLine = new TransactionLine();
        //                                                //oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                ////******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                ////TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                ////2400 SERVICE LINE
        //                                                //sInstance = iItemCount.ToString().Trim();
        //                                                ////LX SERVICE LINE COUNTER
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                //oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                ////SV1 PROFESSIONAL SERVICE
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                //oSegment.set_DataElementValue(1, 1, "HC");
        //                                                //oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                //if (oTransLine.Mod1Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                //}
        //                                                //if (oTransLine.Mod2Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                //}
        //                                                //string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                //if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                //{
        //                                                //    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                //}
        //                                                //oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                //oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                //oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity


        //                                                ////if (oTransLine.Dx1Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "1");//"Diagnosis Pointer1" (Must Use)
        //                                                ////    if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 2, "2");//"Diagnosis Pointer2"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 3, "3");//"Diagnosis Pointer3"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 4, "4");//"Diagnosis Pointer4"
        //                                                ////    }
        //                                                ////}
        //                                                ////else if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "2");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "3");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "4");//"Diagnosis Pointer1"
        //                                                ////}

        //                                                ////////oSegment.set_DataElementValue(9, 0, "N");////Y=Yes, N=No

        //                                                //if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                //{
        //                                                //    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                //    {
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx1Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx2Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx3Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx4Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //    }
        //                                                //}

        //                                                ////DTP DATE - SERVICE DATE(S)
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "472");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", "").Trim().Replace("*", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString().Trim().Replace("*", ""));//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    /*AJ,AH*/
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity
        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }

        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }

        //                                            #endregion " Dependent "
        //                                        }//end of else loop for dependent

        //                                    }//If loop for Patient Insurance
        //                                    //Transaction Line Loop
        //                                }//Transaction SETS Loop
        //                            }
        //                        }
        //                    }

        //                    #region " Save EDI File "

        //                    //Save to a file
        //                    //SaveFileDialog oSave = new SaveFileDialog();
        //                    //oSave.Filter = "TEXT Files (*.txt)|*.txt|EDI Files (*.edi)|*.edi|X12 Files (*.X12)|*.X12";
        //                    //if (oSave.ShowDialog() == DialogResult.OK)
        //                    //{
        //                    // sPath = sPath + "837 EDI\\";
        //                    sPath = "";
        //                    //sPath = AppDomain.CurrentDomain.BaseDirectory + "837 EDI\\";
        //                    sPath = appSettings["StartupPath"].ToString() + "\\ " + "837 EDI\\";
        //                    if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }

        //                    sEdiFile = GetEDIFileName(sPath, _BatchName);

        //                    oEdiDoc.Save(sEdiFile);
        //                    System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
        //                    string strData;
        //                    strData = oReader.ReadToEnd();
        //                    oReader.Close();

        //                    System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
        //                    oWriter.Write(strData);
        //                    oWriter.Close();
        //                    _result = sEdiFile;
        //                    MessageBox.Show("EDI claim generated successfully.", "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                    //}


        //                    #endregion " Save EDI File "

        //                    #region " Update Claim Manager Table "
        //                    Int64 _date = 0;
        //                    Int64 _time = 0;
        //                    _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
        //                    _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
        //                    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
        //                    Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
        //                    ogloClaimManager.Dispose();
        //                    #endregion

        //                    //DESTROYS OBJECTS
        //                    oSegment.Dispose();
        //                    oTransactionset.Dispose();
        //                    oGroup.Dispose();
        //                    oInterchange.Dispose();

        //                }
        //            }
        //        }
        //        catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
        //        {
        //            string _strEx = "";
        //            ediException oException = null;
        //            oException = (ediException)Rex.WrappedException;
        //            _strEx = oException.get_Description();
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
        //            _result = "";
        //        }
        //        catch (Exception ex)
        //        {
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //            _result = "";
        //        }
        //        finally
        //        {
        //            if (dtClearingHouse != null) { dtClearingHouse.Dispose(); }
        //            if (dtSubmitter != null) { dtSubmitter.Dispose(); }
        //            if (dtReceiver != null) { dtReceiver.Dispose(); }
        //            if (dtBillingProvider != null) { dtBillingProvider.Dispose(); }
        //            if (dtRenderingProvider != null) { dtRenderingProvider.Dispose(); }
        //            if (dtFacility != null) { dtFacility.Dispose(); }
        //            if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); }
        //            if (dtReferral != null) { dtReferral.Dispose(); }
        //        }
        //        #endregion " Generate EDI "

        //    }//SEF File present IF loop
        //    return _result;
        //}

        //public string EDI837GenerationMedicare(ArrayList SelectedTransactions, string _BatchName)
        //{
        //    DataTable dtClearingHouse = new DataTable();
        //    DataTable dtSubmitter = new DataTable();
        //    DataTable dtReceiver = new DataTable();
        //    DataTable dtBillingProvider = new DataTable();
        //    DataTable dtRenderingProvider = new DataTable();
        //    DataTable dtFacility = new DataTable();
        //    DataTable dtPatientInsurances = new DataTable();
        //    DataTable dtReferral = new DataTable();
        //    string _result = "";
        //    string InterchangeHeader = "";
        //    string FunctionalGroupHeader = "";
        //    string TransactionSetHeader = "";
        //    string _ClaimStatus = "1";
        //    if (_IsSEFPresent == true)
        //    {
        //        #region " Generate EDI "

        //        string sEntity = "";
        //        string sInstance = "";
        //        string _strSQL = "";
        //        DataTable dt;
        //        string _BillingProviderDetails = "";
        //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
        //        bool IsSecondaryInsurance = false;
        //        Transaction oTransaction = new Transaction();
        //        bool _SecondayInsuranceAddressDetailsRequired = false;
        //        //string _result = "";
        //        try
        //        {
        //            //Get Clearing House Information in Datatable

        //            dtClearingHouse = new DataTable();
        //            dtClearingHouse = ogloBilling.GetClearingHouseSettings();
        //            if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
        //            {
        //                MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                return "";
        //            }
        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //Get Submitter Information in Datatable
        //                                dtSubmitter = new DataTable();
        //                                dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), oTransaction.ProviderID);
        //                                if (dtSubmitter == null && dtSubmitter.Rows.Count < 1)
        //                                {
        //                                    MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                    return "";
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            oEdiDoc.New();
        //            oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;
        //            oEdiDoc.set_Property(DocumentPropertyIDConstants.Property_DocumentBufferIO, 2000);

        //            oEdiDoc.SegmentTerminator = "~\r\n";
        //            oEdiDoc.ElementTerminator = "*";
        //            oEdiDoc.CompositeTerminator = ":";

        //            string _TypeOfData = "T";

        //            #region " Interchange Segment "
        //            //Create the interchange segment
        //            ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

        //            if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
        //            {
        //                _TypeOfData = "T";
        //            }
        //            else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
        //            {
        //                _TypeOfData = "P";
        //            }

        //            oSegment.set_DataElementValue(1, 0, "00");
        //            oSegment.set_DataElementValue(3, 0, "00");
        //            oSegment.set_DataElementValue(5, 0, "ZZ");
        //            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//_SenderID.Trim());//"1234545");//
        //            oSegment.set_DataElementValue(7, 0, "ZZ");
        //            //oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
        //            //This is the receiver ID given by BCBSM
        //            oSegment.set_DataElementValue(8, 0, "382069753");
        //            string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
        //            oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
        //            string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", ""));
        //            oSegment.set_DataElementValue(11, 0, "U");
        //            oSegment.set_DataElementValue(12, 0, "00401");
        //            InterchangeHeader = ControlNumberGeneration("1");
        //            oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
        //            oSegment.set_DataElementValue(14, 0, "0");
        //            oSegment.set_DataElementValue(15, 0, _TypeOfData);
        //            oSegment.set_DataElementValue(16, 0, ":");

        //            #endregion " Interchange Segment "

        //            #region " Functional Group "

        //            //Create the functional group segment
        //            ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X098A1"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
        //            oSegment.set_DataElementValue(1, 0, "HC");
        //            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", ""));////_SenderName);
        //            //oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", ""));//// _ReceiverCode.Trim());//"ClarEDI");
        //            //This is the receiver ID given by BCBSM
        //            oSegment.set_DataElementValue(3, 0, "382069753");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
        //            string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", ""));
        //            FunctionalGroupHeader = ControlNumberGeneration("2");
        //            oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
        //            oSegment.set_DataElementValue(7, 0, "X");
        //            oSegment.set_DataElementValue(8, 0, "004010X098A1");

        //            #endregion " Functional Group "

        //            #region ST - TRANSACTION SET HEADER

        //            ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
        //            TransactionSetHeader = ControlNumberGeneration("3");
        //            oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

        //            #endregion ST - TRANSACTION SET HEADER

        //            #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            //Begining Segment 
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
        //            oSegment.set_DataElementValue(1, 0, "0019"); //Herarchical Structure Code
        //            oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
        //            oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", ""));//Date of claim
        //            string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "");
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "")); //"1230");
        //            oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
        //            #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            #region REF - TRANSMISSION TYPE IDENTIFICATION

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
        //            oSegment.set_DataElementValue(1, 0, "87");
        //            oSegment.set_DataElementValue(2, 0, "004010X098A1");//"ReferenceID"

        //            #endregion REF - TRANSMISSION TYPE IDENTIFICATION

        //            #region NM1 - SUBMITTER


        //            //1000A SUBMITTER
        //            //NM1 SUBMITTER

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "41");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
        //            oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
        //            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.


        //            //PER SUBMITTER EDI CONTACT INFORMATION
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
        //            oSegment.set_DataElementValue(1, 0, "IC");
        //            if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "") == "")
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
        //            }
        //            else
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", ""));
        //            }

        //            oSegment.set_DataElementValue(3, 0, "TE");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone


        //            #endregion NM1 - SUBMITTER

        //            #region NM1 - RECEIVER NAME

        //            //1000B RECEIVER
        //            //NM1 RECEIVER NAME
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "40");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", ""));//"GatewayEDI");//clearing house or contractor or carrier or FI name
        //            oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
        //            /*ID Code?*/
        //            ///This is the Receiver ID For BCBSM Clearing House
        //            oSegment.set_DataElementValue(9, 0, "00710");// Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.

        //            #endregion NM1 - RECEIVER NAME

        //            nHlCount = 0;

        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //FillAllDetails(oTransaction);
        //                                Resource oResource = new Resource(_databaseconnectionstring);
        //                                Provider _Provider = null;
        //                                gloPatient.Patient oPatient = null;
        //                                gloPatient.Referrals oReferral = new gloPatient.Referrals();
        //                                if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
        //                                {
        //                                    _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
        //                                    if (_Provider == null)
        //                                    {
        //                                        MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
        //                                    dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID);
        //                                    oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
        //                                    if (oPatient == null)
        //                                    {
        //                                        MessageBox.Show("Patient information is not present for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
        //                                    {
        //                                        MessageBox.Show("Patient " + oPatient.DemographicsDetail.PatientFirstName + " " + oPatient.DemographicsDetail.PatientLastName + " Insurance details are missing for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    dtFacility = ogloBilling.GetFacilityInfo(oTransaction.FacilityCode, oTransaction.ProviderID);


        //                                }

        //                                for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
        //                                {
        //                                    //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

        //                                    nHlCount = nHlCount + 1;
        //                                    nHlProvParent = nHlCount;
        //                                    //2000A BILLING/PAY-TO PROVIDER HL LOOP
        //                                    //HL-BILLING PROVIDER

        //                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                    oSegment.set_DataElementValue(3, 0, "20");
        //                                    oSegment.set_DataElementValue(4, 0, "1");

        //                                    #region Billing Provider


        //                                    //Get the Address Setting for Billing Provider
        //                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //                                    Object _objResult = null;
        //                                    string strBillingSetting = "";
        //                                    oSettings.GetSetting("BillingSetting", Convert.ToInt64(oTransaction.ProviderID), _ClinicID, out _objResult);
        //                                    if (_objResult != null)
        //                                    {
        //                                        // |Company|Practice|Business"
        //                                        strBillingSetting = Convert.ToString(_objResult);
        //                                    }
        //                                    switch (strBillingSetting)
        //                                    {
        //                                        case "Business":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BMState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Practice":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BPracState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BPracZIP.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Company":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyName.Trim().Replace("*", ""));//Billing provider name
        //                                                //oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*",""));
        //                                                //oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*",""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.CompanyNPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.CompanyNPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.CompanyState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyZip.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.CompanyTaxID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.CompanyTaxID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        default:

        //                                            //2010AA BILLING PROVIDER
        //                                            //NM1 BILLING PROVIDER NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "85");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                            oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                            oSegment.set_DataElementValue(8, 0, "XX");
        //                                            if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                            }

        //                                            //N3 BILLING PROVIDER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1);//Provider Address

        //                                            //N4 BILLING PROVIDER LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMCity);////Provider City
        //                                            oSegment.set_DataElementValue(2, 0, _Provider.BMState);//Provider state
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.BMZIP);//Provider ZIP

        //                                            //REF 
        //                                            if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                if (_Provider.EmployerID.Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                            }
        //                                            //REF 
        //                                            else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                            }
        //                                            break;
        //                                    }

        //                                    #endregion

        //                                    //'******************************************************************************************************
        //                                    //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
        //                                    //'******************************************************************************************************
        //                                    #region Subscriber
        //                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
        //                                    {
        //                                        string _strRelation = "";
        //                                        string _strInsuranceType = "";
        //                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "");
        //                                        _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "");
        //                                        if (_strInsuranceType == "MB")
        //                                        {
        //                                            if (_strRelation != "18")
        //                                            {
        //                                                _strRelation = "18";
        //                                            }
        //                                        }

        //                                        #region Subscriber HL Loop - 2000B

        //                                        nHlCount = nHlCount + 1;
        //                                        nHlSubscriberParent = nHlCount;

        //                                        //2000B SUBSCRIBER HL LOOP
        //                                        //HL-SUBSCRIBER
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(3, 0, "22");

        //                                        if (_strRelation == "18")
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "0");
        //                                        }
        //                                        else
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "1");

        //                                        }

        //                                        //SBR SUBSCRIBER INFORMATION
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));
        //                                        /*Should not be T */
        //                                        oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST);//"P");
        //                                        //if (_strRelation == "18")
        //                                        //{
        //                                        //For Medicare
        //                                        oSegment.set_DataElementValue(2, 0, "18");
        //                                        //}
        //                                        oSegment.set_DataElementValue(4, 0, "Insured's Group Name");
        //                                        //oSegment.set_DataElementValue(5, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", ""));
        //                                        /*BL for Blue Shield*/
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", ""));//"HM");

        //                                        //2010BA SUBSCRIBER 
        //                                        //NM1 SUBSCRIBER NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "IL");
        //                                        oSegment.set_DataElementValue(2, 0, "1");
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                        oSegment.set_DataElementValue(8, 0, "MI");
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", ""));//"Insurance Id"

        //                                        //N3 SUBSCRIBER ADDRESS
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                        //N4 SUBSCRIBER CITY
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                        #endregion SubscriberHL Loop - 2000B

        //                                        if (_strRelation == "18")
        //                                        {

        //                                            //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
        //                                            string _SubscriberGender = "";
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]).Trim().Replace("*", "") != "")
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "") != "")
        //                                            {
        //                                                _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberGender"]).Trim().Replace("*", "");
        //                                                if (_SubscriberGender.Trim().Replace("*", "").ToUpper() == "OTHER")
        //                                                {
        //                                                    _SubscriberGender = "U";
        //                                                }
        //                                                oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                            }


        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                            {
        //                                                _ModifiedPayerName = "";
        //                                                _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                            }
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                            /*Should be 00710 FOR BCBS*/
        //                                            //Medicare Must be equal to 00953
        //                                            //Medicaid Must be equal to  D00111 when SBR09 is MC
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                            ////////N3 PAYER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                            ////////N4 PAYER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"

        //                                            #endregion


        //                                            //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
        //                                            //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }

        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");

        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }
        //                                            //if (_FirstPOS ==_NewPOS)
        //                                            //{
        //                                            #region Claim Details - Loop 2300
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", ""));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount

        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");
        //                                            if (oTransaction.AutoClaim == true)
        //                                            {
        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    oSegment.set_DataElementValue(11, 1, "AA");
        //                                                    oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", ""));
        //                                                }
        //                                            }

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF CURRENT INJURY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                if (oTransaction.AutoClaim == true)
        //                                                {
        //                                                    if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                    {
        //                                                        OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                        ////DTP DATE OF ACCIDENT 
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                        oSegment.set_DataElementValue(1, 0, "439");
        //                                                        oSegment.set_DataElementValue(2, 0, "D8");
        //                                                        oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    }
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                            //oSegment.set_DataElementValue(1, 0, "438");
        //                                            //oSegment.set_DataElementValue(2, 0, "D8");
        //                                            //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetoSimilarSyptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }

        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                //REF CLEARING HOUSE CLAIM NUMBER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }



        //                                            #endregion

        //                                            #region HI - Diagnosis


        //                                            //HI HEALTH CARE DIAGNOSIS CODES
        //                                            #region Commented code
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                            //oSegment.set_DataElementValue(1, 1, "BK");
        //                                            //if (oTransaction.Lines[0].Dx1Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(1, 2, oTransaction.Lines[0].Dx1Code.ToString().Replace(".", "").Trim());// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE)));  // "0340");
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx1Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //else
        //                                            //{
        //                                            //    //MessageBox.Show("Principle Diagnosis is not given.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                            //    //return;
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx2Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(2, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(2, 2, oTransaction.Lines[0].Dx2Code.ToString().Replace(".", "").Trim());//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE))); // oCase.CaseDiagnosis[0].DiagnosisCode.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx2Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx3Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(3, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(3, 2, oTransaction.Lines[0].Dx3Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx3Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx4Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(4, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(4, 2, oTransaction.Lines[0].Dx4Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx4Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx5Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(5, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(5, 2, oTransaction.Lines[0].Dx5Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx6Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(6, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(6, 2, oTransaction.Lines[0].Dx6Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx7Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(7, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(7, 2, oTransaction.Lines[0].Dx7Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx8Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(8, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(8, 2, oTransaction.Lines[0].Dx8Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            ////} 
        //                                            #endregion Commented code
        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                           " ISNULL(sName,'') AS sName,  " +
        //                                                           " ISNULL(sContact,'') AS sContact,   " +
        //                                                           " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                           " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                           " ISNULL(sCity,'') AS sCity,   " +
        //                                                           " ISNULL(sState,'') AS sState,   " +
        //                                                           " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                           " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                           " ISNULL(sFax,'') AS sFax,   " +
        //                                                           " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                           " ISNULL(sURL,'') AS sURL,   " +
        //                                                           " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                           " ISNULL(sPager,'') AS sPager,   " +
        //                                                           " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                           " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                           " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                           " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                           " ISNULL(sGender,'') AS sGender,   " +
        //                                                           " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                           " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                           " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                           " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                           " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                           " ISNULL(sDegree,'') AS sDegree   " +
        //                                                           " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                           " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    //if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    //oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //    //oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    ////REF
        //                                                    //if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    if (_Provider.SSN.ToString().Trim().Replace("*", "") != "")
        //                                                    //    {
        //                                                    //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //        oSegment.set_DataElementValue(2, 0, _Provider.SSN.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //    }
        //                                                    //}
        //                                                }
        //                                            }


        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "232929");//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {
        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }


        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI

        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                /* _FirstPOS=12 then don't provide this */
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 1)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)

        //                                                    /*5 and 9 same?*/
        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    /*Other Insured Identifier*/
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 
        //                                            //}//end of IF loop for POS
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity

        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }



        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }
        //                                    #endregion " Subscriber "

        //                                        }//end of if loop for Subscriber as Patient
        //                                        else
        //                                        {
        //                                            #region "Dependent Loop"

        //                                            //////*****************************************************************************************************
        //                                            //////******* DEPENDENT HIERARCHICAL LEVEL ****************************************************************
        //                                            //////*****************************************************************************************************
        //                                            ////TODO: Get the datatable for dependent info to add fields of service in EDI file.

        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "");
        //                                            if (Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                            {
        //                                                _ModifiedPayerName = "";
        //                                                _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                            }
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "PR");
        //                                            oSegment.set_DataElementValue(2, 0, "2");
        //                                            oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                            oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                            //Medicare Must be equal to 00953
        //                                            //Medicaid Must be equal to  D00111 when SBR09 is MC                           
        //                                            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                            ////////N3 PAYER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                            ////////N4 PAYER CITY
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"

        //                                            #endregion

        //                                            nHlCount = nHlCount + 1;

        //                                            //2000B DEPENDENT HL LOOP
        //                                            //HL-DEPENDENT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                            oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
        //                                            oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
        //                                            oSegment.set_DataElementValue(3, 0, "23");
        //                                            oSegment.set_DataElementValue(4, 0, "0");

        //                                            //PAT - PATIENT/DEPENDENT INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "")); //01 - Spouse 19 - Child

        //                                            #region " Patient Info"

        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "QC");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientLastName.Trim().Replace("*", ""));//Patient Last Name
        //                                            oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientFirstName.Trim().Replace("*", ""));//Patient First Name

        //                                            //N3 - ADDRESS INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientAddress1.Trim().Replace("*", ""));//"Address"

        //                                            //N4 - GEOGRAPHIC LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientCity.Trim().Replace("*", ""));//"City"
        //                                            oSegment.set_DataElementValue(2, 0, oPatient.DemographicsDetail.PatientState.Trim().Replace("*", ""));//"State"
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientZip.Trim().Replace("*", ""));//"Zip"

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oPatient.DemographicsDetail.PatientDOB.ToShortDateString())));
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientGender.Trim().Replace("*", ""));

        //                                            #endregion " Patient Info"

        //                                            //******* DEPENDENT CLAIM INFORMATION *************************************************************
        //                                            //TODO: Get the datatable for Claim info to add fields of service in EDI file
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            iItemCount = 1;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }
        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");
        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }

        //                                            #region "Dependent Claim Level"
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "")); //Claim Amount
        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus);
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                    ////DTP DATE OF ACCIDENT 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "439");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            if (oTransaction.OnsiteDate > 0 && oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "438");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.OnsiteDate.ToString())).Trim().Replace("*",""));
        //                                            }
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }
        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }

        //                                            //REF CLEARING HOUSE CLAIM NUMBER
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }
        //                                            #endregion "Dependent Claim Level"


        //                                            #region HI - Diagnosis for Dependent
        //                                            //HI HEALTH CARE DIAGNOSIS CODES

        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex][0]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                            " ISNULL(sName,'') AS sName,  " +
        //                                                            " ISNULL(sContact,'') AS sContact,   " +
        //                                                            " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                            " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                            " ISNULL(sCity,'') AS sCity,   " +
        //                                                            " ISNULL(sState,'') AS sState,   " +
        //                                                            " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                            " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                            " ISNULL(sFax,'') AS sFax,   " +
        //                                                            " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                            " ISNULL(sURL,'') AS sURL,   " +
        //                                                            " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                            " ISNULL(sPager,'') AS sPager,   " +
        //                                                            " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                            " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                            " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                            " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                            " ISNULL(sGender,'') AS sGender,   " +
        //                                                            " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                            " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                            " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                            " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                            " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                            " ISNULL(sDegree,'') AS sDegree   " +
        //                                                            " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                            " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    ////REF
        //                                                    //if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    //if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    //}
        //                                                    //else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    //{
        //                                                    //    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                    //    oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                    //    oSegment.set_DataElementValue(2, 0, _Provider.SSN);//"1039255");// 
        //                                                    //}
        //                                                }
        //                                            }

        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim() != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "32432432");//dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*",""));//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {

        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }

        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                /*Do not report service/facility  */
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI
        //                                                /*location when 2300 CLM5-1 is equal to 12*/
        //                                                /*(home) _FirstPOS!=12 */
        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 1)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self
        //                                                    //Chec for SBR05,SBR09
        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)


        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    /*If OI06 present*/
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 

        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                //iItemCount = 1;
        //                                                //iItemCount = iItemCount + nLine;
        //                                                //oTransLine = new TransactionLine();
        //                                                //oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                ////******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                ////TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                ////2400 SERVICE LINE
        //                                                //sInstance = iItemCount.ToString().Trim();
        //                                                ////LX SERVICE LINE COUNTER
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                //oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                ////SV1 PROFESSIONAL SERVICE
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                //oSegment.set_DataElementValue(1, 1, "HC");
        //                                                //oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                //if (oTransLine.Mod1Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                //}
        //                                                //if (oTransLine.Mod2Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                //}
        //                                                //string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                //if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                //{
        //                                                //    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                //}
        //                                                //oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                //oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                //oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity


        //                                                ////if (oTransLine.Dx1Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "1");//"Diagnosis Pointer1" (Must Use)
        //                                                ////    if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 2, "2");//"Diagnosis Pointer2"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 3, "3");//"Diagnosis Pointer3"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 4, "4");//"Diagnosis Pointer4"
        //                                                ////    }
        //                                                ////}
        //                                                ////else if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "2");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "3");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "4");//"Diagnosis Pointer1"
        //                                                ////}

        //                                                ////////oSegment.set_DataElementValue(9, 0, "N");////Y=Yes, N=No

        //                                                //if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                //{
        //                                                //    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                //    {
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx1Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx2Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx3Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx4Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //    }
        //                                                //}

        //                                                ////DTP DATE - SERVICE DATE(S)
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "472");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", "").Trim().Replace("*", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString().Trim().Replace("*", ""));//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    /*AJ,AH*/
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity
        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }

        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }

        //                                            #endregion " Dependent "
        //                                        }//end of else loop for dependent

        //                                    }//If loop for Patient Insurance
        //                                    //Transaction Line Loop
        //                                }//Transaction SETS Loop
        //                            }
        //                        }
        //                    }

        //                    #region " Save EDI File "

        //                    //Save to a file
        //                    //SaveFileDialog oSave = new SaveFileDialog();
        //                    //oSave.Filter = "TEXT Files (*.txt)|*.txt|EDI Files (*.edi)|*.edi|X12 Files (*.X12)|*.X12";
        //                    //if (oSave.ShowDialog() == DialogResult.OK)
        //                    //{
        //                    // sPath = sPath + "837 EDI\\";
        //                    sPath = "";
        //                    //sPath = AppDomain.CurrentDomain.BaseDirectory + "837 EDI\\";
        //                    sPath = appSettings["StartupPath"].ToString() + "\\" + "837 EDI\\";
        //                    if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }

        //                    sEdiFile = GetEDIFileName(sPath, _BatchName);

        //                    oEdiDoc.Save(sEdiFile);
        //                    System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
        //                    string strData;
        //                    strData = oReader.ReadToEnd();
        //                    oReader.Close();

        //                    System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
        //                    oWriter.Write(strData);
        //                    oWriter.Close();
        //                    _result = sEdiFile;
        //                    MessageBox.Show("EDI claim generated successfully.", "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                    //}


        //                    #endregion " Save EDI File "

        //                    #region " Update Claim Manager Table "
        //                    Int64 _date = 0;
        //                    Int64 _time = 0;
        //                    _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
        //                    _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
        //                    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
        //                    Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
        //                    ogloClaimManager.Dispose();
        //                    #endregion

        //                    //DESTROYS OBJECTS
        //                    oSegment.Dispose();
        //                    oTransactionset.Dispose();
        //                    oGroup.Dispose();
        //                    oInterchange.Dispose();

        //                }
        //            }
        //        }
        //        catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
        //        {
        //            string _strEx = "";
        //            ediException oException = null;
        //            oException = (ediException)Rex.WrappedException;
        //            _strEx = oException.get_Description();
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
        //            _result = "";
        //        }
        //        catch (Exception ex)
        //        {
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //            _result = "";
        //        }
        //        finally
        //        {
        //            if (dtClearingHouse != null) { dtClearingHouse.Dispose(); }
        //            if (dtSubmitter != null) { dtSubmitter.Dispose(); }
        //            if (dtReceiver != null) { dtReceiver.Dispose(); }
        //            if (dtBillingProvider != null) { dtBillingProvider.Dispose(); }
        //            if (dtRenderingProvider != null) { dtRenderingProvider.Dispose(); }
        //            if (dtFacility != null) { dtFacility.Dispose(); }
        //            if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); }
        //            if (dtReferral != null) { dtReferral.Dispose(); }
        //        }
        //        #endregion " Generate EDI "

        //    }//SEF File present IF loop
        //    return _result;
        //}

        ////public void LoadAcknowledgementEDI()
        ////{
        ////    try
        ////    {

        ////        string _ServerPath = this.ServerPath;
        ////        string _BaseFolder = "Claim Management";
        ////        string _OutInFolder = "Inbox";
        ////        string _ClaimFolder = "997 Acknowledgement";
        ////        string _claimFolderPath = "";

        ////        _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder;

        ////        if (System.IO.Directory.Exists(_claimFolderPath) == false)
        ////        {
        ////            MessageBox.Show("Path for acknowledgement file does not exist", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        ////        }
        ////        else
        ////        {

        ////            string[] _AcknowledgementFiles = System.IO.Directory.GetFiles(_claimFolderPath,"*.997");

        ////            FileInfo oFile = new FileInfo(_AcknowledgementFiles[0]);

        ////            if (!Directory.Exists("C:\\Temp"))
        ////            {
        ////                Directory.CreateDirectory("C:\\Temp");
        ////            }

        ////            if (!File.Exists("C:\\Temp\\temp.X12"))
        ////            {
        ////                File.Copy(_AcknowledgementFiles[0], "C:\\Temp\\temp.X12");
        ////            }
        ////            else
        ////            {
        ////                File.Delete("C:\\Temp\\temp.X12");
        ////                File.Copy(_AcknowledgementFiles[0], "C:\\Temp\\temp.X12");
        ////            }


        ////            //System.Diagnostics.Process.Start(AppDomain.CurrentDomain.BaseDirectory + "EncryptEDI.bat", "" + "C:\\temp\\" + oFile.Name + " C:\\thekey.key");

        ////            sEdiFile = "C:\\Temp\\temp.X12";//Path.ChangeExtension("C:\\temp\\" + oFile.Name, "X12");
        ////            //File.Delete("C:\\temp\\" + oFile.Name);

        ////            oEdiDoc.LoadSchema("997_X12-4010.SEF", 0);
        ////            // Disabling the internal standard reference library to makes sure that 
        ////            // FREDI uses only the SEF file provided
        ////            oEdiDoc.New();

        ////            // This makes certain that the EDI file must use the same version SEF file, otherwise
        ////            // the process will stop.
        ////            oSchemas.set_Option(SchemasOptionIDConstants.OptSchemas_VersionRestrict, 1);

        ////            // By setting the cursor type to ForwardOnly, FREDI does not load the entire file into memory, which
        ////            // improves performance when processing larger EDI files.
        ////            oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardOnly;

        ////            if (File.Exists(sEdiFile))
        ////            {
        ////                oEdiDoc.LoadEdi(sEdiFile);
        ////            }
        ////            else
        ////            {
        ////                MessageBox.Show("997 EDI File does not exist", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        ////            }
        ////        }
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        ////    }
        ////}

        //public void LoadAcknowledgementEDI()
        //{
        //    try
        //    {
        //        string _ServerPath = this.ServerPath;
        //        string _BaseFolder = "Claim Management";
        //        string _OutInFolder = "Inbox";
        //        string _ClaimFolder = "997 Acknowledgement";
        //        string _claimFolderPath = "";


        //        _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder;

        //        if (System.IO.Directory.Exists(_claimFolderPath) == false)
        //        {
        //            MessageBox.Show("Path for acknowledgement file does not exist", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //        }
        //        else
        //        {

        //            string[] _AcknowledgementFiles = System.IO.Directory.GetFiles(_claimFolderPath, "*.997");
        //            if (_AcknowledgementFiles != null && _AcknowledgementFiles.Length > 0)
        //            {
        //                sEdiFile = _AcknowledgementFiles[0];
        //                if (File.Exists(sEdiFile) == true)
        //                {
        //                    oEdiDoc.LoadSchema("997_X12-4010.SEF", 0);
        //                    oEdiDoc.New();
        //                    oSchemas.set_Option(SchemasOptionIDConstants.OptSchemas_VersionRestrict, 1);
        //                    oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardOnly;
        //                    oEdiDoc.LoadEdi(sEdiFile);
        //                }
        //                else
        //                { MessageBox.Show("997 EDI File does not exist", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //            }
        //            else
        //            { MessageBox.Show("No new acknowledgement files found.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }
        //}

        ////public void ReadAcknowledgementFor837()
        ////{
        ////    try
        ////    {

        ////        string sSegmentID = "";
        ////        string sLoopSection = "";
        ////        string sLXID = "";
        ////        string sPath = "";
        ////        string sEntity = "";
        ////        string Qlfr = "";

        ////        string strRejectionCode = "";
        ////        string strFollowupCode = "";

        ////        int nArea;

        ////        string sValue = "";

        ////        // Gets the first segment of the 997 acknowledgment file
        ////        //ediDataSegment.Set(ref oSegment, (ediDataSegment)oAck.GetFirst997DataSegment());	//oSegment = (ediDataSegment) oAck.GetFirst997DataSegment();
        ////        ediDataSegment.Set(ref oSegment, (ediDataSegment)oEdiDoc.FirstDataSegment);
        ////        while (oSegment != null)
        ////        {
        ////            nArea = oSegment.Area;
        ////            sLoopSection = oSegment.LoopSection;
        ////            sSegmentID = oSegment.ID;

        ////            if (nArea == 1)
        ////            {
        ////                if (sLoopSection == "")
        ////                {
        ////                    if (sSegmentID == "AK9")
        ////                    {
        ////                        if (oSegment.get_DataElementValue(1, 0) == "R")
        ////                        {
        ////                            MessageBox.Show("Rejected",_messageBoxCaption,MessageBoxButtons.OK,MessageBoxIcon.Information);
        ////                        }
        ////                        else if (oSegment.get_DataElementValue(1, 0) == "A")
        ////                        {
        ////                            MessageBox.Show("Accepted", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        ////                        }
        ////                    }
        ////                    if (sSegmentID == "AK1")
        ////                    {
        ////                        sValue = oSegment.get_DataElementValue(1);
        ////                    }
        ////                }	// sLoopSection == ""
        ////            }	//nArea == 1
        ////            ediDataSegment.Set(ref oSegment, (ediDataSegment)oSegment.Next());	//oSegment = (ediDataSegment) oSegment.Next();
        ////        }	//oSegment != null


        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        ////    }
        ////}

        //public void ReadAcknowledgementFor837()
        //{
        //    string sSegmentID = "";
        //    string sLoopSection = "";
        //    string sLXID = "";
        //    string sPath = "";
        //    string sEntity = "";
        //    string Qlfr = "";
        //    string strRejectionCode = "";
        //    string strFollowupCode = "";
        //    int nArea;
        //    string sValue = "";

        //    try
        //    {
        //        // Gets the first segment of the 997 acknowledgment file
        //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oEdiDoc.FirstDataSegment);
        //        while (oSegment != null)
        //        {
        //            nArea = oSegment.Area;
        //            sLoopSection = oSegment.LoopSection;
        //            sSegmentID = oSegment.ID;

        //            if (nArea == 1)
        //            {
        //                if (sLoopSection == "")
        //                {
        //                    switch (sSegmentID)
        //                    {
        //                        case "AK9":
        //                            {
        //                                #region " Read Segment AK9 "

        //                                if (oSegment.get_DataElementValue(1, 0) != null && oSegment.get_DataElementValue(1, 0).Trim() != "")
        //                                {

        //                                    sValue += oSegment.get_DataElementValue(1) + "*";
        //                                    sValue += oSegment.get_DataElementValue(2) + "*";
        //                                    sValue += oSegment.get_DataElementValue(3) + "*";
        //                                    sValue += oSegment.get_DataElementValue(4);

        //                                    if (oSegment.get_DataElementValue(1, 0).ToUpper() == "R")
        //                                    { MessageBox.Show("Rejected", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //                                    else if (oSegment.get_DataElementValue(1, 0).ToUpper() == "A")
        //                                    { MessageBox.Show("Accepted", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //                                }

        //                                #endregion " Read Segment AK9 "
        //                            }
        //                            break;
        //                        case "AK1":
        //                            {
        //                                sValue += oSegment.get_DataElementValue(1) + "*";
        //                                sValue += oSegment.get_DataElementValue(2) + Environment.NewLine;
        //                            }
        //                            break;
        //                        case "AK2":
        //                            {
        //                                sValue += oSegment.get_DataElementValue(1) + "*";
        //                                sValue += oSegment.get_DataElementValue(2) + Environment.NewLine;
        //                            }
        //                            break;
        //                        case "AK5":
        //                            {
        //                                sValue += oSegment.get_DataElementValue(1) + Environment.NewLine;
        //                            }
        //                            break;

        //                    }

        //                }	// sLoopSection == ""
        //            }	//nArea == 1
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oSegment.Next());	//oSegment = (ediDataSegment) oSegment.Next();
        //        }	//oSegment != null


        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }
        //}

        ////Added By MaheshB to Send Secondary Payer
        //public string EDI837GenerationForSecondary(ArrayList SelectedTransactions, string _BatchName)
        //{
        //    DataTable dtClearingHouse = new DataTable();
        //    DataTable dtSubmitter = new DataTable();
        //    DataTable dtReceiver = new DataTable();
        //    DataTable dtBillingProvider = new DataTable();
        //    DataTable dtRenderingProvider = new DataTable();
        //    DataTable dtFacility = new DataTable();
        //    DataTable dtPatientInsurances = new DataTable();
        //    DataTable dtReferral = new DataTable();
        //    string _result = "";
        //    string InterchangeHeader = "";
        //    string FunctionalGroupHeader = "";
        //    string TransactionSetHeader = "";
        //    string _ClaimStatus = "1";
        //    if (_IsSEFPresent == true)
        //    {
        //        #region " Generate EDI "

        //        string sEntity = "";
        //        string sInstance = "";
        //        string _strSQL = "";
        //        DataTable dt;
        //        string _BillingProviderDetails = "";
        //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
        //        bool IsSecondaryInsurance = false;
        //        Transaction oTransaction = new Transaction();
        //        bool _SecondayInsuranceAddressDetailsRequired = false;
        //        //string _result = "";
        //        try
        //        {
        //            //Get Clearing House Information in Datatable

        //            dtClearingHouse = new DataTable();
        //            dtClearingHouse = ogloBilling.GetClearingHouseSettings();
        //            if (dtClearingHouse == null && dtClearingHouse.Rows.Count < 1)
        //            {
        //                MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                return "";
        //            }
        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //Get Submitter Information in Datatable
        //                                dtSubmitter = new DataTable();
        //                                dtSubmitter = ogloBilling.GetSubmitterInfo(Convert.ToInt64(_ClinicID), oTransaction.ProviderID);
        //                                if (dtSubmitter == null && dtSubmitter.Rows.Count < 1)
        //                                {
        //                                    MessageBox.Show("Submitter information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                    return "";
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            oEdiDoc.New();
        //            oEdiDoc.CursorType = DocumentCursorTypeConstants.Cursor_ForwardWrite;
        //            oEdiDoc.set_Property(DocumentPropertyIDConstants.Property_DocumentBufferIO, 2000);

        //            oEdiDoc.SegmentTerminator = "~\r\n";
        //            oEdiDoc.ElementTerminator = "*";
        //            oEdiDoc.CompositeTerminator = ":";

        //            string _TypeOfData = "T";

        //            #region " Interchange Segment "
        //            //Create the interchange segment
        //            ediInterchange.Set(ref oInterchange, (ediInterchange)oEdiDoc.CreateInterchange("X", "004010"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oInterchange.GetDataSegmentHeader());

        //            if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 0 || Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 1)
        //            {
        //                _TypeOfData = "T";
        //            }
        //            else if (Convert.ToInt32(dtClearingHouse.Rows[0]["nTypeOfData"]) == 2)
        //            {
        //                _TypeOfData = "P";
        //            }

        //            oSegment.set_DataElementValue(1, 0, "00");
        //            oSegment.set_DataElementValue(3, 0, "00");
        //            oSegment.set_DataElementValue(5, 0, "ZZ");
        //            oSegment.set_DataElementValue(6, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//_SenderID.Trim());//"1234545");//
        //            oSegment.set_DataElementValue(7, 0, "ZZ");
        //            oSegment.set_DataElementValue(8, 0, Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim().Replace("*", ""));//_ReceiverID.Trim().Replace("*",""));//"V2EL");//
        //            string ISA_Date = Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()));
        //            oSegment.set_DataElementValue(9, 0, ISA_Date.Substring(2));
        //            string ISA_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(10, 0, FormattedTime(ISA_Time).Trim().Replace("*", ""));
        //            oSegment.set_DataElementValue(11, 0, "U");
        //            oSegment.set_DataElementValue(12, 0, "00401");
        //            InterchangeHeader = ControlNumberGeneration("1");
        //            oSegment.set_DataElementValue(13, 0, InterchangeHeader);//"000000020");//
        //            oSegment.set_DataElementValue(14, 0, "0");
        //            oSegment.set_DataElementValue(15, 0, _TypeOfData);
        //            oSegment.set_DataElementValue(16, 0, ":");

        //            #endregion " Interchange Segment "

        //            #region " Functional Group "

        //            //Create the functional group segment
        //            ediGroup.Set(ref oGroup, (ediGroup)oInterchange.CreateGroup("004010X098A1"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oGroup.GetDataSegmentHeader());
        //            oSegment.set_DataElementValue(1, 0, "HC");
        //            oSegment.set_DataElementValue(2, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim().Replace("*", ""));////_SenderName);
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim().Replace("*", ""));//// _ReceiverCode.Trim());//"ClarEDI");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())));
        //            string GS_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString()));
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(GS_Time).Trim().Replace("*", ""));
        //            FunctionalGroupHeader = ControlNumberGeneration("2");
        //            oSegment.set_DataElementValue(6, 0, FunctionalGroupHeader);
        //            oSegment.set_DataElementValue(7, 0, "X");
        //            oSegment.set_DataElementValue(8, 0, "004010X098A1");

        //            #endregion " Functional Group "

        //            #region ST - TRANSACTION SET HEADER

        //            ediTransactionSet.Set(ref oTransactionset, (ediTransactionSet)oGroup.CreateTransactionSet("837"));
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.GetDataSegmentHeader());
        //            TransactionSetHeader = ControlNumberGeneration("3");
        //            oSegment.set_DataElementValue(2, 0, TransactionSetHeader); //"00021");//"ControlNo"

        //            #endregion ST - TRANSACTION SET HEADER

        //            #region BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            //Begining Segment 
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("BHT"));
        //            oSegment.set_DataElementValue(1, 0, "0019"); //Herarchical Structure Code
        //            oSegment.set_DataElementValue(2, 0, "00"); //00-Original, 01-Re-issue
        //            oSegment.set_DataElementValue(3, 0, TransactionSetHeader);//"1234"); //Reference identification
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString())).Trim().Replace("*", ""));//Date of claim
        //            string BHT_Time = Convert.ToString(gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToLocalTime().ToShortTimeString())).Trim().Replace("*", "");
        //            oSegment.set_DataElementValue(5, 0, FormattedTime(BHT_Time).Trim().Replace("*", "")); //"1230");
        //            oSegment.set_DataElementValue(6, 0, "CH"); //CH-Chargeable, RP-Reporting
        //            #endregion BHT - BEGINNING OF HIERARCHICAL TRANSACTION

        //            #region REF - TRANSMISSION TYPE IDENTIFICATION

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("REF"));
        //            oSegment.set_DataElementValue(1, 0, "87");
        //            oSegment.set_DataElementValue(2, 0, "004010X098A1");//"ReferenceID"

        //            #endregion REF - TRANSMISSION TYPE IDENTIFICATION

        //            #region NM1 - SUBMITTER


        //            //1000A SUBMITTER
        //            //NM1 SUBMITTER

        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "41");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//_SubmitterName);//cmbClinic.Text.Trim());// clinic name
        //            oSegment.set_DataElementValue(8, 0, "46"); // Identification Code Qualifier 
        //            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim().Replace("*", ""));//"C0923");//_SubmitterETIN);//txtSubIdentificationCode.Text.Trim().Replace("*",""));//clinic code or Electronic Transmitter Identification No.


        //            //PER SUBMITTER EDI CONTACT INFORMATION
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1\\PER"));
        //            oSegment.set_DataElementValue(1, 0, "IC");
        //            if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", "") == "")
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim().Replace("*", ""));//txtSubmitterContactName.Text.Trim().Replace("*",""));//Contact person name of clinic
        //            }
        //            else
        //            {
        //                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim().Replace("*", ""));
        //            }

        //            oSegment.set_DataElementValue(3, 0, "TE");
        //            oSegment.set_DataElementValue(4, 0, Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim().Replace("*", ""));//txtSubmitterPhone.Text.Trim().Replace("*","").Replace("(", "").Replace(")", "").Replace("-", ""));//clinic phone


        //            #endregion NM1 - SUBMITTER

        //            #region NM1 - RECEIVER NAME

        //            //1000B RECEIVER
        //            //NM1 RECEIVER NAME
        //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("NM1(2)\\NM1"));
        //            oSegment.set_DataElementValue(1, 0, "40");
        //            oSegment.set_DataElementValue(2, 0, "2");
        //            oSegment.set_DataElementValue(3, 0, Convert.ToString(dtClearingHouse.Rows[0]["sClearingHouseCode"]).Trim().Replace("*", ""));//"GatewayEDI");//clearing house or contractor or carrier or FI name
        //            oSegment.set_DataElementValue(8, 0, "46");// Identification Code Qualifier
        //            oSegment.set_DataElementValue(9, 0, Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]));//"V2093");//code of carrier/contractor/FI or Electronic Transmitter Identification No.

        //            #endregion NM1 - RECEIVER NAME

        //            nHlCount = 0;

        //            if (SelectedTransactions != null)
        //            {
        //                if (SelectedTransactions.Count > 0)
        //                {
        //                    for (int i = 0; i < SelectedTransactions.Count; i++)
        //                    {
        //                        oTransaction = new Transaction();
        //                        TransactionLine oTransLine = null;
        //                        oTransaction = ogloBilling.GetTransactionDetails(Convert.ToInt64(SelectedTransactions[i]), _ClinicID);
        //                        if (oTransaction != null)
        //                        {
        //                            if (oTransaction.Lines.Count > 0)
        //                            {
        //                                //FillAllDetails(oTransaction);
        //                                Resource oResource = new Resource(_databaseconnectionstring);
        //                                Provider _Provider = null;
        //                                gloPatient.Patient oPatient = null;
        //                                gloPatient.Referrals oReferral = new gloPatient.Referrals();
        //                                if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
        //                                {
        //                                    _Provider = oResource.GetProviderDetail(Convert.ToInt64(oTransaction.ProviderID));
        //                                    if (_Provider == null)
        //                                    {
        //                                        MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    gloPatient.gloPatient ogloPatient = new gloPatient.gloPatient(_databaseconnectionstring);
        //                                    dtPatientInsurances = ogloPatient.getPatientInsurances(oTransaction.PatientID);
        //                                    oPatient = ogloPatient.GetPatient(oTransaction.PatientID);
        //                                    if (oPatient == null)
        //                                    {
        //                                        MessageBox.Show("Patient information is not present for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
        //                                    {
        //                                        MessageBox.Show("Patient " + oPatient.DemographicsDetail.PatientFirstName + " " + oPatient.DemographicsDetail.PatientLastName + " Insurance details are missing for claim number " + FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo)) + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                        return "";
        //                                    }
        //                                    dtFacility = ogloBilling.GetFacilityInfo(oTransaction.FacilityCode, oTransaction.ProviderID);


        //                                }

        //                                for (int nTransactionSet = 1; nTransactionSet <= 1; nTransactionSet++)
        //                                {
        //                                    //**** BILLING/PAY-TO PROVIDER HIERARCHICAL LEVEL *******************************************

        //                                    nHlCount = nHlCount + 1;
        //                                    nHlProvParent = nHlCount;
        //                                    //2000A BILLING/PAY-TO PROVIDER HL LOOP
        //                                    //HL-BILLING PROVIDER

        //                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                    oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                    oSegment.set_DataElementValue(3, 0, "20");
        //                                    oSegment.set_DataElementValue(4, 0, "1");

        //                                    #region Billing Provider


        //                                    //Get the Address Setting for Billing Provider
        //                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //                                    Object _objResult = null;
        //                                    string strBillingSetting = "";
        //                                    oSettings.GetSetting("BillingSetting", Convert.ToInt64(oTransaction.ProviderID), _ClinicID, out _objResult);
        //                                    if (_objResult != null)
        //                                    {
        //                                        // |Company|Practice|Business"
        //                                        strBillingSetting = Convert.ToString(_objResult);
        //                                    }
        //                                    switch (strBillingSetting)
        //                                    {
        //                                        case "Business":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BMCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BMState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BMZIP.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Practice":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.BPracCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.BPracState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.BPracZIP.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.EmployerID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                                }
        //                                                //REF 
        //                                                else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                    if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        case "Company":
        //                                            {
        //                                                //2010AA BILLING PROVIDER
        //                                                //NM1 BILLING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "85");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyName.Trim().Replace("*", ""));//Billing provider name
        //                                                //oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*",""));
        //                                                //oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*",""));

        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                if (_Provider.CompanyNPI.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.CompanyNPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                                }
        //                                                //N3 BILLING PROVIDER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyAddress1.Trim().Replace("*", ""));//Provider Address

        //                                                //N4 BILLING PROVIDER LOCATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, _Provider.CompanyCity.Trim().Replace("*", ""));////Provider City
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.CompanyState.Trim().Replace("*", ""));//Provider state
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.CompanyZip.Trim().Replace("*", ""));//Provider ZIP

        //                                                //REF 
        //                                                if (_Provider.CompanyTaxID.Trim().Replace("*", "") != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                    if (_Provider.CompanyTaxID.Length > 9)
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", "").Substring(0, 9));
        //                                                    }
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.CompanyTaxID.Trim().Replace("*", ""));
        //                                                }

        //                                            } break;
        //                                        default:

        //                                            //2010AA BILLING PROVIDER
        //                                            //NM1 BILLING PROVIDER NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "85");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                            oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));

        //                                            oSegment.set_DataElementValue(8, 0, "XX");
        //                                            if (_Provider.NPI.Trim().Replace("*", "") != "")
        //                                            {
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//Billing provider ID/NPI
        //                                            }

        //                                            //N3 BILLING PROVIDER ADDRESS
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMAddress1);//Provider Address

        //                                            //N4 BILLING PROVIDER LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, _Provider.BMCity);////Provider City
        //                                            oSegment.set_DataElementValue(2, 0, _Provider.BMState);//Provider state
        //                                            oSegment.set_DataElementValue(3, 0, _Provider.BMZIP);//Provider ZIP

        //                                            //REF 
        //                                            if (_Provider.EmployerID.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "EI");//Reference Identification Qualifier("EI" stands for-> Employer ID)
        //                                                if (_Provider.EmployerID.Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.Trim().Replace("*", ""));
        //                                            }
        //                                            //REF 
        //                                            else if (_Provider.SSN.Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "SY");//Reference Identification Qualifier("SY" stands for-> Social Security Number)
        //                                                if (_Provider.SSN.Trim().Replace("*", "").Length > 9)
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", "").Substring(0, 9));
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _Provider.SSN.Trim().Replace("*", ""));
        //                                            }
        //                                            break;
        //                                    }

        //                                    #endregion

        //                                    //'******************************************************************************************************
        //                                    //'******* SUBSCRIBER HIERARCHICAL LEVEL ****************************************************************
        //                                    //'******************************************************************************************************
        //                                    #region Subscriber
        //                                    if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
        //                                    {
        //                                        string _strRelation = "";
        //                                        string _strInsuranceType = "";
        //                                        _strRelation = Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "");
        //                                        _strInsuranceType = Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", "");
        //                                        if (_strInsuranceType == "MB")
        //                                        {
        //                                            if (_strRelation != "18")
        //                                            {
        //                                                _strRelation = "18";
        //                                            }
        //                                        }

        //                                        #region Subscriber HL Loop - 2000B

        //                                        nHlCount = nHlCount + 1;
        //                                        nHlSubscriberParent = nHlCount;

        //                                        //2000B SUBSCRIBER HL LOOP
        //                                        //HL-SUBSCRIBER
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                        oSegment.set_DataElementValue(1, 0, nHlCount.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(2, 0, nHlProvParent.ToString().Trim().Replace("*", ""));
        //                                        oSegment.set_DataElementValue(3, 0, "22");

        //                                        if (_strRelation == "18")
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "0");
        //                                        }
        //                                        else
        //                                        {
        //                                            oSegment.set_DataElementValue(4, 0, "1");

        //                                        }

        //                                        //SBR SUBSCRIBER INFORMATION
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\SBR"));
        //                                        oSegment.set_DataElementValue(1, 0, "P");//_SubscriberInsurancePST);//"P");
        //                                        //if (_strRelation == "18")
        //                                        //{
        //                                        oSegment.set_DataElementValue(2, 0, "18");
        //                                        //}
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["InsuranceTypeCode"]).Trim().Replace("*", ""));//"HM");

        //                                        //2010BA SUBSCRIBER
        //                                        //NM1 SUBSCRIBER NAME
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\NM1"));
        //                                        oSegment.set_DataElementValue(1, 0, "IL");
        //                                        oSegment.set_DataElementValue(2, 0, "1");
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                        oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                        oSegment.set_DataElementValue(8, 0, "MI");
        //                                        oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[0]["sSubscriberID"]).Trim().Replace("*", ""));//"Insurance Id"

        //                                        //N3 SUBSCRIBER ADDRESS
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                        //N4 SUBSCRIBER CITY
        //                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[0]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                        #endregion SubscriberHL Loop - 2000B

        //                                        if (_strRelation == "18")
        //                                        {

        //                                            //DMG SUBSCRIBER DEMOGRAPHIC INFORMATION
        //                                            string _SubscriberGender = "";
        //                                            if (dtPatientInsurances.Rows.Count > 1)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                                oSegment.set_DataElementValue(1, 0, "D8");
        //                                                if (Convert.ToString(dtPatientInsurances.Rows[1]["dtDOB"]).Trim().Replace("*", "") != "")
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[0]["dtDOB"]))));//"SubscriberDOB"
        //                                                if (Convert.ToString(dtPatientInsurances.Rows[1]["sSubscriberGender"]).Trim().Replace("*", "") != "")
        //                                                {
        //                                                    _SubscriberGender = Convert.ToString(dtPatientInsurances.Rows[1]["sSubscriberGender"]).Trim().Replace("*", "");
        //                                                    if (_SubscriberGender.Trim().Replace("*", "").ToUpper() == "OTHER")
        //                                                    {
        //                                                        _SubscriberGender = "U";
        //                                                    }
        //                                                    oSegment.set_DataElementValue(3, 0, _SubscriberGender.Trim().Replace("*", "").Substring(0, 1).ToUpper());//"SubscriberGender"
        //                                                }
        //                                            }


        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            if (dtPatientInsurances.Rows.Count > 1)
        //                                            {
        //                                                string _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[1]["InsuranceName"]).Trim().Replace("*", "");
        //                                                if (Convert.ToString(dtPatientInsurances.Rows[1]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                                {
        //                                                    _ModifiedPayerName = "";
        //                                                    _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[1]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                                }
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "PR");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                                oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan

        //                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                                ////////N3 PAYER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                ////////N4 PAYER CITY
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                            }
        //                                            #endregion


        //                                            //******* SUBSCRIBER CLAIM INFORMATION ***************************************************************
        //                                            //TODO: Get Details in DATATABLE for the fields to be entered in EDI file.
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }

        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");

        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }
        //                                            //if (_FirstPOS ==_NewPOS)
        //                                            //{
        //                                            #region Claim Details - Loop 2300
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", ""));// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_TOTAL))); //Claim Amount

        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus.Trim().Replace("*", ""));
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");
        //                                            if (oTransaction.AutoClaim == true)
        //                                            {
        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    oSegment.set_DataElementValue(11, 1, "AA");
        //                                                    oSegment.set_DataElementValue(11, 4, oTransaction.State.Trim().Replace("*", ""));
        //                                                }
        //                                            }

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "" || oTransaction.AccidentDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET OF CURRENT SYMPTOMS OR ILLNESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF CURRENT INJURY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                if (oTransaction.AutoClaim == true)
        //                                                {
        //                                                    if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                    {
        //                                                        OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                        ////DTP DATE OF ACCIDENT 
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                        oSegment.set_DataElementValue(1, 0, "439");
        //                                                        oSegment.set_DataElementValue(2, 0, "D8");
        //                                                        oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    }
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                            //oSegment.set_DataElementValue(1, 0, "438");
        //                                            //oSegment.set_DataElementValue(2, 0, "D8");
        //                                            //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetoSimilarSyptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }

        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }
        //                                            //Added By MaheshB For Secondary Payer Total Amount.
        //                                            oDB.Connect(false);
        //                                            DataTable dtpayments = new DataTable();

        //                                            #region Query
        //                                            string strquery = "SELECT    distinct nBillingTransactionID, nBillingTransactionDetailID, " +
        //                                            " convert(numeric,  ((BL_Transaction_Lines.dCharges * BL_Transaction_Lines.dUnit) - BL_Transaction_Lines.dAllowed)) AS dcontractualobligation, " +
        //                                            " (select sum(dCharges) from BL_Transaction_Lines as a WITH(NOLOCK) where  a.nTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID) as totalserviceamount," +
        //                                            " (select sum(dCurrentPaymentAmt) from BL_Transaction_Payment_DTL as a WITH(NOLOCK) where nTransactionType=9 and a.nBillingTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID) " +
        //                                            " as PayorPaidPayment,(select sum(isnull(dCurrentPaymentAmt,0)) from BL_Transaction_Payment_DTL as a WITH(NOLOCK) " +
        //                                            " where nTransactionType=10 and a.nBillingTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID) as AmtNotUsed " +
        //                                            " FROM    BL_Transaction_Payment_DTL WITH(NOLOCK) inner join BL_Transaction_Lines WITH(NOLOCK) on BL_Transaction_Lines.nTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID and " +
        //                                            " BL_Transaction_Lines.nTransactionDetailID=BL_Transaction_Payment_DTL.nBillingTransactionDetailID " +
        //                                            " where nClaimno='" + oTransaction.ClaimNo + "' ";

        //                                            #endregion

        //                                            oDB.Retrive_Query(strquery, out dtpayments);
        //                                            if (dtpayments != null)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
        //                                                oSegment.set_DataElementValue(1, 0, "NE");
        //                                                if (dtpayments.Rows.Count > 0)
        //                                                {
        //                                                    int amount = (int)dtpayments.Rows[0]["PayorPaidPayment"];
        //                                                    oSegment.set_DataElementValue(2, 0, amount.ToString());
        //                                                }
        //                                                else
        //                                                {
        //                                                    oSegment.set_DataElementValue(2, 0, "0");
        //                                                }
        //                                                //oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());
        //                                            }
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                //REF CLEARING HOUSE CLAIM NUMBER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }



        //                                            #endregion

        //                                            #region HI - Diagnosis


        //                                            //HI HEALTH CARE DIAGNOSIS CODES
        //                                            #region Commented code
        //                                            //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));
        //                                            //oSegment.set_DataElementValue(1, 1, "BK");
        //                                            //if (oTransaction.Lines[0].Dx1Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(1, 2, oTransaction.Lines[0].Dx1Code.ToString().Replace(".", "").Trim());// Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE)));  // "0340");
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx1Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //else
        //                                            //{
        //                                            //    //MessageBox.Show("Principle Diagnosis is not given.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                                            //    //return;
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx2Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(2, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(2, 2, oTransaction.Lines[0].Dx2Code.ToString().Replace(".", "").Trim());//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DX1_CODE))); // oCase.CaseDiagnosis[0].DiagnosisCode.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx2Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx3Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(3, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(3, 2, oTransaction.Lines[0].Dx3Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx3Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx4Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(4, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(4, 2, oTransaction.Lines[0].Dx4Code.ToString().Replace(".", "").Trim());
        //                                            //    if (IsValidICD9(Convert.ToString(oTransaction.Lines[0].Dx4Code.Trim())) == false)
        //                                            //    {
        //                                            //        return;
        //                                            //    }
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx5Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(5, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(5, 2, oTransaction.Lines[0].Dx5Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx6Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(6, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(6, 2, oTransaction.Lines[0].Dx6Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx7Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(7, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(7, 2, oTransaction.Lines[0].Dx7Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            //if (oTransaction.Lines[0].Dx8Code.ToString().Trim() != "")
        //                                            //{
        //                                            //    oSegment.set_DataElementValue(8, 1, "BF");
        //                                            //    oSegment.set_DataElementValue(8, 2, oTransaction.Lines[0].Dx8Code.ToString().Replace(".", "").Trim());
        //                                            //}
        //                                            ////} 
        //                                            #endregion Commented code
        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                           " ISNULL(sName,'') AS sName,  " +
        //                                                           " ISNULL(sContact,'') AS sContact,   " +
        //                                                           " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                           " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                           " ISNULL(sCity,'') AS sCity,   " +
        //                                                           " ISNULL(sState,'') AS sState,   " +
        //                                                           " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                           " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                           " ISNULL(sFax,'') AS sFax,   " +
        //                                                           " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                           " ISNULL(sURL,'') AS sURL,   " +
        //                                                           " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                           " ISNULL(sPager,'') AS sPager,   " +
        //                                                           " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                           " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                           " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                           " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                           " ISNULL(sGender,'') AS sGender,   " +
        //                                                           " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                           " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                           " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                           " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                           " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                           " ISNULL(sDegree,'') AS sDegree   " +
        //                                                           " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                           " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        //oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        //oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        if (_Provider.SSN.ToString().Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                            oSegment.set_DataElementValue(2, 0, _Provider.SSN.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }


        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "232929");//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {
        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }


        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION
        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI

        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }
        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 0)
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)


        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment //Comment Removed and Added By MaheshB

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    oSegment.set_DataElementValue(1, 0, "CO");//PR - Patient Responsibility Originally PI
        //                                                    oSegment.set_DataElementValue(2, 0, "96");//Check
        //                                                    if (dtpayments != null)
        //                                                    {
        //                                                        if (dtpayments.Rows.Count > 0)
        //                                                        {
        //                                                            int amount = (int)dtpayments.Rows[0]["dcontractualobligation"];
        //                                                            oSegment.set_DataElementValue(3, 0, amount.ToString());
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            oSegment.set_DataElementValue(3, 0, "0");
        //                                                        }
        //                                                    }

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount  //Comment Removed and Added By MaheshB

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D");
        //                                                    if (dtpayments != null)
        //                                                    {
        //                                                        if (dtpayments.Rows.Count > 0)
        //                                                        {
        //                                                            int amount = (int)dtpayments.Rows[0]["PayorPaidPayment"];
        //                                                            oSegment.set_DataElementValue(2, 0, amount.ToString());
        //                                                        }
        //                                                    }

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 
        //                                            //}//end of IF loop for POS
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity

        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }



        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }
        //                                    #endregion " Subscriber "

        //                                        }//end of if loop for Subscriber as Patient
        //                                        else
        //                                        {
        //                                            #region "Dependent Loop"

        //                                            //////*****************************************************************************************************
        //                                            //////******* DEPENDENT HIERARCHICAL LEVEL ****************************************************************
        //                                            //////*****************************************************************************************************
        //                                            ////TODO: Get the datatable for dependent info to add fields of service in EDI file.

        //                                            #region Payer Information Loop 2010BB
        //                                            //2010BB SUBSCRIBER/PAYER
        //                                            //NM1 PAYER NAME
        //                                            string _ModifiedPayerName = "";
        //                                            if (dtPatientInsurances.Rows.Count > 1)//If there is no secondary Payer then what?
        //                                            {
        //                                                if (dtPatientInsurances.Rows[1]["InsuranceName"].ToString() != "")
        //                                                {
        //                                                    _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[1]["InsuranceName"]).Trim().Replace("*", "");

        //                                                    if (Convert.ToString(dtPatientInsurances.Rows[1]["InsuranceName"]).Trim().Replace("*", "").Length > 35)
        //                                                    {
        //                                                        _ModifiedPayerName = "";
        //                                                        _ModifiedPayerName = Convert.ToString(dtPatientInsurances.Rows[1]["InsuranceName"]).Trim().Replace("*", "").Substring(0, 34);
        //                                                    }
        //                                                }

        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "PR");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, _ModifiedPayerName.Trim().Replace("*", ""));//"PayerLastOrgName"
        //                                                oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID

        //                                                ////////N3 PAYER ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                ////////N4 PAYER CITY
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[1]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                            }
        //                                            #endregion

        //                                            nHlCount = nHlCount + 1;

        //                                            //2000B DEPENDENT HL LOOP
        //                                            //HL-DEPENDENT
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\HL"));
        //                                            oSegment.set_DataElementValue(1, 0, nHlCount.ToString());
        //                                            oSegment.set_DataElementValue(2, 0, nHlSubscriberParent.ToString());
        //                                            oSegment.set_DataElementValue(3, 0, "23");
        //                                            oSegment.set_DataElementValue(4, 0, "0");

        //                                            //PAT - PATIENT/DEPENDENT INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\PAT"));
        //                                            oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[0]["RelationshipCode"]).Trim().Replace("*", "")); //01 - Spouse 19 - Child

        //                                            #region " Patient Info"

        //                                            //NM1 - INDIVIDUAL OR ORGANIZATIONAL NAME
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1"));
        //                                            oSegment.set_DataElementValue(1, 0, "QC");
        //                                            oSegment.set_DataElementValue(2, 0, "1");
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientLastName.Trim().Replace("*", ""));//Patient Last Name
        //                                            oSegment.set_DataElementValue(4, 0, oPatient.DemographicsDetail.PatientFirstName.Trim().Replace("*", ""));//Patient First Name

        //                                            //N3 - ADDRESS INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N3"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientAddress1.Trim().Replace("*", ""));//"Address"

        //                                            //N4 - GEOGRAPHIC LOCATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\N4"));
        //                                            oSegment.set_DataElementValue(1, 0, oPatient.DemographicsDetail.PatientCity.Trim().Replace("*", ""));//"City"
        //                                            oSegment.set_DataElementValue(2, 0, oPatient.DemographicsDetail.PatientState.Trim().Replace("*", ""));//"State"
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientZip.Trim().Replace("*", ""));//"Zip"

        //                                            //DMG - DEMOGRAPHIC INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1\\DMG"));
        //                                            oSegment.set_DataElementValue(1, 0, "D8");
        //                                            oSegment.set_DataElementValue(2, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oPatient.DemographicsDetail.PatientDOB.ToShortDateString())));
        //                                            oSegment.set_DataElementValue(3, 0, oPatient.DemographicsDetail.PatientGender.Trim().Replace("*", ""));

        //                                            #endregion " Patient Info"

        //                                            //******* DEPENDENT CLAIM INFORMATION *************************************************************
        //                                            //TODO: Get the datatable for Claim info to add fields of service in EDI file
        //                                            string _FirstPOS = "";
        //                                            string _NewPOS = "";
        //                                            string _ClaimTotal = "";
        //                                            iItemCount = 0;
        //                                            iItemCount = 1;
        //                                            decimal _claimAmount = 0;
        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];
        //                                                _claimAmount = _claimAmount + oTransLine.Total;

        //                                                _FirstPOS = oTransaction.Lines[0].POSCode;
        //                                                _NewPOS = oTransLine.POSCode;
        //                                            }
        //                                            _ClaimTotal = _claimAmount.ToString("#0.00");
        //                                            if (_ClaimTotal.Substring(_ClaimTotal.Length - 2, 2) == "00")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 3);
        //                                            }
        //                                            else if (_ClaimTotal.Substring(_ClaimTotal.Length - 1, 1) == "0")
        //                                            {
        //                                                _ClaimTotal = _ClaimTotal.Substring(0, _ClaimTotal.Length - 1);
        //                                            }

        //                                            #region "Dependent Claim Level"
        //                                            //2300 CLAIM
        //                                            //CLM CLAIM LEVEL INFORMATION
        //                                            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\CLM"));
        //                                            oSegment.set_DataElementValue(1, 0, FormattedClaimNumberGeneration(Convert.ToString(oTransaction.ClaimNo).Trim().Replace("*", ""))); //Patient Account no         
        //                                            oSegment.set_DataElementValue(2, 0, _ClaimTotal.Trim().Replace("*", "")); //Claim Amount
        //                                            oSegment.set_DataElementValue(5, 1, _FirstPOS.Trim().Replace("*", "")); //21 - Inpatient Hospital

        //                                            if (oTransaction.Transaction_Status == TransactionStatus.Batch)
        //                                            {
        //                                                _ClaimStatus = "1";
        //                                            }
        //                                            else if (oTransaction.Transaction_Status == TransactionStatus.ReBatch)
        //                                            {
        //                                                _ClaimStatus = "6";
        //                                            }
        //                                            oSegment.set_DataElementValue(5, 3, _ClaimStatus);
        //                                            oSegment.set_DataElementValue(6, 0, "Y");
        //                                            oSegment.set_DataElementValue(7, 0, "A");
        //                                            oSegment.set_DataElementValue(8, 0, "Y");
        //                                            oSegment.set_DataElementValue(9, 0, "Y");
        //                                            oSegment.set_DataElementValue(10, 0, "C");

        //                                            string OnsetDate = "";
        //                                            if (oTransaction.InjuryDate.ToString() != "" || oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                if (oTransaction.InjuryDate.ToString() != "" && oTransaction.InjuryDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.InjuryDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                                else if (oTransaction.OnsiteDate.ToString() != "" && oTransaction.OnsiteDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.OnsiteDate);
        //                                                    ////DTP DATE OF ONSET of current symptoms or illness
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "431");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.AccidentDate.ToString() != "" && oTransaction.AccidentDate > 0)
        //                                                {
        //                                                    OnsetDate = Convert.ToString(oTransaction.AccidentDate);
        //                                                    ////DTP DATE OF ACCIDENT 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "439");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, OnsetDate);//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpOnsetofCurrentSymptomsorillness.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }
        //                                            }

        //                                            //DTP DATE OF ONSET of similar symptoms or illness
        //                                            if (oTransaction.OnsiteDate > 0 && oTransaction.OnsiteDate.ToString() != "")
        //                                            {
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "438");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.OnsiteDate.ToString())).Trim().Replace("*",""));
        //                                            }
        //                                            //
        //                                            if (_FirstPOS.Trim().Replace("*", "") != "11")
        //                                            {
        //                                                if (oTransaction.HospitalizationDateFrom > 0 && oTransaction.HospitalizationDateFrom.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF Hospitalization (Admission) 
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "435");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateFrom.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalizationDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                }

        //                                                if (oTransaction.HospitalizationDateTo > 0 && oTransaction.HospitalizationDateTo.ToString() != "")
        //                                                {
        //                                                    ////DTP DATE OF Discharge 
        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "096");
        //                                                    //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    //oSegment.set_DataElementValue(3, 0, oTransaction.HospitalizationDateTo.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpHospitalDischargeDate.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    ////
        //                                                }
        //                                            }
        //                                            if (oTransaction.WorkersComp == true)
        //                                            {
        //                                                if (oTransaction.UnableToWorkFromDate > 0 && oTransaction.UnableToWorkFromDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period last day worked)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "297");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkFromDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpLastDayWorked.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }

        //                                                if (oTransaction.UnableToWorkTillDate > 0 && oTransaction.UnableToWorkTillDate.ToString() != "")
        //                                                {
        //                                                    //DTP DATE OF (Intial Disability period return to work)
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\DTP"));
        //                                                    oSegment.set_DataElementValue(1, 0, "296");
        //                                                    oSegment.set_DataElementValue(2, 0, "D8");
        //                                                    oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());//Convert.ToString(gloDateMaster.gloDate.DateAsNumber(dtpReturnToWork.Value.ToShortDateString())).Trim().Replace("*",""));     //Claim Date
        //                                                    //
        //                                                }
        //                                            }
        //                                            #region Query
        //                                            oDB.Connect(false);
        //                                            DataTable dtpayments1 = new DataTable();


        //                                            string strquery = "SELECT    distinct nBillingTransactionID, nBillingTransactionDetailID, " +
        //                                            " convert(numeric,  ((BL_Transaction_Lines.dCharges * BL_Transaction_Lines.dUnit) - BL_Transaction_Lines.dAllowed)) AS dcontractualobligation, " +
        //                                            " (select sum(dCharges) from BL_Transaction_Lines as a WITH(NOLOCK) where  a.nTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID) as totalserviceamount," +
        //                                            " (select sum(dCurrentPaymentAmt) from BL_Transaction_Payment_DTL as a WITH(NOLOCK) where nTransactionType=9 and a.nBillingTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID) " +
        //                                            " as PayorPaidPayment,(select sum(isnull(dCurrentPaymentAmt,0)) from BL_Transaction_Payment_DTL as a WITH(NOLOCK) " +
        //                                            " where nTransactionType=10 and a.nBillingTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID) as AmtNotUsed " +
        //                                            " FROM    BL_Transaction_Payment_DTL WITH(NOLOCK) inner join BL_Transaction_Lines WITH(NOLOCK) on BL_Transaction_Lines.nTransactionID= BL_Transaction_Payment_DTL.nBillingTransactionID and " +
        //                                            " BL_Transaction_Lines.nTransactionDetailID=BL_Transaction_Payment_DTL.nBillingTransactionDetailID " +
        //                                            " where nClaimno='" + oTransaction.ClaimNo + "'";

        //                                            #endregion

        //                                            oDB.Retrive_Query(strquery, out dtpayments1);
        //                                            //Added By MaheshB For Secondary Payer Total Amount.
        //                                            if (dtpayments1 != null)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\AMT"));
        //                                                oSegment.set_DataElementValue(1, 0, "NE");
        //                                                if (dtpayments1.Rows.Count > 0)
        //                                                {
        //                                                    if (Convert.ToString(dtpayments1.Rows[0]["PayorPaidPayment"]) != "")
        //                                                    {
        //                                                        int amount = (int)dtpayments1.Rows[0]["PayorPaidPayment"];
        //                                                        oSegment.set_DataElementValue(2, 0, dtpayments1.Rows[0]["PayorPaidPayment"].ToString());//Change
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(2, 0, "0");
        //                                                    }
        //                                                }
        //                                                //oSegment.set_DataElementValue(3, 0, oTransaction.UnableToWorkTillDate.ToString());
        //                                            }

        //                                            //REF CLEARING HOUSE CLAIM NUMBER
        //                                            if (GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "") != "")
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\REF"));
        //                                                oSegment.set_DataElementValue(1, 0, "G1");
        //                                                oSegment.set_DataElementValue(2, 0, GetPriorAuthorizationNumber(oTransaction.PatientID, Convert.ToInt64(dtPatientInsurances.Rows[0]["nInsuranceID"])).Trim().Replace("*", "")); //Claim No
        //                                            }
        //                                            #endregion "Dependent Claim Level"


        //                                            #region HI - Diagnosis for Dependent
        //                                            //HI HEALTH CARE DIAGNOSIS CODES

        //                                            DataTable dtDx = new DataTable();
        //                                            dtDx = GetDistinctDiagnosis(oTransaction.TransactionID, oTransaction.ClinicID, oTransaction.ClaimNo);

        //                                            if (dtDx != null && dtDx.Rows.Count > 0)
        //                                            {


        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\HI"));

        //                                                for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                {
        //                                                    if (DxIndex == 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", ""), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(1, 1, "BK");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Replace(".", "").Trim().Replace("*", ""));
        //                                                        }
        //                                                    }
        //                                                    if (DxIndex > 0)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex][0]).Trim().Replace("*", "") != "")
        //                                                        {
        //                                                            if (IsValidICD9(Convert.ToString(Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "")), false) == false)
        //                                                            {
        //                                                                return "";
        //                                                            }
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 1, "BF");
        //                                                            oSegment.set_DataElementValue(DxIndex + 1, 2, Convert.ToString(dtDx.Rows[DxIndex]["DX"]).ToString().Replace(".", "").Trim().Replace("*", ""));//
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            #endregion

        //                                            #region Referring Provider - 2310A

        //                                            if (oTransaction.ReferralProviderID > 0)
        //                                            {
        //                                                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                                dtReferral = new DataTable();
        //                                                string _sqlQuery = "";

        //                                                oDB.Connect(false);

        //                                                _sqlQuery = " SELECT ISNULL(nContactId,0) AS nContactId, " +
        //                                                            " ISNULL(sName,'') AS sName,  " +
        //                                                            " ISNULL(sContact,'') AS sContact,   " +
        //                                                            " ISNULL(sAddressLine1,'') AS sAddressLine1,   " +
        //                                                            " ISNULL(sAddressLine2,'') AS sAddressLine2,   " +
        //                                                            " ISNULL(sCity,'') AS sCity,   " +
        //                                                            " ISNULL(sState,'') AS sState,   " +
        //                                                            " ISNULL(sZIP,'') AS sZIP,   " +
        //                                                            " ISNULL(sPhone,'') AS sPhone,   " +
        //                                                            " ISNULL(sFax,'') AS sFax,   " +
        //                                                            " ISNULL(sEmail,'') AS sEmail,   " +
        //                                                            " ISNULL(sURL,'') AS sURL,   " +
        //                                                            " ISNULL(sMobile,'') AS sMobile,   " +
        //                                                            " ISNULL(sPager,'') AS sPager,   " +
        //                                                            " ISNULL(sNotes,'') AS sNotes,   " +
        //                                                            " ISNULL(sFirstName,'') AS sFirstName,   " +
        //                                                            " ISNULL(sMiddleName,'') AS sMiddleName,   " +
        //                                                            " ISNULL(sLastName,'') AS sLastName,   " +
        //                                                            " ISNULL(sGender,'') AS sGender,   " +
        //                                                            " ISNULL(sTaxonomy,'') AS sTaxonomy,   " +
        //                                                            " ISNULL(sTaxonomyDesc,'') AS sTaxonomyDesc,   " +
        //                                                            " ISNULL(sTaxID,'') AS sTaxID,   " +
        //                                                            " ISNULL(sUPIN,'') AS sUPIN,   " +
        //                                                            " ISNULL(sNPI,'') AS sNPI,   " +
        //                                                            " ISNULL(sDegree,'') AS sDegree   " +
        //                                                            " FROM  Patient_DTL WITH(NOLOCK) " +
        //                                                            " WHERE (nContactFlag = 3) AND (nPatientID = " + oTransaction.PatientID + ") AND (nPatientDetailID = " + oTransaction.ReferralProviderID + ") AND ISNULL(nClinicID,1)=" + ClinicID + "";

        //                                                oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                                if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                if (_Provider != null)
        //                                                {
        //                                                    //2310B Referring PROVIDER
        //                                                    //NM1 Referring PROVIDER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "DN");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.LastName.ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                                    oSegment.set_DataElementValue(4, 0, _Provider.FirstName.ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                                    oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.ToString().Trim().Replace("*", ""));
        //                                                    oSegment.set_DataElementValue(8, 0, "XX");
        //                                                    oSegment.set_DataElementValue(9, 0, _Provider.NPI.ToString().Trim().Replace("*", ""));//"NPI"

        //                                                    //PRV REFERRING PROVIDER INFORMATION
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                    oSegment.set_DataElementValue(1, 0, "RF");
        //                                                    oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                    oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.ToString().Trim().Replace("*", ""));//Reference Identification

        //                                                    //REF
        //                                                    if (_Provider.EmployerID.ToString().Trim().Replace("*", "") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.EmployerID.ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                                    }
        //                                                    else //if (_ReferralSSN.Trim().Replace("*","") != "")
        //                                                    {
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                                        oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                                        oSegment.set_DataElementValue(2, 0, _Provider.SSN);//"1039255");// 
        //                                                    }
        //                                                }
        //                                            }

        //                                            //oReferral = oPatient.Referrals;
        //                                            //if (oReferral.Count > 0)
        //                                            //{
        //                                            //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //                                            //    dtReferral = new DataTable();
        //                                            //    string _sqlQuery = "";

        //                                            //    oDB.Connect(false);
        //                                            //    _sqlQuery = " SELECT sStreet, sCity, sState, sZIP, sFirstName, sMiddleName, sLastName, sGender, nSpecialtyID, sTaxID, sUPIN, sNPI, sContactType, sTaxonomy, sTaxonomyDesc, nContactID " +
        //                                            //                " FROM Contacts_MST  " +
        //                                            //                " WHERE (nContactID = " + oReferral[0].ReferralID + ") AND (sContactType = 'Referral')";
        //                                            //    oDB.Retrive_Query(_sqlQuery, out dtReferral);
        //                                            //    if (dtReferral != null && dtReferral.Rows.Count > 0)
        //                                            //    {
        //                                            //        //2310B Referring PROVIDER
        //                                            //        //NM1 Referring PROVIDER NAME
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "DN");
        //                                            //        oSegment.set_DataElementValue(2, 0, "1");
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sLastName"].ToString().Trim().Replace("*", "")); //"ReferringLastname"
        //                                            //        oSegment.set_DataElementValue(4, 0, dtReferral.Rows[0]["sFirstName"].ToString().Trim().Replace("*", ""));//"ReferringFirstname"
        //                                            //        oSegment.set_DataElementValue(5, 0, dtReferral.Rows[0]["sMiddleName"].ToString().Trim().Replace("*", ""));
        //                                            //        oSegment.set_DataElementValue(8, 0, "XX");
        //                                            //        oSegment.set_DataElementValue(9, 0, dtReferral.Rows[0]["sNPI"].ToString().Trim().Replace("*", ""));//"NPI"

        //                                            //        //PRV REFERRING PROVIDER INFORMATION
        //                                            //        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                            //        oSegment.set_DataElementValue(1, 0, "RF");
        //                                            //        oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                            //        oSegment.set_DataElementValue(3, 0, dtReferral.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", ""));//Reference Identification

        //                                            //        //REF
        //                                            //        if (dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", "") != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "EI");//// Employer Identification Number
        //                                            //            oSegment.set_DataElementValue(2, 0, dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*", ""));//"1039255");// 
        //                                            //        }
        //                                            //        else //if (_ReferralSSN.Trim() != "")
        //                                            //        {
        //                                            //            ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\REF"));
        //                                            //            oSegment.set_DataElementValue(1, 0, "SY");//// Social Security Number
        //                                            //            oSegment.set_DataElementValue(2, 0, "32432432");//dtReferral.Rows[0]["sTaxID"].ToString().Trim().Replace("*",""));//"1039255");// 
        //                                            //        }
        //                                            //    }
        //                                            //}
        //                                            #endregion Referring Provider

        //                                            #region Rendering Provider - 2310B

        //                                            _Provider = null;
        //                                            _Provider = oResource.GetProviderDetail(oTransaction.Lines[0].RefferingProviderId);
        //                                            if (_Provider != null)
        //                                            {

        //                                                //2310B RENDERING PROVIDER
        //                                                //NM1 RENDERING PROVIDER NAME
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "82");
        //                                                oSegment.set_DataElementValue(2, 0, "1");
        //                                                //FillProviderDetails(oTransaction.Lines[0].RefferingProviderId, ProviderType.RenderingProvider);
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.LastName.Trim().Replace("*", ""));//Billing provider name
        //                                                oSegment.set_DataElementValue(4, 0, _Provider.FirstName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(5, 0, _Provider.MiddleName.Trim().Replace("*", ""));
        //                                                oSegment.set_DataElementValue(8, 0, "XX");
        //                                                oSegment.set_DataElementValue(9, 0, _Provider.NPI.Trim().Replace("*", ""));//oProviderDetails.NPI);//Billing provider ID/NPI


        //                                                //PRV RENDERING PROVIDER INFORMATION
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1\\PRV"));
        //                                                oSegment.set_DataElementValue(1, 0, "PE");
        //                                                oSegment.set_DataElementValue(2, 0, "ZZ");//Mutually Defined
        //                                                oSegment.set_DataElementValue(3, 0, _Provider.Taxonomy.Trim().Replace("*", ""));//Reference Identification
        //                                            }

        //                                            #endregion

        //                                            #region Facility - 2310D

        //                                            //2310D SERVICE LOCATION
        //                                            //NM1 SERVICE FACILITY LOCATION

        //                                            if (dtFacility != null && dtFacility.Rows.Count > 0)
        //                                            {
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\NM1"));
        //                                                oSegment.set_DataElementValue(1, 0, "77");
        //                                                oSegment.set_DataElementValue(2, 0, "2");
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityName"].ToString().Trim().Replace("*", ""));//"FacilityName"
        //                                                oSegment.set_DataElementValue(8, 0, "XX");//NPI code
        //                                                oSegment.set_DataElementValue(9, 0, dtFacility.Rows[0]["FacilityNPI"].ToString().Trim().Replace("*", ""));//NPI

        //                                                //N3 SERVICE FACILITY ADDRESS
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N3"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityAddress1"].ToString().Trim().Replace("*", ""));//"FacilityAddr"

        //                                                //N4 SERVICE FACILITY CITY/STATE/ZIP
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\NM1(2)\\N4"));
        //                                                oSegment.set_DataElementValue(1, 0, dtFacility.Rows[0]["FacilityCity"].ToString().Trim().Replace("*", ""));//"FacilityCity"
        //                                                oSegment.set_DataElementValue(2, 0, dtFacility.Rows[0]["FacilityState"].ToString().Trim().Replace("*", ""));//"FacilityState"
        //                                                oSegment.set_DataElementValue(3, 0, dtFacility.Rows[0]["FacilityZip"].ToString().Trim().Replace("*", ""));//"FacilityZip"
        //                                            }

        //                                            #endregion

        //                                            for (int _Insrow = 0; _Insrow < dtPatientInsurances.Rows.Count; _Insrow++)
        //                                            {
        //                                                #region Subscriber Secondary Insurance - Loop 2320

        //                                                //LOOP - 2320
        //                                                if (_Insrow == 0) //Changed By MaheshB to Send Secondary Payer.
        //                                                {

        //                                                    #region SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR"));
        //                                                    //1.Payer Resposibilty Sequence No.
        //                                                    oSegment.set_DataElementValue(1, 0, "S");//_OtherInsurancePST.Trim().Replace("*","")); //P - Primary

        //                                                    //2.Individual Relationship code
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["RelationshipCode"]).Trim().Replace("*", ""));//"18"); // Hard coded(Individual Relationship code) 18 - Self

        //                                                    //3.Refrence identification
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sGroup"]).Trim().Replace("*", ""));//"22145");///Policy no

        //                                                    //5.Insurance Type Code
        //                                                    oSegment.set_DataElementValue(5, 0, "C1"); // C1 - Commercial (Insurance Type Code)


        //                                                    //oSegment.set_DataElementValue(6, 0, "6"); // 6 - No Co-ordination of Benefit

        //                                                    ////8.Employment Status Code(Not Used)
        //                                                    //oSegment.set_DataElementValue(8, 0, "AC"); // Employment status (AC - Active)

        //                                                    //9.Claim Filing Indicator
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceTypeCode"]).Trim().Replace("*", "")); //Commercial Insurance company

        //                                                    #endregion SBR - SUBSCRIBER INFORMATION for Secondary Information

        //                                                    #region CAS - Claim Adjustment

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\CAS"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "PI");//PR - Patient Responsibility
        //                                                    //oSegment.set_DataElementValue(2, 0, "96");
        //                                                    //oSegment.set_DataElementValue(3, 0, "300");

        //                                                    #endregion CAS - Claim Adjustment

        //                                                    #region AMT - Amount

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "D");
        //                                                    //oSegment.set_DataElementValue(2, 0, "0");

        //                                                    //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\AMT"));
        //                                                    //oSegment.set_DataElementValue(1, 0, "F2");
        //                                                    //oSegment.set_DataElementValue(2, 0, "100");

        //                                                    #endregion AMT - Amount

        //                                                    #region MOA - Medicare Outpatient Adjudication

        //                                                    //ediDataSegment.Set(ref oSegment,(ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\MOA"));
        //                                                    //oSegment.set_DataElementValue(1,0,"20");
        //                                                    //oSegment.set_DataElementValue(2,0,"300");
        //                                                    //oSegment.set_DataElementValue(3,0,"125");

        //                                                    #endregion

        //                                                    #region DMG  - Demographic

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\DMG"));
        //                                                    oSegment.set_DataElementValue(1, 0, "D8");
        //                                                    oSegment.set_DataElementValue(2, 0, gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtPatientInsurances.Rows[_Insrow]["dtDOB"])).ToString());//"SubscriberDOB"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberGender"]));//"SubscriberGender"

        //                                                    #endregion DMG  - Demographic

        //                                                    #region OI - Other Insurance

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\OI"));
        //                                                    oSegment.set_DataElementValue(3, 0, "Y");
        //                                                    oSegment.set_DataElementValue(4, 0, "C");
        //                                                    oSegment.set_DataElementValue(6, 0, "Y");

        //                                                    #endregion OI - Other Insurance

        //                                                    //2330A SUBSCRIBER
        //                                                    #region NM1 SUBSCRIBER NAME - 2330A

        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "IL");
        //                                                    oSegment.set_DataElementValue(2, 0, "1");
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubLName"]).Trim().Replace("*", ""));//"SubscriberLastOrgName"
        //                                                    oSegment.set_DataElementValue(4, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubFName"]).Trim().Replace("*", ""));//"SubscriberFirstname"
        //                                                    oSegment.set_DataElementValue(8, 0, "MI");
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["sSubscriberID"]).Trim().Replace("*", ""));//"SubscriberMemberID"

        //                                                    //N3 SUBSCRIBER ADDRESS
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N3"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberAddr1"]).Trim().Replace("*", ""));//"SubscriberAddress"

        //                                                    //N4 SUBSCRIBER CITY
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\N4"));
        //                                                    oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberCity"]).Trim().Replace("*", ""));//"SubscriberCity"
        //                                                    oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberState"]).Trim().Replace("*", ""));//"SubscrberState"
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["SubscriberZip"]).Trim().Replace("*", ""));//"SubscriberZip"

        //                                                    #endregion NM1 SUBSCRIBER NAME

        //                                                    #region Payer Information - 2330B

        //                                                    //2330B SUBSCRIBER/PAYER
        //                                                    //NM1 PAYER NAME
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\SBR\\NM1\\NM1"));
        //                                                    oSegment.set_DataElementValue(1, 0, "PR");
        //                                                    oSegment.set_DataElementValue(2, 0, "2");

        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["InsuranceName"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sSubscriberName"].ToString().Trim().Replace("*",""));//"PayerLastOrgName"

        //                                                    oSegment.set_DataElementValue(8, 0, "PI");//This is the payer ID of Medicare for Michigan
        //                                                    oSegment.set_DataElementValue(9, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerID"]).Trim().Replace("*", ""));//dtInsurance.Rows[0]["sPayerID"].ToString());//PayerID
        //                                                    //}

        //                                                    if (_SecondayInsuranceAddressDetailsRequired)
        //                                                    {
        //                                                        ////////N3 PAYER ADDRESS
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N3"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerAddress1"]).Trim().Replace("*", ""));//"InsuranceAddress"

        //                                                        ////////N4 PAYER CITY
        //                                                        ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\NM1(2)\\N4"));
        //                                                        oSegment.set_DataElementValue(1, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerCity"]).Trim().Replace("*", ""));//"InsuranceCity"
        //                                                        oSegment.set_DataElementValue(2, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerState"]).Trim().Replace("*", ""));//"InsuranceState"
        //                                                        oSegment.set_DataElementValue(3, 0, Convert.ToString(dtPatientInsurances.Rows[_Insrow]["PayerZip"]).Trim().Replace("*", ""));//"InsuranceZip"
        //                                                    }
        //                                                    #endregion Payer Information

        //                                                }

        //                                                #endregion Subscriber Secondary Insurance
        //                                            }//End for loop of Patient Insurance 

        //                                            for (int nLine = 0; nLine <= oTransaction.Lines.Count - 1; nLine++)
        //                                            {
        //                                                //iItemCount = 1;
        //                                                //iItemCount = iItemCount + nLine;
        //                                                //oTransLine = new TransactionLine();
        //                                                //oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                ////******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                ////TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                ////2400 SERVICE LINE
        //                                                //sInstance = iItemCount.ToString().Trim();
        //                                                ////LX SERVICE LINE COUNTER
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                //oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                ////SV1 PROFESSIONAL SERVICE
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                //oSegment.set_DataElementValue(1, 1, "HC");
        //                                                //oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", ""));//"ServiceID"
        //                                                //if (oTransLine.Mod1Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString());//Modifier 1
        //                                                //}
        //                                                //if (oTransLine.Mod2Code.ToString() != "")
        //                                                //{
        //                                                //    oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                //}
        //                                                //string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                //if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                //{
        //                                                //    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                //}
        //                                                //oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                //oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                //oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity


        //                                                ////if (oTransLine.Dx1Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "1");//"Diagnosis Pointer1" (Must Use)
        //                                                ////    if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 2, "2");//"Diagnosis Pointer2"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 3, "3");//"Diagnosis Pointer3"
        //                                                ////    }
        //                                                ////    if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////    {
        //                                                ////        oSegment.set_DataElementValue(7, 4, "4");//"Diagnosis Pointer4"
        //                                                ////    }
        //                                                ////}
        //                                                ////else if (oTransLine.Dx2Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "2");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx3Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "3");//"Diagnosis Pointer1"
        //                                                ////}
        //                                                ////else if (oTransLine.Dx4Ptr.ToString() == "True")
        //                                                ////{
        //                                                ////    oSegment.set_DataElementValue(7, 1, "4");//"Diagnosis Pointer1"
        //                                                ////}

        //                                                ////////oSegment.set_DataElementValue(9, 0, "N");////Y=Yes, N=No

        //                                                //if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                //{
        //                                                //    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                //    {
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx1Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx2Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx3Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim() == oTransaction.Lines[nLine].Dx4Code.Trim())
        //                                                //        {
        //                                                //            oSegment.set_DataElementValue(7, DxIndex + 1, Convert.ToString(DxIndex + 1));
        //                                                //        }
        //                                                //    }
        //                                                //}

        //                                                ////DTP DATE - SERVICE DATE(S)
        //                                                //ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                //oSegment.set_DataElementValue(1, 0, "472");
        //                                                //oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"

        //                                                #endregion

        //                                                iItemCount = 1;
        //                                                iItemCount = iItemCount + nLine;
        //                                                oTransLine = new TransactionLine();
        //                                                oTransLine = oTransaction.Lines[nLine];

        //                                                #region Service Line
        //                                                //******* SUBSCRIBER SERVICE LINE *************************************************************
        //                                                //TODO: Get the datatable for service info to add fields of service in EDI file.
        //                                                //2400 SERVICE LINE
        //                                                sInstance = iItemCount.ToString().Trim().Replace("*", "");
        //                                                //LX SERVICE LINE COUNTER
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\LX"));
        //                                                oSegment.set_DataElementValue(1, 0, iItemCount.ToString());

        //                                                //SV1 PROFESSIONAL SERVICE
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\SV1"));
        //                                                oSegment.set_DataElementValue(1, 1, "HC");
        //                                                oSegment.set_DataElementValue(1, 2, oTransLine.CPTCode.ToString().Replace(".", "").Trim().Replace("*", ""));//"ServiceID"
        //                                                if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    oSegment.set_DataElementValue(1, 3, oTransLine.Mod1Code.ToString().Trim().Replace("*", ""));//Modifier 1
        //                                                }
        //                                                if (oTransLine.Mod2Code.ToString().Trim().Replace("*", "") != "")
        //                                                {
        //                                                    if (oTransLine.Mod1Code.ToString().Trim().Replace("*", "") == "")
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 3, oTransLine.Mod2Code.ToString());
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        oSegment.set_DataElementValue(1, 4, oTransLine.Mod2Code.ToString());//Modifier 2
        //                                                    }
        //                                                }
        //                                                string _ClaimLineCharges = Convert.ToString(oTransLine.Total);

        //                                                if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 2, 2) == "00")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 3);
        //                                                }
        //                                                else if (_ClaimLineCharges.Substring(_ClaimLineCharges.Length - 1, 1) == "0")
        //                                                {
        //                                                    _ClaimLineCharges = _ClaimLineCharges.Substring(0, _ClaimLineCharges.Length - 1);
        //                                                }
        //                                                oSegment.set_DataElementValue(2, 0, _ClaimLineCharges);//"ServiceAmount"
        //                                                oSegment.set_DataElementValue(3, 0, "UN");//UN stands for UNITS
        //                                                oSegment.set_DataElementValue(4, 0, oTransLine.Unit.ToString());//Unit/Quantity
        //                                                if (dtDx != null && dtDx.Rows.Count > 0)
        //                                                {
        //                                                    int _CompTerminatorPos = 0;

        //                                                    for (int DxIndex = 0; DxIndex < dtDx.Rows.Count; DxIndex++)
        //                                                    {
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx1Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "1");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx2Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "2");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx3Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "3");
        //                                                        }
        //                                                        if (Convert.ToString(dtDx.Rows[DxIndex]["DX"]).Trim().Replace("*", "") == oTransaction.Lines[nLine].Dx4Code.Trim().Replace("*", ""))
        //                                                        {
        //                                                            _CompTerminatorPos = _CompTerminatorPos + 1;
        //                                                            oSegment.set_DataElementValue(7, _CompTerminatorPos, "4");
        //                                                        }
        //                                                    }
        //                                                }

        //                                                //DTP DATE - SERVICE DATE(S)
        //                                                ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX(" + sInstance + ")\\DTP"));
        //                                                oSegment.set_DataElementValue(1, 0, "472");
        //                                                oSegment.set_DataElementValue(2, 0, "D8");
        //                                                //Date should not be more than 2 Years Old.
        //                                                //if (DateTime.Now.Date - oTransLine.DateServiceFrom <= 2)
        //                                                {
        //                                                    oSegment.set_DataElementValue(3, 0, Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransLine.DateServiceFrom.ToShortDateString())));//Convert.ToString(c1Transaction.GetData(c1Transaction.RowSel, COL_DATEFROM)));//"ServiceDate"
        //                                                }
        //                                                #endregion

        //                                                #region " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                                if (oTransaction.Lines[nLine].AuthorizationNo.Trim() != "")
        //                                                {
        //                                                    ediDataSegment.Set(ref oSegment, (ediDataSegment)oTransactionset.CreateDataSegment("HL\\CLM\\LX\\REF"));
        //                                                    oSegment.set_DataElementValue(1, 0, "X4"); //Clinical Laboratory Improvement Amendment Number
        //                                                    oSegment.set_DataElementValue(2, 0, oTransaction.Lines[nLine].AuthorizationNo.Trim());//
        //                                                }
        //                                                #endregion " CLIA (Clinical Laboratory Improvement Amendment Number) "
        //                                            }

        //                                            #endregion " Dependent "
        //                                        }//end of else loop for dependent

        //                                    }//If loop for Patient Insurance
        //                                    //Transaction Line Loop
        //                                }//Transaction SETS Loop
        //                            }
        //                        }
        //                    }

        //                    #region " Save EDI File "

        //                    //Save to a file
        //                    //SaveFileDialog oSave = new SaveFileDialog();
        //                    //oSave.Filter = "TEXT Files (*.txt)|*.txt|EDI Files (*.edi)|*.edi|X12 Files (*.X12)|*.X12";
        //                    //if (oSave.ShowDialog() == DialogResult.OK)
        //                    //{
        //                    // sPath = sPath + "837 EDI\\";
        //                    sPath = "";
        //                    //sPath = AppDomain.CurrentDomain.BaseDirectory + "837 EDI\\";
        //                    sPath = appSettings["StartupPath"].ToString() + "\\" + "837 EDI\\";
        //                    if (System.IO.Directory.Exists(sPath) == false) { System.IO.Directory.CreateDirectory(sPath); }

        //                    sEdiFile = GetEDIFileName(sPath, _BatchName);

        //                    //Added By MaheshB
        //                    //sEdiFile = @"C:\Documents and Settings\Administrator\My Documents\Test\test.txt";

        //                    oEdiDoc.Save(sEdiFile);
        //                    System.IO.StreamReader oReader = new System.IO.StreamReader(sEdiFile);
        //                    string strData;
        //                    strData = oReader.ReadToEnd();
        //                    oReader.Close();

        //                    System.IO.StreamWriter oWriter = new System.IO.StreamWriter(sEdiFile);
        //                    oWriter.Write(strData);
        //                    oWriter.Close();
        //                    _result = sEdiFile;
        //                    MessageBox.Show("EDI claim generated successfully.", "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                    //}


        //                    #endregion " Save EDI File "

        //                    #region " Update Claim Manager Table "
        //                    Int64 _date = 0;
        //                    Int64 _time = 0;
        //                    _date = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
        //                    _time = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToString());
        //                    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
        //                    Int64 _id = ogloClaimManager.InsertUpdateClaimManager(0, _BatchID, oTransaction.TransactionID, oTransaction.ClaimNo, oTransaction.PatientID, Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]), InterchangeHeader, TransactionSetHeader, FunctionalGroupHeader, _date, _time, _UserID, gloPatient.TypeOfBilling.Electronic.GetHashCode(), this.ClinicID);
        //                    ogloClaimManager.Dispose();
        //                    #endregion

        //                    //DESTROYS OBJECTS
        //                    oSegment.Dispose();
        //                    oTransactionset.Dispose();
        //                    oGroup.Dispose();
        //                    oInterchange.Dispose();

        //                }
        //            }
        //        }
        //        catch (System.Runtime.CompilerServices.RuntimeWrappedException Rex)
        //        {
        //            string _strEx = "";
        //            ediException oException = null;
        //            oException = (ediException)Rex.WrappedException;
        //            _strEx = oException.get_Description();
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(_strEx, true);
        //            _result = "";
        //        }
        //        catch (Exception ex)
        //        {
        //            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //            _result = "";
        //        }
        //        finally
        //        {
        //            if (dtClearingHouse != null) { dtClearingHouse.Dispose(); }
        //            if (dtSubmitter != null) { dtSubmitter.Dispose(); }
        //            if (dtReceiver != null) { dtReceiver.Dispose(); }
        //            if (dtBillingProvider != null) { dtBillingProvider.Dispose(); }
        //            if (dtRenderingProvider != null) { dtRenderingProvider.Dispose(); }
        //            if (dtFacility != null) { dtFacility.Dispose(); }
        //            if (dtPatientInsurances != null) { dtPatientInsurances.Dispose(); }
        //            if (dtReferral != null) { dtReferral.Dispose(); }
        //        }
        //        #endregion " Generate EDI "

        //    }//SEF File present IF loop
        //    return _result;
        //}

        #endregion

        public bool IsPos11(string _sFacilityCode, Int64 _ContactID)
        {
            bool _result = true;
            gloDatabaseLayer.DBLayer oDB = null;
            DataTable dtPOS = null;
            try
            {
                string _sqlquery1 = "select ISNULL(nPOSID,0) as nPOSID from BL_Facility_MST WITH(NOLOCK) where sFacilityCode='" + _sFacilityCode + "'";


                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlquery1, out dtPOS);
            }
            catch //(Exception ex)
            {
                //gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }

            string _POS = String.Empty;
            if (dtPOS != null && dtPOS.Rows.Count > 0)
            {
                _POS = Convert.ToString(dtPOS.Rows[0]["nPOSID"]);
            }


            //MaheshB 20091127 New Facility Settings From Admin
            if (_POS.Trim() == "11")
            { //Check Plan Settings.                
                string _sqlquery = "Select ISNULL(sIncludeFacilitieswithPOS11onClaim,'') as sIncludeFacilitieswithPOS11onClaim from Contacts_Insurance_DTL WITH(NOLOCK)  where nContactID='" + _ContactID + "'";
                //gloDatabaseLayer.DBLayer oDB = null;
                try
                {
                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    DataTable dt = null;
                    oDB.Retrive_Query(_sqlquery, out dt);

                    if (dt != null && dt.Rows.Count > 0)
                    {
                        if (Convert.ToString(dt.Rows[0]["sIncludeFacilitieswithPOS11onClaim"]) != "")
                        {
                            if (Convert.ToString(dt.Rows[0]["sIncludeFacilitieswithPOS11onClaim"]).ToUpper().Trim() == "NO")
                            {
                                _result = false;
                            }
                        }
                        else
                        { //If No settings for Plan check Admin Settings.
                            _sqlquery = "";
                            _sqlquery = "Select sSettingsValue from settings WITH(NOLOCK) where sSettingsName='IncludeFacilitieswithPOS11onClaim' and nClinicID='" + _ClinicID + "'";
                            DataTable dtAdmin = null;
                            oDB.Retrive_Query(_sqlquery, out dtAdmin);
                            if (dtAdmin != null && dtAdmin.Rows.Count > 0)
                            {
                                if (Convert.ToString(dtAdmin.Rows[0]["sSettingsValue"]) == "False")
                                {
                                    _result = false;
                                }
                            }
                            if (dtAdmin != null)
                            {
                                dtAdmin.Dispose();
                                dtAdmin = null;
                            }
                        }
                    }
                    if (dt != null)
                    {
                        dt.Dispose();
                        dt = null;
                    }
                }
                catch //(Exception ex)
                {
                    //gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                }
                finally
                {
                    if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                    if (dtPOS != null) {dtPOS.Dispose(); dtPOS = null; }
                }
            }
            if (dtPOS != null) { dtPOS.Dispose(); dtPOS = null; }
            return _result;
        }

        //MaheshB 02182010
        public string InsuranceCompanyName(Int64 _ContactID)
        {
            string _result = "";
            gloDatabaseLayer.DBLayer oDB = null;
            DataTable _dt = null;
            try
            {
                string _sqlQuery = "SELECT    ISNULL(Contacts_InsuranceCompany_MST.sDescription,'') AS [ComapanyName], Contacts_MST.nContactID, Contacts_MST.sName AS [PlanName] " +
                                   " FROM         Contact_InsurancePlan_Association WITH(NOLOCK) RIGHT OUTER JOIN " +
                                   " Contacts_MST WITH(NOLOCK) ON Contact_InsurancePlan_Association.nContactId = Contacts_MST.nContactID LEFT OUTER JOIN " +
                                   " Contacts_InsuranceCompany_MST WITH(NOLOCK) ON Contact_InsurancePlan_Association.nCompanyId = Contacts_InsuranceCompany_MST.nID " +
                                   " WHERE     (Contacts_MST.nContactID = " + _ContactID + ") ";
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dt);
                if (_dt != null && _dt.Rows.Count > 0)
                {
                    _result = Convert.ToString(_dt.Rows[0]["ComapanyName"]);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_dt != null) { _dt.Dispose(); _dt = null; }
            }
            return _result;
        }

        //6031
        public string getPayerPaidAmount(Int64 _TransactionID, string sPayerID, string sContactID, string sInsuranceID)
        {
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            DataTable _dtPayment = null;
            string _result = String.Empty;
            Int64 nContactID = 0;
            Int64 nInsuranceID = 0;
            try
            {
                if (sContactID != "")
                {
                    nContactID = Convert.ToInt64(sContactID);
                }
                if (sInsuranceID != "")
                {
                    nInsuranceID = Convert.ToInt64(sInsuranceID);
                }
                ODB.Connect(false);
                oParameters.Add("@nTransactionID", _TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sPayerID", sPayerID, ParameterDirection.Input, SqlDbType.VarChar);


                oParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                //20100410
                oParameters.Add("@nInsuranceID", nInsuranceID, ParameterDirection.Input, SqlDbType.BigInt);


                ODB.Retrive("BL_SELECT_PAYER_PAID", oParameters, out _dtPayment);
                if (_dtPayment != null && _dtPayment.Rows.Count > 0)
                {
                    if (Convert.ToString(_dtPayment.Rows[0]["TotalPaid"]) != "")
                    {
                        Decimal _result1 = Convert.ToDecimal(_dtPayment.Rows[0]["TotalPaid"]);
                        _result = _result1.ToString("#0.00");
                    }
                }
                ODB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (_dtPayment != null) { _dtPayment.Dispose(); _dtPayment = null; }
                if (ODB != null) { ODB.Disconnect(); ODB.Dispose(); ODB = null; }

            }
            return _result;
        }

        //Filters According to payer
        public string getFilteredPayerPaid(Int64 nMasterTransactionID, Int64 _TransactionID, string _PayercontactID, string _PayerInsuranceID, DataTable _dtPayment)
        {
            string _result = String.Empty;

            try
            {
                if (_dtPayment != null && _dtPayment.Rows.Count > 0)
                {
                    _result = Convert.ToString(_dtPayment.Compute("SUM(InsPaidAmount)", "nMasterTransactionID=" + nMasterTransactionID + " And ContactID=" + _PayercontactID + " And InsuranceID=" + _PayerInsuranceID + ""));

                    if (_result != "")
                    {
                        Decimal _result1 = Convert.ToDecimal(_result);
                        _result = _result1.ToString("#0.00");
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {

            }
            return _result;
        }

        //GetAllPayment
        public DataTable GetAllPaymnet(Int64 nMasterTransactionID)
        {
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            DataTable _dtPayment = null;

            try
            {

                ODB.Connect(false);
                oParameters.Add("@nMasterTransactionID", nMasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                ODB.Retrive("BL_SELECT_SVD_DATA", oParameters, out _dtPayment);
                ODB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (ODB != null) { ODB.Disconnect(); ODB.Dispose(); ODB = null; }

            }
            return _dtPayment;
        }


        public DataTable getPateintPaid(Int64 _TransactionID)
        {
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            DataTable _dtPayment = null;

            try
            {
                ODB.Connect(false);
                oParameters.Add("@nTransactionID", _TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //   oParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                ODB.Retrive("BL_Get_PatientPaid", oParameters, out _dtPayment);
                //string _QUERY = "SELECT     ISNULL(SUM(BL_EOBPayment_DTL.nAmount), 0) AS TotalPaid " +
                //              " FROM         BL_EOBPayment_DTL WITH(NOLOCK) INNER JOIN " +
                //              " BL_Transaction_Lines WITH(NOLOCK) ON BL_EOBPayment_DTL.nBillingTransactionDetailID = BL_Transaction_Lines.nTransactionDetailID INNER JOIN " +
                //              " BL_Transaction_Claim_Lines WITH(NOLOCK) ON BL_Transaction_Lines.nTransactionID = BL_Transaction_Claim_Lines.nTransactionMasterID AND " +
                //              " BL_Transaction_Lines.nTransactionDetailID = BL_Transaction_Claim_Lines.nTransactionMasterDetailID " +
                //              " WHERE     (BL_EOBPayment_DTL.nPaymentType = 6) AND (BL_EOBPayment_DTL.nPaymentSubType = 8) AND (BL_EOBPayment_DTL.nPaySign = 2) AND  " +
                //              " (BL_Transaction_Lines.nClinicID = 1) OR " +
                //              " (BL_EOBPayment_DTL.nPaymentType = 6) AND (BL_EOBPayment_DTL.nPaymentSubType = 13) AND (BL_EOBPayment_DTL.nPaySign = 1) AND " +
                //              " (BL_Transaction_Lines.nClinicID = 1) " +
                //              " GROUP BY BL_Transaction_Claim_Lines.nTransactionID " +
                //              " HAVING      (BL_Transaction_Claim_Lines.nTransactionID = " + _TransactionID + ")";

                // string _QUERY = "select ISNULL(SUM(dPaymentAmount),0) AS TotalPaid  from debits " +
                //                " where debits.nEntryType in (6,9) and debits.nClinicID=" + _ClinicID  +" and debits.nBillingTransactionID=" + _TransactionID;

                //ODB.Retrive_Query(_QUERY, out _dtPayment);

                ODB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (ODB != null) { ODB.Disconnect(); ODB.Dispose(); ODB = null; }

            }
            return _dtPayment;
        }


        private string FormatAmount(string _amount)
        {
            string _ClaimAmount = String.Empty;
            _amount = _amount.Trim();

            try
            {
                if (_amount != null && _amount != "")
                {
                    _ClaimAmount = (Convert.ToDecimal(_amount)).ToString("#0.00");

                    if (_ClaimAmount.Substring(_ClaimAmount.Length - 2, 2) == "00")
                    {
                        _ClaimAmount = _ClaimAmount.Substring(0, _ClaimAmount.Length - 3);
                    }
                    else if (_ClaimAmount.Substring(_ClaimAmount.Length - 1, 1) == "0")
                    {
                        _ClaimAmount = _ClaimAmount.Substring(0, _ClaimAmount.Length - 1);
                    }
                }
            }
            catch //(Exception ex)
            {

            }
            finally
            {

            }
            return _ClaimAmount;
        }

        private string FormatUnit(string _Unit)
        {
            string _ClaimAmount = String.Empty;
            _Unit = _Unit.Trim();

            try
            {
                if (_Unit != "")
                {
                    _ClaimAmount = (Convert.ToDecimal(_Unit)).ToString("#############0.####");
                }
            }
            catch //(Exception ex)
            {

            }
            finally
            {

            }
            return _ClaimAmount;
        }


        private string getAllowedAmount(Int64 TransactionMasterID, Int64 TransactionMasterDetailID, Int64 nInsuranceID, Int64 nContactID)
        {
            string _allowedAmount = String.Empty;
            DataTable _dtAllowed = null;
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                ODB.Connect(false);
                oParameters.Add("@nMasterTransactionID", TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nMasterTransactionDetailID", TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nInsuranceID", nInsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                ODB.Retrive("BL_SELECT_ALLOWEDAMOUNT", oParameters, out _dtAllowed);


                if (_dtAllowed != null && _dtAllowed.Rows.Count > 0)
                {
                    _allowedAmount = Convert.ToString(_dtAllowed.Rows[0]["LineAllowed"]);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (_dtAllowed != null) { _dtAllowed.Dispose(); _dtAllowed = null; }
                if (ODB != null) { ODB.Disconnect(); ODB.Dispose(); ODB = null; }

            }
            return _allowedAmount;
        }

        private string getFilteredLineAllowed(Int64 TransactionMasterID, Int64 TransactionMasterDetailID, Int64 nInsuranceID, Int64 nContactID, DataTable _dtPayment)
        {
            DataRow[] dr = null;
            DataRow _datarow = null;
            string _amountallowed = "";

            try
            {
                if (_dtPayment != null && _dtPayment.Rows.Count > 0)
                {
                    dr = _dtPayment.Select("nMasterTransactionID=" + TransactionMasterID + " AND nMasterTransactionDetailID=" + TransactionMasterDetailID + " And ContactID=" + nContactID + " And InsuranceID=" + nInsuranceID + "");
                    if (dr != null && (dr.GetUpperBound(0) >= 0))
                    {
                        _datarow = dr[0];
                    }
                }
                if (_datarow != null)
                {
                    _amountallowed = Convert.ToString(_datarow["AllowedAmount"]);
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                dr = null;
                _datarow = null;
            }
            return _amountallowed;
        }

        private string getFilteredClaimAllowed(Int64 TransactionMasterID, Int64 nInsuranceID, Int64 nContactID, DataTable _dtPayment)
        {
            string _amountallowed = "";

            try
            {
                if (_dtPayment != null && _dtPayment.Rows.Count > 0)
                {
                    _amountallowed = Convert.ToString(_dtPayment.Compute("SUM(AllowedAmount)", "nMasterTransactionID=" + TransactionMasterID + "  And ContactID=" + nContactID + " And InsuranceID=" + nInsuranceID + ""));
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {

            }
            return _amountallowed;
        }

        private DataTable getFilteredSVDLine(Int64 TransactionMasterID, Int64 TransactionMasterDetailID, DataTable _dtPayment)
        {
            DataRow[] dr = null;
            DataTable _dtResult = null;

            try
            {
                _dtResult = new DataTable();
                if (_dtPayment != null && _dtPayment.Rows.Count > 0)
                {
                    dr = _dtPayment.Select("nMasterTransactionID=" + TransactionMasterID + " AND nMasterTransactionDetailID=" + TransactionMasterDetailID + "");
                }

            
            if (dr != null && (dr.GetUpperBound(0) >= 0))
            {
                _dtResult = dr.CopyToDataTable();
            }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                dr = null;
            }
            return _dtResult;
        }

        private DataTable getFilteredCasData(Int64 TransactionMasterID, Int64 TransactionMasterDetailID, Int64 nContactID, Int64 nInsuranceID, DataTable _dtPayment)
        {
            DataRow[] dr = null;
            DataTable _dtResult = null;

            try
            {
                if (_dtPayment != null && _dtPayment.Rows.Count > 0)
                {
                    dr = _dtPayment.Select("nMasterTransactionID=" + TransactionMasterID + " AND nMasterTransactionDetailID=" + TransactionMasterDetailID + " And ContactID=" + nContactID + " And InsuranceID=" + nInsuranceID + "");
                }
                if (dr != null && (dr.GetUpperBound(0) >= 0))
                {
                    _dtResult = dr.CopyToDataTable();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                dr = null;
            }
            
            return _dtResult;
        }

        private DataTable GetCasData(Int64 TransactionMasterID)
        {
            DataTable dtCasdata = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            gloDatabaseLayer.DBLayer ODB = null;

            try
            {
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nMasterTransactionID", TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                ODB.Connect(false);
                ODB.Retrive("BL_SELECT_CAS_DATA", oDBParameters, out dtCasdata);
                ODB.Disconnect();
            }
            catch //(Exception ex)
            {
            }
            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (ODB != null) { ODB.Disconnect(); ODB.Dispose(); ODB = null; }
            }
            return dtCasdata;
        }

        private string getClaimAllowedAmount(Int64 nInsuranceID, Int64 nContactID, Int64 nTransactionID)
        {
            string _allowedAmount = String.Empty;
            DataTable _dtAllowed = null;
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();


            try
            {
                ODB.Connect(false);
                oParameters.Add("@nInsuranceID", nInsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionID", nTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                ODB.Retrive("BL_SELECT_ClAIMALLOWEDAMOUNT", oParameters, out _dtAllowed);


                if (_dtAllowed != null && _dtAllowed.Rows.Count > 0)
                {
                    _allowedAmount = Convert.ToString(_dtAllowed.Rows[0]["ClaimAllowed"]);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); oParameters = null; }
                if (_dtAllowed != null) { _dtAllowed.Dispose(); _dtAllowed = null; }
                if (ODB != null) { ODB.Disconnect(); ODB.Dispose(); ODB = null; }

            }
            return _allowedAmount;
        }

        //20100426 gloPM5040 MaheshB
        private bool IsInCludeOTAFAmount(Int64 _ContactID)//(Int64 nInsuranceID,Int64 PatientID,Int64 ClinicID)
        {
            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = null;
            DataTable dtContact = null;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                //string _strQuery = "SELECT     PatientInsurance_DTL.nPatientID, PatientInsurance_DTL.nInsuranceID, PatientInsurance_DTL.sSubscriberName, " +
                //                   " PatientInsurance_DTL.nContactID " +
                //                   " FROM         PatientInsurance_DTL INNER JOIN " +
                //                   " Contacts_MST ON PatientInsurance_DTL.nContactID = Contacts_MST.nContactID " +
                //                   " WHERE     (PatientInsurance_DTL.nInsuranceID = " + nInsuranceID + " and nPatientID=" + PatientID + " and nClinicID=" + ClinicID + ") ";
                //oDB.Connect(false);
                //dtContact = new DataTable();
                //oDB.Retrive_Query(_strQuery, out dtContact);
                //if (dtContact != null && dtContact.Rows.Count > 0)
                //{
                string _sqlQuery = "select IsNull(bIsOTAFAmount,0) as bIsOTAFAmount from dbo.Contacts_Insurance_DTL WITH(NOLOCK) where nContactID = " + _ContactID;
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out dtContact);
                if (dtContact != null && dtContact.Rows.Count > 0)
                {
                    _result = Convert.ToBoolean(dtContact.Rows[0]["bIsOTAFAmount"]);
                    //_result = true;
                }
                //}
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (dtContact != null) { dtContact.Dispose(); dtContact = null; }
            }
            return _result;
            //Change this after implementatcion.
        }

        //20100616 gloPM5050 
        private DataTable GetReferralProvider(Int64 PatientID, Int64 BillingProviderID, Int64 ReferrinProviderID, bool IssameAsBillingProvider, string databaseconnectionstring)
        { //ReferrinProviderID is contactID from Patient_DTL Table.
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(databaseconnectionstring);
            String _strSQL = "";
            DataTable dtProvider = null;

            try
            {
                oDB.Connect(false);

                if (IssameAsBillingProvider == true)
                {
                    _strSQL = "Select    Isnull(sBusinessAddressline1,'') as Addressline1,Isnull(sBusinessAddressline2,'') as sAddressLine2, " +
                             " Isnull(sBusinessCity,'') as sCity, Isnull(sBusinessState,'') as sState,Isnull(sBusinessZIP,'') as sZip,Isnull(sBusPhoneNo,'') as sPhone,Isnull(sFirstName,'') as sFirstName, " +
                             " Isnull(sMiddleName,'') as sMiddleName,Isnull(sLastName,'') as sLastName,Isnull(sTaxonomy,'') as sTaxonomy, " +
                             " Isnull(sTaxonomyDesc,'') as sTaxonomyDesc,Isnull(sCompanyTaxID,'') as sTaxID,Isnull(sUPIN,'') as sUPIN,Isnull(sNPI,'') as sNPI,Isnull(sSuffix,'') as sSuffix from Provider_Mst WITH(NOLOCK) where nProviderID=" + BillingProviderID + " and nClinicID=" + ClinicID + "";
                }
                else
                {
                    _strSQL = "SELECT ISNULL(Contacts_MST.sFirstName,'') AS sFirstName, " +
                               " ISNULL(Contacts_Physician_DTL.sdegree,'') as sdegree, " +
                               "ISNULL(Contacts_MST.sMiddleName,'') AS sMiddleName , ISNULL(Contacts_MST.sLastName,'') AS sLastName ,ISNULL(Contacts_MST.sGender,'') AS  sGender ,  " +
                               "ISNULL(Contacts_Physician_DTL.sTaxonomy,'') AS sTaxonomy , ISNULL(Contacts_Physician_DTL.sTaxonomyDesc,'') AS sTaxonomyDesc, " +
                               "ISNULL(Contacts_Physician_DTL.sTaxID,'') AS sTaxID,ISNULL(Contacts_Physician_DTL.sNPI,'') AS sNPI  " +
                               "FROM Contacts_MST WITH(NOLOCK) left outer join Contacts_Physician_DTL WITH(NOLOCK) ON Contacts_MST.nContactID = Contacts_Physician_DTL.nContactID  " +
                               " WHERE  Contacts_MST.nContactID=" + ReferrinProviderID + "";
                }
                oDB.Retrive_Query(_strSQL, out dtProvider);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbex)
            {
                dbex.ERROR_Log(dbex.ToString());
            }
            catch //(Exception ex)
            {
                //gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtProvider;
        }
        #endregion " EDI Generation Private Methods "

        private string GetFormattedZipCode(string ZipCode, string AreaCode)
        {
            string _zipCodeFormatted = "";

            try
            {
                //...First assign the ZipCode as final result
                if (ZipCode != null && ZipCode != DBNull.Value.ToString() && ZipCode.Trim() != "")
                { _zipCodeFormatted = ZipCode.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", ""); }

                //...If the area code is present the attach the area code with the zip code
                if ((ZipCode != null && ZipCode != DBNull.Value.ToString() && ZipCode.Trim() != "")
                    && (AreaCode != null && AreaCode != DBNull.Value.ToString() && AreaCode.Trim() != ""))
                {
                    _zipCodeFormatted = "";
                    _zipCodeFormatted = ZipCode.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "") + AreaCode.Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("-", "");
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            { }

            return _zipCodeFormatted;
        }

        private string FormatString(string _Value)
        {
            string _result = "";
            _result = Convert.ToString(_Value).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("^", "");
            if (_result == null)
            {
                _result = "";
            }
            return _result;
        }

        public DataTable GetClearingHouse(Int64 ContactID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            DataTable dtClearingHouse = null;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);
                oDBParameters.Add("@nContactId", ContactID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@nClinicId", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                dtClearingHouse = null;
                oDB.Retrive("EDI_GetClearingHouse", oDBParameters, out dtClearingHouse);
                //Same SP used in ClaimManager.
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return null;
            }
            finally
            {
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
            return dtClearingHouse;
        }
        private string GetBox29Setting(Int64 TrnsID, Int64 _ContactID)
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            string _result = "";
            object Amount = null;
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@nTransactionID", TrnsID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@nContactID", _ContactID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@nSettingType", gloSettings.PaperBillingBoxtype.Box29.GetHashCode(), System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
                oDBParameters.Add("@nClinicID", _ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@sAmount", string.Empty, System.Data.ParameterDirection.Output, System.Data.SqlDbType.VarChar, 255);
                oDB.Execute("BL_GetPaperPaperBillingAmountPaid", oDBParameters, out Amount);
                oDB.Disconnect();
                _result = Convert.ToString(Amount);

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                return string.Empty;

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return string.Empty;

            }
            finally
            {
                oDB.Dispose();
            }
            return _result;
        }

        private Boolean GetIncludePriorPatPaymentSetting(Int64 _ContactID)
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            Boolean _result = false;
            object IncludePriorPatPaymentSetting = null;
            try
            {
                oDB.Connect(false);               
                oDBParameters.Add("@nContactID", _ContactID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@IncludePriorPatientPaymentSetting", 0, System.Data.ParameterDirection.Output, System.Data.SqlDbType.Bit);
                oDB.Execute("getIncludePriorPatientPaymentSetting", oDBParameters, out IncludePriorPatPaymentSetting);
                oDB.Disconnect();
                if (IncludePriorPatPaymentSetting != null || IncludePriorPatPaymentSetting != DBNull.Value)
                {
                    _result = Convert.ToBoolean(IncludePriorPatPaymentSetting);
                }

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                return false;

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return false;

            }
            finally
            {
                oDB.Dispose();
            }
            return _result;
        }

        private bool getBox69settings(Int64 ContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            bool _IsIncludePrimaryDxInBox69 = false;
            try
            {
                oDB.Connect(false);


                //Get Box 32 and Box 33 Settings from Contacts Insurance Details
                DataTable dt = new DataTable();
                _sqlQuery = "select " +
                            " isnull(bIncludePrimaryDxInBox69,0) as bIncludePrimaryDxInBox69" +
                            " from Contacts_Insurance_DTL where nContactID = " + ContactID;
                oDB.Retrive_Query(_sqlQuery, out dt);

                if (dt != null && dt.Rows.Count > 0)
                {
                    _IsIncludePrimaryDxInBox69 = Convert.ToBoolean(dt.Rows[0]["bIncludePrimaryDxInBox69"]);
                }
                dt = null;
            }
            catch //(Exception ex)
            {
                //gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return _IsIncludePrimaryDxInBox69;
        }
    }
}

