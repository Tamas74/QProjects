using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using Edidev.FrameworkEDI;
using gloBilling;
using gloBilling.Common;
using gloAppointmentBook.Books;
using System.Data.SqlClient;
using C1.Win.C1FlexGrid;
using gloSettings;
using gloPatient;
using System.Reflection;
using gloGlobal;
using gloBilling.Collections;
using System.Linq;
using System.IO;
using System.Threading;

namespace gloBilling
{
    public partial class frmBillingBatch_New : Form
    {


        #region " Variable Declarations "
        private ComboBox combo;
        private string _databaseconnectionstring = "";
        private string _messageBoxCaption = "";
        private string _emrdatabaseconnectionstring = "";
        private DataView _dvCharges = new DataView();
        System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
        private Int64 _ClinicID = 0;
        private Int64 _UserID = 0;
        private string _UserName = "";
        //    C1.Win.C1FlexGrid.CellStyle csStyle = null;
        private bool _isBatchTreeLoading = false;
        private bool _isProcessingFiles = false;
        private string _EDIFileName = "";
        private bool _IsValidated = false;
        private bool _bSendingToBatch = false;
        ArrayList oClaimNoArray = null;
        private bool UB04Setting = false;        
        private string _BusinessCenterCode = "";
        private bool _IsMultipleClearingHouse = false;
        int _BillingTypeId = Convert.ToInt16(BillingType.Professional);
        //highlighted row
        public ArrayList SelectedCharges = new ArrayList();
        //AlphaII validation variables
        private Int32 _nPrevBatchId = 0;
        private Int32 _nPrevSentBatchId = 0;
        private bool _IsValidateButtonClick = false;
        bool _IsResend = false;
        DataView dvClaims = new DataView();

        private string _TagNodeAll = "All";
        private string _TagCharges = "Charges";
        private string _TagQueue = "Queue";
        private string _TagBatch = "Batch";
        private string _TagSentBatch = "SentBatch";
        private string _TagVoid = "Void";

        private bool _isFormLoading = false;
        string _strSelectedbatch = String.Empty;//Added By MahesgB For 997.

        private bool _CopyEDIFiles = true;
        private object _BillingclaimTotal;
        private object _PlanclaimTotal;

        System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmBillingBatch_New));
        private ToolStripMenuItem btnPaper;
        private ToolStripMenuItem btn4010;
        private ToolStripMenuItem btn5010;
        private ToolStripMenuItem btnInst4010;
        private ToolStripMenuItem btnInst5010;
        private ToolStripMenuItem mnuOther;
        private ToolStripMenuItem btnPaperNew;

        public delegate void GetQueuedata();
        public event GetQueuedata processQueuedata;

        int BillingTypeMethod = 0;
        bool _IsenableUB04 = false;

        private gloListControl.gloListControl oListControl;
        private DataTable dtInsuranceCompany;

        DateTime dtCurrentDate = DateTime.Now;

        private bool _isLoadedFromModifyCharges = false;

        C1FlexGrid _c1flexGridForClaims = null; //temp variable to hold c1 grids

        Int32 _nPaperVersion = 0;
        Int32 iFileTypeID = 0;

        //public Int32 iFileType
        //{
        //    get { return iFileTypeID; }
        //    set { iFileTypeID = value; }
        //}

        string _OutputFilePath = "";
        private Thread thrdQueue = null;
        DataTable dtClaimID = null;

        public delegate void PrintCM(object type,DataTable dt);
        public event PrintCM enableThread;
        int IsPrinted = 0;
        System.Windows.Forms.Timer searchTimer = new System.Windows.Forms.Timer();
        DateTime _SearchCurrentTime;
        #endregion " Variable Declarations "
       
        #region " C1 Grid Constants "

        private const int COL_NO = 0;
        private const int COL_TRANSACTIONID = 1;
        private const int COL_TRANSACTIONDATE = 2;
        private const int COL_PATIENTID = 3;
        private const int COL_PATIENTCODE = 4;
        private const int COL_PATIENTSSN = 5;
        private const int COL_PATIENTFNAME = 6;
        private const int COL_PATIENTMNAME = 7;
        private const int COL_PATIENTLNAME = 8;
        private const int COL_PROVIDERID = 9;
        private const int COL_PROVIDERFNAME = 10;
        private const int COL_PROVIDERMNAME = 11;
        private const int COL_PROVIDERLNAME = 12;
        private const int COL_FACILITYCODE = 13;
        private const int COL_FACILITYDESC = 14;

        #endregion " C1 Grid Constants "

        #region " Property Procedures "

        public Int64 ClinicID
        {
            get { return _ClinicID; }
            set { _ClinicID = value; }
        }

        public C1.Win.C1FlexGrid.C1FlexGrid QueuedClaims
        {
            get { return c1QueuedClaims; }
            set { c1QueuedClaims = value; }
        }
        public C1.Win.C1FlexGrid.C1FlexGrid BatchGridClaims
        {
            get { return c1BatchGrid; }
            set { c1BatchGrid = value; }
        }
        public C1.Win.C1FlexGrid.C1FlexGrid SentBatchGridClaims
        {
            get { return c1BatchGridSentBatch; }
            set { c1BatchGridSentBatch = value; }
        }
        public Int64 UserID
        {
            get { return _UserID; }
            set { _UserID = value; }
        }

        public string UserName
        {
            get { return _UserName; }
            set { _UserName = value; }
        }

        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams cp = base.CreateParams;
                cp.ExStyle |= 0x02000000;
                return cp;
            }
        }


        #endregion " Property Procedures "

        #region " Constructor "

        private frmBillingBatch_New()
        {
            _databaseconnectionstring = appSettings["DataBaseConnectionString"].ToString();
            InitializeComponent();

            #region " Retrieve ClinicID from AppSettings "

            if (appSettings["ClinicID"] != null)
            {
                if (appSettings["ClinicID"] != "")
                { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
                else { _ClinicID = 0; }
            }
            else
            { _ClinicID = 0; }

            #endregion

            #region " Retrive UserID from appSettings "

            if (appSettings["UserID"] != null)
            {
                if (appSettings["UserID"] != "")
                {
                    _UserID = Convert.ToInt64(appSettings["UserID"]);
                }
            }
            else
            {
                _UserID = 0;
            }

            #endregion

            #region " Retrive UserName from appSettings "

            if (appSettings["UserName"] != null)
            {
                if (appSettings["UserName"] != "")
                {
                    _UserName = Convert.ToString(appSettings["UserName"]);
                }
            }
            else
            {
                _UserName = "";
            }

            #endregion

            #region " Retrieve MessageBoxCaption from AppSettings "

            if (appSettings["MessageBOXCaption"] != null)
            {
                if (appSettings["MessageBOXCaption"] != "")
                {
                    _messageBoxCaption = Convert.ToString(appSettings["MessageBOXCaption"]);
                }
                else
                {
                    _messageBoxCaption = "";
                }
            }
            else
            { _messageBoxCaption = ""; }

            #endregion

            cmbInsuranceCompany.DrawMode = DrawMode.OwnerDrawFixed;
            cmbInsuranceCompany.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbBillingMethod.DrawMode = DrawMode.OwnerDrawFixed;
            cmbBillingMethod.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbMultiChargesTray.DrawMode = DrawMode.OwnerDrawFixed;
            cmbMultiChargesTray.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbMultiFacility.DrawMode = DrawMode.OwnerDrawFixed;
            cmbMultiFacility.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbProvider.DrawMode = DrawMode.OwnerDrawFixed;
            cmbProvider.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbReportingCategory.DrawMode = DrawMode.OwnerDrawFixed;
            cmbReportingCategory.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbUser.DrawMode = DrawMode.OwnerDrawFixed;
            cmbUser.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            cmbClearingHouse.DrawMode = DrawMode.OwnerDrawFixed;
            cmbClearingHouse.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);

            if (gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
            {
                cmbBusinessCenter.DrawMode = DrawMode.OwnerDrawFixed;
                cmbBusinessCenter.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);
                FillBusinessCenter();
                cmbBusinessCenter.SelectedValue = gloGlobal.gloPMGlobal.GetDefaultBusinessCenterForUser(gloGlobal.gloPMGlobal.UserID);
                _BusinessCenterCode = ((System.Data.DataRowView)(cmbBusinessCenter.SelectedItem)).Row.ItemArray[1].ToString();
                pnlBusinessCenter.Visible = true;
            }
            else
            {
                pnlBusinessCenter.Visible = false;
                _BusinessCenterCode = "";
            }

        }

        #endregion " Constructor "

        #region " Form Load and Close "

        private void frmBillingBatch_Load(object sender, EventArgs e)
        {
           
            btnUP.BackgroundImage = global::gloBilling.Properties.Resources.UP;
            btnUP.BackgroundImageLayout = ImageLayout.Center;
            btnDown.Visible = false;

            AddPlanBillingMethod();
            FillInsuranceCompany();
            FillReportingCategory();
            FillClearingHouse();



            try
            {
                #region "Detach Combo events"

                this.cmbInsuranceCompany.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbInsuranceCompany_MouseMove);
                this.cmbInsuranceCompany.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbInsuranceCompany_MouseMove);
                this.cmbMultiChargesTray.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbMultiChargesTray_MouseMove);
                this.cmbMultiFacility.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbMultiFacility_MouseMove);
                this.cmbProvider.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbProvider_MouseMove);
                this.cmbReportingCategory.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbReportingCategory_MouseMove);
                this.cmbUser.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.cmbUser_MouseMove);

                #endregion

                _isFormLoading = true;

                tsb_Select.Text = "Select All";
                tsb_Select.Tag = "Select";

                LoadLastSavedSetting();

                _IsenableUB04 = IsenableUB04(_ClinicID);
                _IsMultipleClearingHouse = IsMultipleClearingHouse(_ClinicID);

                SetView();

                cmbClearingHouse.Visible = _IsMultipleClearingHouse;
                lblClearingHouseCharges.Visible = _IsMultipleClearingHouse;


                tsb_Void.Visible = false;
                _CopyEDIFiles = getCopyEDIFiles();//Added By Debasish Das on 7th Apr 2010

                Cls_TabIndexSettings.TabScheme scheme = Cls_TabIndexSettings.TabScheme.AcrossFirst;
                Cls_TabIndexSettings tom = new Cls_TabIndexSettings(this);
                // This method actually sets the order all the way down the control hierarchy.
                tom.SetTabOrder(scheme);

            }
            catch //(Exception ex)
            { }
            finally
            {
                _isFormLoading = false;

                #region "Attach Combo events"

                this.cmbInsuranceCompany.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbInsuranceCompany_MouseMove);
                this.cmbInsuranceCompany.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbInsuranceCompany_MouseMove);
                this.cmbMultiChargesTray.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbMultiChargesTray_MouseMove);
                this.cmbMultiFacility.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbMultiFacility_MouseMove);
                this.cmbProvider.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbProvider_MouseMove);
                this.cmbReportingCategory.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbReportingCategory_MouseMove);
                this.cmbUser.MouseMove += new System.Windows.Forms.MouseEventHandler(this.cmbUser_MouseMove);

                #endregion

                #region "ClaimManager Enable/Disable"

                gloSettings.GeneralSettings _oSettings = null;
                object _obj = null;                
                _oSettings = new GeneralSettings(_databaseconnectionstring);
                _oSettings.GetSetting("IsEnableClaimManager", out _obj);

                gloUserRights.ClsgloUserRights oClsgloUserRights = new gloUserRights.ClsgloUserRights(gloPMGlobal.DatabaseConnectionString);
                oClsgloUserRights.CheckForUserRights(gloPMGlobal.UserName);

                if (oClsgloUserRights.ClaimManager == false)
                { tabManager.TabPages.RemoveAt(3); }
                else if (oClsgloUserRights.ClaimManager == true)
                {
                    if (Convert.ToString(_obj) == "True" && !(tabManager.TabPages.Contains(tbpg_ClaimManager)))
                    { tabManager.TabPages.Add(tbpg_ClaimManager); }
                    else if (Convert.ToString(_obj) == "False" && (tabManager.TabPages.Contains(tbpg_ClaimManager)))
                    { tabManager.TabPages.RemoveAt(3); }
                    else if (Convert.ToString(_obj) == "" && (tabManager.TabPages.Contains(tbpg_ClaimManager)))
                    { tabManager.TabPages.RemoveAt(3); }
                }                
                _oSettings.Dispose();
                _oSettings = null;

                #endregion
            }
          //  ShowWCFormsToolsrtipButton();
        }

        private void ShowWCFormsToolsrtipButton()
        {
            gloSettings.GeneralSettings _oSettings = null;
            object _obj = null;

            try
            {
                _oSettings = new GeneralSettings(_databaseconnectionstring);
                _oSettings.GetSetting("EnableWorkersCompForms", 0, 1, out _obj);
                {
                    bool _ShowWCbutton = false;
                    if (_obj != null && Convert.ToString(_obj).Trim().Length > 0)
                    {
                        _ShowWCbutton = Convert.ToBoolean(_obj);
                    }
                    this.tsb_WorkerComp.Enabled = _ShowWCbutton;
                    this.tsb_WorkerComp.Visible = _ShowWCbutton;
                }
                _oSettings = null;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Error while showing toolstrip button for Workers Comp Forms :" + ex.ToString(), true);
                ex = null;
            }
            finally
            {
                _oSettings = null;
                _obj = null;
            }
        }

        private void frmBillingBatch_FormClosing(object sender, FormClosingEventArgs e)
        {
            gloSettings.DatabaseSetting.DataBaseSetting oSettings = new gloSettings.DatabaseSetting.DataBaseSetting(); 
            try
            {
                oSettings.WriteSettings_XML("Bacth", chkQueueClaimCount.Name.ToString(), chkQueueClaimCount.Checked.ToString());
                oSettings.WriteSettings_XML("Bacth", numQueueClaimCount.Name.ToString(), numQueueClaimCount.Value.ToString());

                oSettings.WriteSettings_XML("Bacth", chkBatchClaimCount.Name.ToString(), chkBatchClaimCount.Checked.ToString());
                oSettings.WriteSettings_XML("Bacth", numBatchClaimCount.Name.ToString(), numBatchClaimCount.Value.ToString());

                oSettings.WriteSettings_XML("Bacth", chkVoidClaimCount.Name.ToString(), chkVoidClaimCount.Checked.ToString());
                oSettings.WriteSettings_XML("Bacth", numVoidClaimCount.Name.ToString(), numVoidClaimCount.Value.ToString());

                oSettings.WriteSettings_XML("Bacth", numHoldClaimCount.Name.ToString(), numHoldClaimCount.Value.ToString());
                object a = thrdQueue;

                if (searchTimer != null)
                {
                    searchTimer.Tick -= new System.EventHandler(this.searchTimer_Tick);
                    searchTimer.Dispose();
                    searchTimer = null;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);

            }
            finally
            {
                if (oSettings != null) { oSettings.Dispose(); }
            }
        }

        private void frmBillingBatch_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
        }

        #endregion " Form Load "

        #region " Public & Private Methods "

        private void ChargesSelection()
        {
            C1.Win.C1FlexGrid.CheckEnum oStatus = C1.Win.C1FlexGrid.CheckEnum.None;
            try
            {

                if (tsb_Select.Tag.ToString() == "Select")
                {
                    tsb_Select.Text = "DeSelect All";
                    tsb_Select.Tag = "Deselect";
                    oStatus = C1.Win.C1FlexGrid.CheckEnum.Checked;
                }
                else if (tsb_Select.Tag.ToString() == "Deselect")
                {
                    tsb_Select.Text = "Select All";
                    tsb_Select.Tag = "Select";
                    oStatus = C1.Win.C1FlexGrid.CheckEnum.Unchecked;
                }


                switch (tabManager.SelectedTab.Tag.ToString())
                {
                    case "Queue":
                        {
                            if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                            {
                                for (int i = 1; i < c1QueuedClaims.Rows.Count; i++)
                                {
                                    c1QueuedClaims.SetCellCheck(i, 0, oStatus);
                                    if (oStatus == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                        SelectedCharges.Add(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["TransactionID"].Index));
                                }
                            }
                        }
                        break;
                    case "Batch":
                        {
                            if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
                            {
                                for (int i = 1; i < c1BatchGrid.Rows.Count; i++)
                                {
                                    c1BatchGrid.SetCellCheck(i, 0, oStatus);
                                }
                            }
                        }
                        break;
                    case "SentBatch":
                        {
                            if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 0)
                            {
                                for (int i = 1; i < c1BatchGridSentBatch.Rows.Count; i++)
                                {
                                    c1BatchGridSentBatch.SetCellCheck(i, 0, oStatus);
                                }
                            }
                        }
                        break;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                //this.c1BillingTransactions.CellChanged += new C1.Win.C1FlexGrid.RowColEventHandler(this.c1BillingTransactions_CellChanged);
            }
        }

        private void OpenModify()
        {
            gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
            _isLoadedFromModifyCharges = false;
            gloUserRights.ClsgloUserRights ObjUserRights = new gloUserRights.ClsgloUserRights(_databaseconnectionstring);

            try
            {
                ObjUserRights.CheckForUserRights(_UserName);

                if (ObjUserRights.Charges == true)
                {
                    switch (Convert.ToString(tabManager.SelectedTab.Tag))
                    {
                        case "Queue":
                            {
                                #region " Modify Charges Claim Code "

                                if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 1)
                                {
                                    if (c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Status"].Index) != null
                                        && Convert.ToString(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Status"].Index)) != ""
                                        && Convert.ToString(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Status"].Index)) != TransactionStatus.Queue.ToString()
                                        )
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;

                                        _transactionId = Convert.ToInt64(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index));
                                        _patientId = Convert.ToInt64(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["PatientID"].Index));

                                        if (_transactionId > 0 && _patientId > 0)
                                        {
                                            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                            ogloBilling.ShowModifyCharges(_patientId, _transactionId, this);
                                            if (IsClaimOnHold(_transactionId))
                                                SelectedCharges.Remove(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index));

                                            // Check Claims ANSI Version Admin Settings
                                            if (cmbBillingMethod.SelectedIndex != 0)
                                            {
                                                if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                                                {
                                                    MessageBox.Show("Claims ANSI Version has not been set.  Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                                                }
                                                if (ogloSettings != null) { ogloSettings.Dispose(); }
                                            }
                                            _isLoadedFromModifyCharges = true;
                                            SetView();
                                            if (ogloBilling != null)
                                            {
                                                ogloBilling.Dispose();
                                                ogloBilling = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Cannot modify " + Convert.ToString(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Status"].Index)) + " claim", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }

                                #endregion
                            }
                            break;
                        case "Batch":
                            {
                                #region " Modify Batch Claim Code "

                                if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 1)
                                {
                                    if (c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index) != null
                                        && Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) != ""
                                        && (Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()
                                        || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString())
                                        || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()
                                        || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()
                                        || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Resent.ToString())
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        // bool _isTransactionOpen = false;
                                        //  string _recordMachineId = "";
                                        //  Int64 _recordUserId = 0;


                                        _transactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["PatientID"].Index));

                                        if (_transactionId > 0 && _patientId > 0)
                                        {
                                            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                            // Commented 5074 (Transaction lock)
                                            //  _isTransactionOpen = ogloBilling.IsRecordOpen(_transactionId, out _recordMachineId, out _recordUserId);
                                            //ogloBilling.Dispose();

                                            //if (_isTransactionOpen == false)
                                            //{
                                            ogloBilling.ShowModifyCharges(_patientId, _transactionId, this);
                                            _isLoadedFromModifyCharges = true;
                                            SetView();
                                            //ogloBilling.Dispose();
                                            //  }
                                            //  else
                                            //  {
                                            //DialogResult _dlgRst = DialogResult.None;
                                            //_dlgRst = MessageBox.Show("Transaction is already opened for modify on machine " + _recordMachineId + " \n Would you like to open this in View mode.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                                            //if (_dlgRst == DialogResult.OK)
                                            //{
                                            //    ogloBilling.ShowModifyCharges(_patientId, _transactionId);
                                            //    ogloBilling.Dispose();
                                            //    SetView();
                                            //}
                                            //  }
                                            if (ogloBilling != null)
                                            {
                                                ogloBilling.Dispose();
                                                ogloBilling = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Cannot modify " + Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) + " claim", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }

                                #endregion
                            }
                            break;
                        case "SentBatch":
                            {
                                #region " Modify Batch Claim Code "

                                if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 1)
                                {
                                    if (c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index) != null
                                        && Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) != ""
                                        && (Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()
                                        || Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString())
                                        || Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()
                                        || Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()
                                        || Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Resent.ToString())
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["PatientID"].Index));

                                        if (_transactionId > 0 && _patientId > 0)
                                        {
                                            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                            ogloBilling.ShowModifyCharges(_patientId, _transactionId, this);
                                            _isLoadedFromModifyCharges = true;
                                            SetView();
                                            if (ogloBilling != null)
                                            {
                                                ogloBilling.Dispose();
                                                ogloBilling = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Cannot modify " + Convert.ToString(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["Status"].Index)) + " claim", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }

                                #endregion
                            }
                            break;
                        case "Void":
                            {
                                #region " Modify Batch Claim Code "

                                if (c1VoidClaims != null && c1VoidClaims.Rows.Count > 1)
                                {
                                    //if (c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index) != null
                                    //    && Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) != ""
                                    //    && (Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()
                                    //    || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString())
                                    //    || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()
                                    //    || Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Deleted.ToString())
                                    //{
                                    Int64 _transactionId = 0;
                                    Int64 _patientId = 0;
                                    //  bool _isTransactionOpen = false;
                                    //  string _recordMachineId = "";
                                    // Int64 _recordUserId = 0;


                                    _transactionId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["TransactionID"].Index));
                                    _patientId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["PatientID"].Index));

                                    if (_transactionId > 0 && _patientId > 0)
                                    {
                                        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                        /// _isTransactionOpen = ogloBilling.IsRecordOpen(_transactionId, out _recordMachineId, out _recordUserId);
                                        //ogloBilling.Dispose();

                                        //   if (_isTransactionOpen == false)
                                        //  {
                                        ogloBilling.ShowModifyCharges(_patientId, _transactionId, true, this);
                                        _isLoadedFromModifyCharges = true;
                                        SetView();
                                        //ogloBilling.Dispose();
                                        //}
                                        //else
                                        //{
                                        //    DialogResult _dlgRst = DialogResult.None;
                                        //    _dlgRst = MessageBox.Show("Transaction is already opened for modify on machine " + _recordMachineId + " \n Would you like to open this in View mode.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                                        //    if (_dlgRst == DialogResult.OK)
                                        //    {
                                        //        ogloBilling.ShowModifyCharges(_patientId, _transactionId, true);
                                        //        ogloBilling.Dispose();
                                        //        SetView();
                                        //    }
                                        //}
                                        if (ogloBilling != null)
                                        {
                                            ogloBilling.Dispose();
                                            ogloBilling = null;
                                        }
                                    }
                                    //}
                                    else
                                    {
                                        MessageBox.Show("Cannot modify " + Convert.ToString(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["Status"].Index)) + " claim", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }

                                #endregion
                            }
                            break;
                        case "OnHold":
                            {
                                #region " Modify Hold Claim Code "
                                try
                                {

                                    if (rbBillingHold.Checked == true)
                                    {
                                        if (c1BillingHold != null && c1BillingHold.Rows.Count > 1)
                                        {
                                            if (c1BillingHold.GetData(c1BillingHold.RowSel, c1BillingHold.Cols["nTransactionID"].Index) != null
                                                && Convert.ToString(c1BillingHold.GetData(c1BillingHold.RowSel, c1BillingHold.Cols["nTransactionID"].Index)) != ""
                                                && c1BillingHold.GetData(c1BillingHold.RowSel, c1BillingHold.Cols["nPatientID"].Index) != null
                                                && Convert.ToString(c1BillingHold.GetData(c1BillingHold.RowSel, c1BillingHold.Cols["nPatientID"].Index)) != ""
                                                )
                                            {
                                                Int64 _transactionId = 0;
                                                Int64 _patientId = 0;
                                                // bool _isTransactionOpen = false;
                                                // string _recordMachineId = "";
                                                // Int64 _recordUserId = 0;


                                                _transactionId = Convert.ToInt64(c1BillingHold.GetData(c1BillingHold.RowSel, c1BillingHold.Cols["nTransactionID"].Index));
                                                _patientId = Convert.ToInt64(c1BillingHold.GetData(c1BillingHold.RowSel, c1BillingHold.Cols["nPatientID"].Index));

                                                if (_transactionId > 0 && _patientId > 0)
                                                {
                                                    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                                    // _isTransactionOpen = ogloBilling.IsRecordOpen(_transactionId, out _recordMachineId, out _recordUserId);

                                                    //if (_isTransactionOpen == false)
                                                    //{
                                                    SelectedCharges.Clear();
                                                    SelectedCharges.Add(_transactionId);
                                                    ogloBilling.ShowModifyCharges(_patientId, _transactionId, this);
                                                    //20110124
                                                    if (!IsClaimOnHold(_transactionId))
                                                        SelectedCharges.Remove(Convert.ToDecimal(_transactionId));
                                                    _isLoadedFromModifyCharges = true;
                                                    SetView();
                                                    //}
                                                    //else
                                                    //{
                                                    //    DialogResult _dlgRst = DialogResult.None;
                                                    //    _dlgRst = MessageBox.Show("Transaction is already opened for modify on machine " + _recordMachineId + " \n Would you like to open this in View mode.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                                                    //    if (_dlgRst == DialogResult.OK)
                                                    //    {
                                                    //        ogloBilling.ShowModifyCharges(_patientId, _transactionId);
                                                    //        SetView();
                                                    //    }
                                                    //}
                                                    if (ogloBilling != null)
                                                    {
                                                        ogloBilling.Dispose();
                                                        ogloBilling = null;
                                                    }
                                                }
                                            }

                                        }
                                    }
                                    else if (rbPlanHold.Checked == true)
                                    {
                                        if (C1PlanHoldclaim != null && C1PlanHoldclaim.Rows.Count > 1)
                                        {
                                            if (C1PlanHoldclaim.GetData(C1PlanHoldclaim.RowSel, C1PlanHoldclaim.Cols["nTransactionID"].Index) != null
                                                && Convert.ToString(C1PlanHoldclaim.GetData(C1PlanHoldclaim.RowSel, C1PlanHoldclaim.Cols["nTransactionID"].Index)) != ""
                                                && C1PlanHoldclaim.GetData(C1PlanHoldclaim.RowSel, C1PlanHoldclaim.Cols["nPatientID"].Index) != null
                                                && Convert.ToString(C1PlanHoldclaim.GetData(C1PlanHoldclaim.RowSel, C1PlanHoldclaim.Cols["nPatientID"].Index)) != ""
                                                )
                                            {
                                                Int64 _transactionId = 0;
                                                Int64 _patientId = 0;
                                                //  bool _isTransactionOpen = false;
                                                //  string _recordMachineId = "";
                                                //  Int64 _recordUserId = 0;
                                                Int64 _ContactID = 0;

                                                if (c1PlanHold.GetData(c1PlanHold.RowSel, c1PlanHold.Cols["nContactID"].Index) != null)
                                                {
                                                    _ContactID = Convert.ToInt64(c1PlanHold.GetData(c1PlanHold.RowSel, c1PlanHold.Cols["nContactID"].Index));
                                                }

                                                _transactionId = Convert.ToInt64(C1PlanHoldclaim.GetData(C1PlanHoldclaim.RowSel, C1PlanHoldclaim.Cols["nTransactionID"].Index));
                                                _patientId = Convert.ToInt64(C1PlanHoldclaim.GetData(C1PlanHoldclaim.RowSel, C1PlanHoldclaim.Cols["nPatientID"].Index));

                                                if (_transactionId > 0 && _patientId > 0)
                                                {
                                                    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                                    // _isTransactionOpen = ogloBilling.IsRecordOpen(_transactionId, out _recordMachineId, out _recordUserId);

                                                    //if (_isTransactionOpen == false)
                                                    //{
                                                    SelectedCharges.Clear();
                                                    SelectedCharges.Add(_transactionId);

                                                    ogloBilling.ShowModifyCharges(_patientId, _transactionId, this);
                                                    SetView();
                                                    c1PlanHold.Row = c1PlanHold.FindRow(Convert.ToDecimal(_ContactID), 1, c1PlanHold.Cols["nContactID"].Index, true);
                                                    //c1PlanHold.RowSel = c1PlanHold.FindRow(_ContactID, 0, 7, true );
                                                    if (c1PlanHold.Row == -1)
                                                    {
                                                        if (c1PlanHold.Rows.Count > 1)
                                                        {
                                                            c1PlanHold.Select(1, 0);
                                                            if (C1PlanHoldclaim.Rows.Count > 1)
                                                            {
                                                                C1PlanHoldclaim.Select(1, C1PlanHoldclaim.Cols["Claim No"].Index);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        C1PlanHoldclaim.Row = C1PlanHoldclaim.FindRow(Convert.ToDecimal(_transactionId), 1, C1PlanHoldclaim.Cols["nTransactionID"].Index, true);
                                                        if (C1PlanHoldclaim.Row == -1 && C1PlanHoldclaim.Rows.Count > 1)
                                                        {
                                                            C1PlanHoldclaim.Select(1, C1PlanHoldclaim.Cols["Claim No"].Index);
                                                        }

                                                    }
                                                    // }
                                                    //else
                                                    //{
                                                    //    DialogResult _dlgRst = DialogResult.None;
                                                    //    _dlgRst = MessageBox.Show("Transaction is already opened for modify on machine " + _recordMachineId + " \n Would you like to open this in View mode.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Information);
                                                    //    if (_dlgRst == DialogResult.OK)
                                                    //    {
                                                    //        ogloBilling.ShowModifyCharges(_patientId, _transactionId);
                                                    //        SetView();
                                                    //        c1PlanHold.Row = c1PlanHold.FindRow(Convert.ToDecimal(_ContactID), 1, c1PlanHold.Cols["nContactID"].Index, true);
                                                    //        C1PlanHoldclaim.Row = C1PlanHoldclaim.FindRow(Convert.ToDecimal(_transactionId), 1, C1PlanHoldclaim.Cols["nTransactionID"].Index, true);

                                                    //    }
                                                    //}
                                                    if (ogloBilling != null)
                                                    {
                                                        ogloBilling.Dispose();
                                                        ogloBilling = null;
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                                catch (Exception ex)
                                {
                                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                                }

                                #endregion

                            }
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ogloSettings != null) { ogloSettings.Dispose(); }
                try
                {
                    if (ObjUserRights != null)
                    {
                        ObjUserRights.Dispose();
                        ObjUserRights = null;
                    }
                }
                catch
                {
                }
            }
        }

        private void OpenHCFA1500Modify()
        {
            ArrayList _CurTrnIDs = new ArrayList();
            ArrayList _MasTrnIDs = new ArrayList();
            _BillingTypeId = 1;
            int iCount = 0;
            string _ClaimNos = string.Empty;
            bool _WrongICD = false;
            try
            {

                switch (Convert.ToString(tabManager.SelectedTab.Tag))
                {
                    case "Queue":
                        {
                            if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                            {
                                #region " Get selected transaction id's "

                                for (int rowIndex = 1; rowIndex < c1QueuedClaims.Rows.Count; rowIndex++)
                                {
                                    if (c1QueuedClaims.GetCellCheck(rowIndex, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                    {
                                        if (c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index) != null
                                            && Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index)) == TransactionStatus.Transacted.ToString()))
                                        {
                                            Int64 _transactionId = 0;
                                            Int64 _MastertrnId = 0;//MaheshB 02152010
                                            Int64 _patientId = 0;

                                            _transactionId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionID"].Index));
                                            _MastertrnId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                                            _patientId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["PatientID"].Index));
                                            if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                            if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }
                                            if (UB04Setting == true)
                                            {
                                                // if (Convert.ToInt16(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["BillingTypeId"].Index)) != Convert.ToInt16(BillingType.Professional))
                                                if (GetBillingType(_transactionId, _MastertrnId) != Convert.ToInt16(BillingType.Professional))
                                                {
                                                    MessageBox.Show("Select professional claim(s). ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return;
                                                }
                                            }

                                            if (Convert.ToInt16(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["nICDRevision"].Index)) == gloGlobal.gloICD.CodeRevision.ICD10.GetHashCode())
                                            {
                                                if (_ClaimNos == "")
                                                {
                                                    _ClaimNos = Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Claim"].Index));
                                                }
                                                else if (_ClaimNos != "")
                                                {
                                                    _ClaimNos = _ClaimNos + "," + Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Claim"].Index));
                                                }


                                                if (_WrongICD == false)
                                                {
                                                    _WrongICD = true;
                                                }
                                            }


                                        }

                                    }
                                }

                                if (_WrongICD == true)
                                {
                                    _WrongICD = false;
                                    if (MessageBox.Show("Claim#(s) " + _ClaimNos + " contains ICD-10 codes, billing ICD-10 on CMS1500 08/05 may cause billing rejection.\n\n Continue?", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
                                    {
                                        return;
                                    }
                                    _ClaimNos = string.Empty;
                                }
                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    frmHCFA1500 ofrmHCFA1500 = new frmHCFA1500(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs, _BusinessCenterCode);
                                    ofrmHCFA1500.objFrmBillingBatch_New = this;
                                    ofrmHCFA1500.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmHCFA1500.bIsModify = true;
                                    ofrmHCFA1500.ShowDialog(this);

                                    #region " New Code Added "

                                    gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                                    try
                                    {
                                        // Check Claims ANSI Version Admin Settings
                                        if (cmbBillingMethod.SelectedIndex != 0)
                                        {
                                            if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                                            {
                                                MessageBox.Show("Claims ANSI Version has not been set. Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                //return;
                                                cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                                            }
                                            if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                                        }
                                        //----------x---
                                    }
                                    catch (Exception ex)
                                    {
                                        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                                    }
                                    finally
                                    {
                                        if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                                    }

                                    SetView();
                                    c1QueuedClaims.Row = c1QueuedClaims.FindRow(Convert.ToDecimal(ofrmHCFA1500.LastAccessedTransaction), 0, c1QueuedClaims.Cols["TransactionID"].Index, true);

                                    if (c1QueuedClaims.Row < 0)
                                    {
                                        for (iCount = 1; iCount <= c1QueuedClaims.Rows.Count - 1; iCount++)
                                        {
                                            if (c1QueuedClaims.GetCellCheck(iCount, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Checked)
                                            {

                                                c1QueuedClaims.Select(iCount, c1QueuedClaims.Cols["Select"].Index);
                                                break;
                                            }
                                        }
                                    }
                                    #endregion

                                    if (iCount == c1QueuedClaims.Rows.Count && c1QueuedClaims.Row > 0)
                                    {
                                        c1QueuedClaims.Select(1, c1QueuedClaims.Cols["Select"].Index);
                                    }

                                    ofrmHCFA1500.Dispose();
                                    SelectedCharges.Clear();
                                }
                                else
                                {
                                    MessageBox.Show("Select transaction. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                        }
                        break;

                    //Added By Pramod Nair for Showing the 1500 in Edit Mode
                    case "Batch":
                        {
                            if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 1)
                            {
                                #region " Get selected transaction id's "



                                for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
                                {

                                    if (c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Resent.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        Int64 _MastertrnId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (_CurTrnIDs.Count == 1)
                                            {
                                                //_BillingTypeId = Convert.ToInt16(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["BillingTypeId"].Index));
                                                _BillingTypeId = GetBillingType(_transactionId, _MastertrnId);
                                            }

                                            else if (_BillingTypeId != GetBillingType(_transactionId, _MastertrnId))
                                            {
                                                MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                        }

                                        if (Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nICDRevision"].Index)) == (int)gloGlobal.gloICD.CodeRevision.ICD10)
                                        {
                                            if (_ClaimNos == "")
                                            {
                                                _ClaimNos = Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Claim"].Index));
                                            }
                                            else if (_ClaimNos != "")
                                            {
                                                _ClaimNos = _ClaimNos + "," + Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Claim"].Index));
                                            }


                                            if (_WrongICD == false)
                                            {
                                                _WrongICD = true;
                                            }
                                        }
                                    }

                                }
                                if (UB04Setting == true)
                                {
                                    if (_BillingTypeId == 2)
                                    {
                                        MessageBox.Show("Select professional claim(s) batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }

                                if (_WrongICD == true)
                                {
                                    _WrongICD = false;
                                    if (MessageBox.Show("Claim#(s) " + _ClaimNos + " contains ICD-10 codes, billing ICD-10 on CMS1500 08/05 may cause billing rejection.\n\n Continue?", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
                                    {
                                        return;
                                    }
                                    _ClaimNos = string.Empty;
                                }


                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    Int64 SelectedRow = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                    int indexofSelectedRow = 0;
                                    if (_CurTrnIDs.Contains(SelectedRow))
                                        indexofSelectedRow = _CurTrnIDs.IndexOf(SelectedRow);

                                    frmHCFA1500 ofrmHCFA1500 = new frmHCFA1500(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmHCFA1500.objFrmBillingBatch_New = this;
                                    ofrmHCFA1500._TransactionIdCounter = indexofSelectedRow;
                                    ofrmHCFA1500.TransactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                    ofrmHCFA1500.MstTransactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionMasterID"].Index));

                                    ofrmHCFA1500.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmHCFA1500.ShowDialog(this);

                                    SetView();
                                    if (c1BatchGrid.Rows != null && c1BatchGrid.Rows.Count > 0 && c1BatchGrid.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGrid.Row = c1BatchGrid.FindRow(Convert.ToDecimal(ofrmHCFA1500.LastAccessedTransaction), 0, c1BatchGrid.Cols["TransactionID"].Index, true);
                                    }

                                    if (c1BatchGrid.Row < 0 && c1BatchGrid.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGrid.Select(1, c1BatchGrid.Cols["TransactionID"].Index);
                                        ofrmHCFA1500.Dispose();
                                        break;
                                    }

                                    ofrmHCFA1500.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select claims having status Batch or SendToClaimManager. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                            else
                            {
                                MessageBox.Show("Select claim to view.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;
                    case "SentBatch":
                        {
                            if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 1)
                            {
                                #region " Get selected transaction id's "



                                for (int rowIndex = 1; rowIndex < c1BatchGridSentBatch.Rows.Count; rowIndex++)
                                {

                                    if (c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Resent.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        Int64 _MastertrnId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (_CurTrnIDs.Count == 1)
                                            {
                                                //_BillingTypeId = Convert.ToInt16(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["BillingTypeId"].Index));
                                                _BillingTypeId = GetBillingType(_transactionId, _MastertrnId);
                                            }

                                            else if (_BillingTypeId != GetBillingType(_transactionId, _MastertrnId))
                                            {
                                                MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                        }

                                        // == (int)gloGlobal.gloICD.CodeRevision.ICD10
                                        //if (Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["nICDRevision"].Index)) != CheckICDVersion(Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["ContactID"].Index)), gloDateMaster.gloDate.DateAsNumber(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["dateofservice"].Index).ToString()), 1))
                                        if (Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["nICDRevision"].Index)) == (int)gloGlobal.gloICD.CodeRevision.ICD10)
                                        {
                                            if (_ClaimNos == "")
                                            {
                                                _ClaimNos = Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Claim"].Index));
                                            }
                                            else if (_ClaimNos != "")
                                            {
                                                _ClaimNos = _ClaimNos + "," + Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Claim"].Index));
                                            }


                                            if (_WrongICD == false)
                                            {
                                                _WrongICD = true;
                                            }
                                        }
                                    }

                                }
                                if (UB04Setting == true)
                                {
                                    if (_BillingTypeId == 2)
                                    {
                                        MessageBox.Show("Select professional claim(s) batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }


                                if (_WrongICD == true)
                                {
                                    _WrongICD = false;
                                    if (MessageBox.Show("Claim#(s) " + _ClaimNos + " contains ICD-10 codes, billing ICD-10 on CMS1500 08/05 may cause billing rejection.\n\n Continue?", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
                                    {
                                        return;
                                    }
                                    _ClaimNos = string.Empty;
                                }
                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    Int64 SelectedRow = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                    int indexofSelectedRow = 0;
                                    if (_CurTrnIDs.Contains(SelectedRow))
                                        indexofSelectedRow = _CurTrnIDs.IndexOf(SelectedRow);

                                    frmHCFA1500 ofrmHCFA1500 = new frmHCFA1500(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmHCFA1500.objFrmBillingBatch_New = this;
                                    ofrmHCFA1500._TransactionIdCounter = indexofSelectedRow;
                                    ofrmHCFA1500.TransactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                    ofrmHCFA1500.MstTransactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index));

                                    ofrmHCFA1500.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmHCFA1500.ShowDialog(this);

                                    SetView();
                                    if (c1BatchGridSentBatch.Rows != null && c1BatchGridSentBatch.Rows.Count > 0 && c1BatchGridSentBatch.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGridSentBatch.Row = c1BatchGridSentBatch.FindRow(Convert.ToDecimal(ofrmHCFA1500.LastAccessedTransaction), 0, c1BatchGridSentBatch.Cols["TransactionID"].Index, true);
                                    }

                                    if (c1BatchGridSentBatch.Row < 0 && c1BatchGridSentBatch.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGridSentBatch.Select(1, c1BatchGridSentBatch.Cols["TransactionID"].Index);
                                        ofrmHCFA1500.Dispose();
                                        break;
                                    }

                                    ofrmHCFA1500.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select claims having status Batch or SendToClaimManager. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                            else
                            {
                                MessageBox.Show("Select claim to view.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;
                    case "Void":
                        {
                            if (c1VoidClaims != null && c1VoidClaims.Rows.Count > 0)
                            {
                                #region " Get selected transaction id's "

                                Int64 _transactionId = 0;
                                Int64 _patientId = 0;
                                Int64 _MastertrnId = 0;

                                _transactionId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nTransactionID"].Index));
                                _MastertrnId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nTransactionMasterID"].Index));
                                //_patientId = Convert.ToInt64(c1VoidClaims.GetData(c1BatchGrid.RowSel, c1VoidClaims.Cols["nPatientID"].Index));
                                _patientId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nPatientID"].Index));
                                if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    frmHCFA1500 ofrmHCFA1500 = new frmHCFA1500(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmHCFA1500.ShowDialog(this);
                                    ofrmHCFA1500.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select transaction ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                        }
                        break;
                }
                //}
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
        }

        private void OpenHCFA1500ModifyNew()
        {
            ArrayList _CurTrnIDs = new ArrayList();
            ArrayList _MasTrnIDs = new ArrayList();
            _BillingTypeId = 1;
            int iCount = 0;
            try
            {

                switch (Convert.ToString(tabManager.SelectedTab.Tag))
                {
                    case "Queue":
                        {
                            if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                            {
                                #region " Get selected transaction id's "

                                for (int rowIndex = 1; rowIndex < c1QueuedClaims.Rows.Count; rowIndex++)
                                {
                                    if (c1QueuedClaims.GetCellCheck(rowIndex, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                    {
                                        if (c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index) != null
                                            && Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index)) == TransactionStatus.Transacted.ToString()))
                                        {
                                            Int64 _transactionId = 0;
                                            Int64 _MastertrnId = 0;//MaheshB 02152010
                                            Int64 _patientId = 0;

                                            _transactionId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionID"].Index));
                                            _MastertrnId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                                            _patientId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["PatientID"].Index));
                                            if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                            if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }
                                            if (UB04Setting == true)
                                            {
                                                // if (Convert.ToInt16(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["BillingTypeId"].Index)) != Convert.ToInt16(BillingType.Professional))
                                                if (GetBillingType(_transactionId, _MastertrnId) != Convert.ToInt16(BillingType.Professional))
                                                {
                                                    MessageBox.Show("Select professional claim(s). ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return;
                                                }
                                            }
                                        }

                                    }
                                }


                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    frmHCFA1500New ofrmHCFA1500 = new frmHCFA1500New(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs, _BusinessCenterCode);
                                    ofrmHCFA1500.objFrmBillingBatch_New = this;
                                    ofrmHCFA1500.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmHCFA1500.bIsModify = true;
                                    ofrmHCFA1500.ShowDialog(this);

                                    #region " New Code Added "

                                    gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                                    try
                                    {
                                        // Check Claims ANSI Version Admin Settings
                                        if (cmbBillingMethod.SelectedIndex != 0)
                                        {
                                            if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                                            {
                                                MessageBox.Show("Claims ANSI Version has not been set. Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                //return;
                                                cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                                            }
                                            if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                                        }
                                        //----------x---
                                    }
                                    catch (Exception ex)
                                    {
                                        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                                    }
                                    finally
                                    {
                                        if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null;  }
                                    }

                                    SetView();
                                    c1QueuedClaims.Row = c1QueuedClaims.FindRow(Convert.ToDecimal(ofrmHCFA1500.LastAccessedTransaction), 0, c1QueuedClaims.Cols["TransactionID"].Index, true);

                                    if (c1QueuedClaims.Row < 0)
                                    {
                                        for (iCount = 1; iCount <= c1QueuedClaims.Rows.Count - 1; iCount++)
                                        {
                                            if (c1QueuedClaims.GetCellCheck(iCount, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Checked)
                                            {

                                                c1QueuedClaims.Select(iCount, c1QueuedClaims.Cols["Select"].Index);
                                                break;
                                            }
                                        }
                                    }
                                    #endregion

                                    if (iCount == c1QueuedClaims.Rows.Count && c1QueuedClaims.Row > 0)
                                    {
                                        c1QueuedClaims.Select(1, c1QueuedClaims.Cols["Select"].Index);
                                    }

                                    ofrmHCFA1500.Dispose();
                                    SelectedCharges.Clear();
                                }
                                else
                                {
                                    MessageBox.Show("Select transaction. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                        }
                        break;

                    //Added By Pramod Nair for Showing the 1500 in Edit Mode
                    case "Batch":
                        {
                            if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 1)
                            {
                                #region " Get selected transaction id's "



                                for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
                                {

                                    if (c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Resent.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        Int64 _MastertrnId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (_CurTrnIDs.Count == 1)
                                            {
                                                //_BillingTypeId = Convert.ToInt16(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["BillingTypeId"].Index));
                                                _BillingTypeId = GetBillingType(_transactionId, _MastertrnId);
                                            }

                                            else if (_BillingTypeId != GetBillingType(_transactionId, _MastertrnId))
                                            {
                                                MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                        }
                                    }

                                }
                                if (UB04Setting == true)
                                {
                                    if (_BillingTypeId == 2)
                                    {
                                        MessageBox.Show("Select professional claim(s) batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }
                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    Int64 SelectedRow = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                    int indexofSelectedRow = 0;
                                    if (_CurTrnIDs.Contains(SelectedRow))
                                        indexofSelectedRow = _CurTrnIDs.IndexOf(SelectedRow);

                                    frmHCFA1500New ofrmHCFA1500 = new frmHCFA1500New(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmHCFA1500.objFrmBillingBatch_New = this;
                                    ofrmHCFA1500._TransactionIdCounter = indexofSelectedRow;
                                    ofrmHCFA1500.TransactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                    ofrmHCFA1500.MstTransactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionMasterID"].Index));

                                    ofrmHCFA1500.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmHCFA1500.ShowDialog(this);

                                    SetView();
                                    if (c1BatchGrid.Rows != null && c1BatchGrid.Rows.Count > 0 && c1BatchGrid.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGrid.Row = c1BatchGrid.FindRow(Convert.ToDecimal(ofrmHCFA1500.LastAccessedTransaction), 0, c1BatchGrid.Cols["TransactionID"].Index, true);
                                    }

                                    if (c1BatchGrid.Row < 0 && c1BatchGrid.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGrid.Select(1, c1BatchGrid.Cols["TransactionID"].Index);
                                        ofrmHCFA1500.Dispose();
                                        break;
                                    }

                                    ofrmHCFA1500.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select claims having status Batch or SendToClaimManager. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                            else
                            {
                                MessageBox.Show("Select claim to view.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;
                    //Added By Pramod Nair for Showing the 1500 in Edit Mode
                    case "SentBatch":
                        {
                            if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 1)
                            {
                                #region " Get selected transaction id's "



                                for (int rowIndex = 1; rowIndex < c1BatchGridSentBatch.Rows.Count; rowIndex++)
                                {

                                    if (c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Resent.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        Int64 _MastertrnId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (_CurTrnIDs.Count == 1)
                                            {
                                                //_BillingTypeId = Convert.ToInt16(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["BillingTypeId"].Index));
                                                _BillingTypeId = GetBillingType(_transactionId, _MastertrnId);
                                            }

                                            else if (_BillingTypeId != GetBillingType(_transactionId, _MastertrnId))
                                            {
                                                MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                        }
                                    }

                                }
                                if (UB04Setting == true)
                                {
                                    if (_BillingTypeId == 2)
                                    {
                                        MessageBox.Show("Select professional claim(s) batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }
                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    Int64 SelectedRow = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                    int indexofSelectedRow = 0;
                                    if (_CurTrnIDs.Contains(SelectedRow))
                                        indexofSelectedRow = _CurTrnIDs.IndexOf(SelectedRow);

                                    frmHCFA1500New ofrmHCFA1500 = new frmHCFA1500New(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmHCFA1500.objFrmBillingBatch_New = this;
                                    ofrmHCFA1500._TransactionIdCounter = indexofSelectedRow;
                                    ofrmHCFA1500.TransactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                    ofrmHCFA1500.MstTransactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index));

                                    ofrmHCFA1500.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmHCFA1500.ShowDialog(this);

                                    SetView();
                                    if (c1BatchGridSentBatch.Rows != null && c1BatchGridSentBatch.Rows.Count > 0 && c1BatchGridSentBatch.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGridSentBatch.Row = c1BatchGridSentBatch.FindRow(Convert.ToDecimal(ofrmHCFA1500.LastAccessedTransaction), 0, c1BatchGridSentBatch.Cols["TransactionID"].Index, true);
                                    }

                                    if (c1BatchGridSentBatch.Row < 0 && c1BatchGridSentBatch.Cols["TransactionID"] != null)
                                    {
                                        c1BatchGridSentBatch.Select(1, c1BatchGridSentBatch.Cols["TransactionID"].Index);
                                        ofrmHCFA1500.Dispose();
                                        break;
                                    }

                                    ofrmHCFA1500.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select claims having status Batch or SendToClaimManager. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                            else
                            {
                                MessageBox.Show("Select claim to view.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;
                    case "Void":
                        {
                            if (c1VoidClaims != null && c1VoidClaims.Rows.Count > 0)
                            {
                                #region " Get selected transaction id's "

                                Int64 _transactionId = 0;
                                Int64 _patientId = 0;
                                Int64 _MastertrnId = 0;

                                _transactionId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nTransactionID"].Index));
                                _MastertrnId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nTransactionMasterID"].Index));
                                //_patientId = Convert.ToInt64(c1VoidClaims.GetData(c1BatchGrid.RowSel, c1VoidClaims.Cols["nPatientID"].Index));
                                _patientId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nPatientID"].Index));
                                if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    frmHCFA1500New ofrmHCFA1500 = new frmHCFA1500New(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmHCFA1500.ShowDialog(this);
                                    ofrmHCFA1500.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select transaction ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                        }
                        break;
                }
                //}
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
        }

        public Int16 GetBillingType(Int64 TransactionId, Int64 MstTransactionId)
        {
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
                object BillingType;
                oParameters.Add("@nTransactionId", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionMstId", MstTransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                BillingType = oDB.ExecuteScalar("BL_Get_BillingType", oParameters);
                oDB.Disconnect();
                return Convert.ToInt16(BillingType);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                return 0;
            }


        }

        private string FormattedClaimNumberGeneration(string NumberSize)
        {
            int _length = 0;
            _length = NumberSize.Length;
            if (_length == 1)
            {
                NumberSize = "0000" + NumberSize;
            }
            else if (_length == 2)
            {
                NumberSize = "000" + NumberSize;
            }
            else if (_length == 3)
            {
                NumberSize = "00" + NumberSize;
            }
            else if (_length == 4)
            {
                NumberSize = "0" + NumberSize;
            }
            else if (_length == 5)
            {
                // NumberSize = NumberSize;
            }
            return NumberSize;
        }

        private String GetBatchDate(Int64 nbatchId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            object _result = null;
            String BatchDate = "";
            try
            {
                oDB.Connect(false);
                _strSQL = "  Select dbo.CONVERT_TO_DATE(nbatchDate) from BL_Transaction_Batch WITH(NOLOCK) where nbatchId=" + nbatchId;
                _result = oDB.ExecuteScalar_Query(_strSQL);
                if (_result != null && Convert.ToString(_result) != "")
                {
                    BatchDate = Convert.ToString(_result);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return BatchDate;
        }

        private string GetBatchClearinghouse(Int64 nBatchID)
        {

            gloDatabaseLayer.DBLayer oDB = null;
            string _result = String.Empty;
            Object _Objresult = null;

            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                _Objresult = Convert.ToString(oDB.ExecuteScalar_Query("Select  dbo.BL_Get_BatchClearinghouse (" + nBatchID + ")"));

                if (_Objresult != null)
                {
                    _result = Convert.ToString(_Objresult);
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); } if (_Objresult != null) { _Objresult = null; }
            }
            return _result;
        }

        private bool ValidateEDIDataForAlternateID(ArrayList MstTrans, ArrayList SelectedTrans, bool IsEDIgeneration, Int64 _ContactID)
        {
            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
            bool _res = false;
            if (IsEDIgeneration == true)
            {
                if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == BillingTypeMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == BillingTypeMethod)
                {
                    bool _result = ValidateExpandedClaimLimits(SelectedTrans, Convert.ToInt32(gloSettings.TypeOfBilling.UB04Electronic.GetHashCode()), _ClinicID);
                    return _result;
                }
                _res = ValidateExpandedClaimLimits(SelectedTrans, Convert.ToInt32(gloSettings.TypeOfBilling.Electronic.GetHashCode()), _ClinicID);
            }
            else
            {
                _res = true;
            }

            DataSet dsMaster = null;
            DataSet dsHeader = null;


            string _Message = "";
            TransactionEDI oTransaction = null;
            string strMissingText = "";
            string _MessageHeader = "";
            string _FilePath = gloSettings.FolderSettings.AppTempFolderPath;
            oClaimNoArray = new ArrayList();
            ClsEDIValidation Edisetting = new ClsEDIValidation();
            ClsAlphaValidation AlphaSetting = new ClsAlphaValidation();


            try
            {
                _MessageHeader += "";

                //Get Clearing House Information in Data table
                #region "Header Data - Dataset define in table"

                dsHeader = ogloClaimManager.GetHeader_EDI_4010(_ContactID, _ClinicID, Convert.ToInt64(SelectedTrans[SelectedTrans.Count - 1]), true);
                if (dsHeader == null)
                {
                    return false;
                }
                if (dsHeader.Tables == null)
                {
                    return false;
                }

                DataTable dtClearingHouse = dsHeader.Tables["ClearingHouseData"];
                DataTable dtSubmitter = dsHeader.Tables["SubmitterData"];
                DataTable dtEDISetting = dsHeader.Tables["EDISetting"];
                DataTable dtAlphaSetting = dsHeader.Tables["AlphaSetting"];

                #endregion

                Edisetting.GetEDIValidation(dtEDISetting);

                AlphaSetting.GetAlphaValidation(dtAlphaSetting);

                if (AlphaSetting.ClaimValidationSetting == "None")
                {
                    if (_IsValidateButtonClick == false)
                    {
                        if (AlphaSetting.ShowMessageForValidation == true)
                        {
                            if (MessageBox.Show("You have not selected any validation setting, claims may go with invalid data. Do you want to continue?  ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
                            {
                                return false;
                            }
                        }
                    }
                    else
                    {
                        if (AlphaSetting.ShowMessageForValidation == true)
                        {
                            MessageBox.Show("You have not selected any validation setting, claims may go with invalid data.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }
                }
                else if (AlphaSetting.ClaimValidationSetting == "Alpha2")
                {
                    if (!ValidateConnectionString(AlphaSetting.AlphaAuthentication, AlphaSetting.AlphaServerName, AlphaSetting.AlphaDatabaseName, AlphaSetting.AlphaUserName, AlphaSetting.AlphaPassword))
                    {
                        MessageBox.Show("Connection for Alpha II cannot be establish, please do the setting from gloPM Admin.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                }

                if (dtClearingHouse == null || dtClearingHouse.Rows.Count < 1)
                {
                    MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                {
                    MessageBox.Show("Submitter/Provider information is not present.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }


                #region " Clearing House "
                //ISA and GS Settings


                if (Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim() == "")
                {
                    if (Edisetting.SenderID == true)
                        strMissingText += "Sender ID" + Environment.NewLine + "" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim() == "")
                {
                    if (Edisetting.ReceiverID == true)
                        strMissingText += "Receiver ID" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim() == "")
                {
                    if (Edisetting.SenderCode == true)
                        strMissingText += "Sender Code" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim() == "")
                {
                    if (Edisetting.ReceiverCode == true)
                        strMissingText += "Receiver Code" + Environment.NewLine + "";
                }
                #endregion " Clearing House "

                #region " Submitter "
                //Submitter
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim() == "")
                {
                    if (Edisetting.SubmitterName == true)
                        strMissingText += "Submitter Name" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim() == "")
                {
                    if (Edisetting.SubmitterContactName == true)
                        strMissingText += "Submitter Contact Person Name" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim() == "")
                {
                    if (Edisetting.SubmitterPhone == true)
                        strMissingText += "Submitter Contact Person Number" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterCity"]).Trim() == "")
                {
                    if (Edisetting.SubscriberCity == true)
                        strMissingText += "Submitter City" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterState"]).Trim() == "")
                {
                    if (Edisetting.SubmitterState == true)
                        strMissingText += "Submitter State" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterZIP"]).Trim() == "")
                {
                    if (Edisetting.SubmitterZIP == true)
                        strMissingText += "Submitter Zip" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterAddress1"]).Trim() + " " + Convert.ToString(dtSubmitter.Rows[0]["SubmitterAddress2"]).Trim() == "")
                {
                    if (Edisetting.SubmitterAddress1 == true)
                        strMissingText += "Submitter Address" + Environment.NewLine + "";
                }
                #endregion " Submitter "

                if (strMissingText.Trim() != "")
                {
                    _MessageHeader = _MessageHeader + strMissingText;
                }
                else
                {
                    _MessageHeader = "";
                }


                if (SelectedTrans != null)
                {
                    if (SelectedTrans.Count > 0)
                    {
                        for (int i = 0; i < SelectedTrans.Count; i++)
                        {
                            string strMessage = "";
                           // oTransaction = new TransactionEDI();
                            oTransaction = ogloClaimManager.GetChargesClaimDetails_EDI(Convert.ToInt64(SelectedTrans[i]), _ClinicID);

                            #region "Master EDI data - Dataset data set in data table "

                            dsMaster = null;
                            dsMaster = ogloClaimManager.GetMaster_EDI_4010(oTransaction.ContactID, oTransaction.Lines[0].RenderingProviderId, oTransaction.ProviderID, oTransaction.ResponsibilityNo,
                                oTransaction.TransactionMasterID, Convert.ToInt64(oTransaction.FacilityCode), _ClinicID, oTransaction.IsSameAsBillingProvider,
                                oTransaction.TransactionID, oTransaction.ReferalProviderID_New, false);

                            DataTable dtPatientInsurances = dsMaster.Tables["PatientInsurance"];
                            DataTable dtFacility = dsMaster.Tables["Facility"];
                            DataTable dtBillingProvider = dsMaster.Tables["BillingProvider"];
                            DataTable dtPatientPaid = dsMaster.Tables["PatientPaid"];
                            DataTable dtDx = dsMaster.Tables["Diagnosis"];
                            DataTable dtRefProvider = dsMaster.Tables["RefferingProvider"];
                            DataTable dtRendProvider = dsMaster.Tables["RenderingProvider"];
                            DataTable dtMasterSetting = dsMaster.Tables["MasterSetting"];

                            #endregion

                            string _ClaimMessageHeader = "";

                            bool _IsClaimNumberAdded = false;
                            string strBillingSetting = "";

                            if (oTransaction != null)
                            {
                                if (oTransaction.Lines.Count > 0)
                                {
                                    if (dtFacility == null)
                                    {
                                        MessageBox.Show("Facility information is not present for claim number " + oTransaction.ClaimNumber.ToString().Trim() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return false;
                                    }
                                    if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
                                    {
                                        if (dtBillingProvider == null || dtBillingProvider.Rows.Count == 0)
                                        {
                                            MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                        if (Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"]).Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using Billing Type " + dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + " which has no ID Qualifier Code. \n Batch will not send.  Please review Billing ID Qualifier Setup.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                        if (Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"]).ToString().Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using missing " + dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + ".\n Batch will not send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }

                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "" && dtBillingProvider.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "-1" && dtBillingProvider.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "0" && Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifiervalue"]) == "" && Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"]).Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using " + dtBillingProvider.Rows[0]["Setting"].ToString().Trim() + " which has mismatch in source and other ID type.\nBatch will not send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }

                                        if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                        {
                                            if (_IsClaimNumberAdded == false)
                                            {
                                                // oClaimNoArray.Add(oTransaction.ClaimNo);

                                                if (Edisetting.SubscriberLastName == true)
                                                    strMessage += "Subscriber Last Name" + Environment.NewLine + "";

                                                //if (Edisetting.SubscriberRelationship  == true )
                                                strMessage += "Subscriber Relationship" + Environment.NewLine + "";


                                                if (Edisetting.PlanType == true)
                                                    strMessage += "Plan Type" + Environment.NewLine + "";


                                                if (Edisetting.SubscriberFirstName == true)
                                                    strMessage += "Subscriber First Name" + Environment.NewLine + "";


                                                //     if (GetValidationFieldsSettings("Subscriber Insurance ID"))
                                                strMessage += "Insurance ID" + Environment.NewLine + "";


                                                if (Edisetting.SubscriberAddress == true)
                                                    strMessage += "Subscriber Address" + Environment.NewLine + "";

                                                if (Edisetting.SubscriberGroupID == true)
                                                    strMessage += "Subscriber Group ID" + Environment.NewLine + "";

                                                if (Edisetting.SubscriberCity == true)
                                                    strMessage += "Subscriber City" + Environment.NewLine + "";

                                                if (Edisetting.SubmitterState == true)
                                                    strMessage += "Subscriber State" + Environment.NewLine + "";

                                                if (Edisetting.SubmitterZIP == true)
                                                    strMessage += "Subscriber Zip" + Environment.NewLine + "";

                                                //    if (GetValidationFieldsSettings("Subscriber Date of Birth"))
                                                strMessage += "Subscriber Date of Birth" + Environment.NewLine + "";

                                                //   if (GetValidationFieldsSettings("Subscriber Gender"))
                                                strMessage += "Subscriber Gender" + Environment.NewLine + "";

                                                if (Edisetting.PayerName == true)
                                                    strMessage += "Payer/Insurance Name" + Environment.NewLine + "";

                                                if (Edisetting.PayerId == true)
                                                    strMessage += "Payer ID" + Environment.NewLine + "";

                                                if (Edisetting.PayerAddress == true)
                                                    strMessage += "Payer Address" + Environment.NewLine + "";

                                                if (Edisetting.PayerCity == true)
                                                    strMessage += "Payer City" + Environment.NewLine + "";

                                                if (Edisetting.PayerState == true)
                                                    strMessage += "Payer State" + Environment.NewLine + "";

                                                if (Edisetting.PayerZip == true)
                                                    strMessage += "Payer Zip" + Environment.NewLine + "";

                                                _IsClaimNumberAdded = true;
                                            }

                                        }
                                    }

                                    _ClaimMessageHeader = " " + Environment.NewLine + "For Patient: " + oTransaction.PatientFirstName.Trim() + " " + oTransaction.PatientLastName.Trim() + "  and Claim Number: " + oTransaction.ClaimNumber + " " + Environment.NewLine + "" + Environment.NewLine + "";




                                    string _strMessage1 = "";
                                    if (AlphaSetting.IsCheckInvalidICD9 == true)
                                    {
                                        _strMessage1 = Convert.ToString(dtMasterSetting.Rows[0]["InvalidICD9"]);
                                    }

                                    if (_strMessage1.Trim() != "")
                                    {
                                        _strMessage1 = _strMessage1.Substring(0, _strMessage1.Length - 1);
                                        strMessage += "Invalid ICD9's " + _strMessage1 + Environment.NewLine + "";
                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Transaction Lines are not there in selected transaction(s).  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return false;
                                }
                            }

                            #region " Billing Provider "
                            //Billing Provider
                            if (dtBillingProvider != null || dtBillingProvider.Rows.Count > 0)
                            {
                                string _BillingAddress = "";
                                string _BillingCity = "";
                                string _BillingState = "";
                                string _BillingZIP = "";
                                string _BillingNPI = "";

                                _BillingAddress = dtBillingProvider.Rows[0]["Address1"].ToString().Trim();
                                _BillingCity = dtBillingProvider.Rows[0]["City"].ToString().Trim();
                                _BillingState = dtBillingProvider.Rows[0]["State"].ToString().Trim();
                                _BillingZIP = dtBillingProvider.Rows[0]["Zip"].ToString().Trim();
                                _BillingNPI = dtBillingProvider.Rows[0]["PrimaryQualifierValue"].ToString().Trim();

                                if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Facility"))
                                {
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.FacilityName == true)
                                            strMessage += "Facility Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.FacilityAddress1 == true)
                                            strMessage += "Facility Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        //   if (GetValidationFieldsSettings("Facility City"))
                                        strMessage += "Facility City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        // if (GetValidationFieldsSettings("Facility State"))
                                        strMessage += "Facility State" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        //  if (GetValidationFieldsSettings("Facility Zip"))
                                        strMessage += "Facility Zip" + Environment.NewLine + "";
                                    }
                                    if (_BillingNPI.Trim() == "")
                                    {
                                        if (Edisetting.FacilityNPI == true)
                                            strMessage += "Facility NPI" + Environment.NewLine + "";
                                    }
                                }
                                else if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Clinic"))
                                {
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingLastName == true)
                                            strMessage += "Clinic Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.BillingAddress == true)
                                            strMessage += "Clinic Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Clinic City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (Edisetting.BillingState == true)
                                            strMessage += "Clinic State" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (Edisetting.BillingZIP == true)
                                            strMessage += "Clinic Zip" + Environment.NewLine + "";
                                    }
                                    if (_BillingNPI.Trim() == "")
                                    {
                                        if (Edisetting.BillingNPI == true)
                                            strMessage += "Clinic NPI" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() == "")
                                        {
                                            strMessage += "Billing Provider " + dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                        }
                                    }
                                }
                                else if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Company"))
                                {
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingLastName == true)
                                            strMessage += "Company Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.BillingAddress == true)
                                            strMessage += "Company Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Company City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (Edisetting.BillingState == true)
                                            strMessage += "Company State" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (Edisetting.BillingZIP == true)
                                            strMessage += "Company Zip" + Environment.NewLine + "";
                                    }
                                    if (_BillingNPI.Trim() == "")
                                    {
                                        if (Edisetting.BillingNPI == true)
                                            strMessage += "Company NPI" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() == "")
                                        {
                                            strMessage += "Billing Provider " + dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                        }
                                    }
                                }
                                else
                                {

                                    if (dtBillingProvider.Rows[0]["FirstName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingFirstName == true)
                                            strMessage += "Billing Provider First Name" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingLastName == true)
                                            strMessage += "Billing Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["MiddleName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingMiddleName == true)
                                            strMessage += "Billing Provider Middle Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Billing Provider City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (Edisetting.BillingState == true)
                                            strMessage += "Billing Provider State" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.BillingAddress == true)
                                            strMessage += "Billing Provider Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (Edisetting.BillingZIP == true)
                                            strMessage += "Billing Provider Zip" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["PrimaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["PrimaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (_BillingNPI.Trim() == "")
                                        {
                                            //if (GetValidationFieldsSettings("Billing Provider NPI"))

                                            strMessage += strBillingSetting + "Billing Provider " + dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                        }
                                    }

                                    if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() == "")
                                        {

                                            strMessage += "Billing Provider " + dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                        }
                                    }

                                    if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Facility") != true || dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Clinic") != true)
                                    {
                                        if (dtBillingProvider.Rows[0]["Taxonomy"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.BillingTaxonomy == true)
                                                strMessage += "Billing Provider Taxonomy" + Environment.NewLine + "";
                                        }
                                    }
                                }
                            }

                            #endregion " Billing Provider "


                            #region "Facility "
                            //Billing Provider
                            if (dtFacility != null && dtFacility.Rows.Count > 0)
                            {
                                if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bISOtherID"]) == true)
                                {
                                    if (dtFacility.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "" && dtFacility.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "0" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifiervalue"]) == "" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]).Trim() == "" && IsEDIgeneration == true)
                                    {
                                        MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using " + dtFacility.Rows[0]["Setting"].ToString().Trim() + " which has mismatch in source and other ID type.\nBatch will not send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return false;
                                    }
                                    if (Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierID"].ToString().Trim()) == "0" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifiervalue"]) == "" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]).Trim() == "")
                                    {
                                        strMessage += "Facility Tax ID" + Environment.NewLine + "";
                                    }
                                }

                                string _FacilityAddress = "";
                                string _FacilityCity = "";
                                string _FacilityState = "";
                                string _FacilityZIP = "";
                                string _FacilityNPI = "";



                                _FacilityAddress = dtFacility.Rows[0]["Address1"].ToString().Trim();
                                _FacilityCity = dtFacility.Rows[0]["City"].ToString().Trim();
                                _FacilityState = dtFacility.Rows[0]["State"].ToString().Trim();
                                _FacilityZIP = dtFacility.Rows[0]["Zip"].ToString().Trim();
                                _FacilityNPI = dtFacility.Rows[0]["PrimaryQualifierValue"].ToString().Trim();



                                if (dtFacility.Rows[0]["sSource"].ToString().Trim().Contains("Facility"))
                                {
                                    if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.FacilityName == true)
                                            strMessage += "Facility Name" + Environment.NewLine + "";
                                    }
                                    if (_FacilityAddress.Trim() == "")
                                    {
                                        if (Edisetting.FacilityAddress1 == true)
                                            strMessage += "Facility Address" + Environment.NewLine + "";
                                    }
                                    if (_FacilityCity.Trim() == "")
                                    {
                                        //   if (GetValidationFieldsSettings("Facility City"))
                                        strMessage += "Facility City" + Environment.NewLine + "";
                                    }
                                    if (_FacilityState.Trim() == "")
                                    {
                                        // if (GetValidationFieldsSettings("Facility State"))
                                        strMessage += "Facility State" + Environment.NewLine + "";
                                    }
                                    if (_FacilityZIP.Trim() == "")
                                    {
                                        //  if (GetValidationFieldsSettings("Facility Zip"))
                                        strMessage += "Facility Zip" + Environment.NewLine + "";
                                    }
                                    if (_FacilityNPI.Trim() == "")
                                    {
                                        if (Edisetting.FacilityNPI == true)
                                            strMessage += "Facility NPI" + Environment.NewLine + "";
                                    }
                                }
                                else if (dtFacility.Rows[0]["sSource"].ToString().Trim().Contains("Clinic"))
                                {
                                    if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.FacilityName == true)
                                            strMessage += "Clinic Name" + Environment.NewLine + "";
                                    }
                                    if (_FacilityAddress.Trim() == "")
                                    {
                                        if (Edisetting.FacilityAddress1 == true)
                                            strMessage += "Clinic Address" + Environment.NewLine + "";
                                    }
                                    if (_FacilityCity.Trim() == "")
                                    {
                                        if (Edisetting.FacilityCity == true)
                                            strMessage += "Clinic City" + Environment.NewLine + "";
                                    }
                                    if (_FacilityState.Trim() == "")
                                    {
                                        if (Edisetting.FacilityState == true)
                                            strMessage += "Clinic State" + Environment.NewLine + "";
                                    }
                                    if (_FacilityZIP.Trim() == "")
                                    {
                                        if (Edisetting.FacilityZip == true)
                                            strMessage += "Clinic Zip" + Environment.NewLine + "";
                                    }
                                    if (_FacilityNPI.Trim() == "")
                                    {
                                        if (Edisetting.FacilityNPI == true)
                                            strMessage += "Clinic NPI" + Environment.NewLine + "";
                                    }
                                }
                                else if (dtFacility.Rows[0]["sSource"].ToString().Trim().Contains("Company"))
                                {
                                    if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.FacilityName == true)
                                            strMessage += "Company Name" + Environment.NewLine + "";
                                    }
                                    if (_FacilityAddress.Trim() == "")
                                    {
                                        if (Edisetting.FacilityAddress1 == true)
                                            strMessage += "Company Address" + Environment.NewLine + "";
                                    }
                                    if (_FacilityCity.Trim() == "")
                                    {
                                        if (Edisetting.FacilityCity == true)
                                            strMessage += "Company City" + Environment.NewLine + "";
                                    }
                                    if (_FacilityState.Trim() == "")
                                    {
                                        if (Edisetting.FacilityState == true)
                                            strMessage += "Company State" + Environment.NewLine + "";
                                    }
                                    if (_FacilityZIP.Trim() == "")
                                    {
                                        if (Edisetting.FacilityZip == true)
                                            strMessage += "Company Zip" + Environment.NewLine + "";
                                    }
                                    if (_FacilityNPI.Trim() == "")
                                    {
                                        if (Edisetting.FacilityNPI == true)
                                            strMessage += "Company NPI" + Environment.NewLine + "";
                                    }
                                }
                                else
                                {

                                    if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.FacilityName == true)
                                            strMessage += "Billing Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (_FacilityCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Billing Provider City" + Environment.NewLine + "";
                                    }
                                    if (_FacilityState.Trim() == "")
                                    {
                                        if (Edisetting.FacilityState == true)
                                            strMessage += "Billing Provider State" + Environment.NewLine + "";
                                    }
                                    if (_FacilityAddress.Trim() == "")
                                    {
                                        if (Edisetting.FacilityAddress1 == true)
                                            strMessage += "Billing Provider Address" + Environment.NewLine + "";
                                    }
                                    if (_FacilityZIP.Trim() == "")
                                    {
                                        if (Edisetting.FacilityZip == true)
                                            strMessage += "Billing Provider Zip" + Environment.NewLine + "";
                                    }
                                    if (dtFacility.Rows[0]["PrimaryQualifier"].ToString().Trim() != "" || dtFacility.Rows[0]["PrimaryQualifierValue"].ToString().Trim() != "" || dtFacility.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (_FacilityNPI.Trim() == "")
                                        {
                                            //if (GetValidationFieldsSettings("Billing Provider NPI"))

                                            strMessage += strBillingSetting + "Billing Provider " + dtFacility.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                        }
                                    }
                                }
                            }
                            else
                            {
                                MessageBox.Show("Facility information is not present for claim number " + oTransaction.ClaimNumber.ToString().Trim() + ".\nBatch will not send. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return false;
                            }
                            #endregion " Billing Provider "

                            #region " Subscriber "
                            //Subscriber
                            if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                            {
                                for (int _InsRow = 0; _InsRow < dtPatientInsurances.Rows.Count; _InsRow++)
                                {
                                    #region " Primary Insurance "
                                    if (_InsRow == 0)
                                    {
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SubscriberLastName == true)
                                                strMessage += "Subscriber Last Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                        {
                                            //if (GetValidationFieldsSettings("Subscriber Relationship"))
                                            strMessage += "Subscriber Relationship" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                        {

                                            if (Edisetting.PlanType == true)
                                                strMessage += "Plan Type" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SubscriberFirstName == true)
                                                strMessage += "Subscriber First Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Subscriber Insurance ID"))
                                            strMessage += "Insurance ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                        {
                                            if (Edisetting.SubscriberAddress == true)
                                                strMessage += "Subscriber Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                        {
                                            if (Edisetting.SubscriberGroupID == true)
                                                strMessage += "Subscriber Group ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                        {
                                            if (Edisetting.SubscriberCity == true)
                                                strMessage += "Subscriber City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                        {
                                            if (Edisetting.SubscriberState == true)
                                                strMessage += "Subscriber State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                        {
                                            if (Edisetting.SubscriberZip == true)
                                                strMessage += "Subscriber Zip" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            //if (GetValidationFieldsSettings("Subscriber Date of Birth"))
                                            strMessage += "Subscriber Date of Birth" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            //if (GetValidationFieldsSettings("Subscriber Gender"))
                                            strMessage += "Subscriber Gender" + Environment.NewLine + "";
                                        }
                                        //if (dtPatientInsurances.Rows[_InsRow]["InsuranceName"].ToString().ToUpper().Contains("MEDICARE"))

                                        if (dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"].ToString() == "0" || dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.InsuranceTypeCode == true)
                                                strMessage += "Insurance Type Code" + Environment.NewLine + "";
                                        }

                                        //Payer
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerName == true)
                                                strMessage += "Payer/Insurance Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                        {
                                            //20100416 Urgent Outage of 5030.
                                            if (Edisetting.PayerId == true)
                                                strMessage += "Payer ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerAddress1"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerAddress == true)
                                                strMessage += "Payer Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerCity"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerCity == true)
                                                strMessage += "Payer City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerState"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerState == true)
                                                strMessage += "Payer State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerZip"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerZip == true)
                                                strMessage += "Payer Zip" + Environment.NewLine + "";
                                        }

                                    }

                                    #endregion " Primary Insurance "

                                    #region " Secondary Insurance "
                                    if (_InsRow == 1)
                                    {
                                        //Other Insurance
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SecondarySubLName == true)
                                                strMessage += "Secondary Insurance Subscriber Last Name" + Environment.NewLine + "";
                                        }

                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                        {
                                            //20100416 Urgent Outage of 5030.
                                            if (Edisetting.SecondaryPlanType == true)
                                                strMessage += "Secondary Insurance Plan Type" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance Subscriber Relationship"))
                                            strMessage += "Secondary Insurance Subscriber Relationship" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance ID"))
                                            strMessage += "Secondary Insurance ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryGroupId == true)
                                                strMessage += "Secondary Insurance Group ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryInsAddress == true)
                                                strMessage += "Secondary Insurance Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SecondarySubFName == true)
                                                strMessage += "Secondary Insurance Subscriber First Name" + Environment.NewLine + "";
                                        }

                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]) == "")
                                        {
                                            if (Edisetting.SecondaryInsName == true)
                                                strMessage += "Secondary Insurance Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryInsPayerID == true)
                                                strMessage += "Secondary Insurance Payer ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubCity == true)
                                                strMessage += "Secondary Insurance City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubState == true)
                                                strMessage += "Secondary Insurance State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubZip == true)
                                                strMessage += "Secondary Insurance Zip" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance Subscriber Date of Birth"))
                                            strMessage += "Secondary Insurance Subscriber Date of Birth" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance Subscriber Gender"))
                                            strMessage += "Secondary Insurance Subscriber Gender" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "0" || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == string.Empty || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubInsType == true)
                                                strMessage += "Secondary Insurance Type Code" + Environment.NewLine + "";
                                        }
                                    }

                                    #endregion " Secondary Insurance "

                                    #region " Tertiary Insurance "
                                    if (_InsRow == 2)
                                    {
                                        //Other Insurance
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.TertiarySubLName == true)
                                                strMessage += "Tertiary Insurance Subscriber Last Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryPlanType == true)
                                                strMessage += "Tertiary Plan Type" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Tertiary Insurance Subscriber Relationship"))
                                            strMessage += "Tertiary Insurance Subscriber Relationship" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Tertiary Insurance ID"))
                                            strMessage += "Tertiary Insurance ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryGroupId == true)
                                                strMessage += "Tertiary Insurance Group ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryInsAddress == true)
                                                strMessage += "Tertiary Insurance Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.TertiarySubFName == true)
                                                strMessage += "Tertiary Insurance Subscriber First Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]) == "")
                                        {
                                            if (Edisetting.TertiaryInsName == true)
                                                strMessage += "Tertiary Insurance Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryInsPayerID == true)
                                                strMessage += "Tertiary Insurance Payer ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubCity == true)
                                                strMessage += "Tertiary Insurance City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubState == true)
                                                strMessage += "Tertiary Insurance State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubZip == true)
                                                strMessage += "Tertiary Insurance Zip" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            // if (GetValidationFieldsSettings("Tertiary Insurance Subscriber Date of Birth"))
                                            strMessage += "Tertiary Insurance Subscriber Date of Birth" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            //   if (GetValidationFieldsSettings("Tertiary Insurance Subscriber Gender"))
                                            strMessage += "Tertiary Insurance Subscriber Gender" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "0" || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == string.Empty || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubInsType == true)
                                                strMessage += "Tertiary Insurance Type Code" + Environment.NewLine + "";
                                        }
                                    }

                                    #endregion " Tertiary Insurance "
                                }
                            }
                            #endregion " Subscriber "

                            #region " Patient Information "

                            //Patient Information

                            if (Convert.ToString(oTransaction.ClaimNumber).Trim() == "")
                            {
                                strMessage += "Patient Account No" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientLastName.Trim() == "")
                            {
                                //if (GetValidationFieldsSettings("Patient Last Name"))
                                strMessage += "Patient Last Name" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientFirstName.Trim() == "")
                            {
                                if (Edisetting.PatientFirstName == true)
                                    strMessage += "Patient First Name" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientMiddleName.Trim() == "")
                            {
                                if (Edisetting.PatientMiddleName == true)
                                    strMessage += "Patient Middle Name" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientSSN.Trim() == "")
                            {
                                if (Edisetting.PatientSSN == true)
                                    strMessage += "Patient SSN" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientGender.Trim() == "")
                            {
                                // if (GetValidationFieldsSettings("Patient Gender"))
                                strMessage += "Patient Gender" + Environment.NewLine + "";
                            }
                            if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.PatientDOB.ToShortDateString())).Trim() == "")
                            {
                                //if (GetValidationFieldsSettings("Patient Date of Birth"))
                                strMessage += "Patient Date of Birth" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientAddress1.Trim() == "")
                            {
                                if (Edisetting.PatientAddress == true)
                                    strMessage += "Patient Address" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientCity.Trim() == "")
                            {
                                //  if (GetValidationFieldsSettings("Patient City"))
                                strMessage += "Patient City" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientState.Trim() == "")
                            {
                                // if (GetValidationFieldsSettings("Patient State"))
                                strMessage += "Patient State" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientZip.Trim() == "")
                            {
                                //   if (GetValidationFieldsSettings("Patient Zip"))
                                strMessage += "Patient Zip" + Environment.NewLine + "";
                            }


                            #endregion " Patient Information "

                            #region " Rendering Provider "



                            if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                            {
                                if (Convert.ToString(dtRendProvider.Rows[0]["QualifierMstID"]).Trim() == "0" && Convert.ToString(dtRendProvider.Rows[0]["QualifierID"]).Trim() != "0" && IsEDIgeneration == true)
                                {
                                    MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " having mismatch in Electronic Rendering ProviderID Type.\nBatch will not send.  Please review Billing ID Qualifier Setup.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return false;
                                }
                            }

                            if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                            {
                                // 20100416 Urgent Outage of 5030.  
                                if (Convert.ToString(dtRendProvider.Rows[0]["sLastName"]).Trim() == "")
                                {
                                    if (Edisetting.RenderingProLastName == true)
                                        strMessage += "Rendering Provider Last Name" + Environment.NewLine + "";
                                }
                                if (Convert.ToString(dtRendProvider.Rows[0]["sFirstName"]).Trim() == "")
                                {
                                    if (Edisetting.RenderingProFirstName == true)
                                        strMessage += "Rendering Provider First Name" + Environment.NewLine + "";
                                }
                            }
                            if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                            {
                                if (Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"]).Trim() == "")
                                {
                                    if (Edisetting.RenderingProNPI == true)
                                        strMessage += "Rendering Provider NPI" + Environment.NewLine + "";
                                }
                            }


                            #endregion " Rendering Provider "

                            #region " Referring Provider "

                            if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider)
                            {

                                if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                {
                                    //2310B Referring PROVIDER
                                    //NM1 Referring PROVIDER NAME

                                    if (dtRefProvider.Rows[0]["sLastName"].ToString().Trim().Replace("*", "") == "")
                                    {
                                        if (Edisetting.ReferringProLastName == true)
                                            strMessage += "Referring Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (dtRefProvider.Rows[0]["sFirstName"].ToString().Trim().Replace("*", "") == "")
                                    {
                                        if (Edisetting.ReferringProFirstName == true)
                                            strMessage += "Referring Provider First Name" + Environment.NewLine + "";
                                    }

                                    if (dtRefProvider.Rows[0]["sNPI"].ToString().Trim().Replace("*", "") == "")
                                    {
                                        if (Edisetting.ReferringProNPI == true)
                                            strMessage += "Referring Provider NPI" + Environment.NewLine + "";
                                    }
                                    if (dtRefProvider.Rows[0]["sTaxonomy"].ToString().Trim().Replace("*", "") == "")
                                    {

                                        if (Edisetting.ReferringTaxonomy == true)
                                            strMessage += "Referring Provider Taxonomy" + Environment.NewLine + "";
                                    }
                                }
                            }

                            #endregion " Referring Provider "

                            if (AlphaSetting.ClaimValidationSetting == "Alpha2")
                            {

                                string _strMessage = "";
                                if (ValidateConnectionString(AlphaSetting.AlphaAuthentication, AlphaSetting.AlphaServerName, AlphaSetting.AlphaDatabaseName, AlphaSetting.AlphaUserName, AlphaSetting.AlphaPassword))
                                {

                                    //DataTable dx = new DataTable();
                                    //dx = ogloBilling.GetDistinctDiagnosis(oTransaction.TransactionID, _ClinicID, oTransaction.ClaimNo);

                                    _strMessage = ValidateUsingAlphaII(dtDx, AlphaSetting.AlphaAuthentication, AlphaSetting.AlphaServerName, AlphaSetting.AlphaDatabaseName, AlphaSetting.AlphaUserName, AlphaSetting.AlphaPassword);

                                    if (_strMessage.Trim() != "")
                                    {
                                        _strMessage = _strMessage.Substring(0, _strMessage.Length - 1);
                                        strMessage += "Invalid ICD9's by Alpha II: " + _strMessage + Environment.NewLine + "";
                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Connection for Alpha II cannot be establish, please do the setting from gloPM Admin.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return false;
                                }
                            }

                            if (strMessage.Trim() != "")
                            {
                                oClaimNoArray.Add(oTransaction.ClaimNumber);
                                _MessageHeader += _ClaimMessageHeader + strMessage;
                            }
                        }


                    }

                    if (_MessageHeader != "")
                    {
                        _Message = "";
                        _Message = _MessageHeader;
                    }
                }

                if (_Message.Trim() != "")
                {
                    string _Header = "Following fields are missing in database:" + Environment.NewLine + "" + Environment.NewLine + "";
                    _Header += _Message;
                    _FilePath = _FilePath + "EDIValidation.txt";
                    System.IO.StreamWriter oStreamWriter = new System.IO.StreamWriter(_FilePath, false);
                    oStreamWriter.WriteLine(_Header);
                    oStreamWriter.Close();
                    oStreamWriter.Dispose();
                    System.Diagnostics.Process.Start(_FilePath);
                    return false;
                }
                else
                {
                    if (_bSendingToBatch == false && _res == true)
                    {
                        MessageBox.Show("All data is present and valid.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    return _res;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return false;
            }
            finally
            {
                if (dsHeader != null) { dsHeader.Dispose(); }
                if (dsMaster != null) { dsMaster.Dispose(); }
                if (Edisetting != null) { Edisetting.Dispose(); }
                if (AlphaSetting != null) { AlphaSetting.Dispose(); }

            }

        }

        private bool ValidateEDIDataForAlternateID_5010(ArrayList MstTrans, ArrayList SelectedTrans, bool IsEDIgeneration, Int64 _ContactID)
        {
            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, "");
            bool _res = false;
            if (IsEDIgeneration == true)
            {
                if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == BillingTypeMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == BillingTypeMethod)
                {
                    bool _result = ValidateExpandedClaimLimits(SelectedTrans, Convert.ToInt32(gloSettings.TypeOfBilling.UB04Electronic.GetHashCode()), _ClinicID);
                    return _result;
                }
                _res = ValidateExpandedClaimLimits(SelectedTrans, Convert.ToInt32(gloSettings.TypeOfBilling.Electronic.GetHashCode()), _ClinicID);
            }
            else
            {
                _res = true;
            }

            DataSet dsMaster = null;
            DataSet dsHeader = null;

            string _Message = string.Empty;
            TransactionEDI oTransaction = null;
            string strMissingText = string.Empty;
            string _MessageHeader = string.Empty;
            string _FilePath = gloSettings.FolderSettings.AppTempFolderPath;
            oClaimNoArray = new ArrayList();
            ClsEDIValidation Edisetting = new ClsEDIValidation();
            ClsAlphaValidation AlphaSetting = new ClsAlphaValidation();


            try
            {
                _MessageHeader += "";



                //Get Clearing House Information in Data table
                #region "Header Data - Dataset define in table"

                dsHeader = ogloClaimManager.GetHeader_EDI_5010(_ContactID, _ClinicID, Convert.ToInt64(SelectedTrans[SelectedTrans.Count - 1]), true);
                if (dsHeader == null)
                {
                    return false;
                }
                if (dsHeader.Tables == null)
                {
                    return false;
                }

                DataTable dtClearingHouse = dsHeader.Tables["ClearingHouseData"];
                DataTable dtSubmitter = dsHeader.Tables["SubmitterData"];
                DataTable dtEDISetting = dsHeader.Tables["EDISetting"];
                DataTable dtAlphaSetting = dsHeader.Tables["AlphaSetting"];

                #endregion


                Edisetting.GetEDIValidation(dtEDISetting);

                AlphaSetting.GetAlphaValidation(dtAlphaSetting);

                if (AlphaSetting.ClaimValidationSetting == "None")
                {
                    if (_IsValidateButtonClick == false)
                    {
                        if (AlphaSetting.ShowMessageForValidation == true)
                        {
                            if (MessageBox.Show("You have not selected any validation setting, claims may go with invalid data. Do you want to continue?  ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
                            {
                                return false;
                            }
                        }
                    }
                    else
                    {
                        if (AlphaSetting.ShowMessageForValidation == true)
                        {
                            MessageBox.Show("You have not selected any validation setting, claims may go with invalid data.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        }
                    }
                }
                else if (AlphaSetting.ClaimValidationSetting == "Alpha2")
                {
                    if (!ValidateConnectionString(AlphaSetting.AlphaAuthentication, AlphaSetting.AlphaServerName, AlphaSetting.AlphaDatabaseName, AlphaSetting.AlphaUserName, AlphaSetting.AlphaPassword))
                    {
                        MessageBox.Show("Connection for Alpha II cannot be establish, please do the setting from gloPM Admin.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                }

                if (dtClearingHouse == null || dtClearingHouse.Rows.Count < 1)
                {
                    MessageBox.Show("Clearing House information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }



                if (SelectedTrans != null)
                {
                    if (SelectedTrans.Count > 0)
                    {
                        if (dtSubmitter == null || dtSubmitter.Rows.Count < 1)
                        {
                            MessageBox.Show("Submitter/Provider information is not present.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                    }
                }

                #region " Clearing House "
                //ISA and GS Settings


                if (Convert.ToString(dtClearingHouse.Rows[0]["sSubmitterID"]).Trim() == "")
                {
                    if (Edisetting.SenderID == true)
                        strMissingText += "Sender ID" + Environment.NewLine + "" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sReceiverID"]).Trim() == "")
                {
                    if (Edisetting.ReceiverID == true)
                        strMissingText += "Receiver ID" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sSenderCode"]).Trim() == "")
                {
                    if (Edisetting.SenderCode == true)
                        strMissingText += "Sender Code" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtClearingHouse.Rows[0]["sVenderIDCode"]).Trim() == "")
                {
                    if (Edisetting.ReceiverCode == true)
                        strMissingText += "Receiver Code" + Environment.NewLine + "";
                }
                #endregion " Clearing House "

                #region " Submitter "
                //Submitter
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterName"]).Trim() == "")
                {
                    if (Edisetting.SubmitterName == true)
                        strMissingText += "Submitter Name" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterContactName"]).Trim() == "")
                {
                    if (Edisetting.SubmitterContactName == true)
                        strMissingText += "Submitter Contact Person Name" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterPhone"]).Trim() == "")
                {
                    if (Edisetting.SubmitterPhone == true)
                        strMissingText += "Submitter Contact Person Number" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterCity"]).Trim() == "")
                {
                    if (Edisetting.SubscriberCity == true)
                        strMissingText += "Submitter City" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterState"]).Trim() == "")
                {
                    if (Edisetting.SubmitterState == true)
                        strMissingText += "Submitter State" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterZIP"]).Trim() == "")
                {
                    if (Edisetting.SubmitterZIP == true)
                        strMissingText += "Submitter Zip" + Environment.NewLine + "";
                }
                if (Convert.ToString(dtSubmitter.Rows[0]["SubmitterAddress1"]).Trim() + " " + Convert.ToString(dtSubmitter.Rows[0]["SubmitterAddress2"]).Trim() == "")
                {
                    if (Edisetting.SubmitterAddress1 == true)
                        strMissingText += "Submitter Address" + Environment.NewLine + "";
                }
                #endregion " Submitter "

                if (strMissingText.Trim() != "")
                {
                    _MessageHeader = _MessageHeader + strMissingText;
                }
                else
                {
                    _MessageHeader = "";
                }


                if (SelectedTrans != null)
                {
                    if (SelectedTrans.Count > 0)
                    {
                        for (int i = 0; i < SelectedTrans.Count; i++)
                        {
                            string strMessage = "";
                            //oTransaction = new TransactionEDI();
                            oTransaction = ogloClaimManager.GetChargesClaimDetails_EDI(Convert.ToInt64(SelectedTrans[i]), _ClinicID);

                            #region "Master EDI data - Dataset data set in data table "

                            dsMaster = null;
                            dsMaster = ogloClaimManager.GetMaster_EDI_5010(oTransaction.ContactID, oTransaction.Lines[0].RenderingProviderId, oTransaction.ProviderID, oTransaction.ResponsibilityNo,
                                oTransaction.TransactionMasterID, Convert.ToInt64(oTransaction.FacilityCode), _ClinicID, oTransaction.IsSameAsBillingProvider,
                                oTransaction.TransactionID, oTransaction.ReferalProviderID_New, false);

                            DataTable dtPatientInsurances = dsMaster.Tables["PatientInsurance"];
                            DataTable dtFacility = dsMaster.Tables["Facility"];
                            DataTable dtBillingProvider = dsMaster.Tables["BillingProvider"];
                            DataTable dtPatientPaid = dsMaster.Tables["PatientPaid"];
                            DataTable dtDx = dsMaster.Tables["Diagnosis"];
                            DataTable dtRefProvider = dsMaster.Tables["RefferingProvider"];
                            DataTable dtRendProvider = dsMaster.Tables["RenderingProvider"];
                            DataTable dtMasterSetting = dsMaster.Tables["MasterSetting"];

                            #endregion


                            string _ClaimMessageHeader = "";

                            bool _IsClaimNumberAdded = false;
                            string strBillingSetting = "";
                            string PrimaryBillingProviderID = "";


                            if (oTransaction != null)
                            {
                                if (oTransaction.Lines.Count > 0)
                                {
                                    if (dtFacility == null)
                                    {
                                        MessageBox.Show("Facility information is not present for claim number " + oTransaction.ClaimNumber.ToString().Trim() + ".  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return false;
                                    }
                                    if (Convert.ToInt64(oTransaction.ProviderID) != 0 && oTransaction.ProviderID.ToString() != "")
                                    {
                                        if (dtBillingProvider == null || dtBillingProvider.Rows.Count == 0)
                                        {
                                            MessageBox.Show("Provider information is not present.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                        PrimaryBillingProviderID = Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("^", "");
                                        if (Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifier"]).Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using Billing Type " + dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + " which has no ID Qualifier Code. \n Batch will not send.  Please review Billing ID Qualifier Setup.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                        if (Convert.ToString(dtBillingProvider.Rows[0]["PrimaryQualifierValue"]).ToString().Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using missing " + dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + ".\n Batch will not send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }

                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "" && dtBillingProvider.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "-1" && dtBillingProvider.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "0" && Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifiervalue"]) == "" && Convert.ToString(dtBillingProvider.Rows[0]["SecondaryQualifier"]).Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using " + dtBillingProvider.Rows[0]["Setting"].ToString().Trim() + " which has mismatch in source and other ID type.\nBatch will not send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }

                                        if (dtPatientInsurances == null || dtPatientInsurances.Rows.Count < 1)
                                        {

                                            if (_IsClaimNumberAdded == false)
                                            {


                                                if (Edisetting.SubscriberLastName == true)
                                                    strMessage += "Subscriber Last Name" + Environment.NewLine + "";

                                                //if (Edisetting.SubscriberRelationship  == true )
                                                strMessage += "Subscriber Relationship" + Environment.NewLine + "";


                                                if (Edisetting.PlanType == true)
                                                    strMessage += "Plan Type" + Environment.NewLine + "";


                                                if (Edisetting.SubscriberFirstName == true)
                                                    strMessage += "Subscriber First Name" + Environment.NewLine + "";


                                                //     if (GetValidationFieldsSettings("Subscriber Insurance ID"))
                                                strMessage += "Insurance ID" + Environment.NewLine + "";


                                                if (Edisetting.SubscriberAddress == true)
                                                    strMessage += "Subscriber Address" + Environment.NewLine + "";

                                                if (Edisetting.SubscriberGroupID == true)
                                                    strMessage += "Subscriber Group ID" + Environment.NewLine + "";

                                                if (Edisetting.SubscriberCity == true)
                                                    strMessage += "Subscriber City" + Environment.NewLine + "";

                                                if (Edisetting.SubmitterState == true)
                                                    strMessage += "Subscriber State" + Environment.NewLine + "";

                                                if (Edisetting.SubmitterZIP == true)
                                                    strMessage += "Subscriber Zip" + Environment.NewLine + "";

                                                //    if (GetValidationFieldsSettings("Subscriber Date of Birth"))
                                                strMessage += "Subscriber Date of Birth" + Environment.NewLine + "";

                                                //   if (GetValidationFieldsSettings("Subscriber Gender"))
                                                strMessage += "Subscriber Gender" + Environment.NewLine + "";

                                                if (Edisetting.PayerName == true)
                                                    strMessage += "Payer/Insurance Name" + Environment.NewLine + "";


                                                if (Edisetting.PayerId == true)
                                                    strMessage += "Payer ID" + Environment.NewLine + "";

                                                if (Edisetting.PayerAddress == true)
                                                    strMessage += "Payer Address" + Environment.NewLine + "";

                                                if (Edisetting.PayerCity == true)
                                                    strMessage += "Payer City" + Environment.NewLine + "";

                                                if (Edisetting.PayerState == true)
                                                    strMessage += "Payer State" + Environment.NewLine + "";

                                                if (Edisetting.PayerZip == true)
                                                    strMessage += "Payer Zip" + Environment.NewLine + "";

                                                _IsClaimNumberAdded = true;
                                            }

                                        }

                                    }

                                    _ClaimMessageHeader = " " + Environment.NewLine + "For Patient: " + oTransaction.PatientFirstName.Trim() + " " + oTransaction.PatientLastName.Trim() + "  and Claim Number: " + oTransaction.ClaimNumber + " " + Environment.NewLine + "" + Environment.NewLine + "";


                                    string _strMessage1 = "";
                                    if (AlphaSetting.IsCheckInvalidICD9 == true)
                                    {
                                        _strMessage1 = Convert.ToString(dtMasterSetting.Rows[0]["InvalidICD9"]);
                                    }

                                    if (_strMessage1.Trim() != "")
                                    {
                                        _strMessage1 = _strMessage1.Substring(0, _strMessage1.Length - 1);
                                        strMessage += "Invalid ICD9's " + _strMessage1 + Environment.NewLine + "";
                                    }

                                }
                                else
                                {
                                    MessageBox.Show("Transaction Lines are not there in selected transaction(s).  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return false;
                                }
                            }

                            #region " Billing Provider "
                            //Billing Provider
                            if (dtBillingProvider != null || dtBillingProvider.Rows.Count > 0)
                            {
                                string _BillingAddress = "";
                                string _BillingCity = "";
                                string _BillingState = "";
                                string _BillingZIP = "";
                                string _BillingNPI = "";

                                _BillingAddress = dtBillingProvider.Rows[0]["Address1"].ToString().Trim();
                                _BillingCity = dtBillingProvider.Rows[0]["City"].ToString().Trim();
                                _BillingState = dtBillingProvider.Rows[0]["State"].ToString().Trim();
                                _BillingZIP = dtBillingProvider.Rows[0]["Zip"].ToString().Trim();
                                _BillingNPI = dtBillingProvider.Rows[0]["PrimaryQualifierValue"].ToString().Trim();



                                if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Facility"))
                                {
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.FacilityName == true)
                                            strMessage += "Facility Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.FacilityAddress1 == true)
                                            strMessage += "Facility Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        //   if (GetValidationFieldsSettings("Facility City"))
                                        strMessage += "Facility City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        // if (GetValidationFieldsSettings("Facility State"))
                                        strMessage += "Facility State" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        //  if (GetValidationFieldsSettings("Facility Zip"))
                                        strMessage += "Facility Zip" + Environment.NewLine + "";
                                    }
                                    if (_BillingNPI.Trim() == "")
                                    {
                                        if (Edisetting.FacilityNPI == true)
                                            strMessage += "Facility NPI" + Environment.NewLine + "";
                                    }
                                }
                                else if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Clinic"))
                                {
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingLastName == true)
                                            strMessage += "Clinic Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.BillingAddress == true)
                                            strMessage += "Clinic Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Clinic City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (Edisetting.BillingState == true)
                                            strMessage += "Clinic State" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (Edisetting.BillingZIP == true)
                                            strMessage += "Clinic Zip" + Environment.NewLine + "";
                                    }
                                    if (_BillingNPI.Trim() == "")
                                    {
                                        if (Edisetting.BillingNPI == true)
                                            strMessage += "Clinic NPI" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() == "")
                                        {
                                            if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "34" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "24" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "SY" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "EI")
                                            {
                                                strMessage += "Billing Provider " + dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                            }
                                        }
                                    }
                                }
                                else if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Company"))
                                {
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingLastName == true)
                                            strMessage += "Company Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.BillingAddress == true)
                                            strMessage += "Company Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Company City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (Edisetting.BillingState == true)
                                            strMessage += "Company State" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (Edisetting.BillingZIP == true)
                                            strMessage += "Company Zip" + Environment.NewLine + "";
                                    }
                                    if (_BillingNPI.Trim() == "")
                                    {
                                        if (Edisetting.BillingNPI == true)
                                            strMessage += "Company NPI" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() == "")
                                        {
                                            if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "34" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "24" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "SY" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "EI")
                                            {
                                                strMessage += "Billing Provider " + dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                            }
                                        }
                                    }
                                }
                                else
                                {

                                    if (dtBillingProvider.Rows[0]["FirstName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingFirstName == true)
                                            strMessage += "Billing Provider First Name" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["LastName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingLastName == true)
                                            strMessage += "Billing Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["MiddleName"].ToString().Trim() == "")
                                    {
                                        if (Edisetting.BillingMiddleName == true)
                                            strMessage += "Billing Provider Middle Name" + Environment.NewLine + "";
                                    }
                                    if (_BillingCity.Trim() == "")
                                    {
                                        if (Edisetting.BillingCity == true)
                                            strMessage += "Billing Provider City" + Environment.NewLine + "";
                                    }
                                    if (_BillingState.Trim() == "")
                                    {
                                        if (Edisetting.BillingState == true)
                                            strMessage += "Billing Provider State" + Environment.NewLine + "";
                                    }
                                    if (_BillingAddress.Trim() == "")
                                    {
                                        if (Edisetting.BillingAddress == true)
                                            strMessage += "Billing Provider Address" + Environment.NewLine + "";
                                    }
                                    if (_BillingZIP.Trim() == "")
                                    {
                                        if (Edisetting.BillingZIP == true)
                                            strMessage += "Billing Provider Zip" + Environment.NewLine + "";
                                    }
                                    if (dtBillingProvider.Rows[0]["PrimaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["PrimaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (_BillingNPI.Trim() == "")
                                        {
                                            //if (GetValidationFieldsSettings("Billing Provider NPI"))
                                            strMessage += strBillingSetting + "Billing Provider " + dtBillingProvider.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                        }
                                    }

                                    if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() != "" || dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() != "")
                                    {
                                        if (dtBillingProvider.Rows[0]["SecondaryQualifierValue"].ToString().Trim() == "")
                                        {
                                            if (dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "34" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "24" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "SY" && dtBillingProvider.Rows[0]["SecondaryQualifier"].ToString().Trim() != "EI")
                                            {
                                                strMessage += "Billing Provider " + dtBillingProvider.Rows[0]["SecondaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                            }
                                        }
                                    }

                                    if (dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Facility") != true || dtBillingProvider.Rows[0]["sSource"].ToString().Trim().Contains("Clinic") != true)
                                    {
                                        if (dtBillingProvider.Rows[0]["Taxonomy"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.BillingTaxonomy == true)
                                                strMessage += "Billing Provider Taxonomy" + Environment.NewLine + "";
                                        }
                                    }
                                }
                            }

                            #endregion " Billing Provider "


                            #region "Facility "
                            //Billing Provider
                            if (dtFacility != null && dtFacility.Rows.Count > 0)
                            {
                                bool IsincludeFacility = false;
                                IsincludeFacility = Convert.ToBoolean(dtFacility.Rows[0]["bIncludeFacility"]);
                                if (Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("^", "") != PrimaryBillingProviderID || (Convert.ToString(dtFacility.Rows[0]["PrimaryQualifierValue"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("^", "") == PrimaryBillingProviderID && IsincludeFacility == true))
                                {

                                    if (Convert.ToBoolean(dtMasterSetting.Rows[0]["bISOtherID"]) == true)
                                    {
                                        if (dtFacility.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "" && dtFacility.Rows[0]["SecondaryQualifierID"].ToString().Trim() != "0" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifiervalue"]) == "" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]).Trim() == "" && IsEDIgeneration == true)
                                        {
                                            MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " is using " + dtFacility.Rows[0]["Setting"].ToString().Trim() + " which has mismatch in source and other ID type.\nBatch will not send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                        if (Convert.ToString(dtFacility.Rows[0]["SecondaryQualifierID"].ToString().Trim()) == "0" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifiervalue"]) == "" && Convert.ToString(dtFacility.Rows[0]["SecondaryQualifier"]).Trim() == "")
                                        {
                                            strMessage += "Facility Tax ID" + Environment.NewLine + "";
                                        }
                                    }

                                    string _FacilityAddress = "";
                                    string _FacilityCity = "";
                                    string _FacilityState = "";
                                    string _FacilityZIP = "";
                                    string _FacilityNPI = "";



                                    _FacilityAddress = dtFacility.Rows[0]["Address1"].ToString().Trim();
                                    _FacilityCity = dtFacility.Rows[0]["City"].ToString().Trim();
                                    _FacilityState = dtFacility.Rows[0]["State"].ToString().Trim();
                                    _FacilityZIP = dtFacility.Rows[0]["Zip"].ToString().Trim();
                                    _FacilityNPI = dtFacility.Rows[0]["PrimaryQualifierValue"].ToString().Trim();



                                    if (dtFacility.Rows[0]["sSource"].ToString().Trim().Contains("Facility"))
                                    {
                                        if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.FacilityName == true)
                                                strMessage += "Facility Name" + Environment.NewLine + "";
                                        }
                                        if (_FacilityAddress.Trim() == "")
                                        {
                                            if (Edisetting.FacilityAddress1 == true)
                                                strMessage += "Facility Address" + Environment.NewLine + "";
                                        }
                                        if (_FacilityCity.Trim() == "")
                                        {
                                            //   if (GetValidationFieldsSettings("Facility City"))
                                            strMessage += "Facility City" + Environment.NewLine + "";
                                        }
                                        if (_FacilityState.Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Facility State"))
                                            strMessage += "Facility State" + Environment.NewLine + "";
                                        }
                                        if (_FacilityZIP.Trim() == "")
                                        {
                                            //  if (GetValidationFieldsSettings("Facility Zip"))
                                            strMessage += "Facility Zip" + Environment.NewLine + "";
                                        }
                                        if (_FacilityNPI.Trim() == "")
                                        {
                                            if (Edisetting.FacilityNPI == true)
                                                strMessage += "Facility NPI" + Environment.NewLine + "";
                                        }
                                    }
                                    else if (dtFacility.Rows[0]["sSource"].ToString().Trim().Contains("Clinic"))
                                    {
                                        if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.FacilityName == true)
                                                strMessage += "Clinic Name" + Environment.NewLine + "";
                                        }
                                        if (_FacilityAddress.Trim() == "")
                                        {
                                            if (Edisetting.FacilityAddress1 == true)
                                                strMessage += "Clinic Address" + Environment.NewLine + "";
                                        }
                                        if (_FacilityCity.Trim() == "")
                                        {
                                            if (Edisetting.FacilityCity == true)
                                                strMessage += "Clinic City" + Environment.NewLine + "";
                                        }
                                        if (_FacilityState.Trim() == "")
                                        {
                                            if (Edisetting.FacilityState == true)
                                                strMessage += "Clinic State" + Environment.NewLine + "";
                                        }
                                        if (_FacilityZIP.Trim() == "")
                                        {
                                            if (Edisetting.FacilityZip == true)
                                                strMessage += "Clinic Zip" + Environment.NewLine + "";
                                        }
                                        if (_FacilityNPI.Trim() == "")
                                        {
                                            if (Edisetting.FacilityNPI == true)
                                                strMessage += "Clinic NPI" + Environment.NewLine + "";
                                        }
                                    }
                                    else if (dtFacility.Rows[0]["sSource"].ToString().Trim().Contains("Company"))
                                    {
                                        if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.FacilityName == true)
                                                strMessage += "Company Name" + Environment.NewLine + "";
                                        }
                                        if (_FacilityAddress.Trim() == "")
                                        {
                                            if (Edisetting.FacilityAddress1 == true)
                                                strMessage += "Company Address" + Environment.NewLine + "";
                                        }
                                        if (_FacilityCity.Trim() == "")
                                        {
                                            if (Edisetting.FacilityCity == true)
                                                strMessage += "Company City" + Environment.NewLine + "";
                                        }
                                        if (_FacilityState.Trim() == "")
                                        {
                                            if (Edisetting.FacilityState == true)
                                                strMessage += "Company State" + Environment.NewLine + "";
                                        }
                                        if (_FacilityZIP.Trim() == "")
                                        {
                                            if (Edisetting.FacilityZip == true)
                                                strMessage += "Company Zip" + Environment.NewLine + "";
                                        }
                                        if (_FacilityNPI.Trim() == "")
                                        {
                                            if (Edisetting.FacilityNPI == true)
                                                strMessage += "Company NPI" + Environment.NewLine + "";
                                        }
                                    }
                                    else
                                    {

                                        if (dtFacility.Rows[0]["LastName"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.FacilityName == true)
                                                strMessage += "Billing Provider Last Name" + Environment.NewLine + "";
                                        }
                                        if (_FacilityCity.Trim() == "")
                                        {
                                            if (Edisetting.BillingCity == true)
                                                strMessage += "Billing Provider City" + Environment.NewLine + "";
                                        }
                                        if (_FacilityState.Trim() == "")
                                        {
                                            if (Edisetting.FacilityState == true)
                                                strMessage += "Billing Provider State" + Environment.NewLine + "";
                                        }
                                        if (_FacilityAddress.Trim() == "")
                                        {
                                            if (Edisetting.FacilityAddress1 == true)
                                                strMessage += "Billing Provider Address" + Environment.NewLine + "";
                                        }
                                        if (_FacilityZIP.Trim() == "")
                                        {
                                            if (Edisetting.FacilityZip == true)
                                                strMessage += "Billing Provider Zip" + Environment.NewLine + "";
                                        }
                                        if (dtFacility.Rows[0]["PrimaryQualifier"].ToString().Trim() != "" || dtFacility.Rows[0]["PrimaryQualifierValue"].ToString().Trim() != "" || dtFacility.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() != "")
                                        {
                                            if (_FacilityNPI.Trim() == "")
                                            {
                                                //if (GetValidationFieldsSettings("Billing Provider NPI"))

                                                strMessage += strBillingSetting + "Billing Provider " + dtFacility.Rows[0]["PrimaryQualifierDescription"].ToString().Trim() + Environment.NewLine + "";
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                MessageBox.Show("Facility information is not present for claim number " + oTransaction.ClaimNumber.ToString().Trim() + ".\nBatch will not send. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return false;
                            }
                            #endregion " Billing Provider "

                            #region " Subscriber "
                            //Subscriber
                            if (dtPatientInsurances != null && dtPatientInsurances.Rows.Count > 0)
                            {
                                for (int _InsRow = 0; _InsRow < dtPatientInsurances.Rows.Count; _InsRow++)
                                {
                                    #region " Primary Insurance "
                                    if (_InsRow == 0)
                                    {
                                        string _strRelation = "";
                                        _strRelation = dtPatientInsurances.Rows[0]["RelationshipCode"].ToString().Trim();

                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SubscriberLastName == true)
                                                strMessage += "Subscriber Last Name" + Environment.NewLine + "";
                                        }

                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                        {
                                            //if (GetValidationFieldsSettings("Subscriber Relationship"))
                                            strMessage += "Subscriber Relationship" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                        {

                                            if (Edisetting.PlanType == true)
                                                strMessage += "Plan Type" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SubscriberFirstName == true)
                                                strMessage += "Subscriber First Name" + Environment.NewLine + "";
                                        }

                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Subscriber Insurance ID"))
                                            strMessage += "Insurance ID" + Environment.NewLine + "";
                                        }


                                        if (Convert.ToBoolean(dtPatientInsurances.Rows[0]["bIncludeSubscriberAddress"]) == true || _strRelation == "18")
                                        {
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                            {
                                                if (Edisetting.SubscriberAddress == true)
                                                    strMessage += "Subscriber Address" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                            {
                                                if (Edisetting.SubscriberGroupID == true)
                                                    strMessage += "Subscriber Group ID" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                            {
                                                if (Edisetting.SubscriberCity == true)
                                                    strMessage += "Subscriber City" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                            {
                                                if (Edisetting.SubscriberState == true)
                                                    strMessage += "Subscriber State" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                            {
                                                if (Edisetting.SubscriberZip == true)
                                                    strMessage += "Subscriber Zip" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                            {
                                                //if (GetValidationFieldsSettings("Subscriber Date of Birth"))
                                                strMessage += "Subscriber Date of Birth" + Environment.NewLine + "";
                                            }
                                            if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                            {
                                                //if (GetValidationFieldsSettings("Subscriber Gender"))
                                                strMessage += "Subscriber Gender" + Environment.NewLine + "";
                                            }
                                        }

                                        if (dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"].ToString() == "0" || dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"].ToString().Trim() == "")
                                        {
                                            if (Edisetting.InsuranceTypeCode == true)
                                                strMessage += "Insurance Type Code" + Environment.NewLine + "";
                                        }

                                        //Payer
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerName == true)
                                                strMessage += "Payer/Insurance Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerId == true)
                                                strMessage += "Payer ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerAddress1"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerAddress == true)
                                                strMessage += "Payer Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerCity"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerCity == true)
                                                strMessage += "Payer City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerState"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerState == true)
                                                strMessage += "Payer State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerZip"]).Trim() == "")
                                        {
                                            if (Edisetting.PayerZip == true)
                                                strMessage += "Payer Zip" + Environment.NewLine + "";
                                        }

                                    }

                                    #endregion " Primary Insurance "

                                    #region " Secondary Insurance "
                                    if (_InsRow == 1)
                                    {
                                        //Other Insurance
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SecondarySubLName == true)
                                                strMessage += "Secondary Insurance Subscriber Last Name" + Environment.NewLine + "";
                                        }

                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryPlanType == true)
                                                strMessage += "Secondary Insurance Plan Type" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance Subscriber Relationship"))
                                            strMessage += "Secondary Insurance Subscriber Relationship" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance ID"))
                                            strMessage += "Secondary Insurance ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryGroupId == true)
                                                strMessage += "Secondary Insurance Group ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryInsAddress == true)
                                                strMessage += "Secondary Insurance Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.SecondarySubFName == true)
                                                strMessage += "Secondary Insurance Subscriber First Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]) == "")
                                        {
                                            if (Edisetting.SecondaryInsName == true)
                                                strMessage += "Secondary Insurance Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondaryInsPayerID == true)
                                                strMessage += "Secondary Insurance Payer ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubCity == true)
                                                strMessage += "Secondary Insurance City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubState == true)
                                                strMessage += "Secondary Insurance State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubZip == true)
                                                strMessage += "Secondary Insurance Zip" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance Subscriber Date of Birth"))
                                            strMessage += "Secondary Insurance Subscriber Date of Birth" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            // if (GetValidationFieldsSettings("Secondary Insurance Subscriber Gender"))
                                            strMessage += "Secondary Insurance Subscriber Gender" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "0" || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == string.Empty || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "")
                                        {
                                            if (Edisetting.SecondarySubInsType == true)
                                                strMessage += "Secondary Insurance Type Code" + Environment.NewLine + "";
                                        }
                                    }

                                    #endregion " Secondary Insurance "

                                    #region " Tertiary Insurance "
                                    if (_InsRow == 2)
                                    {
                                        //Other Insurance
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubLName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.TertiarySubLName == true)
                                                strMessage += "Tertiary Insurance Subscriber Last Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceTypeCode"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryPlanType == true)
                                                strMessage += "Tertiary Plan Type" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["RelationshipCode"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Tertiary Insurance Subscriber Relationship"))
                                            strMessage += "Tertiary Insurance Subscriber Relationship" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberID"]).Trim() == "")
                                        {
                                            // if (GetValidationFieldsSettings("Tertiary Insurance ID"))
                                            strMessage += "Tertiary Insurance ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sGroup"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryGroupId == true)
                                                strMessage += "Tertiary Insurance Group ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberAddr1"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryInsAddress == true)
                                                strMessage += "Tertiary Insurance Address" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubFName"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            if (Edisetting.TertiarySubFName == true)
                                                strMessage += "Tertiary Insurance Subscriber First Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsuranceName"]) == "")
                                        {
                                            if (Edisetting.TertiaryInsName == true)
                                                strMessage += "Tertiary Insurance Name" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["PayerID"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiaryInsPayerID == true)
                                                strMessage += "Tertiary Insurance Payer ID" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberCity"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubCity == true)
                                                strMessage += "Tertiary Insurance City" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberState"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubState == true)
                                                strMessage += "Tertiary Insurance State" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["SubscriberZip"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubZip == true)
                                                strMessage += "Tertiary Insurance Zip" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["dtDOB"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            // if (GetValidationFieldsSettings("Tertiary Insurance Subscriber Date of Birth"))
                                            strMessage += "Tertiary Insurance Subscriber Date of Birth" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["sSubscriberGender"]).Trim() == "" && Convert.ToBoolean(dtPatientInsurances.Rows[_InsRow]["bIsCompnay"]) == false)
                                        {
                                            //   if (GetValidationFieldsSettings("Tertiary Insurance Subscriber Gender"))
                                            strMessage += "Tertiary Insurance Subscriber Gender" + Environment.NewLine + "";
                                        }
                                        if (Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "0" || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == string.Empty || Convert.ToString(dtPatientInsurances.Rows[_InsRow]["InsTypeCodeDefault"]).Trim() == "")
                                        {
                                            if (Edisetting.TertiarySubInsType == true)
                                                strMessage += "Tertiary Insurance Type Code" + Environment.NewLine + "";
                                        }
                                    }

                                    #endregion " Tertiary Insurance "
                                }
                            }
                            #endregion " Subscriber "

                            #region " Patient Information "

                            //Patient Information

                            if (Convert.ToString(oTransaction.ClaimNumber).Trim() == "")
                            {
                                strMessage += "Patient Account No" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientLastName.Trim() == "")
                            {
                                //if (GetValidationFieldsSettings("Patient Last Name"))
                                strMessage += "Patient Last Name" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientFirstName.Trim() == "")
                            {
                                if (Edisetting.PatientFirstName == true)
                                    strMessage += "Patient First Name" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientMiddleName.Trim() == "")
                            {
                                if (Edisetting.PatientMiddleName == true)
                                    strMessage += "Patient Middle Name" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientSSN.Trim() == "")
                            {
                                if (Edisetting.PatientSSN == true)
                                    strMessage += "Patient SSN" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientGender.Trim() == "")
                            {
                                // if (GetValidationFieldsSettings("Patient Gender"))
                                strMessage += "Patient Gender" + Environment.NewLine + "";
                            }
                            if (Convert.ToString(gloDateMaster.gloDate.DateAsNumber(oTransaction.PatientDOB.ToShortDateString())).Trim() == "")
                            {
                                //if (GetValidationFieldsSettings("Patient Date of Birth"))
                                strMessage += "Patient Date of Birth" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientAddress1.Trim() == "")
                            {
                                if (Edisetting.PatientAddress == true)
                                    strMessage += "Patient Address" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientCity.Trim() == "")
                            {
                                //  if (GetValidationFieldsSettings("Patient City"))
                                strMessage += "Patient City" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientState.Trim() == "")
                            {
                                // if (GetValidationFieldsSettings("Patient State"))
                                strMessage += "Patient State" + Environment.NewLine + "";
                            }
                            if (oTransaction.PatientZip.Trim() == "")
                            {
                                //   if (GetValidationFieldsSettings("Patient Zip"))
                                strMessage += "Patient Zip" + Environment.NewLine + "";
                            }


                            #endregion " Patient Information "

                            #region " Rendering Provider "

                            if (dtRendProvider != null && Convert.ToString(dtRendProvider.Rows[0]["QualifierMstID"]).Trim() == "0" && Convert.ToString(dtRendProvider.Rows[0]["QualifierID"]).Trim() != "0" && IsEDIgeneration == true)
                            {
                                MessageBox.Show("Claim # " + oTransaction.ClaimNumber.ToString().Trim() + " for Patient " + oTransaction.PatientCode.ToString().Trim() + " having mismatch in Electronic Rendering ProviderID Type.\nBatch will not send.  Please review Billing ID Qualifier Setup.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return false;
                            }


                            bool IsincludeRenderingProvider = false;
                            IsincludeRenderingProvider = Convert.ToBoolean(dtRendProvider.Rows[0]["bIncludeRenderingProvider"]);
                            if (Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("^", "") != PrimaryBillingProviderID || (Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"]).Trim().Replace("*", "").Replace("~", "").Replace(":", "").Replace("^", "") == PrimaryBillingProviderID && IsincludeRenderingProvider == true))
                            {
                                if (dtRendProvider != null && dtRendProvider.Rows.Count > 0)
                                {
                                    if (Convert.ToString(dtRendProvider.Rows[0]["sLastName"]).Trim() == "")
                                    {
                                        if (Edisetting.RenderingProLastName == true)
                                            strMessage += "Rendering Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (Convert.ToString(dtRendProvider.Rows[0]["sFirstName"]).Trim() == "")
                                    {
                                        if (Edisetting.RenderingProFirstName == true)
                                            strMessage += "Rendering Provider First Name" + Environment.NewLine + "";
                                    }

                                    if (Convert.ToString(dtRendProvider.Rows[0]["ProviderNPI"]).Trim() == "")
                                    {
                                        if (Edisetting.RenderingProNPI == true)
                                            strMessage += "Rendering Provider NPI" + Environment.NewLine + "";
                                    }
                                }
                            }


                            #endregion " Rendering Provider "

                            #region " Referring Provider "

                            if (oTransaction.ReferalProviderID_New > 0 || oTransaction.IsSameAsBillingProvider)
                            {
                                if (dtRefProvider != null && dtRefProvider.Rows.Count > 0)
                                {
                                    //2310B Referring PROVIDER
                                    //NM1 Referring PROVIDER NAME

                                    if (dtRefProvider.Rows[0]["sLastName"].ToString().Trim().Replace("*", "") == "")
                                    {
                                        if (Edisetting.ReferringProLastName == true)
                                            strMessage += "Referring Provider Last Name" + Environment.NewLine + "";
                                    }
                                    if (dtRefProvider.Rows[0]["sFirstName"].ToString().Trim().Replace("*", "") == "")
                                    {
                                        if (Edisetting.ReferringProFirstName == true)
                                            strMessage += "Referring Provider First Name" + Environment.NewLine + "";
                                    }
                                    if (dtRefProvider.Rows[0]["sNPI"].ToString().Trim().Replace("*", "") == "")
                                    {
                                        if (Edisetting.ReferringProNPI == true)
                                            strMessage += "Referring Provider NPI" + Environment.NewLine + "";
                                    }
                                }

                            }

                            #endregion " Referring Provider "

                            if (AlphaSetting.ClaimValidationSetting == "Alpha2")
                            {

                                string _strMessage = "";
                                if (ValidateConnectionString(AlphaSetting.AlphaAuthentication, AlphaSetting.AlphaServerName, AlphaSetting.AlphaDatabaseName, AlphaSetting.AlphaUserName, AlphaSetting.AlphaPassword))
                                {

                                    //DataTable dx = new DataTable();
                                    //dx = ogloBilling.GetDistinctDiagnosis(oTransaction.TransactionID, _ClinicID, oTransaction.ClaimNo);

                                    _strMessage = ValidateUsingAlphaII(dtDx, AlphaSetting.AlphaAuthentication, AlphaSetting.AlphaServerName, AlphaSetting.AlphaDatabaseName, AlphaSetting.AlphaUserName, AlphaSetting.AlphaPassword);

                                    if (_strMessage.Trim() != "")
                                    {
                                        _strMessage = _strMessage.Substring(0, _strMessage.Length - 1);
                                        strMessage += "Invalid ICD9's by Alpha II: " + _strMessage + Environment.NewLine + "";

                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Connection for Alpha II cannot be establish, please do the setting from gloPM Admin.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return false;
                                }
                            }

                            if (strMessage.Trim() != "")
                            {
                                oClaimNoArray.Add(oTransaction.ClaimNumber);
                                _MessageHeader += _ClaimMessageHeader + strMessage;
                            }
                        }


                    }

                    if (_MessageHeader != "")
                    {
                        _Message = "";
                        _Message = _MessageHeader;
                    }
                }

                if (_Message.Trim() != "")
                {
                    string _Header = "Following fields are missing in database:" + Environment.NewLine + "" + Environment.NewLine + "";
                    _Header += _Message;
                    _FilePath = _FilePath + "EDIValidation.txt";
                    System.IO.StreamWriter oStreamWriter = new System.IO.StreamWriter(_FilePath, false);
                    oStreamWriter.WriteLine(_Header);
                    oStreamWriter.Close();
                    oStreamWriter.Dispose();
                    System.Diagnostics.Process.Start(_FilePath);
                    return false;
                }
                else
                {
                    if (_bSendingToBatch == false && _res == true)
                    {
                        MessageBox.Show("All data is present and valid.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    return _res;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return false;
            }
            finally
            {
                if (dsHeader != null) { dsHeader.Dispose(); }
                if (dsMaster != null) { dsMaster.Dispose(); }
                if (Edisetting != null) { Edisetting.Dispose(); }
                if (AlphaSetting != null) { AlphaSetting.Dispose(); }

            }

        }

        public DataTable GetClaimInsuranceCount(DataTable dtMasterTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtInsuranceCountData = null;

            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@tvpTransactionIDs", dtMasterTransactionID, ParameterDirection.Input, SqlDbType.Structured);
                oDB.Retrive("GET_ClaimInsuranceCount_tvp", oDBParameters, out dtInsuranceCountData);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
            return dtInsuranceCountData;
        }

        public DataTable GetExpandedClaimLimit(ArrayList _TransIDs, int nSettingType, out int nClaimLines, out int nDiagnosis)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtTransactionData = null;
            dsEDIClaimdetails odsEDIClaimdetails = new dsEDIClaimdetails();
            nClaimLines = 6;
            nDiagnosis = 4;
            try
            {
                for (int i = 0; i < _TransIDs.Count; i++)
                {
                    odsEDIClaimdetails.Tables["BL_TransactionIDs"].Rows.Add();
                    odsEDIClaimdetails.Tables["BL_TransactionIDs"].Rows[i]["nTransactionID"] = Convert.ToInt64(_TransIDs[i]);
                }
                odsEDIClaimdetails.AcceptChanges();
                oDB.Connect(false);
                oDBParameters.Add("@tvpTransactionIDs", odsEDIClaimdetails.Tables["BL_TransactionIDs"], ParameterDirection.Input, SqlDbType.Structured);
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nSettingType", nSettingType, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClaimLines", nClaimLines, ParameterDirection.InputOutput, SqlDbType.Int);
                oDBParameters.Add("@nDiagnosis", nDiagnosis, ParameterDirection.InputOutput, SqlDbType.Int);

                oDB.Retrive("GET_Exp_Detail_tvp", oDBParameters, out dtTransactionData);
                nClaimLines = Convert.ToInt16(oDBParameters["@nClaimLines"].Value);
                nDiagnosis = Convert.ToInt16(oDBParameters["@nDiagnosis"].Value);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
            return dtTransactionData;
        }

        private bool ValidateExpandedClaimLimits(ArrayList _SelectedTrans, int nSettingType, Int64 nClinicID)
        {
            int nClaimLines;
            int nDiagnosis;
            bool _result = true;
            DataTable dtTransactionID = GetExpandedClaimLimit(_SelectedTrans, nSettingType, out nClaimLines, out nDiagnosis);

            try
            {
                if (dtTransactionID != null)
                {
                    if (dtTransactionID.Rows.Count > 0)
                    {
                        for (int _Count = 0; _Count < dtTransactionID.Rows.Count; _Count++)
                        {
                            string InvalidType = String.Empty;
                            if (Convert.ToInt16(dtTransactionID.Rows[_Count]["ClaimlinesCount"]) > nClaimLines)
                            {
                                InvalidType = "service lines";
                                _result = false;

                            }
                            if (Convert.ToInt32(gloSettings.BatchBillingMethod.ElectronicProfessionalANSI5010) == BillingTypeMethod)
                            {
                                nDiagnosis = 12;
                            }
                            if (Convert.ToInt16(dtTransactionID.Rows[_Count]["DiagnosisCount"]) > nDiagnosis)
                            {
                                if (InvalidType != "")
                                {
                                    InvalidType = InvalidType + " and diagnoses";
                                }
                                else
                                {
                                    InvalidType = " diagnoses";
                                }

                                _result = false;

                            }
                            if (InvalidType != "")
                            {
                                MessageBox.Show("Batch could not be sent.\nClaim " + Convert.ToString(dtTransactionID.Rows[_Count]["ClaimNo"]) + " for " + dtTransactionID.Rows[_Count]["PatientCode"] + " - " + dtTransactionID.Rows[_Count]["PatientName"] + " has too many " + InvalidType + ". ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                break;
                            }
                        }
                    }
                }




                //if (_SelectedTrans != null && _SelectedTrans.Count > 0)
                //{
                //    //Comment following method call and uncomment in for loop if you want to check the limit from Settings.Now its hardcoded in SP.
                //    GetExpandedClaimLimits(oTransaction.ContactID, nSettingType, nClinicID, out bAllowExpandedClaims, out nClaimLines, out nDiagnosis);
                //    for (int _Count = 0; _Count < _SelectedTrans.Count; _Count++)
                //    {

                //        oTransaction = null;
                //        oTransaction = ogloBilling.GetChargesClaimDetails(Convert.ToInt64(_SelectedTrans[_Count]), nClinicID);
                //        //GetExpandedClaimLimits(oTransaction.ContactID, nSettingType, nClinicID, out bAllowExpandedClaims, out nClaimLines, out nDiagnosis);

                //        if (nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.Electronic) || nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.Paper))
                //        {
                //            dtDxCount = objClaimManager.GetTransaction_DX_Professional(Convert.ToInt64(_MastTrans[_Count]), Convert.ToInt64(_SelectedTrans[_Count]));
                //        }
                //        else if (nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.UB04Electronic) || nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.UB04Paper))
                //        {
                //            dtDxCount = objClaimManager.GetTransaction_DX(Convert.ToInt64(_MastTrans[_Count]), Convert.ToInt64(_SelectedTrans[_Count]));
                //        }
                //        string InvalidType = String.Empty;
                //        if (oTransaction.Lines != null && oTransaction.Lines.Count > 0 && oTransaction.Lines.Count > nClaimLines )
                //        {
                //            InvalidType = "service lines";
                //            _result = false;

                //        }
                //        if (Convert.ToInt32(gloSettings.BatchBillingMethod.ElectronicProfessionalANSI5010) == BillingTypeMethod)
                //        {
                //            nDiagnosis = 12;
                //        }
                //        if (dtDxCount != null && dtDxCount.Rows.Count > nDiagnosis )
                //        {

                //            if (InvalidType != "")
                //            {
                //                InvalidType = InvalidType + " and diagnoses";
                //            }
                //            else
                //            {
                //                InvalidType = " diagnoses";
                //            }

                //            _result = false;
                //            //break;
                //        }
                //        if (InvalidType!="")
                //        {
                //            MessageBox.Show("Batch could not be sent.\nClaim " + oTransaction.ClaimNumber + " for " + oTransaction.PatientCode + " - " + oTransaction.PatientName + " has too many "+ InvalidType +". ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                //            break;
                //        }
                //        #region Commented Code

                //        #endregion
                //    }
                //}
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (dtTransactionID != null) { dtTransactionID.Dispose(); }
                //if (objClaimManager != null) { objClaimManager.Dispose(); }
                //if (oTransaction != null) { oTransaction.Dispose(); }
            }
            return _result;
        }

        #endregion " Public & Private Methods "

        #region " ToolStrip Button Click Event "

        private void tsb_Modify_Click(object sender, EventArgs e)
        {
            try
            {
                OpenModify();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void tsb_Delete_Click(object sender, EventArgs e)
        {
            DialogResult _dlgRslt = DialogResult.None;
            _dlgRslt = MessageBox.Show("Are you sure you want to delete selected record", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2);
            switch (_dlgRslt)
            {
                case DialogResult.Yes:
                    Delete_Click(false);
                    SetView();
                    break;
            }

        }
        private void FillBusinessCenter()
        {
           
            cmbBusinessCenter.DataSource = null;
            cmbBusinessCenter.Items.Clear();
            DataTable _dtBusinessCenter = new DataTable();
            _dtBusinessCenter = gloGlobal.gloPMMasters.GetBusinessCenter();

            // To Fill the Business center blank row even if the master is blank
            //if (_dtBusinessCenter != null && _dtBusinessCenter.Rows.Count > 0)
            //{
            DataRow dr = _dtBusinessCenter.NewRow();
            dr["BusinessCenter"] = "";
            dr["nBusinessCenterId"] = 0;

            _dtBusinessCenter.Rows.InsertAt(dr, 0);

            cmbBusinessCenter.DataSource = _dtBusinessCenter;
            cmbBusinessCenter.DisplayMember = "BusinessCenter";
            cmbBusinessCenter.ValueMember = "nBusinessCenterId";

            //}


            // throw new NotImplementedException();
        }

        private void tsb_Void_Click(object sender, EventArgs e)
        {
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            bool _isChargesSelected = false;

            try
            {

                #region "Check whether the claims are selected or not"
                if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                {
                    for (int i = 1; i < c1QueuedClaims.Rows.Count; i++)
                    {
                        if (c1QueuedClaims.GetCellCheck(i, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                        {
                            _isChargesSelected = true;
                            break;
                        }
                    }
                }
                if (_isChargesSelected == false)
                {
                    MessageBox.Show("Please select Charges to delete", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                #endregion

                DialogResult _dlgRslt = DialogResult.None;
                _dlgRslt = MessageBox.Show("Are you sure you want to void selected claim(s)?  ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2);
                if (_dlgRslt == DialogResult.Yes)
                {

                    #region " Void Claims "

                    if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                    {
                        for (int i = 1; i < c1QueuedClaims.Rows.Count; i++)
                        {
                            if (c1QueuedClaims.GetCellCheck(i, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                if (c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["Status"].Index) != null
                                    && Convert.ToString(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["Status"].Index)) != "")
                                {
                                    //MaheshB
                                    Int64 _TranId = 0;
                                    _TranId = Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["TransactionID"].Index));
                                    UpdateTransactionStatus(_TranId, TransactionStatus.Deleted);


                                    //    #region "Private Variables"
                                    //    Int64 _statusid = 0;
                                    //    Int64 _statusdate = 0;
                                    //    Int64 _statustime = 0;

                                    //    string _BatchName = "";
                                    //    Int64 _PatientID = 0;
                                    //    Int64 _BatchId = 0;
                                    //    Int64 _BatchNo = 0;
                                    //    Int64 _BatchDate = 0;

                                    //    Int64 _ClaimNo = 0;
                                    //Int64 _TranId = 0;
                                    //    Int64 _TranMasterId = 0;
                                    //    //DateTime _TransDate;//MaheshB
                                    //    #endregion

                                    //    #region "Assign Values"
                                    //    _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                                    //    _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

                                    //    _BatchId = Convert.ToInt64(ClaimFillGrid.GetData(i, ClaimFillGrid.Cols["nBatchID"].Index));
                                    //    //_TransDate = Convert.ToDateTime(ClaimFillGrid.GetData(i, ClaimFillGrid.Cols["Date"].Index));

                                    //    DataTable dtBatch = new DataTable();
                                    //    dtBatch = ogloBilling.GetBatch(_BatchId);
                                    //    if (dtBatch != null && dtBatch.Rows.Count > 0)
                                    //    {
                                    //        _BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
                                    //        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
                                    //        _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
                                    //        _BatchNo = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);
                                    //    }
                                    //    if (dtBatch != null) { dtBatch.Dispose(); }

                                    //    _PatientID = Convert.ToInt64(ClaimFillGrid.GetData(i, ClaimFillGrid.Cols["PatientID"].Index));

                                    //    _ClaimNo = Convert.ToInt64(ClaimFillGrid.GetData(i, ClaimFillGrid.Cols["ClaimNo"].Index));
                                    //_TranId = Convert.ToInt64(c1QueuedClaims.GetData(i, ClaimFillGrid.Cols["nTransactionID"].Index));
                                    //    _TranMasterId=Convert.ToInt64(ClaimFillGrid.GetData(i, ClaimFillGrid.Cols["nTransactionMasterID"].Index));
                                    //    #endregion


                                    //_statusid = ogloBilling.UpdateTransactionStatus(_PatientID, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNo, _TranId, _ClaimNo, 0, 0, TransactionStatus.Deleted, _statusdate, _statustime, "", this.ClinicID, 0, gloPatient.TypeOfBilling.None);
                                    //ogloBilling.UpdateCurrentStatus(_TranId, TransactionStatus.Deleted, _statusid);

                                    //MaheshB

                                    //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                    //gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                                    //oDB.Connect(false);
                                    //oDBParameters.Add("@nBillingTransactionID", _TranId, ParameterDirection.Input, SqlDbType.BigInt);
                                    //oDBParameters.Add("@dtVoidDate", DateTime.Today, ParameterDirection.Input, SqlDbType.DateTime);
                                    //oDBParameters.Add("@nVoidUserID", _UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                    //oDBParameters.Add("@sVoidUserName", _UserName, ParameterDirection.Input, SqlDbType.VarChar);
                                    //oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                    ////oDBParameters.Add("@nMode", 2, ParameterDirection.Input, SqlDbType.Int);

                                    //oDB.Execute("BL_EOBPayment_Void", oDBParameters);

                                    //MaheshB 20091207
                                    //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                    //gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                                    //oDB.Connect(false);
                                    //string _strquery = "Update BL_Transaction_Claim_MST set nStatus='" + TransactionStatus.Deleted.GetHashCode() + "' where nTransactionID='" + _TranId + "' and nTransactionMasterID='" + _TranMasterId + "'";
                                    //oDB.Execute_Query(_strquery);


                                }
                            }
                        }
                    }

                    #endregion " Delete Charges "
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ogloBilling != null) { ogloBilling.Dispose(); }
                SetView();
            }
        }

        private void tsb_Refresh_Click(object sender, EventArgs e)
        {
            RemoveSearchBatchText();
            RemoveSearchClaimText();

            if (gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch") && pnlBusinessCenter.Visible == false)
            {

                if (cmbBusinessCenter.DataSource == null)
                {
                    cmbBusinessCenter.DrawMode = DrawMode.OwnerDrawFixed;
                    cmbBusinessCenter.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);
                    FillBusinessCenter();
                }
                pnlBusinessCenter.Visible = true;
                cmbBusinessCenter.SelectedValue = gloGlobal.gloPMGlobal.GetDefaultBusinessCenterForUser(gloGlobal.gloPMGlobal.UserID);
                _BusinessCenterCode = cmbBusinessCenter.Text.ToString();
            }
            else if (!gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
            {
                pnlBusinessCenter.Visible = false;
                _BusinessCenterCode = "";
            }

            AddPlanBillingMethod();
            switch (tabManager.SelectedTab.Tag.ToString())
            {
                case "Claim Manager":                    
                    FillC1AllBatch();
                    if (c1AllBatch.Rows.Count > 0)
                    {
                        c1AllBatch.Row = 0;
                        if (c1SubBatch.Rows.Count > 1)
                        { c1SubBatch.Row = 1; }
                    }
                    break;
                default:
                    SetView();
                    break;
            }
        }

        private void tsb_Select_Click(object sender, EventArgs e)
        {
            bool result = true;
            if (SelectedCharges.Count > 0 && tsb_Select.Tag.ToString() == "Select")
            {
                DialogResult _dlgRslt = DialogResult.None;
                _dlgRslt = MessageBox.Show("Are you sure you want to select all claim(s)?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2);
                if (_dlgRslt == DialogResult.No)
                {
                    result = false;
                }
                else
                {
                    SelectedCharges.Clear();

                }
            }
            else if (tsb_Select.Tag.ToString() == "Deselect")
                SelectedCharges.Clear();

            if (result)
                ChargesSelection();
        }

        private void tsb_ReQueue_Click(object sender, EventArgs e)
        {
            ReQueue_Click();
        }

        private void tsb_Validate_Click(object sender, EventArgs e)
        {
            _IsValidateButtonClick = true;
            Validate_Click(false);
            _IsValidateButtonClick = false;
        }

        private void tsb_Batch_New_Click(object sender, EventArgs e)
        {
            Batch_Click(true);
        }

        private void tsb_Batch_Existing_Click(object sender, EventArgs e)
        {
            Batch_Click(false);
        }

        private void tsb_DeleteBatch_Click(object sender, EventArgs e)
        {
            DialogResult _dlgRslt = DialogResult.None;
            _dlgRslt = MessageBox.Show("Are you sure you want to delete selected batch", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            switch (_dlgRslt)
            {
                case DialogResult.Yes:
                    Delete_Click(true);
                    SetView();
                    break;
            }

        }


        #region "Batch Sub Menus"

        private void Batch_Click(bool SendToNew)
        {
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            Int64 _tranId = 0;
            Int64 _patientId = 0;
            Int64 _claimNo = 0;
            bool _DialogResult = false;
            string _BatchName = "";
            Int64 _BatchId = 0;
            Int64 _BillingMethodID = 0;//For batch Billing Method
            Int64 _BatchNo = 0;
            Int64 _BatchDate = 0;
            Int64 _ClearingHouseId = 0;
            string _ClearingHouseCode = "";
            string _ClearingHouseName = "";
            Int64 _Prefix = Convert.ToInt64(DateTime.Now.ToString("MMddyyyyhhmmss"));//gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
            Int32 _selectedClaimCount = 0;
            Boolean _bBillingMethod = false;
            string _InvalidClaims = string.Empty; // SUDHIR 20100311 // TO KEEP LIST OF CLAIMS WHICH HAVING MORE THAN 3 INSURANCE PARTIES //
            StringBuilder _sTransactionID = new StringBuilder();
            dsEDIClaimdetails odsEDIClaimdetails = new dsEDIClaimdetails();
            int mstTransactionCount = 0;
            GeneralSettings oSettings = null;
            CL_FollowUpCode oCollection = null;
            object oValue = null;

            string _BatchName_Split = "";
            Int64 _BatchId_Split = 0;
            Int64 _BillingMethodID_Split = 0;//For batch Billing Method
            Int64 _BatchNo_Split = 0;
            bool _multiplePaperTyes = false;
            bool _SplitBatch = false;
            bool _WrongICD = false;
            bool _IsClaimHasErrors = false;
            StringBuilder _ClaimInfo = new StringBuilder();
            string msg = string.Empty;
            Int16 _msgCounter = 0;
            try
            {
                bool SettingsValue = CL_FollowUpCode.IsFollowUpFeatureON();
                if (SettingsValue)
                {
                    dtCurrentDate = CL_FollowUpCode.GetServerDate();
                    oCollection = new CL_FollowUpCode();
                    oSettings = new GeneralSettings(gloPMGlobal.DatabaseConnectionString);
                }

                _bSendingToBatch = true;
                _selectedClaimCount = 0;
                Int16 _billingtype = 0;
                Int64 _billingmethod = 0;
                Int32 _PaperType = 0;
                int _tempClearingHouseType = 0;
                DataRow[] drTransactionID = null;
                gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                //Read Batch Claim Setting
                if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                {
                    MessageBox.Show("Claims ANSI Version has not been set.  Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                    if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                    return;

                }
                if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }

                if (c1QueuedClaims.Rows.Count > 0 && c1QueuedClaims.DataSource != null)
                {

                    for (int ctr = 1; ctr < c1QueuedClaims.Rows.Count; ctr++)
                    {
                        if (c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                        {

                            _selectedClaimCount = _selectedClaimCount + 1;

                            Int64 _nTransactionMasterID = 0;

                            Int64 _nTransactionID = 0;

                            _nTransactionMasterID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                            _nTransactionID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionID"].Index));

                            TransactionStatus _claimStatus = TransactionStatus.None;
                            _claimStatus = ogloBilling.GetTransactionStatus(_nTransactionMasterID, _nTransactionID);
                            //             

                            if (_claimStatus == TransactionStatus.SendToClaimManager)
                            {
                                MessageBox.Show("Claim(s) selected for batching are either \"Batched\" OR \"Printed and Auto batched\" by another user and cannot be re-batched" + Environment.NewLine + "Claims in \"Charges\" tab will be auto-refreshed and batched claim(s) will be removed from selection." + Environment.NewLine + "[Batched Claim#<" + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["Claim"].Index)) + ">]", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                SetView();
                                return;
                            }

                            if (UB04Setting == true)
                            {
                                Int64 _temptransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionID"].Index));
                                Int64 _nMSTTransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                                if (_selectedClaimCount == 1)
                                {
                                    _billingtype = GetBillingType(_temptransID, _nMSTTransID);
                                }
                                else
                                {
                                    if (_billingtype != GetBillingType(_temptransID, _nMSTTransID))
                                    {

                                        MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }
                                }
                            }

                            if (_IsMultipleClearingHouse == true)
                            {
                                if (_selectedClaimCount == 1)
                                {
                                    _tempClearingHouseType = Convert.ToInt32(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["ClearingHouseType"].Index));
                                }
                                else
                                {
                                    if (_tempClearingHouseType != Convert.ToInt32(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["ClearingHouseType"].Index)))
                                    {
                                        MessageBox.Show("A batch cannot be created with multiple clearinghouses.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }
                                }
                            }
                            drTransactionID = null;
                            Int64 _MSTTransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                            drTransactionID = odsEDIClaimdetails.Tables["BL_TransactionIDs"].Select("nTransactionID=" + _MSTTransID);
                            if (drTransactionID != null && drTransactionID.Length > 0)
                            { }
                            else
                            {
                                odsEDIClaimdetails.Tables["BL_TransactionIDs"].Rows.Add();
                                odsEDIClaimdetails.Tables["BL_TransactionIDs"].Rows[mstTransactionCount]["nTransactionID"] = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                                mstTransactionCount = mstTransactionCount + 1;
                            }

                            #region "Check Same Billing Method"

                            if (_bBillingMethod == false)
                            {
                                if (_selectedClaimCount == 1)
                                {
                                    _billingmethod = Convert.ToInt32(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["BillingMethod"].Index));  //GetDefaultBillingMethod(_temptransID);
                                }
                                else
                                {
                                    if (_billingmethod != Convert.ToInt32(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["BillingMethod"].Index)))
                                    {
                                        if (MessageBox.Show("Selected claims have different Insurance Plan Default Billing Methods." + Environment.NewLine + "Are you sure these claims should go together in a single batch? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            _bBillingMethod = true;
                                        }
                                    }
                                }
                            }

                            #endregion""


                            if (_selectedClaimCount >= 1 && c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {


                                _nPaperVersion = CheckPaperVersion(Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["ContactID"].Index)));

                                if (_PaperType == 0 && _multiplePaperTyes == false)
                                {
                                    _PaperType = _nPaperVersion;
                                }
                                else if (_PaperType != 0 && _multiplePaperTyes == false)
                                {
                                    if (_PaperType != _nPaperVersion)
                                        _multiplePaperTyes = true;

                                }


                            }
                            if (_selectedClaimCount >= 1 && c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {

                                if (Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["nICDRevision"].Index)) != CheckICDVersion(Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["ContactID"].Index)), gloDateMaster.gloDate.DateAsNumber(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["dos"].Index).ToString()), 1))
                                {
                                    _msgCounter++;
                                    if (_msgCounter <= 20)
                                    {


                                        if (_ClaimInfo.ToString() == "")
                                        {
                                            _ClaimInfo.Append(Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["Claim"].Index)) + "   " + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["PatientCode"].Index)) + "-" + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["PatientName"].Index)));
                                        }
                                        else if (_ClaimInfo.ToString() != "")
                                        {
                                            _ClaimInfo.AppendLine();
                                            _ClaimInfo.Append(Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["Claim"].Index)) + "   " + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["PatientCode"].Index)) + "-" + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["PatientName"].Index)));
                                        }

                                    }

                                    else if (_msgCounter == 21)
                                    {
                                        _ClaimInfo.AppendLine();
                                        _ClaimInfo.Append("Too many claims to list");
                                    }
                                    if (_WrongICD == false)
                                    {

                                        _WrongICD = true;
                                    }
                                }

                                if (Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["Errors List"].Index)) != "")
                                {
                                    _IsClaimHasErrors = true;
                                }
                            }
                        }
                    }

                }
                if (_selectedClaimCount <= 0)
                {
                    MessageBox.Show("Select the claim(s). ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }




                string _strClaimNumber = "";

                #region More than 3 Insurance Parties.

                int _selectedSecondaryCount = 0;


                DataTable dtInsuranceCount = GetClaimInsuranceCount(odsEDIClaimdetails.Tables["BL_TransactionIDs"]);
                DataRow[] drInsuranceCount = null;

                for (int ctr = 1; ctr < c1QueuedClaims.Rows.Count; ctr++)
                {
                    if (c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                    {

                        Int64 _temptransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionID"].Index));
                        Int64 _nMSTTransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionMasterID"].Index));

                        #region " For Remittance validation"
                        if (rbPrimaryClaimsCharges.Checked == false)
                        {
                            #region "get Claim TransactionID"

                            _sTransactionID.Append(_temptransID.ToString());
                            _sTransactionID.Append(',');

                            #endregion""
                        }
                        #endregion"End"


                        // TO KEEP LIST OF CLAIMS WHICH HAVING MORE THAN 3 INSURANCE PARTIES //

                        drInsuranceCount = null;
                        drInsuranceCount = dtInsuranceCount.Select("nTransactionID=" + _nMSTTransID);
                        if (drInsuranceCount != null && drInsuranceCount.Length > 0)
                        {
                            if (Convert.ToInt16(drInsuranceCount[0]["InsuranceCount"]) > 3)
                            {
                                c1QueuedClaims.SetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index, C1.Win.C1FlexGrid.CheckEnum.Unchecked);
                                _InvalidClaims = _InvalidClaims + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["Claim"].Index)) + ",";
                                _selectedClaimCount = _selectedClaimCount - 1;
                            }
                        }

                    }
                }


                // SUDHIR 20100311 //
                if (_InvalidClaims.Length > 0)
                {
                    if (_InvalidClaims.LastIndexOf(',') == _InvalidClaims.Length - 1)
                    {
                        _InvalidClaims = _InvalidClaims.Substring(0, _InvalidClaims.Length - 1);
                    }
                }

                if (_InvalidClaims != "," && _InvalidClaims != "")
                {
                    // DialogResult _Result;
                    if (_InvalidClaims.Contains(",") == false)
                        MessageBox.Show("Claim " + _InvalidClaims + " has too many Insurances and will be removed from the batch.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    else
                        MessageBox.Show("Claims " + _InvalidClaims + " has too many Insurances and will be removed from the batch.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                #endregion

                if (_selectedSecondaryCount != _selectedClaimCount)
                {
                    if (UB04Setting == true && _billingtype == Convert.ToInt16(BillingType.Institutional))
                    {
                        _IsValidated = true;
                    }
                    else
                    {
                        Validate_Click(false);
                    }
                }
                if (oClaimNoArray != null)
                {
                    for (int _ClaimNoIndex = 0; _ClaimNoIndex < oClaimNoArray.Count; _ClaimNoIndex++)
                    {
                        if (_ClaimNoIndex == 0)
                        {
                            _strClaimNumber += "  " + FormattedClaimNumberGeneration(oClaimNoArray[_ClaimNoIndex].ToString());
                        }
                        else
                        {
                            _strClaimNumber += ",  " + FormattedClaimNumberGeneration(oClaimNoArray[_ClaimNoIndex].ToString());
                        }

                    }
                }
                if (oClaimNoArray != null)
                {
                    if (_selectedClaimCount == oClaimNoArray.Count && _selectedClaimCount > 0)
                    {
                        MessageBox.Show("The selected claim(s) are invalid", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        for (int rIndex = 1; rIndex < c1QueuedClaims.Rows.Count; rIndex++)
                        {
                            c1QueuedClaims.SetCellCheck(rIndex, c1QueuedClaims.Cols["Select"].Index, C1.Win.C1FlexGrid.CheckEnum.Unchecked);
                        }
                        SelectedCharges.Clear();
                        tsb_Select.Text = "Select All";
                        tsb_Select.Tag = "Select";
                        return;
                    }
                }

                if (_strClaimNumber.Trim() != "")
                {
                    if (MessageBox.Show("The claim(s)" + _strClaimNumber + " will be deselected and won't go to batch. Do you want to continue?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    {
                        for (int ctr = 1; ctr < c1QueuedClaims.Rows.Count; ctr++)
                        {
                            if (c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {

                                for (int _ClaimNoIndex = 0; _ClaimNoIndex < oClaimNoArray.Count; _ClaimNoIndex++)
                                {
                                    if (Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["Claim"].Index)) == Convert.ToString(oClaimNoArray[_ClaimNoIndex]))
                                    {
                                        c1QueuedClaims.SetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index, C1.Win.C1FlexGrid.CheckEnum.Unchecked);
                                        _IsValidated = true;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        return;
                    }
                }

                #region //MaheshB On 20091114

                bool _HasChecked = false;
                if (UB04Setting == true)
                {
                    for (int ctr = 1; ctr < c1QueuedClaims.Rows.Count; ctr++)
                    {
                        if (c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                        {
                            Int64 _temptransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionID"].Index));
                            Int64 _nMSTTransID = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                            _billingtype = GetBillingType(_temptransID, _nMSTTransID);
                            //Get checked Billingmethod
                            _HasChecked = true;
                            break;

                        }
                    }
                }
                else
                {
                    _billingtype = 1;
                    _HasChecked = true;
                }

                #endregion


                if (_IsValidated == true && _HasChecked == true)
                {


                    frmSetupBatch ofrmSetupBatch = new frmSetupBatch(_databaseconnectionstring, SendToNew, _BusinessCenterCode);

                    ofrmSetupBatch.BilliingType = _billingtype;
                    ofrmSetupBatch.DefaultBillingMethod = Convert.ToInt64(cmbBillingMethod.SelectedValue);
                    if (rbSecondaryClaimsCharges.Checked == true)
                    {
                        ofrmSetupBatch.sTransactionIDs = _sTransactionID;
                    }
                    else
                    {
                        ofrmSetupBatch.sTransactionIDs = null;
                    }
                    ofrmSetupBatch.UB04Setting = UB04Setting;
                    ofrmSetupBatch.StartPosition = FormStartPosition.CenterScreen;
                    ofrmSetupBatch.ShowDialog(this);
                    _DialogResult = ofrmSetupBatch.DialgoResult;


                    if (_DialogResult == true)
                    {
                        if (_WrongICD == true)
                        {
                            _WrongICD = false;
                            msg = "ICD9/ICD10 Usage Warning:\n\nClaim Date of Service does not match ICD type  for the following claims:\n\n" + _ClaimInfo.ToString() + "\n\nOk to bill these claims now?";
                            switch (MessageBox.Show(msg, _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                            {
                                case DialogResult.OK:
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.ICD, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.OK, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    break;
                                case DialogResult.Cancel:
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.ICD, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.Cancle, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    return;
                                default:
                                    break;
                            }
                            msg = string.Empty;
                            _ClaimInfo.Clear();
                        }
                        SelectedCharges.Clear();
                        _BatchName = ofrmSetupBatch.BatchName;
                        _BatchId = ofrmSetupBatch.BatchId;
                        _BillingMethodID = ofrmSetupBatch.BillingMethodID;  // Batch billing method

                        if (_multiplePaperTyes == true)
                        {

                            if (_BillingMethodID == (int)BatchBillingMethod.CMS1500 || _BillingMethodID == (int)BatchBillingMethod.CMS1500New)
                            {
                                DialogResult result = MessageBox.Show("Both paper form types are required to print this batch." + Environment.NewLine + "System will split the batch?", _messageBoxCaption, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                                switch (result)
                                {
                                    case DialogResult.Yes:
                                        _SplitBatch = true;
                                        break;
                                    case DialogResult.Cancel:
                                        ofrmSetupBatch.Dispose();
                                        ofrmSetupBatch = null;
                                        return;
                                }
                            }


                        }




                        if (_multiplePaperTyes == false)
                        {
                            if (_BillingMethodID == (int)BatchBillingMethod.CMS1500 || _BillingMethodID == (int)BatchBillingMethod.CMS1500New)
                            {


                                if (_PaperType == (int)PaperFormVersion.CMS1500 && _BillingMethodID != (int)BatchBillingMethod.CMS1500)
                                {
                                    MessageBox.Show("Wrong paper form type selected. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    ofrmSetupBatch.Dispose();
                                    ofrmSetupBatch = null;
                                    return;
                                }
                                else if (_PaperType == (int)PaperFormVersion.CMS1500New && _BillingMethodID != (int)BatchBillingMethod.CMS1500New)
                                {
                                    MessageBox.Show("Wrong paper form type selected. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    ofrmSetupBatch.Dispose();
                                    ofrmSetupBatch = null;
                                    return;
                                }
                            }
                        }

                        string sClaimNumber = string.Empty;
                        for (int ctr = 1; ctr < c1QueuedClaims.Rows.Count; ctr++)
                        {
                            if (c1QueuedClaims.GetCellCheck(ctr, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {


                                Int64 nInsBillingType = 0;
                                switch (ofrmSetupBatch.BillingMethodID)
                                {
                                    case 2:
                                    case 4:
                                    case 8:
                                        {
                                            nInsBillingType = 2;
                                            break;
                                        }
                                    case 1:
                                    case 3:
                                    case 5:
                                    case 7:
                                        {
                                            nInsBillingType = 1;
                                            break;
                                        }
                                    case 0:
                                        {
                                            nInsBillingType = 0;
                                            break;
                                        }

                                }

                                Int64 nBillingMethod = Convert.ToInt64(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["BillingMethod"].Index));

                                if (nBillingMethod != 0)
                                {
                                    if (nBillingMethod != nInsBillingType)
                                    {
                                        sClaimNumber += "," + Convert.ToString(c1QueuedClaims.GetData(ctr, c1QueuedClaims.Cols["ClaimNo"].Index));
                                    }  
                                } 
                            }
                        }

                        if (!string.IsNullOrEmpty(sClaimNumber))
                        {
                            msg = "Billing Method Warning:\n\nClaim selected for billing has different billing method. Continue?";
                            switch (MessageBox.Show(msg, _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                            {
                                case DialogResult.OK:
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Batch, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.OK, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    break;
                                case DialogResult.Cancel:
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Batch, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.Cancle, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    return;
                                default:
                                    break;
                            }
                            msg = string.Empty;
                            //MessageBox.Show("Claim no: "+sClaimNumber.Remove(0,1)+" mismatch billing method.Please select proper billing method.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        
                        if (_IsClaimHasErrors == true && gloGlobal.gloPMGlobal.IsClaimRulesEnabled())
                        {
                            _IsClaimHasErrors = false;
                            msg = "Claim Rule Warning:\n\nClaim selected for billing has error(s) or warning(s) present. Continue?";
                            switch (MessageBox.Show(msg, _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                            {
                                case DialogResult.OK:
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.ChargeRule, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.OK, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    break;
                                case DialogResult.Cancel:
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.ChargeRule, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.Cancle, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    return;
                                default:
                                    break;
                            }
                            msg = string.Empty;
                          
                        }

                        _BatchDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                        if (_SplitBatch == true)
                        {
                            _BillingMethodID = (Int64)BatchBillingMethod.CMS1500;
                            _BillingMethodID_Split = (Int64)BatchBillingMethod.CMS1500New;
                        }
                        if (_BatchId == 0)
                        {
                            _BatchId = ogloBilling.AddModifyBatch(_BatchId, _BatchName, _BatchDate, _BatchNo, BatchType.Batch, 0, 0, _Prefix, _ClearingHouseId, _ClearingHouseCode, _ClearingHouseName, this.UserID, this.UserName, this.ClinicID, _billingtype, _BillingMethodID);
                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Batch, "New Batch named-" + _BatchName + " Created", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);

                        }


                        if (_SplitBatch == true)
                        {
                            string __BatchPrefix = "";
                            if (_BusinessCenterCode != "")
                                __BatchPrefix = "Batch-" + _BusinessCenterCode + "-" + DateTime.Now.ToString("yyyyMMMdd") + "_";
                            else
                                __BatchPrefix = "Batch-" + DateTime.Now.ToString("yyyyMMMdd") + "_";

                            _BatchName_Split = GetBatchName(__BatchPrefix);

                            // _BatchName_Split = _BatchName + "_1";

                            _BatchDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());

                            _BatchId_Split = ogloBilling.AddModifyBatch(_BatchId_Split, _BatchName_Split, _BatchDate, _BatchNo_Split, BatchType.Batch, 0, 0, _Prefix, _ClearingHouseId, _ClearingHouseCode, _ClearingHouseName, this.UserID, this.UserName, this.ClinicID, _billingtype, _BillingMethodID_Split);
                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Batch, "New Batch named-" + _BatchName + " Created", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                        }

                        if (_BatchId > 0)
                        {
                            if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                            {
                                for (int i = 1; i < c1QueuedClaims.Rows.Count; i++)
                                {
                                    if (c1QueuedClaims.GetCellCheck(i, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                    {
                                        if (c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["Status"].Index) != null
                                            && Convert.ToString(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["Status"].Index)) != ""
                                            && Convert.ToString(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["Status"].Index)) == TransactionStatus.Transacted.ToString()
                                            )
                                        {
                                            _tranId = Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["TransactionID"].Index));
                                            _patientId = Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["PatientID"].Index));
                                            _claimNo = Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["ClaimNo"].Index));



                                            //MaheshB 20091201 Move this to Billing Class.
                                            Int64 _nTransactionMasterID = 0;

                                            Int64 _nTransactionID = 0;

                                            _nTransactionMasterID = Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                                            _nTransactionID = Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["TransactionID"].Index));

                                            if (_SplitBatch == true)
                                            {

                                                _nPaperVersion = CheckPaperVersion(Convert.ToInt64(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["ContactID"].Index)));
                                                if (_nPaperVersion == 1)
                                                {
                                                    ogloBilling.UpdateBatchCounter(_BatchId, 1, this.ClinicID);
                                                    AddModifyBatchDetail(_BatchId, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);
                                                }
                                                else if (_nPaperVersion == 2)
                                                {
                                                    ogloBilling.UpdateBatchCounter(_BatchId_Split, 1, this.ClinicID);
                                                    AddModifyBatchDetail(_BatchId_Split, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);
                                                }

                                            }
                                            else
                                            {
                                                ogloBilling.UpdateBatchCounter(_BatchId, 1, this.ClinicID);
                                                AddModifyBatchDetail(_BatchId, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);
                                            }


                                            UpdateTransactionStatus(_tranId, TransactionStatus.Batch);

                                            #region "Region for Auto Schedule Setup"

                                            #region " Account Log Feature Enable Disable according to settings."

                                            if (SettingsValue)
                                            {

                                                Int64 nContactID = 0;
                                                Int64.TryParse(Convert.ToString(c1QueuedClaims.GetData(i, c1QueuedClaims.Cols["ContactID"].Index)), out nContactID);

                                                if (nContactID > 0 && _nTransactionMasterID > 0)
                                                {
                                                    string sStatus = CL_FollowUpCode.GetClaimFollowUpStatus(_nTransactionMasterID, _nTransactionID, nContactID);
                                                    string sAction = string.Empty;
                                                    string sActionDesc = string.Empty;
                                                    Int32 nDays = 0;
                                                    bool bHasWorked = false;
                                                    switch (sStatus)
                                                    {
                                                        case "NewBatch":
                                                            if (sStatus == "NewBatch")
                                                            {
                                                                oCollection.DeleteFollowUpSchedule(_nTransactionID);
                                                            }
                                                            oSettings.GetSetting("CL_INSCLM_START_DEFFUACTION", 0, gloPMGlobal.ClinicID, out oValue);
                                                            sAction = Convert.ToString(oValue);
                                                            sActionDesc = CL_FollowUpCode.GetActionDesc(sAction, CollectionEnums.FollowUpType.Claim);

                                                            oSettings.GetSetting("CL_INSCLM_START_DEFFUACTIONDAYS", 0, gloPMGlobal.ClinicID, out oValue);
                                                            Int32.TryParse(Convert.ToString(oValue), out nDays);

                                                            oCollection.SaveFollowUpScedule(CollectionEnums.FollowUpType.Claim, _nTransactionID, dtCurrentDate.AddDays(nDays), sAction, sActionDesc, gloPMGlobal.UserID, gloPMGlobal.UserName, CollectionEnums.ScheduleType.System, DateTime.MinValue, ref bHasWorked);
                                                            break;
                                                        case "Rebill":
                                                        case "Resend":
                                                            oSettings.GetSetting("CL_INSCLM_REBILL_DEFFUACTION", 0, gloPMGlobal.ClinicID, out oValue);
                                                            sAction = Convert.ToString(oValue);
                                                            sActionDesc = CL_FollowUpCode.GetActionDesc(sAction, CollectionEnums.FollowUpType.Claim);

                                                            oSettings.GetSetting("CL_INSCLM_REBILL_DEFFUACTIONDAYS", 0, gloPMGlobal.ClinicID, out oValue);
                                                            Int32.TryParse(Convert.ToString(oValue), out nDays);

                                                            oCollection.SaveFollowUpScedule(CollectionEnums.FollowUpType.Claim, _nTransactionID, dtCurrentDate.AddDays(nDays), sAction, sActionDesc, gloPMGlobal.UserID, gloPMGlobal.UserName, CollectionEnums.ScheduleType.System, DateTime.MinValue, ref bHasWorked);
                                                            break;
                                                    }
                                                }
                                            }

                                            #endregion

                                            #endregion

                                            _tranId = 0;
                                            _patientId = 0;
                                            _claimNo = 0;

                                        }

                                    }
                                }

                            }
                        }

                    }

                    _BatchId = 0;
                    ofrmSetupBatch.Dispose();
                    ofrmSetupBatch = null;
                }

                SetView();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oCollection != null) { oCollection.Dispose(); }
                if (oValue != null) { oValue = null; }
                if (oSettings != null) { oSettings.Dispose(); }
                if (ogloBilling != null) { ogloBilling.Dispose(); }
                _bSendingToBatch = false;

                oClaimNoArray = null; // SUDHIR 20100325 // 
                _nPaperVersion = 0;
            }
        }

        private void Delete_Click(bool IsCompleteBatchDelete)
        {
            //    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            //    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            //    Int64 _tranId = 0;
            //    Int64 _batchId = 0;

            //    try
            //    {
            //        if (Convert.ToString(tabMain.SelectedTab.Tag) == "Charges")
            //        {
            //            bool _isTransactedCharges = false;
            //            bool _isChargesSelected = false;
            //            if (c1BillingTransactions != null && c1BillingTransactions.Rows.Count > 0)
            //            {
            //                for (int i = 1; i < c1BillingTransactions.Rows.Count; i++)
            //                {
            //                    if (c1BillingTransactions.GetCellCheck(i, c1BillingTransactions.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                    {
            //                        _isChargesSelected = true;
            //                        break;
            //                    }
            //                }
            //            }
            //            if (_isChargesSelected == false)
            //            {
            //                MessageBox.Show("Please select Charges to delete", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                return;
            //            }

            //            #region " Delete Charges "

            //            if (c1BillingTransactions != null && c1BillingTransactions.Rows.Count > 0)
            //            {
            //                for (int i = 1; i < c1BillingTransactions.Rows.Count; i++)
            //                {
            //                    if (c1BillingTransactions.GetCellCheck(i, c1BillingTransactions.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                    {
            //                        if (c1BillingTransactions.GetData(i, c1BillingTransactions.Cols["Status"].Index) != null
            //                            && Convert.ToString(c1BillingTransactions.GetData(i, c1BillingTransactions.Cols["Status"].Index)) != ""
            //                            && (Convert.ToInt32(c1BillingTransactions.GetData(i, c1BillingTransactions.Cols["TransactionStatusId"].Index)) == TransactionStatus.Transacted.GetHashCode() ||
            //                            Convert.ToInt32(c1BillingTransactions.GetData(i, c1BillingTransactions.Cols["TransactionStatusId"].Index)) == TransactionStatus.None.GetHashCode()))
            //                        {
            //                            _tranId = Convert.ToInt64(c1BillingTransactions.GetData(i, c1BillingTransactions.Cols["nTransactionID"].Index));
            //                            if (_tranId > 0) { ogloBilling.DeleteTransaction(_tranId, this.ClinicID); _isTransactedCharges = true; }
            //                            _tranId = 0;
            //                        }
            //                    }
            //                }
            //                if (_isTransactedCharges == false)
            //                { MessageBox.Show("Please select charges with Status :Transacted to delete", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
            //            }

            //            #endregion " Delete Charges "
            //        }
            //        else if (Convert.ToString(tabMain.SelectedTab.Tag) == "ClaimManager")
            //        {
            //            switch (tabManager.SelectedTab.Tag.ToString())
            //            {
            //                case "Batch":
            //                    {
            //                        TreeNode oSelectedBatchNode = trvBatch.SelectedNode;

            //                        #region " Delete Batch OR Batch Transaction "

            //                        if (trvBatch != null && trvBatch.Nodes != null && trvBatch.Nodes.Count > 0)
            //                        {

            //                            if (oSelectedBatchNode != null && oSelectedBatchNode.Tag != null && Convert.ToString(oSelectedBatchNode.Tag) != "" && Convert.ToInt64(oSelectedBatchNode.Tag) > 0)
            //                            {
            //                                _batchId = Convert.ToInt64(oSelectedBatchNode.Tag);
            //                            }
            //                        }

            //                        if (IsCompleteBatchDelete)
            //                        {
            //                            _batchId = Convert.ToInt64(oSelectedBatchNode.Tag);
            //                            if (_batchId > 0) { bool _isDeleted = ogloClaimManager.DeleteBatch(_batchId, this.ClinicID); }
            //                            else
            //                            {
            //                                MessageBox.Show("Please select the Batch to delete", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                                trvBatch.Focus();
            //                            }
            //                        }
            //                        else
            //                        {
            //                            if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
            //                            {
            //                                bool _isSelectedBatchTransactions = false;
            //                                //for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
            //                                //{
            //                                //    if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                                //    {
            //                                //        _isSelectedBatchTransactions = true;
            //                                //    }
            //                                //}
            //                                if (c1BatchGrid.RowSel > 0)
            //                                { _isSelectedBatchTransactions = true; }

            //                                if (_isSelectedBatchTransactions == false)
            //                                {
            //                                    MessageBox.Show("Please select transaction to delete", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                                    return;
            //                                }
            //                                else
            //                                {
            //                                    _tranId = 0;
            //                                    _tranId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["nTransactionID"].Index));
            //                                    if (_tranId > 0 && _batchId > 0)
            //                                    { ogloClaimManager.DeleteBatchTransaction(_batchId, _tranId, this.ClinicID); }
            //                                }

            //                                //for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
            //                                //{
            //                                //    if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                                //    {
            //                                //        _tranId = 0;
            //                                //        _tranId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nTransactionID"].Index));
            //                                //        if (_tranId > 0 && _batchId > 0)
            //                                //        { ogloClaimManager.DeleteBatchTransaction(_batchId, _tranId, this.ClinicID); }
            //                                //    }
            //                                //}



            //                            }
            //                        }

            //                        #endregion
            //                    }
            //                    break;
            //            }
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    }
            //    finally
            //    {
            //        if (ogloBilling != null) { ogloBilling.Dispose(); }
            //        if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            //    }
        }

        private void ReQueue_Click()
        {
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            //string _tranIds = "";
            //Int64 _tranId = 0;
            //Int64 _patientId = 0;
            //Int64 _claimNo = 0;
            //Int64 _statusdate = 0;
            //Int64 _statustime = 0;
            //Int64 _insuranceid = 0;
            //Int64 _statusid = 0;
            //gloPatient.TypeOfBilling _sendclaimtype = gloPatient.TypeOfBilling.None;

            //try
            //{
            //    if (Convert.ToString(tabMain.SelectedTab.Tag) == "ClaimManager")
            //    {
            //        switch (Convert.ToString(tabManager.SelectedTab.Tag))
            //        {
            //            case "Accepted":
            //                {
            //                    #region " Accepted Re-Queue Code "

            //                    if (c1AcceptedClaims != null && c1AcceptedClaims.Rows.Count > 0)
            //                    {
            //                        for (int i = 1; i < c1AcceptedClaims.Rows.Count; i++)
            //                        {
            //                            if (c1AcceptedClaims.GetCellCheck(i, c1AcceptedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                            {
            //                                if (c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["Status"].Index) != null
            //                                    && Convert.ToString(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["Status"].Index)) != ""
            //                                    && Convert.ToInt32(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["TransactionStatusId"].Index)) == TransactionStatus.Accepted.GetHashCode())
            //                                {
            //                                    _tranId = Convert.ToInt64(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["nTransactionID"].Index));
            //                                    _patientId = Convert.ToInt64(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["nPatientID"].Index));
            //                                    _claimNo = Convert.ToInt64(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["ClaimNo"].Index));
            //                                    _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
            //                                    _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());
            //                                    gloPatient.gloPatient oPatient = new gloPatient.gloPatient(_databaseconnectionstring);
            //                                    DataTable oTable = new DataTable();
            //                                    oTable = oPatient.getPatientInsurances(_patientId, InsuranceTypeFlag.Primary.GetHashCode());
            //                                    if (oTable == null || oTable.Rows.Count == 0)
            //                                    {
            //                                        oTable = oPatient.getPatientInsurances(_patientId, InsuranceTypeFlag.Secondary.GetHashCode());
            //                                        if (oTable == null || oTable.Rows.Count == 0)
            //                                        {
            //                                            oTable = oPatient.getPatientInsurances(_patientId, InsuranceTypeFlag.Tertiary.GetHashCode());
            //                                            if (oTable != null && oTable.Rows.Count != 0)
            //                                            {
            //                                                _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                                _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                            }
            //                                            else
            //                                            {
            //                                                _insuranceid = 0;
            //                                                _sendclaimtype = gloPatient.TypeOfBilling.None;
            //                                            }
            //                                        }
            //                                        else
            //                                        {
            //                                            _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                            _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                        }
            //                                    }
            //                                    else
            //                                    {
            //                                        _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                        _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                    }

            //                                    //if (oTable != null && oTable.Rows.Count > 0)
            //                                    //{
            //                                    //    _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                    //    _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                    //}



            //                                    _tranIds += _tranId.ToString() + ",";
            //                                    //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Queue);
            //                                    _statusid = ogloBilling.UpdateTransactionStatus(_patientId, 0, 0, "", 0, BatchType.Queue.GetHashCode(), 0, _tranId, _claimNo, 0, 0, TransactionStatus.ReQueue, _statusdate, _statustime, "", this.ClinicID, _insuranceid, _sendclaimtype);
            //                                    ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.ReQueue, _statusid);
            //                                    _tranId = 0;
            //                                    _patientId = 0;
            //                                    _claimNo = 0;
            //                                    _statusdate = 0;
            //                                    _statustime = 0;
            //                                    _insuranceid = 0;
            //                                    _sendclaimtype = gloPatient.TypeOfBilling.None;
            //                                    _statusid = 0;
            //                                }
            //                            }
            //                        }
            //                        _tranIds = _tranIds.TrimEnd(',');
            //                        //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);
            //                        SetView();
            //                    }

            //                    #endregion
            //                }
            //                break;
            //            case "Rejected":
            //                {
            //                    #region " Rejection Re-Queue Code "

            //                    if (c1RejectedClaims != null && c1RejectedClaims.Rows.Count > 0)
            //                    {
            //                        for (int i = 1; i < c1RejectedClaims.Rows.Count; i++)
            //                        {
            //                            if (c1RejectedClaims.GetCellCheck(i, c1RejectedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                            {
            //                                if (c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["Status"].Index) != null
            //                                    && Convert.ToString(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["Status"].Index)) != ""
            //                                    && Convert.ToInt32(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["TransactionStatusId"].Index)) == TransactionStatus.Rejected.GetHashCode())
            //                                {
            //                                    _tranId = Convert.ToInt64(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["nTransactionID"].Index));
            //                                    _patientId = Convert.ToInt64(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["nPatientID"].Index));
            //                                    _claimNo = Convert.ToInt64(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["ClaimNo"].Index));
            //                                    _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
            //                                    _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());
            //                                    gloPatient.gloPatient oPatient = new gloPatient.gloPatient(_databaseconnectionstring);
            //                                    DataTable oTable = new DataTable();
            //                                    oTable = oPatient.getPatientInsurances(_patientId, InsuranceTypeFlag.Primary.GetHashCode());
            //                                    if (oTable == null || oTable.Rows.Count == 0)
            //                                    {
            //                                        oTable = oPatient.getPatientInsurances(_patientId, InsuranceTypeFlag.Secondary.GetHashCode());
            //                                        if (oTable == null || oTable.Rows.Count == 0)
            //                                        {
            //                                            oTable = oPatient.getPatientInsurances(_patientId, InsuranceTypeFlag.Tertiary.GetHashCode());
            //                                            if (oTable != null && oTable.Rows.Count != 0)
            //                                            {
            //                                                _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                                _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                            }
            //                                            else
            //                                            {
            //                                                _insuranceid = 0;
            //                                                _sendclaimtype = gloPatient.TypeOfBilling.None;
            //                                            }
            //                                        }
            //                                        else
            //                                        {
            //                                            _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                            _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                        }
            //                                    }
            //                                    else
            //                                    {
            //                                        _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                        _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                    }

            //                                    //if (oTable != null && oTable.Rows.Count > 0)
            //                                    //{
            //                                    //    _insuranceid = Convert.ToInt64(oTable.Rows[0]["nInsuranceID"].ToString());
            //                                    //    _sendclaimtype = (gloPatient.TypeOfBilling)(Convert.ToInt32(oTable.Rows[0]["nTypeOBilling"]));
            //                                    //}



            //                                    _tranIds += _tranId.ToString() + ",";
            //                                    //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Queue);
            //                                    _statusid = ogloBilling.UpdateTransactionStatus(_patientId, 0, 0, "", 0, BatchType.Queue.GetHashCode(), 0, _tranId, _claimNo, 0, 0, TransactionStatus.ReQueue, _statusdate, _statustime, "", this.ClinicID, _insuranceid, _sendclaimtype);
            //                                    ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.ReQueue, _statusid);
            //                                    _tranId = 0;
            //                                    _patientId = 0;
            //                                    _claimNo = 0;
            //                                    _statusdate = 0;
            //                                    _statustime = 0;
            //                                    _insuranceid = 0;
            //                                    _sendclaimtype = gloPatient.TypeOfBilling.None;
            //                                    _statusid = 0;
            //                                }
            //                            }
            //                        }
            //                        _tranIds = _tranIds.TrimEnd(',');
            //                        //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);
            //                        SetView();
            //                    }

            //                    #endregion
            //                }
            //                break;
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            //}
            //finally
            //{
            //    if (ogloBilling != null) { ogloBilling.Dispose(); }
            //}
        }

        private void Finished_Click()
        {
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            //DialogResult _dlgRst = DialogResult.None;
            //string _tranIds = "";
            //Int64 _tranId = 0;
            //Int64 _patientId = 0;
            //Int64 _claimNo = 0;
            //Int64 _statusdate = 0;
            //Int64 _statustime = 0;
            //Int64 _statusId = 0;
            //Int64 _BatchId = 0;
            //string _BatchName = "";
            //Int64 _BatchDate = 0;
            //Int64 _BatchNumber = 0;

            //try
            //{
            //    if (Convert.ToString(tabMain.SelectedTab.Tag) == "ClaimManager")
            //    {
            //        switch (Convert.ToString(tabManager.SelectedTab.Tag))
            //        {
            //            case "Accepted":
            //                {
            //                    #region " Finish functionality for Accepted Claim "

            //                    if (c1AcceptedClaims != null && c1AcceptedClaims.Rows.Count > 0)
            //                    {
            //                        bool _isSelected = false;
            //                        if (c1AcceptedClaims.Rows.Count > 0 && c1AcceptedClaims.DataSource != null)
            //                        {
            //                            for (int ctr = 1; ctr < c1AcceptedClaims.Rows.Count; ctr++)
            //                            {
            //                                if (c1AcceptedClaims.GetCellCheck(ctr, c1AcceptedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                                { _isSelected = true; break; }
            //                            }
            //                        }
            //                        if (_isSelected == false)
            //                        {
            //                            MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                            return;
            //                        }

            //                        _dlgRst = MessageBox.Show("Are you sure you want mark claim as finished ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //                        if (_dlgRst == DialogResult.No) { return; }

            //                        DataTable dtBatch = new DataTable();
            //                        dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvRejected.SelectedNode.Tag));
            //                        //nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID
            //                        _BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
            //                        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
            //                        _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
            //                        _BatchNumber = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);

            //                        if (_BatchId > 0)
            //                        {
            //                            for (int i = 1; i < c1AcceptedClaims.Rows.Count; i++)
            //                            {
            //                                if (c1AcceptedClaims.GetCellCheck(i, c1AcceptedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                                {
            //                                    if (c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["Status"].Index) != null
            //                                        && Convert.ToString(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["Status"].Index)) != ""
            //                                        && Convert.ToInt32(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["TransactionStatusId"].Index)) == TransactionStatus.Accepted.GetHashCode())
            //                                    {
            //                                        _tranId = Convert.ToInt64(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["nTransactionID"].Index));
            //                                        _patientId = Convert.ToInt64(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["nPatientID"].Index));
            //                                        _claimNo = Convert.ToInt64(c1AcceptedClaims.GetData(i, c1AcceptedClaims.Cols["ClaimNo"].Index));
            //                                        _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
            //                                        _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

            //                                        _tranIds += _tranId.ToString() + ",";
            //                                        //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Rejected);
            //                                        _statusId = ogloBilling.UpdateTransactionStatus(_patientId, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNumber, _tranId, _claimNo, 0, 0, TransactionStatus.FullyPaid, _statusdate, _statustime, "", this.ClinicID, 0, gloPatient.TypeOfBilling.None);
            //                                        ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.FullyPaid, _statusId);
            //                                        _tranId = 0;
            //                                        _patientId = 0;
            //                                        _claimNo = 0;
            //                                        _statusdate = 0;
            //                                        _statustime = 0;
            //                                        _statusId = 0;
            //                                    }
            //                                }
            //                            }
            //                        }
            //                        _tranIds = _tranIds.TrimEnd(',');
            //                        //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);
            //                        SetView();
            //                    }

            //                    #endregion 
            //                }
            //                break;
            //            case "Rejected":
            //                {
            //                    #region " Finish functionality for Rejected Claim "

            //                    if (c1RejectedClaims != null && c1RejectedClaims.Rows.Count > 0)
            //                    {
            //                        bool _isSelected = false;
            //                        if (c1RejectedClaims.Rows.Count > 0 && c1RejectedClaims.DataSource != null)
            //                        {
            //                            for (int ctr = 1; ctr < c1RejectedClaims.Rows.Count; ctr++)
            //                            {
            //                                if (c1RejectedClaims.GetCellCheck(ctr, c1RejectedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                                { _isSelected = true; break; }
            //                            }
            //                        }
            //                        if (_isSelected == false)
            //                        {
            //                            MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                            return;
            //                        }

            //                        _dlgRst = MessageBox.Show("Are you sure you want mark claim as finished ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //                        if (_dlgRst == DialogResult.No) { return; }

            //                        DataTable dtBatch = new DataTable();
            //                        dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvRejected.SelectedNode.Tag));
            //                        //nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID
            //                        _BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
            //                        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
            //                        _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
            //                        _BatchNumber = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);

            //                        if (_BatchId > 0)
            //                        {
            //                            for (int i = 1; i < c1RejectedClaims.Rows.Count; i++)
            //                            {
            //                                if (c1RejectedClaims.GetCellCheck(i, c1RejectedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                                {
            //                                    if (c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["Status"].Index) != null
            //                                        && Convert.ToString(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["Status"].Index)) != ""
            //                                        && Convert.ToInt32(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["TransactionStatusId"].Index)) == TransactionStatus.Rejected.GetHashCode())
            //                                    {
            //                                        _tranId = Convert.ToInt64(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["nTransactionID"].Index));
            //                                        _patientId = Convert.ToInt64(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["nPatientID"].Index));
            //                                        _claimNo = Convert.ToInt64(c1RejectedClaims.GetData(i, c1RejectedClaims.Cols["ClaimNo"].Index));
            //                                        _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
            //                                        _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

            //                                        _tranIds += _tranId.ToString() + ",";
            //                                        //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Rejected);
            //                                        _statusId = ogloBilling.UpdateTransactionStatus(_patientId, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNumber, _tranId, _claimNo, 0, 0, TransactionStatus.FullyPaid, _statusdate, _statustime, "", this.ClinicID, 0, gloPatient.TypeOfBilling.None);
            //                                        ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.FullyPaid, _statusId);
            //                                        _tranId = 0;
            //                                        _patientId = 0;
            //                                        _claimNo = 0;
            //                                        _statusdate = 0;
            //                                        _statustime = 0;
            //                                        _statusId = 0;
            //                                    }
            //                                }
            //                            }
            //                        }
            //                        _tranIds = _tranIds.TrimEnd(',');
            //                        //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);
            //                        SetView();
            //                    }

            //                    #endregion 
            //                }
            //                break;
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{
            //    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            //}
        }

        #endregion

        private void tsb_ValidateNBatch_Click(object sender, EventArgs e)
        {

            ArrayList _trnsIds = new ArrayList();
           // gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();

            try
            {
                _isProcessingFiles = true;
                EnableDisableControls(false);

                if (Convert.ToString(tabManager.SelectedTab.Tag) == "Batch")
                {
                    if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
                    {
                        for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
                        {
                            if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                Int64 _tranId = 0;
                                _tranId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nTransactionID"].Index));
                                if (_tranId > 0)
                                {
                                    gloEDI.frmXMLClaim1500 ofrmXMLClaim1500 = new gloEDI.frmXMLClaim1500(_databaseconnectionstring, _tranId);
                                    ofrmXMLClaim1500.LoadTransaction();
                                    ofrmXMLClaim1500.Dispose();
                                }
                                _tranId = 0;
                            }
                        }
                    }
                }
                else if (Convert.ToString(tabManager.SelectedTab.Tag) == "SentBatch")
                {
                    if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 0)
                    {
                        for (int rowIndex = 1; rowIndex < c1BatchGridSentBatch.Rows.Count; rowIndex++)
                        {
                            if (c1BatchGridSentBatch.GetCellCheck(rowIndex, c1BatchGridSentBatch.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                Int64 _tranId = 0;
                                _tranId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["nTransactionID"].Index));
                                if (_tranId > 0)
                                {
                                    gloEDI.frmXMLClaim1500 ofrmXMLClaim1500 = new gloEDI.frmXMLClaim1500(_databaseconnectionstring, _tranId);
                                    ofrmXMLClaim1500.LoadTransaction();
                                    ofrmXMLClaim1500.Dispose();
                                }
                                _tranId = 0;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                EnableDisableControls(true);

            }
        }

        private void tsb_Send_PaperClaim_Click(object sender, EventArgs e)
        {
            Send_Click(false, false, false);
            SetView();
        }

        private void tsb_Send_ElectronicClaim_Click(object sender, EventArgs e)
        {
            Send_Click(true, false, false);
            SetView();
        }


        private void Validate_Click(bool IsBatch)
        {
            ArrayList _trnsIds = new ArrayList();
            ArrayList _MsttrnsIds = new ArrayList();
           // gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();

            try
            {
                _isProcessingFiles = true;
                EnableDisableControls(false);

                if (Convert.ToString(tabManager.SelectedTab.Tag) == "Queue")
                {
                    if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                    {
                        for (int rowIndex = 1; rowIndex < c1QueuedClaims.Rows.Count; rowIndex++)
                        {
                            if (c1QueuedClaims.GetCellCheck(rowIndex, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                Int64 _tranId = 0;
                                _tranId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionID"].Index));
                                Int64 _nMSTTransID = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionMasterID"].Index));

                                if (_tranId > 0) { _trnsIds.Add(_tranId); }
                                if (_nMSTTransID > 0) { _MsttrnsIds.Add(_nMSTTransID); }
                                // _tranId = 0;

                                //if (UB04Setting == true)
                                //{
                                //    if (Convert.ToInt16(BillingType.Institutional) == GetBillingType(_tranId, _nMSTTransID))
                                //    {
                                //        MessageBox.Show("Select professional claim(s). ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //        return;
                                //    }
                                //}
                            }
                        }

                        if (_trnsIds != null)
                        {
                            if (_trnsIds.Count > 0)
                            {
                                Int64 _ContactID = 0;
                                int _ContactIDIndex = 0;

                                DataTable _dtTmp = null;
                                if (IsBatch == true)
                                {
                                    if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                    {
                                        if (c1BatchGrid.DataSource != null)
                                        {
                                            _dtTmp = ((DataView)c1BatchGrid.DataSource).Table.Copy();
                                        }
                                        _ContactIDIndex = c1BatchGrid.Cols["ContactID"].Index;
                                        _ContactID = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["ContactID"].Index));

                                    }
                                    else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                    {
                                        if (c1BatchGridSentBatch.DataSource != null)
                                        {
                                            _dtTmp = ((DataView)c1BatchGridSentBatch.DataSource).Table.Copy();
                                        }
                                        _ContactIDIndex = c1BatchGridSentBatch.Cols["ContactID"].Index;
                                        _ContactID = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["ContactID"].Index));
                                    }
                                }
                                else
                                {
                                    if (c1QueuedClaims.DataSource != null)
                                    {
                                        _dtTmp = ((DataView)c1QueuedClaims.DataSource).Table.Copy();
                                    }
                                    _ContactIDIndex = c1QueuedClaims.Cols["ContactID"].Index;
                                    _ContactID = Convert.ToInt64(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["ContactID"].Index));
                                }
                                if (_dtTmp != null)
                                {

                                    _ContactID = GetContactID(_dtTmp, _ContactID, Convert.ToInt64(_trnsIds[0]), _ContactIDIndex);
                                    if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == BillingTypeMethod)
                                    {
                                        _IsValidated = ValidateEDIDataForAlternateID_5010(_MsttrnsIds, _trnsIds, false, _ContactID);
                                    }
                                    else
                                    {
                                        _IsValidated = ValidateEDIDataForAlternateID(_MsttrnsIds, _trnsIds, false, _ContactID);
                                    }
                                    _dtTmp.Dispose();
                                    _dtTmp = null;
                                }
                                else
                                {
                                    MessageBox.Show("No Records!", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                            }
                            else
                            {
                                MessageBox.Show("Select transaction.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                EnableDisableControls(true);
                _isProcessingFiles = false;
            }
        }

        #region "Send Sub Menus"

        private void Send_Click(bool SendElectronic, bool _IsReject, bool _DeleteSingle)
        {
            try
            {
                _isProcessingFiles = true;
                EnableDisableControls(false);
                if (SendElectronic == true)
                {
                    //SendElectronicClaim();//SendElectronicClaim(_IsReject, _DeleteSingle); //Old Send Method
                }
                else
                { SendPaperClaim(); }

            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                _isProcessingFiles = false;
                EnableDisableControls(true);
            }
        }

        #region " Commented Code Send_Click "

        //private void Send_Click(bool SendElectronic)
        //{
        //    ArrayList _trnsIds = new ArrayList();
        //    gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();
        //    Int64 _BatchId = 0;
        //    string _BatchName = "";
        //    Int64 _BatchDate = 0;
        //    Int64 _BatchNumber = 0;
        //    DataTable dtBatch = new DataTable();

        //    try
        //    {
        //        _isProcessingFiles = true;
        //        EnableDisableControls(false);
        //        if (SendElectronic == true)
        //        {
        //            if (Convert.ToString(tabManager.SelectedTab.Tag) == "Batch")
        //            {
        //                if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
        //                {
        //                    gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);

        //                    if (trvBatch.SelectedNode != null)
        //                    {
        //                        dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvBatch.SelectedNode.Tag));
        //                        //nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID
        //                        _BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
        //                        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
        //                        _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
        //                        _BatchNumber = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);
        //                    }

        //                    for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
        //                    {
        //                        if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
        //                        {
        //                            Int64 _tranId = 0;
        //                            Int64 _patientid = 0;
        //                            Int64 _statusdate = 0;
        //                            Int64 _statustime = 0;
        //                            Int64 _statusid = 0;
        //                            Int64 _claimNo = 0;

        //                            gloPatient.TypeOfBilling _sendclaimtype = gloPatient.TypeOfBilling.None;
        //                            _tranId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nTransactionID"].Index));
        //                            _patientid = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nPatientID"].Index));
        //                            //_sendclaimtype = ((gloPatient.TypeOfBilling)Convert.ToInt32(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nTypeOBilling"].Index)));
        //                            _sendclaimtype = gloPatient.TypeOfBilling.Electronic;
        //                            _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
        //                            _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());
        //                            _claimNo = Convert.ToInt64(c1BatchGrid.GetData(rowIndex,c1BatchGrid.Cols["ClaimNo"].Index));

        //                            if (_tranId > 0) 
        //                            {
        //                                _trnsIds.Add(_tranId);
        //                                ogloBilling.UpdateSentCounter(_tranId, _patientid, this.ClinicID); 
        //                                //Code added on 20090406 By- Sagar Ghodke
        //                                //Code added to make Status entry for claims sent to claim manager

        //                                _statusid = ogloBilling.UpdateTransactionStatus(_patientid,0,_BatchId,_BatchName,_BatchDate,BatchType.Batch.GetHashCode(),_BatchNumber,_tranId,_claimNo,0,0,TransactionStatus.SendToClaimManager,_statusdate, _statustime, "", this.ClinicID, 0, _sendclaimtype);
        //                                ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.SendToClaimManager, _statusid);
        //                                //End code added 20090406 - Sagar Ghodke

        //                            }
        //                            _tranId = 0;
        //                            _patientid = 0;
        //                            _sendclaimtype = gloPatient.TypeOfBilling.None;
        //                            _statusdate = 0;
        //                            _statustime = 0;
        //                            _statusid = 0;
        //                        }
        //                    }
        //                    ////Send to edi code goes here.....

        //                    //gloEDIGeneration ogloEDIGeneration = new gloEDIGeneration(_databaseconnectionstring, this.UserID, Convert.ToInt64(trvBatch.SelectedNode.Tag));
        //                    gloClaimManager ogloEDIGeneration = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
        //                    if (_trnsIds != null)
        //                    {
        //                        if (_trnsIds.Count > 0)
        //                        {
        //                            ogloEDIGeneration.LoadEDIObject();
        //                            _BatchName = trvBatch.SelectedNode.Text;
        //                            _EDIFileName = ogloEDIGeneration.EDI837Generation(_trnsIds, _BatchName);


        //                            string _ServerPath = GetServerPath();
        //                            string _BaseFolder = "Claim Management";
        //                            string _OutInFolder = "OutBox";
        //                            string _ClaimFolder = "837P Claim submission";
        //                            string _ElectroniPaperFolder = "Electronic";
        //                            string _BatchFolderName = trvBatch.SelectedNode.Text.Trim();
        //                            string _claimFolderPath = "";

        //                            _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _BatchFolderName;

        //                            if (System.IO.Directory.Exists(_claimFolderPath) == false)
        //                            {
        //                                System.IO.Directory.CreateDirectory(_claimFolderPath);
        //                            }


        //                            System.IO.FileInfo oFile = new System.IO.FileInfo(_EDIFileName);
        //                            System.IO.FileInfo[] oFileArray = null;
        //                            System.IO.DirectoryInfo oDirectoryInfo = new System.IO.DirectoryInfo(_claimFolderPath);
        //                            oFileArray = oDirectoryInfo.GetFiles();
        //                            bool _FileNameFound = false;
        //                            if (oFileArray.Length > 0)
        //                            {
        //                                for (int _fileIndex = 0; _fileIndex < oFileArray.Length; _fileIndex++)
        //                                {
        //                                    if (Convert.ToString(oFileArray[_fileIndex]) == oFile.Name)
        //                                    {
        //                                        _FileNameFound = true;
        //                                        break;
        //                                    } 
        //                                }
        //                            }
        //                            string _FileName = oFile.Name;
        //                            int i = 0;

        //                            string _CountIndex = "";
        //                            string _TrimFileName = "";
        //                            if (_FileNameFound == true)
        //                            {
        //                                _TrimFileName=oFile.Name.Replace("_", "").Replace(".txt","");
        //                                _CountIndex = _TrimFileName.Substring(_TrimFileName.Length - 2,1);

        //                                i = Convert.ToInt32(_CountIndex);
        //                                i++;
        //                                _FileName = _BatchName + "_" + i.ToString() + "." + "txt";
        //                            }
        //                            System.IO.File.Copy(_EDIFileName, _claimFolderPath + "\\" + _FileName);



        //                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ViewTransaction, gloAuditTrail.ActivityType.View, "Show EDI Data for selected Transaction", gloAuditTrail.ActivityOutCome.Success);
        //                        }
        //                        else
        //                        {
        //                            MessageBox.Show("Select transaction.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                        }
        //                    }
        //                    //ogloEDIGeneration.LoadAcknowledgementEDI();
        //                    //ogloEDIGeneration.ReadAcknowledgementFor837();
        //                    ogloEDIGeneration.Dispose();
        //                }
        //            }
        //        }
        //        else
        //        {
        //            if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
        //            {
        //                for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
        //                {
        //                    if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
        //                    {
        //                        Int64 _tranId = 0;
        //                        string _claimNo= "";
        //                        _tranId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nTransactionID"].Index));
        //                        _claimNo = Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Claim"].Index));
        //                        if (_tranId > 0) { oTrnIds.Add(_tranId, _claimNo); }
        //                        _tranId = 0;
        //                        _claimNo= "";
        //                    }
        //                }
        //                if (oTrnIds.Count > 0)
        //                {
        //                    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
        //                    ogloClaimManager.On_FileProcessed += new gloClaimManager.OnFileProcessed(ogloClaimManager_On_FileProcessed);
        //                    prgFileGeneration.Maximum = oTrnIds.Count;
        //                    prgFileGeneration.Value = 0;
        //                    prgFileGeneration.Style = ProgressBarStyle.Blocks;
        //                    prgFileGeneration.Step = 1;
        //                    lblFile.Text = "";
        //                    bool _IsClaimGenerated = ogloClaimManager.GeneratePaperClaim(Application.StartupPath, _ClinicID, ref oTrnIds,trvBatch.SelectedNode.Text.Trim(),Convert.ToInt64(trvBatch.SelectedNode.Tag));
        //                    ogloClaimManager.Dispose();
        //                    prgFileGeneration.Value = 0;
        //                    lblFile.Text = "";
        //                    lblFileCounter.Text = "";
        //                    Application.DoEvents();
        //                    if (_IsClaimGenerated)
        //                    {
        //                        MessageBox.Show("Claim file(s) generated sucessfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                    }
        //                    else
        //                    {
        //                        MessageBox.Show("Cannot generate claim file(s)", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                    }

        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }
        //    finally
        //    {
        //        EnableDisableControls(true);
        //        _isProcessingFiles = false;
        //    }
        //}

        #endregion " Commented Code Send_Click "

        void ogloClaimManager_On_FileProcessed(string fileName, string PatientName, int TotalFiles, int CurrentFileCounter)
        {
            try
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    lblFile.Text = "Generating Claim file for patient : " + PatientName + " ";
                    lblFile.AutoSize = true;
                    Application.DoEvents();
                    lblFileCounter.Text = " Claims remaining : " + (TotalFiles - CurrentFileCounter) + " out of " + TotalFiles.ToString() + " claims";
                    lblFileCounter.AutoSize = true;
                    prgFileGeneration.Increment(1);
                    prgFileGeneration.Refresh();
                    Application.DoEvents();
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    lblFile_SentBatch.Text = "Generating Claim file for patient : " + PatientName + " ";
                    lblFile_SentBatch.AutoSize = true;
                    Application.DoEvents();
                    lblFileCounter_SentBatch.Text = " Claims remaining : " + (TotalFiles - CurrentFileCounter) + " out of " + TotalFiles.ToString() + " claims";
                    lblFileCounter_SentBatch.AutoSize = true;
                    prgFileGeneration_SentBatch.Increment(1);
                    prgFileGeneration_SentBatch.Refresh();
                    Application.DoEvents();
                }

            }
            catch //(Exception ex)
            {
            }
        }

        private void SendElectronicClaim_Old()
        {
            ArrayList _trnsIds = new ArrayList();
         //   gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();
            Int64 _BatchId = 0;
            string _BatchName = "";
            Int64 _BatchDate = 0;
            Int64 _BatchNumber = 0;
            DataTable dtBatch = new DataTable();

            try
            {
                if (Convert.ToString(tabManager.SelectedTab.Tag) == "Batch")
                {
                    if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
                    {
                        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);

                        #region " Get selected Batch "

                        if (trvBatch.SelectedNode != null)
                        {
                            dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvBatch.SelectedNode.Tag));
                            //nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID
                            _BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
                            _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
                            _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
                            _BatchNumber = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);
                        }

                        #endregion " Get selected Batch "
                        _bSendingToBatch = true;
                        //..*Check if batch is sent or not
                        //if (GetBatchSentCounter(_BatchId, this.ClinicID) <= 0)
                        //{
                        #region " Get Batch Transactions "

                        for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
                        {
                            if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                Int64 _tranId = 0;
                                Int64 _patientid = 0;
                                Int64 _statusdate = 0;
                                Int64 _statustime = 0;
                                //  Int64 _statusid = 0;
                                Int64 _claimNo = 0;

                                //  gloPatient.TypeOfBilling _sendclaimtype = gloPatient.TypeOfBilling.None;
                                _tranId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionID"].Index));
                                _patientid = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientID"].Index));
                                //_sendclaimtype = ((gloPatient.TypeOfBilling)Convert.ToInt32(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nTypeOBilling"].Index)));
                                //  _sendclaimtype = gloPatient.TypeOfBilling.Electronic;
                                _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                                _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());
                                _claimNo = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["ClaimNo"].Index));

                                if (_tranId > 0)
                                {
                                    _trnsIds.Add(_tranId);
                                    ogloBilling.UpdateSentCounter(_tranId, _patientid, this.ClinicID);
                                    //Code added on 20090406 By- Sagar Ghodke
                                    //Code added to make Status entry for claims sent to claim manager

                                    //_statusid = ogloBilling.UpdateTransactionStatus(_patientid, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNumber, _tranId, _claimNo, 0, 0, TransactionStatus.SendToClaimManager, _statusdate, _statustime, "", this.ClinicID, 0, _sendclaimtype);
                                    //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.SendToClaimManager, _statusid);
                                    ////End code added 20090406 - Sagar Ghodke



                                }
                                _tranId = 0;
                                _patientid = 0;
                                //  _sendclaimtype = gloPatient.TypeOfBilling.None;
                                _statusdate = 0;
                                _statustime = 0;
                                //_statusid = 0;
                            }
                        }

                        #endregion " Get Batch Transactions "

                        #region " Generate EDI file "

                        gloClaimManager ogloEDIGeneration = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);

                        if (_trnsIds != null)
                        {
                            if (_trnsIds.Count > 0)
                            {
                                Boolean IsValidationEDI = false;
                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == BillingTypeMethod)
                                {
                                    IsValidationEDI = ValidateEDIDataForAlternateID_5010(_trnsIds, null, true, 0);
                                }
                                else
                                {
                                    IsValidationEDI = ValidateEDIDataForAlternateID(_trnsIds, null, true, 0);
                                }
                                if (IsValidationEDI == true)
                                {
                                    //ogloEDIGeneration.LoadEDIObject();
                                    _BatchName = trvBatch.SelectedNode.Text;
                                    //_EDIFileName = ogloEDIGeneration.EDI837Generation(_trnsIds, _BatchName);
                                    _EDIFileName = ogloEDIGeneration.EDI837Generation_New(_trnsIds, _BatchName, false, 0, null, 0);
                                    if (_EDIFileName.Trim() != "")
                                    {
                                        //if (System.IO.File.Exists(_EDIFileName) == true)
                                        //{
                                        //    UpdateBatchSentCounter(_BatchId, this.ClinicID);
                                        //}

                                        string _ServerPath = GetServerPath();
                                        string _BaseFolder = "Claim Management";
                                        string _OutInFolder = "OutBox";
                                        string _ClaimFolder = "837P Claim submission";
                                        string _ElectroniPaperFolder = "Electronic";
                                        string _BatchFolderName = trvBatch.SelectedNode.Text.Trim();
                                        string _claimFolderPath = "";

                                        _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;

                                        if (System.IO.Directory.Exists(_claimFolderPath) == false)
                                        {
                                            System.IO.Directory.CreateDirectory(_claimFolderPath);
                                        }

                                        System.IO.FileInfo oFile = new System.IO.FileInfo(_EDIFileName);
                                        System.IO.FileInfo[] oFileArray = null;
                                        System.IO.DirectoryInfo oDirectoryInfo = new System.IO.DirectoryInfo(_claimFolderPath);
                                        oFileArray = oDirectoryInfo.GetFiles();
                                        bool _FileNameFound = true;
                                        if (oFileArray.Length > 0)
                                        {
                                            for (int _fileIndex = 0; _fileIndex < oFileArray.Length; _fileIndex++)
                                            {
                                                if (Convert.ToString(oFileArray[_fileIndex]) == oFile.Name)
                                                {
                                                    _FileNameFound = false;
                                                }
                                            }
                                        }
                                        string _FileName = oFile.Name;
                                        int i = 0;

                                        string _CountIndex = "";
                                        string _TrimFileName = "";
                                        if (_FileNameFound == false)
                                        {
                                            _TrimFileName = oFile.Name.Replace("_", "").Replace(".txt", "");
                                            _CountIndex = _TrimFileName.Substring(_TrimFileName.Length - 1, 1);

                                            i = Convert.ToInt32(_CountIndex);
                                            i++;
                                            _FileName = _BatchName + "_" + i.ToString() + "." + "txt";
                                        }
                                        System.IO.File.Copy(_EDIFileName, _claimFolderPath + "\\" + _FileName);

                                        //MaheshB 20091202
                                        for (int _counter = 0; _counter < _trnsIds.Count; _counter++)
                                        {
                                            UpdateTransactionStatus(Convert.ToInt64(_trnsIds[_counter]), TransactionStatus.SendToClaimManager);
                                        }


                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ViewTransaction, gloAuditTrail.ActivityType.View, "Show EDI Data for selected Transaction", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                                    }
                                    else
                                    {
                                        MessageBox.Show("Claim file not created.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }
                            }
                            else
                            {
                                MessageBox.Show("Please Select transaction.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }
                        //ogloEDIGeneration.LoadAcknowledgementEDI();
                        //ogloEDIGeneration.ReadAcknowledgementFor837();
                        ogloEDIGeneration.Dispose();

                        #endregion " Generate EDI file "
                        //}
                        //else
                        //{
                        //    MessageBox.Show("Selected Batch is already sent to claim Manager", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //}
                        if (ogloBilling != null)
                        {
                            ogloBilling.Dispose();
                            ogloBilling = null;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private bool SendElectronicClaim(Int32 nBillingMethod)
        {

            ArrayList _trnsIds = new ArrayList();
            ArrayList _trnsMstIds = new ArrayList();//UB04
            gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();
            gloGeneralItem.gloItem oTrnID;
            Int64 _BatchId = 0;
            string _BatchName = "";


           // DataTable dtBatch = new DataTable();
            DataTable dtTransaction = null;
            Int64 _ContactID = 0;

            string _InsurancePaidClaimNo = String.Empty;
            string _sendToClaimManagerClaimNo = String.Empty;



            Int64 _tranId = 0;
            Int64 _patientid = 0;
            Int64 _claimNo = 0;
            string _SubClaimNo = "";
            Int64 _MastertranId = 0;

            Boolean _IsEDIGenrated = false;

            dsEDIClaimdetails odsEDIClaimDetail = new dsEDIClaimdetails();

            try
            {
                #region " Get selected Batch "

                //if (trvBatch.SelectedNode != null)
                //{
                //    _BatchId = Convert.ToInt64(trvBatch.SelectedNode.Tag);
                //    _BatchName = Convert.ToString(trvBatch.SelectedNode.Text);

                //}

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index));
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index));
                    }
                }

                #endregion " Get selected Batch "

                #region " Get Transactions For a Batch "

                dtTransaction = GetBatchTransaction(_BatchId);


                #endregion

                if (dtTransaction != null && dtTransaction.Rows.Count > 0)
                {
                    _bSendingToBatch = true;

                    #region " Get Batch Transactions "

                    _BillingTypeId = 1;
                    for (int rowIndex = 0; rowIndex < dtTransaction.Rows.Count; rowIndex++)
                    {

                        if (((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.InsurancePaid)
                            && ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Rebilled)
                            && ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Resent)
                            )
                        {
                            _tranId = 0;
                            _MastertranId = 0;
                            _claimNo = 0;
                            _SubClaimNo = "";
                            _patientid = 0;
                            _ContactID = 0;

                            _tranId = Convert.ToInt64(dtTransaction.Rows[rowIndex]["TransactionID"]);
                            _patientid = Convert.ToInt64(dtTransaction.Rows[rowIndex]["PatientID"]);


                            _claimNo = Convert.ToInt64(dtTransaction.Rows[rowIndex]["ClaimNo"]);
                            _SubClaimNo = Convert.ToString(dtTransaction.Rows[rowIndex]["SubClaimNo"]);
                            _MastertranId = Convert.ToInt64(dtTransaction.Rows[rowIndex]["TransactionMasterID"]);
                            _ContactID = Convert.ToInt64(dtTransaction.Rows[rowIndex]["ContactID"]);

                            if (_tranId > 0)
                            {
                                _trnsIds.Add(_tranId);
                                _trnsMstIds.Add(_MastertranId);
                                oTrnID = new gloGeneralItem.gloItem();
                                oTrnID.ID = _tranId; // TRANSACTION ID //
                                oTrnID.Code = _claimNo.ToString(); // CLAIM NUMBER // 
                                oTrnID.Description = _SubClaimNo; // SUBCLAIM NUMBER //
                                oTrnIds.Add(oTrnID);

                                //ogloBilling.UpdateSentCounter(_tranId, _patientid, this.ClinicID);


                                if (((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) == TransactionStatus.SendToClaimManager)
                                || ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) == TransactionStatus.SendToClearingHouse))
                                {
                                    if (_sendToClaimManagerClaimNo != "")
                                    {
                                        _sendToClaimManagerClaimNo = _sendToClaimManagerClaimNo + ",";
                                    }
                                    _sendToClaimManagerClaimNo = _sendToClaimManagerClaimNo + Convert.ToString(dtTransaction.Rows[rowIndex]["Claim"]);
                                }
                                oTrnID.Dispose();
                                oTrnID = null;

                            }

                            if (UB04Setting == true)
                            {
                                if (_trnsIds.Count == 1)
                                {
                                    _BillingTypeId = GetBillingType(_tranId, _MastertranId);
                                }
                                else if (_BillingTypeId != GetBillingType(_tranId, _MastertranId))
                                {
                                    MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return _IsEDIGenrated;
                                }
                            }

                            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                            {
                                if (lblClearinghouseValue.Text.Trim().ToUpper() == "MULTIPLE" && _IsMultipleClearingHouse == true)
                                {
                                    MessageBox.Show("Batch contains multiple clearinghouses. Unable to send batch electronically.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return _IsEDIGenrated;
                                }
                            }
                            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                            {
                                if (lblClearinghouseValue_SentBatch.Text.Trim().ToUpper() == "MULTIPLE" && _IsMultipleClearingHouse == true)
                                {
                                    MessageBox.Show("Batch contains multiple clearinghouses. Unable to send batch electronically.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return _IsEDIGenrated;
                                }
                            }


                        }
                        else if ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) == TransactionStatus.InsurancePaid)
                        {
                            if (_InsurancePaidClaimNo != "")
                            {
                                _InsurancePaidClaimNo = _InsurancePaidClaimNo + ",";
                            }
                            _InsurancePaidClaimNo = _InsurancePaidClaimNo + Convert.ToString(dtTransaction.Rows[rowIndex]["Claim"]);

                        }

                    }


                    #endregion " Get Batch Transactions "

                    #region " Generate EDI file "

                    



                    if (_trnsIds != null)
                    {
                        gloClaimManager ogloEDIGeneration = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
                        if (_trnsIds.Count > 0)
                        {
                            DataTable _dtTmp = null;
                            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                            {
                                _dtTmp = ((DataView)c1BatchGrid.DataSource).Table.Copy();
                                _ContactID = GetContactID(_dtTmp, _ContactID, Convert.ToInt64(_trnsIds[0]), c1BatchGrid.Cols["ContactID"].Index);
                            }
                            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                            {
                                _dtTmp = ((DataView)c1BatchGridSentBatch.DataSource).Table.Copy();
                                _ContactID = GetContactID(_dtTmp, _ContactID, Convert.ToInt64(_trnsIds[0]), c1BatchGridSentBatch.Cols["ContactID"].Index);
                            }
                            if (_dtTmp != null)
                            {
                                _dtTmp.Dispose();
                                _dtTmp = null;
                            }

                            Boolean IsValidationEDI = false;
                            if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == BillingTypeMethod)
                            {
                                IsValidationEDI = ValidateEDIDataForAlternateID_5010(_trnsMstIds, _trnsIds, true, _ContactID);
                            }
                            else
                            {
                                IsValidationEDI = ValidateEDIDataForAlternateID(_trnsMstIds, _trnsIds, true, _ContactID);
                            }

                            if (IsValidationEDI == true)
                            {

                                #region " INSURANCE PAID MESSAGEBOX "

                                _InsurancePaidClaimNo.TrimEnd(',');

                                if (_InsurancePaidClaimNo != "" && _InsurancePaidClaimNo != "," && dtTransaction != null && dtTransaction.Rows.Count > 0)
                                {
                                    MessageBox.Show("Claim#(s) " + _InsurancePaidClaimNo + " will be excluded as payment has been done against it. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                }

                                #endregion

                                #region RESEND MessageBox

                                _sendToClaimManagerClaimNo.TrimEnd(',');
                                bool Resend = false;
                                DialogResult _dlg;
                                if (_sendToClaimManagerClaimNo != "" && _sendToClaimManagerClaimNo != ",")
                                {
                                    _dlg = MessageBox.Show("Batch will be resent to Claim manager.\nContinue? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                    Resend = true;
                                }
                                else
                                {
                                    _dlg = DialogResult.Yes;
                                }

                                #endregion


                                if (_dlg == DialogResult.Yes)
                                {

                                    string _result = "";
                                    gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
                                    Object _objResult = null;

                                    #region Method For EDI generation
                                    bool _isPrimarybatch = false;
                                    if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                    { _isPrimarybatch = rbPrimaryClaimsBatch.Checked; }
                                    else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                    { _isPrimarybatch = rbPrimaryClaimsBatch_SentBatch.Checked; }

                                    //if (rbPrimaryClaimsBatch.Checked == true)
                                    if (_isPrimarybatch == true)
                                    {
                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                        {
                                            _objResult = null;
                                            _result = "";
                                            oSettings.GetSetting("EDIGENERATIONTYPECMS1500", out _objResult);
                                            _result = Convert.ToString(_objResult);

                                            if (_result.Trim().ToUpper() == "BYSP")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSP(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "PRIMARY");
                                            }
                                            else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                            {
                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod)
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837Generation_5010(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                                else
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837Generation_New(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                            }
                                            else if (_result.Trim().ToUpper() == "BYSERVICE")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Primary, EDIService.EDIType.Professional);
                                            }

                                        }
                                        else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                        {
                                            //5070 MaheshB

                                            _objResult = null;
                                            _result = "";
                                            oSettings.GetSetting("EDIGENERATIONTYPEUB", out _objResult);
                                            _result = Convert.ToString(_objResult);

                                            if (_result.Trim().ToUpper() == "BYSP")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSPUB(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "PRIMARY");
                                            }
                                            else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                            {

                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB_5010(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                                else
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }

                                            }
                                            else if (_result.Trim().ToUpper() == "BYSERVICE")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Primary, EDIService.EDIType.Institutional);
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                        {
                                            _objResult = null;
                                            _result = "";
                                            oSettings.GetSetting("EDIGENERATIONTYPECMS1500", out _objResult);
                                            _result = Convert.ToString(_objResult);


                                            if (_result.Trim().ToUpper() == "BYSP")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSP(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "SECONDARY");
                                            }
                                            else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                            {
                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod)
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837GenerationForSecondary_5010(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                                else
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837GenerationForSecondary_New(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                            }
                                            else if (_result.Trim().ToUpper() == "BYSERVICE")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Secondary, EDIService.EDIType.Professional);
                                            }

                                        }
                                        else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                        {
                                            _objResult = null;
                                            _result = "";
                                            oSettings.GetSetting("EDIGENERATIONTYPEUB", out _objResult);
                                            _result = Convert.ToString(_objResult);


                                            if (_result.Trim().ToUpper() == "BYSP")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSPUB(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "SECONDARY");
                                            }
                                            else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                            {
                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB_Secondary_5010(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                                else
                                                {
                                                    _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB_Secondary(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                }
                                            }
                                            else if (_result.Trim().ToUpper() == "BYSERVICE")
                                            {
                                                //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Secondary, EDIService.EDIType.Institutional);
                                            }



                                        }
                                    }

                                    #endregion
                                                                       

                                    if (_EDIFileName.Trim() != "")
                                    {
                                        MessageBox.Show("EDI claim generated successfully.", "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    
                                        #region "Save Data in New  Table"

                                        //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                        //gloDatabaseLayer.DBParameters oDBPara;
                                        //object _Dresult;
                                        //for (int i = 0; i < dtTransaction.Rows.Count; i++)
                                        //{
                                        //    oDBPara = new gloDatabaseLayer.DBParameters();
                                        //    oDBPara.Add("@nTransactionMasterID", (dtTransaction.Rows[i]["TransactionMasterID"]), ParameterDirection.Input, SqlDbType.BigInt);
                                        //    oDBPara.Add("@nTransactionID", (dtTransaction.Rows[i]["TransactionID"]), ParameterDirection.Input, SqlDbType.BigInt);
                                        //    oDBPara.Add("@nBatchID", (_BatchId), ParameterDirection.Input, SqlDbType.BigInt);
                                        //    oDBPara.Add("@sBatchName", (_BatchName), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@nClaim", (dtTransaction.Rows[i]["Claim"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@dateofservice", (dtTransaction.Rows[i]["Date"]), ParameterDirection.Input, SqlDbType.DateTime);
                                        //    oDBPara.Add("@Charges", (dtTransaction.Rows[i]["dtotal"]), ParameterDirection.Input, SqlDbType.BigInt);
                                        //    oDBPara.Add("@PatientCode", (dtTransaction.Rows[i]["PatientCode"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@PatientFullName", (dtTransaction.Rows[i]["PatientFullName"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@ProviderFullName", (dtTransaction.Rows[i]["ProviderFullName"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@InsuerdsID", (dtTransaction.Rows[i]["InsuerdsID"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@Insurance", (dtTransaction.Rows[i]["Insurance"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@BillingType", (dtTransaction.Rows[i]["BillingType"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@BillingTypeID", (dtTransaction.Rows[i]["BillingTypeId"]), ParameterDirection.Input, SqlDbType.VarChar);
                                        //    oDBPara.Add("@nClaimStatus", (TransactionStatus.SendToClaimManager), ParameterDirection.Input, SqlDbType.BigInt);
                                        //    oDBPara.Add("@BillingTypeMethod", BillingTypeMethod, ParameterDirection.Input, SqlDbType.BigInt);
                                        //    oDB.Connect(false);
                                        //    oDB.Execute("BL_IN_Batch_Sended", oDBPara);
                                        //}

                                    #endregion

                                        if (_sendToClaimManagerClaimNo != "" && _sendToClaimManagerClaimNo != ",")
                                        {
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.ResendToClaimManager, "Batch named-" + _BatchName + " resent to claim manager  [Billing Method: " + ((BatchBillingMethod)BillingTypeMethod) + "]", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                        }
                                        else
                                        {
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.SendtoClaimManager, "Batch named-" + _BatchName + " sent to claim manager  [Billing Method: " + ((BatchBillingMethod)BillingTypeMethod) + "]", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                        }

                                        //if (System.IO.File.Exists(_EDIFileName) == true)
                                        //{
                                        //    UpdateBatchSentCounter(_BatchId, this.ClinicID);
                                        //}

                                        #region " Save the file on Server As per name"
                                        //20100414 Mahesh Nawal
                                        if (_CopyEDIFiles == true)
                                        {
                                            string _ServerPath = GetServerPath();
                                            string _BaseFolder = "Claim Management";
                                            string _OutInFolder = "OutBox";
                                            string _ClaimFolder = "837P Claim submission";
                                            string _ElectroniPaperFolder = "Electronic";
                                            //string _BatchFolderName = trvBatch.SelectedNode.Text.Trim();
                                            string _BatchFolderName = _BatchName;
                                            string _claimFolderPath = "";

                                            _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;
                                            if (System.IO.Directory.Exists(_claimFolderPath) == false)
                                            {
                                                System.IO.Directory.CreateDirectory(_claimFolderPath);
                                            }
                                            string _FileName = "";// oFile.Name;
                                            int i = 1;
                                            bool _DocNameFound = true;
                                            _FileName = _BatchName + "_" + i.ToString() + "." + "txt";
                                            while (_DocNameFound == true)
                                            {
                                                _DocNameFound = System.IO.File.Exists(_claimFolderPath + "\\" + _FileName);
                                                if (_DocNameFound == true)
                                                {
                                                    try
                                                    {
                                                        System.IO.File.Delete(_claimFolderPath + "\\" + _FileName);
                                                    }
                                                    catch { }
                                                }
                                            }
                                            System.IO.File.Copy(_EDIFileName, _claimFolderPath + "\\" + _FileName);
                                        }
                                        #endregion

                                        # region "Save Electronic Claim in DataBase "
                                        /*
                                             SUDHIR 20100212 // SAVE E-CLAIM TO DATABASE //
                                            
                                            Int64 _ElectronicClaimID = 0;
                                          
                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod ||   Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                                {
                                                    _ElectronicClaimID = SaveElectronicClaim(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Professional, nBillingMethod);
                                                }
                                                
                                                else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod)
                                                {
                                                    _ElectronicClaimID = SaveElectronicClaim(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Institutional, nBillingMethod);
                                                }

                                          
                                            if (_ElectronicClaimID > 0)
                                            {
                                                for (int _counter = 0; _counter < _trnsIds.Count; _counter++)
                                                {
                                                    UpdateTransactionStatus(Convert.ToInt64(_trnsIds[_counter]), TransactionStatus.SendToClaimManager);
                                                    SaveElectronicClaimDetail(_ElectronicClaimID, Convert.ToInt64(oTrnIds[_counter].Code), oTrnIds[_counter].Description, Convert.ToInt64(oTrnIds[_counter].ID));
                                                }
                                            }
                                            */

                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                        {
                                            ogloEDIGeneration.SetElectronicClaimTVP(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Professional, nBillingMethod, odsEDIClaimDetail);
                                        }
                                        else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                        {
                                            ogloEDIGeneration.SetElectronicClaimTVP(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Institutional, nBillingMethod, odsEDIClaimDetail);
                                        }


                                        ogloEDIGeneration.SetElectronicClaimDetailTVP(oTrnIds, odsEDIClaimDetail);
                                        ogloEDIGeneration.SaveElectronicClaimTVP(odsEDIClaimDetail);

                                        #endregion

                                        _IsEDIGenrated = true;
                                    }
                                    else
                                    {
                                        _IsEDIGenrated = false;
                                        MessageBox.Show("EDI claim not generated.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                    if (oSettings != null)
                                    {
                                        oSettings.Dispose();
                                        oSettings = null;
                                    }
                                }

                            }


                        }
                        else
                        {

                            MessageBox.Show("Please select claims having status Batch/SendToClaimManager/SendToClearinghouse ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            _IsEDIGenrated = false;
                        }

                        ogloEDIGeneration.Dispose();

                    }

                    #endregion " Generate EDI file "
                }
                return _IsEDIGenrated;
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return _IsEDIGenrated;
            }
            finally
            {
                if (_trnsIds != null) { _trnsIds = null; }
                if (_trnsMstIds != null) { _trnsMstIds = null; }
                if (oTrnIds != null) { oTrnIds = null; }
                if (odsEDIClaimDetail != null) { odsEDIClaimDetail.Dispose(); }
                if (dtTransaction != null)
                {
                    dtTransaction.Dispose();
                    dtTransaction = null;
                }
            }


        }

        private void SendElectronicClaimUndo(Int32 nBillingMethod)
        {

            ArrayList _trnsIds = new ArrayList();
            ArrayList _trnsMstIds = new ArrayList();//UB04
            gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();
            gloGeneralItem.gloItem oTrnID;
            Int64 _BatchId = 0;
            string _BatchName = "";
          //  DataTable dtBatch = new DataTable();
            DataTable dtTransaction = null;
            Int64 _ContactID = 0;
            string _InsurancePaidClaimNo = String.Empty;
            string _sendToClaimManagerClaimNo = String.Empty;
            Int64 _tranId = 0;
            Int64 _patientid = 0;
            Int64 _claimNo = 0;
            string _SubClaimNo = "";
            Int64 _MastertranId = 0;
            Int64 _CurrentClearingHouseID = 0;
            Int64 _PrevClearingHouseID = 0;
            bool _MessageShown = false;
            dsEDIClaimdetails odsEDIClaimDetail = new dsEDIClaimdetails();

            try
            {
                //_c1flexGrid should be set in calling method
                if (_c1flexGridForClaims != null && _c1flexGridForClaims.Rows.Count > 1)
                {
                    //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);

                    _bSendingToBatch = true;

                    #region " Get selected Batch "

                    //if (trvBatch.SelectedNode != null)
                    //{
                    //    _BatchId = Convert.ToInt64(trvBatch.SelectedNode.Tag);
                    //    _BatchName = Convert.ToString(trvBatch.SelectedNode.Text);

                    //}

                    if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                    {
                        if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                        {
                            _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                            _BatchName = Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index));
                            //_nBillingmethod = Convert.ToInt32(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["BillingMethodID"].Index));
                        }
                    }
                    else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                    {
                        if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                        {
                            _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));
                            _BatchName = Convert.ToString(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index));
                            //_nBillingmethod = Convert.ToInt32(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["BillingMethodID"].Index));
                        }
                    }


                    #endregion " Get selected Batch "

                    #region " Get Transactions For a Batch "

                    dtTransaction = GetBatchTransaction(_BatchId);


                    #endregion

                    #region " Get Batch Transactions Filtered"


                    _BillingTypeId = 1;
                    if (dtTransaction != null && dtTransaction.Rows.Count > 0)
                    {
                        for (int rowIndex = 0; rowIndex < dtTransaction.Rows.Count; rowIndex++)
                        {

                            if (((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.InsurancePaid)
                                                               && ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.InsurancePaid)
                                                               && ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Rebilled)
                                                               && ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Resent)
                                                               && ((TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Batch)
                                                               )
                            {

                                _tranId = Convert.ToInt64(dtTransaction.Rows[rowIndex]["TransactionID"]);
                                _patientid = Convert.ToInt64(dtTransaction.Rows[rowIndex]["PatientID"]);

                                _claimNo = Convert.ToInt64(dtTransaction.Rows[rowIndex]["ClaimNo"]);
                                _SubClaimNo = Convert.ToString(dtTransaction.Rows[rowIndex]["SubClaimNo"]);
                                _MastertranId = Convert.ToInt64(dtTransaction.Rows[rowIndex]["TransactionMasterID"]);
                                _ContactID = Convert.ToInt64(dtTransaction.Rows[rowIndex]["ContactID"]);

                                if (_tranId > 0)
                                {
                                    _trnsIds.Add(_tranId);
                                    _trnsMstIds.Add(_MastertranId);
                                    oTrnID = new gloGeneralItem.gloItem();
                                    oTrnID.ID = _tranId; // TRANSACTION ID //
                                    oTrnID.Code = _claimNo.ToString(); // CLAIM NUMBER // 
                                    oTrnID.Description = _SubClaimNo; // SUBCLAIM NUMBER //
                                    oTrnIds.Add(oTrnID);
                                    oTrnID.Dispose();
                                    oTrnID = null;
                                }

                                if (UB04Setting == true)
                                {
                                    if (_trnsIds.Count == 1)
                                    {
                                        _BillingTypeId = GetBillingType(_tranId, _MastertranId);
                                    }
                                    else if (_BillingTypeId != GetBillingType(_tranId, _MastertranId))
                                    {
                                        MessageBox.Show("Claim(s) do not have same billing type.  Unable to send batch electronically.   ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }
                                //if (lblClearinghouseValue.Text.Trim().ToUpper() == "MULTIPLE" && _IsMultipleClearingHouse == true && _IsReject == false)
                                //{
                                //    MessageBox.Show("Batch contains multiple clearinghouses.  Unable to send batch electronically.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //    return;
                                //}

                                _CurrentClearingHouseID = 0;
                                Int64 iRow = 0;
                                iRow = Convert.ToInt64(_c1flexGridForClaims.GetData(_c1flexGridForClaims.RowSel, _c1flexGridForClaims.Cols["TransactionID"].Index));
                                if (iRow != Convert.ToInt64(dtTransaction.Rows[rowIndex]["TransactionID"]))
                                {
                                    _CurrentClearingHouseID = GetClearingHouseUndo(Convert.ToInt64(dtTransaction.Rows[rowIndex]["ContactID"]), _ClinicID);
                                }
                                if (dtTransaction.Rows.Count != 2 && _PrevClearingHouseID != _CurrentClearingHouseID && _MessageShown == false && _PrevClearingHouseID != 0)
                                {
                                    MessageBox.Show("Batch contains multiple clearinghouses. Unable to send batch electronically.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    _MessageShown = true;
                                }
                                _PrevClearingHouseID = _CurrentClearingHouseID;

                                _tranId = 0;
                                _patientid = 0;
                                _claimNo = 0;
                                _SubClaimNo = "";
                                _MastertranId = 0;
                            }
                            else if (Convert.ToString(dtTransaction.Rows[rowIndex]["nStatus"]) != "" && (TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) == TransactionStatus.InsurancePaid)
                            {
                                if (_InsurancePaidClaimNo != "")
                                {
                                    _InsurancePaidClaimNo = _InsurancePaidClaimNo + ",";
                                }
                                _InsurancePaidClaimNo = _InsurancePaidClaimNo + Convert.ToString(dtTransaction.Rows[rowIndex]["Claim"]);

                            }

                        }



                    #endregion " Get Batch Transactions "

                        #region " Remove Selected TransactionID "
                        int nbeforecount = 0;
                        if (_trnsIds != null)
                        {
                            nbeforecount = _trnsIds.Count;
                        }
                        _trnsIds.Remove(Convert.ToInt64(_c1flexGridForClaims.GetData(_c1flexGridForClaims.RowSel, _c1flexGridForClaims.Cols["TransactionID"].Index)));
                        if (nbeforecount != _trnsIds.Count)
                        {
                            _trnsMstIds.Remove(Convert.ToInt64(_c1flexGridForClaims.GetData(_c1flexGridForClaims.RowSel, _c1flexGridForClaims.Cols["TransactionMasterID"].Index)));
                        }

                        for (int i = 0; i <= oTrnIds.Count - 1; i++)
                        {
                            if (oTrnIds[i].ID == Convert.ToInt64(_c1flexGridForClaims.GetData(_c1flexGridForClaims.RowSel, _c1flexGridForClaims.Cols["TransactionID"].Index)))
                            {
                                oTrnIds.RemoveAt(i);
                                break;
                            }
                        }

                        #endregion

                        #region " Generate EDI file "

                        gloClaimManager ogloEDIGeneration = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);

                        if (_trnsIds != null)
                        {
                            if (_trnsIds.Count > 0)
                            {
                                DataTable _dtTmp = null;
                                _dtTmp = dtTransaction.Copy();
                                _ContactID = GetContactID(_dtTmp, _ContactID, Convert.ToInt64(_trnsIds[0]), 0);
                                _dtTmp.Dispose();
                                _dtTmp = null;
                                Boolean IsValidationEDI = false;

                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == BillingTypeMethod)
                                {
                                    IsValidationEDI = ValidateEDIDataForAlternateID_5010(_trnsMstIds, _trnsIds, true, _ContactID);
                                }
                                else
                                {
                                    IsValidationEDI = ValidateEDIDataForAlternateID(_trnsMstIds, _trnsIds, true, _ContactID);
                                }

                                if (ValidateEDIDataForAlternateID(_trnsMstIds, _trnsIds, true, _ContactID) == true)
                                {
                                    //_BatchName = trvBatch.SelectedNode.Text;

                                    if (_InsurancePaidClaimNo.EndsWith(",") == true)
                                    {
                                        _InsurancePaidClaimNo.Remove(_InsurancePaidClaimNo.Length - 1, 1);
                                    }

                                    #region Method for EDI generation

                                    if (_trnsIds.Count > 0)
                                    {


                                        string _result = "";
                                        gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
                                        Object _objResult = null;


                                        if (rbPrimaryClaimsBatch.Checked == true)
                                        {
                                            if (UB04Setting == true)
                                            {
                                                //    if (Convert.ToInt16(BillingType.Professional) == GetBillingType(Convert.ToInt64(_trnsIds[0]), Convert.ToInt64(_trnsMstIds[0])))
                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                                {

                                                    _objResult = null;
                                                    _result = "";
                                                    oSettings.GetSetting("EDIGENERATIONTYPECMS1500", out _objResult);
                                                    _result = Convert.ToString(_objResult);


                                                    if (_result.Trim().ToUpper() == "BYSP")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSP(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "PRIMARY");
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                                    {
                                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod)
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837Generation_5010(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                        else
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837Generation_New(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYSERVICE")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Primary, EDIService.EDIType.Professional);
                                                    }
                                                }
                                                // else if (Convert.ToInt16(BillingType.Institutional) == GetBillingType(Convert.ToInt64(_trnsIds[0]), Convert.ToInt64(_trnsMstIds[0])))
                                                else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                                {
                                                    //5070 MaheshB
                                                    _objResult = null;
                                                    _result = "";
                                                    oSettings.GetSetting("EDIGENERATIONTYPEUB", out _objResult);
                                                    _result = Convert.ToString(_objResult);

                                                    if (_result.Trim().ToUpper() == "BYSP")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSPUB(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "PRIMARY");
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                                    {
                                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB_5010(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                        else
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYSERVICE")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Primary, EDIService.EDIType.Institutional);
                                                    }
                                                }
                                            }
                                            else
                                            {

                                                _objResult = null;
                                                _result = "";
                                                oSettings.GetSetting("EDIGENERATIONTYPECMS1500", out _objResult);
                                                _result = Convert.ToString(_objResult);

                                                if (_result.Trim().ToUpper() == "BYSP")
                                                {
                                                    //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSP(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "PRIMARY");
                                                }
                                                else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                                {
                                                    if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod)
                                                    {
                                                        _EDIFileName = ogloEDIGeneration.EDI837Generation_5010(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                    }
                                                    else
                                                    {
                                                        _EDIFileName = ogloEDIGeneration.EDI837Generation_New(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                    }
                                                }
                                                else if (_result.Trim().ToUpper() == "BYSERVICE")
                                                {
                                                    //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Primary, EDIService.EDIType.Professional);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (UB04Setting == true)
                                            {

                                                _objResult = null;
                                                _result = "";
                                                oSettings.GetSetting("EDIGENERATIONTYPECMS1500", out _objResult);
                                                _result = Convert.ToString(_objResult);


                                                // if (Convert.ToInt16(BillingType.Professional) == GetBillingType(Convert.ToInt64(_trnsIds[0]), Convert.ToInt64(_trnsMstIds[0])))
                                                if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                                {
                                                    if (_result.Trim().ToUpper() == "BYSP")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSP(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "SECONDARY");
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                                    {
                                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod)
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837Generation_5010(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                        else
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837Generation_New(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYSERVICE")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Secondary, EDIService.EDIType.Professional);
                                                    }
                                                }
                                                //else if (Convert.ToInt16(BillingType.Institutional) == GetBillingType(Convert.ToInt64(_trnsIds[0]), Convert.ToInt64(_trnsMstIds[0])))
                                                else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                                {
                                                    _objResult = null;
                                                    _result = "";
                                                    oSettings.GetSetting("EDIGENERATIONTYPEUB", out _objResult);
                                                    _result = Convert.ToString(_objResult);

                                                    if (_result.Trim().ToUpper() == "BYSP")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSPUB(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "SECONDARY");
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                                    {
                                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB_Secondary_5010(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                        else
                                                        {
                                                            _EDIFileName = ogloEDIGeneration.EDI837GenerationForUB_Secondary(_trnsIds, _trnsMstIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                        }
                                                    }
                                                    else if (_result.Trim().ToUpper() == "BYSERVICE")
                                                    {
                                                        //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Secondary, EDIService.EDIType.Institutional);
                                                    }
                                                }
                                            }
                                            else
                                            {

                                                _objResult = null;
                                                _result = "";
                                                oSettings.GetSetting("EDIGENERATIONTYPECMS1500", out _objResult);
                                                _result = Convert.ToString(_objResult);

                                                if (_result.Trim().ToUpper() == "BYSP")
                                                {
                                                    //_EDIFileName = ogloEDIGeneration.EdiGenerateWithSP(_BatchName, _BatchId, _trnsIds, 0, 0, 0, "SECONDARY");
                                                }
                                                else if (_result.Trim().ToUpper() == "BYCODE" || _result.Trim().ToUpper() == "")
                                                {
                                                    if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod)
                                                    {
                                                        _EDIFileName = ogloEDIGeneration.EDI837GenerationForSecondary_5010(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                    }
                                                    else
                                                    {
                                                        _EDIFileName = ogloEDIGeneration.EDI837GenerationForSecondary_New(_trnsIds, _BatchName, false, _ContactID, odsEDIClaimDetail, _BatchId);
                                                    }
                                                }
                                                else if (_result.Trim().ToUpper() == "BYSERVICE")
                                                {
                                                    //_EDIFileName = ogloEDIGeneration.EdiGenerateWithService(_BatchName, _BatchId, _trnsIds, 0, 0, 0, EDIService.InsuranceType.Secondary, EDIService.EDIType.Professional);
                                                }
                                            }
                                        }


                                        if (_EDIFileName.Trim() != "")
                                        {

                                            #region "Save on Server"
                                            if (_CopyEDIFiles == true)
                                            {
                                                string _ServerPath = GetServerPath();
                                                string _BaseFolder = "Claim Management";
                                                string _OutInFolder = "OutBox";
                                                string _ClaimFolder = "837P Claim submission";
                                                string _ElectroniPaperFolder = "Electronic";
                                                //string _BatchFolderName = trvBatch.SelectedNode.Text.Trim();
                                                string _BatchFolderName = _BatchName;
                                                string _claimFolderPath = "";

                                                _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;


                                                //20100128
                                                if (System.IO.Directory.Exists(_claimFolderPath) == true)
                                                {
                                                    System.IO.FileInfo oFile = new System.IO.FileInfo(_EDIFileName);

                                                    System.IO.DirectoryInfo oDirectoryInfo = new System.IO.DirectoryInfo(_claimFolderPath);

                                                    deleteEDIFilesFromDirectory(_BatchFolderName);

                                                    System.IO.Directory.CreateDirectory(_claimFolderPath);

                                                    string _FileName1 = "";
                                                    int i = 1;
                                                    // bool _DocNameFound = true;

                                                    _FileName1 = _BatchName + "_" + i.ToString() + "." + "txt";

                                                    System.IO.File.Copy(_EDIFileName, _claimFolderPath + "\\" + _FileName1);
                                                }
                                            }
                                            #endregion

                                            #region "COMENTED CODE"

                                            /*
                                                    // SUDHIR 20100212 // SAVE E-CLAIM TO DATABASE //
                                                    Int64 _ElectronicClaimID = 0;
                                                  //  if (UB04Setting == true)
                                                   // {
                                                        //if (_BillingTypeId == Convert.ToInt16(BillingType.Professional))
                                                        if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod )
                                                        {
                                                            _ElectronicClaimID = SaveElectronicClaim(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Professional, nBillingMethod);
                                                        }
                                                        //else if (_BillingTypeId == Convert.ToInt16(BillingType.Institutional))
                                                        else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod)
                                                        {
                                                            _ElectronicClaimID = SaveElectronicClaim(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Institutional, nBillingMethod);
                                                        }
                                                  //  }
                                                    //else
                                                    //{
                                                    //    _ElectronicClaimID = SaveElectronicClaim(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Professional);
                                                    //}
                                                    if (_ElectronicClaimID > 0)
                                                    {
                                                        for (int _counter = 0; _counter < _trnsIds.Count; _counter++)
                                                        {
                                                            SaveElectronicClaimDetail(_ElectronicClaimID, Convert.ToInt64(oTrnIds[_counter].Code), oTrnIds[_counter].Description, Convert.ToInt64(oTrnIds[_counter].ID));
                                                        }
                                                    }
                                                    // END SUDHIR //
                                                     * */

                                            #endregion

                                            if (Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI5010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicProfessionalANSI4010) == nBillingMethod)
                                            {
                                                ogloEDIGeneration.SetElectronicClaimTVP(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Professional, nBillingMethod, odsEDIClaimDetail);
                                            }
                                            else if (Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI4010) == nBillingMethod || Convert.ToInt32(BatchBillingMethod.ElectronicInstitutionalANSI5010) == nBillingMethod)
                                            {
                                                ogloEDIGeneration.SetElectronicClaimTVP(_BatchId, _BatchName, _EDIFileName, TransactionStatus.SendToClaimManager, BillingType.Institutional, nBillingMethod, odsEDIClaimDetail);
                                            }


                                            ogloEDIGeneration.SetElectronicClaimDetailTVP(oTrnIds, odsEDIClaimDetail);
                                            ogloEDIGeneration.SaveElectronicClaimTVP(odsEDIClaimDetail);
                                        }
                                        if (oSettings != null)
                                        {
                                            oSettings.Dispose();
                                            oSettings = null;
                                        }
                                    }
                                    else if (_InsurancePaidClaimNo != "" && _InsurancePaidClaimNo != ",")//20100323 HotFix
                                    {
                                        DeleteElectronicClaim(_BatchId);
                                        //Added By Debasish on 9th Apr 2010
                                        //To delete files in that particular Batch folder
                                        deleteEDIFilesFromDirectory(_BatchName);
                                        //**

                                    }
                                    #endregion
                                }
                            }
                            else if (_InsurancePaidClaimNo != "" && _InsurancePaidClaimNo != ",")//20100323 HotFix
                            {
                                DeleteElectronicClaim(_BatchId);
                                //Added By Debasish on 9th Apr 2010
                                //To delete files in that particular Batch folder
                                deleteEDIFilesFromDirectory(_BatchName);
                                //**

                            }
                        }

                        if (ogloEDIGeneration != null)
                        {
                            ogloEDIGeneration.Dispose();
                        }

                        #endregion " Generate EDI file "



                    }
                    else
                    {
                        DeleteElectronicClaim(_BatchId);
                        deleteEDIFilesFromDirectory(_BatchName);

                    }
                    //if (ogloBilling != null)
                    //{
                    //    ogloBilling.Dispose();
                    //    ogloBilling = null;
                    //}
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                 _trnsIds.Clear();
                 _trnsIds = null;   
                 _trnsMstIds.Clear();
                 _trnsMstIds = null;
                  oTrnIds.Clear();
                oTrnIds.Dispose();
                oTrnIds=null;

                if (dtTransaction != null)
                {
                    dtTransaction.Dispose();
                    dtTransaction = null;
                }
                odsEDIClaimDetail.Dispose();

            }
        }

        private DataTable GetBatchTransaction(Int64 _BatchId)
        {

            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            gloDatabaseLayer.DBLayer oDB = null;
            DataTable _dtBatchClaims = null;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                oDBParameters.Clear();
                oDBParameters.Add("@BatchID", _BatchId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Batch_EDI_Claims", oDBParameters, out _dtBatchClaims);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (oDBParameters != null) oDBParameters.Dispose();
            }
            return _dtBatchClaims;
        }

        private Int64 GetContactID(DataTable _dtTemp, Int64 _ContactID, Int64 _trnsId, int _ContactIDIndexCol)
        {
            Int64 _result = _ContactID;
            try
            {

                //_dvTemp.RowFilter = " TransactionID = " + _trnsId + " ";
                DataRow[] _dr;
                _dr = _dtTemp.Select("  TransactionID = " + _trnsId + " ");
                _result = Convert.ToInt64(_dr[0]["ContactID"]);
                // _dtTemp = null;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                //if (_dtTemp != null)
                //{
                //    _dtTemp.Dispose();
                //}
            }
            return _result;
        }

        private void deleteEDIFilesFromDirectory(string sBatchName)
        {
            try
            {
                if (_CopyEDIFiles == true)
                {
                    string _ServerPath = GetServerPath();
                    string _BaseFolder = "Claim Management";
                    string _OutInFolder = "OutBox";
                    string _ClaimFolder = "837P Claim submission";
                    string _ElectroniPaperFolder = "Electronic";
                    string _BatchFolderName = sBatchName;//trvBatch.SelectedNode.Text.Trim();
                    string _claimFolderPath = "";

                    _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;
                    if (System.IO.Directory.Exists(_claimFolderPath))
                    {
                        System.IO.DirectoryInfo oDirectoryInfo = new System.IO.DirectoryInfo(_claimFolderPath);
                        System.IO.FileInfo[] oFileArray = oDirectoryInfo.GetFiles("*");
                        foreach (System.IO.FileInfo ofile in oFileArray)
                        {
                            //ofile.SetAccessControl(System.Security.AccessControl.FileSecurity
                            ofile.Attributes = System.IO.FileAttributes.Normal;
                            ofile.Delete();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        private void SplitBatch()
        {
            Int64 _BatchId = 0;
            string _BatchName = "";
            Int64 _BatchDate = 0;
            Int64 _BatchNumber = 0;
            Int64 _BatchId_Split = 0;
            string _BatchName_Split = "";


            Int64 _nTransactionMasterID = 0;
            Int64 _nTransactionID = 0;
            Int64 _claimNo = 0;
            Int64 _BillingMethodID = 0;
            Int64 _ClearingHouseId = 0;
            string _ClearingHouseCode = "";
            string _ClearingHouseName = "";
            Int64 _Prefix = Convert.ToInt64(DateTime.Now.ToString("MMddyyyyhhmmss"));
            Int16 _nBillingTypeId = 0;
            Int64 _nCurrentBillingMethod = 0;
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            _c1flexGridForClaims = c1BatchGrid;
            gloCMSEDI.HCFA1500 oHCFA1500 = new gloCMSEDI.HCFA1500(_databaseconnectionstring);
            bool _IsClaimGenerated = false;
            _c1flexGridForClaims = c1BatchGrid;

            if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
            {
                _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                _BatchName = Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index));
                string __BatchPrefix = "";
                if (_BusinessCenterCode != "")
                    __BatchPrefix = "Batch-" + _BusinessCenterCode + "-" + DateTime.Now.ToString("yyyyMMMdd") + "_";
                else
                    __BatchPrefix = "Batch-" + DateTime.Now.ToString("yyyyMMMdd") + "_";

                _BatchName_Split = GetBatchName(__BatchPrefix);
                _BatchDate = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchDate"].Index));

            }

            if (BillingTypeMethod == (int)BatchBillingMethod.CMS1500)
            {
                _BillingMethodID = (int)BatchBillingMethod.CMS1500New;
            }
            else if (BillingTypeMethod == (int)BatchBillingMethod.CMS1500New)
            {
                _BillingMethodID = (int)BatchBillingMethod.CMS1500;
            }



            //_BatchId_Split = ogloBilling.AddModifyBatch(_BatchId_Split, _BatchName_Split, _BatchDate, _BatchNumber, BatchType.Batch, 0, 0, _Prefix, _ClearingHouseId, _ClearingHouseCode, _ClearingHouseName, this.UserID, this.UserName, this.ClinicID, _BillingTypeId, _BillingMethodID); //AddModifyBatchDetail(_BatchId_Split, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);

            _BatchId_Split = ogloBilling.AddModifyBatch(_BatchId_Split, _BatchName_Split, _BatchDate, _BatchNumber, BatchType.Batch, 0, 0, _Prefix, _ClearingHouseId, _ClearingHouseCode, _ClearingHouseName, this.UserID, this.UserName, this.ClinicID, _nBillingTypeId, _BillingMethodID); //AddModifyBatchDetail(_BatchId_Split, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);


            for (int rowIndex = 1; rowIndex < _c1flexGridForClaims.Rows.Count; rowIndex++)
            {
                switch (CheckPaperVersion(Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["ContactID"].Index))))
                {
                    case (int)PaperFormVersion.CMS1500:
                        _nCurrentBillingMethod = (int)BatchBillingMethod.CMS1500;
                        break;
                    case (int)PaperFormVersion.CMS1500New:
                        _nCurrentBillingMethod = (int)BatchBillingMethod.CMS1500New;
                        break;

                }



                if (_nCurrentBillingMethod == _BillingMethodID)
                {


                    _nTransactionMasterID = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionMasterID"].Index));
                    _nTransactionID = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionID"].Index));


                    _claimNo = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["ClaimNo"].Index));

                    DeleteBatchForOneClaim(_BatchId, _BatchName, _claimNo, _nTransactionMasterID, _nTransactionID);
                    // ogloBilling.UpdateBatchCounter(_BatchId, 1, this.ClinicID);


                    _nTransactionMasterID = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionMasterID"].Index));
                    _nTransactionID = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionID"].Index));


                    //AddModifyBatchDetail(_BatchId_Split, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);
                    ogloBilling.UpdateBatchCounter(_BatchId, -1, this.ClinicID);


                    AddModifyBatchDetail(_BatchId_Split, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);
                    ogloBilling.UpdateBatchCounter(_BatchId_Split, 1, this.ClinicID);
                    UpdateTransactionStatus(_nTransactionID, TransactionStatus.SendToClaimManager);

                    //ogloBilling.cre

                    CreateFollowupScheduleForAutoBatch(_nTransactionMasterID, _nTransactionID, Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["ContactID"].Index)));

                    _IsClaimGenerated = oHCFA1500.SendPaperClaim(_BatchId_Split, Convert.ToInt64(gloPMContacts.TypeOfBilling.Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));

                    if (_IsClaimGenerated == true && _BatchId_Split != 0)
                    {
                        AddBacthCrossWalk(_BatchId_Split);
                        UpdateTransactionStatus(_nTransactionID, TransactionStatus.SendToClaimManager);
                        UpdateBatchTotal(_BatchId_Split, "Send");
                    }


                }
            }

            if (ogloBilling != null)
            {
                ogloBilling.Dispose();
                ogloBilling = null;
            }
        }

        private bool SendPaperClaim()
        {

            ArrayList _trnsIds = new ArrayList();
            ArrayList _MsttrnsIds = new ArrayList();
            gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();
            Int64 _BatchId = 0;
            string _BatchName = "";
           // DataTable dtBatch = new DataTable();
            bool _IsClaimGenerated = false;
            string _sendToClaimManagerClaimNo = String.Empty;
            DialogResult _dlg = DialogResult.No;
            string _InsurancePaidClaimNo = "";
            _BillingTypeId = Convert.ToInt16(BillingType.Professional);
            bool _result = false;
            Int64 _BillingMethod;
            int _PaperType = 0;
            bool _multiplePaperTyes = false;
            Boolean _IsEDIGenrated = false;

            try
            {

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    _c1flexGridForClaims = c1BatchGrid;

                    if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index));
                    }

                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    _c1flexGridForClaims = c1BatchGridSentBatch;
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index));
                    }
                }

                if (_c1flexGridForClaims != null && _c1flexGridForClaims.Rows.Count > 0)
                {



                    ////5070 Mahesh B
                    //if (trvBatch.SelectedNode != null)
                    //{
                    //    _BatchId = Convert.ToInt64(trvBatch.SelectedNode.Tag);
                    //}
                    for (int rowIndex = 1; rowIndex < _c1flexGridForClaims.Rows.Count; rowIndex++)
                    {
                        if (_c1flexGridForClaims.GetCellCheck(rowIndex, _c1flexGridForClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked
                            && _c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index) != null &&
                                (Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)).Trim() != TransactionStatus.InsurancePaid.ToString().Trim())
                            && (Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)).Trim() != TransactionStatus.Rebilled.ToString().Trim())
                            && (Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)).Trim() != TransactionStatus.Resent.ToString().Trim()))
                        //For HotFix. //&& (Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)).Trim() != TransactionStatus.SendToClearingHouse.ToString().Trim())
                        {

                            Int64 _tranId = 0;

                            string _claimNo = "";
                            // Send nTransactionMasterID Because we are using Old SP'S
                            _tranId = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionID"].Index));
                            _claimNo = Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Claim"].Index));
                            Int64 _MastertranId = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionMasterID"].Index));
                            if (_tranId > 0) { oTrnIds.Add(_tranId, _claimNo); _trnsIds.Add(_tranId); _MsttrnsIds.Add(_MastertranId); }
                            // _tranId = 0;
                            _claimNo = "";


                            if (_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index) != null
                                      && Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)) != ""
                                      && ((Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString())
                                      || (Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString())))
                            {
                                if (_sendToClaimManagerClaimNo != "")
                                {
                                    _sendToClaimManagerClaimNo = _sendToClaimManagerClaimNo + ",";
                                }
                                _sendToClaimManagerClaimNo = _sendToClaimManagerClaimNo + Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Claim"].Index));
                            }

                            if (UB04Setting == true)
                            {
                                if (oTrnIds.Count == 1)
                                {
                                    // _BillingTypeId = Convert.ToInt16(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["BillingTypeId"].Index));
                                    _BillingTypeId = GetBillingType(_tranId, _MastertranId);
                                }
                                else if (_BillingTypeId != GetBillingType(_tranId, _MastertranId))
                                {
                                    MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return _IsEDIGenrated = false;
                                }

                            }




                        }
                        else if (_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index) != null
                               && Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)) != ""
                               && (Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()))
                        {
                            //MessageBox.Show("You can not undo selected claim(s),as insurance payment has been done. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            if (_InsurancePaidClaimNo != "")
                            {
                                _InsurancePaidClaimNo = _InsurancePaidClaimNo + ",";
                            }
                            _InsurancePaidClaimNo = _InsurancePaidClaimNo + Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Claim"].Index));


                        }
                        if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                        {
                            if (BillingTypeMethod == (int)BatchBillingMethod.CMS1500 || BillingTypeMethod == (int)BatchBillingMethod.CMS1500New)
                            {
                                if (_multiplePaperTyes == false)
                                {
                                    _nPaperVersion = CheckPaperVersion(Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["ContactID"].Index)));
                                    _BillingMethod = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["BillingMethodID"].Index));
                                    if (_PaperType == 0)
                                    {
                                        _PaperType = _nPaperVersion;
                                    }
                                    else if (_PaperType != 0)
                                    {
                                        if (_PaperType != _nPaperVersion)
                                            _multiplePaperTyes = true;

                                    }
                                }
                            }
                        }

                    }


                    bool _bCancelBatch = false;
                    if (_multiplePaperTyes)
                    {
                        DialogResult result = MessageBox.Show("Both paper form types are required to print this batch." + Environment.NewLine + "System will split the batch?", _messageBoxCaption, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);

                        switch (result)
                        {
                            case DialogResult.Yes:
                                _multiplePaperTyes = true;
                                break;
                            case DialogResult.No:
                                _multiplePaperTyes = false;
                                break;
                            case DialogResult.Cancel:
                                _bCancelBatch = true;
                                break;
                        }
                    }
                    if (_bCancelBatch == false)
                    {
                        if (oTrnIds.Count > 0)
                        {
                            if (_InsurancePaidClaimNo.EndsWith(",") == true)
                            {
                                _InsurancePaidClaimNo.Remove(_InsurancePaidClaimNo.Length - 1, 1);
                            }
                            if (_InsurancePaidClaimNo != "" && _InsurancePaidClaimNo != "," && _c1flexGridForClaims.Rows.Count > 1)
                            {
                                MessageBox.Show("Claim#(s) " + _InsurancePaidClaimNo + " will be excluded as payment has been done against it. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            }


                            #region RESEND MessageBox

                            if (_sendToClaimManagerClaimNo.EndsWith(",") == true)
                            {
                                _sendToClaimManagerClaimNo.Remove(_sendToClaimManagerClaimNo.Length - 1, 1);
                            }

                            //Resend Confirmation Variable
                            if (BillingTypeMethod == Convert.ToInt32(BatchBillingMethod.CMS1500))
                            {
                               _result = ValidateExpandedClaimLimits(_trnsIds, Convert.ToInt32(gloSettings.TypeOfBilling.Paper.GetHashCode()), _ClinicID);
                            }
                            else if (BillingTypeMethod == Convert.ToInt32(BatchBillingMethod.CMS1500New))
                            {
                               _result = ValidateExpandedClaimLimits(_trnsIds, Convert.ToInt32(gloSettings.TypeOfBilling.CMS1500New.GetHashCode()), _ClinicID);
                            }
                            else if (BillingTypeMethod == Convert.ToInt32(BatchBillingMethod.UB04))
                            {
                               _result = ValidateExpandedClaimLimits(_trnsIds, Convert.ToInt32(gloSettings.TypeOfBilling.UB04Paper.GetHashCode()), _ClinicID);
                            }

                            if (_result == true)
                            {
                                if (_sendToClaimManagerClaimNo != "" && _sendToClaimManagerClaimNo != "," && _c1flexGridForClaims.Rows.Count > 1)
                                {
                                    _dlg = MessageBox.Show("Batch will be resent to Claim manager.\nContinue? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                }
                                else
                                {
                                    _dlg = DialogResult.Yes;
                                }
                            }

                            #endregion

                            if (_dlg == DialogResult.Yes)
                            {
                                gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
                                ogloClaimManager.On_FileProcessed += new gloClaimManager.OnFileProcessed(ogloClaimManager_On_FileProcessed);

                                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                {
                                    prgFileGeneration.Maximum = oTrnIds.Count;
                                    prgFileGeneration.Value = 0;
                                    prgFileGeneration.Style = ProgressBarStyle.Blocks;
                                    prgFileGeneration.Step = 1;
                                    lblFile.Text = "";
                                }
                                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                {
                                    prgFileGeneration_SentBatch.Maximum = oTrnIds.Count;
                                    prgFileGeneration_SentBatch.Value = 0;
                                    prgFileGeneration_SentBatch.Style = ProgressBarStyle.Blocks;
                                    prgFileGeneration_SentBatch.Step = 1;
                                    lblFile_SentBatch.Text = "";
                                }


                                //_IsClaimGenerated = true;//ogloClaimManager.GeneratePaperClaim(Application.StartupPath, _ClinicID, ref oTrnIds, trvBatch.SelectedNode.Text.Trim(), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                //RoopaliB Send to claim management system
                                gloCMSEDI.HCFA1500 oHCFA1500 = new gloCMSEDI.HCFA1500(_databaseconnectionstring);

                                if (_multiplePaperTyes == true)
                                    SplitBatch();

                                if (Convert.ToInt32(BatchBillingMethod.CMS1500) == BillingTypeMethod)
                                {
                                    // _IsClaimGenerated = oHCFA1500.SendPaperClaim(Convert.ToInt64(trvBatch.SelectedNode.Tag.ToString()), Convert.ToInt64(gloPMContacts.TypeOfBilling.Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));
                                    _IsClaimGenerated = oHCFA1500.SendPaperClaim(_BatchId, Convert.ToInt64(gloPMContacts.TypeOfBilling.Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));

                                }
                                else if (Convert.ToInt32(BatchBillingMethod.CMS1500New) == BillingTypeMethod)
                                {
                                    // _IsClaimGenerated = oHCFA1500.SendPaperClaim(Convert.ToInt64(trvBatch.SelectedNode.Tag.ToString()), Convert.ToInt64(gloPMContacts.TypeOfBilling.Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));
                                    _IsClaimGenerated = oHCFA1500.SendPaperClaim(_BatchId, Convert.ToInt64(gloPMContacts.TypeOfBilling.Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));

                                }
                                //else if (_BillingTypeId == Convert.ToInt16(BillingType.Institutional))
                                else if (Convert.ToInt32(BatchBillingMethod.UB04) == BillingTypeMethod)
                                {
                                    //_IsClaimGenerated = oHCFA1500.SendPaperClaim(Convert.ToInt64(trvBatch.SelectedNode.Tag.ToString()), Convert.ToInt64(gloPMContacts.TypeOfBilling.UB04Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));
                                    _IsClaimGenerated = oHCFA1500.SendPaperClaim(_BatchId, Convert.ToInt64(gloPMContacts.TypeOfBilling.UB04Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));
                                }
                                if (_IsClaimGenerated == true && _BatchId != 0)
                                {
                                    AddBacthCrossWalk(_BatchId);
                                }
                                oHCFA1500.Dispose();
                                oHCFA1500 = null;

                                ogloClaimManager.On_FileProcessed -= new gloClaimManager.OnFileProcessed(ogloClaimManager_On_FileProcessed);
                                ogloClaimManager.Dispose();

                                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                {
                                    prgFileGeneration.Value = 0;
                                    lblFile.Text = "";
                                    lblFileCounter.Text = "";
                                }
                                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                {
                                    prgFileGeneration_SentBatch.Value = 0;
                                    lblFile_SentBatch.Text = "";
                                    lblFileCounter_SentBatch.Text = "";
                                }
                                Application.DoEvents();

                                if (_IsClaimGenerated)
                                {
                                    //MaheshB 20091204
                                    for (int rowIndex = 1; rowIndex < _c1flexGridForClaims.Rows.Count; rowIndex++)
                                    {
                                        if (_c1flexGridForClaims.GetCellCheck(rowIndex, _c1flexGridForClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                        {
                                            Int64 _tranId = 0;
                                            //string _claimNo = "";
                                            //MaheshB Send TransactionID because status changes in new Tracking Table.
                                            _tranId = Convert.ToInt64(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["TransactionID"].Index));
                                            //For HotFix 
                                            //if ((Convert.ToString(_c1flexGridForClaims.GetData(rowIndex, _c1flexGridForClaims.Cols["Status"].Index)).Trim() != TransactionStatus.SendToClearingHouse.ToString().Trim()))
                                            //{ gloPM5040
                                            UpdateTransactionStatus(_tranId, TransactionStatus.SendToClaimManager);
                                            //}


                                        }
                                    }

                                    UpdateBatchTotal(_BatchId, "Send");
                                    MessageBox.Show("Claim file(s) generated successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                    #region "Save Data in New  Table"

                                    //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                    //gloDatabaseLayer.DBParameters oDBPara;
                                    //object _Dresult;
                                    //for (int i = 1; i < _c1flexGridForClaims.Rows.Count; i++)
                                    //{                                       
                                    //    oDBPara = new gloDatabaseLayer.DBParameters();
                                    //    oDBPara.Add("@nTransactionMasterID", (_c1flexGridForClaims.Rows[i]["TransactionMasterID"]), ParameterDirection.Input, SqlDbType.BigInt);
                                    //    oDBPara.Add("@nTransactionID", (_c1flexGridForClaims.Rows[i]["TransactionID"]), ParameterDirection.Input, SqlDbType.BigInt);
                                    //    oDBPara.Add("@nBatchID", (_c1flexGridForClaims.Rows[i]["BatchID"]), ParameterDirection.Input, SqlDbType.BigInt);
                                    //    oDBPara.Add("@sBatchName", (_BatchName), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@nClaim", (_c1flexGridForClaims.Rows[i]["Claim"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@dateofservice", (_c1flexGridForClaims.Rows[i]["dateofservice"]), ParameterDirection.Input, SqlDbType.DateTime);
                                    //    oDBPara.Add("@Charges", (_c1flexGridForClaims.Rows[i]["Charges"]), ParameterDirection.Input, SqlDbType.BigInt);
                                    //    oDBPara.Add("@PatientCode", (_c1flexGridForClaims.Rows[i]["PatientCode"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@PatientFullName", (_c1flexGridForClaims.Rows[i]["PatientFullName"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@ProviderFullName", (_c1flexGridForClaims.Rows[i]["ProviderFullName"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@InsuerdsID", (_c1flexGridForClaims.Rows[i]["InsuerdsID"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@Insurance", (_c1flexGridForClaims.Rows[i]["Insurance"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@BillingType",(_c1flexGridForClaims.Rows[i]["BillingType"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@BillingTypeID", (_c1flexGridForClaims.Rows[i]["BillingTypeId"]), ParameterDirection.Input, SqlDbType.VarChar);
                                    //    oDBPara.Add("@nClaimStatus", (TransactionStatus.SendToClaimManager), ParameterDirection.Input, SqlDbType.BigInt);
                                    //    oDBPara.Add("@BillingTypeMethod", BillingTypeMethod, ParameterDirection.Input, SqlDbType.BigInt);
                                    //    oDB.Connect(false);
                                    //    oDB.Execute("BL_IN_Batch_Sended", oDBPara);
                                    //}

                                    #endregion

                                    if (_sendToClaimManagerClaimNo != "" && _sendToClaimManagerClaimNo != ",")
                                        {
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.ResendToClaimManager, "Batch named-" + _BatchName + " resent to claim manager [Billing Method: " + ((BatchBillingMethod)BillingTypeMethod) + "]", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                        }
                                        else
                                        {
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.SendtoClaimManager, "Batch named-" + _BatchName + " sent to claim manager [Billing Method: " + ((BatchBillingMethod)BillingTypeMethod) + "]", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                        }
                                    _IsEDIGenrated = true;
                                }
                                else if (_result == true)
                                {
                                    MessageBox.Show("Cannot generate claim file(s)", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    _IsEDIGenrated = false;
                                }
                            }

                        }
                        else
                        {
                            MessageBox.Show("Please select claims having status Batch/SendToClaimManager/SendToClearinghouse ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            _IsEDIGenrated = false;
                        }
                    }
                }
                if (_IsClaimGenerated == false && _dlg == DialogResult.Yes && _result == true)
                {
                    MessageBox.Show("Please select claims having status Batch/SendToClaimManager/SendToClearinghouse. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _IsEDIGenrated = false;
                }

                return _IsEDIGenrated;

            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                return _IsEDIGenrated;
            }
            finally
            {
                _InsurancePaidClaimNo = "";
                _trnsIds.Clear();
                _trnsIds = null;
                 _MsttrnsIds.Clear();
                 _MsttrnsIds = null;
                 oTrnIds.Clear();
                oTrnIds.Dispose();
                oTrnIds=null;
            }


        }

        //temporary implementation need to move to gloBilling class

        private void UpdateBatchSentCounter(Int64 BatchId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = " UPDATE BL_Transaction_Batch WITH(READPAST) SET nBatchSend = (ISNULL(nBatchSend,0) +1) " +
                " WHERE nBatchID = " + BatchId + " AND nClinicID = " + ClinicId + "";
                oDB.Execute_Query(_sqlQuery);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
        }

        private Int32 GetBatchSentCounter(Int64 BatchId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _sentCounterValue = null;
            Int32 _SentCounter = 0;

            try
            {
                oDB.Connect(false);
                _sqlQuery = " SELECT ISNULL(nBatchSend,0) AS nBatchSend FROM BL_Transaction_Batch WITH(NOLOCK) " +
                " WHERE nBatchID = " + BatchId + " AND nClinicID = " + ClinicId + " ";
                _sentCounterValue = oDB.ExecuteScalar_Query(_sqlQuery);
                if (_sentCounterValue != null)
                { _SentCounter = Convert.ToInt32(_sentCounterValue); }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }
            finally
            { if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); } }

            return _SentCounter;
        }

        #region "Code to be shiffted to claim manager"
        public string GetServerPath()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object retVal = new object();
            //  string _serverPath = "";
            string _sqlQuery = "";
            string _isValidPath = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT sSettingsValue FROM Settings WITH(NOLOCK) WHERE UPPER(sSettingsName) = 'SERVERPATH'";
                retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (retVal != null && retVal != DBNull.Value)
                {
                    _isValidPath = Convert.ToString(retVal);
                    try
                    {
                        if (System.IO.Directory.Exists(_isValidPath) == false)
                        { _isValidPath = ""; }
                    }
                    catch //(Exception ex)
                    { _isValidPath = ""; }
                }
                else
                { _isValidPath = ""; }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (retVal != null) { retVal = null; }
            }
            return _isValidPath;
        }
        #endregion
        #endregion

        private void tsb_Accept_Click(object sender, EventArgs e)
        {
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            DialogResult _dlgRst = DialogResult.None;
            string _tranIds = "";
            Int64 _tranId = 0;
            Int64 _patientId = 0;
            Int64 _claimNo = 0;
            Int64 _statusdate = 0;
            Int64 _statustime = 0;
            Int64 _statusId = 0;
            Int64 _BatchId = 0;
            string _BatchName = "";
            Int64 _BatchDate = 0;
            Int64 _BatchNumber = 0;

            try
            {

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.Rows.Count > 0 && c1trvBatch.RowSel >= 0)
                    { _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index)); }

                    #region " update status "
                    if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
                    {
                        bool _isSelected = false;
                        //if (c1BatchGrid.Rows.Count > 0 && c1BatchGrid.DataSource != null)
                        //{
                        //    for (int ctr = 1; ctr < c1BatchGrid.Rows.Count; ctr++)
                        //    {
                        //        if (c1BatchGrid.GetCellCheck(ctr, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                        //        { _isSelected = true; break; }
                        //    }
                        //}
                        if (c1BatchGrid.RowSel > 0)
                        { _isSelected = true; }
                        if (_isSelected == false)
                        {
                            MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        _dlgRst = MessageBox.Show("Are you sure you want to accept selected claim(s)", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (_dlgRst == DialogResult.No) { return; }

                        DataTable dtBatch = new DataTable();
                        //dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvBatch.SelectedNode.Tag));
                        dtBatch = ogloBilling.GetBatch(_BatchId);

                        //nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID

                        //_BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
                        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
                        _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
                        _BatchNumber = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);

                        if (_BatchId > 0)
                        {
                            //for (int i = 1; i < c1BatchGrid.Rows.Count; i++)

                            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                            {
                                #region" Update Status "

                                int i = 0;
                                i = c1BatchGrid.RowSel;
                                if (i > 0)
                                {
                                    if (c1BatchGrid.GetCellCheck(i, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                    {
                                        if (c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index)) != ""
                                            && (Convert.ToInt32(c1BatchGrid.GetData(i, c1BatchGrid.Cols["TransactionStatusId"].Index)) == TransactionStatus.Batch.GetHashCode()
                                            || Convert.ToInt32(c1BatchGrid.GetData(i, c1BatchGrid.Cols["TransactionStatusId"].Index)) == TransactionStatus.ReBatch.GetHashCode()
                                            || Convert.ToInt32(c1BatchGrid.GetData(i, c1BatchGrid.Cols["TransactionStatusId"].Index)) == TransactionStatus.SendToClaimManager.GetHashCode()
                                            || Convert.ToInt32(c1BatchGrid.GetData(i, c1BatchGrid.Cols["TransactionStatusId"].Index)) == TransactionStatus.SendToClearingHouse.GetHashCode())
                                            )
                                        {
                                            _tranId = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["nTransactionID"].Index));
                                            _patientId = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["nPatientID"].Index));
                                            _claimNo = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["ClaimNo"].Index));
                                            _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                                            _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

                                            _tranIds += _tranId.ToString() + ",";
                                            //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Accepted);
                                            _statusId = ogloBilling.UpdateTransactionStatus(_patientId, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNumber, _tranId, _claimNo, 0, 0, TransactionStatus.Accepted, _statusdate, _statustime, "", this.ClinicID, 0, gloPatient.TypeOfBilling.None);
                                            ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Accepted, _statusId);
                                            _tranId = 0;
                                            _patientId = 0;
                                            _claimNo = 0;
                                            _statusdate = 0;
                                            _statustime = 0;
                                            _statusId = 0;
                                        }
                                    }
                                }

                                #endregion
                            }
                        }
                        _tranIds = _tranIds.TrimEnd(',');
                        //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);
                        SetView();
                    }

                    #endregion " update status "
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0 && c1trvBatch_SentBatch.RowSel >= 0)
                    { _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index)); }

                    #region " update status "
                    if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 0)
                    {
                        bool _isSelected = false;

                        if (c1BatchGridSentBatch.RowSel > 0)
                        { _isSelected = true; }
                        if (_isSelected == false)
                        {
                            MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        _dlgRst = MessageBox.Show("Are you sure you want to accept selected claim(s)", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (_dlgRst == DialogResult.No) { return; }

                        DataTable dtBatch = new DataTable();
                        dtBatch = ogloBilling.GetBatch(_BatchId);

                        //nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID

                        //_BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
                        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]);
                        _BatchDate = Convert.ToInt64(dtBatch.Rows[0]["nBatchDate"]);
                        _BatchNumber = Convert.ToInt64(dtBatch.Rows[0]["nBatchNo"]);

                        if (_BatchId > 0)
                        {
                            if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                            {
                                #region" Update Status "

                                int i = 0;
                                i = c1BatchGridSentBatch.RowSel;
                                if (i > 0)
                                {
                                    if (c1BatchGridSentBatch.GetCellCheck(i, c1BatchGridSentBatch.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                    {
                                        if (c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["Status"].Index)) != ""
                                            && (Convert.ToInt32(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["TransactionStatusId"].Index)) == TransactionStatus.Batch.GetHashCode()
                                            || Convert.ToInt32(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["TransactionStatusId"].Index)) == TransactionStatus.ReBatch.GetHashCode()
                                            || Convert.ToInt32(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["TransactionStatusId"].Index)) == TransactionStatus.SendToClaimManager.GetHashCode()
                                            || Convert.ToInt32(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["TransactionStatusId"].Index)) == TransactionStatus.SendToClearingHouse.GetHashCode())
                                            )
                                        {
                                            _tranId = Convert.ToInt64(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["nTransactionID"].Index));
                                            _patientId = Convert.ToInt64(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["nPatientID"].Index));
                                            _claimNo = Convert.ToInt64(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["ClaimNo"].Index));
                                            _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                                            _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

                                            _tranIds += _tranId.ToString() + ",";
                                            //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Accepted);
                                            _statusId = ogloBilling.UpdateTransactionStatus(_patientId, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNumber, _tranId, _claimNo, 0, 0, TransactionStatus.Accepted, _statusdate, _statustime, "", this.ClinicID, 0, gloPatient.TypeOfBilling.None);
                                            ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Accepted, _statusId);
                                            _tranId = 0;
                                            _patientId = 0;
                                            _claimNo = 0;
                                            _statusdate = 0;
                                            _statustime = 0;
                                            _statusId = 0;
                                        }
                                    }
                                }

                                #endregion
                            }
                        }
                        _tranIds = _tranIds.TrimEnd(',');
                        SetView();
                    }

                    #endregion " update status "

                }


            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (ogloBilling != null) { ogloBilling.Dispose(); }
            }
        }

        private void tsb_Reject_Click(object sender, EventArgs e)
        {
            #region " Old code"
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            //DialogResult _dlgRst = DialogResult.None;
            //string _tranIds = "";
            //Int64 _tranId = 0;
            //Int64 _patientId = 0;
            //Int64 _claimNo = 0;
            //Int64 _statusdate = 0;
            //Int64 _statustime = 0;
            //Int64 _statusId = 0;
            //Int64 _BatchId = 0;
            //string _BatchName = "";
            //Int64 _BatchDate = 0;
            //Int64 _BatchNumber = 0;
            //bool _IsMsgShown = false;
            //Int64 _MastertranId = 0;

            //try
            //{
            //    this.Cursor = System.Windows.Forms.Cursors.WaitCursor;
            //    if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
            //    {
            //        bool _isSelected = false;
            //        if (c1BatchGrid.RowSel > 0)
            //        { _isSelected = true; }

            //        if (_isSelected == false)
            //        {
            //            MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            return;
            //        }

            //        _dlgRst = MessageBox.Show("Are you sure you want to " + tsb_Reject.Text + " selected claim? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //        if (_dlgRst == DialogResult.No) { return; }

            //        DataTable dtBatch = new DataTable();
            //        dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvBatch.SelectedNode.Tag));
            //        _BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
            //        _BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]).Replace("'", "''");
            //        Int32 _nBillingmethod = Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]);

            //        if (_BatchId > 0)
            //        {
            //            int i = 0;
            //            i = c1BatchGrid.RowSel;
            //            if (i > 0)
            //            {
            //                if (c1BatchGrid.GetCellCheck(i, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
            //                {
            //                    if (c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index) != null
            //                        && Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index)) != ""
            //                        && (Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Batch.ToString() ||
            //                         (Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()))
            //                        )
            //                    {
            //                        _tranId = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["TransactionID"].Index));
            //                        _patientId = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["PatientID"].Index));
            //                        _claimNo = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["ClaimNo"].Index));
            //                        _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
            //                        _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());
            //                        _MastertranId = Convert.ToInt64(c1BatchGrid.GetData(i, c1BatchGrid.Cols["TransactionMasterID"].Index));
            //                        _tranIds += _tranId.ToString() + ",";



            //                        gloBilling objbilling = new gloBilling(_databaseconnectionstring, "");
            //                        objbilling.UndoTransactionClaim(_MastertranId, _tranId, _ClinicID);

            //                        DeleteBatchForOneClaim(_BatchId, _BatchName, _claimNo, _MastertranId, _tranId);

            //                        if (trvBatch.SelectedNode != null)
            //                        {

            //                            //Actual Delete Done,and created Files.
            //                            //Send_Click(true, true, true);
            //                            SendElectronicClaimUndo(_nBillingmethod);

            //                        }

            //                        #region Delete whole batch If no claim found

            //                        if (GetBatchAllClaims(_BatchId) == false)
            //                        {
            //                            DeleteBatch(_BatchId, _BatchName);
            //                        }


            //                        #endregion

            //                        #region To delete Paper Claim

            //                        int _index = c1BatchGrid.RowSel;
            //                        if (_index > 0)
            //                        {
            //                            string _claimNo1 = Convert.ToString(c1BatchGrid.GetData(_index, c1BatchGrid.Cols["ClaimNo"].Index));
            //                            string _SubClaimNo1 = Convert.ToString(c1BatchGrid.GetData(_index, c1BatchGrid.Cols["SubClaimNo"].Index));
            //                            gloGeneralItem.gloItems oClaimNum = new gloGeneralItem.gloItems();
            //                            oClaimNum.Add(0, _claimNo1, _SubClaimNo1);

            //                            //DeletePaper_Claim(_claimNo1, _SubClaimNo1);
            //                            DeletePaper_Claim(oClaimNum);


            //                        }

            //                        #endregion

            //                        //SetView();

            //                        _MastertranId = 0;
            //                        _tranId = 0;
            //                        _patientId = 0;
            //                        _claimNo = 0;
            //                        _statusdate = 0;
            //                        _statustime = 0;
            //                        _statusId = 0;
            //                    }
            //                    else if (c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index) != null
            //                   && Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index)) != ""
            //                   && (Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()))
            //                    {
            //                        MessageBox.Show("You can not " + tsb_RejectBatch.Text.ToLower().Replace("batch", "") + " selected claim(s),as insurance payment has been done. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                        _MastertranId = 0;
            //                        _tranId = 0;
            //                        _patientId = 0;
            //                        _claimNo = 0;
            //                        _statusdate = 0;
            //                        _statustime = 0;
            //                        _statusId = 0;
            //                    }

            //                }
            //            }
            //        }
            //        _tranIds = _tranIds.TrimEnd(',');
            //        //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);

            //    }
            //    SetView();

            //    #region " Make Blank Batch details "

            //    if (trvBatch.Nodes == null || trvBatch.Nodes.Count <= 0)
            //    {
            //        lblcalimamtvalue.Text = "";
            //        lblBatchDateValue.Text = "";
            //        lblClaimcountvalue.Text = "";
            //        lblClearinghouseValue.Text = "";
            //        tsb_BatchDetailReport.Visible = false;
            //        tsb_Print1500.Visible = false;
            //        //  tsb_Send.Visible = false;
            //        Tsb_BatchSend.Visible = false;
            //    }
            //    else
            //    {
            //        tsb_BatchDetailReport.Visible = true;
            //        tsb_Print1500.Visible = true;
            //        //  tsb_Send.Visible = true;
            //        Tsb_BatchSend.Visible = true;
            //    }

            //    #endregion
            //}
            //catch (Exception ex)
            //{
            //    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            //}
            //finally
            //{
            //    if (ogloBilling != null) { ogloBilling.Dispose(); }
            //    this.Cursor = System.Windows.Forms.Cursors.Default;
            //}
            #endregion " Old code"

            Undo();
        }

        private void tsb_RejectBatch_Click(object sender, EventArgs e)
        {
            #region " Old Code "
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            //DialogResult _dlgRst = DialogResult.None;
            //string _tranIds = "";
            //Int64 _tranId = 0;
            //Int64 _patientId = 0;
            //Int64 _claimNo = 0;
            //Int64 _statusdate = 0;
            //Int64 _statustime = 0;
            //Int64 _statusId = 0;
            //Int64 _BatchId = 0;
            //string _BatchName = "";
            //Int64 _BatchDate = 0;
            //Int64 _BatchNumber = 0;
            //bool _IsMsgShown = false;
            //Int64 _MastertranId = 0;

            //try
            //{
            //    if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 0)
            //    {
            //        bool _isSelected = false;
            //        if (c1BatchGrid.RowSel > 0)
            //        { _isSelected = true; }

            //        if (_isSelected == false)
            //        {
            //            MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            return;
            //        }

            //        _dlgRst = MessageBox.Show("Are you sure you want to " + tsb_Reject.Text + " selected Batch? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //        if (_dlgRst == DialogResult.No) { return; }

            //        #region GETTING BATCH DETAILS

            //        _BatchId = Convert.ToInt64(trvBatch.SelectedNode.Tag);
            //        _BatchName = Convert.ToString(trvBatch.SelectedNode.Text);

            //        #endregion


            //        DataTable dtTransaction = GetBatchTransaction(_BatchId);

            //        if (dtTransaction != null && dtTransaction.Rows.Count > 0)
            //        {
            //            for (int i = 0; i < dtTransaction.Rows.Count; i++)
            //            {

            //                if (_BatchId > 0)
            //                {

            //                    if (((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) != TransactionStatus.InsurancePaid)
            //                                                        && (((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) == TransactionStatus.Batch)
            //                                                        || ((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) == TransactionStatus.SendToClaimManager))
            //                                                        )
            //                    {

            //                        _tranId = Convert.ToInt64(dtTransaction.Rows[i]["TransactionID"]);
            //                        _patientId = Convert.ToInt64(dtTransaction.Rows[i]["PatientID"]);
            //                        _claimNo = Convert.ToInt64(dtTransaction.Rows[i]["ClaimNo"]);
            //                        _MastertranId = Convert.ToInt64(dtTransaction.Rows[i]["TransactionMasterID"]);

            //                        ogloBilling.UndoTransactionClaim(_MastertranId, _tranId, _ClinicID);

            //                        //Delete Batch
            //                        //Check this again...........
            //                        DeleteBatchForOneClaim(_BatchId, _BatchName, _claimNo, _MastertranId, _tranId);

            //                        _tranId = 0;
            //                        _patientId = 0;
            //                        _claimNo = 0;
            //                        _statusdate = 0;
            //                        _statustime = 0;
            //                        _statusId = 0;
            //                        _MastertranId = 0;
            //                    }

            //                    else if ((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) == TransactionStatus.InsurancePaid)
            //                    {

            //                        DialogResult _dg = DialogResult.None;
            //                        if (_IsMsgShown == false)
            //                        {
            //                            _dg = MessageBox.Show("You can not " + tsb_RejectBatch.Text.ToLower().Replace("batch", "") + " selected claim(s),as payment has been done. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);  // SUDHIR 20100323 // MANTIS 1363 //
            //                            _IsMsgShown = true;
            //                        }

            //                        if (_dg == DialogResult.Yes || _IsMsgShown == true)
            //                        {
            //                            _tranId = 0;
            //                            _patientId = 0;
            //                            _claimNo = 0;
            //                            _statusdate = 0;
            //                            _statustime = 0;
            //                            _statusId = 0;
            //                        }

            //                    }
            //                }
            //            }
            //        }

            //        #region Delete whole batch If no claim found

            //        if (GetBatchAllClaims(_BatchId) == false)
            //        {
            //            DeleteBatch(_BatchId, _BatchName);
            //        }


            //        #endregion

            //        #region Delete Selected Batch Electronic Claims

            //        // COMMENT BY SUDHIR 20100213 //
            //        if (_CopyEDIFiles == true)
            //        {
            //            string _ServerPath = GetServerPath();
            //            string _BaseFolder = "Claim Management";
            //            string _OutInFolder = "OutBox";
            //            string _ClaimFolder = "837P Claim submission";
            //            string _ElectroniPaperFolder = "Electronic";
            //            string _BatchFolderName = trvBatch.SelectedNode.Text.Trim();
            //            string _claimFolderPath = "";


            //            if (_IsMsgShown == false)
            //            {
            //                _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;


            //                System.IO.DirectoryInfo oDirectoryInfo = new System.IO.DirectoryInfo(_claimFolderPath);

            //                if (oDirectoryInfo.Exists == true)
            //                {
            //                    deleteEDIFilesFromDirectory(_BatchFolderName);
            //                    //oDirectoryInfo.Delete(true);
            //                }
            //            }
            //            if (tsb_RejectBatch.Text.ToLower().Contains("undo batch"))
            //            {
            //                DeleteElectronicClaim(_BatchId);
            //                deleteEDIFilesFromDirectory(_BatchName);
            //            }
            //        }
            //        #endregion


            //        #region Delete Paper Claim

            //        #region GetClaims

            //        string _claimnos = String.Empty;
            //        string _SubClaimNo = String.Empty;
            //        gloGeneralItem.gloItems oClaimNums = new gloGeneralItem.gloItems();


            //        for (int rowIndex = 0; rowIndex < dtTransaction.Rows.Count; rowIndex++)
            //        {
            //            if (Convert.ToString(dtTransaction.Rows[rowIndex]["nStatus"]).Trim() != "" &&
            //                (TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Rebilled &&
            //                (TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Resent)
            //            {

            //                Int64 _claimNo3 = 0;
            //                _claimNo3 = Convert.ToInt64(dtTransaction.Rows[rowIndex]["ClaimNo"]);
            //                string _SubClaimNo3 = Convert.ToString(dtTransaction.Rows[rowIndex]["SubClaimNo"]);
            //                oClaimNums.Add(0, _claimNo3.ToString(), _SubClaimNo3);

            //                if (_claimNo3 != 0)
            //                {
            //                    if (_claimnos != "")
            //                    {
            //                        _claimnos = _claimnos + ",";
            //                    }
            //                    _claimnos = _claimnos + _claimNo3;
            //                }

            //                // SUDHIR 20100313 //
            //                if (_SubClaimNo3 != "" && _SubClaimNo3 != "0")
            //                {
            //                    if (_SubClaimNo != "")
            //                        _SubClaimNo = _SubClaimNo + ",";
            //                    _SubClaimNo = _SubClaimNo + _SubClaimNo3;
            //                }
            //            }
            //        }

            //        #endregion


            //        if (_claimnos.EndsWith(",") == true)
            //        {
            //            _claimnos.Remove(_claimnos.Length - 1, 1);
            //        }
            //        if (_SubClaimNo.EndsWith(",") == true)
            //        {
            //            _SubClaimNo.Remove(_SubClaimNo.Length - 1, 1);
            //        }
            //        if (_claimnos.Trim() != "")
            //        {
            //            //DeletePaper_Claim(_claimnos, _SubClaimNo);
            //            DeletePaper_Claim(oClaimNums);
            //        }

            //        #endregion




            //        SetView();

            //        #region " Make Blank Batch details "
            //        if (trvBatch.Nodes == null || trvBatch.Nodes.Count <= 0)
            //        {
            //            lblcalimamtvalue.Text = "";
            //            lblBatchDateValue.Text = "";
            //            lblClaimcountvalue.Text = "";
            //            lblClearinghouseValue.Text = "";
            //            tsb_BatchDetailReport.Visible = false;
            //            tsb_Print1500.Visible = false;
            //            //tsb_Send.Visible = false;
            //            Tsb_BatchSend.Visible = false;
            //        }
            //        else
            //        {
            //            tsb_BatchDetailReport.Visible = true;
            //            tsb_Print1500.Visible = true;
            //            // tsb_Send.Visible = true;
            //            Tsb_BatchSend.Visible = true;
            //        }
            //        #endregion 

            //    }
            //}
            //catch (Exception ex)
            //{
            //    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            //}
            //finally
            //{
            //    if (ogloBilling != null) { ogloBilling.Dispose(); }
            //}

            #endregion " Old Code "

            bool _callUndoBatch = false;

            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
            {
                if (c1trvBatch != null && c1trvBatch.Rows.Count > 0)
                {
                    _callUndoBatch = true;
                }
            }
            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
            {
                if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0)
                {
                    _callUndoBatch = true;
                }
            }

            if (_callUndoBatch == true)
            {
                UndoBatch();
            }
            else
            {

                MessageBox.Show("Select batch to undo.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }


        }
        private void Undo() //this is to be called from Reject button
        {
            // gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            DialogResult _dlgRst = DialogResult.None;
            string _tranIds = "";
            Int64 _tranId = 0;
            Int64 _patientId = 0;
            Int64 _claimNo = 0;
            Int64 _statusdate = 0;
            Int64 _statustime = 0;
            // Int64 _statusId = 0;
            Int64 _BatchId = 0;
            Int32 _nBillingmethod = 0;
            string _BatchName = "";
            Int64 _MastertranId = 0;


            try
            {
                this.Cursor = System.Windows.Forms.Cursors.WaitCursor;

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index));
                        _nBillingmethod = Convert.ToInt32(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["BillingMethodID"].Index));
                    }
                    _c1flexGridForClaims = c1BatchGrid;
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index));
                        _nBillingmethod = Convert.ToInt32(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["BillingMethodID"].Index));
                    }
                    _c1flexGridForClaims = c1BatchGridSentBatch;
                }

                if (_c1flexGridForClaims != null && _c1flexGridForClaims.Rows.Count > 1)
                {
                    bool _isSelected = false;
                    if (_c1flexGridForClaims.RowSel > 0)
                    { _isSelected = true; }

                    if (_isSelected == false)
                    {
                        MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    _dlgRst = MessageBox.Show("Are you sure you want to " + tsb_Reject.Text + " selected claim? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (_dlgRst == DialogResult.No) { return; }

                    //DataTable dtBatch = new DataTable();
                    //dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvBatch.SelectedNode.Tag));
                    //_BatchId = Convert.ToInt64(dtBatch.Rows[0]["nBatchID"]);
                    //_BatchName = Convert.ToString(dtBatch.Rows[0]["sBatchName"]).Replace("'", "''");
                    //Int32 _nBillingmethod = Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]);

                    if (_BatchId > 0)
                    {
                        int i = 0;
                        i = _c1flexGridForClaims.RowSel;
                        if (i > 0)
                        {
                            if (_c1flexGridForClaims.GetCellCheck(i, _c1flexGridForClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                if (_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index) != null
                                    && Convert.ToString(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index)) != ""
                                    && (Convert.ToString(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index)) == TransactionStatus.Batch.ToString() ||
                                     (Convert.ToString(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()))
                                    )
                                {
                                    _tranId = Convert.ToInt64(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["TransactionID"].Index));
                                    _patientId = Convert.ToInt64(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["PatientID"].Index));
                                    _claimNo = Convert.ToInt64(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["ClaimNo"].Index));
                                    _statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                                    _statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());
                                    _MastertranId = Convert.ToInt64(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["TransactionMasterID"].Index));
                                    _tranIds += _tranId.ToString() + ",";



                                    gloBilling objbilling = new gloBilling(_databaseconnectionstring, "");
                                    objbilling.UndoTransactionClaim(_MastertranId, _tranId, _ClinicID);

                                    DeleteBatchForOneClaim(_BatchId, _BatchName, _claimNo, _MastertranId, _tranId);

                                    //if (trvBatch.SelectedNode != null)
                                    //{

                                    //    //Actual Delete Done,and created Files.
                                    //    //Send_Click(true, true, true);
                                    //    SendElectronicClaimUndo(_nBillingmethod);

                                    //}

                                    if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                    {
                                        if (c1trvBatch != null && c1trvBatch.Rows.Count > 0)
                                        {
                                            SendElectronicClaimUndo(_nBillingmethod);
                                        }
                                    }
                                    else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                    {
                                        if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0)
                                        {
                                            SendElectronicClaimUndo(_nBillingmethod);
                                        }
                                    }


                                    #region Delete whole batch If no claim found

                                    if (GetBatchAllClaims(_BatchId) == false)
                                    {
                                        DeleteBatch(_BatchId, _BatchName);
                                    }


                                    #endregion

                                    #region To delete Paper Claim

                                    int _index = _c1flexGridForClaims.RowSel;
                                    if (_index > 0)
                                    {
                                        string _claimNo1 = Convert.ToString(_c1flexGridForClaims.GetData(_index, _c1flexGridForClaims.Cols["ClaimNo"].Index));
                                        string _SubClaimNo1 = Convert.ToString(_c1flexGridForClaims.GetData(_index, _c1flexGridForClaims.Cols["SubClaimNo"].Index));
                                        gloGeneralItem.gloItems oClaimNum = new gloGeneralItem.gloItems();
                                        oClaimNum.Add(0, _claimNo1, _SubClaimNo1);

                                        //DeletePaper_Claim(_claimNo1, _SubClaimNo1);
                                        DeletePaper_Claim(oClaimNum);
                                        if (oClaimNum != null)
                                        {
                                            oClaimNum.Clear();
                                            oClaimNum.Dispose();
                                            oClaimNum = null;
                                        }

                                    }

                                    #endregion

                                    //SetView();

                                    _MastertranId = 0;
                                    _tranId = 0;
                                    _patientId = 0;
                                    _claimNo = 0;
                                    _statusdate = 0;
                                    _statustime = 0;
                                    //_statusId = 0;
                                }
                                else if (_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index) != null
                               && Convert.ToString(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index)) != ""
                               && (Convert.ToString(_c1flexGridForClaims.GetData(i, _c1flexGridForClaims.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()))
                                {
                                    MessageBox.Show("You can not " + tsb_RejectBatch.Text.ToLower().Replace("batch", "") + " selected claim(s),as insurance payment has been done. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    _MastertranId = 0;
                                    _tranId = 0;
                                    _patientId = 0;
                                    _claimNo = 0;
                                    _statusdate = 0;
                                    _statustime = 0;
                                    // _statusId = 0;
                                }

                            }
                        }
                    }
                    _tranIds = _tranIds.TrimEnd(',');
                    //ogloBilling.UpdateCurrentStatus(_tranIds, TransactionStatus.Queue);

                }
                else
                {
                    MessageBox.Show("Select claim to undo.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                SetView();

                #region " Make Blank Batch details "

                //if (trvBatch.Nodes == null || trvBatch.Nodes.Count <= 0)
                //{
                //    lblcalimamtvalue.Text = "";
                //    lblBatchDateValue.Text = "";
                //    lblClaimcountvalue.Text = "";
                //    lblClearinghouseValue.Text = "";
                //    tsb_BatchDetailReport.Visible = false;
                //    tsb_Print1500.Visible = false;
                //    //  tsb_Send.Visible = false;
                //    Tsb_BatchSend.Visible = false;
                //}
                //else
                //{
                //    tsb_BatchDetailReport.Visible = true;
                //    tsb_Print1500.Visible = true;
                //    //  tsb_Send.Visible = true;
                //    Tsb_BatchSend.Visible = true;
                //}

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch == null || c1trvBatch.Rows.Count <= 0 || c1trvBatch.RowSel < 0)
                    {
                        lblcalimamtvalue.Text = "";
                        lblBatchDateValue.Text = "";
                        lblClaimcountvalue.Text = "";
                        lblClearinghouseValue.Text = "";
                        tsb_BatchDetailReport.Visible = false;
                        tsb_Print1500.Visible = false;
                        Tsb_BatchSend.Visible = false;
                        tsb_PrintNew1500.Visible = false; // 12312013 sameer
                    }
                    else
                    {
                        tsb_BatchDetailReport.Visible = true;
                        tsb_Print1500.Visible = true;
                        Tsb_BatchSend.Visible = true;
                        tsb_PrintNew1500.Visible = true; // 12312013 sameer
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch == null || c1trvBatch_SentBatch.Rows.Count <= 0 || c1trvBatch_SentBatch.RowSel < 0)
                    {
                        lblcalimamtvalue_SentBatch.Text = "";
                        lblBatchDateValue_SentBatch.Text = "";
                        lblClaimcountvalue_SentBatch.Text = "";
                        lblClearinghouseValue_SentBatch.Text = "";
                        tsb_BatchDetailReport.Visible = false;
                        tsb_Print1500.Visible = false;
                        Tsb_BatchSend.Visible = false;
                        tsb_PrintNew1500.Visible = false; // 12312013 sameer 
                    }
                    else
                    {
                        tsb_BatchDetailReport.Visible = true;
                        tsb_Print1500.Visible = true;
                        Tsb_BatchSend.Visible = true;
                        tsb_PrintNew1500.Visible = true; // 12312012 sameer 
                    }
                }



                #endregion
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                //if (ogloBilling != null) { ogloBilling.Dispose(); }
                this.Cursor = System.Windows.Forms.Cursors.Default;
            }
        }

        private void UndoBatch()
        {
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            DialogResult _dlgRst = DialogResult.None;
            // string _tranIds = "";
            Int64 _tranId = 0;
            Int64 _patientId = 0;
            Int64 _claimNo = 0;
            // Int64 _statusdate = 0;
            //  Int64 _statustime = 0;
            // Int64 _statusId = 0;
            Int64 _BatchId = 0;
            string _BatchName = "";
            // Int64 _BatchDate = 0;
            // Int64 _BatchNumber = 0;
            bool _IsMsgShown = false;
            Int64 _MastertranId = 0;

            try
            {

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index));
                    }
                    _c1flexGridForClaims = c1BatchGrid;
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));
                        _BatchName = Convert.ToString(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index));
                    }
                    _c1flexGridForClaims = c1BatchGridSentBatch;
                }

                if (_c1flexGridForClaims != null && _c1flexGridForClaims.Rows.Count > 0)
                {
                    bool _isSelected = false;
                    if (_c1flexGridForClaims.RowSel > 0)
                    { _isSelected = true; }

                    if (_isSelected == false)
                    {
                        MessageBox.Show("Please select the claims", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    _dlgRst = MessageBox.Show("Are you sure you want to " + tsb_Reject.Text + " selected Batch? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (_dlgRst == DialogResult.No) { return; }

                    #region GETTING BATCH DETAILS

                    //_BatchId = Convert.ToInt64(trvBatch.SelectedNode.Tag);
                    //_BatchName = Convert.ToString(trvBatch.SelectedNode.Text);

                    #endregion


                    DataTable dtTransaction = GetBatchTransaction(_BatchId);

                    if (dtTransaction != null && dtTransaction.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtTransaction.Rows.Count; i++)
                        {

                            if (_BatchId > 0)
                            {

                                if (((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) != TransactionStatus.InsurancePaid)
                                                                    && (((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) == TransactionStatus.Batch)
                                                                    || ((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) == TransactionStatus.SendToClaimManager))
                                                                    )
                                {

                                    _tranId = Convert.ToInt64(dtTransaction.Rows[i]["TransactionID"]);
                                    _patientId = Convert.ToInt64(dtTransaction.Rows[i]["PatientID"]);
                                    _claimNo = Convert.ToInt64(dtTransaction.Rows[i]["ClaimNo"]);
                                    _MastertranId = Convert.ToInt64(dtTransaction.Rows[i]["TransactionMasterID"]);

                                    ogloBilling.UndoTransactionClaim(_MastertranId, _tranId, _ClinicID);

                                    //Delete Batch
                                    //Check this again...........
                                    DeleteBatchForOneClaim(_BatchId, _BatchName, _claimNo, _MastertranId, _tranId);

                                    _tranId = 0;
                                    _patientId = 0;
                                    _claimNo = 0;
                                    // _statusdate = 0;
                                    // _statustime = 0;
                                    //_statusId = 0;
                                    _MastertranId = 0;
                                }

                                else if ((TransactionStatus)(dtTransaction.Rows[i]["nStatus"]) == TransactionStatus.InsurancePaid)
                                {

                                    DialogResult _dg = DialogResult.None;
                                    if (_IsMsgShown == false)
                                    {
                                        _dg = MessageBox.Show("You can not " + tsb_RejectBatch.Text.ToLower().Replace("batch", "") + " selected claim(s),as payment has been done. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);  // SUDHIR 20100323 // MANTIS 1363 //
                                        _IsMsgShown = true;
                                    }

                                    if (_dg == DialogResult.Yes || _IsMsgShown == true)
                                    {
                                        _tranId = 0;
                                        _patientId = 0;
                                        _claimNo = 0;
                                        //_statusdate = 0;
                                        //_statustime = 0;
                                        //_statusId = 0;
                                    }

                                }
                            }
                        }
                    }

                    #region Delete whole batch If no claim found

                    if (GetBatchAllClaims(_BatchId) == false)
                    {
                        DeleteBatch(_BatchId, _BatchName);
                    }


                    #endregion

                    #region Delete Selected Batch Electronic Claims

                    // COMMENT BY SUDHIR 20100213 //
                    if (_CopyEDIFiles == true)
                    {
                        string _ServerPath = GetServerPath();
                        string _BaseFolder = "Claim Management";
                        string _OutInFolder = "OutBox";
                        string _ClaimFolder = "837P Claim submission";
                        string _ElectroniPaperFolder = "Electronic";
                        //string _BatchFolderName = trvBatch.SelectedNode.Text.Trim();
                        string _BatchFolderName = _BatchName;
                        string _claimFolderPath = "";


                        if (_IsMsgShown == false)
                        {
                            _claimFolderPath = _ServerPath + "\\" + _BaseFolder + "\\" + _OutInFolder + "\\" + _ClaimFolder + "\\" + _ElectroniPaperFolder + "\\" + _BatchFolderName;


                            System.IO.DirectoryInfo oDirectoryInfo = new System.IO.DirectoryInfo(_claimFolderPath);

                            if (oDirectoryInfo.Exists == true)
                            {
                                deleteEDIFilesFromDirectory(_BatchFolderName);
                                //oDirectoryInfo.Delete(true);
                            }
                        }
                        if (tsb_RejectBatch.Text.ToLower().Contains("undo batch"))
                        {
                            DeleteElectronicClaim(_BatchId);
                            deleteEDIFilesFromDirectory(_BatchName);
                        }
                    }
                    #endregion


                    #region Delete Paper Claim

                    #region GetClaims

                    string _claimnos = String.Empty;
                    string _SubClaimNo = String.Empty;
                    gloGeneralItem.gloItems oClaimNums = new gloGeneralItem.gloItems();


                    for (int rowIndex = 0; rowIndex < dtTransaction.Rows.Count; rowIndex++)
                    {
                        if (Convert.ToString(dtTransaction.Rows[rowIndex]["nStatus"]).Trim() != "" &&
                            (TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Rebilled &&
                            (TransactionStatus)(dtTransaction.Rows[rowIndex]["nStatus"]) != TransactionStatus.Resent)
                        {

                            Int64 _claimNo3 = 0;
                            _claimNo3 = Convert.ToInt64(dtTransaction.Rows[rowIndex]["ClaimNo"]);
                            string _SubClaimNo3 = Convert.ToString(dtTransaction.Rows[rowIndex]["SubClaimNo"]);
                            oClaimNums.Add(0, _claimNo3.ToString(), _SubClaimNo3);

                            if (_claimNo3 != 0)
                            {
                                if (_claimnos != "")
                                {
                                    _claimnos = _claimnos + ",";
                                }
                                _claimnos = _claimnos + _claimNo3;
                            }

                            // SUDHIR 20100313 //
                            if (_SubClaimNo3 != "" && _SubClaimNo3 != "0")
                            {
                                if (_SubClaimNo != "")
                                    _SubClaimNo = _SubClaimNo + ",";
                                _SubClaimNo = _SubClaimNo + _SubClaimNo3;
                            }
                        }
                    }

                    #endregion


                    if (_claimnos.EndsWith(",") == true)
                    {
                        _claimnos.Remove(_claimnos.Length - 1, 1);
                    }
                    if (_SubClaimNo.EndsWith(",") == true)
                    {
                        _SubClaimNo.Remove(_SubClaimNo.Length - 1, 1);
                    }
                    if (_claimnos.Trim() != "")
                    {
                        //DeletePaper_Claim(_claimnos, _SubClaimNo);
                        DeletePaper_Claim(oClaimNums);
                    }
                    if (oClaimNums != null)
                    {
                        oClaimNums.Clear();
                        oClaimNums.Dispose();
                        oClaimNums = null;
                    }
                    #endregion




                    SetView();

                    #region " Make Blank Batch details "
                    //if (trvBatch.Nodes == null || trvBatch.Nodes.Count <= 0)
                    //{
                    //    lblcalimamtvalue.Text = "";
                    //    lblBatchDateValue.Text = "";
                    //    lblClaimcountvalue.Text = "";
                    //    lblClearinghouseValue.Text = "";
                    //    tsb_BatchDetailReport.Visible = false;
                    //    tsb_Print1500.Visible = false;
                    //    //tsb_Send.Visible = false;
                    //    Tsb_BatchSend.Visible = false;
                    //}
                    //else
                    //{
                    //    tsb_BatchDetailReport.Visible = true;
                    //    tsb_Print1500.Visible = true;
                    //    // tsb_Send.Visible = true;
                    //    Tsb_BatchSend.Visible = true;
                    //}

                    if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                    {
                        if (c1trvBatch == null || c1trvBatch.Rows.Count <= 0 || c1trvBatch.RowSel < 0)
                        {
                            lblcalimamtvalue.Text = "";
                            lblBatchDateValue.Text = "";
                            lblClaimcountvalue.Text = "";
                            lblClearinghouseValue.Text = "";
                            tsb_BatchDetailReport.Visible = false;
                            tsb_Print1500.Visible = false;
                            Tsb_BatchSend.Visible = false;
                            tsb_PrintNew1500.Visible = false; //12312013 sameer
                        }
                        else
                        {
                            tsb_BatchDetailReport.Visible = true;
                            tsb_Print1500.Visible = true;
                            Tsb_BatchSend.Visible = true;
                        }
                    }
                    else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                    {
                        if (c1trvBatch_SentBatch == null || c1trvBatch_SentBatch.Rows.Count <= 0 || c1trvBatch_SentBatch.RowSel < 0)
                        {
                            lblcalimamtvalue_SentBatch.Text = "";
                            lblBatchDateValue_SentBatch.Text = "";
                            lblClaimcountvalue_SentBatch.Text = "";
                            lblClearinghouseValue_SentBatch.Text = "";
                            tsb_BatchDetailReport.Visible = false;
                            tsb_Print1500.Visible = false;
                            Tsb_BatchSend.Visible = false;
                            tsb_PrintNew1500.Visible = false; // 12312012 sameer 
                        }
                        else
                        {
                            tsb_BatchDetailReport.Visible = true;
                            tsb_Print1500.Visible = true;
                            Tsb_BatchSend.Visible = true;
                        }
                    }

                    #endregion

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (ogloBilling != null) { ogloBilling.Dispose(); }
            }
        }

        //private void tsb_Close_Click(object sender, EventArgs e)
        //{
        //    this.Close();
        //}

        //private void tsb_Help_Click(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        gloEDIGeneration ogloEDIGeneration = new gloEDIGeneration(_databaseconnectionstring, 0, 0);
        //        ogloEDIGeneration.Load277EDIFile();
        //        ogloEDIGeneration.TranslateEDI277ClaimStatus();
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }
        //}

        //private void tsb_Print1500_Click(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        OpenHCFA1500Modify();
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }
        //    finally
        //    { }
        //}

        //MaheshB 20091204


        private void tsb_Close_Click(object sender, EventArgs e)
        {
            if (thrdQueue == null)
            {
                this.Close();
            }
        }

        private void tsb_Help_Click(object sender, EventArgs e)
        {
            try
            {
                gloEDIGeneration ogloEDIGeneration = new gloEDIGeneration(_databaseconnectionstring, 0, 0);
                ogloEDIGeneration.Load277EDIFile();
                ogloEDIGeneration.TranslateEDI277ClaimStatus();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
        }

        private void tsb_Print1500_Click(object sender, EventArgs e)
        {
            try
            {
                OpenHCFA1500Modify();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            { }
        }

        private void tsb_Finished_Click(object sender, EventArgs e)
        {
            Finished_Click();
        }

        private void tsb_ClaimStatus_Click(object sender, EventArgs e)
        {
            try
            {
                gloEDIGeneration ogloEDIGeneration = new gloEDIGeneration(_databaseconnectionstring, 0, 0);
                ogloEDIGeneration.Load277EDIFile();
                ogloEDIGeneration.TranslateEDI277ClaimStatus();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
        }

        #endregion " ToolStrip Button Click Event "

        #region " C1 Grid Events "

        private void c1BillingTransactions_CellChanged(object sender, C1.Win.C1FlexGrid.RowColEventArgs e)
        {

        }
        private void c1BillingTransactions_AfterEdit(object sender, C1.Win.C1FlexGrid.RowColEventArgs e)
        {
            bool _SelectAll = true;
            int _colIndex = 0;
            C1.Win.C1FlexGrid.CheckEnum _cheEnum = C1.Win.C1FlexGrid.CheckEnum.None;

            try
            {
                if (_isFormLoading == false)
                {
                    if (((C1.Win.C1FlexGrid.C1FlexGrid)sender) != null && ((C1.Win.C1FlexGrid.C1FlexGrid)sender).Rows.Count > 1)
                    {
                        _colIndex = ((C1.Win.C1FlexGrid.C1FlexGrid)sender).Cols["Select"].Index;
                        if (e.Col == _colIndex)
                        {
                            _cheEnum = ((C1.Win.C1FlexGrid.C1FlexGrid)sender).GetCellCheck(e.Row, _colIndex);

                            for (int i = 1; i <= ((C1.Win.C1FlexGrid.C1FlexGrid)sender).Rows.Count - 1; i++)
                            {
                                //if (i != e.Row)
                                //{
                                if (((C1.Win.C1FlexGrid.C1FlexGrid)sender).GetCellCheck(i, _colIndex) == C1.Win.C1FlexGrid.CheckEnum.Unchecked)
                                {
                                    _SelectAll = false;
                                    break;
                                }
                                //}
                            }

                            if (_SelectAll == true)// || _cheEnum == C1.Win.C1FlexGrid.CheckEnum.Checked)
                            {
                                tsb_Select.Text = "DeSelect All";
                                tsb_Select.Tag = "Deselect";
                            }
                            else
                            {
                                tsb_Select.Text = "Select All";
                                tsb_Select.Tag = "Select";
                            }
                        }
                    }
                }
            }
            catch //(Exception ex)
            {
                MessageBox.Show("ERROR : Selection");
            }
            finally
            { }
        }
        private void c1QueuedClaims_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Left)
                {
                    C1.Win.C1FlexGrid.HitTestInfo hitInfo = c1QueuedClaims.HitTest(e.X, e.Y);

                    //if hitrow is not header row open entry for edit 
                    //else set the search column header 
                    if (hitInfo.Row > 0)
                    {
                        OpenModify();
                    }
                    else
                    {
                        //if (hitInfo.Column != c1QueuedClaims.Cols["Select"].Index)
                        //{
                        //    lblQueueSearch.Text = c1QueuedClaims.Cols[hitInfo.Column].Name.ToString() + " : ";
                        //    lblQueueSearch.Tag = hitInfo.Column;
                        //    txtQueueSearch.Focus();
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void c1QueuedClaims_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Left)
                {
                    C1.Win.C1FlexGrid.HitTestInfo hitInfo = c1QueuedClaims.HitTest(e.X, e.Y);

                    //if hitrow is not header row open entry for edit 
                    //else set the search column header 
                    if (hitInfo.Row > 0)
                    {

                        if (!SelectedCharges.Contains(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index)) && c1QueuedClaims.GetCellCheck(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Checked)
                            SelectedCharges.Add(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index));
                        else if (SelectedCharges.Contains(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index)) && c1QueuedClaims.GetCellCheck(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Unchecked)
                            SelectedCharges.Remove(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index));

                        if (hitInfo.Column == 35)
                        {
                            Int64 nTransactionMasterID = Convert.ToInt64(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, 1));
                            Int64 nTransactionID = Convert.ToInt64(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, 2));
                            if (Convert.ToString(c1QueuedClaims.GetData(hitInfo.Row, hitInfo.Column)) != "")
                            {
                                this.ShowBrokenRules(nTransactionMasterID, nTransactionID);
                            }               
                        }
                    }
                    else
                    {
                        //if (hitInfo.Column != c1QueuedClaims.Cols["Select"].Index)
                        //{
                        //    lblQueueSearch.Text = c1QueuedClaims.Cols[hitInfo.Column].Name.ToString() + " : ";
                        //    lblQueueSearch.Tag = hitInfo.Column;
                        //    txtQueueSearch.Focus();
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void c1QueuedClaims_AfterEdit(object sender, RowColEventArgs e)
        {
            try
            {
                if (!SelectedCharges.Contains(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index)) && c1QueuedClaims.GetCellCheck(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Checked)
                    SelectedCharges.Add(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index));
                else if (SelectedCharges.Contains(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index)) && c1QueuedClaims.GetCellCheck(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Unchecked)
                    SelectedCharges.Remove(c1QueuedClaims.GetData(c1QueuedClaims.RowSel, c1QueuedClaims.Cols["TransactionID"].Index));
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void c1BatchGrid_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            C1.Win.C1FlexGrid.HitTestInfo hitInfo;
            try
            {


                if (e.Button == MouseButtons.Left)
                {
                    if (sender != null)
                    {
                        if (((C1FlexGrid)sender).Name == c1BatchGrid.Name)
                        {
                            hitInfo = c1BatchGrid.HitTest(e.X, e.Y);
                        }
                        else if (((C1FlexGrid)sender).Name == c1BatchGridSentBatch.Name)
                        {
                            hitInfo = c1BatchGridSentBatch.HitTest(e.X, e.Y);
                        }
                        else
                            return;
                    }
                    else
                    {
                        return;
                    }
                    //..If HitRow is not header row open Batch Transaction for modify 
                    //else set the search column header
                    //****** For Batch Transaction Modify set the IsBatchModify flag = true
                    //and set BatchModifyStatus as Batch
                    if (hitInfo.Row > 0)
                    {
                        OpenModify();
                    }
                    else
                    {
                        //if (hitInfo.Column != c1BatchGrid.Cols["Select"].Index)
                        //{
                        //    lblSearhBatch.Text = c1BatchGrid.Cols[hitInfo.Column].Name.ToString() + " : ";
                        //    lblSearhBatch.Tag = hitInfo.Column;
                        //    txtBatchSearch.Focus();
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }

        }

        private void c1BatchGrid_SelChange(object sender, EventArgs e)
        {

        }

        private void c1BatchGrid_CellChanged(object sender, C1.Win.C1FlexGrid.RowColEventArgs e)
        {

        }

        private void c1BatchGrid_RowColChange(object sender, EventArgs e)
        {
            try
            {
                tsb_Reject.Visible = false;
                tsb_RejectBatch.Visible = false;
                tsb_Resend.Visible = false;
                _IsResend = false;

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    #region " Setup selection controls and action "
                    int i = c1BatchGrid.RowSel;

                    if (i > 0 && c1BatchGrid.Cols["Status"] != null)
                    {
                        if (c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index) != null)
                        {
                            string _status = Convert.ToString(c1BatchGrid.GetData(i, c1BatchGrid.Cols["Status"].Index));

                            if (_status.Trim() == TransactionStatus.SendToClearingHouse.ToString().Trim())
                            {
                                //20100422 gloPM5040 Resend 
                                tsb_Resend.Visible = true;
                                tsb_Reject.Visible = false;
                                tsb_RejectBatch.Visible = false;

                            }
                            else if (_status.Trim() == TransactionStatus.Rebilled.ToString().Trim() || _status.Trim() == TransactionStatus.InsurancePaid.ToString().Trim())
                            {
                                tsb_Reject.Visible = false;
                                tsb_RejectBatch.Visible = false;
                                tsb_Resend.Visible = false;
                            }
                            else
                            {
                                tsb_Reject.Visible = true;
                                tsb_RejectBatch.Visible = true;
                                tsb_Reject.Text = "Undo";
                                tsb_Reject.ToolTipText = "Undo";
                                tsb_Reject.Tag = "Undo Claim";
                                tsb_Reject.Image = global::gloBilling.Properties.Resources.Undo;

                                tsb_RejectBatch.Text = "Undo Batch";
                                tsb_RejectBatch.ToolTipText = "Undo Batch";
                                tsb_RejectBatch.Tag = "Undo Batch";
                                tsb_RejectBatch.Image = global::gloBilling.Properties.Resources.Undo_batch;

                                tsb_Resend.Visible = true;
                            }
                            if (_status.Trim() == TransactionStatus.Batch.ToString().Trim())
                            {
                                tsb_Resend.Visible = false;
                            }
                            if (_status.Trim() == TransactionStatus.Resent.ToString().Trim())
                            {
                                tsb_Resend.Visible = false;
                                tsb_Reject.Visible = false;
                                tsb_RejectBatch.Visible = false;
                            }
                        }
                    }
                    #endregion " Setup selection controls and action "
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    #region " Setup selection controls and action "
                    int i = c1BatchGridSentBatch.RowSel;

                    if (i > 0 && c1BatchGridSentBatch.Cols["Status"] != null)
                    {
                        if (c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["Status"].Index) != null)
                        {
                            string _status = Convert.ToString(c1BatchGridSentBatch.GetData(i, c1BatchGridSentBatch.Cols["Status"].Index));

                            if (_status.Trim() == TransactionStatus.SendToClearingHouse.ToString().Trim())
                            {
                                //20100422 gloPM5040 Resend 
                                tsb_Resend.Visible = true;
                                tsb_Reject.Visible = false;
                                tsb_RejectBatch.Visible = false;

                            }
                            else if (_status.Trim() == TransactionStatus.Rebilled.ToString().Trim() || _status.Trim() == TransactionStatus.InsurancePaid.ToString().Trim())
                            {
                                tsb_Reject.Visible = false;
                                tsb_RejectBatch.Visible = false;
                                tsb_Resend.Visible = false;
                            }
                            else
                            {
                                tsb_Reject.Visible = true;
                                tsb_RejectBatch.Visible = true;
                                tsb_Reject.Text = "Undo";
                                tsb_Reject.ToolTipText = "Undo";
                                tsb_Reject.Tag = "Undo Claim";
                                tsb_Reject.Image = global::gloBilling.Properties.Resources.Undo;

                                tsb_RejectBatch.Text = "Undo Batch";
                                tsb_RejectBatch.ToolTipText = "Undo Batch";
                                tsb_RejectBatch.Tag = "Undo Batch";
                                tsb_RejectBatch.Image = global::gloBilling.Properties.Resources.Undo_batch;

                                tsb_Resend.Visible = true;
                            }
                            if (_status.Trim() == TransactionStatus.Batch.ToString().Trim())
                            {
                                tsb_Resend.Visible = false;
                            }
                            if (_status.Trim() == TransactionStatus.Resent.ToString().Trim())
                            {
                                tsb_Resend.Visible = false;
                                tsb_Reject.Visible = false;
                                tsb_RejectBatch.Visible = false;
                            }
                        }
                    }
                    #endregion " Setup selection controls and action "
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
            }

        }

        private void c1VoidClaims_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Left)
                {
                    C1.Win.C1FlexGrid.HitTestInfo hitInfo = c1VoidClaims.HitTest(e.X, e.Y);

                    //..If HitRow is not header row open Batch Transaction for modify 
                    //else set the search column header
                    //****** For Batch Transaction Modify set the IsBatchModify flag = true
                    //and set BatchModifyStatus as Batch
                    if (hitInfo.Row > 0)
                    {
                        OpenModify();
                    }
                    else
                    {
                        //if (hitInfo.Column != c1BatchGrid.Cols["Select"].Index)
                        //{
                        //    lblSearhBatch.Text = c1BatchGrid.Cols[hitInfo.Column].Name.ToString() + " : ";
                        //    lblSearhBatch.Tag = hitInfo.Column;
                        //    txtBatchSearch.Focus();
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        #region "Hold Tab Grid Event"


        private void C1PlanHoldclaim_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            //Display the Claims as per plan.
            try
            {
                if (e.Button == MouseButtons.Left)
                {
                    C1.Win.C1FlexGrid.HitTestInfo hitInfo = C1PlanHoldclaim.HitTest(e.X, e.Y);

                    if (hitInfo.Row > 0)
                    {
                        OpenModify();
                    }

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void c1PlanHold_RowColChange(object sender, EventArgs e)
        {
            //As per Plan fill the Plan hold claims Grid.
            try
            {
                GetPlanHoldClaimDetails();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void c1PlanHold_AfterSort(object sender, C1.Win.C1FlexGrid.SortColEventArgs e)
        {
            //As per Plan fill the Plan hold claims Grid.
            try
            {
                GetPlanHoldClaimDetails();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            int _index;
            try
            {
                _index = c1PlanHold.FindRow(_PlanHoldID.ToString(), 0, c1PlanHold.Cols["nContactID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }

            c1PlanHold.ShowCell(_index, 0);
            c1PlanHold.Row = _index;
            c1PlanHold.Select();
        }

        private void numHoldClaimCount_ValueChanged(object sender, EventArgs e)
        {
            //Filter the Grid as per count.
            try
            {
                DataView dv = null;
                if (rbBillingHold.Checked == true)
                {
                    dv = (DataView)c1BillingHold.DataSource;
                    if (dv != null)
                    {
                        dv.RowFilter = "row_count <=" + numHoldClaimCount.Value.ToString();
                        c1BillingHold.DataSource = dv;
                    }
                }
                else if (rbPlanHold.Checked == true)
                {
                    dv = (DataView)c1PlanHold.DataSource;
                    if (dv != null)
                    {
                        dv.RowFilter = "row_count <=" + numHoldClaimCount.Value.ToString();
                        c1PlanHold.DataSource = dv;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }

        }

        private void c1BillingHold_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            //Open the Claim for Modify.
            try
            {
                if (e.Button == MouseButtons.Left)
                {
                    C1.Win.C1FlexGrid.HitTestInfo hitInfo = c1BillingHold.HitTest(e.X, e.Y);
                    if (hitInfo.Row > 0)
                    {
                        OpenModify();
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        #endregion


        #region "C1 Grid ToolTip Set"

        private void c1QueuedClaims_MouseMove(object sender, MouseEventArgs e)
        {
            gloC1FlexStyle.ShowToolTipForLineBreak(C1SuperTooltipDx, ((C1FlexGrid)sender), e.Location);
        }

        private void c1VoidClaims_MouseMove(object sender, MouseEventArgs e)
        {
            gloC1FlexStyle.ShowToolTipForLineBreak(C1SuperTooltipDx, ((C1FlexGrid)sender), e.Location);
        }

        private void c1BatchGrid_MouseMove(object sender, MouseEventArgs e)
        {
            gloC1FlexStyle.ShowToolTipForLineBreak(C1SuperTooltipDx, ((C1FlexGrid)sender), e.Location);
        }

        private void c1BatchGrid_MouseLeave(object sender, EventArgs e)
        {
            C1SuperTooltipDx.Hide();
        }

        private void c1VoidClaims_MouseLeave(object sender, EventArgs e)
        {
            C1SuperTooltipDx.Hide();
        }

        private void c1QueuedClaims_MouseLeave(object sender, EventArgs e)
        {
            C1SuperTooltipDx.Hide();
        }

        #endregion

        #endregion " C1 Grid Events "

        #region " Form Controls Events "

        private void cmbInsuranceCompany_MouseLeave(object sender, EventArgs e)
        {
            //combo = (ComboBox)sender;
            //tooltip_Billing.Hide(combo);
        }

        private void cmbReportingCategory_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbReportingCategory.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbReportingCategory.Items[cmbReportingCategory.SelectedIndex])["sDescription"]), cmbReportingCategory) >= cmbReportingCategory.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbReportingCategory, Convert.ToString(((DataRowView)cmbReportingCategory.Items[cmbReportingCategory.SelectedIndex])["sDescription"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbReportingCategory);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbReportingCategory);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbProvider_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbProvider.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbProvider.Items[cmbProvider.SelectedIndex])["Description"]), cmbProvider) >= cmbProvider.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbProvider, Convert.ToString(((DataRowView)cmbProvider.Items[cmbProvider.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbProvider);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbProvider);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbMultiChargesTray_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbMultiChargesTray.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[cmbMultiChargesTray.SelectedIndex])["Description"]), cmbMultiChargesTray) >= cmbMultiChargesTray.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbMultiChargesTray, Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[cmbMultiChargesTray.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbMultiChargesTray);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbMultiChargesTray);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbMultiFacility_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbMultiFacility.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbMultiFacility.Items[cmbMultiFacility.SelectedIndex])["Description"]), cmbMultiFacility) >= cmbMultiFacility.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbMultiFacility, Convert.ToString(((DataRowView)cmbMultiFacility.Items[cmbMultiFacility.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbMultiFacility);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbMultiFacility);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbUser_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbUser.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbUser.Items[cmbUser.SelectedIndex])["Description"]), cmbUser) >= cmbUser.DropDownWidth - 20)
                    {
                        this.tooltip_Billing.SetToolTip(cmbUser, Convert.ToString(((DataRowView)cmbUser.Items[cmbUser.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbUser);
                    }
                }
                else
                {
                    tooltip_Billing.Hide(cmbUser);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbClearingHouse_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbClearingHouse.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbClearingHouse.Items[cmbClearingHouse.SelectedIndex])["sClearingHouseCode"]), cmbClearingHouse) >= cmbClearingHouse.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbClearingHouse, Convert.ToString(((DataRowView)cmbClearingHouse.Items[cmbClearingHouse.SelectedIndex])["sClearingHouseCode"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbClearingHouse);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbClearingHouse);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void maskedCloseDate_Validating(object sender, CancelEventArgs e)
        {
            ((MaskedTextBox)sender).TextMaskFormat = MaskFormat.ExcludePromptAndLiterals;

            if (maskedCloseDate.Text.Trim() != "")
            {
                ((MaskedTextBox)sender).TextMaskFormat = MaskFormat.IncludePromptAndLiterals;
                if (IsValidDate(maskedCloseDate.Text.Trim()) == false)
                {
                    MessageBox.Show("Please enter a valid date.  ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    e.Cancel = true;
                }
            }
            else
            {
                e.Cancel = false;
            }
            ((MaskedTextBox)sender).TextMaskFormat = MaskFormat.IncludePromptAndLiterals;

        }

        private void tsb_UB04_Click(object sender, EventArgs e)
        {
            OpenUB04Form();
        }

        private void tsb_BatchDetailReport_Click(object sender, EventArgs e)
        {
            Cursor.Current = Cursors.WaitCursor;
            SSRSApplication.frmSSRSViewer frmSSRS = new SSRSApplication.frmSSRSViewer();
            frmSSRS.Conn = _databaseconnectionstring;
            frmSSRS.reportName = "rptBatchDetail";
            frmSSRS.reportTitle = "Batch Details Report";
            frmSSRS.parameterName = "BatchID";

            //frmSSRS.ParameterValue = trvBatch.SelectedNode.Tag.ToString();
            Int64 _selectedBatchId = 0;
            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
            {
                if (c1trvBatch != null && c1trvBatch.Rows.Count > 0 && c1trvBatch.RowSel >= 0 && c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index) != null)
                { _selectedBatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index)); }
            }
            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
            {
                if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0 && c1trvBatch_SentBatch.RowSel >= 0 && c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index) != null)
                { _selectedBatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index)); }
            }
            frmSSRS.ParameterValue = Convert.ToString(_selectedBatchId);

            frmSSRS.IsgloStreamReport = true;
            frmSSRS.MdiParent = this.MdiParent;
            Cursor.Current = Cursors.Default;
            frmSSRS.Show();
        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void panel6_Paint(object sender, PaintEventArgs e)
        {

        }

        private void lblInsurance_Click(object sender, EventArgs e)
        {

        }

        private void btnBrowseMultiFacility_Click(object sender, EventArgs e)
        {
            try
            {
                if (oListControl != null)
                {
                    for (int i = this.Controls.Count - 1; i >= 0; i--)
                    {
                        if (this.Controls[i].Name == oListControl.Name)
                        {
                            this.Controls.Remove(this.Controls[i]);
                            break;
                        }
                    }
                    try
                    {
                        try
                        {
                            oListControl.ItemSelectedClick -= new gloListControl.gloListControl.ItemSelected(oListControl_ItemSelectedClick);
                        }
                        catch
                        {
                        }
                        try
                        {
                            oListControl.ItemClosedClick -= new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);
                        }
                        catch
                        {
                        }


                    }
                    catch
                    {
                    }
                    oListControl.Dispose();
                    oListControl = null;
                }

                oListControl = new gloListControl.gloListControl(_databaseconnectionstring, gloListControl.gloListControlType.Facility, true, this.Width);

                oListControl.ClinicID = _ClinicID;
                oListControl.ControlHeader = " Facility ";

                oListControl.ItemSelectedClick += new gloListControl.gloListControl.ItemSelected(oListControl_ItemSelectedClick);
                oListControl.ItemClosedClick += new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);

                this.Controls.Add(oListControl);

                if (cmbMultiFacility.DataSource != null)
                {
                    for (int i = 0; i < cmbMultiFacility.Items.Count; i++)
                    {
                        cmbMultiFacility.SelectedIndex = i;
                        cmbMultiFacility.Refresh();
                        oListControl.SelectedItems.Add(Convert.ToInt64(cmbMultiFacility.SelectedValue), cmbMultiFacility.Text);
                    }
                }
                oListControl.OpenControl();
                oListControl.Dock = DockStyle.Fill;
                oListControl.BringToFront();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }


        }


        private void oListControl_ItemSelectedClick(object sender, EventArgs e)
        {
            try
            {
                this.cmbMultiFacility.SelectedIndexChanged -= new System.EventHandler(this.cmbMultiFacility_SelectedIndexChanged);
               // cmbMultiFacility.Items.Clear();
                cmbMultiFacility.DataSource = null;
                cmbMultiFacility.Items.Clear();
                DataTable dtReff = new DataTable();
                DataColumn dcId = new DataColumn("ID");
                DataColumn dcDescription = new DataColumn("Description");
                dtReff.Columns.Add(dcId);
                dtReff.Columns.Add(dcDescription);
                if (oListControl.SelectedItems.Count > 0)
                {
                    for (Int16 i = 0; i <= oListControl.SelectedItems.Count - 1; i++)
                    {
                        DataRow drTemp = dtReff.NewRow();
                        drTemp["ID"] = oListControl.SelectedItems[i].ID;
                        drTemp["Description"] = oListControl.SelectedItems[i].Description;
                        dtReff.Rows.Add(drTemp);
                    }
                }
                cmbMultiFacility.DataSource = dtReff;
                cmbMultiFacility.ValueMember = dtReff.Columns["ID"].ColumnName;
                cmbMultiFacility.DisplayMember = dtReff.Columns["Description"].ColumnName;
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
            finally
            {
                this.cmbMultiFacility.SelectedIndexChanged += new System.EventHandler(this.cmbMultiFacility_SelectedIndexChanged);
            }

        }



        private void btnBrowseMultiProvider_Click(object sender, EventArgs e)
        {
            try
            {
                if (oListControl != null)
                {
                    for (int i = this.Controls.Count - 1; i >= 0; i--)
                    {
                        if (this.Controls[i].Name == oListControl.Name)
                        {
                            this.Controls.Remove(this.Controls[i]);
                            break;
                        }
                    }
                    try
                    {
                        try
                        {
                            oListControl.ItemSelectedClick -= new gloListControl.gloListControl.ItemSelected(oListControl_ItemSelectedClick);
                        }
                        catch
                        {
                        }
                        try
                        {
                            oListControl.ItemClosedClick -= new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);
                        }
                        catch
                        {
                        }


                    }
                    catch
                    {
                    }
                    oListControl.Dispose();
                    oListControl = null;
                }

                oListControl = new gloListControl.gloListControl(_databaseconnectionstring, gloListControl.gloListControlType.Providers, true, this.Width);
                oListControl.ControlHeader = "Providers";

                oListControl.ItemSelectedClick += new gloListControl.gloListControl.ItemSelected(oListControl_ProviderSelectedClick);
                oListControl.ItemClosedClick += new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);
                oListControl.Dock = DockStyle.Fill;
                this.Controls.Add(oListControl);

                for (int i = 0; i < cmbProvider.Items.Count; i++)
                {
                    cmbProvider.SelectedIndex = i;
                    oListControl.SelectedItems.Add(Convert.ToInt64(cmbProvider.SelectedValue), cmbProvider.Text);
                }
                if (cmbProvider.Items.Count > 0)
                    cmbProvider.SelectedIndex = 0;
                oListControl.OpenControl();

                //oListControl is disposed in OpenControl() Method if Zero records found
                if (oListControl.IsDisposed == false)
                {
                    oListControl.Dock = DockStyle.Fill;
                    oListControl.BringToFront();
                }
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void oListControl_ProviderSelectedClick(object sender, EventArgs e)
        {
            try
            {
                this.cmbProvider.SelectedIndexChanged -= new System.EventHandler(this.cmbProvider_SelectedIndexChanged);
              //  cmbProvider.Items.Clear();
                cmbProvider.DataSource = null;
                cmbProvider.Items.Clear();
                DataTable dtReff = new DataTable();
                DataColumn dcId = new DataColumn("ID");
                DataColumn dcDescription = new DataColumn("Description");
                dtReff.Columns.Add(dcId);
                dtReff.Columns.Add(dcDescription);
                if (oListControl.SelectedItems.Count > 0)
                {
                    for (Int16 i = 0; i <= oListControl.SelectedItems.Count - 1; i++)
                    {
                        DataRow drTemp = dtReff.NewRow();
                        drTemp["ID"] = oListControl.SelectedItems[i].ID;
                        drTemp["Description"] = oListControl.SelectedItems[i].Description;
                        dtReff.Rows.Add(drTemp);
                    }
                }
                cmbProvider.DataSource = dtReff;
                cmbProvider.ValueMember = dtReff.Columns["ID"].ColumnName;
                cmbProvider.DisplayMember = dtReff.Columns["Description"].ColumnName;
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
            finally
            {
                this.cmbProvider.SelectedIndexChanged += new System.EventHandler(this.cmbProvider_SelectedIndexChanged);
            }

        }

        private void oListControl_ItemClosedClick(object sender, EventArgs e)
        {
            if (oListControl != null)
            {
                for (int i = this.Controls.Count - 1; i >= 0; i--)
                {
                    if (this.Controls[i].Name == oListControl.Name)
                    {
                        this.Controls.Remove(this.Controls[i]);
                        break;
                    }
                }
                try
                {
                    try
                    {
                        oListControl.ItemSelectedClick -= new gloListControl.gloListControl.ItemSelected(oListControl_ItemSelectedClick);
                    }
                    catch
                    {
                    }
                    try
                    {
                        oListControl.ItemClosedClick -= new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);
                    }
                    catch
                    {
                    }


                }
                catch
                {
                }

            }
        }

        private void btnBrowseMultiChargesTray_Click(object sender, EventArgs e)
        {
            try
            {
                if (oListControl != null)
                {
                    for (int i = this.Controls.Count - 1; i >= 0; i--)
                    {
                        if (this.Controls[i].Name == oListControl.Name)
                        {
                            this.Controls.Remove(this.Controls[i]);
                            break;
                        }
                    }
                    try
                    {
                        try
                        {
                            oListControl.ItemSelectedClick -= new gloListControl.gloListControl.ItemSelected(oListControl_ItemSelectedClick);
                        }
                        catch
                        {
                        }
                        try
                        {
                            oListControl.ItemClosedClick -= new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);
                        }
                        catch
                        {
                        }


                    }
                    catch
                    {
                    }
                    oListControl.Dispose();
                    oListControl = null;
                }

                oListControl = new gloListControl.gloListControl(_databaseconnectionstring, gloListControl.gloListControlType.ChargeTray, true, this.Width);

                oListControl.ClinicID = _ClinicID;
                oListControl.ControlHeader = " Charges Tray ";

                oListControl.ItemSelectedClick += new gloListControl.gloListControl.ItemSelected(oListControl_TraySelectedClick);
                oListControl.ItemClosedClick += new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);

                this.Controls.Add(oListControl);

                if (cmbMultiChargesTray.DataSource != null)
                {
                    for (int i = 0; i < cmbMultiChargesTray.Items.Count; i++)
                    {
                        cmbMultiChargesTray.SelectedIndex = i;
                        cmbMultiChargesTray.Refresh();
                        oListControl.SelectedItems.Add(Convert.ToInt64(cmbMultiChargesTray.SelectedValue), cmbMultiChargesTray.Text);
                    }
                }
                oListControl.OpenControl();
                oListControl.Dock = DockStyle.Fill;
                oListControl.BringToFront();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void oListControl_TraySelectedClick(object sender, EventArgs e)
        {
            try
            {
                this.cmbMultiChargesTray.SelectedIndexChanged -= new System.EventHandler(this.cmbMultiChargesTray_SelectedIndexChanged);
              //  cmbMultiChargesTray.Items.Clear();
                cmbMultiChargesTray.DataSource = null;
                cmbMultiChargesTray.Items.Clear();
                DataTable dtReff = new DataTable();
                DataColumn dcId = new DataColumn("ID");
                DataColumn dcDescription = new DataColumn("Description");
                dtReff.Columns.Add(dcId);
                dtReff.Columns.Add(dcDescription);
                if (oListControl.SelectedItems.Count > 0)
                {
                    for (Int16 i = 0; i <= oListControl.SelectedItems.Count - 1; i++)
                    {
                        DataRow drTemp = dtReff.NewRow();
                        drTemp["ID"] = oListControl.SelectedItems[i].ID;
                        drTemp["Description"] = oListControl.SelectedItems[i].Description;
                        dtReff.Rows.Add(drTemp);
                    }
                }
                cmbMultiChargesTray.DataSource = dtReff;
                cmbMultiChargesTray.ValueMember = dtReff.Columns["ID"].ColumnName;
                cmbMultiChargesTray.DisplayMember = dtReff.Columns["Description"].ColumnName;
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
            finally
            {
                this.cmbMultiChargesTray.SelectedIndexChanged += new System.EventHandler(this.cmbMultiChargesTray_SelectedIndexChanged);
            }

        }

        private void btnBrowseUser_Click(object sender, EventArgs e)
        {
            try
            {
                if (oListControl != null)
                {
                    for (int i = this.Controls.Count - 1; i >= 0; i--)
                    {
                        if (this.Controls[i].Name == oListControl.Name)
                        {
                            this.Controls.Remove(this.Controls[i]);
                            break;
                        }
                    }
                    try
                    {
                        try
                        {
                            oListControl.ItemSelectedClick -= new gloListControl.gloListControl.ItemSelected(oListControl_ItemSelectedClick);
                        }
                        catch
                        {
                        }
                        try
                        {
                            oListControl.ItemClosedClick -= new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);
                        }
                        catch
                        {
                        }


                    }
                    catch
                    {
                    }
                    oListControl.Dispose();
                    oListControl = null;
                }
                oListControl = new gloListControl.gloListControl(_databaseconnectionstring, gloListControl.gloListControlType.Users, true, this.Width);


                oListControl.ClinicID = _ClinicID;
                oListControl.ControlHeader = " User ";

                oListControl.ItemSelectedClick += new gloListControl.gloListControl.ItemSelected(oListControl_UserSelectedClick);
                oListControl.ItemClosedClick += new gloListControl.gloListControl.ItemClosed(oListControl_ItemClosedClick);

                this.Controls.Add(oListControl);

                if (cmbUser.DataSource != null)
                {
                    for (int i = 0; i < cmbUser.Items.Count; i++)
                    {
                        cmbUser.SelectedIndex = i;
                        cmbUser.Refresh();
                        oListControl.SelectedItems.Add(Convert.ToInt64(cmbUser.SelectedValue), cmbUser.Text);
                    }

                }
                oListControl.OpenControl();
                oListControl.Dock = DockStyle.Fill;
                oListControl.BringToFront();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void oListControl_UserSelectedClick(object sender, EventArgs e)
        {
            try
            {
                this.chkSelloggedUser.CheckedChanged -= new System.EventHandler(this.chkSelloggedUser_CheckedChanged);
                chkSelloggedUser.Checked = false;
                this.chkSelloggedUser.CheckedChanged += new System.EventHandler(this.chkSelloggedUser_CheckedChanged);

                this.cmbUser.SelectedIndexChanged -= new System.EventHandler(this.cmbUser_SelectedIndexChanged);
               // cmbUser.Items.Clear();
                cmbUser.DataSource = null;
                cmbUser.Items.Clear();
                DataTable dtReff = new DataTable();
                DataColumn dcId = new DataColumn("ID");
                DataColumn dcDescription = new DataColumn("Description");
                dtReff.Columns.Add(dcId);
                dtReff.Columns.Add(dcDescription);
                if (oListControl.SelectedItems.Count > 0)
                {
                    for (Int16 i = 0; i <= oListControl.SelectedItems.Count - 1; i++)
                    {
                        DataRow drTemp = dtReff.NewRow();
                        drTemp["ID"] = oListControl.SelectedItems[i].ID;
                        drTemp["Description"] = oListControl.SelectedItems[i].Description;
                        dtReff.Rows.Add(drTemp);
                    }


                }
                cmbUser.DataSource = dtReff;
                cmbUser.ValueMember = dtReff.Columns["ID"].ColumnName;
                cmbUser.DisplayMember = dtReff.Columns["Description"].ColumnName;

                //Added By mitesh 20100907 bug 3716
                if (cmbUser.Items.Count == 1)
                {
                    this.chkSelloggedUser.CheckedChanged -= new System.EventHandler(this.chkSelloggedUser_CheckedChanged);
                    if (cmbUser.SelectedValue.ToString() == appSettings["UserID"].ToString())
                    {
                        chkSelloggedUser.Checked = true;
                    }
                    else
                    {
                        chkSelloggedUser.Checked = false;
                    }
                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
            finally
            {
                this.cmbUser.SelectedIndexChanged += new System.EventHandler(this.cmbUser_SelectedIndexChanged);
                this.chkSelloggedUser.CheckedChanged += new System.EventHandler(this.chkSelloggedUser_CheckedChanged);
            }

        }

        private void trvBatch_MouseDown(object sender, MouseEventArgs e)
        {
            //if (trvBatch.SelectedNode != null)
            //{
            //    if (e.Button == MouseButtons.Right)
            //    {
            //        trvBatch.Nodes.Find(_strSelectedbatch, false);
            //    }
            //    //string str = trvBatch.SelectedNode.Text.ToString();
            //    _strSelectedbatch = trvBatch.SelectedNode.Text.ToString(); 
            //}
            //TreeNode trvnd = trvBatch.GetNodeAt(new Point(e.X, e.Y));
            //string str = trvnd.Text;
        }

        private void trvBatch_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            try
            {
                TreeNode trvnd = e.Node;
                if (trvnd != null)
                {
                    _strSelectedbatch = trvnd.Text.ToString();
                }
                trvBatch.SelectedNode = trvnd;
            }
            catch //(Exception ex)
            {
            }
            finally
            {
            }
        }

        private void btnClearUser_Click(object sender, EventArgs e)
        {
          //  cmbUser.Items.Clear();
            cmbUser.DataSource = null;
            cmbUser.Items.Clear();
            cmbUser.Refresh();

            chkSelloggedUser.Checked = false;

        }

        private void btnClearMultiChargesTray_Click(object sender, EventArgs e)
        {
          //  cmbMultiChargesTray.Items.Clear();
            cmbMultiChargesTray.DataSource = null;
            cmbMultiChargesTray.Items.Clear();
            cmbMultiChargesTray.Refresh();
        }

        private void btnClearMultiFacility_Click(object sender, EventArgs e)
        {
         //   cmbMultiFacility.Items.Clear();
            cmbMultiFacility.DataSource = null;
            cmbMultiFacility.Items.Clear();
            cmbMultiFacility.Refresh();
        }

        private void button2_Click(object sender, EventArgs e)
        {
           // cmbProvider.Items.Clear();
            cmbProvider.DataSource = null;
            cmbProvider.Items.Clear();
            cmbProvider.Refresh();
        }

        private void chkSelloggedUser_CheckedChanged(object sender, EventArgs e)
        {
            if (chkSelloggedUser.Checked)
            {
                BindUserName(cmbUser);
            }
            else
            {
                DataTable oBindTable = new DataTable();

                oBindTable.Columns.Add("ID");
                oBindTable.Columns.Add("Description");

                cmbUser.DataSource = oBindTable;
                cmbUser.DisplayMember = "Description";
                cmbUser.ValueMember = "ID";
            }
        }

        private void chkLstCloseDate_CheckedChanged(object sender, EventArgs e)
        {
            this.maskedCloseDate.TextChanged -= new System.EventHandler(this.maskedCloseDate_TextChanged);
            if (chkLstCloseDate.Checked)
            {
                FillLastcloseDate();
            }
            else
            {
                maskedCloseDate.Text = "";

            }
            this.maskedCloseDate.TextChanged += new System.EventHandler(this.maskedCloseDate_TextChanged);

        }

        private void rbAllFilters_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;

                RemoveSearchBatchText();
                RemoveSearchClaimText();

                RadioButton _Rb = (RadioButton)sender;
                if (_Rb.Checked == true)
                {
                    _Rb.Font = gloGlobal.clsgloFont.gFont_BOLD; //new Font("Tahoma", 9, FontStyle.Bold);

                    // Check Claims ANSI Version Admin Settings
                    if (cmbBillingMethod.SelectedIndex != 0)
                    {
                        gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                        if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                        {
                            MessageBox.Show("Claims ANSI Version has not been set.  Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            //return;
                            cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                        }
                        if (ogloSettings != null) { ogloSettings.Dispose(); }
                    }
                    //----------x---

                    SetView();

                    if (tabManager.SelectedTab.Tag.ToString() == "Queue")
                    {
                        this.txtQueueSearch.TextChanged -= new System.EventHandler(this.txtSearch_TextChanged);
                        txtQueueSearch.Clear();
                        this.txtQueueSearch.TextChanged += new System.EventHandler(this.txtSearch_TextChanged);
                        SelectedCharges.Clear();
                        tsb_BatchDetailReport.Visible = false;
                        //tsb_Send.Visible = false;
                        Tsb_BatchSend.Visible = false;
                    }
                    else if (_Rb.Tag.ToString() == "Charges")
                    {
                        txtQueueSearch.Clear();

                    }

                    //else
                    // txtBatchSearch.Clear();
                }
                else
                    _Rb.Font = gloGlobal.clsgloFont.gFont; //new Font("Tahoma", 9, FontStyle.Regular);
            }
            catch //(Exception ex)
            {
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void btnUP_Click(object sender, EventArgs e)
        {

        }

        private void btnDown_Click(object sender, EventArgs e)
        {
            try
            {

                btnDown.Visible = false;
                btnUP.Visible = true;
                panel5.Visible = true;
                btnUP.BackgroundImage = global::gloBilling.Properties.Resources.UP;
                btnUP.BackgroundImageLayout = ImageLayout.Center;

            }
            catch //(Exception ex)
            {
            }
            finally
            {
            }

        }

        private void cmbBillingMethod_SelectedIndexChanged(object sender, EventArgs e)
        {
            // ApplySearchCriteria();
        }

        private void cmbMultiChargesTray_SelectedIndexChanged(object sender, EventArgs e)
        {
            // ApplySearchCriteria();
        }

        private void cmbMultiFacility_SelectedIndexChanged(object sender, EventArgs e)
        {
            // ApplySearchCriteria();
        }

        private void cmbInsuranceCompany_SelectedIndexChanged(object sender, EventArgs e)
        {
            // ApplySearchCriteria();
        }

        private void cmbUser_SelectedIndexChanged(object sender, EventArgs e)
        {
            // ApplySearchCriteria();

            //this.chkSelloggedUser.CheckedChanged -= new System.EventHandler(this.chkSelloggedUser_CheckedChanged);
            //if (cmbUser.SelectedValue != null)
            //{
            //    if (cmbUser.SelectedValue.ToString() == appSettings["UserID"].ToString())
            //    {
            //        chkSelloggedUser.Checked = true;
            //    }
            //    else
            //    {
            //        chkSelloggedUser.Checked = false;
            //    }
            //}
            //this.chkSelloggedUser.CheckedChanged += new System.EventHandler(this.chkSelloggedUser_CheckedChanged);

        }

        private void cmbProvider_SelectedIndexChanged(object sender, EventArgs e)
        {
            // ApplySearchCriteria();
        }

        private void maskedCloseDate_TextChanged(object sender, EventArgs e)
        {
            this.chkLstCloseDate.CheckedChanged -= new System.EventHandler(this.chkLstCloseDate_CheckedChanged);
            chkLstCloseDate.Checked = false;

            //((MaskedTextBox)sender).TextMaskFormat = MaskFormat.IncludePromptAndLiterals;
            if (IsValidDate(maskedCloseDate.Text))
            {
                if (!chkLstCloseDate.Checked)
                {
                    if (GetLastcloseDate() == maskedCloseDate.Text)
                    {
                        chkLstCloseDate.Checked = true;
                    }
                }

            }

            this.chkLstCloseDate.CheckedChanged += new System.EventHandler(this.chkLstCloseDate_CheckedChanged);
            // ApplySearchCriteria();

        }

        private void cmbReportingCategory_SelectedIndexChanged(object sender, EventArgs e)
        {
            //ApplySearchCriteria();
        }

        private void maskedCloseDate_MouseClick(object sender, MouseEventArgs e)
        {

            ((MaskedTextBox)sender).TextMaskFormat = MaskFormat.ExcludePromptAndLiterals;
            if (((MaskedTextBox)sender).Text.Trim() == "")
            {
                ((MaskedTextBox)sender).SelectionStart = 0;
                ((MaskedTextBox)sender).SelectionLength = 0;
            }

            ((MaskedTextBox)sender).TextMaskFormat = MaskFormat.IncludePromptAndLiterals;
        }

        private void cmbInsuranceCompany_MouseMove(object sender, MouseEventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbInsuranceCompany.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbInsuranceCompany.Items[cmbInsuranceCompany.SelectedIndex])["sDescription"]), cmbInsuranceCompany) >= cmbInsuranceCompany.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbInsuranceCompany, Convert.ToString(((DataRowView)cmbInsuranceCompany.Items[cmbInsuranceCompany.SelectedIndex])["sDescription"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbInsuranceCompany);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbInsuranceCompany);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }

        }

        private void mnuItem_Show997_Click(object sender, EventArgs e)
        {

            try
            {
                if (_strSelectedbatch != "")
                {
                    frmShow997Status Objfrm = new frmShow997Status(_strSelectedbatch, _databaseconnectionstring);
                    Objfrm.ShowDialog(this);
                    Objfrm.Dispose();
                    Objfrm = null;
                }
            }
            catch //(Exception ex)
            {


            }
        }

        private void cmbBillingMethod_MouseEnter(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbBillingMethod.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbBillingMethod.Items[cmbBillingMethod.SelectedIndex])["Desc"]), cmbBillingMethod) >= cmbBillingMethod.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbBillingMethod, Convert.ToString(((DataRowView)cmbBillingMethod.Items[cmbBillingMethod.SelectedIndex])["Desc"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbBillingMethod);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbBillingMethod);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }
        // Code added for button MouseHover effect
        private void btn_MouseHover(object sender, EventArgs e)
        {
            ((Button)sender).BackgroundImage = global::gloBilling.Properties.Resources.Img_LongYellow;
            ((Button)sender).BackgroundImageLayout = ImageLayout.Stretch;
        }

        private void btn_MouseLeave(object sender, EventArgs e)
        {
            ((Button)sender).BackgroundImage = global::gloBilling.Properties.Resources.Img_LongButton;
            ((Button)sender).BackgroundImageLayout = ImageLayout.Stretch;
        }


        #endregion " Form Controls Events "

        #region " Tab Selected Event "

        private void tabMain_Selecting(object sender, TabControlCancelEventArgs e)
        {
            if (_isProcessingFiles == true)
            { e.Cancel = true; }
        }

        private void tabManager_Selecting(object sender, TabControlCancelEventArgs e)
        {
            if (_isProcessingFiles == true)
            { e.Cancel = true; }
        }

        private void tabMain_Selected(object sender, TabControlEventArgs e)
        {
            SetView();
        }

        private void tabManager_Selected(object sender, TabControlEventArgs e)
        {
            tsb_Void.Visible = false;
            //if (Convert.ToString(tabManager.SelectedTab.Tag) == "Queue")
            //SetChargesCheckBox();

        }

        private void tabManager_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                tsb_Void.Visible = false;
                RemoveSearchBatchText();
                RemoveSearchClaimText();
                SetView();
            }
            catch //(Exception ex)
            {
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void tsb_ApplyFilter_Click(object sender, EventArgs e)
        {
            if (gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch") && pnlBusinessCenter.Visible == false)
            {

                if (cmbBusinessCenter.DataSource == null)
                {
                    cmbBusinessCenter.DrawMode = DrawMode.OwnerDrawFixed;
                    cmbBusinessCenter.DrawItem += new DrawItemEventHandler(ShowTooltipOnComboBox);
                    FillBusinessCenter();
                }
                pnlBusinessCenter.Visible = true;
                cmbBusinessCenter.SelectedValue = gloGlobal.gloPMGlobal.GetDefaultBusinessCenterForUser(gloGlobal.gloPMGlobal.UserID);
                _BusinessCenterCode = cmbBusinessCenter.Text.ToString();
            }
            else if (!gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
            {
                pnlBusinessCenter.Visible = false;
                _BusinessCenterCode = "";
            }
            // Check Claims ANSI Version Admin Settings
            if (cmbBillingMethod.SelectedIndex != 0)
            {
                gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                {
                    MessageBox.Show("Claims ANSI Version has not been set.  Billing may not proceed. " + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //return;
                    cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                }
                if (ogloSettings != null) { ogloSettings.Dispose(); }
            }
            //----------x---

            SetView();
        }

        private void tsb_Resend_Click(object sender, EventArgs e)
        {
            int _SelectedRow = -1;
            DataTable dtBatch = null;
            DataTable dtNewBacth = null;
            gloDatabaseLayer.DBLayer ODB = null;
            gloBilling ogloBilling = null;
            ArrayList _trnsIds = new ArrayList(); ;
         //   gloGeneralItem.gloItems oTrnIds = new gloGeneralItem.gloItems();
            _EDIFileName = "";

            try
            {


                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    _SelectedRow = c1BatchGrid.RowSel;
                    if (_SelectedRow > 0)
                    {
                        #region "RESEND SENDTOCLEARINGHOUSE"

                        if (c1BatchGrid.GetCellCheck(_SelectedRow, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked
                             && c1BatchGrid.GetData(_SelectedRow, c1BatchGrid.Cols["Status"].Index) != null &&
                             (Convert.ToString(c1BatchGrid.GetData(_SelectedRow, c1BatchGrid.Cols["Status"].Index)).Trim() == TransactionStatus.SendToClearingHouse.ToString().Trim())
                            || (Convert.ToString(c1BatchGrid.GetData(_SelectedRow, c1BatchGrid.Cols["Status"].Index)).Trim() == TransactionStatus.SendToClaimManager.ToString().Trim()))
                        {
                            if (DialogResult.Yes == MessageBox.Show("Claim will be resent. \nContinue? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                            {
                                Int64 _tranIdResend = Convert.ToInt64(c1BatchGrid.GetData(_SelectedRow, c1BatchGrid.Cols["TransactionID"].Index));

                                //Get Transaction Details

                                _IsResend = false;
                                _IsResend = true;

                                if (_IsResend == true)
                                {
                                    Transaction _Transaction = null;
                                    if (ogloBilling == null)
                                    {
                                        ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                    }
                                    _Transaction = ogloBilling.GetChargesClaimDetails(_tranIdResend, _ClinicID);
                                    clsgloResend ObjResend = new clsgloResend();

                                    if (_Transaction.Hold != null)
                                    {
                                        ObjResend.ResendClaim(_tranIdResend, _Transaction, _Transaction.Hold.IsHold, _Transaction.sClaimRefNo);
                                    }
                                    else
                                    {
                                        ObjResend.ResendClaim(_tranIdResend, _Transaction, false, _Transaction.sClaimRefNo);
                                    }

                                    UpdateBatchTotal(Convert.ToInt64(c1BatchGrid.GetData(_SelectedRow, c1BatchGrid.Cols["BatchID"].Index)), "Resend");
                                    #region "COMMENTED CODE"
                                    /*
                                string sMainClaimNo = string.Empty;
                                if (_Transaction.SubClaimNo.Contains("-") == false)
                                { sMainClaimNo = _Transaction.SubClaimNo; }
                                else
                                { sMainClaimNo = _Transaction.MainClaimNo; }


                                if (_Transaction.SubClaimNo.Trim() != String.Empty)
                                { _Transaction.ParentClaimNo = _Transaction.ClaimNo.ToString() + "-" + _Transaction.SubClaimNo; }
                                else
                                { _Transaction.ParentClaimNo = _Transaction.ClaimNo.ToString(); }



                                //New Sub-Claim No
                                _Transaction.SubClaimNo = ogloBilling.GetSubClaimNo(_Transaction.TransactionMasterID);
                                _Transaction.ParentTransactionID = _Transaction.TransactionID;


                                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                ODB.Connect(false);

                                string sql_query = String.Empty;//"Update BL_EOB_NextAction set sNextActionCode='R' , sNextActionDescription='REBILL' where nBillingTransactionID = " + _Transaction.TransactionMasterID + " and nClinicID=" + _ClinicID;
                                //ODB.Execute_Query(sql_query);

                                sql_query = "update BL_Transaction_Claim_MST set nStatus=" + TransactionStatus.Resent.GetHashCode() + " , nClaimStatus=" + ClaimStatus.Close.GetHashCode() + "  where nTransactionID = " + _Transaction.TransactionID + " and nTransactionMasterID = " + _Transaction.TransactionMasterID + " and nClinicID=" + _ClinicID;
                                ODB.Execute_Query(sql_query);

                                #region " UnHold Parent Claim "

                                _Transaction.Hold.HoldModified = true;
                                //_Transaction.Hold.HoldModDateTime = DateTime.Now;
                                _Transaction.Hold.IsHold = false;
                                ogloBilling.HoldUnholdClaim(_Transaction.Hold, _Transaction.TransactionMasterID, _Transaction.TransactionID);

                                #endregion 



                                _Transaction.TransactionID = 0;

                                for (int j = 0; j < _Transaction.Lines.Count; j++)
                                {
                                    _Transaction.Lines[j].ParentTransactionID = _Transaction.ParentTransactionID;
                                    _Transaction.Lines[j].ParentTransactionDetailID = _Transaction.Lines[j].TransactionDetailID;
                                    _Transaction.Lines[j].TransactionDetailID = 0;
                                    _Transaction.Lines[j].LineNotes = null;
                                }
                                //new transaction send to charges tab(Batch form)
                                _Transaction.Transaction_Status = TransactionStatus.Queue;
                                //_Transaction.IsRebill
                                _Transaction.ClaimStatus = ClaimStatus.Open;

                                ogloBilling.AddTransactionClaim(_Transaction, _ClinicID);



                                //Main Claim
                                if (_Transaction.TransactionID > 0)
                                {

                                    if (_Transaction.SubClaimNo.Contains("-") == true)
                                    {
                                        sql_query = "update dbo.BL_Transaction_Claim_MST set sMainClaimNo = '" + sMainClaimNo.ToString() + "' where nTransactionID =  " + _Transaction.TransactionID;
                                    }
                                    else
                                    {
                                        sql_query = "update dbo.BL_Transaction_Claim_MST set sMainClaimNo = '" + _Transaction.SubClaimNo + "' where nTransactionID =  " + _Transaction.TransactionID;
                                    }
                                    ODB.Execute_Query(sql_query);
                                }


                                _Transaction.Dispose();*/

                                    #endregion
                                }
                                else
                                {
                                    _IsResend = false;
                                }


                            }
                        }
                        #endregion

                        SetView();
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    _SelectedRow = c1BatchGridSentBatch.RowSel;
                    if (_SelectedRow > 0)
                    {
                        #region "RESEND SENDTOCLEARINGHOUSE"

                        if (c1BatchGridSentBatch.GetCellCheck(_SelectedRow, c1BatchGridSentBatch.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked
                             && c1BatchGridSentBatch.GetData(_SelectedRow, c1BatchGridSentBatch.Cols["Status"].Index) != null &&
                             (Convert.ToString(c1BatchGridSentBatch.GetData(_SelectedRow, c1BatchGridSentBatch.Cols["Status"].Index)).Trim() == TransactionStatus.SendToClearingHouse.ToString().Trim())
                            || (Convert.ToString(c1BatchGridSentBatch.GetData(_SelectedRow, c1BatchGridSentBatch.Cols["Status"].Index)).Trim() == TransactionStatus.SendToClaimManager.ToString().Trim()))
                        {
                            if (DialogResult.Yes == MessageBox.Show("Claim will be resent. \nContinue? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                            {
                                Int64 _tranIdResend = Convert.ToInt64(c1BatchGridSentBatch.GetData(_SelectedRow, c1BatchGridSentBatch.Cols["TransactionID"].Index));

                                //Get Transaction Details

                                _IsResend = false;
                                _IsResend = true;

                                if (_IsResend == true)
                                {
                                    Transaction _Transaction = null;
                                    if (ogloBilling == null)
                                    {
                                        ogloBilling = new gloBilling(_databaseconnectionstring, "");
                                    }
                                    _Transaction = ogloBilling.GetChargesClaimDetails(_tranIdResend, _ClinicID);
                                    clsgloResend ObjResend = new clsgloResend();

                                    if (_Transaction.Hold != null)
                                    {
                                        ObjResend.ResendClaim(_tranIdResend, _Transaction, _Transaction.Hold.IsHold, _Transaction.sClaimRefNo);
                                    }
                                    else
                                    {
                                        ObjResend.ResendClaim(_tranIdResend, _Transaction, false, _Transaction.sClaimRefNo);
                                    }

                                    UpdateBatchTotal(Convert.ToInt64(c1BatchGridSentBatch.GetData(_SelectedRow, c1BatchGridSentBatch.Cols["BatchID"].Index)), "Resend");
                                    //  AddResendinggnote(Convert.ToInt64(c1BatchGridSentBatch.GetData(_SelectedRow, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index)));
                                }
                                else
                                {
                                    _IsResend = false;
                                }


                            }
                        }
                        #endregion

                        SetView();
                    }

                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {

                if (ODB != null)
                {
                    ODB.Disconnect(); ODB.Dispose();
                }
                if (dtBatch != null) dtBatch.Dispose();

                if (dtNewBacth != null) dtNewBacth.Dispose();

                if (ogloBilling != null) ogloBilling.Dispose();

            }


        }


        #endregion

        #region " Tree View & Numeric & Search Event "

        private void c1Batch_AfterSelChange(object sender, RangeEventArgs e)
        {

            DataTable _dtbatchClaims = null;
            Int64 _batchId = 0;
            string _batchName = "";
            Int16 _claimType = 0;
            Int32 _batchBillingMethodId = 0;

            try
            {
                if (sender != null && _isBatchTreeLoading == false)
                {
                    if (((C1FlexGrid)sender).Rows.Count > 0)
                    {
                        //if (e.OldRange.r1 != e.NewRange.r1)
                        {
                            if (((C1FlexGrid)sender).RowSel >= 0)
                            {
                                ClearClaimSearch_Click(sender, e);
                                _batchId = Convert.ToInt64(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["nBatchID"].Index));
                                _batchName = Convert.ToString(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["sBatchName"].Index));
                                _claimType = Convert.ToInt16(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["nClaimType"].Index));
                                _batchBillingMethodId = Convert.ToInt32(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["BillingMethodID"].Index));

                                if (_batchId > 0 && Convert.ToString(_batchId).Trim() != "")
                                {
                                    #region "Control Enable/Disable"

                                    if (_batchName.ToUpper() == "SELF")
                                    { Tsb_BatchSend.Visible = false; }
                                    else
                                    { Tsb_BatchSend.Visible = true; }

                                    #endregion

                                    #region " Get selected batch claims "

                                    _dtbatchClaims = GetBatchClaims(_batchId);

                                    #endregion

                                    if (_dtbatchClaims != null && _dtbatchClaims.Rows.Count > 0)
                                    {
                                        #region " Set Batch Billing method Value and Arrange Send buttons "

                                        if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                        {
                                            lblBillingmethodvalue.Text = get_Billingmethod(_batchBillingMethodId);
                                        }
                                        else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                        {
                                            lblBillingmethodvalue_SentBatch.Text = get_Billingmethod(_batchBillingMethodId);
                                        }

                                        ArrangeSendButtons(_batchBillingMethodId, _claimType);

                                        #endregion

                                        #region " Set selected batch claims to claim grid "

                                        if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                        {
                                            if (_dtbatchClaims != null )
                                            {
                                                gloGlobal.gloPMGlobal.SplitClaimColumn(_dtbatchClaims, _dtbatchClaims.Columns.IndexOf("Claim"));
                                            }
                                            DataView dv= new DataView(_dtbatchClaims);
                                            dv.Sort = "SortClaim Desc,SortSubClaim ASC";
                                            c1BatchGrid.DataSource = dv;
                                            
                                            //c1BatchGrid.DataSource = _dtbatchClaims.DefaultView;
                                            //_nPrevBatchId = oTreeView.SelectedNode.Index;
                                            _nPrevBatchId = ((C1FlexGrid)sender).RowSel;
                                            DesignGrid("BATCH");
                                            lblcalimamtvalue.Text = Convert.ToString(_dtbatchClaims.Compute("SUM(Charges)", String.Empty));
                                            lblBatchDateValue.Text = GetBatchDate(_batchId);
                                            lblClaimcountvalue.Text = Convert.ToString(_dtbatchClaims.Rows.Count);
                                            lblBillingmethodvalue.Text = get_Billingmethod(_batchBillingMethodId);
                                            if (_IsMultipleClearingHouse == true)
                                            {
                                                lblClearinghouseValue.Text = GetBatchClearinghouse(Convert.ToInt64(_batchId));
                                                lblClearinghouse.Visible = true;
                                            }
                                        }
                                        else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                        {


                                            if (_dtbatchClaims != null )
                                            {
                                                gloGlobal.gloPMGlobal.SplitClaimColumn(_dtbatchClaims, _dtbatchClaims.Columns.IndexOf("Claim"));
                                            }
                                            DataView dv = new DataView(_dtbatchClaims);
                                            dv.Sort = "SortClaim Desc,SortSubClaim ASC";
                                            c1BatchGridSentBatch.DataSource = dv;
                                            
                                            //c1BatchGridSentBatch.DataSource = _dtbatchClaims.DefaultView;
                                            //_nPrevBatchId = oTreeView.SelectedNode.Index;
                                            _nPrevSentBatchId = ((C1FlexGrid)sender).RowSel;
                                            DesignGrid("SENTBATCH");
                                            lblcalimamtvalue_SentBatch.Text = Convert.ToString(_dtbatchClaims.Compute("SUM(Charges)", String.Empty));
                                            lblBatchDateValue_SentBatch.Text = GetBatchDate(Convert.ToInt64(_batchId));
                                            lblClaimcountvalue_SentBatch.Text = Convert.ToString(_dtbatchClaims.Rows.Count);
                                            lblBillingmethodvalue_SentBatch.Text = get_Billingmethod(_batchBillingMethodId);
                                            if (_IsMultipleClearingHouse == true)
                                            {
                                                lblClearinghouseValue_SentBatch.Text = GetBatchClearinghouse(Convert.ToInt64(_batchId));
                                                lblClearinghouse_SentBatch.Visible = true;
                                            }
                                        }

                                        #endregion

                                    }
                                    else
                                    {
                                        if (c1BatchGrid.Rows.Count > 1)
                                        {
                                            #region " Set selected batch claims to claim grid "

                                            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                                            {
                                              //  c1BatchGrid.Clear();
                                                c1BatchGrid.DataSource = null;
                                                c1BatchGrid.Clear(C1.Win.C1FlexGrid.ClearFlags.All);
                                                c1BatchGrid.Rows.Count = 1;
                                                c1BatchGrid.Cols.Count = 1;

                                                lblcalimamtvalue.Text = "";
                                                lblBatchDateValue.Text = "";
                                                lblClaimcountvalue.Text = "";
                                                lblClearinghouse.Text = "";
                                                lblClearinghouse.Visible = false;
                                                lblBillingmethodvalue.Text = "";
                                            }
                                            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                                            {
                                               // c1BatchGridSentBatch.Clear();
                                                c1BatchGridSentBatch.DataSource = null;
                                                c1BatchGridSentBatch.Clear(C1.Win.C1FlexGrid.ClearFlags.All);
                                                c1BatchGridSentBatch.Rows.Count = 1;
                                                c1BatchGridSentBatch.Cols.Count = 1;

                                                lblcalimamtvalue_SentBatch.Text = "";
                                                lblBatchDateValue_SentBatch.Text = "";
                                                lblClaimcountvalue_SentBatch.Text = "";
                                                lblClearinghouse_SentBatch.Text = "";
                                                lblClearinghouse_SentBatch.Visible = false;
                                                lblBillingmethodvalue_SentBatch.Text = "";
                                            }

                                            #endregion
                                        }
                                    }

                                }

                            }
                        }
                    }
                }


            }
            catch //(Exception ex)
            {
                throw;
            }
            finally
            {
                //if (_c1flexGrid != null) { _c1flexGrid.Dispose(); _c1flexGrid = null; }
                if (_dtbatchClaims != null) { _dtbatchClaims.Dispose(); _dtbatchClaims = null; }
            }
        }

        private void trvBatch_AfterSelect(object sender, TreeViewEventArgs e)
        {
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            if (((TreeView)sender).Tag != null && ((TreeView)sender).Tag.ToString().Length > 0)
            {
                #region "Control Enable/Disable"

                TreeView oTreeView = (TreeView)sender;
                //bool _IsAllSelected = false;

                if (oTreeView.SelectedNode.Tag != null && oTreeView.SelectedNode.Tag.ToString() != null && oTreeView.SelectedNode.Tag.ToString().Trim().Length > 0)
                {
                    if (oTreeView.SelectedNode.Text.ToString().ToUpper() == _TagNodeAll.ToUpper())
                    {
                        //_IsAllSelected = true;
                    }
                }

                //MaheshB
                if (((TreeView)sender).SelectedNode != null && ((TreeView)sender).SelectedNode.Text.ToString() == "SELF")
                {
                    // tsb_Send.Visible = false;
                    Tsb_BatchSend.Visible = false;
                }
                else
                {
                    //tsb_Send.Visible = true;
                    Tsb_BatchSend.Visible = true;
                }
                #endregion
                //MaheshB 20091209

                DataTable dtClaims = new DataTable();
                DataTable dtBatch = new DataTable();

                try
                {
                    if (((TreeView)sender).SelectedNode.Text.Trim() == "")
                    {
                        int _lastnode = (((TreeView)sender).SelectedNode.Index) - 1;
                        if (_lastnode >= 0)
                        {
                            trvBatch.SelectedNode = trvBatch.Nodes[_lastnode];
                        }
                    }


                    string _BatchID = Convert.ToString(((TreeView)sender).SelectedNode.Tag);
                    if (_BatchID != "")
                    {
                        dtClaims = GetBatchClaims(Convert.ToInt64(_BatchID));

                        //dtBatch = ogloBilling.GetBatch(Convert.ToInt64(trvBatch.SelectedNode.Tag));
                        dtBatch = ogloBilling.GetBatch(Convert.ToInt64(((TreeView)sender).SelectedNode.Tag));

                        //Get billing method of batch.
                        if (dtBatch != null && dtBatch.Rows.Count > 0)
                        {
                            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                            {
                                lblBillingmethodvalue.Text = get_Billingmethod(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]));
                            }
                            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                            {
                                lblBillingmethodvalue_SentBatch.Text = get_Billingmethod(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]));
                            }

                            ArrangeSendButtons(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]), Convert.ToInt16(dtBatch.Rows[0]["nClaimType"]));
                        }
                    }

                    if (dtClaims != null && dtClaims.Rows.Count > 0)
                    {

                        if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                        {
                            if (dtBatch != null )
                            {
                                gloGlobal.gloPMGlobal.SplitClaimColumn(dtBatch, dtBatch.Columns.IndexOf("Claim"));
                            }
                            DataView dv = new DataView(dtBatch);
                            dv.Sort = "SortClaim Desc,SortSubClaim ASC";
                            c1BatchGrid.DataSource = dv;
                          
                            //c1BatchGrid.DataSource = dtClaims.DefaultView;
                            _nPrevBatchId = oTreeView.SelectedNode.Index;
                            DesignGrid("BATCH");
                            lblcalimamtvalue.Text = Convert.ToString(dtClaims.Compute("SUM(Charges)", String.Empty));
                            lblBatchDateValue.Text = GetBatchDate(Convert.ToInt64(_BatchID));
                            lblClaimcountvalue.Text = Convert.ToString(dtClaims.Rows.Count);
                            lblBillingmethodvalue.Text = get_Billingmethod(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]));
                            if (_IsMultipleClearingHouse == true)
                            {
                                lblClearinghouseValue.Text = GetBatchClearinghouse(Convert.ToInt64(_BatchID));
                                lblClearinghouse.Visible = true;
                            }
                        }
                        else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                        {
                            if (dtBatch != null )
                            {
                                gloGlobal.gloPMGlobal.SplitClaimColumn(dtBatch, dtBatch.Columns.IndexOf("Claim"));
                            }
                            DataView dv = new DataView(dtBatch);
                            dv.Sort = "SortClaim Desc,SortSubClaim ASC";
                            c1BatchGrid.DataSource = dv;

                           // c1BatchGridSentBatch.DataSource = dtClaims.DefaultView;
                            _nPrevBatchId = oTreeView.SelectedNode.Index;
                            DesignGrid("SENTBATCH");
                            lblcalimamtvalue_SentBatch.Text = Convert.ToString(dtClaims.Compute("SUM(Charges)", String.Empty));
                            lblBatchDateValue_SentBatch.Text = GetBatchDate(Convert.ToInt64(_BatchID));
                            lblClaimcountvalue_SentBatch.Text = Convert.ToString(dtClaims.Rows.Count);
                            lblBillingmethodvalue_SentBatch.Text = get_Billingmethod(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]));
                            if (_IsMultipleClearingHouse == true)
                            {
                                lblClearinghouseValue_SentBatch.Text = GetBatchClearinghouse(Convert.ToInt64(_BatchID));
                                lblClearinghouse_SentBatch.Visible = true;
                            }
                        }


                    }
                    else
                    {
                        if (c1BatchGrid.Rows.Count > 1)
                        {

                            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                            {
                               // c1BatchGrid.Clear();
                                c1BatchGrid.DataSource = null;
                                c1BatchGrid.Clear(C1.Win.C1FlexGrid.ClearFlags.All);
                                c1BatchGrid.Rows.Count = 1;
                                c1BatchGrid.Cols.Count = 1;

                                lblcalimamtvalue.Text = "";
                                lblBatchDateValue.Text = "";
                                lblClaimcountvalue.Text = "";
                                lblClearinghouse.Text = "";
                                lblClearinghouse.Visible = false;
                                lblBillingmethodvalue.Text = "";
                            }
                            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                            {
                              //  c1BatchGridSentBatch.Clear();
                                c1BatchGridSentBatch.DataSource = null;
                                c1BatchGridSentBatch.Clear(C1.Win.C1FlexGrid.ClearFlags.All);
                                c1BatchGridSentBatch.Rows.Count = 1;
                                c1BatchGridSentBatch.Cols.Count = 1;

                                lblcalimamtvalue_SentBatch.Text = "";
                                lblBatchDateValue_SentBatch.Text = "";
                                lblClaimcountvalue_SentBatch.Text = "";
                                lblClearinghouse_SentBatch.Text = "";
                                lblClearinghouse_SentBatch.Visible = false;
                                lblBillingmethodvalue_SentBatch.Text = "";
                            }

                        }
                    }
                }
                catch //(Exception ex)
                {
                }
                finally
                {
                    if (dtClaims != null)
                    {
                        dtClaims.Dispose();
                        dtClaims = null;
                    }
                    if (dtBatch != null)
                    {
                        dtBatch.Dispose();
                        dtBatch = null;
                    }
                    if (ogloBilling != null)
                    {
                        ogloBilling.Dispose();
                        ogloBilling = null;
                    }
                }
            }
        }

        private void txtSearch_TextChanged(object sender, EventArgs e)
        {
            Boolean bResult = false;
            if (((TextBox)sender).Tag != null && ((TextBox)sender).Tag.ToString().Length > 0)
            {
                if (Convert.ToString(((TextBox)sender).Tag).ToUpper() == "BATCH")
                {
                    DataView dv = (DataView)c1BatchGrid.DataSource;
                    string sSrchType = "BATCH";
                    bResult = SearchClaims(sSrchType, txtBatchSearch.Text, dv);
                }
                if (Convert.ToString(((TextBox)sender).Tag).ToUpper() == "SENTBATCH")
                {
                    DataView dv = (DataView)c1BatchGridSentBatch.DataSource;
                    string sSrchType = "SENTBATCH";
                    bResult = SearchClaims(sSrchType, txtBatchSearch_SentBatch.Text, dv);
                }
                else if (Convert.ToString(((TextBox)sender).Tag).ToUpper() == "QUEUE")
                {
                    string sSrchType = "QUEUE";
                    DataView dv = (DataView)c1QueuedClaims.DataSource;
                    bResult = SearchClaims(sSrchType, txtQueueSearch.Text, dv);
                }
                else if (Convert.ToString(((TextBox)sender).Tag).ToUpper() == "VOID")
                {
                    DataView dv = (DataView)c1VoidClaims.DataSource;
                    string sSrchType = "VOID";
                    bResult = SearchClaims(sSrchType, txtVoidSearch.Text, dv);
                }
                else if (Convert.ToString(((TextBox)sender).Tag).ToUpper() == "ONHOLD")
                {
                    string sSrchType = "ONHOLD";
                    DataView dv = (DataView)c1PlanHold.DataSource;
                    bResult = SearchClaims(sSrchType, txtSearchHoldClaims.Text, dv);
                }
            }

        }

        private void txtSearchBatches_TextChanged(object sender, EventArgs e)
        {
            Boolean bResult = false;
            if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
            {
                DataView dv = (DataView)c1trvBatch.DataSource;
                bResult = SearchBatch(txtSearchUnsentBatches.Text, dv);
            }
            else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
            {
                DataView dv = (DataView)c1trvBatch_SentBatch.DataSource;
                bResult = SearchBatch(txtSearchSentBatches.Text, dv);
            }            
        }

        private void numClaimCount_ValueChanged(object sender, EventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                if (cmbBillingMethod.SelectedIndex != 0)
                {
                    gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                    if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                    {
                        MessageBox.Show("Claims ANSI Version has not been set.  Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //return;
                        cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                    }
                    if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                }
                //----------x---

                SetView();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void chkClaimCount_CheckedChanged(object sender, EventArgs e)
        {
            if (((CheckBox)sender).Tag != null && ((CheckBox)sender).Tag.ToString().Length > 0)
            {
                #region "Control Enable/Disable"

                CheckBox oCheckBox = (CheckBox)sender;

                //MaheshB20091201
                //if (oCheckBox.Tag.ToString().ToUpper() == _TagCharges.ToUpper())
                //{
                //    if (oCheckBox.Checked == true) { numChargesClaimCount.Enabled = false; } else { numChargesClaimCount.Enabled = true; }
                //}
                //else if (oCheckBox.Tag.ToString().ToUpper() == _TagQueue.ToUpper())
                //{
                //    if (oCheckBox.Checked == true) { numQueueClaimCount.Enabled = false; } else { numQueueClaimCount.Enabled = true; }
                //}
                //else if (oCheckBox.Tag.ToString().ToUpper() == _TagBatch.ToUpper())
                //{
                //    if (oCheckBox.Checked == true) { numBatchClaimCount.Enabled = false; } else { numBatchClaimCount.Enabled = true; }
                //}
                //else if (oCheckBox.Tag.ToString().ToUpper() == _TagAccepted.ToUpper())
                //{
                //    if (oCheckBox.Checked == true) { numAcceptedClaimCount.Enabled = false; } else { numAcceptedClaimCount.Enabled = true; }
                //}
                //else if (oCheckBox.Tag.ToString().ToUpper() == _TagRejected.ToUpper())
                //{
                //    if (oCheckBox.Checked == true) { numRejectedClaimCount.Enabled = false; } else { numRejectedClaimCount.Enabled = true; }
                //}
                //else if (oCheckBox.Tag.ToString().ToUpper() == _TagFinished.ToUpper())
                //{
                //    if (oCheckBox.Checked == true) { numFinishClaimCount.Enabled = false; } else { numFinishClaimCount.Enabled = true; }
                //}
                #endregion

            }
        }

        #region "Set Views as per selection"

        public void SetView()
        {
            // bool _SelectAll = true;
            // int _colIndex = 0;

            switch (tabManager.SelectedTab.Tag.ToString())
            {
                case "Queue":

                    maskedCloseDate.TextMaskFormat = MaskFormat.ExcludePromptAndLiterals;
                    string strDate = maskedCloseDate.Text;
                    maskedCloseDate.TextMaskFormat = MaskFormat.IncludeLiterals;
                    Boolean _isValidDate = true;
                    if (strDate.Length > 0 && !_isLoadedFromModifyCharges)
                    {
                        if (IsValidDate(maskedCloseDate.Text) == false)
                        {
                            _isValidDate = false;
                            MessageBox.Show("Please enter a valid date. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            maskedCloseDate.Focus();
                            maskedCloseDate.Select();
                        }
                    }
                    if (_isValidDate)
                    {
                        this.maskedCloseDate.Validating -= new System.ComponentModel.CancelEventHandler(this.maskedCloseDate_Validating);
                        panel1.Dock = DockStyle.Top;
                        panel5.Visible = false;
                        this.maskedCloseDate.Validating += new System.ComponentModel.CancelEventHandler(this.maskedCloseDate_Validating);
                        c1QueuedClaims.BeginUpdate();

                        #region " Show/Hide Buttons "

                        txtQueueSearch.Clear();


                        if (_IsenableUB04)
                        {
                            tsb_UB04.Visible = true;
                            UB04Setting = true;
                        }
                        else
                        {
                            tsb_UB04.Visible = false;
                            UB04Setting = false;
                        }

                        DataTable dtClaims = new DataTable();
                        dtClaims = GetCharges();
                        if (dtClaims != null)
                        {
                            gloGlobal.gloPMGlobal.SplitClaimColumn(dtClaims, dtClaims.Columns.IndexOf("Claim"));

                            DataView dv = new DataView(dtClaims);
                            dv.Sort = "SortClaim Desc,SortSubClaim ASC";

                            c1QueuedClaims.DataSource = dv;

                            //c1QueuedClaims.DataSource = dtClaims.DefaultView;
                            DesignGrid(_TagQueue.ToUpper());
                            c1QueuedClaims.ScrollPosition = new Point(0, 0);
                        }
                        else
                            _BusinessCenterCode = "";

                        SetChargesCheckBox();


                        tsb_Print1500.Enabled = true;
                        tsb_UB04.Enabled = true;
                        tsb_Modify.Visible = true;
                        tsb_Print1500.Visible = true;
                        //Code changes for hide New cms button 31122013 Sameer
                        tsb_PrintNew1500.Enabled = true;
                        tsb_PrintNew1500.Visible = true;
                        //-----

                        tsb_Delete.Visible = false;
                        tsb_Void.Visible = false; //MaheshB 20091204
                        tsb_DeleteBatch.Visible = false;
                        tsb_Refresh.Visible = true;
                        if (c1QueuedClaims.Rows.Count > 1)
                        {
                            tsb_Select.Visible = true;
                        }
                        else
                        {
                            tsb_Select.Visible = false;
                        }
                        tsb_Queue.Visible = false;
                        tsb_Validate.Visible = true;
                        tsb_Validate.Enabled = true;
                        // tsb_Send.Visible = false;
                        Tsb_BatchSend.Visible = false;
                        tsb_toSecondary.Visible = false;
                        tsb_Batch.Visible = true;
                        tsb_ValidateNBatch.Visible = false;
                        tsb_Accept.Visible = false;
                        tsb_Reject.Visible = false;
                        tsb_Finished.Visible = false;
                        tsb_Close.Visible = true;
                        //tsb_Help.Visible = true;
                        tsb_ReQueue.Visible = false;
                        tsb_RejectBatch.Visible = false;
                        //MaheshB
                        tsb_Void.Visible = false;
                        tsb_Modify.Text = "Modify Charges";
                        tsb_ApplyFilter.Visible = true;
                        tsb_Resend.Visible = false;

                        tsb_BatchDetailReport.Visible = false;
                        tsb_Print.Visible = false;
                        tsb_PrintForm.Visible = false;
                        tsb_View.Visible = false;
                        tsb_PrintClaimData.Visible = false;
                        tsb_PrintClaimForm.Visible = false;

                        #endregion " Show/Hide Buttons "

                        panel1.Dock = DockStyle.Fill;
                        panel5.Visible = true;

                        c1QueuedClaims.EndUpdate();
                        //c1QueuedClaims.Refresh();
                        //panel1.Refresh();
                    }
                    break;

                case "Batch":

                    #region " Show/Hide Buttons "
                    txtBatchSearch.Clear();

                    tsb_Print1500.Enabled = true;
                    tsb_PrintNew1500.Enabled = true;
                    tsb_UB04.Enabled = true;
                    if (_IsenableUB04)
                    {
                        tsb_UB04.Visible = true;
                        UB04Setting = true;
                    }
                    else
                    {
                        tsb_UB04.Visible = false;
                        UB04Setting = false;
                    }

                    Boolean bResult = FillBatchTree(trvBatch, TransactionStatus.Batch, false);
                    chkBatchClaimCount.Checked = true;
                    tsb_Modify.Visible = true;
                    //tsb_Print1500.Visible = false;
                    tsb_Print1500.Visible = true;
                    tsb_PrintNew1500.Visible = true;//12312013 sameer
                    tsb_Delete.Visible = false;
                    tsb_Void.Visible = false;
                    tsb_DeleteBatch.Visible = false;
                    tsb_Refresh.Visible = true;
                    tsb_Select.Visible = false;
                    tsb_Queue.Visible = false;
                    tsb_Validate.Visible = false;
                    //tsb_Send.Visible = true;
                    Tsb_BatchSend.Visible = true;
                    tsb_toSecondary.Visible = false;//MaheshB 20091109 Before true
                    tsb_Batch.Visible = false;
                    tsb_ValidateNBatch.Visible = false;
                    tsb_ValidateNBatch.Enabled = false;
                    tsb_Accept.Visible = false;//MaheshB 20091109 Before true
                    //tsb_Reject.Visible = false;//MaheshB 20091109 Before true
                    //tsb_Finished.Visible = false;
                    tsb_Close.Visible = true;
                    //tsb_Help.Visible = true;
                    tsb_ReQueue.Visible = false;
                    tsb_ApplyFilter.Visible = false;
                    tsb_Print.Visible = false;
                    tsb_PrintForm.Visible = false;
                    tsb_View.Visible = false;
                    tsb_PrintClaimData.Visible = false;
                    tsb_PrintClaimForm.Visible = false;

                    #region " Show hide and reset controls "

                    if (c1trvBatch == null || c1trvBatch.Rows.Count <= 0)
                    {
                        lblcalimamtvalue.Text = "";
                        lblBatchDateValue.Text = "";
                        lblClaimcountvalue.Text = "";
                        lblClearinghouseValue.Text = "";
                        lblBillingmethodvalue.Text = "";
                        tsb_BatchDetailReport.Visible = false;
                        tsb_Print1500.Visible = false;
                        tsb_UB04.Visible = false;
                        Tsb_BatchSend.Visible = false;
                        tsb_Modify.Visible = false;
                        tsb_PrintNew1500.Visible = false;
                    }
                    else
                    {
                        tsb_BatchDetailReport.Visible = true;
                        tsb_Print1500.Visible = true;
                        tsb_UB04.Visible = true;
                        Tsb_BatchSend.Visible = true;
                        tsb_Modify.Visible = true;

                        if (_IsenableUB04)
                        {
                            tsb_UB04.Visible = true;
                            UB04Setting = true;
                        }
                        else
                        {
                            tsb_UB04.Visible = false;
                            UB04Setting = false;
                        }
                    }

                    //if (trvBatch.Nodes == null || trvBatch.Nodes.Count <= 0)
                    //{
                    //    lblcalimamtvalue.Text = "";
                    //    lblBatchDateValue.Text = "";
                    //    lblClaimcountvalue.Text = "";
                    //    lblClearinghouseValue.Text = "";
                    //    lblBillingmethodvalue.Text = "";
                    //    tsb_BatchDetailReport.Visible = false;
                    //    tsb_Print1500.Visible = false;
                    //    tsb_UB04.Visible = false;
                    //    // tsb_Send.Visible = false;
                    //    Tsb_BatchSend.Visible = false;
                    //    tsb_Modify.Visible = false;
                    //}
                    //else
                    //{
                    //    tsb_BatchDetailReport.Visible = true;
                    //    tsb_Print1500.Visible = true;
                    //    tsb_UB04.Visible = true;
                    //    // tsb_Send.Visible = true;
                    //    Tsb_BatchSend.Visible = true;
                    //    tsb_Modify.Visible = true;

                    //    if (_IsenableUB04)
                    //    {
                    //        tsb_UB04.Visible = true;
                    //        UB04Setting = true;
                    //    }
                    //    else
                    //    {
                    //        tsb_UB04.Visible = false;
                    //        UB04Setting = false;
                    //    }

                    //}
                    #endregion " Show hide and reset controls "

                    //tsb_Reject.Visible = true;
                    tsb_Modify.Text = "Modify Charges";
                    #endregion " Show/Hide Buttons "

                    break;

                case "SentBatch":

                    #region " Show/Hide Buttons "
                    txtBatchSearch_SentBatch.Clear();

                    tsb_Print1500.Enabled = true;
                    tsb_PrintNew1500.Enabled = true;
                    tsb_UB04.Enabled = true;
                    if (_IsenableUB04)
                    {
                        tsb_UB04.Visible = true;
                        UB04Setting = true;
                    }
                    else
                    {
                        tsb_UB04.Visible = false;
                        UB04Setting = false;
                    }

                    FillBatchTree(trvBatch_SentBatch, TransactionStatus.Batch, true);
                    chkBatchClaimCount_SentBatch.Checked = true;
                    tsb_Modify.Visible = true;
                    //tsb_Print1500.Visible = false;
                    tsb_Print1500.Visible = true;
                    tsb_PrintNew1500.Visible = true;
                    tsb_Delete.Visible = false;
                    tsb_Void.Visible = false;
                    tsb_DeleteBatch.Visible = false;
                    tsb_Refresh.Visible = true;
                    tsb_Select.Visible = false;
                    tsb_Queue.Visible = false;
                    tsb_Validate.Visible = false;
                    //tsb_Send.Visible = true;
                    Tsb_BatchSend.Visible = true;
                    tsb_toSecondary.Visible = false;//MaheshB 20091109 Before true
                    tsb_Batch.Visible = false;
                    tsb_ValidateNBatch.Visible = false;
                    tsb_ValidateNBatch.Enabled = false;
                    tsb_Accept.Visible = false;//MaheshB 20091109 Before true
                    //tsb_Reject.Visible = false;//MaheshB 20091109 Before true
                    //tsb_Finished.Visible = false;
                    tsb_Close.Visible = true;
                    //tsb_Help.Visible = true;
                    tsb_ReQueue.Visible = false;
                    tsb_ApplyFilter.Visible = false;
                    tsb_Print.Visible = false;
                    tsb_PrintForm.Visible = false;
                    tsb_View.Visible = false;
                    tsb_PrintClaimData.Visible = false;
                    tsb_PrintClaimForm.Visible = false;

                    #region " Show hide and reset controls "

                    if (c1trvBatch_SentBatch == null || c1trvBatch_SentBatch.Rows.Count <= 0)
                    {
                        lblcalimamtvalue_SentBatch.Text = "";
                        lblBatchDateValue_SentBatch.Text = "";
                        lblClaimcountvalue_SentBatch.Text = "";
                        lblClearinghouseValue_SentBatch.Text = "";
                        lblBillingmethodvalue_SentBatch.Text = "";
                        tsb_BatchDetailReport.Visible = false;
                        tsb_Print1500.Visible = false;
                        tsb_PrintNew1500.Visible = false;
                        tsb_UB04.Visible = false;
                        Tsb_BatchSend.Visible = false;
                        tsb_Modify.Visible = false;
                        tsb_PrintNew1500.Visible = false; // 12312013 sameer 
                    }
                    else
                    {
                        tsb_BatchDetailReport.Visible = true;
                        tsb_Print1500.Visible = true;
                        tsb_UB04.Visible = true;
                        Tsb_BatchSend.Visible = true;
                        tsb_Modify.Visible = true;

                        if (_IsenableUB04)
                        {
                            tsb_UB04.Visible = true;
                            UB04Setting = true;
                        }
                        else
                        {
                            tsb_UB04.Visible = false;
                            UB04Setting = false;
                        }
                    }

                    //if (trvBatch_SentBatch.Nodes == null || trvBatch_SentBatch.Nodes.Count <= 0)
                    //{
                    //    lblcalimamtvalue_SentBatch.Text = "";
                    //    lblBatchDateValue_SentBatch.Text = "";
                    //    lblClaimcountvalue_SentBatch.Text = "";
                    //    lblClearinghouseValue_SentBatch.Text = "";
                    //    lblBillingmethodvalue_SentBatch.Text = "";
                    //    tsb_BatchDetailReport.Visible = false;
                    //    tsb_Print1500.Visible = false;
                    //    tsb_UB04.Visible = false;
                    //    // tsb_Send.Visible = false;
                    //    Tsb_BatchSend.Visible = false;
                    //    tsb_Modify.Visible = false;
                    //}
                    //else
                    //{
                    //    tsb_BatchDetailReport.Visible = true;
                    //    tsb_Print1500.Visible = true;
                    //    tsb_UB04.Visible = true;
                    //    // tsb_Send.Visible = true;
                    //    Tsb_BatchSend.Visible = true;
                    //    tsb_Modify.Visible = true;

                    //    if (_IsenableUB04)
                    //    {
                    //        tsb_UB04.Visible = true;
                    //        UB04Setting = true;
                    //    }
                    //    else
                    //    {
                    //        tsb_UB04.Visible = false;
                    //        UB04Setting = false;
                    //    }

                    //}

                    #endregion " Show hide and reset controls "

                    //tsb_Reject.Visible = true;
                    tsb_Modify.Text = "Modify Charges";
                    #endregion " Show/Hide Buttons "

                    break;

                case "Void":

                    #region " Show/Hide Buttons "
                    //FillClaimsOnFindingCriteria(_TagVoid, false);
                    txtVoidSearch.Clear();

                    DataTable dtVoidClaims = new DataTable();
                    //dtClaims = ogloClaimManager.GetCharges();
                    int _numClaimCount = 0;
                    if (numVoidClaimCount.Value <= 0)
                    {
                        _numClaimCount = 0;
                    }
                    else
                    {
                        _numClaimCount = Convert.ToInt32(numVoidClaimCount.Value);
                    }
                    dtVoidClaims = GetVoidClaims(_numClaimCount);
                    if (dtVoidClaims != null)
                    {
                        if (dtVoidClaims != null)
                        {
                            gloGlobal.gloPMGlobal.SplitClaimColumn(dtVoidClaims, dtVoidClaims.Columns.IndexOf("Claim"));
                        }

                        c1VoidClaims.DataSource = dtVoidClaims.DefaultView;
                        DesignGrid(_TagVoid.ToUpper());
                    }




                    tsb_Modify.Visible = true;
                    // tsb_Print1500.Visible = false;
                    tsb_Print1500.Visible = true;
                    tsb_PrintNew1500.Visible = true;// 12312013 sameer 
                    tsb_Delete.Visible = false;
                    tsb_Void.Visible = false;
                    tsb_DeleteBatch.Visible = false;
                    tsb_Refresh.Visible = true;
                    tsb_Select.Visible = false;
                    tsb_Queue.Visible = false;
                    tsb_ReQueue.Visible = false;
                    tsb_Validate.Visible = false;
                    // tsb_Send.Visible = false;
                    Tsb_BatchSend.Visible = false;
                    tsb_toSecondary.Visible = false;//Added By MaheshB
                    tsb_Batch.Visible = false;
                    tsb_ValidateNBatch.Visible = false;
                    tsb_Accept.Visible = false;
                    tsb_Reject.Visible = false;
                    tsb_Close.Visible = true;
                    tsb_Finished.Visible = false;
                    //tsb_Help.Visible = true;
                    tsb_ApplyFilter.Visible = false;
                    tsb_Print1500.Visible = false;
                    tsb_PrintNew1500.Visible = false; // 12312013 sameer 
                    tsb_UB04.Visible = false;
                    tsb_RejectBatch.Visible = false;
                    tsb_Modify.Text = "View Charges";

                    tsb_Resend.Visible = false;
                    tsb_BatchDetailReport.Visible = false;
                    tsb_PrintNew1500.Visible = false;
                    tsb_Print.Visible = false;
                    tsb_PrintForm.Visible = false;
                    tsb_View.Visible = false;
                    tsb_PrintClaimData.Visible = false;
                    tsb_PrintClaimForm.Visible = false;
                    #endregion " Show/Hide Buttons "

                    break;

                case "Charges":

                    #region " Show/Hide Buttons "

                    if (_IsenableUB04)
                    {
                        tsb_UB04.Visible = true;
                        UB04Setting = true;
                    }
                    else
                    {
                        tsb_UB04.Visible = false;
                        UB04Setting = false;
                    }

                    FillClaimsOnFindingCriteria(_TagQueue, false);

                    tsb_Modify.Visible = true;
                    tsb_Print1500.Visible = true;
                    tsb_PrintNew1500.Visible = true;// 12312013 sameer 
                    tsb_Delete.Visible = false;
                    tsb_Void.Visible = false; //MaheshB 20091109
                    tsb_DeleteBatch.Visible = false;
                    tsb_Refresh.Visible = true;
                    tsb_Select.Visible = true;
                    tsb_Queue.Visible = false;
                    tsb_Validate.Visible = true;
                    tsb_Validate.Enabled = true;
                    //tsb_Send.Visible = false;
                    Tsb_BatchSend.Visible = false;
                    tsb_toSecondary.Visible = false;
                    tsb_Batch.Visible = true;
                    tsb_ValidateNBatch.Visible = false;
                    tsb_Accept.Visible = false;
                    tsb_Reject.Visible = false;
                    tsb_Finished.Visible = false;
                    tsb_Close.Visible = true;
                    //tsb_Help.Visible = true;
                    tsb_ReQueue.Visible = false;

                    tsb_Resend.Visible = false;
                    tsb_BatchDetailReport.Visible = false;
                    tsb_Print.Visible = false;
                    tsb_PrintForm.Visible = false;
                    tsb_View.Visible = false;
                    tsb_PrintClaimData.Visible = false;
                    tsb_PrintClaimForm.Visible = false;

                    #endregion " Show/Hide Buttons "

                    break;

                case "OnHold":


                    #region " Show/Hide Buttons "

                    txtSearchHoldClaims.Clear();

                    tsb_Modify.Text = "Modify Charges";
                    if (rbPlanHold.Checked == true)
                    {
                        tsb_Modify.Visible = false;

                    }
                    else
                    {
                        tsb_Modify.Visible = true;
                    }


                    tsb_Print1500.Visible = false;
                    tsb_PrintNew1500.Visible = false;  // 12312013 sameer 
                    tsb_UB04.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Void.Visible = false;
                    tsb_DeleteBatch.Visible = false;
                    tsb_Refresh.Visible = true;
                    tsb_Select.Visible = false;
                    tsb_Queue.Visible = false;
                    tsb_Validate.Visible = false;
                    tsb_Validate.Enabled = false;
                    //tsb_Send.Visible = false;
                    Tsb_BatchSend.Visible = false;
                    tsb_toSecondary.Visible = false;
                    tsb_Batch.Visible = false;
                    tsb_ValidateNBatch.Visible = false;
                    tsb_Accept.Visible = false;
                    tsb_Reject.Visible = false;
                    tsb_RejectBatch.Visible = false;
                    tsb_Finished.Visible = false;
                    tsb_Close.Visible = true;
                    tsb_ReQueue.Visible = false;
                    tsb_Resend.Visible = false;
                    tsb_ApplyFilter.Visible = false;
                    tsb_BatchDetailReport.Visible = false;
                    tsb_Print.Visible = false;
                    tsb_PrintForm.Visible = false;
                    tsb_View.Visible = false;
                    tsb_PrintClaimData.Visible = false;
                    tsb_PrintClaimForm.Visible = false;

                    #endregion " Show/Hide Buttons "
                    //This condition true when the first time open the form.
                    Boolean chkFunction = false;
                    if (rbBillingHold.Checked == false && rbPlanHold.Checked == false)
                    {
                        FillHoldBalance();
                        // Boolean _bResult ;
                        //= FillBillingHoldData("TotalHoldBalance");
                        //  _bResult = FillBillingHoldData("PlanHoldBalance");                        
                        rbBillingHold.Checked = true;
                        chkFunction = true;
                    }

                    if (chkFunction == false)
                    {
                        if (rbBillingHold.Checked == true)
                        {
                            Boolean _bResult = FillBillingHoldData(HoldType.BillingHold.ToString());

                        }
                        else if (rbPlanHold.Checked == true)
                        {
                            Boolean _bResult = FillBillingHoldData(HoldType.PlanHold.ToString());
                        }
                    }

                    break;

                case "Claim Manager":

                    #region "Show/Hide Buttons"

                    tsb_Accept.Visible = false;
                    tsb_ApplyFilter.Visible = false;
                    tsb_Batch.Visible = false;
                    tsb_BatchDetailReport.Visible = false;
                    tsb_ClaimStatus.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_DeleteBatch.Visible = false;
                    tsb_Elec_Secondary.Visible = false;
                    tsb_Finished.Visible = false;
                    tsb_Modify.Visible = false;
                    tsb_Print1500.Visible = false;
                    tsb_PrintNew1500.Visible = false;
                    tsb_Queue.Visible = false;
                    tsb_Reject.Visible = false;
                    tsb_RejectBatch.Visible = false;
                    tsb_ReQueue.Visible = false;
                    tsb_Resend.Visible = false;
                    tsb_Select.Visible = false;
                    tsb_Send.Visible = false;
                    tsb_Send_ElectronicClaim.Visible = false;
                    tsb_Send_PaperClaim.Visible = false;
                    tsb_toSecondary.Visible = false;
                    tsb_UB04.Visible = false;
                    tsb_Validate.Visible = false;
                    tsb_ValidateNBatch.Visible = false;
                    tsb_Void.Visible = false;
                    tsb_WorkerComp.Visible = false;
                    tsb_ClaimStatus.Visible = false;

                    tsb_PrintClaimForm.Visible = false;
                    tsb_PrintForm.Visible = false;
                    chkCrossClaimSearch.Checked = false;
                    //Tsb_BatchSend.Visible = true;
                    //tsb_View.Visible = true;
                    //tsb_Refresh.Visible = true;
                    //tsb_Close.Visible = true;                   

                    #endregion

                    FillgloPMClaimStructure();
                    FillClearingHouseMenus(Tsb_BatchSend);
                    if (iFileTypeID == 0 || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission))
                    {
                        DesignCMHeaderlbl(lbl837ElectronicClaims);
                        CM837ElectronicClaimSubmission();
                    }
                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                    {                        
                        CM837ElectronicClaimSubmitted();
                    }
                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                    {
                        DesignCMHeaderlbl(lbl837PaperClaims);
                        CM837PaperClaimSubmission();
                    }
                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                    {                        
                        CM837PaperClaimPrinted();
                    }
                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements))
                    {
                        DesignCMHeaderlbl(lblStatements);
                        CMAllStatements();
                    }
                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted))
                    {                        
                        CMStatementsSubmitted();
                    }

                    break;

            }
        }

        public void DesignGrid(string _GridType)
        {
            int _nWidth = 0;
            _nWidth = 1045;
            switch (_GridType)
            {
                case "QUEUE":

                    #region

                    c1QueuedClaims.Cols["Select"].Visible = true;
                    c1QueuedClaims.Cols["TransactionMasterID"].Visible = false;
                    c1QueuedClaims.Cols["TransactionID"].Visible = false;
                    c1QueuedClaims.Cols["MasterAppointmentID"].Visible = false;
                    c1QueuedClaims.Cols["AppointmentID"].Visible = false;
                    c1QueuedClaims.Cols["ClaimNo"].Visible = false;
                    c1QueuedClaims.Cols["Claim"].Visible = true;
                    c1QueuedClaims.Cols["DOS"].Visible = true;
                    c1QueuedClaims.Cols["SubClaimNo"].Visible = false;
                    c1QueuedClaims.Cols["bAutoClaim"].Visible = false;
                    c1QueuedClaims.Cols["ReferralID"].Visible = false;
                    c1QueuedClaims.Cols["bIsOpened"].Visible = false;
                    c1QueuedClaims.Cols["ContactID"].Visible = false;
                    c1QueuedClaims.Cols["ClinicID"].Visible = false;
                    c1QueuedClaims.Cols["PatientID"].Visible = false;
                    c1QueuedClaims.Cols["TransactionProviderID"].Visible = false;
                    c1QueuedClaims.Cols["Status"].Visible = true;
                    c1QueuedClaims.Cols["nResponsibilityNo"].Visible = false;
                    c1QueuedClaims.Cols["row_number"].Visible = false;
                    c1QueuedClaims.Cols["FacilityCode"].Visible = false;
                    c1QueuedClaims.Cols["FacilityCode"].Visible = false;
                    c1QueuedClaims.Cols["InsuranceID"].Visible = false;

                    c1QueuedClaims.Cols["ProviderFName"].Visible = false;
                    c1QueuedClaims.Cols["ProviderMName"].Visible = false;
                    c1QueuedClaims.Cols["ProviderLName"].Visible = false;

                    c1QueuedClaims.Cols["PatientFName"].Visible = false;
                    c1QueuedClaims.Cols["PatientMName"].Visible = false;
                    c1QueuedClaims.Cols["PatientLName"].Visible = false;
                    c1QueuedClaims.Cols["DOB"].Visible = true;
                    c1QueuedClaims.Cols["PlanBillingMethodID"].Visible = false;
                    c1QueuedClaims.Cols["PlanBillingMethod"].Visible = false;
                    c1QueuedClaims.Cols["TrayID"].Visible = false;
                    c1QueuedClaims.Cols["TrayName"].Visible = false;
                    c1QueuedClaims.Cols["CloseDate"].Visible = false;
                    c1QueuedClaims.Cols["UserID"].Visible = false;
                    c1QueuedClaims.Cols["UserName"].Visible = false;
                    c1QueuedClaims.Cols["ProviderID"].Visible = false;
                    c1QueuedClaims.Cols["ReportingCategoryID"].Visible = false;
                    c1QueuedClaims.Cols["ReportingCategory"].Visible = false;
                    c1QueuedClaims.Cols["InsuranceCompanyID"].Visible = false;
                    c1QueuedClaims.Cols["InsuranceCompany"].Visible = false;
                    c1QueuedClaims.Cols["SortClaim"].Visible = false;
                    c1QueuedClaims.Cols["SortSubClaim"].Visible = false;
                    if (!gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
                        c1QueuedClaims.Cols["BUS"].Visible = false;
                    else
                        c1QueuedClaims.Cols["BUS"].Visible = true;


                    if (UB04Setting == true)
                    {
                        c1QueuedClaims.Cols["BillingType"].Visible = true;
                    }
                    else
                    {
                        c1QueuedClaims.Cols["BillingType"].Visible = false;
                    }
                    c1QueuedClaims.Cols["BillingTypeId"].Visible = false;
                    c1QueuedClaims.Cols["dtDateSearch"].Visible = false;
                    c1QueuedClaims.Cols["dtDOSSearch"].Visible = false;
                    c1QueuedClaims.Cols["dtDOBSearch"].Visible = false;
                    if (_IsMultipleClearingHouse == true)
                    {
                        c1QueuedClaims.Cols["ClearingHouse"].Visible = true;
                    }
                    else
                    {
                        c1QueuedClaims.Cols["ClearingHouse"].Visible = false;
                    }
                    c1QueuedClaims.Cols["ClearingHouseType"].Visible = false;
                    c1QueuedClaims.Cols["BillingMethod"].Visible = false;
                    c1QueuedClaims.Cols["nICDRevision"].Visible = false;
                    #region " Set Header "
                    c1QueuedClaims.Cols["Select"].Caption = "Select";
                    c1QueuedClaims.Cols["Claim"].Caption = "Claim #";
                    c1QueuedClaims.Cols["DOS"].Caption = "DOS";
                    c1QueuedClaims.Cols["Date"].Caption = "Close Date";
                    c1QueuedClaims.Cols["PatientID"].Caption = "Patient ID";
                    c1QueuedClaims.Cols["PatientCode"].Caption = "Code";
                    c1QueuedClaims.Cols["PatientFName"].Caption = "Patient FN";
                    c1QueuedClaims.Cols["PatientMName"].Caption = "Patient MI";
                    c1QueuedClaims.Cols["PatientLName"].Caption = "Patient LN";
                    c1QueuedClaims.Cols["PatientName"].Caption = "Patient Name";
                    c1QueuedClaims.Cols["ProviderFName"].Caption = "Provider FN";
                    c1QueuedClaims.Cols["ProviderMName"].Caption = "Provider MI";
                    c1QueuedClaims.Cols["ProviderLName"].Caption = "Provider LN";
                    c1QueuedClaims.Cols["ProviderName"].Caption = "Provider Name";
                    c1QueuedClaims.Cols["FacilityCode"].Caption = "Facility Code";
                    c1QueuedClaims.Cols["Facility"].Caption = "Facility";
                    c1QueuedClaims.Cols["InsuerdsID"].Caption = "Insurance ID";
                    c1QueuedClaims.Cols["Insurance"].Caption = "Insurance Plan";
                    c1QueuedClaims.Cols["StatementNotes"].Caption = "Statement Notes";
                    c1QueuedClaims.Cols["InternalNotes"].Caption = "Internal Notes";
                    c1QueuedClaims.Cols["BillingType"].Caption = "Billing Type";
                    c1QueuedClaims.Cols["ClearingHouse"].Caption = "Clearinghouse";
                    c1QueuedClaims.Cols["BillingMethod"].Caption = "BillingMethod";
                    c1QueuedClaims.Cols["DOB"].Caption = "DOB";
                    #endregion



                    if (UB04Setting == true)
                    {
                        c1QueuedClaims.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.03);
                        c1QueuedClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.06);
                        c1QueuedClaims.Cols["DOS"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["PatientCode"].Width = Convert.ToInt32(_nWidth * 0.06);
                        c1QueuedClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1QueuedClaims.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1QueuedClaims.Cols["Insurance"].Width = Convert.ToInt32(_nWidth * 0.16);
                        c1QueuedClaims.Cols["Errors List"].Width = Convert.ToInt32(_nWidth * 0.12);
                        c1QueuedClaims.Cols["StatementNotes"].Width = Convert.ToInt32(_nWidth * 0.11);
                        c1QueuedClaims.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["InternalNotes"].Width = Convert.ToInt32(_nWidth * 0.09);
                        c1QueuedClaims.Cols["BillingType"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["DOB"].Width = Convert.ToInt32(_nWidth * 0.07);
                    }
                    else
                    {
                        c1QueuedClaims.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.03);
                        c1QueuedClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.06);
                        c1QueuedClaims.Cols["DOS"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["PatientCode"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.14);
                        c1QueuedClaims.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.14);
                        c1QueuedClaims.Cols["Insurance"].Width = Convert.ToInt32(_nWidth * 0.17);
                        c1QueuedClaims.Cols["Errors List"].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1QueuedClaims.Cols["StatementNotes"].Width = Convert.ToInt32(_nWidth * 0.11);
                        c1QueuedClaims.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1QueuedClaims.Cols["InternalNotes"].Width = Convert.ToInt32(_nWidth * 0.09);
                        c1QueuedClaims.Cols["DOB"].Width = Convert.ToInt32(_nWidth * 0.07);

                    }

                    C1.Win.C1FlexGrid.CellStyle csCustom = c1QueuedClaims.Styles.Add("csCustom");

                    csCustom.Border.Style = C1.Win.C1FlexGrid.BorderStyleEnum.Flat;
                    csCustom.Border.Color = Color.FromArgb(159, 181, 221);
                    csCustom.Border.Direction = BorderDirEnum.Both;
                    csCustom.Border.Width = 1;
                    csCustom.Font = new System.Drawing.Font(c1QueuedClaims.Font, FontStyle.Underline);
                    csCustom.ForeColor = Color.Blue;

                    for (int i = 1; i < c1QueuedClaims.Rows.Count; i++)
                    {
                        c1QueuedClaims.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;
                        c1QueuedClaims.SetCellStyle(i, c1QueuedClaims.Cols.IndexOf("Errors List"), csCustom);
                    }
                    for (int i = 1; i < c1QueuedClaims.Cols.Count; i++)
                    {
                        c1QueuedClaims.Cols[i].AllowEditing = false;
                    }

                    c1QueuedClaims.Cols["Select"].AllowSorting = false;

                    c1QueuedClaims.Cols["Date"].DataType = typeof(System.DateTime);
                    c1QueuedClaims.Cols["Date"].Format = "MM/dd/yyyy";

                    c1QueuedClaims.Cols["DOS"].DataType = typeof(System.DateTime);
                    c1QueuedClaims.Cols["DOS"].Format = "MM/dd/yyyy";
                    // c1QueuedClaims.Cols["Errors List"].DataType = typeof(HyperLink);
                    c1QueuedClaims.Cols["DOB"].DataType = typeof(System.DateTime);
                    c1QueuedClaims.Cols["DOB"].Format = "MM/dd/yyyy";

                    if (!gloGlobal.gloPMGlobal.IsClaimRulesEnabled())
                    {
                        c1QueuedClaims.Cols["Errors List"].Visible = false;
                    }

                    #endregion

                    break;

                case "BATCH":

                    #region

                    c1BatchGrid.Cols["Select"].Visible = false;
                    c1BatchGrid.Cols["BatchID"].Visible = false;
                    c1BatchGrid.Cols["TransactionMasterID"].Visible = false;
                    c1BatchGrid.Cols["TransactionID"].Visible = false;
                    c1BatchGrid.Cols["MasterAppointmentID"].Visible = false;
                    c1BatchGrid.Cols["AppointmentID"].Visible = false;
                    c1BatchGrid.Cols["ClaimNo"].Visible = false;
                    c1BatchGrid.Cols["Claim"].Visible = true;
                    c1BatchGrid.Cols["SubClaimNo"].Visible = false;
                    c1BatchGrid.Cols["bAutoClaim"].Visible = false;
                    c1BatchGrid.Cols["ReferralID"].Visible = false;
                    c1BatchGrid.Cols["bIsOpened"].Visible = false;
                    c1BatchGrid.Cols["ContactID"].Visible = false;
                    c1BatchGrid.Cols["ClinicID"].Visible = false;
                    c1BatchGrid.Cols["PatientID"].Visible = false;
                    c1BatchGrid.Cols["TransactionProviderID"].Visible = false;
                    c1BatchGrid.Cols["Status"].Visible = true;
                    c1BatchGrid.Cols["BatchID"].Visible = false;
                    c1BatchGrid.Cols["FacilityCode"].Visible = false;
                    c1BatchGrid.Cols["InsuerdsID"].Visible = true;

                    c1BatchGrid.Cols["PatientFName"].Visible = false;
                    c1BatchGrid.Cols["PatientMName"].Visible = false;
                    c1BatchGrid.Cols["PatientLName"].Visible = false;
                    c1BatchGrid.Cols["PatientCode"].Visible = true;
                    c1BatchGrid.Cols["Charges"].Visible = true;
                    c1BatchGrid.Cols["dateofservice"].Visible = true;

                    c1BatchGrid.Cols["ProviderFName"].Visible = false;
                    c1BatchGrid.Cols["ProviderMName"].Visible = false;
                    c1BatchGrid.Cols["ProviderLName"].Visible = false;

                    c1BatchGrid.Cols["InsuranceID"].Visible = false;
                    if (UB04Setting == true)
                    {
                        c1BatchGrid.Cols["BillingType"].Visible = true;
                    }
                    else
                    {
                        c1BatchGrid.Cols["BillingType"].Visible = false;
                    }
                    c1BatchGrid.Cols["BillingTypeId"].Visible = false;
                    c1BatchGrid.Cols["dtDateSearch"].Visible = false;
                    c1BatchGrid.Cols["nICDRevision"].Visible = false;
                    c1BatchGrid.Cols["SortClaim"].Visible = false;
                    c1BatchGrid.Cols["SortSubClaim"].Visible = false;
                    c1BatchGrid.Cols["DOB"].Visible = true;
                    c1BatchGrid.Cols["dtDOBSearch"].Visible = false;
                    #region " Set Header "
                    c1BatchGrid.Cols["Select"].Caption = "Select";
                    c1BatchGrid.Cols["Claim"].Caption = "Claim #";
                    c1BatchGrid.Cols["Date"].Caption = "Close Date";
                    c1BatchGrid.Cols["PatientID"].Caption = "Patient ID";
                    c1BatchGrid.Cols["PatientCode"].Caption = "Code";
                    c1BatchGrid.Cols["PatientFName"].Caption = "Patient FN";
                    c1BatchGrid.Cols["PatientMName"].Caption = "Patient MI";
                    c1BatchGrid.Cols["PatientLName"].Caption = "Patient LN";
                    c1BatchGrid.Cols["ProviderFName"].Caption = "Provider FN";
                    c1BatchGrid.Cols["ProviderMName"].Caption = "Provider MI";
                    c1BatchGrid.Cols["ProviderLName"].Caption = "Provider LN";
                    c1BatchGrid.Cols["FacilityCode"].Caption = "Facility Code";
                    c1BatchGrid.Cols["Facility"].Caption = "Facility";
                    c1BatchGrid.Cols["InsuerdsID"].Caption = "Insurance ID";
                    c1BatchGrid.Cols["Insurance"].Caption = "Insurance Plan";
                    c1BatchGrid.Cols["StatementNotes"].Caption = "Statement Notes";
                    c1BatchGrid.Cols["InternalNotes"].Caption = "Internal Notes";
                    c1BatchGrid.Cols["BillingType"].Caption = "Billing Type";
                    c1BatchGrid.Cols["Charges"].Caption = "Charges";
                    c1BatchGrid.Cols["dateofservice"].Caption = "DOS";
                    c1BatchGrid.Cols["PatientFullName"].Caption = "Patient";
                    c1BatchGrid.Cols["ProviderFullName"].Caption = "Provider";
                    c1BatchGrid.Cols["DOB"].Caption = "DOB";
                    c1BatchGrid.Cols["PatientFullName"].Width = Convert.ToInt32(_nWidth * 0.15);
                    c1BatchGrid.Cols["ProviderFullName"].Width = Convert.ToInt32(_nWidth * 0.15);
                    c1BatchGrid.Cols["Insurance"].Width = Convert.ToInt32(_nWidth * 0.10);
                    c1BatchGrid.Cols["StatementNotes"].Width = Convert.ToInt32(_nWidth * 0.10);
                    #endregion


                    _nWidth = 0;
                    _nWidth = Convert.ToInt32(c1BatchGrid.Width);
                    c1BatchGrid.Cols["dateofservice"].Width = Convert.ToInt32(_nWidth * 0.07);
                    c1BatchGrid.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.06);
                    c1BatchGrid.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.07);
                    c1BatchGrid.Cols["DOB"].Width = Convert.ToInt32(_nWidth * 0.07);

                    for (int i = 0; i < c1BatchGrid.Rows.Count; i++)
                    {
                        c1BatchGrid.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;

                    }
                    for (int i = 1; i < c1BatchGrid.Cols.Count; i++)
                    {
                        c1BatchGrid.Cols[i].AllowEditing = false;
                    }

                    c1BatchGrid.Cols["Date"].DataType = typeof(System.DateTime);
                    c1BatchGrid.Cols["Date"].Format = "MM/dd/yyyy";

                    c1BatchGrid.Cols["dateofservice"].DataType = typeof(System.DateTime);
                    c1BatchGrid.Cols["dateofservice"].Format = "MM/dd/yyyy";

                    c1BatchGrid.Cols["DOB"].DataType = typeof(System.DateTime);
                    c1BatchGrid.Cols["DOB"].Format = "MM/dd/yyyy";
                    /*
                    break;






                    #region " Set Header "
                    
                    c1BatchGrid.Cols["Select"].Caption = "Select";
                    c1BatchGrid.Cols["Claim"].Caption = "Claim #";
                    c1BatchGrid.Cols["Date"].Caption = "Date";
                    c1BatchGrid.Cols["PatientID"].Caption = "Patient ID";
                    c1BatchGrid.Cols["PatientCode"].Caption = "Code";
                    c1BatchGrid.Cols["PatientFName"].Caption = "Patient FN";
                    c1BatchGrid.Cols["PatientMName"].Caption = "Patient MI";
                    c1BatchGrid.Cols["PatientLName"].Caption = "Patient LN";
                    c1BatchGrid.Cols["ProviderFName"].Caption = "Provider FN";
                    c1BatchGrid.Cols["ProviderMName"].Caption = "Provider MI";
                    c1BatchGrid.Cols["ProviderLName"].Caption = "Provider LN";
                    c1BatchGrid.Cols["FacilityCode"].Caption = "Facility Code";
                    c1BatchGrid.Cols["Facility"].Caption = "Facility";
                    c1BatchGrid.Cols["InsuranceID"].Caption = "Insurance ID";
                    c1BatchGrid.Cols["Insurance"].Caption = "Insurance Plan";
                    #endregion


                    _nWidth = 0;
                    _nWidth = Convert.ToInt32(c1BatchGrid.Width);
                    c1BatchGrid.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.10);
                    c1BatchGrid.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.08);
                    c1BatchGrid.Cols["Date"].DataType = typeof(System.DateTime);
                    c1BatchGrid.Cols["Date"].Format = "MM/dd/yyyy";



                    for (int i = 0; i < c1BatchGrid.Rows.Count; i++)
                    {
                        c1BatchGrid.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;
                    }
                    for (int i = 1; i < c1BatchGrid.Cols.Count; i++)
                    {
                        c1BatchGrid.Cols[i].AllowEditing = false;
                    }


                    */
                    #endregion

                    break;

                case "SENTBATCH":

                    #region

                    c1BatchGridSentBatch.Cols["Select"].Visible = false;
                    c1BatchGridSentBatch.Cols["BatchID"].Visible = false;
                    c1BatchGridSentBatch.Cols["TransactionMasterID"].Visible = false;
                    c1BatchGridSentBatch.Cols["TransactionID"].Visible = false;
                    c1BatchGridSentBatch.Cols["MasterAppointmentID"].Visible = false;
                    c1BatchGridSentBatch.Cols["AppointmentID"].Visible = false;
                    c1BatchGridSentBatch.Cols["ClaimNo"].Visible = false;
                    c1BatchGridSentBatch.Cols["Claim"].Visible = true;
                    c1BatchGridSentBatch.Cols["SubClaimNo"].Visible = false;
                    c1BatchGridSentBatch.Cols["bAutoClaim"].Visible = false;
                    c1BatchGridSentBatch.Cols["ReferralID"].Visible = false;
                    c1BatchGridSentBatch.Cols["bIsOpened"].Visible = false;
                    c1BatchGridSentBatch.Cols["ContactID"].Visible = false;
                    c1BatchGridSentBatch.Cols["ClinicID"].Visible = false;
                    c1BatchGridSentBatch.Cols["PatientID"].Visible = false;
                    c1BatchGridSentBatch.Cols["TransactionProviderID"].Visible = false;
                    c1BatchGridSentBatch.Cols["Status"].Visible = true;
                    c1BatchGridSentBatch.Cols["BatchID"].Visible = false;
                    c1BatchGridSentBatch.Cols["FacilityCode"].Visible = false;
                    c1BatchGridSentBatch.Cols["InsuerdsID"].Visible = true;

                    c1BatchGridSentBatch.Cols["PatientFName"].Visible = false;
                    c1BatchGridSentBatch.Cols["PatientMName"].Visible = false;
                    c1BatchGridSentBatch.Cols["PatientLName"].Visible = false;
                    c1BatchGridSentBatch.Cols["PatientCode"].Visible = true;
                    c1BatchGridSentBatch.Cols["Charges"].Visible = true;
                    c1BatchGridSentBatch.Cols["dateofservice"].Visible = true;

                    c1BatchGridSentBatch.Cols["ProviderFName"].Visible = false;
                    c1BatchGridSentBatch.Cols["ProviderMName"].Visible = false;
                    c1BatchGridSentBatch.Cols["ProviderLName"].Visible = false;

                    c1BatchGridSentBatch.Cols["InsuranceID"].Visible = false;
                    if (UB04Setting == true)
                    {
                        c1BatchGridSentBatch.Cols["BillingType"].Visible = true;
                    }
                    else
                    {
                        c1BatchGridSentBatch.Cols["BillingType"].Visible = false;
                    }
                    c1BatchGridSentBatch.Cols["BillingTypeId"].Visible = false;
                    c1BatchGridSentBatch.Cols["dtDateSearch"].Visible = false;
                    c1BatchGridSentBatch.Cols["DOB"].Visible = true;
                    c1BatchGridSentBatch.Cols["dtDOBSearch"].Visible = false;
                    #region " Set Header "
                    c1BatchGridSentBatch.Cols["Select"].Caption = "Select";
                    c1BatchGridSentBatch.Cols["Claim"].Caption = "Claim #";
                    c1BatchGridSentBatch.Cols["Date"].Caption = "Close Date";
                    c1BatchGridSentBatch.Cols["PatientID"].Caption = "Patient ID";
                    c1BatchGridSentBatch.Cols["PatientCode"].Caption = "Code";
                    c1BatchGridSentBatch.Cols["PatientFName"].Caption = "Patient FN";
                    c1BatchGridSentBatch.Cols["PatientMName"].Caption = "Patient MI";
                    c1BatchGridSentBatch.Cols["PatientLName"].Caption = "Patient LN";
                    c1BatchGridSentBatch.Cols["ProviderFName"].Caption = "Provider FN";
                    c1BatchGridSentBatch.Cols["ProviderMName"].Caption = "Provider MI";
                    c1BatchGridSentBatch.Cols["ProviderLName"].Caption = "Provider LN";
                    c1BatchGridSentBatch.Cols["FacilityCode"].Caption = "Facility Code";
                    c1BatchGridSentBatch.Cols["Facility"].Caption = "Facility";
                    c1BatchGridSentBatch.Cols["InsuerdsID"].Caption = "Insurance ID";
                    c1BatchGridSentBatch.Cols["Insurance"].Caption = "Insurance Plan";
                    c1BatchGridSentBatch.Cols["StatementNotes"].Caption = "Statement Notes";
                    c1BatchGridSentBatch.Cols["InternalNotes"].Caption = "Internal Notes";
                    c1BatchGridSentBatch.Cols["BillingType"].Caption = "Billing Type";
                    c1BatchGridSentBatch.Cols["Charges"].Caption = "Charges";
                    c1BatchGridSentBatch.Cols["dateofservice"].Caption = "DOS";
                    c1BatchGridSentBatch.Cols["PatientFullName"].Caption = "Patient";
                    c1BatchGridSentBatch.Cols["ProviderFullName"].Caption = "Provider";
                    c1BatchGridSentBatch.Cols["DOB"].Caption = "DOB";
                    c1BatchGridSentBatch.Cols["PatientFullName"].Width = Convert.ToInt32(_nWidth * 0.15);
                    c1BatchGridSentBatch.Cols["ProviderFullName"].Width = Convert.ToInt32(_nWidth * 0.15);
                    c1BatchGridSentBatch.Cols["Insurance"].Width = Convert.ToInt32(_nWidth * 0.10);
                    c1BatchGridSentBatch.Cols["StatementNotes"].Width = Convert.ToInt32(_nWidth * 0.10);
                    #endregion


                    _nWidth = 0;
                    _nWidth = Convert.ToInt32(c1BatchGridSentBatch.Width);
                    c1BatchGridSentBatch.Cols["dateofservice"].Width = Convert.ToInt32(_nWidth * 0.07);
                    c1BatchGridSentBatch.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.06);
                    c1BatchGridSentBatch.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.07);
                    c1BatchGridSentBatch.Cols["DOB"].Width = Convert.ToInt32(_nWidth * 0.07);

                    for (int i = 0; i < c1BatchGridSentBatch.Rows.Count; i++)
                    {
                        c1BatchGridSentBatch.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;

                    }
                    for (int i = 1; i < c1BatchGridSentBatch.Cols.Count; i++)
                    {
                        c1BatchGridSentBatch.Cols[i].AllowEditing = false;
                    }

                    c1BatchGridSentBatch.Cols["Date"].DataType = typeof(System.DateTime);
                    c1BatchGridSentBatch.Cols["Date"].Format = "MM/dd/yyyy";

                    c1BatchGridSentBatch.Cols["dateofservice"].DataType = typeof(System.DateTime);
                    c1BatchGridSentBatch.Cols["dateofservice"].Format = "MM/dd/yyyy";
                    c1BatchGridSentBatch.Cols["nICDRevision"].Visible = false;
                    c1BatchGridSentBatch.Cols["SortClaim"].Visible = false;
                    c1BatchGridSentBatch.Cols["SortSubClaim"].Visible = false;

                    c1BatchGridSentBatch.Cols["DOB"].DataType = typeof(System.DateTime);
                    c1BatchGridSentBatch.Cols["DOB"].Format = "MM/dd/yyyy";
                    /*  break;






                      #region " Set Header "

                      c1BatchGridSentBatch.Cols["Select"].Caption = "Select";
                      c1BatchGridSentBatch.Cols["Claim"].Caption = "Claim #";
                      c1BatchGridSentBatch.Cols["Date"].Caption = "Date";
                      c1BatchGridSentBatch.Cols["PatientID"].Caption = "Patient ID";
                      c1BatchGridSentBatch.Cols["PatientCode"].Caption = "Code";
                      c1BatchGridSentBatch.Cols["PatientFName"].Caption = "Patient FN";
                      c1BatchGridSentBatch.Cols["PatientMName"].Caption = "Patient MI";
                      c1BatchGridSentBatch.Cols["PatientLName"].Caption = "Patient LN";
                      c1BatchGridSentBatch.Cols["ProviderFName"].Caption = "Provider FN";
                      c1BatchGridSentBatch.Cols["ProviderMName"].Caption = "Provider MI";
                      c1BatchGridSentBatch.Cols["ProviderLName"].Caption = "Provider LN";
                      c1BatchGridSentBatch.Cols["FacilityCode"].Caption = "Facility Code";
                      c1BatchGridSentBatch.Cols["Facility"].Caption = "Facility";
                      c1BatchGridSentBatch.Cols["InsuranceID"].Caption = "Insurance ID";
                      c1BatchGridSentBatch.Cols["Insurance"].Caption = "Insurance Plan";
                      #endregion


                      _nWidth = 0;
                      _nWidth = Convert.ToInt32(c1BatchGridSentBatch.Width);
                      c1BatchGridSentBatch.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.10);
                      c1BatchGridSentBatch.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.08);
                      c1BatchGridSentBatch.Cols["Date"].DataType = typeof(System.DateTime);
                      c1BatchGridSentBatch.Cols["Date"].Format = "MM/dd/yyyy";




                      for (int i = 0; i < c1BatchGridSentBatch.Rows.Count; i++)
                      {
                          c1BatchGridSentBatch.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;
                      }
                      for (int i = 1; i < c1BatchGridSentBatch.Cols.Count; i++)
                      {
                          c1BatchGridSentBatch.Cols[i].AllowEditing = false;
                      }


                      */
                    #endregion

                    break;

                case "VOID":

                    #region

                    c1VoidClaims.Cols["Select"].Visible = false;
                    c1VoidClaims.Cols["TransactionMasterID"].Visible = false;
                    c1VoidClaims.Cols["TransactionID"].Visible = false;
                    //c1VoidClaims.Cols["MasterAppointmentID"].Visible = false;
                    //c1VoidClaims.Cols["AppointmentID"].Visible = false;
                    c1VoidClaims.Cols["ClaimNo"].Visible = false;
                    c1VoidClaims.Cols["Claim"].Visible = true;
                    c1VoidClaims.Cols["DOS"].Visible = true;
                    c1VoidClaims.Cols["SubClaimNo"].Visible = false;
                    c1VoidClaims.Cols["bAutoClaim"].Visible = false;
                    //c1VoidClaims.Cols["ReferralID"].Visible = false;
                    c1VoidClaims.Cols["bIsOpened"].Visible = false;
                    c1VoidClaims.Cols["ContactID"].Visible = false;
                    //c1VoidClaims.Cols["ClinicID"].Visible = false;
                    c1VoidClaims.Cols["PatientID"].Visible = false;
                    //c1VoidClaims.Cols["TransactionProviderID"].Visible = false;
                    c1VoidClaims.Cols["Status"].Visible = true;
                    //c1VoidClaims.Cols["nBatchID"].Visible = false;
                    c1VoidClaims.Cols["FacilityCode"].Visible = false;
                    c1VoidClaims.Cols["InsuranceID"].Visible = false;
                    c1VoidClaims.Cols["VoidDate"].Visible = false;
                    c1VoidClaims.Cols["dtDOSSearch"].Visible = false;
                    c1VoidClaims.Cols["dtVoidDate"].Visible = false;
                    c1VoidClaims.Cols["SortClaim"].Visible = false;
                    c1VoidClaims.Cols["SortSubClaim"].Visible = false;
                    #region " Set Header "

                    c1VoidClaims.Cols["Select"].Caption = "Select";
                    c1VoidClaims.Cols["Claim"].Caption = "Claim #";
                    c1VoidClaims.Cols["DOS"].Caption = "DOS";
                    c1VoidClaims.Cols["Date"].Caption = "Close Date";
                    c1VoidClaims.Cols["PatientID"].Caption = "Patient ID";
                    c1VoidClaims.Cols["PatientCode"].Caption = "Code";
                    c1VoidClaims.Cols["PatientFName"].Caption = "Patient FN";
                    c1VoidClaims.Cols["PatientMName"].Caption = "Patient MI";
                    c1VoidClaims.Cols["PatientLName"].Caption = "Patient LN";
                    c1VoidClaims.Cols["ProviderFName"].Caption = "Provider FN";
                    c1VoidClaims.Cols["ProviderMName"].Caption = "Provider MI";
                    c1VoidClaims.Cols["ProviderLName"].Caption = "Provider LN";
                    c1VoidClaims.Cols["FacilityCode"].Caption = "Facility Code";
                    c1VoidClaims.Cols["Facility"].Caption = "Facility";
                    c1VoidClaims.Cols["InsuerdsID"].Caption = "Insurance ID";
                    c1VoidClaims.Cols["Insurance"].Caption = "Insurance Plan";
                    c1VoidClaims.Cols["sNoteDescription"].Caption = "Note";
                    c1VoidClaims.Cols["ClearingHouse"].Caption = "Clearinghouse";

                    #endregion


                    _nWidth = 0;
                    _nWidth = Convert.ToInt32(c1VoidClaims.Width);
                    c1VoidClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.06);
                    c1VoidClaims.Cols["DOS"].Width = Convert.ToInt32(_nWidth * 0.08);
                    c1VoidClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.08);
                    c1VoidClaims.Cols["Date"].DataType = typeof(System.DateTime);
                    c1VoidClaims.Cols["Date"].Format = "MM/dd/yyyy";

                    c1VoidClaims.Cols["DOS"].DataType = typeof(System.DateTime);
                    c1VoidClaims.Cols["DOS"].Format = "MM/dd/yyyy";

                    for (int i = 0; i < c1VoidClaims.Rows.Count; i++)
                    {
                        c1VoidClaims.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;
                    }
                    for (int i = 1; i < c1VoidClaims.Cols.Count; i++)
                    {
                        c1VoidClaims.Cols[i].AllowEditing = false;
                    }

                    if (_IsMultipleClearingHouse == false)
                    {
                        c1VoidClaims.Cols["ClearingHouse"].Visible = false;
                    }

                    break;

                    #endregion


                case "CLAIM_MANAGER_ELECTRONICCLAIMS":

                    #region
                    if (c1SubBatch.DataSource != null)
                    {
                        c1SubBatch.Cols["TransactionMasterID"].Visible = false;
                        c1SubBatch.Cols["TransactionID"].Visible = false;
                        c1SubBatch.Cols["Claim"].Visible = true;
                        c1SubBatch.Cols["ClaimNo"].Visible = false;
                        c1SubBatch.Cols["dateofservice"].Visible = true;
                        c1SubBatch.Cols["dtDateSearch"].Visible = false;
                        c1SubBatch.Cols["Charges"].Visible = true;
                        c1SubBatch.Cols["SubClaimNo"].Visible = false;
                        c1SubBatch.Cols["TransactionProviderID"].Visible = false;
                        c1SubBatch.Cols["PatientCode"].Visible = true;
                        c1SubBatch.Cols["PatientFullName"].Visible = true;
                        c1SubBatch.Cols["ProviderFullName"].Visible = true;
                        c1SubBatch.Cols["InsuerdsID"].Visible = true;
                        c1SubBatch.Cols["InsuranceID"].Visible = false;
                        c1SubBatch.Cols["Insurance"].Visible = true;
                        c1SubBatch.Cols["BatchID"].Visible = false;
                        c1SubBatch.Cols["BillingTypeId"].Visible = false;

                        #region "new"
                        //c1SubBatch.Cols["TransactionMasterID"].Visible = false;
                        //c1SubBatch.Cols["TransactionID"].Visible = false;
                        //c1SubBatch.Cols["BatchID"].Visible = false;
                        //c1SubBatch.Cols["sBatchName"].Visible = false;
                        //c1SubBatch.Cols["Claim"].Visible = true;
                        //c1SubBatch.Cols["dateofservice"].Visible = true;
                        //c1SubBatch.Cols["Charges"].Visible = true;
                        //c1SubBatch.Cols["PatientCode"].Visible = true;
                        //c1SubBatch.Cols["PatientFullName"].Visible = true;
                        //c1SubBatch.Cols["ProviderFullName"].Visible = true;
                        //c1SubBatch.Cols["InsuerdsID"].Visible = true;
                        //c1SubBatch.Cols["Insurance"].Visible = true;                    
                        //c1SubBatch.Cols["nClaimStatus"].Visible = false;
                        //c1SubBatch.Cols["BillingTypeMethod"].Visible = false;
                        //c1SubBatch.Cols["BillingTypeID"].Visible = false;
                        #endregion

                        if (UB04Setting == true)
                        {
                            c1SubBatch.Cols["BillingType"].Visible = true;
                        }
                        else
                        {
                            c1SubBatch.Cols["BillingType"].Visible = false;
                        }

                        c1SubBatch.Cols["SortClaim"].Visible = false;
                        c1SubBatch.Cols["SortSubClaim"].Visible = false;


                        #region " Set Header "

                        c1SubBatch.Cols["Claim"].Caption = "Claim #";
                        c1SubBatch.Cols["dateofservice"].Caption = "DOS";
                        c1SubBatch.Cols["Charges"].Caption = "Charges";
                        c1SubBatch.Cols["PatientCode"].Caption = "Code";
                        c1SubBatch.Cols["PatientFullName"].Caption = "Patient";
                        c1SubBatch.Cols["ProviderFullName"].Caption = "Provider";
                        c1SubBatch.Cols["InsuerdsID"].Caption = "Insurance ID";
                        c1SubBatch.Cols["Insurance"].Caption = "Insurance Plan";
                        c1SubBatch.Cols["BillingType"].Caption = "Billing Type";

                        #endregion

                        #region "Set Width"
                        _nWidth = 0;
                        _nWidth = Convert.ToInt32(c1SubBatch.Width);
                        c1SubBatch.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.06);
                        c1SubBatch.Cols["dateofservice"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1SubBatch.Cols["Charges"].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1SubBatch.Cols["PatientCode"].Width = Convert.ToInt32(_nWidth * 0.10);
                        c1SubBatch.Cols["PatientFullName"].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1SubBatch.Cols["ProviderFullName"].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1SubBatch.Cols["InsuerdsID"].Width = Convert.ToInt32(_nWidth * 0.10);
                        c1SubBatch.Cols["Insurance"].Width = Convert.ToInt32(_nWidth * 0.17);
                        c1SubBatch.Cols["BillingType"].Width = Convert.ToInt32(_nWidth * 0.09);

                        #endregion

                        for (int i = 0; i < c1SubBatch.Rows.Count; i++)
                        {
                            c1SubBatch.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;

                        }
                        for (int i = 1; i < c1SubBatch.Cols.Count; i++)
                        {
                            c1SubBatch.Cols[i].AllowEditing = false;
                        }

                        c1SubBatch.Cols["dateofservice"].DataType = typeof(System.DateTime);
                        c1SubBatch.Cols["dateofservice"].Format = "MM/dd/yyyy";

                        #region "Paper Claims Sended & Printes Date"

                        //if (c1SubBatch.Cols.Contains("dtDATE"))
                        //{
                        //    c1SubBatch.Cols["dtDATE"].DataType = typeof(System.DateTime);
                        //    c1SubBatch.Cols["dtDATE"].Format = "MM/dd/yyyy";
                        //    c1SubBatch.Cols["dtDATE"].Width = Convert.ToInt32(_nWidth * 0.08);

                        //    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                        //    {
                        //        c1SubBatch.Cols["dtDATE"].Visible = true;
                        //        c1SubBatch.Cols["dtDATE"].Caption = "Send Date";
                        //    }
                        //    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                        //    {
                        //        c1SubBatch.Cols["dtDATE"].Visible = true;
                        //        c1SubBatch.Cols["dtDATE"].Caption = "Printed Date";
                        //    }
                        //}

                        if (c1SubBatch.Cols.Contains("dtDATE"))
                        {
                            c1SubBatch.Cols["dtDATE"].Visible = false;
                        }

                        #endregion
                    }
                    else
                    {
                        #region "Header"
                        c1SubBatch.Clear(C1.Win.C1FlexGrid.ClearFlags.All);
                        //if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                        //{ c1SubBatch.Cols.Count = 10; }
                        //else
                        //{ c1SubBatch.Cols.Count = 9; }
                        c1SubBatch.Cols.Count = 9;
                        c1SubBatch.Cols[0].Caption = "Claim #";
                        c1SubBatch.Cols[1].Caption = "DOS";
                        c1SubBatch.Cols[2].Caption = "Charges";
                        c1SubBatch.Cols[3].Caption = "Code";
                        c1SubBatch.Cols[4].Caption = "Patient";
                        c1SubBatch.Cols[5].Caption = "Provider";
                        c1SubBatch.Cols[6].Caption = "Insurance ID";
                        c1SubBatch.Cols[7].Caption = "Insurance Plan";
                        c1SubBatch.Cols[8].Caption = "Billing Type";
                        #endregion

                        #region "Set Width"
                        _nWidth = 0;
                        _nWidth = Convert.ToInt32(c1SubBatch.Width);
                        c1SubBatch.Cols[0].Width = Convert.ToInt32(_nWidth * 0.06);
                        c1SubBatch.Cols[1].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1SubBatch.Cols[2].Width = Convert.ToInt32(_nWidth * 0.07);
                        c1SubBatch.Cols[3].Width = Convert.ToInt32(_nWidth * 0.10);
                        c1SubBatch.Cols[4].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1SubBatch.Cols[6].Width = Convert.ToInt32(_nWidth * 0.13);
                        c1SubBatch.Cols[6].Width = Convert.ToInt32(_nWidth * 0.10);
                        c1SubBatch.Cols[7].Width = Convert.ToInt32(_nWidth * 0.17);
                        c1SubBatch.Cols[8].Width = Convert.ToInt32(_nWidth * 0.09);

                        #endregion

                        #region "Paper Claim Sended & Printed Date"

                        //if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                        //{
                        //    c1SubBatch.Cols[9].Caption = "Send Date";
                        //    c1SubBatch.Cols[9].Width = Convert.ToInt32(_nWidth * 0.08);
                        //}
                        //else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                        //{
                        //    c1SubBatch.Cols[9].Caption = "Printed Date";
                        //    c1SubBatch.Cols[9].Width = Convert.ToInt32(_nWidth * 0.08);
                        //}

                        if (c1SubBatch.Cols.Contains("dtDATE"))
                        {
                            c1SubBatch.Cols["dtDATE"].Visible = false;
                        }

                        #endregion
                    }
                    #endregion

                    break;

                case "CLAIM_MANAGER_STATEMENTS":

                    #region
                    if (c1SubBatch.DataSource != null)
                    {                        
                        c1SubBatch.Cols["PatientStmtID"].Visible = false;
                        c1SubBatch.Cols["sAccountNo"].Visible = true;
                        c1SubBatch.Cols["Guarantor"].Visible = true;                        
                        c1SubBatch.Cols["sAddress"].Visible = true;
                        c1SubBatch.Cols["Patient"].Visible = true;
                        c1SubBatch.Cols["PatientDue"].Visible = true;
                        c1SubBatch.Cols["SortAcc"].Visible = false;

                        #region " Set Header "
                        c1SubBatch.Cols["sAccountNo"].Caption = "Acct.#";
                        c1SubBatch.Cols["Guarantor"].Caption = "Guarantor";                        
                        c1SubBatch.Cols["sAddress"].Caption = "Address";
                        c1SubBatch.Cols["Patient"].Caption = "Patient";                                                
                        c1SubBatch.Cols["PatientDue"].Caption = "Patient Due";
                        #endregion

                        #region "Set Width"

                        _nWidth = 0;
                        _nWidth = Convert.ToInt32(c1SubBatch.Width);
                        c1SubBatch.Cols["sAccountNo"].Width = Convert.ToInt32(_nWidth * 0.10);
                        c1SubBatch.Cols["Guarantor"].Width = Convert.ToInt32(_nWidth * 0.20);                        
                        c1SubBatch.Cols["sAddress"].Width = Convert.ToInt32(_nWidth * 0.35);
                        c1SubBatch.Cols["Patient"].Width = Convert.ToInt32(_nWidth * 0.20);                                                
                        c1SubBatch.Cols["PatientDue"].Width = Convert.ToInt32(_nWidth * 0.12);

                        #endregion
                                                
                        for (int i = 0; i < c1SubBatch.Rows.Count; i++)
                        {
                            c1SubBatch.Rows[i].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftBottom;
                        }
                        for (int i = 1; i < c1SubBatch.Cols.Count; i++)
                        {
                            c1SubBatch.Cols[i].AllowEditing = false;
                        }                        
                    }
                    else
                    {
                        #region "Header"
                        c1SubBatch.Clear(C1.Win.C1FlexGrid.ClearFlags.All);
                        c1SubBatch.Cols.Count = 5;
                        c1SubBatch.Cols[0].Caption = "Acct.#";
                        c1SubBatch.Cols[1].Caption = "Guarantor";                        
                        c1SubBatch.Cols[2].Caption = "Address";
                        c1SubBatch.Cols[3].Caption = "Patient";
                        c1SubBatch.Cols[4].Caption = "Patient Due";                        
                        #endregion

                        #region "Set Width"

                        _nWidth = 0;
                        _nWidth = Convert.ToInt32(c1SubBatch.Width);
                        c1SubBatch.Cols[0].Width = Convert.ToInt32(_nWidth * 0.10);
                        c1SubBatch.Cols[1].Width = Convert.ToInt32(_nWidth * 0.20);                        
                        c1SubBatch.Cols[2].Width = Convert.ToInt32(_nWidth * 0.35);
                        c1SubBatch.Cols[3].Width = Convert.ToInt32(_nWidth * 0.20);
                        c1SubBatch.Cols[4].Width = Convert.ToInt32(_nWidth * 0.12);                        

                        #endregion
                    }
                    #endregion

                    break;
                default:
                    break;
            }
        }

        private void EnableDisableControls(bool Enable)
        {
            tabManager.Enabled = Enable;
            switch (tabManager.SelectedTab.Tag.ToString())
            {
                case "Queue":

                    #region " Enable/Disable Buttons "
                    tsb_PrintNew1500.Enabled = Enable;// 12312013 sameer 
                    tsb_Modify.Enabled = Enable;
                    tsb_Print1500.Enabled = Enable;
                    tsb_UB04.Enabled = Enable;
                    tsb_Delete.Enabled = Enable;
                    tsb_Refresh.Enabled = Enable;
                    tsb_Select.Enabled = Enable;
                    tsb_Validate.Enabled = Enable;
                    tsb_Batch.Enabled = Enable;
                    tsb_ValidateNBatch.Enabled = Enable;
                    tsb_Close.Enabled = Enable;
                    c1QueuedClaims.Enabled = Enable;
                    tsb_Modify.Enabled = Enable;
                    tsb_Print1500.Enabled = Enable;
                    tsb_UB04.Enabled = Enable;
                    tsb_Reject.Enabled = Enable;
                    tsb_RejectBatch.Enabled = Enable;

                    #endregion " Enable/Disable Buttons "

                    break;
                case "Batch":

                    #region " Enable/Disable Buttons "
                    tsb_PrintNew1500.Enabled = Enable; // 12312013 sameer
                    tsb_Refresh.Enabled = Enable;
                    tsb_Select.Enabled = Enable;
                    tsb_Send.Enabled = Enable;
                    Tsb_BatchSend.Enabled = Enable;
                    tsb_Accept.Enabled = Enable;
                    tsb_Reject.Enabled = Enable;
                    tsb_Close.Enabled = Enable;
                    c1BatchGrid.Enabled = Enable;
                    lblFile.Enabled = true;
                    prgFileGeneration.Enabled = true;
                    tsb_Modify.Enabled = Enable;
                    tsb_Print1500.Enabled = Enable;
                    tsb_UB04.Enabled = Enable;
                    tsb_Reject.Enabled = Enable;
                    tsb_RejectBatch.Enabled = Enable;
                    tsb_Resend.Enabled = Enable;
                    tsb_BatchDetailReport.Enabled = Enable;

                    #endregion " Enable/Disable Buttons "

                    break;

                case "SentBatch":

                    #region " Enable/Disable Buttons "
                    tsb_PrintNew1500.Enabled = Enable;//12312013 sameer
                    tsb_Refresh.Enabled = Enable;
                    tsb_Select.Enabled = Enable;
                    tsb_Send.Enabled = Enable;
                    Tsb_BatchSend.Enabled = Enable;
                    tsb_Accept.Enabled = Enable;
                    tsb_Reject.Enabled = Enable;
                    tsb_Close.Enabled = Enable;
                    c1BatchGridSentBatch.Enabled = Enable;
                    lblFile_SentBatch.Enabled = true;
                    prgFileGeneration_SentBatch.Enabled = true;
                    tsb_Modify.Enabled = Enable;
                    tsb_Print1500.Enabled = Enable;
                    tsb_UB04.Enabled = Enable;
                    tsb_Reject.Enabled = Enable;
                    tsb_RejectBatch.Enabled = Enable;
                    tsb_Resend.Enabled = Enable;
                    tsb_BatchDetailReport.Enabled = Enable;

                    #endregion " Enable/Disable Buttons "

                    break;
            }

        }

        #endregion

        #region " Search TextBox Events "

        private Int64 SearchClaimInBatch(Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            object oTransactionID = null;
            object oBatchID = null;
            Int64 nBatchID = 0;
            try
            {
                oDB.Connect(false);
                _strSQL = "SELECT nTransactionID FROM BL_Transaction_MST WITH(NOLOCK) WHERE nClaimNo = " + ClaimNo + "";
                oTransactionID = oDB.ExecuteScalar_Query(_strSQL);

                if (oTransactionID != null && Convert.ToString(oTransactionID) != "")
                {
                    _strSQL = "SELECT nBatchID FROM BL_Transaction_Status WITH(NOLOCK) WHERE nBatchType = 2 AND nTransactionID = " + Convert.ToInt64(oTransactionID) + "";
                    oBatchID = oDB.ExecuteScalar_Query(_strSQL);
                }

                if (oBatchID != null && Convert.ToString(oBatchID) != "")
                {
                    nBatchID = Convert.ToInt64(oBatchID);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return nBatchID;
        }

        #endregion " Search TextBox Events "

        #endregion " Tree View Event "

        #region "Fill Claims Methods"

        #region "Fill Trees"

        public DataTable GetBatchTree(string BatchType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtBatch = null;

            try
            {
                string _sqlQuery = "";
                if (BatchType == "PRIMARY")
                {
                    _sqlQuery = " SELECT     BL_Transaction_Batch.sBatchName, BL_Transaction_Batch.nBatchID,  BL_Transaction_Batch.nBatchDate,nBatchNo  FROM  " +
                               " BL_Transaction_Batch with (NOLOCK) left outer JOIN   BL_Transaction_Batch_DTL with (NOLOCK) ON BL_Transaction_Batch.nBatchID = BL_Transaction_Batch_DTL.nBatchID " +
                               " WHERE  (BL_Transaction_Batch_DTL.nTransactionID IN    (SELECT   nTransactionID FROM BL_Transaction_Claim_MST AS BL_Transaction_Claim_MST_1 with (NOLOCK) " +
                               " WHERE  (nStatus = 3   OR nStatus=16 OR nStatus=17 OR nStatus=20 OR nStatus=21 OR nStatus=22) " +
                        //"  and Isnull(nResponsibilityType,1)!= 1   " +
                               "  and IsNull(bIsVoid,0)=0  AND nResponsibilityNo = 1  and (isnull(BL_Transaction_Claim_MST_1.bisHold,0) <> 1 or   convert(varchar(10),  " +
                               " isnull(rtrim(ltrim(BL_Transaction_Claim_MST_1.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) = '117' or   convert(varchar(10),isnull(rtrim(ltrim(BL_Transaction_Claim_MST_1.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) = '116' or  convert(varchar(10), " +
                               " isnull(rtrim(ltrim(BL_Transaction_Claim_MST_1.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) = '120' ) " +
                        //" and BL_Transaction_Claim_MST_1.nContactID Not in  "+
                        //" (select BL_Insurance_PlanHold.nContactID from BL_Insurance_PlanHold inner join  BL_Transaction_Claim_MST on BL_Insurance_PlanHold.nContactID=BL_Transaction_Claim_MST.nContactID where isnull(BL_Insurance_PlanHold.bIsHold,0) =1 and ( "+
                        //" Convert(varchar(10),isnull(rtrim(ltrim(BL_Insurance_PlanHold.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) != '117' and "+
                        //" convert(varchar(10),isnull(rtrim(ltrim(BL_Insurance_PlanHold.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) != '116' and "+
                        //" convert(varchar(10),isnull(rtrim(ltrim(BL_Insurance_PlanHold.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) != '120')) "+
                               " ))   " +
                               " and UPPER(BL_Transaction_Batch.sBatchName)!='SELF'    GROUP BY BL_Transaction_Batch.sBatchName, " +
                               " BL_Transaction_Batch.nBatchID, BL_Transaction_Batch.nBatchDate,nBatchNo  ORDER BY nBatchNo desc ";
                }
                else if (BatchType == "SECONDARY")
                {
                    _sqlQuery = " SELECT     BL_Transaction_Batch.sBatchName, BL_Transaction_Batch.nBatchID,  BL_Transaction_Batch.nBatchDate,nBatchNo  FROM  " +
                                " BL_Transaction_Batch with (NOLOCK) left outer JOIN   BL_Transaction_Batch_DTL ON BL_Transaction_Batch.nBatchID = BL_Transaction_Batch_DTL.nBatchID " +
                                " WHERE  (BL_Transaction_Batch_DTL.nTransactionID IN    (SELECT   nTransactionID FROM BL_Transaction_Claim_MST AS BL_Transaction_Claim_MST_1 with (NOLOCK) " +
                                " WHERE  (nStatus = 3   OR nStatus=16 OR nStatus=17 OR nStatus=20 OR nStatus=21 OR nStatus=22) " +
                        //and Isnull(nResponsibilityType,1)!= 1   " +
                                "  and IsNull(bIsVoid,0)=0  AND nResponsibilityNo > 1  and (isnull(BL_Transaction_Claim_MST_1.bisHold,0) <> 1 or   convert(varchar(10),  " +
                                " isnull(rtrim(ltrim(BL_Transaction_Claim_MST_1.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) = '117' or   convert(varchar(10),isnull(rtrim(ltrim(BL_Transaction_Claim_MST_1.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) = '116' or  convert(varchar(10), " +
                                " isnull(rtrim(ltrim(BL_Transaction_Claim_MST_1.bisHold)),0))+ convert(varchar(10),rtrim(ltrim(nStatus))) = '120' ) " +
                                " ))   " +
                                " and UPPER(BL_Transaction_Batch.sBatchName)!='SELF'    GROUP BY BL_Transaction_Batch.sBatchName, " +
                                " BL_Transaction_Batch.nBatchID, BL_Transaction_Batch.nBatchDate,nBatchNo  ORDER BY nBatchNo desc ";
                }
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out dtBatch);

            }

            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }

            }
            return dtBatch;
        }

        public DataTable GetBatchTree(int BatchType, bool IsSentBatchFetch = false)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            DataTable _dtResult = null;

            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nResponsibilityNo", BatchType, ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@bIsSentBatchFetch", IsSentBatchFetch, ParameterDirection.Input, SqlDbType.Bit);
                oDB.Connect(false);
                oDB.Retrive("BL_Select_Batches", oParameters, out  _dtResult);
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) oDB.Dispose();
                if (oParameters != null) oParameters.Dispose();

            }
            return _dtResult;

        }

        public Boolean FillBatchTree(TreeView oTree, TransactionStatus oStatus, bool SentBatchOnly)
        {
            DataTable dtBatch = null;
            int _BatchType = 0;
            // TreeNode oNode = null;
            oTree.BeginUpdate();
            Boolean _result = false;

            try
            {
                _isBatchTreeLoading = true;
                //oTree.Nodes.Clear();


                if (oStatus == TransactionStatus.Batch && SentBatchOnly == false)
                {
                    if (rbPrimaryClaimsBatch.Checked == true)
                        _BatchType = 1;
                    else
                        _BatchType = 2;

                    dtBatch = GetBatchTree(_BatchType, false);

                    c1trvBatch.BeginUpdate();
                    c1trvBatch.DataSource = dtBatch.DefaultView;
                    c1trvBatch.RowSel = -1;
                    DesignBatchTreeGrid(c1trvBatch);
                    c1trvBatch.EndUpdate();


                }
                else if (oStatus == TransactionStatus.Batch && SentBatchOnly == true)
                {
                    if (rbPrimaryClaimsBatch_SentBatch.Checked == true)
                        _BatchType = 1;
                    else
                        _BatchType = 2;

                    dtBatch = GetBatchTree(_BatchType, true);
                    c1trvBatch_SentBatch.BeginUpdate();
                    c1trvBatch_SentBatch.DataSource = dtBatch.DefaultView;
                    c1trvBatch_SentBatch.RowSel = -1;
                    DesignBatchTreeGrid(c1trvBatch_SentBatch);
                    c1trvBatch_SentBatch.EndUpdate();
                }


                #region "Tree View fill with Batch Node "
                //if (dtBatch != null && dtBatch.Rows.Count > 0)
                //{
                //    Int64 _BatchId = 0;
                //    string _BatchName = "";


                //    for (int i = 0; i < dtBatch.Rows.Count; i++)
                //    {
                //        _BatchId = Convert.ToInt64(dtBatch.Rows[i]["nBatchID"]);
                //        _BatchName = Convert.ToString(dtBatch.Rows[i]["sBatchName"]);

                //        oNode = new TreeNode();
                //        oNode.Text = _BatchName;
                //        oNode.Tag = _BatchId;
                //        oNode.Name = Convert.ToString(dtBatch.Rows[i]["nClaimType"]);
                //        oNode.ImageIndex = 0;
                //        oNode.SelectedImageIndex = 0;
                //        oTree.Nodes.Add(oNode);
                //        oNode = null;
                //        _BatchId = 0;
                //        _BatchName = "";
                //        _result = true;
                //    }
                //    if (dtBatch != null && dtBatch.Rows.Count > 74)
                //    {
                //        oNode = null;
                //        oNode = new TreeNode();
                //        oNode.Text = "";
                //        oNode.Tag = null;
                //        oNode.ImageIndex = 11;
                //        oNode.SelectedImageIndex = 11;
                //        oTree.Nodes.Add(oNode);
                //    }

                //}
                #endregion "Tree View fill with Batch Node "

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                //_isBatchTreeLoading = false;
                //if (oTree.Nodes.Count > 0)
                //{
                //    if (_nPrevBatchId != 0 && _nPrevBatchId < oTree.Nodes.Count)
                //        oTree.SelectedNode = oTree.Nodes[_nPrevBatchId];
                //    else
                //        oTree.SelectedNode = oTree.Nodes[0];
                //}
                //else
                //{
                //    c1BatchGrid.DataSource = null;
                //    c1BatchGrid.Rows.Count = 1;
                //    c1BatchGrid.Cols.Count = 1;
                //}
                //oTree.EndUpdate();

                _isBatchTreeLoading = false;
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.Rows.Count > 0)
                    {
                        if (c1trvBatch.Rows.Count > _nPrevBatchId && _nPrevBatchId >= 0)
                        { c1trvBatch.RowSel = _nPrevBatchId; }
                        else
                        { c1trvBatch.RowSel = 0; }

                        c1trvBatch.Select(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index, true);
                    }
                    else
                    {
                       // c1BatchGrid.Clear();
                        c1BatchGrid.DataSource = null;
                        c1BatchGrid.Rows.Count = 1;
                        c1BatchGrid.Cols.Count = 1;
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0)
                    {
                        if (c1trvBatch_SentBatch.Rows.Count > _nPrevSentBatchId && _nPrevSentBatchId >= 0)
                        { c1trvBatch_SentBatch.RowSel = _nPrevSentBatchId; }
                        else
                        { c1trvBatch_SentBatch.RowSel = 0; }

                        c1trvBatch_SentBatch.Select(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index, true);
                    }
                    else
                    {
                       // c1BatchGridSentBatch.Clear();
                        c1BatchGridSentBatch.DataSource = null;
                        c1BatchGridSentBatch.Rows.Count = 1;
                        c1BatchGridSentBatch.Cols.Count = 1;
                    }
                }
            }
            return _result;

        }
        private static Font webDings = null;
        private void DesignBatchTreeGrid(C1FlexGrid c1GridObj)
        {
            try
            {

                c1GridObj.AllowEditing = false;


                c1GridObj.Cols["sBatchName"].DataType = typeof(System.String);
                c1GridObj.Cols["nBatchID"].DataType = typeof(System.Int64);
                c1GridObj.Cols["nBatchDate"].DataType = typeof(System.Int64);
                c1GridObj.Cols["nBatchNo"].DataType = typeof(System.String);
                c1GridObj.Cols["nClaimType"].DataType = typeof(System.Int16);
                c1GridObj.Cols["BillingMethodID"].DataType = typeof(System.Int32);

                c1GridObj.Cols["sBatchName"].Caption = "";

                c1GridObj.Cols["nBatchID"].Visible = false;
                c1GridObj.Cols["nBatchDate"].Visible = false;
                c1GridObj.Cols["nBatchNo"].Visible = false;
                c1GridObj.Cols["nClaimType"].Visible = false;
                c1GridObj.Cols["BillingMethodID"].Visible = false;
                c1GridObj.Cols["sCellImg"].Width = 20;




                if (c1GridObj != null && c1GridObj.Rows.Count > 0)
                {
                    CellStyle csStyleImg;// = c1GridObj.Styles.Add("CellImage");
                    try
                    {
                        if (c1GridObj.Styles.Contains("CellImage"))
                        {
                            csStyleImg = c1GridObj.Styles["CellImage"];
                        }
                        else
                        {
                            csStyleImg = c1GridObj.Styles.Add("CellImage");
                            if (webDings == null)
                            {   
                                FontFamily webDingsFamily = new FontFamily("Webdings");
                                webDings = new Font(webDingsFamily, 12);
                                webDingsFamily.Dispose();
                                webDingsFamily = null;
                            }
                            csStyleImg.Font = webDings;
                            csStyleImg.DataType = typeof(System.String);
                            csStyleImg.ForeColor = Color.FromArgb(51, 204, 255);
                        }

                    }
                    catch
                    {
                        csStyleImg = c1GridObj.Styles.Add("CellImage");
                        if (webDings == null)
                        {
                            FontFamily webDingsFamily = new FontFamily("Webdings");
                            webDings = new Font(webDingsFamily, 12);
                            webDingsFamily.Dispose();
                            webDingsFamily = null;
                        }
                        csStyleImg.Font = webDings;
                        csStyleImg.DataType = typeof(System.String);
                        csStyleImg.ForeColor = Color.FromArgb(51, 204, 255);
                    }


                    CellRange cRange = c1GridObj.GetCellRange(0, c1GridObj.Cols["sCellImg"].Index, c1GridObj.Rows.Count - 1, c1GridObj.Cols["sCellImg"].Index);
                    cRange.Style = csStyleImg;
                }


            }
            catch //(Exception ex)
            {
                throw;
            }
            finally
            {

            }

        }

        #endregion

        #region "Fill Claims Details"

        public DataTable GetTransactions(Int64 BatchId, string StatusIds, Int64 ClinicId)
        {
            //..Method not in use
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            DataTable _dtTransactions = null;

            try
            {
                oDB.Connect(false);
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nBatchID", BatchId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sStatusIds", StatusIds, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_Batch_SelectTransactions", oParameters, out _dtTransactions);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return _dtTransactions;
        }



        private void FillQueuedClaims()
        {
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            DataTable dtTransactions = null;
            DataTable dtTemp = null;

            try
            {
                if (c1QueuedClaims != null)
                {
                    //c1QueuedClaims.Clear();
                    c1QueuedClaims.ScrollBars = ScrollBars.None;
                    c1QueuedClaims.DataSource = null;
                }

                dtTransactions = ogloClaimManager.GetTransactions(TransactionStatus.Queue);
                dtTemp = ogloClaimManager.GetTransactions(TransactionStatus.ReQueue);
                if (dtTemp != null && dtTemp.Rows.Count > 0)
                {
                    dtTransactions.Merge(dtTemp);
                    dtTransactions.AcceptChanges();
                }

                if (dtTransactions != null)
                {
                    //dtTransactions.Columns.Add("Status");
                    //dtTransactions.AcceptChanges();
                    if (dtTransactions.Rows.Count <= 0)
                    {
                        _dvCharges.AddNew();
                        c1QueuedClaims.Rows.Count = 1;
                        c1QueuedClaims.Rows.Fixed = 1;
                    }
                    _dvCharges = dtTransactions.DefaultView;
                    c1QueuedClaims.DataSource = _dvCharges;

                    #region " Set Status & Status Icon "

                    //for (int k = 1; k < c1QueuedClaims.Rows.Count; k++)
                    //{
                    //    if (c1QueuedClaims.GetData(k, c1QueuedClaims.Cols["TransactionStatusId"].Index) != null
                    //        && Convert.ToString(c1QueuedClaims.GetData(k, c1QueuedClaims.Cols["TransactionStatusId"].Index)) != "")
                    //    {
                    //        TransactionStatus oStatus = TransactionStatus.None;
                    //        oStatus = ((TransactionStatus)Convert.ToInt32(c1QueuedClaims.GetData(k, c1QueuedClaims.Cols["TransactionStatusId"].Index)));
                    //        switch (oStatus)
                    //        {
                    //            case TransactionStatus.None:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.None);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, null);
                    //                break;
                    //            case TransactionStatus.Transacted:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Transacted);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Transacted);
                    //                break;
                    //            case TransactionStatus.Queue:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Queue);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Queue);
                    //                break;
                    //            case TransactionStatus.Batch:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Batch);
                    //                //c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Batch);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Batch_Processing);
                    //                break;
                    //            case TransactionStatus.Send:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Send);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Send);
                    //                break;
                    //            case TransactionStatus.Rejected:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Rejected);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Rejected);
                    //                break;
                    //            case TransactionStatus.Accepted:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Accepted);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Accepted);
                    //                break;
                    //            case TransactionStatus.ReQueue:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.ReQueue);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReQueue);
                    //                break;
                    //            case TransactionStatus.ReBatch:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.ReBatch);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReBatch);
                    //                break;
                    //            case TransactionStatus.ReSend:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.ReSend);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReSend);
                    //                break;
                    //            case TransactionStatus.FullyPaid:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.FullyPaid);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Finish01);
                    //                break;
                    //            case TransactionStatus.PartialPaid:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.PartialPaid);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ParticalPaid); 
                    //                break;
                    //            case TransactionStatus.Hold:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Hold);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Hold);
                    //                break;
                    //            case TransactionStatus.Challenge:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Challenge);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Challenge);
                    //                break;
                    //            case TransactionStatus.Alert:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Alert);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Alert);
                    //                break;
                    //            case TransactionStatus.Pending:
                    //                c1QueuedClaims.SetData(k, c1QueuedClaims.Cols["Status"].Index, TransactionStatus.Pending);
                    //                c1QueuedClaims.SetCellImage(k, c1QueuedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Alert);
                    //                break;
                    //        }
                    //    }
                    //}

                    #endregion " Set Status & Status Icon "

                    lblQueueSearch.Text = c1QueuedClaims.Cols["Claim"].Name + " : ";
                    lblQueueSearch.Tag = c1QueuedClaims.Cols["Claim"].Index;
                    c1QueuedClaims.Cols["Select"].DataType = typeof(System.Boolean);

                    #region " Show Hide Column "

                    c1QueuedClaims.Cols["Select"].Visible = true;
                    c1QueuedClaims.Cols["StsIcon"].Visible = false;
                    c1QueuedClaims.Cols["Claim"].Visible = true;
                    c1QueuedClaims.Cols["ClaimNo"].Visible = false;
                    c1QueuedClaims.Cols["nTransactionID"].Visible = false;
                    c1QueuedClaims.Cols["nTransactionDate"].Visible = false;
                    c1QueuedClaims.Cols["Date"].Visible = true;
                    c1QueuedClaims.Cols["nPatientID"].Visible = false;
                    c1QueuedClaims.Cols["Code"].Visible = true;
                    c1QueuedClaims.Cols["PatientName"].Visible = false;
                    c1QueuedClaims.Cols["FirstName"].Visible = true;
                    c1QueuedClaims.Cols["MI"].Visible = true;
                    c1QueuedClaims.Cols["LastName"].Visible = true;
                    c1QueuedClaims.Cols["nPatientSSN"].Visible = false;
                    c1QueuedClaims.Cols["nTransactionProviderID"].Visible = false;
                    c1QueuedClaims.Cols["ProviderName"].Visible = true;
                    c1QueuedClaims.Cols["ProviderFName"].Visible = false;
                    c1QueuedClaims.Cols["ProviderMName"].Visible = false;
                    c1QueuedClaims.Cols["ProviderLName"].Visible = false;
                    c1QueuedClaims.Cols["sFacilityCode"].Visible = false;
                    c1QueuedClaims.Cols["Facility"].Visible = true;
                    c1QueuedClaims.Cols["Facility"].Visible = true;
                    c1QueuedClaims.Cols["PatientInsuranceID"].Visible = false;
                    c1QueuedClaims.Cols["nSendCounter"].Visible = false;
                    c1QueuedClaims.Cols["nSendToRejection"].Visible = false;
                    c1QueuedClaims.Cols["Status"].Visible = true;
                    c1QueuedClaims.Cols["nLastStatusId"].Visible = false;
                    c1QueuedClaims.Cols["nSendToInsuranceID"].Visible = false;
                    c1QueuedClaims.Cols["nClaimSendType"].Visible = false;

                    #endregion

                    #region " Set Width "

                    int _nWidth = 0;

                    _nWidth = c1QueuedClaims.Width - 10; //c1QueuedClaims.Width - 4;
                    _nWidth = 733;

                    c1QueuedClaims.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.06);
                    c1QueuedClaims.Cols["StsIcon"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.08);
                    c1QueuedClaims.Cols["ClaimNo"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nTransactionID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nTransactionDate"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.13);
                    c1QueuedClaims.Cols["nPatientID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["Code"].Width = Convert.ToInt32(_nWidth * 0.2);
                    c1QueuedClaims.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["FirstName"].Width = Convert.ToInt32(_nWidth * 0.3);
                    c1QueuedClaims.Cols["MI"].Width = Convert.ToInt32(_nWidth * 0.05);
                    c1QueuedClaims.Cols["LastName"].Width = Convert.ToInt32(_nWidth * 0.3);
                    c1QueuedClaims.Cols["nPatientSSN"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nTransactionProviderID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.3);
                    c1QueuedClaims.Cols["ProviderFName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["ProviderMName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["ProviderLName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["sFacilityCode"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["Facility"].Width = Convert.ToInt32(_nWidth * 0.16);
                    c1QueuedClaims.Cols["TransactionStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nSendCounter"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nSendToRejection"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.1);
                    c1QueuedClaims.Cols["nLastStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nSendToInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["nClaimSendType"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["PatientInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1QueuedClaims.Cols["InsuranceName"].Width = Convert.ToInt32(_nWidth * 0.30);
                    c1QueuedClaims.Cols["InsuranceFlag"].Width = Convert.ToInt32(_nWidth * 0.00);

                    #endregion

                    c1QueuedClaims.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                    c1QueuedClaims.AllowDragging = C1.Win.C1FlexGrid.AllowDraggingEnum.None;
                    c1QueuedClaims.AutoResize = false;
                    c1QueuedClaims.Cols["Select"].AllowEditing = true;
                    c1QueuedClaims.SetData(0, c1QueuedClaims.Cols["StsIcon"].Index, "");

                    for (int i = 1; i < c1QueuedClaims.Cols.Count; i++)
                    {
                        c1QueuedClaims.Cols[i].AllowEditing = false;
                    }
                }
                else
                {
                    lblQueueSearch.Text = "Claim : ";
                    lblQueueSearch.Tag = null;

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (c1QueuedClaims != null && c1QueuedClaims.ScrollBars == ScrollBars.None) { c1QueuedClaims.ScrollBars = ScrollBars.Both; }
                if (c1QueuedClaims != null && c1QueuedClaims.ScrollBars == ScrollBars.None) { c1QueuedClaims.ScrollBars = ScrollBars.Both; }
                if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            }
        }

        private void FillBatchClaims(Int64 Batchid)
        {
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            DataTable dtBatchTransactions = null;
            //   DataTable dtTemp = null;
            try
            {

                if (c1BatchGrid != null)
                {
                   // c1BatchGrid.Clear();
                    c1BatchGrid.ScrollBars = ScrollBars.None;
                    c1BatchGrid.DataSource = null;
                }


                if (Batchid > 0)
                {
                    dtBatchTransactions = ogloClaimManager.GetBatchTransactions(Batchid);
                }
                else
                {
                    dtBatchTransactions = ogloClaimManager.GetAllBatchTransactions();
                }


                if (dtBatchTransactions != null)
                {
                    if (dtBatchTransactions.Rows.Count <= 0)
                    {
                        //_dvCharges.AddNew();
                        _dvCharges = dtBatchTransactions.DefaultView;
                        c1BatchGrid.Rows.Count = 1;
                        c1BatchGrid.Rows.Fixed = 1;
                    }

                    _dvCharges = dtBatchTransactions.DefaultView;
                    c1BatchGrid.DataSource = _dvCharges;

                    c1BatchGrid.Cols["Select"].DataType = typeof(System.Boolean);
                    c1BatchGrid.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                    c1BatchGrid.AllowDragging = C1.Win.C1FlexGrid.AllowDraggingEnum.None;
                    c1BatchGrid.AutoResize = false;
                    c1BatchGrid.SetData(0, c1BatchGrid.Cols["StsIcon"].Index, "");
                    c1BatchGrid.Cols["Select"].AllowEditing = true;

                    for (int i = 1; i < c1BatchGrid.Cols.Count; i++)
                    { c1BatchGrid.Cols[i].AllowEditing = false; }

                    if (c1BatchGrid.Rows.Count > 1)
                    {
                        C1.Win.C1FlexGrid.CellRange oRange = c1BatchGrid.GetCellRange(1, c1BatchGrid.Cols["Select"].Index, c1BatchGrid.Rows.Count - 1, c1BatchGrid.Cols["Select"].Index);
                        oRange.Data = true;
                    }

                    #region " Set Status & Status Icon "

                    #endregion

                    lblSearhBatch.Text = c1BatchGrid.Cols["Claim"].Name + " : ";
                    lblSearhBatch.Tag = c1BatchGrid.Cols["Claim"].Index;


                    #region " Show Hide Column "

                    c1BatchGrid.Cols["Select"].Visible = false;
                    c1BatchGrid.Cols["StsIcon"].Visible = false;
                    c1BatchGrid.Cols["Claim"].Visible = true;
                    c1BatchGrid.Cols["ClaimNo"].Visible = false;
                    c1BatchGrid.Cols["nTransactionID"].Visible = false;
                    c1BatchGrid.Cols["nTransactionDate"].Visible = false;
                    c1BatchGrid.Cols["Date"].Visible = true;
                    c1BatchGrid.Cols["nPatientID"].Visible = false;
                    c1BatchGrid.Cols["Code"].Visible = true;
                    c1BatchGrid.Cols["PatientName"].Visible = false;
                    c1BatchGrid.Cols["FirstName"].Visible = true;
                    c1BatchGrid.Cols["MI"].Visible = true;
                    c1BatchGrid.Cols["LastName"].Visible = true;
                    c1BatchGrid.Cols["nPatientSSN"].Visible = false;
                    c1BatchGrid.Cols["nTransactionProviderID"].Visible = false;
                    c1BatchGrid.Cols["ProviderName"].Visible = true;
                    c1BatchGrid.Cols["ProviderFName"].Visible = false;
                    c1BatchGrid.Cols["ProviderMName"].Visible = false;
                    c1BatchGrid.Cols["ProviderLName"].Visible = false;
                    c1BatchGrid.Cols["sFacilityCode"].Visible = false;
                    c1BatchGrid.Cols["Facility"].Visible = true;
                    c1BatchGrid.Cols["PatientInsuranceID"].Visible = false;
                    c1BatchGrid.Cols["TransactionStatusId"].Visible = false;
                    c1BatchGrid.Cols["nSendCounter"].Visible = false;
                    c1BatchGrid.Cols["nSendToRejection"].Visible = false;
                    c1BatchGrid.Cols["Status"].Visible = true;
                    c1BatchGrid.Cols["nLastStatusId"].Visible = false;
                    c1BatchGrid.Cols["nSendToInsuranceID"].Visible = false;
                    c1BatchGrid.Cols["nClaimSendType"].Visible = false;

                    #endregion

                    #region " Set Width "

                    int _nWidth = 0;

                    _nWidth = c1BatchGrid.Width - 10; //c1BatchGrid.Width - 4;
                    _nWidth = 733;

                    c1BatchGrid.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.06);
                    c1BatchGrid.Cols["StsIcon"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.08);
                    c1BatchGrid.Cols["ClaimNo"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nTransactionID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nTransactionDate"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.13);
                    c1BatchGrid.Cols["nPatientID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["Code"].Width = Convert.ToInt32(_nWidth * 0.2);
                    c1BatchGrid.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["FirstName"].Width = Convert.ToInt32(_nWidth * 0.3);
                    c1BatchGrid.Cols["MI"].Width = Convert.ToInt32(_nWidth * 0.05);
                    c1BatchGrid.Cols["LastName"].Width = Convert.ToInt32(_nWidth * 0.3);
                    c1BatchGrid.Cols["nPatientSSN"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nTransactionProviderID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.3);
                    c1BatchGrid.Cols["ProviderFName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["ProviderMName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["ProviderLName"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["sFacilityCode"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["Facility"].Width = Convert.ToInt32(_nWidth * 0.16);
                    c1BatchGrid.Cols["TransactionStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nSendCounter"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nSendToRejection"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.1);
                    c1BatchGrid.Cols["nLastStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nSendToInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["nClaimSendType"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["PatientInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
                    c1BatchGrid.Cols["InsuranceName"].Width = Convert.ToInt32(_nWidth * 0.30);
                    c1BatchGrid.Cols["InsuranceFlag"].Width = Convert.ToInt32(_nWidth * 0.00);

                    #endregion


                    //c1BatchGrid.Cols["Select"].Selected = true;
                }
                else
                {
                    lblSearhBatch.Text = "Claim : ";
                    lblSearhBatch.Tag = null;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (c1BatchGrid != null && c1BatchGrid.ScrollBars == ScrollBars.None) { c1BatchGrid.ScrollBars = ScrollBars.Both; }
                if (c1BatchGrid != null && c1BatchGrid.ScrollBars == ScrollBars.None) { c1BatchGrid.ScrollBars = ScrollBars.Both; }
                if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            }
        }

        #region Commented Code

        private void FillAcceptedClaims(Int64 Batchid)
        {
            /////////////////gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            ////gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            ////DataTable dtAcceptedTransactions = null;

            ////c1AcceptedClaims.Hide();

            ////try
            ////{

            ////    if (c1AcceptedClaims != null)
            ////    {
            ////        c1AcceptedClaims.ScrollBars = ScrollBars.None;
            ////        c1AcceptedClaims.DataSource = null;
            ////    }

            ////    if (Batchid > 0)
            ////    {
            ////        dtAcceptedTransactions = ogloClaimManager.GetTransactions(Batchid, TransactionStatus.Accepted);
            ////    }
            ////    else
            ////    {
            ////        dtAcceptedTransactions = ogloClaimManager.GetTransactions(TransactionStatus.Accepted);
            ////    }

            ////    if (dtAcceptedTransactions != null)
            ////    {
            ////        //dtAcceptedTransactions.Columns.Add("Status");
            ////        //dtAcceptedTransactions.AcceptChanges();

            ////        if (dtAcceptedTransactions.Rows.Count <= 0)
            ////        {
            ////            _dvCharges.AddNew();
            ////            c1AcceptedClaims.Rows.Count = 1;
            ////            c1AcceptedClaims.Rows.Fixed = 1;
            ////        }

            ////        _dvCharges = dtAcceptedTransactions.DefaultView;
            ////        c1AcceptedClaims.DataSource = _dvCharges;

            ////        #region " Set Status & Status Icon "

            ////        //for (int k = 1; k < c1AcceptedClaims.Rows.Count; k++)
            ////        //{
            ////        //    if (c1AcceptedClaims.GetData(k, c1AcceptedClaims.Cols["TransactionStatusId"].Index) != null
            ////        //        && Convert.ToString(c1AcceptedClaims.GetData(k, c1AcceptedClaims.Cols["TransactionStatusId"].Index)) != "")
            ////        //    {
            ////        //        TransactionStatus oStatus = TransactionStatus.None;
            ////        //        oStatus = ((TransactionStatus)Convert.ToInt32(c1AcceptedClaims.GetData(k, c1AcceptedClaims.Cols["TransactionStatusId"].Index)));
            ////        //        switch (oStatus)
            ////        //        {
            ////        //            case TransactionStatus.None:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.None);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, null);
            ////        //                break;
            ////        //            case TransactionStatus.Transacted:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Transacted);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Transacted);
            ////        //                break;
            ////        //            case TransactionStatus.Queue:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Queue);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Queue);
            ////        //                break;
            ////        //            case TransactionStatus.Batch:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Batch);
            ////        //                //c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Batch);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Batch_Processing);
            ////        //                break;
            ////        //            case TransactionStatus.Send:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Send);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Send);
            ////        //                break;
            ////        //            case TransactionStatus.Rejected:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Rejected);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Rejected);
            ////        //                break;
            ////        //            case TransactionStatus.Accepted:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Accepted);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Accepted);
            ////        //                break;
            ////        //            case TransactionStatus.ReQueue:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.ReQueue);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReQueue);
            ////        //                break;
            ////        //            case TransactionStatus.ReBatch:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.ReBatch);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReBatch);
            ////        //                break;
            ////        //            case TransactionStatus.ReSend:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.ReSend);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReSend);
            ////        //                break;
            ////        //            case TransactionStatus.FullyPaid:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.FullyPaid);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Finish01);
            ////        //                break;
            ////        //            case TransactionStatus.PartialPaid:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.PartialPaid);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ParticalPaid);
            ////        //                break;
            ////        //            case TransactionStatus.Hold:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Hold);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Hold);
            ////        //                break;
            ////        //            case TransactionStatus.Challenge:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Challenge);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Challenge);
            ////        //                break;
            ////        //            case TransactionStatus.Alert:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Alert);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Alert);
            ////        //                break;
            ////        //            case TransactionStatus.Pending:
            ////        //                c1AcceptedClaims.SetData(k, c1AcceptedClaims.Cols["Status"].Index, TransactionStatus.Pending);
            ////        //                c1AcceptedClaims.SetCellImage(k, c1AcceptedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Pending);
            ////        //                break;
            ////        //        }
            ////        //    }
            ////        //}

            ////        #endregion

            ////        lblSearchAccepted.Text = c1AcceptedClaims.Cols["Claim"].Name + " : ";
            ////        lblSearchAccepted.Tag = c1AcceptedClaims.Cols["Claim"].Index;
            ////        c1AcceptedClaims.Cols["Select"].DataType = typeof(System.Boolean);

            ////        #region " Show Hide Column "

            ////        c1AcceptedClaims.Cols["Select"].Visible = true;
            ////        c1AcceptedClaims.Cols["StsIcon"].Visible = false;
            ////        c1AcceptedClaims.Cols["Claim"].Visible = true;
            ////        c1AcceptedClaims.Cols["ClaimNo"].Visible = false;
            ////        c1AcceptedClaims.Cols["nTransactionID"].Visible = false;
            ////        c1AcceptedClaims.Cols["nTransactionDate"].Visible = false;
            ////        c1AcceptedClaims.Cols["Date"].Visible = true;
            ////        c1AcceptedClaims.Cols["nPatientID"].Visible = false;
            ////        c1AcceptedClaims.Cols["Code"].Visible = true;
            ////        c1AcceptedClaims.Cols["PatientName"].Visible = false;
            ////        c1AcceptedClaims.Cols["FirstName"].Visible = true;
            ////        c1AcceptedClaims.Cols["MI"].Visible = true;
            ////        c1AcceptedClaims.Cols["LastName"].Visible = true;
            ////        c1AcceptedClaims.Cols["nPatientSSN"].Visible = false;
            ////        c1AcceptedClaims.Cols["nTransactionProviderID"].Visible = false;
            ////        c1AcceptedClaims.Cols["ProviderName"].Visible = true;
            ////        c1AcceptedClaims.Cols["ProviderFName"].Visible = false;
            ////        c1AcceptedClaims.Cols["ProviderMName"].Visible = false;
            ////        c1AcceptedClaims.Cols["ProviderLName"].Visible = false;
            ////        c1AcceptedClaims.Cols["sFacilityCode"].Visible = false;
            ////        c1AcceptedClaims.Cols["Facility"].Visible = true;
            ////        c1AcceptedClaims.Cols["PatientInsuranceID"].Visible = false;
            ////        c1AcceptedClaims.Cols["InsuranceFlag"].Visible = false;
            ////        c1AcceptedClaims.Cols["TransactionStatusId"].Visible = false;
            ////        c1AcceptedClaims.Cols["nSendCounter"].Visible = false;
            ////        c1AcceptedClaims.Cols["nSendToRejection"].Visible = false;
            ////        c1AcceptedClaims.Cols["Status"].Visible = true;
            ////        c1AcceptedClaims.Cols["nLastStatusId"].Visible = false;
            ////        c1AcceptedClaims.Cols["nSendToInsuranceID"].Visible = false;
            ////        c1AcceptedClaims.Cols["nClaimSendType"].Visible = false;
            ////        // c1AcceptedClaims.Cols["nBatchID"].Visible = false;


            ////        #endregion

            ////        #region " Set Width "

            ////        int _nWidth = 0;

            ////        _nWidth = c1AcceptedClaims.Width - 10; //c1AcceptedClaims.Width - 4;
            ////        _nWidth = 733;

            ////        c1AcceptedClaims.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.06);
            ////        c1AcceptedClaims.Cols["StsIcon"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.08);
            ////        c1AcceptedClaims.Cols["ClaimNo"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nTransactionID"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nTransactionDate"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.13);
            ////        c1AcceptedClaims.Cols["nPatientID"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["Code"].Width = Convert.ToInt32(_nWidth * 0.2);
            ////        c1AcceptedClaims.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["FirstName"].Width = Convert.ToInt32(_nWidth * 0.3);
            ////        c1AcceptedClaims.Cols["MI"].Width = Convert.ToInt32(_nWidth * 0.05);
            ////        c1AcceptedClaims.Cols["LastName"].Width = Convert.ToInt32(_nWidth * 0.3);
            ////        c1AcceptedClaims.Cols["nPatientSSN"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nTransactionProviderID"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.3);
            ////        c1AcceptedClaims.Cols["ProviderFName"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["ProviderMName"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["ProviderLName"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["sFacilityCode"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["Facility"].Width = Convert.ToInt32(_nWidth * 0.16);
            ////        c1AcceptedClaims.Cols["InsuranceName"].Width = Convert.ToInt32(_nWidth * 0.3);
            ////        c1AcceptedClaims.Cols["TransactionStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nSendCounter"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nSendToRejection"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.1);
            ////        c1AcceptedClaims.Cols["nLastStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nSendToInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
            ////        c1AcceptedClaims.Cols["nClaimSendType"].Width = Convert.ToInt32(_nWidth * 0.00);


            ////        #endregion

            ////        c1AcceptedClaims.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
            ////        c1AcceptedClaims.AllowDragging = C1.Win.C1FlexGrid.AllowDraggingEnum.None;
            ////        c1AcceptedClaims.AutoResize = false;
            ////        c1AcceptedClaims.SetData(0, c1AcceptedClaims.Cols["StsIcon"].Index, "");
            ////        c1AcceptedClaims.Cols["Select"].AllowEditing = true;
            ////        for (int i = 1; i < c1AcceptedClaims.Cols.Count; i++)
            ////        {
            ////            c1AcceptedClaims.Cols[i].AllowEditing = false;
            ////        }
            ////    }
            ////    else
            ////    {
            ////        lblSearchAccepted.Text = "Claim : ";
            ////        lblSearchAccepted.Tag = null;
            ////    }
            ////}
            ////catch (Exception ex)
            ////{
            ////    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            ////}
            ////finally
            ////{
            ////    if (c1AcceptedClaims != null && c1AcceptedClaims.ScrollBars == ScrollBars.None) { c1AcceptedClaims.ScrollBars = ScrollBars.Both; }
            ////    if (c1AcceptedClaims != null && c1AcceptedClaims.ScrollBars == ScrollBars.None) { c1AcceptedClaims.ScrollBars = ScrollBars.Both; }
            ////    if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            ////    c1AcceptedClaims.Show();
            ////}
        }

        private void FillRejectedClaims(Int64 Batchid)
        {
            //////////////gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            //gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            //DataTable dtRejectedTransactions = null;

            //try
            //{

            //    if (c1RejectedClaims != null)
            //    {
            //        c1RejectedClaims.ScrollBars = ScrollBars.None;
            //        c1RejectedClaims.DataSource = null;
            //    }

            //    if (Batchid > 0)
            //    { dtRejectedTransactions = ogloClaimManager.GetTransactions(Batchid, TransactionStatus.Rejected); }
            //    else
            //    { dtRejectedTransactions = ogloClaimManager.GetTransactions(TransactionStatus.Rejected); }

            //    if (dtRejectedTransactions != null)
            //    {
            //        //dtRejectedTransactions.Columns.Add("Status");
            //        //dtRejectedTransactions.AcceptChanges();

            //        if (dtRejectedTransactions.Rows.Count <= 0)
            //        {
            //            _dvCharges.AddNew();
            //            c1RejectedClaims.Rows.Count = 1;
            //            c1RejectedClaims.Rows.Fixed = 1;
            //        }

            //        _dvCharges = dtRejectedTransactions.DefaultView;
            //        c1RejectedClaims.DataSource = _dvCharges;

            //        #region " Set Status & Status Icon "

            //        //for (int k = 1; k < c1RejectedClaims.Rows.Count; k++)
            //        //{
            //        //    if (c1RejectedClaims.GetData(k, c1RejectedClaims.Cols["TransactionStatusId"].Index) != null
            //        //        && Convert.ToString(c1RejectedClaims.GetData(k, c1RejectedClaims.Cols["TransactionStatusId"].Index)) != "")
            //        //    {
            //        //        TransactionStatus oStatus = TransactionStatus.None;
            //        //        oStatus = ((TransactionStatus)Convert.ToInt32(c1RejectedClaims.GetData(k, c1RejectedClaims.Cols["TransactionStatusId"].Index)));
            //        //        switch (oStatus)
            //        //        {
            //        //            case TransactionStatus.None:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.None);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, null);
            //        //                break;
            //        //            case TransactionStatus.Transacted:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Transacted);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Transacted);
            //        //                break;
            //        //            case TransactionStatus.Queue:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Queue);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Queue);
            //        //                break;
            //        //            case TransactionStatus.Batch:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Batch);
            //        //                //c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Batch);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Batch_Processing);
            //        //                break;
            //        //            case TransactionStatus.Send:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Send);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Send);
            //        //                break;
            //        //            case TransactionStatus.Rejected:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Rejected);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Rejected);
            //        //                break;
            //        //            case TransactionStatus.Accepted:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Accepted);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Accepted);
            //        //                break;
            //        //            case TransactionStatus.ReQueue:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.ReQueue);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReQueue);
            //        //                break;
            //        //            case TransactionStatus.ReBatch:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.ReBatch);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReBatch);
            //        //                break;
            //        //            case TransactionStatus.ReSend:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.ReSend);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReSend);
            //        //                break;
            //        //            case TransactionStatus.FullyPaid:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.FullyPaid);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Finish01);
            //        //                break;
            //        //            case TransactionStatus.PartialPaid:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.PartialPaid);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ParticalPaid);
            //        //                break;
            //        //            case TransactionStatus.Hold:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Hold);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Hold);
            //        //                break;
            //        //            case TransactionStatus.Challenge:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Challenge);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Challenge);
            //        //                break;
            //        //            case TransactionStatus.Alert:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Alert);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Alert);
            //        //                break;
            //        //            case TransactionStatus.Pending:
            //        //                c1RejectedClaims.SetData(k, c1RejectedClaims.Cols["Status"].Index, TransactionStatus.Pending);
            //        //                c1RejectedClaims.SetCellImage(k, c1RejectedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Pending);
            //        //                break;
            //        //        }
            //        //    }
            //        //}

            //        #endregion

            //        lblSearchRejected.Text = c1RejectedClaims.Cols["Claim"].Name + " : ";
            //        lblSearchRejected.Tag = c1RejectedClaims.Cols["Claim"].Index;
            //        c1RejectedClaims.Cols["Select"].DataType = typeof(System.Boolean);

            //        #region " Show Hide Column "

            //        c1RejectedClaims.Cols["Select"].Visible = true;
            //        c1RejectedClaims.Cols["StsIcon"].Visible = false;
            //        c1RejectedClaims.Cols["Claim"].Visible = true;
            //        c1RejectedClaims.Cols["ClaimNo"].Visible = false;
            //        c1RejectedClaims.Cols["nTransactionID"].Visible = false;
            //        c1RejectedClaims.Cols["nTransactionDate"].Visible = false;
            //        c1RejectedClaims.Cols["Date"].Visible = true;
            //        c1RejectedClaims.Cols["nPatientID"].Visible = false;
            //        c1RejectedClaims.Cols["Code"].Visible = true;
            //        c1RejectedClaims.Cols["PatientName"].Visible = false;
            //        c1RejectedClaims.Cols["FirstName"].Visible = true;
            //        c1RejectedClaims.Cols["MI"].Visible = true;
            //        c1RejectedClaims.Cols["LastName"].Visible = true;
            //        c1RejectedClaims.Cols["nPatientSSN"].Visible = false;
            //        c1RejectedClaims.Cols["nTransactionProviderID"].Visible = false;
            //        c1RejectedClaims.Cols["ProviderName"].Visible = true;
            //        c1RejectedClaims.Cols["ProviderFName"].Visible = false;
            //        c1RejectedClaims.Cols["ProviderMName"].Visible = false;
            //        c1RejectedClaims.Cols["ProviderLName"].Visible = false;
            //        c1RejectedClaims.Cols["sFacilityCode"].Visible = false;
            //        c1RejectedClaims.Cols["Facility"].Visible = true;
            //        c1RejectedClaims.Cols["PatientInsuranceID"].Visible = false;
            //        c1RejectedClaims.Cols["InsuranceFlag"].Visible = false;
            //        c1RejectedClaims.Cols["TransactionStatusId"].Visible = false;
            //        c1RejectedClaims.Cols["nSendCounter"].Visible = false;
            //        c1RejectedClaims.Cols["nSendToRejection"].Visible = false;
            //        c1RejectedClaims.Cols["Status"].Visible = true;
            //        c1RejectedClaims.Cols["nLastStatusId"].Visible = false;
            //        c1RejectedClaims.Cols["nSendToInsuranceID"].Visible = false;
            //        c1RejectedClaims.Cols["nClaimSendType"].Visible = false;
            //        //c1RejectedClaims.Cols["nBatchID"].Visible = false;


            //        #endregion

            //        #region " Set Width "

            //        int _nWidth = 0;

            //        _nWidth = c1RejectedClaims.Width - 10; //c1RejectedClaims.Width - 4;
            //        _nWidth = 733;

            //        c1RejectedClaims.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.06);
            //        c1RejectedClaims.Cols["StsIcon"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.08);
            //        c1RejectedClaims.Cols["ClaimNo"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nTransactionID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nTransactionDate"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.13);
            //        c1RejectedClaims.Cols["nPatientID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["Code"].Width = Convert.ToInt32(_nWidth * 0.2);
            //        c1RejectedClaims.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["FirstName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //        c1RejectedClaims.Cols["MI"].Width = Convert.ToInt32(_nWidth * 0.05);
            //        c1RejectedClaims.Cols["LastName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //        c1RejectedClaims.Cols["nPatientSSN"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nTransactionProviderID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //        c1RejectedClaims.Cols["ProviderFName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["ProviderMName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["ProviderLName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["sFacilityCode"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["Facility"].Width = Convert.ToInt32(_nWidth * 0.16);
            //        c1RejectedClaims.Cols["InsuranceName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //        c1RejectedClaims.Cols["TransactionStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nSendCounter"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nSendToRejection"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.1);
            //        c1RejectedClaims.Cols["nLastStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nSendToInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //        c1RejectedClaims.Cols["nClaimSendType"].Width = Convert.ToInt32(_nWidth * 0.00);


            //        #endregion

            //        c1RejectedClaims.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
            //        c1RejectedClaims.AllowDragging = C1.Win.C1FlexGrid.AllowDraggingEnum.None;
            //        c1RejectedClaims.AutoResize = false;
            //        c1RejectedClaims.SetData(0, c1RejectedClaims.Cols["StsIcon"].Index, "");
            //        c1RejectedClaims.Cols["Select"].AllowEditing = true;
            //        for (int i = 1; i < c1RejectedClaims.Cols.Count; i++)
            //        {
            //            c1RejectedClaims.Cols[i].AllowEditing = false;
            //        }
            //    }
            //    else
            //    {
            //        lblSearchRejected.Text = "Claim : ";
            //        lblSearchRejected.Tag = null;
            //    }
            //}
            //catch (Exception ex)
            //{
            //    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            //}
            //finally
            //{
            //    if (c1RejectedClaims != null && c1RejectedClaims.ScrollBars == ScrollBars.None) { c1RejectedClaims.ScrollBars = ScrollBars.Both; }
            //    if (c1RejectedClaims != null && c1RejectedClaims.ScrollBars == ScrollBars.None) { c1RejectedClaims.ScrollBars = ScrollBars.Both; }
            //    if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            //}
        }

        private void FillFinishedClaims(Int64 Batchid)
        {
            //    gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            //    DataTable dtFinishedTransactions = null;

            //    try
            //    {

            //        if (c1FinishedClaims != null)
            //        {
            //            c1FinishedClaims.ScrollBars = ScrollBars.None;
            //            c1FinishedClaims.DataSource = null;
            //        }
            //        dtFinishedTransactions = ogloClaimManager.GetTransactions(Batchid, TransactionStatus.FullyPaid);

            //        if (dtFinishedTransactions != null)
            //        {
            //            //dtFinishedTransactions.Columns.Add("Status");
            //            //dtFinishedTransactions.AcceptChanges();

            //            //DataColumn dtColIndex = new DataColumn("Index", typeof(Int32));
            //            //dtColIndex.AutoIncrement = true;
            //            //dtColIndex.AutoIncrementStep = 1;
            //            //dtFinishedTransactions.Columns.Add(dtColIndex);
            //            //dtFinishedTransactions.AcceptChanges();


            //            if (dtFinishedTransactions.Rows.Count <= 0)
            //            {
            //                _dvCharges.AddNew();
            //                c1FinishedClaims.Rows.Count = 1;
            //                c1FinishedClaims.Rows.Fixed = 1;
            //            }

            //            _dvCharges = dtFinishedTransactions.DefaultView;

            //            //To Show selected number of claims 
            //            //if (chkShowAllFinishClaims.Checked == false)
            //            //{
            //            //    _dvCharges = SelectTopFrom(_dvCharges, Convert.ToInt32(numFinishClaimCount.Value));
            //            //}

            //            c1FinishedClaims.DataSource = _dvCharges;

            //            #region " Set Status & Status Icon "

            //            //for (int k = 1; k < c1FinishedClaims.Rows.Count; k++)
            //            //{
            //            //    if (c1FinishedClaims.GetData(k, c1FinishedClaims.Cols["TransactionStatusId"].Index) != null
            //            //        && Convert.ToString(c1FinishedClaims.GetData(k, c1FinishedClaims.Cols["TransactionStatusId"].Index)) != "")
            //            //    {
            //            //        TransactionStatus oStatus = TransactionStatus.None;
            //            //        oStatus = ((TransactionStatus)Convert.ToInt32(c1FinishedClaims.GetData(k, c1FinishedClaims.Cols["TransactionStatusId"].Index)));
            //            //        switch (oStatus)
            //            //        {
            //            //            case TransactionStatus.None:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.None);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, null);
            //            //                break;
            //            //            case TransactionStatus.Transacted:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Transacted);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Transacted);
            //            //                break;
            //            //            case TransactionStatus.Queue:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Queue);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Queue);
            //            //                break;
            //            //            case TransactionStatus.Batch:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Batch);
            //            //                //c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Batch);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Batch_Processing);
            //            //                break;
            //            //            case TransactionStatus.Send:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Send);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Send);
            //            //                break;
            //            //            case TransactionStatus.Rejected:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Rejected);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Rejected);
            //            //                break;
            //            //            case TransactionStatus.Accepted:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Accepted);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Accepted);
            //            //                break;
            //            //            case TransactionStatus.ReQueue:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.ReQueue);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReQueue);
            //            //                break;
            //            //            case TransactionStatus.ReBatch:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.ReBatch);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReBatch);
            //            //                break;
            //            //            case TransactionStatus.ReSend:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.ReSend);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ReSend);
            //            //                break;
            //            //            case TransactionStatus.FullyPaid:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.FullyPaid);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Finish01);
            //            //                break;
            //            //            case TransactionStatus.PartialPaid:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.PartialPaid);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_ParticalPaid);
            //            //                break;
            //            //            case TransactionStatus.Hold:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Hold);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Hold);
            //            //                break;
            //            //            case TransactionStatus.Challenge:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Challenge);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Challenge);
            //            //                break;
            //            //            case TransactionStatus.Alert:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Alert);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Alert);
            //            //                break;
            //            //            case TransactionStatus.Pending:
            //            //                c1FinishedClaims.SetData(k, c1FinishedClaims.Cols["Status"].Index, TransactionStatus.Pending);
            //            //                c1FinishedClaims.SetCellImage(k, c1FinishedClaims.Cols["StsIcon"].Index, Properties.Resources.Img_Status_Pending);
            //            //                break;
            //            //        }
            //            //    }
            //            //}

            //            #endregion

            //            lblSearchRejected.Text = c1FinishedClaims.Cols["Claim"].Name + " : ";
            //            lblSearchRejected.Tag = c1FinishedClaims.Cols["Claim"].Index;
            //            c1FinishedClaims.Cols["Select"].DataType = typeof(System.Boolean);

            //            #region " Show Hide Column "

            //            c1FinishedClaims.Cols["Select"].Visible = true;
            //            c1FinishedClaims.Cols["StsIcon"].Visible = false;
            //            c1FinishedClaims.Cols["Claim"].Visible = true;
            //            c1FinishedClaims.Cols["ClaimNo"].Visible = false;
            //            c1FinishedClaims.Cols["nTransactionID"].Visible = false;
            //            c1FinishedClaims.Cols["nTransactionDate"].Visible = false;
            //            c1FinishedClaims.Cols["Date"].Visible = true;
            //            c1FinishedClaims.Cols["nPatientID"].Visible = false;
            //            c1FinishedClaims.Cols["Code"].Visible = true;
            //            c1FinishedClaims.Cols["PatientName"].Visible = false;
            //            c1FinishedClaims.Cols["FirstName"].Visible = true;
            //            c1FinishedClaims.Cols["MI"].Visible = true;
            //            c1FinishedClaims.Cols["LastName"].Visible = true;
            //            c1FinishedClaims.Cols["nPatientSSN"].Visible = false;
            //            c1FinishedClaims.Cols["nTransactionProviderID"].Visible = false;
            //            c1FinishedClaims.Cols["ProviderName"].Visible = true;
            //            c1FinishedClaims.Cols["ProviderFName"].Visible = false;
            //            c1FinishedClaims.Cols["ProviderMName"].Visible = false;
            //            c1FinishedClaims.Cols["ProviderLName"].Visible = false;
            //            c1FinishedClaims.Cols["sFacilityCode"].Visible = false;
            //            c1FinishedClaims.Cols["Facility"].Visible = true;
            //            c1FinishedClaims.Cols["PatientInsuranceID"].Visible = false;
            //            c1FinishedClaims.Cols["InsuranceFlag"].Visible = false;
            //            c1FinishedClaims.Cols["TransactionStatusId"].Visible = false;
            //            c1FinishedClaims.Cols["nSendCounter"].Visible = false;
            //            c1FinishedClaims.Cols["nSendToRejection"].Visible = false;
            //            c1FinishedClaims.Cols["Status"].Visible = true;
            //            c1FinishedClaims.Cols["nLastStatusId"].Visible = false;
            //            c1FinishedClaims.Cols["nSendToInsuranceID"].Visible = false;
            //            c1FinishedClaims.Cols["nClaimSendType"].Visible = false;
            //            //c1FinishedClaims.Cols["nBatchID"].Visible = false;


            //            #endregion

            //            #region " Set Width "

            //            int _nWidth = 0;

            //            _nWidth = c1FinishedClaims.Width - 10; //c1FinishedClaims.Width - 4;
            //            _nWidth = 733;

            //            c1FinishedClaims.Cols["Select"].Width = Convert.ToInt32(_nWidth * 0.06);
            //            c1FinishedClaims.Cols["StsIcon"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["Claim"].Width = Convert.ToInt32(_nWidth * 0.08);
            //            c1FinishedClaims.Cols["ClaimNo"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nTransactionID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nTransactionDate"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["Date"].Width = Convert.ToInt32(_nWidth * 0.13);
            //            c1FinishedClaims.Cols["nPatientID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["Code"].Width = Convert.ToInt32(_nWidth * 0.2);
            //            c1FinishedClaims.Cols["PatientName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["FirstName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //            c1FinishedClaims.Cols["MI"].Width = Convert.ToInt32(_nWidth * 0.05);
            //            c1FinishedClaims.Cols["LastName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //            c1FinishedClaims.Cols["nPatientSSN"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nTransactionProviderID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["ProviderName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //            c1FinishedClaims.Cols["ProviderFName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["ProviderMName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["ProviderLName"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["sFacilityCode"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["Facility"].Width = Convert.ToInt32(_nWidth * 0.16);
            //            c1FinishedClaims.Cols["InsuranceName"].Width = Convert.ToInt32(_nWidth * 0.3);
            //            c1FinishedClaims.Cols["TransactionStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nSendCounter"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nSendToRejection"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["Status"].Width = Convert.ToInt32(_nWidth * 0.1);
            //            c1FinishedClaims.Cols["nLastStatusId"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nSendToInsuranceID"].Width = Convert.ToInt32(_nWidth * 0.00);
            //            c1FinishedClaims.Cols["nClaimSendType"].Width = Convert.ToInt32(_nWidth * 0.00);


            //            #endregion

            //            c1FinishedClaims.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
            //            c1FinishedClaims.AllowDragging = C1.Win.C1FlexGrid.AllowDraggingEnum.None;
            //            c1FinishedClaims.AutoResize = false;
            //            c1FinishedClaims.SetData(0, c1FinishedClaims.Cols["StsIcon"].Index, "");
            //            c1FinishedClaims.Cols["Select"].AllowEditing = true;
            //            for (int i = 1; i < c1FinishedClaims.Cols.Count; i++)
            //            {
            //                c1FinishedClaims.Cols[i].AllowEditing = false;
            //            }
            //        }
            //        else
            //        {
            //            lblSearchRejected.Text = "Claim : ";
            //            lblSearchRejected.Tag = null;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            //    }
            //    finally
            //    {
            //        if (c1FinishedClaims != null && c1FinishedClaims.ScrollBars == ScrollBars.None) { c1FinishedClaims.ScrollBars = ScrollBars.Both; }
            //        if (c1FinishedClaims != null && c1FinishedClaims.ScrollBars == ScrollBars.None) { c1FinishedClaims.ScrollBars = ScrollBars.Both; }
            //        if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            //    }
        }

        #endregion

        #endregion

        #region "Fill Claims "

        private void FillClaimsOnFindingCriteria(string ClaimType, bool IsSearching)
        {
            try
            {
                if (_isBatchTreeLoading == false)
                {
                    string _ClaimFill_SearchText = "";
                    Int64 _ClaimFill_BatchID = 0;
                    decimal _ClaimFill_NoOfRecord = 0;
                    bool _ClaimFill_NoOfRecordApplicable = false;
                    bool _ClaimFill_ShowAllinBatch = false;
                    C1.Win.C1FlexGrid.C1FlexGrid oFillGrid = null;

                    #region "Find respective control values as per claim type"
                    if (ClaimType.ToUpper() == _TagCharges.ToUpper())
                    {
                        #region "Charges"
                        ////Search Text
                        //if (IsSearching == true) { _ClaimFill_SearchText = txtChargesSearch.Text.Trim(); }

                        ////Batch ID
                        //_ClaimFill_BatchID = 0;

                        ////Show all in selected batch
                        //_ClaimFill_ShowAllinBatch = chkChargesClaimCount.Checked;

                        ////No of record count
                        //_ClaimFill_NoOfRecord = numChargesClaimCount.Value;
                        //_ClaimFill_NoOfRecordApplicable = true;

                        ////Grid
                        //oFillGrid = c1BillingTransactions;
                        #endregion
                    }
                    else if (ClaimType.ToUpper() == _TagQueue.ToUpper())
                    {
                        #region "Queue"
                        //Search Text
                        if (IsSearching == true) { _ClaimFill_SearchText = txtQueueSearch.Text.Trim(); }

                        //Batch ID
                        _ClaimFill_BatchID = 0;

                        //Show all in selected batch
                        _ClaimFill_ShowAllinBatch = chkQueueClaimCount.Checked;

                        //No of record count
                        _ClaimFill_NoOfRecord = numQueueClaimCount.Value;
                        _ClaimFill_NoOfRecordApplicable = true;



                        //Grid
                        oFillGrid = c1QueuedClaims;
                        #endregion
                    }
                    else if (ClaimType.ToUpper() == _TagBatch.ToUpper())
                    {
                        #region "Batch"
                        //Search Text
                        if (IsSearching == true) { _ClaimFill_SearchText = txtBatchSearch.Text.Trim(); }

                        ////Batch ID
                        //if (trvBatch.SelectedNode != null && trvBatch.SelectedNode.Tag != null && trvBatch.SelectedNode.Tag.ToString().Length > 0)
                        //{
                        //    _ClaimFill_BatchID = Convert.ToInt64(trvBatch.SelectedNode.Tag.ToString());
                        //}

                        if (c1trvBatch != null && c1trvBatch.Rows.Count > 0 && c1trvBatch.RowSel >= 0 && c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index) != null)
                        {
                            _ClaimFill_BatchID = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                        }

                        //Show all in selected batch
                        _ClaimFill_ShowAllinBatch = chkBatchClaimCount.Checked;

                        //No of record count
                        _ClaimFill_NoOfRecord = numBatchClaimCount.Value;
                        _ClaimFill_NoOfRecordApplicable = false;
                        if (_ClaimFill_BatchID <= 0) { _ClaimFill_NoOfRecordApplicable = true; }

                        ////MaheshB
                        //if (trvBatch.SelectedNode != null)
                        //{
                        //    if (Convert.ToString(trvBatch.SelectedNode.Text) == "SELF")
                        //    {
                        //        _ClaimFill_NoOfRecord = 100;
                        //    }
                        //}
                        if (c1trvBatch != null && c1trvBatch.Rows.Count > 0 && c1trvBatch.RowSel >= 0)
                        {
                            if (Convert.ToString(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["sBatchName"].Index)) == "SELF")
                            {
                                _ClaimFill_NoOfRecord = 100;
                            }
                        }

                        //Grid
                        oFillGrid = c1BatchGrid;

                        #endregion
                    }
                    else if (ClaimType.ToUpper() == _TagSentBatch.ToUpper())
                    {
                        #region "Sent Batch"
                        if (IsSearching == true) { _ClaimFill_SearchText = txtBatchSearch_SentBatch.Text.Trim(); }

                        if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0 && c1trvBatch_SentBatch.RowSel >= 0 && c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index) != null)
                        {
                            _ClaimFill_BatchID = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));
                        }

                        //Show all in selected batch
                        _ClaimFill_ShowAllinBatch = chkBatchClaimCount_SentBatch.Checked;

                        //No of record count
                        _ClaimFill_NoOfRecord = numBatchClaimCount_SentBatch.Value;
                        _ClaimFill_NoOfRecordApplicable = false;
                        if (_ClaimFill_BatchID <= 0) { _ClaimFill_NoOfRecordApplicable = true; }

                        if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0 && c1trvBatch_SentBatch.RowSel >= 0)
                        {
                            if (Convert.ToString(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["sBatchName"].Index)) == "SELF")
                            {
                                _ClaimFill_NoOfRecord = 100;
                            }
                        }

                        //Grid
                        oFillGrid = c1BatchGridSentBatch;

                        #endregion
                    }
                    #endregion

                    //if (oFillGrid != null)
                    //{
                    FillClaims(ClaimType, _ClaimFill_SearchText, _ClaimFill_BatchID, _ClaimFill_NoOfRecord, _ClaimFill_NoOfRecordApplicable, _ClaimFill_ShowAllinBatch, oFillGrid, IsSearching);
                    //}
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void FillClaims(string ClaimType, string SearchText, Int64 BatchID, decimal NoOfClaims, bool NoOfClaimsApplicable, bool ShowAll, C1.Win.C1FlexGrid.C1FlexGrid ClaimFillGrid, bool IsSearching)
        {
            gloClaimManager ogloClaimManager = new gloClaimManager(_databaseconnectionstring, _emrdatabaseconnectionstring);
            //  DataTable dtClaims = null;

            try
            {
                SearchText = SearchText.Replace("'", "''");

                if (ClaimFillGrid != null)
                {
                   // ClaimFillGrid.Clear();
                    ClaimFillGrid.DataSource = null;

                    if (ClaimType.ToUpper() == _TagBatch.ToUpper() && IsSearching == true)
                    {
                        DataTable dtTempClaim = new DataTable();
                        dtTempClaim = ogloClaimManager.GetBatchClaims(ClaimType, SearchText, BatchID, 1, NoOfClaimsApplicable, ShowAll, IsSearching);
                        if (dtTempClaim != null && dtTempClaim.Rows.Count > 0)
                        {
                            BatchID = Convert.ToInt64(dtTempClaim.Rows[0]["nBatchID"].ToString());
                        }
                        else
                        {
                            //BatchID = Convert.ToInt64(trvBatch.SelectedNode.Tag.ToString());
                            if (c1trvBatch != null && c1trvBatch.Rows.Count > 0 && c1trvBatch.RowSel >= 0)
                            { BatchID = Convert.ToInt64(Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index))); }
                        }

                        //trvBatch.SelectedNode = null;
                        //for (int _index = 0; _index < trvBatch.Nodes.Count; _index++)
                        //{
                        //    if (Convert.ToInt64(trvBatch.Nodes[_index].Tag) == BatchID)
                        //    {
                        //        trvBatch.SelectedNode = trvBatch.Nodes[_index];
                        //        break;
                        //    }
                        //}
                        c1trvBatch.RowSel = -1;
                        if (c1trvBatch != null && c1trvBatch.Rows.Count > 0)
                        {
                            for (int _index = 0; _index < c1trvBatch.Rows.Count; _index++)
                            {
                                if (Convert.ToString(c1trvBatch.GetData(_index, c1trvBatch.Cols["nBatchID"].Index)).Trim() != "" &&
                                    Convert.ToInt64(c1trvBatch.GetData(_index, c1trvBatch.Cols["nBatchID"].Index)) == BatchID)
                                {
                                    c1trvBatch.RowSel = _index;
                                    c1trvBatch.Select(_index, c1trvBatch.Cols["nBatchID"].Index);
                                    break;
                                }
                            }
                        }
                    }
                    else if (ClaimType.ToUpper() == _TagSentBatch.ToUpper() && IsSearching == true)
                    {
                        DataTable dtTempClaim = new DataTable();
                        dtTempClaim = ogloClaimManager.GetBatchClaims(ClaimType, SearchText, BatchID, 1, NoOfClaimsApplicable, ShowAll, IsSearching);
                        if (dtTempClaim != null && dtTempClaim.Rows.Count > 0)
                        {
                            BatchID = Convert.ToInt64(dtTempClaim.Rows[0]["nBatchID"].ToString());
                        }
                        else
                        {
                            if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0 && c1trvBatch_SentBatch.RowSel >= 0)
                            { BatchID = Convert.ToInt64(Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index))); }
                        }

                        c1trvBatch_SentBatch.RowSel = -1;
                        if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.Rows.Count > 0)
                        {
                            for (int _index = 0; _index < c1trvBatch_SentBatch.Rows.Count; _index++)
                            {
                                if (Convert.ToString(c1trvBatch_SentBatch.GetData(_index, c1trvBatch_SentBatch.Cols["nBatchID"].Index)).Trim() != "" &&
                                    Convert.ToInt64(c1trvBatch_SentBatch.GetData(_index, c1trvBatch_SentBatch.Cols["nBatchID"].Index)) == BatchID)
                                {
                                    c1trvBatch_SentBatch.RowSel = _index;
                                    c1trvBatch_SentBatch.Select(_index, c1trvBatch_SentBatch.Cols["nBatchID"].Index);
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        //dtClaims = ogloClaimManager.GetBatchClaims(ClaimType, SearchText, BatchID, Convert.ToInt32(NoOfClaims), NoOfClaimsApplicable, ShowAll, IsSearching);
                    }

                    ClaimFillGrid.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                    ClaimFillGrid.AllowDragging = C1.Win.C1FlexGrid.AllowDraggingEnum.None;
                    ClaimFillGrid.AutoResize = false;


                    for (int i = 0; i <= ClaimFillGrid.Cols.Count - 1; i++)
                    {
                        ClaimFillGrid.Cols[i].AllowEditing = false;
                    }
                    ClaimFillGrid.Cols["Select"].AllowEditing = true;
                }
            }
            catch //(Exception ex)
            {

            }
            finally
            {
                if (ogloClaimManager != null) { ogloClaimManager.Dispose(); }
            }

        }

        #endregion

        #region "Fill Hold Details in Grid"

        private void FillHoldBalance()
        {
            try
            {

                #region " Balance Grid "

                c1HoldBalance.Rows.Count = 1;
                c1HoldBalance.Rows.Add();
                c1HoldBalance.SetData(1, 0, "Billing Hold :");
                c1HoldBalance.SetData(1, 1, 0);

                c1HoldBalance.Rows.Add();
                c1HoldBalance.SetData(2, 0, "Plan Hold :");
                c1HoldBalance.SetData(2, 1, 0);

                c1HoldBalance.Rows.Add();
                c1HoldBalance.SetData(3, 0, "Total Balance :");
                c1HoldBalance.SetData(3, 1, 0);

                #endregion

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private Boolean FillBillingHoldData(string HoldTypeString)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters(); ;
            DataTable _dtResult = new DataTable();
            DataSet dsHoldData = new DataSet();
            Boolean _bResult = false;
            DataView dv = null;
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@Flag", HoldTypeString, ParameterDirection.Input, SqlDbType.VarChar);
                oDB.Retrive("BL_SELECT_Hold_Claims", oDBParameters, out dsHoldData);
                oDB.Disconnect();
                //if (_dtResult != null && _dtResult.Rows.Count > 0)
                //{
                //    _bResult = true;
                //}

                //Fill Billing Hold Grid
                if (HoldTypeString == "BillingHold")
                {
                    if (dsHoldData != null)
                    {
                        if (dsHoldData.Tables[1] != null )
                        {
                            gloGlobal.gloPMGlobal.SplitClaimColumn(dsHoldData.Tables[1], dsHoldData.Tables[1].Columns.IndexOf("Claim No"));
                        }

                        dv = dsHoldData.Tables[1].DefaultView;
                        dv.RowFilter = "row_count <=" + numHoldClaimCount.Value.ToString();
                        dv.Sort = "SortClaim Desc,SortSubClaim ASC";
                        c1BillingHold.DataSource = dv;
                        _BillingclaimTotal = dsHoldData.Tables[1].Compute("SUM(Balance)", String.Empty);
                        if (_BillingclaimTotal == null || _BillingclaimTotal.ToString().Trim() == "")
                        {
                            _BillingclaimTotal = 0;
                        }
                        if (_PlanclaimTotal == null || _PlanclaimTotal.ToString().Trim() == "")
                        {
                            _PlanclaimTotal = 0;
                        }
                        if (c1BillingHold.Rows.Count > 1)
                        {
                            tsb_Modify.Visible = true;
                        }
                        else
                        {
                            tsb_Modify.Visible = false;
                        }
                        //_bResulttmp=FillBillingHoldData("TotalHoldBalance");
                        //Plan Hold Balance 
                        if (dsHoldData.Tables[2] != null)
                        {
                            if (dsHoldData.Tables[2].Rows[0]["PlanHoldBalance"] != null && dsHoldData.Tables[2].Rows[0]["PlanHoldBalance"].ToString().Trim() != "")
                            {
                                _PlanclaimTotal = Convert.ToDecimal(dsHoldData.Tables[2].Rows[0]["PlanHoldBalance"]);
                                c1HoldBalance.SetData(2, 1, _PlanclaimTotal.ToString());
                            }
                            else
                            {
                                c1HoldBalance.SetData(2, 1, "0");
                            }
                        }
                        //Total Balance 
                        if (dsHoldData.Tables[0] != null)
                        {
                            if (dsHoldData.Tables[0].Rows[0]["HoldTotalBalance"] != null && dsHoldData.Tables[0].Rows[0]["HoldTotalBalance"].ToString().Trim() != "")
                            {
                                c1HoldBalance.SetData(3, 1, Convert.ToDecimal(dsHoldData.Tables[0].Rows[0]["HoldTotalBalance"]));
                            }
                            else
                            {
                                c1HoldBalance.SetData(3, 1, 0);
                            }
                        }
                        //Billing Total
                        c1HoldBalance.SetData(1, 1, _BillingclaimTotal.ToString());
                        DesignHoldGrid(HoldType.BillingHold.ToString());


                        //  _bResulttmp=FillBillingHoldData("PlanHoldBalance");

                        // c1HoldBalance.SetData(2, 1, _PlanclaimTotal.ToString());
                    }
                    if (SelectedCharges.Count > 0)
                    {
                        int iRowIndex = c1BillingHold.FindRow(Convert.ToDecimal(SelectedCharges[0]), 1, c1BillingHold.Cols["nTransactionID"].Index, true);
                        if (iRowIndex > 0)
                        {
                            c1BillingHold.Select(iRowIndex, c1BillingHold.Cols["Claim No"].Index);
                        }
                    }
                }
                //Fill Plan Hold Grid
                else if (HoldTypeString == "PlanHold")
                {

                    if (dsHoldData != null)
                    {

                        dv = dsHoldData.Tables[1].DefaultView;
                        dv.RowFilter = "row_count <=" + numHoldClaimCount.Value.ToString();
                        
                        this.c1PlanHold.RowColChange -= new System.EventHandler(this.c1PlanHold_RowColChange);
                        c1PlanHold.DataSource = dv;
                        this.c1PlanHold.RowColChange += new System.EventHandler(this.c1PlanHold_RowColChange);
                        _PlanclaimTotal = dsHoldData.Tables[1].Compute("SUM(Balance)", String.Empty);

                        if (_BillingclaimTotal == null || _BillingclaimTotal.ToString().Trim() == "")
                        {
                            _BillingclaimTotal = 0;
                        }
                        if (_PlanclaimTotal == null || _PlanclaimTotal.ToString().Trim() == "")
                        {
                            _PlanclaimTotal = 0;
                        }

                        //Total Balance 
                        if (dsHoldData.Tables[0] != null)
                        {
                            if (dsHoldData.Tables[0].Rows[0]["HoldTotalBalance"] != null && dsHoldData.Tables[0].Rows[0]["HoldTotalBalance"].ToString().Trim() != "")
                            {
                                c1HoldBalance.SetData(3, 1, Convert.ToDecimal(dsHoldData.Tables[0].Rows[0]["HoldTotalBalance"]));
                            }
                            else
                            {
                                c1HoldBalance.SetData(3, 1, 0);
                            }
                        }
                        //Plan Hold Total 
                        c1HoldBalance.SetData(2, 1, _PlanclaimTotal.ToString());

                        // Billing Balance Total
                        if (dsHoldData.Tables[2] != null)
                        {
                            if (dsHoldData.Tables[2].Rows[0]["BillingHoldBalance"] != null && dsHoldData.Tables[2].Rows[0]["BillingHoldBalance"].ToString().Trim() != "")
                            {
                                _BillingclaimTotal = Convert.ToDecimal(dsHoldData.Tables[2].Rows[0]["BillingHoldBalance"]);
                                c1HoldBalance.SetData(1, 1, _BillingclaimTotal.ToString());
                            }
                            else
                            {
                                c1HoldBalance.SetData(1, 1, "0");
                            }

                        }

                        //_bResulttmp = FillBillingHoldData("TotalHoldBalance");
                        DesignHoldGrid(HoldType.PlanHold.ToString());
                        GetPlanHoldClaimDetails();
                        // _bResulttmp=FillBillingHoldData("BillingHoldTotal");



                        if (SelectedCharges.Count > 0)
                        {
                            if (C1PlanHoldclaim.Rows.Count > 1)
                            {
                                int iRowIndex = C1PlanHoldclaim.FindRow(Convert.ToDecimal(SelectedCharges[0]), 1, C1PlanHoldclaim.Cols["nTransactionID"].Index, true);
                                if (iRowIndex > 0)
                                {
                                    C1PlanHoldclaim.Select(iRowIndex, c1BillingHold.Cols["Claim No"].Index);
                                }
                            }
                        }

                    }
                }
                //Set the Plan Hold Balance 
                else if (HoldTypeString == "PlanHoldBalance")
                {
                    if (_dtResult != null)
                    {
                        if (_dtResult.Rows[0]["PlanHoldBalance"] != null && _dtResult.Rows[0]["PlanHoldBalance"].ToString().Trim() != "")
                        {
                            _PlanclaimTotal = Convert.ToDecimal(_dtResult.Rows[0]["PlanHoldBalance"]);
                            c1HoldBalance.SetData(2, 1, _PlanclaimTotal.ToString());
                        }
                        else
                        {
                            c1HoldBalance.SetData(2, 1, "0");
                        }

                    }
                }
                //Set the Total Hold Balance.
                else if (HoldTypeString == "TotalHoldBalance")
                {
                    if (_dtResult != null)
                    {
                        if (_dtResult.Rows[0]["HoldTotalBalance"] != null && _dtResult.Rows[0]["HoldTotalBalance"].ToString().Trim() != "")
                        {
                            c1HoldBalance.SetData(3, 1, Convert.ToDecimal(_dtResult.Rows[0]["HoldTotalBalance"]));
                        }
                        else
                        {
                            c1HoldBalance.SetData(3, 1, 0);
                        }
                    }
                }
                //Set the Billing Hold Total
                else if (HoldTypeString == "BillingHoldTotal")
                {
                    if (_dtResult != null)
                    {
                        if (_dtResult.Rows[0]["BillingHoldBalance"] != null && _dtResult.Rows[0]["BillingHoldBalance"].ToString().Trim() != "")
                        {
                            _BillingclaimTotal = Convert.ToDecimal(_dtResult.Rows[0]["BillingHoldBalance"]);
                            c1HoldBalance.SetData(1, 1, _BillingclaimTotal.ToString());
                        }
                        else
                        {
                            c1HoldBalance.SetData(1, 1, "0");
                        }

                    }
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return _bResult;

        }

        public void GetPlanHoldClaimDetails()
        {

            //Fill the Plan Hold Claim Grid as per Plan.
            if (c1PlanHold.DataSource != null)
            {
                if (c1PlanHold != null && c1PlanHold.Rows.Count > 1)
                {
                    if (c1PlanHold.RowSel != -1)
                    {
                        if (c1PlanHold.GetData(c1PlanHold.RowSel, c1PlanHold.Cols["nContactID"].Index) != null)
                        {
                            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters(); ;
                            DataTable _dtResult = new DataTable();
                            try
                            {
                                Int64 _ContactID = 0;
                                _ContactID = Convert.ToInt64(c1PlanHold.GetData(c1PlanHold.RowSel, c1PlanHold.Cols["nContactID"].Index));
                                _dtResult = GetPlanHoldClaimDetailsByID(_ContactID);
                                if (_dtResult != null)
                                {
                                    gloGlobal.gloPMGlobal.SplitClaimColumn(_dtResult, _dtResult.Columns.IndexOf("Claim No"));
                                    DataView dv = new DataView(_dtResult);
                                    dv.Sort = "SortClaim Desc,SortSubClaim ASC";
                                    C1PlanHoldclaim.DataSource = dv;
                                }
                                //C1PlanHoldclaim.DataSource = _dtResult.DefaultView;
                                DesignHoldGrid("PlanHoldClaims");
                                if (C1PlanHoldclaim.Rows.Count > 1)
                                {
                                    tsb_Modify.Visible = true;
                                }
                                else
                                {
                                    tsb_Modify.Visible = false;
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("Error in GetPlanHoldClaimDetails function.", _messageBoxCaption);
                                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                            }
                            finally
                            {
                                if (oDB != null) { oDB.Dispose(); oDB = null; }
                            }


                        }
                    }
                    else
                    {
                       // C1PlanHoldclaim.Clear();
                        C1PlanHoldclaim.DataSource = null;
                        DesignHoldGrid("PlanHoldClaims");
                        C1PlanHoldclaim.Rows.Count = 1;
                        tsb_Modify.Visible = false;
                    }
                }
                else
                {
                  //  C1PlanHoldclaim.Clear();
                    C1PlanHoldclaim.DataSource = null;
                    DesignHoldGrid("PlanHoldClaims");
                    C1PlanHoldclaim.Rows.Count = 1;
                    tsb_Modify.Visible = false;
                }
            }

        }

        public DataTable GetPlanHoldClaimDetailsByID(Int64 _ContactID)
        {
            DataTable _dtResult = new DataTable();
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters(); ;
            try
            {

                if (_ContactID != 0)
                {
                    oDB.Connect(false);
                    oDBParameters.Add("@Flag", "PlanHoldClaims", ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@ContactID", _ContactID, ParameterDirection.Input, SqlDbType.VarChar);
                    oDB.Retrive("BL_SELECT_Hold_Claims", oDBParameters, out _dtResult);
                    oDB.Disconnect();
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }

            return _dtResult;
        }





        #endregion


        #endregion

        #region " Alpha II Validation "

        private string ValidateUsingAlphaII(DataTable DxCode, string _AlphaIIAuthentication, string _AlphaIIServerName, string _AlphaIIDatabase, string _AlphaIIUserName, string _AlphaIIPassword)
        {
            bool _IsAplhaIIValidated = true;
            string _strMessage = "";
            try
            {
                string ConnectionString = "";

                if (_AlphaIIAuthentication.ToUpper() == "WINDOWS")
                {
                    if (_AlphaIIServerName != "" && _AlphaIIDatabase != "")
                    {
                        ConnectionString = "Integrated Security=SSPI; Persist Security Info=False; Data Source=" + _AlphaIIServerName + "; Initial Catalog=" + _AlphaIIDatabase + "; Connection Timeout = 0";
                    }
                    else
                    {
                        ConnectionString = "";
                    }
                }
                else
                {
                    if (_AlphaIIServerName != "" && _AlphaIIDatabase != "" && _AlphaIIUserName != "")//&& _AlphaIIPassword != "")
                    {
                        ConnectionString = "Persist Security Info=False;Data Source=" + _AlphaIIServerName + ";Initial Catalog=" + _AlphaIIDatabase + ";User ID=" + _AlphaIIUserName + ";Pwd=" + _AlphaIIPassword + ";";
                    }
                    else
                    {
                        ConnectionString = "";
                    }
                }

                if (ConnectionString != "")
                {
                    AlphaII.CodeWizard.Configuration.DatabaseConfiguration oDatabaseConfiguration = new AlphaII.CodeWizard.Configuration.DatabaseConfiguration();
                    oDatabaseConfiguration.MsSqlServer = _AlphaIIServerName;
                    oDatabaseConfiguration.MsSqlDatabase = _AlphaIIDatabase;
                    oDatabaseConfiguration.MsSqlUserId = _AlphaIIUserName;
                    oDatabaseConfiguration.MsSqlPassword = _AlphaIIPassword;
                    oDatabaseConfiguration.MsSqlPersistSecurity = false;
                    if (_AlphaIIAuthentication.ToUpper() == "WINDOWS")
                    {
                        oDatabaseConfiguration.MsSqlIntegratedSecurity = true;
                    }
                    else if (_AlphaIIAuthentication.ToUpper() == "SQL")
                    {
                        oDatabaseConfiguration.MsSqlIntegratedSecurity = false;
                    }
                    oDatabaseConfiguration.Save();
                    AlphaII.CodeWizard.Coding oCoding = new AlphaII.CodeWizard.Coding();

                    for (int i = 0; i < DxCode.Rows.Count; i++)
                    {
                        _IsAplhaIIValidated = oCoding.ValidateDiagnosisCode(DxCode.Rows[i][0].ToString(), gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(DxCode.Rows[i][1])));
                        if (_IsAplhaIIValidated == false)
                        {
                            _strMessage += " " + DxCode.Rows[i][0].ToString().Trim() + " for DOS " + gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(DxCode.Rows[i][1])).ToShortDateString() + ",";
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                Application.DoEvents();
                return "";
            }
            finally
            {

            }
            return _strMessage;
        }


        public static bool GetValidCode(string diagnosisCode, DateTime serviceDate, out bool notSpecific)
        {
            bool flag = false;
            notSpecific = false;
            if ((diagnosisCode != null) && (diagnosisCode.Length > 0))
            {
                SqlConnection connection = new SqlConnection(AlphaII.CodeWizard.DataAccess.Common.ConnectionString);
                SqlCommand command = new SqlCommand("GetDiagnosisValid", connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.Add("@DiagCode", SqlDbType.VarChar, 9);
                command.Parameters.Add("@DateOfSvc", SqlDbType.SmallDateTime);
                command.Parameters.Add("@ReturnValue", SqlDbType.SmallInt);
                command.Parameters["@ReturnValue"].Direction = ParameterDirection.ReturnValue;
                try
                {
                    command.Parameters["@DiagCode"].Value = diagnosisCode;
                    command.Parameters["@DateOfSvc"].Value = serviceDate;
                    connection.Open();
                    command.ExecuteNonQuery();
                    int num = Convert.ToInt32(command.Parameters["@ReturnValue"].Value);
                    if (num == 0)
                    {
                        return true;
                    }
                    if (num != 0xbba)
                    {
                        return flag;
                    }
                    if ((diagnosisCode[0] == 'E') && (diagnosisCode.Length >= 4))
                    {
                        notSpecific = true;
                        return flag;
                    }
                    if (diagnosisCode.Length >= 3)
                    {
                        notSpecific = true;
                    }
                }
                finally
                {
                    connection.Close();
                    if (command != null)
                    {
                        if (command.Parameters != null)
                        {
                            command.Parameters.Clear();
                        }
                        command.Dispose();
                        command = null;
                    }

                    connection.Dispose();
                }
            }
            return flag;
        }


        //20100529 Mahesh Nawal Comment the code during refactoring
        //private void GetAlphaIISettings()
        //{
        //    gloSettings.GeneralSettings ogloSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
        //    object value = new object();
        //    try
        //    {
        //        ogloSettings.GetSetting("AlphaII SQL Server Name", out value);
        //        if (value != null && Convert.ToString(value).Trim() != "")
        //        {
        //            _AlphaIIServerName = Convert.ToString(value.ToString());
        //            value = null;
        //        }

        //        ogloSettings.GetSetting("AlphaII Database Name", out value);
        //        if (value != null && Convert.ToString(value).Trim() != "")
        //        {
        //            _AlphaIIDatabase = Convert.ToString(value.ToString());
        //            value = null;
        //        }

        //        ogloSettings.GetSetting("AlphaII Authentication", out value);
        //        if (value != null && Convert.ToString(value).Trim() != "")
        //        {
        //            _AlphaIIAuthentication = Convert.ToString(value.ToString());
        //            value = null;
        //        }
        //        ogloSettings.GetSetting("AlphaII User Name", out value);
        //        if (value != null && Convert.ToString(value).Trim() != "")
        //        {
        //            _AlphaIIUserName = Convert.ToString(value.ToString());
        //            value = null;
        //        }
        //        ogloSettings.GetSetting("AlphaII Password", out value);
        //        if (value != null && Convert.ToString(value).Trim() != "")
        //        {
        //            _AlphaIIPassword = Convert.ToString(value.ToString());
        //            value = null;
        //        }
        //        ogloSettings.GetSetting("ClaimValidationSetting", out value);
        //        if (value != null && Convert.ToString(value).Trim() != "")
        //        {
        //            _AlphaIIValidation = Convert.ToString(value.ToString());
        //            value = null;
        //        }
        //        ogloSettings.GetSetting("IsCheckInvalidICD9", out value);
        //        if (value != null && Convert.ToString(value) != "")
        //        {
        //            _IsCheckInvalidICD9 = Convert.ToBoolean(value);
        //            value = null;
        //        }
        //        ogloSettings.GetSetting("IsUseScrubber", out value);
        //        if (value != null && Convert.ToString(value) != "")
        //        {
        //            _IsScrubber = Convert.ToBoolean(value);
        //            value = null;
        //        }
        //        ogloSettings.GetSetting("ShowMessageIfNoValidation", out value);
        //        if (value != null && Convert.ToString(value) != "")
        //        {
        //            _ShowMessageForValidation = Convert.ToBoolean(value);
        //            value = null;
        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //    }
        //    finally
        //    {
        //        if (ogloSettings != null) { ogloSettings.Dispose(); }
        //        value = null;
        //    }
        //}

        //20100529 Mahesh Nawal Code Optimization
        private bool ValidateConnectionString(string _AlphaIIAuthentication, string _AlphaIIServerName, string _AlphaIIDatabase, string _AlphaIIUserName, string _AlphaIIPassword)
        {
            Boolean _Result = false;
            SqlConnection _connection = new SqlConnection();
            try
            {
                string _connstring = "";
                if (_AlphaIIAuthentication.ToUpper() == "WINDOWS")
                {
                    _connstring = "Integrated Security=SSPI; Persist Security Info=False; Data Source=" + _AlphaIIServerName + "; Initial Catalog=" + _AlphaIIDatabase + "; Connection Timeout = 0";
                }
                else
                {
                    _connstring = "Persist Security Info=False;Data Source=" + _AlphaIIServerName + ";Initial Catalog=" + _AlphaIIDatabase + ";User ID=" + _AlphaIIUserName + ";Pwd=" + _AlphaIIPassword + ";";
                }
                _connection.ConnectionString = _connstring;
                _connection.Open();
                _connection.Close();
                _Result = true;
            }
            catch //(Exception ex)
            {
                _Result = false;
            }


            //if (_Result == false)
            //{
            //    MessageBox.Show("Connection can not established with given parameter, please verify it", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //}

            return _Result;
        }

        //20100529 Mahesh Nawal Comment the code during refactoring
        //private string GetAlphaIIConnectionString()
        //{
        //    string _connstring = "";
        //    try
        //    {
        //        if (_AlphaIIAuthentication.ToUpper() == "WINDOWS")
        //        {
        //            if (_AlphaIIServerName != "" && _AlphaIIDatabase != "")
        //            {
        //                _connstring = "Integrated Security=SSPI; Persist Security Info=False; Data Source=" + _AlphaIIServerName + "; Initial Catalog=" + _AlphaIIDatabase + "; Connection Timeout = 0";
        //                //Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=CodeWizard;Data Source=GLOINT

        //            }
        //            else
        //            {
        //                return "";
        //            }
        //        }
        //        else
        //        {
        //            if (_AlphaIIServerName != "" && _AlphaIIDatabase != "" && _AlphaIIUserName != "")//&& _AlphaIIPassword != "")
        //            {
        //                _connstring = "Persist Security Info=False;Data Source=" + _AlphaIIServerName + ";Initial Catalog=" + _AlphaIIDatabase + ";User ID=" + _AlphaIIUserName + ";Pwd=" + _AlphaIIPassword + ";";
        //                // Persist Security Info=False;User ID=sa;Initial Catalog=CodeWizard;Data Source=GLOINT
        //            }
        //            else
        //            {
        //                return "";
        //            }
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        //    }
        //    return _connstring;
        //}

        private bool IsDiagnosisExist(string strMessage, string DxCode)
        {
            string[] strDxList = null;
            bool _IsExist = false;
            try
            {
                if (strMessage.Trim() != "")
                {
                    strDxList = strMessage.Trim().Split(',');
                    if (strDxList != null && strDxList.Length > 0)
                    {
                        for (int i = 0; i < strDxList.Length; i++)
                        {
                            if (strDxList[i].Trim().ToUpper() == DxCode.Trim().ToUpper())
                            {
                                _IsExist = true;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            return _IsExist;
        }

        #endregion " Alpha II Validation "

        #region " Hold Tab Event"

        private void DesignHoldGrid(string HoldTypestring)
        {
            try
            {
                #region "Currency Style"

                C1.Win.C1FlexGrid.CellStyle csCurrencyStyle;// = c1BillingHold.Styles.Add("cs_CurrencyStyle");
                try
                {
                    if (c1BillingHold.Styles.Contains("cs_CurrencyStyle"))
                    {
                        csCurrencyStyle = c1BillingHold.Styles["cs_CurrencyStyle"];
                    }
                    else
                    {
                        csCurrencyStyle = c1BillingHold.Styles.Add("cs_CurrencyStyle");
                        csCurrencyStyle.DataType = typeof(System.Decimal);
                        csCurrencyStyle.Format = "c";
                        csCurrencyStyle.Font = new System.Drawing.Font("Tahoma", 9.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        csCurrencyStyle.TextEffect = C1.Win.C1FlexGrid.TextEffectEnum.Flat;
                    }

                }
                catch
                {
                    csCurrencyStyle = c1BillingHold.Styles.Add("cs_CurrencyStyle");
                    csCurrencyStyle.DataType = typeof(System.Decimal);
                    csCurrencyStyle.Format = "c";
                    csCurrencyStyle.Font = new System.Drawing.Font("Tahoma", 9.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    csCurrencyStyle.TextEffect = C1.Win.C1FlexGrid.TextEffectEnum.Flat;
                }



                #endregion

                //Billing Hold Grid Design
                if (HoldTypestring == "BillingHold")
                {
                    #region "Caption\Header"
                    c1BillingHold.Cols["Claim No"].Caption = "Claim #";
                    c1BillingHold.Cols["DOS"].Caption = "DOS";
                    c1BillingHold.Cols["Code"].Caption = "Code";
                    c1BillingHold.Cols["Patient"].Caption = "Patient";
                    c1BillingHold.Cols["CloseDate"].Caption = "Close Date";
                    c1BillingHold.Cols["Party"].Caption = "Party";
                    c1BillingHold.Cols["Hold Created"].Caption = "Hold Created";
                    c1BillingHold.Cols["Note"].Caption = "Note";
                    c1BillingHold.Cols["Balance"].Caption = "Balance";
                    c1BillingHold.Cols["ClearingHouse"].Caption = "Clearinghouse";
                    c1BillingHold.Cols["SortClaim"].Caption = "SortClaim";
                    c1BillingHold.Cols["SortSubClaim"].Caption = "SortSubClaim";
                    c1BillingHold.Cols["DOB"].Caption = "DOB";
                    #endregion

                    #region "Width"

                    c1BillingHold.Cols["Claim No"].Width = 60;//ClaimNo
                    c1BillingHold.Cols["DOS"].Width = 80;//DOS
                    c1BillingHold.Cols["Code"].Width = 100;//Code
                    c1BillingHold.Cols["Patient"].Width = 150;//Patient
                    c1BillingHold.Cols["CloseDate"].Width = 80;
                    c1BillingHold.Cols["Party"].Width = 200;//Party
                    c1BillingHold.Cols["Hold Created"].Width = 140;//Hold Created
                    c1BillingHold.Cols["Note"].Width = 270;//Note
                    c1BillingHold.Cols["Balance"].Width = 80;//Balance
                    c1BillingHold.Cols["SortClaim"].Width = 0;
                    c1BillingHold.Cols["SortSubClaim"].Width = 0;
                    c1BillingHold.Cols["DOB"].Width = 80;


                    if (c1BillingHold.DataSource != null)
                    {
                        c1BillingHold.Cols["nTransactionID"].Width = 0;  //Transaction ID
                        c1BillingHold.Cols["nPatientID"].Width = 0;  //Patient ID
                        c1BillingHold.Cols["row_count"].Width = 0;  //Row Count
                    }

                    #endregion

                    #region "Show Hide"
                    if (c1BillingHold.DataSource != null)
                    {
                        c1BillingHold.Cols["nTransactionID"].Visible = false;//Transaction ID
                        c1BillingHold.Cols["nPatientID"].Visible = false;//Patient ID
                        c1BillingHold.Cols["row_count"].Visible = false; //Row Count
                        c1BillingHold.Cols["dtDateSearch"].Visible = false;
                        c1BillingHold.Cols["dtDOSSearch"].Visible = false;
                        c1BillingHold.Cols["dtDOBSearch"].Visible = false;

                    }
                    if (_IsMultipleClearingHouse == false)
                    {
                        c1BillingHold.Cols["ClearingHouse"].Visible = false;
                    }
                    #endregion

                    #region "Style"

                    c1BillingHold.Cols["Balance"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;

                    c1BillingHold.Cols["Balance"].Style = csCurrencyStyle;

                    c1BillingHold.Cols["DOS"].DataType = typeof(System.DateTime);//"DOS";
                    c1BillingHold.Cols["DOS"].Format = "MM/dd/yyyy";

                    c1BillingHold.Cols["CloseDate"].DataType = typeof(System.DateTime);//"DOS";
                    c1BillingHold.Cols["CloseDate"].Format = "MM/dd/yyyy";

                    c1BillingHold.Cols["DOB"].DataType = typeof(System.DateTime);//"DOS";
                    c1BillingHold.Cols["DOB"].Format = "MM/dd/yyyy";

                    #endregion
                }
                //Plan Hold Grid Design
                else if (HoldTypestring == "PlanHold")
                {

                    #region "Caption\Header"

                    c1PlanHold.Cols[0].Caption = "Company";
                    c1PlanHold.Cols[1].Caption = "Plan";
                    c1PlanHold.Cols[2].Caption = "Hold Created";
                    c1PlanHold.Cols[3].Caption = "Note";
                    c1PlanHold.Cols[4].Caption = "Number Of Claims";
                    c1PlanHold.Cols[5].Caption = "Balance";

                    #endregion
                    #region "Width"

                    c1PlanHold.Cols[0].Width = 160;//Company
                    c1PlanHold.Cols[1].Width = 160;  // Plan
                    c1PlanHold.Cols[2].Width = 140; //Hold Created
                    c1PlanHold.Cols[3].Width = 320;  // Note
                    c1PlanHold.Cols[4].Width = 115; // Number of Claims
                    c1PlanHold.Cols[5].Width = 100; //Balance

                    if (c1PlanHold.DataSource != null)
                    {
                        c1PlanHold.Cols[6].Width = 0; //Row Count
                        c1PlanHold.Cols[7].Width = 0;//Contact ID
                        c1PlanHold.Cols[8].Width = 0;//Insurance Company ID
                    }
                    #endregion

                    #region "Show/Hide"
                    if (c1PlanHold.DataSource != null)
                    {
                        c1PlanHold.Cols[6].Visible = false;//Row Count
                        c1PlanHold.Cols[7].Visible = false;//Contact ID
                        c1PlanHold.Cols[8].Visible = false;//Insurance Company ID
                    }

                    if (_IsMultipleClearingHouse == false)
                    {
                        c1PlanHold.Cols["ClearingHouse"].Visible = false;
                    }

                    #endregion

                    #region "Style"

                    c1PlanHold.Cols[5].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;

                    c1PlanHold.Cols[5].Style = csCurrencyStyle;

                    #endregion
                }
                // Plan hold Claims Grid Design
                else if (HoldTypestring == "PlanHoldClaims")
                {

                    #region "Caption"
                    C1PlanHoldclaim.Cols["Claim No"].Caption = "Claim #";
                    C1PlanHoldclaim.Cols["DOS"].Caption = "DOS";
                    C1PlanHoldclaim.Cols["Code"].Caption = "Code";
                    C1PlanHoldclaim.Cols["Patient"].Caption = "Patient";
                    C1PlanHoldclaim.Cols["CloseDate"].Caption = "Close Date";
                    C1PlanHoldclaim.Cols["Balance"].Caption = "Balance";
                    C1PlanHoldclaim.Cols["DOB"].Caption = "DOB";
                    #endregion

                    #region "Width"

                    C1PlanHoldclaim.Cols["Claim No"].Width = 100;  // Claim No
                    C1PlanHoldclaim.Cols["DOS"].Width = 100;  // DOS
                    C1PlanHoldclaim.Cols["Code"].Width = 100;  // DOS
                    C1PlanHoldclaim.Cols["Patient"].Width = 300;  //Patient
                    C1PlanHoldclaim.Cols["CloseDate"].Width = 100;
                    C1PlanHoldclaim.Cols["Balance"].Width = 150;  //Balance
                    C1PlanHoldclaim.Cols["DOB"].Width = 100;

                    if (C1PlanHoldclaim.DataSource != null)
                    {
                        C1PlanHoldclaim.Cols["nTransactionID"].Width = 0;   //Transaction ID
                        C1PlanHoldclaim.Cols["nPatientID"].Width = 0;   //Patient ID
                        //C1PlanHoldclaim.Cols["nClaimNo"].Width = 0;
                        //C1PlanHoldclaim.Cols["nSubClaimNo"].Width = 0;
                        C1PlanHoldclaim.Cols["SortClaim"].Width = 0;
                        C1PlanHoldclaim.Cols["SortSubClaim"].Width = 0;
                    }
                    #endregion

                    #region "Show/Hide"
                    if (C1PlanHoldclaim.DataSource != null)
                    {
                        C1PlanHoldclaim.Cols["nTransactionID"].Visible = false;  //Transaction ID
                        C1PlanHoldclaim.Cols["nPatientID"].Visible = false;  //Patient ID
                        C1PlanHoldclaim.Cols["dtDOBSearch"].Visible = false;
                    }
                    #endregion

                    #region "Style"
                    C1PlanHoldclaim.Cols["Balance"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;
                    C1PlanHoldclaim.Cols["Balance"].Style = csCurrencyStyle;

                    C1PlanHoldclaim.Cols["DOS"].DataType = typeof(System.DateTime);//"DOS";
                    C1PlanHoldclaim.Cols["DOS"].Format = "MM/dd/yyyy";

                    C1PlanHoldclaim.Cols["CloseDate"].DataType = typeof(System.DateTime);//"DOS";
                    C1PlanHoldclaim.Cols["CloseDate"].Format = "MM/dd/yyyy";

                    C1PlanHoldclaim.Cols["DOB"].DataType = typeof(System.DateTime);//"DOB";
                    C1PlanHoldclaim.Cols["DOB"].Format = "MM/dd/yyyy";
                    #endregion

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }


        }

        private void rbBillingHold_CheckedChanged(object sender, EventArgs e)
        {
            //Fill the Billing Grid
            try
            {
                if (rbBillingHold.Checked == true)
                {
                    pnlBillingHold.BringToFront();
                    pnlPlanHold.SendToBack();
                    Boolean _bResult = FillBillingHoldData(HoldType.BillingHold.ToString());
                    DesignHoldGrid(HoldType.BillingHold.ToString());
                    c1PlanHold.TabStop = false;
                    c1BillingHold.TabStop = true;
                }

                RadioButton _Rb = (RadioButton)sender;
                if (_Rb.Checked == true)
                {
                    _Rb.Font = gloGlobal.clsgloFont.gFont_BOLD; //new Font("Tahoma", 9, FontStyle.Bold);
                    txtSearchHoldClaims.Clear();
                }
                else
                    _Rb.Font = gloGlobal.clsgloFont.gFont; //new Font("Tahoma", 9, FontStyle.Regular);
            }
            catch (Exception ex)
            {

                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
        }

        private void rbPlanHold_CheckedChanged(object sender, EventArgs e)
        {
            //Fill the Plan Hold Grid
            try
            {
                if (rbPlanHold.Checked == true)
                {
                    pnlPlanHold.BringToFront();
                    pnlBillingHold.SendToBack();
                    Boolean _bResult = FillBillingHoldData(HoldType.PlanHold.ToString());
                    DesignHoldGrid(HoldType.PlanHold.ToString());
                    c1PlanHold.TabStop = true;
                    c1BillingHold.TabStop = false;

                }
                RadioButton _Rb = (RadioButton)sender;
                if (_Rb.Checked == true)
                {
                    _Rb.Font = gloGlobal.clsgloFont.gFont_BOLD; //new Font("Tahoma", 9, FontStyle.Bold);
                    txtSearchHoldClaims.Clear();
                }
                else
                    _Rb.Font = gloGlobal.clsgloFont.gFont; //new Font("Tahoma", 9, FontStyle.Regular);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);

            }
        }

        #endregion

        #region " Private Methods "

        private void UpdateBatchTotal(Int64 _nBatchID, String strSend)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oDB.Connect(false);
                oParameters.Add("@nBatchID", _nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sendUserID", _UserID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sendUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sendstr", strSend, ParameterDirection.Input, SqlDbType.VarChar);
                oDB.Execute("BL_UPDATE_Batch_SendCLAIM", oParameters);

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }

        }

        private void AddModifyBatchDetail(Int64 _nBatchID, Int64 _claimNo, Int64 nTransactionMasterID, Int64 nTransactionID, Int64 nClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            try
            {

                oDB.Connect(false);

                oParameters.Add("@nBatchID", _nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nclaimNo", _claimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionMasterID", nTransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionID", nTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                int Val = oDB.Execute("BL_INUP_TransactionBatch_DTL", oParameters);

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }



        }

        public bool GetBatchAllClaims(Int64 _BatchID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object objresult = null;
            bool _result = true;
            try
            {
                oDB.Connect(false);
                string _query = "Select Isnull(Count(nBatchID),0) as nBatchID from BL_transaction_Batch_DTL with (nolock) where nBatchID= " + _BatchID + " ";
                objresult = oDB.ExecuteScalar_Query(_query);
                if (objresult != null && Convert.ToString(objresult).Trim() != "")
                {
                    _result = Convert.ToBoolean(objresult);
                }
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _result;
        }

        public DataTable GetBatchClaims(Int64 _BatchID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@nClaimStatus", ClaimStatus.Open.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@Status", TransactionStatus.Batch.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@BatchID", _BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Retrive("BL_SELECT_Batch_Fill_Claims", oDBParameters, out dtCharges);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtCharges;
        }        

        public String GetBatchCharges(Int64 _BatchID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            object total = 0;
            try
            {
                oDB.Connect(false);

                oDBParameters.Add("@nbatchId", _BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@total", total, ParameterDirection.Output, SqlDbType.Float);
                oDB.Execute("BL_Select_batchCharges", oDBParameters, out total);
                oDB.Disconnect();
                return total.ToString();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }

            }
            return "";
        }
        //MaheshB 20091202
        public void UpdateTransactionStatus(Int64 _nTransactionID, TransactionStatus _oStatus)
        {
            gloDatabaseLayer.DBLayer ODB = null;
            try
            {
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                ODB.Connect(false);
                string _strquery = "Update BL_Transaction_Claim_MST WITH(READPAST) set nStatus='" + _oStatus.GetHashCode() + "' where nTransactionID='" + _nTransactionID + "' and nStatus!=" + TransactionStatus.Resent.GetHashCode() + " and nStatus Not In(20,21,22)";
                ODB.Execute_Query(_strquery);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ODB != null)
                {
                    ODB.Disconnect();
                    ODB.Dispose();
                }
            }
        }

        //MaheshB 20091207
        public void UpdateTransactionStatus(Int64 _nTransactionID, Int64 _BatchID, TransactionStatus _oStatus)
        {
            gloDatabaseLayer.DBLayer ODB = null;
            try
            {
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                ODB.Connect(false);
                string _strquery = "Update BL_Transaction_Claim_MST WITH(READPAST) set nStatus='" + _oStatus.GetHashCode() + "' where nTransactionID='" + _nTransactionID + "'";
                ODB.Execute_Query(_strquery);

                _strquery = "Delete BL_Transaction_Batch where nBatchID='" + _BatchID + "'";
                ODB.Execute_Query(_strquery);

                _strquery = "";
                _strquery = "Delete BL_Transaction_Batch_DTL where nBatchID='" + _BatchID + "'";
                ODB.Execute_Query(_strquery);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ODB != null)
                {
                    ODB.Disconnect();
                    ODB.Dispose();
                }
            }
        }

        //MaheshB 20091201

        public DataTable GetCharges()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
            int _numClaimCount = 0;
            string _strSearchMultiChargesTray = String.Empty;
            string _strSearchMultiFacility = String.Empty;
            string _strSearchUser = String.Empty;
            string _strSearchProvider = String.Empty;
            try
            {
                if (numQueueClaimCount.Value <= 0)
                {
                    _numClaimCount = 0;
                }
                else
                {
                    _numClaimCount = Convert.ToInt32(numQueueClaimCount.Value);
                }

                if (cmbMultiChargesTray.SelectedIndex > -1)
                {
                    _strSearchMultiChargesTray = String.Empty;
                    for (int iCount = 0; iCount <= cmbMultiChargesTray.Items.Count - 1; iCount++)
                    {
                        if (_strSearchMultiChargesTray == String.Empty)
                            _strSearchMultiChargesTray = (Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[iCount])["Description"]).Trim().ToLower());
                        else
                            _strSearchMultiChargesTray += "," + (Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[iCount])["Description"]).Trim().ToLower());
                    }
                }

                if (cmbMultiFacility.SelectedIndex > -1)
                {
                    _strSearchMultiFacility = String.Empty;
                    for (int iCount = 0; iCount <= cmbMultiFacility.Items.Count - 1; iCount++)
                    {
                        if (_strSearchMultiFacility == String.Empty)
                            _strSearchMultiFacility = (Convert.ToString(((DataRowView)cmbMultiFacility.Items[iCount])["ID"]));
                        else
                            _strSearchMultiFacility += "," + (Convert.ToString(((DataRowView)cmbMultiFacility.Items[iCount])["ID"]));
                    }

                }

                if (cmbUser.SelectedIndex > -1)
                {
                    _strSearchUser = String.Empty;
                    for (int iCount = 0; iCount <= cmbUser.Items.Count - 1; iCount++)
                    {
                        if (_strSearchUser == String.Empty)
                            _strSearchUser = (Convert.ToString(((DataRowView)cmbUser.Items[iCount])["ID"]));
                        else
                            _strSearchUser += "," + (Convert.ToString(((DataRowView)cmbUser.Items[iCount])["ID"]));
                    }

                }

                if (cmbProvider.SelectedIndex > -1)
                {
                    _strSearchProvider = String.Empty;
                    for (int iCount = 0; iCount <= cmbProvider.Items.Count - 1; iCount++)
                    {
                        if (_strSearchProvider == String.Empty)
                            _strSearchProvider = (Convert.ToString(((DataRowView)cmbProvider.Items[iCount])["ID"]));
                        else
                            _strSearchProvider += "," + (Convert.ToString(((DataRowView)cmbProvider.Items[iCount])["ID"]));
                    }
                }

                oDB.Connect(false);
                oDBParameters.Add("@nClaimStatus", ClaimStatus.Open.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@Status", TransactionStatus.Queue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@ClaimCount", _numClaimCount, ParameterDirection.Input, SqlDbType.Int);


                if (rbPrimaryClaimsCharges.Checked == true)
                    oDBParameters.Add("@ResponsibilityNo", 1, ParameterDirection.Input, SqlDbType.Int);
                else
                    oDBParameters.Add("@ResponsibilityNo", 2, ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                if (cmbBillingMethod.SelectedIndex != 0)
                {
                    oDBParameters.Add("@BillingMethod", cmbBillingMethod.SelectedValue, ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@BillingMethod", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (_strSearchMultiChargesTray != String.Empty)
                {
                    oDBParameters.Add("@TrayID", _strSearchMultiChargesTray.Replace("'", "''"), ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@TrayID", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (_strSearchMultiFacility != String.Empty)
                {
                    oDBParameters.Add("@FacilityID", _strSearchMultiFacility, ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@FacilityID", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (cmbInsuranceCompany.SelectedIndex >= 1)
                {
                    oDBParameters.Add("@InsCompanyID", cmbInsuranceCompany.SelectedValue, ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@InsCompanyID", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (IsValidDate(maskedCloseDate.Text))
                {
                    if (maskedCloseDate.Text != String.Empty)
                    {
                        oDBParameters.Add("@CloseDate", maskedCloseDate.Text, ParameterDirection.Input, SqlDbType.VarChar);
                    }
                    else
                    {
                        oDBParameters.Add("@CloseDate", null, ParameterDirection.Input, SqlDbType.VarChar);
                    }
                }
                else
                {
                    oDBParameters.Add("@CloseDate", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (_strSearchUser != String.Empty)
                {
                    oDBParameters.Add("@UserID", _strSearchUser, ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@UserID", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (_strSearchProvider != String.Empty)
                {
                    oDBParameters.Add("@ProviderID", _strSearchProvider, ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@ProviderID", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (cmbReportingCategory.SelectedIndex >= 1)
                {
                    oDBParameters.Add("@InsRepCategoryID", cmbReportingCategory.SelectedValue, ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@InsRepCategoryID", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                if (cmbClearingHouse.SelectedIndex >= 1)
                {
                    oDBParameters.Add("@ClearingHouse", Convert.ToString(cmbClearingHouse.Text), ParameterDirection.Input, SqlDbType.VarChar);
                }
                else
                {
                    oDBParameters.Add("@ClearingHouse", null, ParameterDirection.Input, SqlDbType.VarChar);
                }

                Int64 nBusinessId = 0;



                if (cmbBusinessCenter.Items.Count > 0 && gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch") == true)
                    nBusinessId = Convert.ToInt64(cmbBusinessCenter.SelectedValue);
                else
                    nBusinessId = 0;



                if (nBusinessId > 0)
                {
                    oDBParameters.Add("@BusinessCenterId", nBusinessId, ParameterDirection.Input, SqlDbType.BigInt);
                    _BusinessCenterCode = ((System.Data.DataRowView)(cmbBusinessCenter.SelectedItem)).Row.ItemArray[1].ToString();
                }
                else
                {
                    oDBParameters.Add("@BusinessCenterId", null, ParameterDirection.Input, SqlDbType.BigInt);
                    _BusinessCenterCode = "";
                }


                //Console.WriteLine(gloDatabaseLayer.CUtility.getProcedureExeCode("BL_SELECT_BatchClaims_New", oDBParameters));

                oDB.Retrive("BL_SELECT_BatchClaims_Revised", oDBParameters, out dtCharges);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
            return dtCharges;
        }

        //MaheshB 20091209
        public DataTable GetVoidClaims(int _numClaimCount)
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
            try
            {

                oDB.Connect(false);
                oDBParameters.Add("@nClaimStatus", ClaimStatus.Open.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@Status", TransactionStatus.Deleted.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@ClaimCount", _numClaimCount, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Void_Claims", oDBParameters, out dtCharges);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtCharges;
        }

        public Boolean SearchClaims(string srchType, string _strsearch, DataView dtView)
        {
            Boolean _bResult = false;
            try
            {
                string[] strSearchArray = null;
                string _strTag = String.Empty;
                string sFilter = String.Empty;

                if (srchType != null)
                {
                    _strTag = Convert.ToString(srchType);
                    _strTag = _strTag.ToUpper();
                }
                switch (_strTag)
                {


                    case "BATCH":
                        {
                            #region

                            DataTable dt = new DataTable();

                            DataView dv = null;
                            //dv = (DataView)c1BatchGrid.DataSource;
                            dv = dtView;
                            if (dv != null)
                            {
                                //dv = dt.DefaultView;


                                _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                if (_strsearch.Length > 1)
                                {
                                    string str = _strsearch.Substring(1).Replace("%", "");
                                    _strsearch = _strsearch.Substring(0, 1) + str;
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    strSearchArray = _strsearch.Split(',');
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    if (strSearchArray.Length == 1)
                                    {
                                        //For Single value search 
                                        _strsearch = strSearchArray[0];
                                        sFilter = dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                            //dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%'";

                                    }
                                    else
                                    {
                                        //For Comma separated  value search
                                        for (int j = 0; j < strSearchArray.Length; j++)
                                        {
                                            _strsearch = strSearchArray[j];
                                            if (_strsearch.Trim() != "")
                                            {


                                                if (sFilter == "")//if (j == 0)
                                                {
                                                    sFilter = " ( " + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        //dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";
                                                }
                                                else
                                                {
                                                    sFilter = sFilter + " AND (" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        //dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";
                                                }

                                            }
                                        }


                                    }
                                }
                            }
                            else
                            {
                                dv.RowFilter = "";
                            }
                            dv.RowFilter = sFilter;
                            if (dv.ToTable().Rows.Count > 0)
                                _bResult = true;
                            c1BatchGrid.DataSource = dv;
                            DesignGrid("BATCH");
                            break;

                            #endregion
                        }
                    case "SENTBATCH":
                        {
                            #region

                            DataTable dt = new DataTable();

                            DataView dv = null;
                            //dv = (DataView)c1BatchGrid.DataSource;
                            dv = dtView;
                            if (dv != null)
                            {
                                //dv = dt.DefaultView;


                                _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                if (_strsearch.Length > 1)
                                {
                                    string str = _strsearch.Substring(1).Replace("%", "");
                                    _strsearch = _strsearch.Substring(0, 1) + str;
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    strSearchArray = _strsearch.Split(',');
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    if (strSearchArray.Length == 1)
                                    {
                                        //For Single value search 
                                        _strsearch = strSearchArray[0];
                                        sFilter = dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                            //dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%'";

                                    }
                                    else
                                    {
                                        //For Comma separated  value search
                                        for (int j = 0; j < strSearchArray.Length; j++)
                                        {
                                            _strsearch = strSearchArray[j];
                                            if (_strsearch.Trim() != "")
                                            {


                                                if (sFilter == "")//if (j == 0)
                                                {
                                                    sFilter = " ( " + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        //dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";
                                                }
                                                else
                                                {
                                                    sFilter = sFilter + " AND (" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        //dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";
                                                }

                                            }
                                        }


                                    }
                                }
                            }
                            else
                            {
                                dv.RowFilter = "";
                            }
                            dv.RowFilter = sFilter;
                            if (dv.ToTable().Rows.Count > 0)
                                _bResult = true;
                            c1BatchGridSentBatch.DataSource = dv;
                            DesignGrid("SENTBATCH");
                            break;

                            #endregion
                        }
                    case "QUEUE":
                        {
                            #region

                            //DataTable dt = new DataTable();

                            DataView dv = null;
                            dv = dtView;
                            //dv = (DataView)c1QueuedClaims.DataSource;
                            if (dv != null)
                            {

                                //dv = dt.DefaultView;


                                _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                if (_strsearch.Length > 1)
                                {
                                    string str = _strsearch.Substring(1).Replace("%", "");
                                    _strsearch = _strsearch.Substring(0, 1) + str;
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    strSearchArray = _strsearch.Split(',');
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    if (strSearchArray.Length == 1)
                                    {
                                        //For Single value search 
                                        _strsearch = strSearchArray[0];
                                        sFilter = dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                         dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                         dv.Table.Columns["StatementNotes"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                         dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                         dv.Table.Columns["InternalNotes"].ColumnName + " Like '" + _strsearch + "%'";
                                        if (gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
                                            sFilter = sFilter + " OR  " + dv.Table.Columns["BUS"].ColumnName + " Like '" + _strsearch + "%'";

                                        if (_IsMultipleClearingHouse == true)
                                        {
                                            sFilter = sFilter + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%'";
                                        }

                                    }
                                    else
                                    {
                                        //For Comma separated  value search
                                        for (int j = 0; j < strSearchArray.Length; j++)
                                        {
                                            _strsearch = strSearchArray[j];
                                            if (_strsearch.Trim() != "")
                                            {


                                                if (sFilter == "")//if (j == 0)
                                                {
                                                    sFilter = " ( " + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["StatementNotes"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["InternalNotes"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";

                                                    if (gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
                                                        sFilter = sFilter + " OR  " + dv.Table.Columns["BUS"].ColumnName + " Like '" + _strsearch + "%'";

                                                    if (_IsMultipleClearingHouse == true)
                                                    {
                                                        sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                }
                                                else
                                                {
                                                    sFilter = sFilter + " AND (" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["StatementNotes"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InternalNotes"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";
                                                    if (gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_ClaimBatch"))
                                                        sFilter = sFilter + " OR  " + dv.Table.Columns["BUS"].ColumnName + " Like '" + _strsearch + "%'";

                                                    if (_IsMultipleClearingHouse == true)
                                                    {
                                                        sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                }

                                            }
                                        }


                                    }
                                }
                            }
                            else
                            {
                                dv.RowFilter = "";
                            }
                            dv.RowFilter = sFilter;
                            if (dv.ToTable().Rows.Count > 0)
                                _bResult = true;
                            c1QueuedClaims.DataSource = dv;
                            DesignGrid("QUEUE");
                            break;

                            #endregion
                        }

                    case "VOID":
                        {
                            #region



                            DataView dv = null;
                            dv = (DataView)c1VoidClaims.DataSource;
                            if (dv != null)
                            {
                                //dv = dt.DefaultView;


                                _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                if (_strsearch.Length > 1)
                                {
                                    string str = _strsearch.Substring(1).Replace("%", "");
                                    _strsearch = _strsearch.Substring(0, 1) + str;
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    strSearchArray = _strsearch.Split(',');
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    if (strSearchArray.Length == 1)
                                    {
                                        //For Single value search 
                                        _strsearch = strSearchArray[0];
                                        sFilter = dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                  dv.Table.Columns["VoidDate"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       //dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%'";
                                        if (_IsMultipleClearingHouse == true)
                                        {
                                            sFilter = sFilter + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%'";
                                        }

                                    }
                                    else
                                    {
                                        //For Comma separated  value search
                                        for (int j = 0; j < strSearchArray.Length; j++)
                                        {
                                            _strsearch = strSearchArray[j];
                                            if (_strsearch.Trim() != "")
                                            {


                                                if (sFilter == "")//if (j == 0)
                                                {
                                                    sFilter = " ( " + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["VoidDate"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       //dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";

                                                    if (_IsMultipleClearingHouse == true)
                                                    {
                                                        sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                }
                                                else
                                                {
                                                    sFilter = sFilter + " AND (" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                        dv.Table.Columns["VoidDate"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["PatientLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       //dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderFName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["ProviderMName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                      dv.Table.Columns["ProviderLName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Facility"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                       dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%')";

                                                    if (_IsMultipleClearingHouse == true)
                                                    {
                                                        sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                }

                                            }
                                        }


                                    }
                                }
                            }
                            else
                            {
                                dv.RowFilter = "";
                            }
                            dv.RowFilter = sFilter;
                            c1VoidClaims.DataSource = dv;
                            DesignGrid("VOID");
                            break;

                            #endregion
                        }
                    case "ONHOLD":
                        {
                            if (rbBillingHold.Checked == true)
                            {
                                #region  "Billing Hold Search "

                                DataView dv = null;

                                dv = (DataView)c1BillingHold.DataSource;
                                if (dv != null)
                                {
                                    _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                    if (_strsearch.Length > 1)
                                    {
                                        string str = _strsearch.Substring(1).Replace("%", "");
                                        _strsearch = _strsearch.Substring(0, 1) + str;
                                    }
                                    if (_strsearch.Trim() != "")
                                    {
                                        strSearchArray = _strsearch.Split(',');
                                    }
                                    if (_strsearch.Trim() != "")
                                    {
                                        if (strSearchArray.Length == 1)
                                        {
                                            //For Single value search 
                                            _strsearch = strSearchArray[0];
                                            sFilter = "[" + dv.Table.Columns["Claim No"].ColumnName + "]" + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Patient"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Code"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Party"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR [" +
                                                            dv.Table.Columns["Hold Created"].ColumnName + "] Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Note"].ColumnName + " Like '" + _strsearch + "%' ";


                                            if (_IsMultipleClearingHouse == true)
                                            {
                                                sFilter = sFilter + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%'";
                                            }

                                        }
                                        else
                                        {
                                            //For Comma separated  value search
                                            for (int j = 0; j < strSearchArray.Length; j++)
                                            {
                                                _strsearch = strSearchArray[j];
                                                if (_strsearch.Trim() != "")
                                                {


                                                    if (sFilter == "")//if (j == 0)
                                                    {
                                                        sFilter = " ( [" + dv.Table.Columns["Claim No"].ColumnName + "]" + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Patient"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Code"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Party"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR [" +
                                                            dv.Table.Columns["Hold Created"].ColumnName + "] Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Note"].ColumnName + " Like '" + _strsearch + "%' )";

                                                        if (_IsMultipleClearingHouse == true)
                                                        {
                                                            sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        sFilter = sFilter + " AND ([" + dv.Table.Columns["Claim No"].ColumnName + "]" + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Patient"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Code"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["dtDOBSearch"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Party"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR [" +
                                                            dv.Table.Columns["Hold Created"].ColumnName + "] Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["dtDOSSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Note"].ColumnName + " Like '" + _strsearch + "%' )";

                                                        if (_IsMultipleClearingHouse == true)
                                                        {
                                                            sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                        }

                                                    }

                                                }
                                            }


                                        }
                                    }
                                }
                                else
                                {
                                    dv.RowFilter = "";
                                }

                                if (sFilter == "")
                                {
                                    sFilter = "row_count <=" + numHoldClaimCount.Value.ToString();
                                }
                                else
                                {
                                    sFilter = "row_count <=" + numHoldClaimCount.Value.ToString() + " and (" + sFilter + ")";
                                }
                                dv.RowFilter = sFilter;
                                c1BillingHold.DataSource = dv;
                                DesignHoldGrid(HoldType.BillingHold.ToString());

                                #endregion
                            }
                            else if (rbPlanHold.Checked == true)
                            {
                                #region  "Plan Hold Search "

                                DataView dv = null;

                                dv = (DataView)c1PlanHold.DataSource;
                                if (dv != null)
                                {
                                    _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                    if (_strsearch.Length > 1)
                                    {
                                        string str = _strsearch.Substring(1).Replace("%", "");
                                        _strsearch = _strsearch.Substring(0, 1) + str;
                                    }
                                    if (_strsearch.Trim() != "")
                                    {
                                        strSearchArray = _strsearch.Split(',');
                                    }
                                    if (_strsearch.Trim() != "")
                                    {
                                        if (strSearchArray.Length == 1)
                                        {
                                            //For Single value search 
                                            _strsearch = strSearchArray[0];
                                            sFilter = dv.Table.Columns["Company"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Plan"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Note"].ColumnName + " Like '" + _strsearch + "%' OR [" +
                                                            dv.Table.Columns["Hold Created"].ColumnName + "] Like '" + _strsearch + "%'";

                                            if (_IsMultipleClearingHouse == true)
                                            {
                                                sFilter = sFilter + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%'";
                                            }


                                        }
                                        else
                                        {
                                            //For Comma separated  value search
                                            for (int j = 0; j < strSearchArray.Length; j++)
                                            {
                                                _strsearch = strSearchArray[j];
                                                if (_strsearch.Trim() != "")
                                                {


                                                    if (sFilter == "")//if (j == 0)
                                                    {
                                                        sFilter = " ( " + dv.Table.Columns["Company"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Plan"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Note"].ColumnName + " Like '" + _strsearch + "%' OR [" +
                                                            dv.Table.Columns["Hold Created"].ColumnName + "] Like '" + _strsearch + "%'";

                                                        if (_IsMultipleClearingHouse == true)
                                                        {
                                                            sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                        }


                                                    }
                                                    else
                                                    {
                                                        sFilter = sFilter + " AND (" + dv.Table.Columns["Company"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                           dv.Table.Columns["Plan"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                            dv.Table.Columns["Note"].ColumnName + " Like '" + _strsearch + "%' OR [" +
                                                            dv.Table.Columns["Hold Created"].ColumnName + "] Like '" + _strsearch + "%' ";
                                                        if (_IsMultipleClearingHouse == true)
                                                        {
                                                            sFilter = sFilter.TrimEnd(')') + " OR  " + dv.Table.Columns["ClearingHouse"].ColumnName + " Like '" + _strsearch + "%')";
                                                        }

                                                    }

                                                }
                                            }


                                        }
                                    }
                                }
                                else
                                {
                                    dv.RowFilter = "";
                                }
                                if (sFilter == "")
                                {
                                    sFilter = "row_count <=" + numHoldClaimCount.Value.ToString();
                                }
                                else
                                {
                                    sFilter = "row_count <=" + numHoldClaimCount.Value.ToString() + " and (" + sFilter + ")";
                                }

                                dv.RowFilter = sFilter;
                                c1PlanHold.DataSource = dv;
                                DesignHoldGrid(HoldType.PlanHold.ToString());
                                GetPlanHoldClaimDetails();
                                #endregion
                            }

                        } break;

                    case "CLAIM MANAGER":
                        {
                            #region 

                            DataTable dt = new DataTable();
                            DataView dv = null;                            
                            dv = dtView;
                            if (dv != null)
                            {
                                _strsearch = _strsearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                                if (_strsearch.Length > 1)
                                {
                                    string str = _strsearch.Substring(1).Replace("%", "");
                                    _strsearch = _strsearch.Substring(0, 1) + str;
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    strSearchArray = _strsearch.Split(',');
                                }
                                if (_strsearch.Trim() != "")
                                {
                                    if (strSearchArray.Length == 1)
                                    {
                                        #region "Search For Single Value"

                                        _strsearch = strSearchArray[0];
                                        if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                                        {
                                            sFilter = dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +                                                
                                                dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                dv.Table.Columns["PatientFullName"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                dv.Table.Columns["ProviderFullName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                dv.Table.Columns["BillingType"].ColumnName + " Like '" + _strsearch + "%'";
                                        }
                                        else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                                        {
                                            sFilter = dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["PatientFullName"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                               dv.Table.Columns["ProviderFullName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["dtDATE"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                               dv.Table.Columns["BillingType"].ColumnName + " Like '" + _strsearch + "%'";
                                        }
                                        else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted))
                                        {
                                            sFilter = dv.Table.Columns["sAccountNo"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                    dv.Table.Columns["Guarantor"].ColumnName + " Like '" + _strsearch + "%' OR " +                                                    
                                                    dv.Table.Columns["sAddress"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                    dv.Table.Columns["Patient"].ColumnName + " Like '" + _strsearch + "%'";                                                    
                                        }

                                        #endregion
                                    }
                                    else
                                    {
                                        #region "Search For Comma Seperated Value"

                                        for (int j = 0; j < strSearchArray.Length; j++)
                                        {
                                            _strsearch = strSearchArray[j];
                                            if (_strsearch.Trim() != "")
                                            {
                                                if (sFilter == "")
                                                {
                                                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                                                    {
                                                        sFilter = "(" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientFullName"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["ProviderFullName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["BillingType"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                                                    {
                                                        sFilter = "(" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientFullName"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["ProviderFullName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["dtDATE"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["BillingType"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted))
                                                    {
                                                        sFilter = "(" + dv.Table.Columns["Patient"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                    dv.Table.Columns["sAccountNo"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                    dv.Table.Columns["Guarantor"].ColumnName + " Like '" + _strsearch + "%' OR " +                                                                    
                                                                    dv.Table.Columns["sAddress"].ColumnName + " Like '" + _strsearch + "%')";                                                                
                                                    }
                                                }
                                                else
                                                {
                                                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                                                    {
                                                        sFilter = sFilter + "AND (" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientFullName"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["ProviderFullName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["BillingType"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                                                    {
                                                        sFilter = sFilter + "AND (" + dv.Table.Columns["Claim"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["dtDateSearch"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientCode"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["PatientFullName"].ColumnName + " Like '%" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["ProviderFullName"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["InsuerdsID"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["Insurance"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["dtDATE"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["BillingType"].ColumnName + " Like '" + _strsearch + "%')";
                                                    }
                                                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted))
                                                    {
                                                        sFilter = sFilter + "AND (" + dv.Table.Columns["Patient"].ColumnName + " Like '" + _strsearch + "%' OR "+
                                                                dv.Table.Columns["sAccountNo"].ColumnName + " Like '" + _strsearch + "%' OR " +
                                                                dv.Table.Columns["Guarantor"].ColumnName + " Like '" + _strsearch + "%' OR " +                                                                
                                                                dv.Table.Columns["sAddress"].ColumnName + " Like '" + _strsearch + "%')";                                                             
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                            else
                            { dv.RowFilter = ""; }
                            dv.RowFilter = sFilter;
                            if (dv.ToTable().Rows.Count > 0)
                            {
                                _bResult = true;
                                if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                                {
                                    tsb_PrintClaimData.Visible = true;
                                    tsb_PrintClaimForm.Visible = true;
                                }
                            }
                            else
                            {
                                if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                                {
                                    tsb_PrintClaimData.Visible = false;
                                    tsb_PrintClaimForm.Visible = false;
                                }
                            }
                            c1SubBatch.DataSource = dv;
                            if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                            { DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS"); }
                            else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements) || iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted))
                            { DesignGrid("CLAIM_MANAGER_STATEMENTS"); }
                            #endregion
                        }
                        break;

                    default: break;
                }
            }
            catch //(Exception ex)
            {
                
            }
            finally
            {
            }
            return _bResult;
        }

        private bool SearchBatch(string strSearchKey, DataView dtView)
        {
            bool _bResult = false;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                RemoveSearchClaimText();

                string sFilter = String.Empty;

                DataTable dt = new DataTable();
                DataView dv = null;
                dv = dtView;

                if (dv != null)
                {
                    strSearchKey = strSearchKey.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                    if (strSearchKey.Length > 1)
                    {
                        string str = strSearchKey.Substring(1).Replace("%", "");
                        strSearchKey = strSearchKey.Substring(0, 1) + str;
                    }
                    if (strSearchKey.Trim() != "")
                    {
                        sFilter = dv.Table.Columns["sBatchName"].ColumnName + " Like '%" + strSearchKey + "%'";
                    }
                }
                else
                {
                    dv.RowFilter = "";
                }

                dv.RowFilter = sFilter;

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    c1trvBatch.RowSel = -1;
                    c1trvBatch.Select(-1, -1, false);

                    if (dv.ToTable().Rows.Count > 0)
                    {
                        _bResult = true;
                        c1trvBatch.DataSource = dv;
                        DesignBatchTreeGrid(c1trvBatch);

                        c1trvBatch.RowSel = 0;
                        c1trvBatch.Select(0, c1trvBatch.Cols["sBatchName"].Index, true);
                    }
                    else
                    {
                        c1trvBatch.RowSel = -1;
                        c1trvBatch.Select(-1, -1, false);                       
                        c1BatchGrid.DataSource = null;
                        DesignGrid("BATCH");
                        if (c1BatchGrid.Rows.Count > 1)
                        { c1BatchGrid.Rows.RemoveRange(1, c1BatchGrid.Rows.Count - 1); }
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    c1trvBatch_SentBatch.RowSel = -1;
                    c1trvBatch_SentBatch.Select(-1, -1, false);

                    if (dv.ToTable().Rows.Count > 0)
                    {
                        _bResult = true;
                        c1trvBatch_SentBatch.DataSource = dv;
                        DesignBatchTreeGrid(c1trvBatch_SentBatch);

                        c1trvBatch_SentBatch.RowSel = 0;
                        c1trvBatch_SentBatch.Select(0, c1trvBatch_SentBatch.Cols["sBatchName"].Index, true);
                    }
                    else
                    {
                        c1trvBatch_SentBatch.RowSel = -1;
                        c1trvBatch_SentBatch.Select(-1, -1, false);                      
                        c1BatchGridSentBatch.DataSource = null;
                        DesignGrid("SENTBATCH");
                        if (c1BatchGridSentBatch.Rows.Count > 1)
                        { c1BatchGridSentBatch.Rows.RemoveRange(1, c1BatchGridSentBatch.Rows.Count - 1); }

                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name) 
                {  
                    c1AllBatch.RowSel = -1;
                    c1AllBatch.Select(-1, -1, false);
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_Statements)
                        {
                            Tsb_BatchSend.Visible = true;
                            tsb_View.Visible = true;
                        }
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_Statements_Submitted)
                        {
                            tsb_View.Visible = true;
                        }
                        if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            tsb_Print.Visible = true;
                            tsb_PrintForm.Visible = true;
                            tsb_PrintClaimData.Visible = true;
                            tsb_PrintClaimForm.Visible = true;
                        }

                        _bResult = true;
                        c1AllBatch.DataSource = dv;
                        DesignClaimBatchTreeGrid(c1AllBatch);
                        c1AllBatch.RowSel = 0;
                        c1AllBatch.Select(0, c1AllBatch.Cols["sBatchName"].Index, true);
                    }
                    else
                    {
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_Statements || iFileTypeID == (int)EDIFileType.OutBox_Statements_Submitted)
                        {
                            Tsb_BatchSend.Visible = false;
                            tsb_View.Visible = false;
                        }
                        if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            tsb_Print.Visible = false;
                            tsb_PrintForm.Visible = false;
                            tsb_PrintClaimData.Visible = false;
                            tsb_PrintClaimForm.Visible = false;
                        }

                        c1AllBatch.RowSel = -1;
                        c1AllBatch.Select(-1, -1, false);
                        c1SubBatch.DataSource = null;

                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");
                        }
                        else if (iFileTypeID == (int)EDIFileType.OutBox_Statements || iFileTypeID == (int)EDIFileType.OutBox_Statements_Submitted)
                        {
                            DesignGrid("CLAIM_MANAGER_STATEMENTS");
                        }
                        if (c1SubBatch.Rows.Count > 1)
                        {
                            c1SubBatch.Rows.RemoveRange(1, c1SubBatch.Rows.Count - 1);
                        }
                    }                    
                }                
            }
            catch //(Exception ex)
            {                
                //..pending work here if exception comes should set to default load
            }
            finally
            { this.Cursor = Cursors.Default; }
            return _bResult;
        }

        private bool SearchClaimAcrossBatch(string strSearchKey)
        {
            bool _bResult = false;
            int nType = 0;      //0-ElectronicsClaims ,1-PaperClaims
            int nStatus = 0;    //16-Electronics (To be Submitted),17-Electronics (Submitted),0-Paper(To be Printed),1-Paper(Printed)           
            DataTable dt = new DataTable();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                RemoveSearchClaimText();
                c1AllBatch.RowSel = -1;
                c1AllBatch.Select(-1, -1, false);

                if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name) 
                {
                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission))
                    {
                        nType = 0; nStatus = 16;
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                    {
                        nType = 0; nStatus = 17;
                    }

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                    {
                        nType = 1; nStatus = 0;
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                    {
                        nType = 1; nStatus = 1;
                    }

                    dt = GetClaimsAcrossBatch(nType, nStatus, strSearchKey);
                    
                    if (dt.Rows.Count > 0)
                    {
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_Statements)
                        {
                            Tsb_BatchSend.Visible = true;
                            tsb_View.Visible = true;
                        }
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_Statements_Submitted)
                        {
                            tsb_View.Visible = true;
                        }
                        if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            tsb_Print.Visible = true;
                            tsb_PrintForm.Visible = true;
                            tsb_PrintClaimData.Visible = true;
                            tsb_PrintClaimForm.Visible = true;
                        }

                        if (!dt.Columns.Contains("sCellImg"))
                        {
                            dt.Columns.Add("Img").SetOrdinal(0);
                        }
                        _bResult = true;
                        c1AllBatch.DataSource = null;
                        c1AllBatch.DataSource = dt;
                        DesignClaimBatchTreeGrid(c1AllBatch);
                        c1AllBatch.RowSel = 0;
                        c1AllBatch.Select(0, c1AllBatch.Cols["sBatchName"].Index, true);
                    }
                    else
                    {
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_Statements || iFileTypeID == (int)EDIFileType.OutBox_Statements_Submitted)
                        {
                            Tsb_BatchSend.Visible = false;
                            tsb_View.Visible = false;
                        }
                        if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            tsb_Print.Visible = false;
                            tsb_PrintForm.Visible = false;
                            tsb_PrintClaimData.Visible = false;
                            tsb_PrintClaimForm.Visible = false;
                        }

                        c1AllBatch.RowSel = -1;
                        c1AllBatch.Select(-1, -1, false);
                        c1AllBatch.DataSource = null;
                        if (c1AllBatch.Rows.Count > 0) { c1AllBatch.Rows.RemoveRange(0, c1AllBatch.Rows.Count); }

                        c1SubBatch.DataSource = null;

                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");
                        }                       
                        if (c1SubBatch.Rows.Count > 1)
                        {
                            c1SubBatch.Rows.RemoveRange(1, c1SubBatch.Rows.Count - 1);
                        }
                    }
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
            finally
            { this.Cursor = Cursors.Default; dt = null; }
            return _bResult;
        }

        private void RemoveSearchClaimText()
        {
            try
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    txtBatchSearch.TextChanged -= new EventHandler(txtSearch_TextChanged);
                    txtBatchSearch.Text = "";
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    txtBatchSearch_SentBatch.TextChanged -= new EventHandler(txtSearch_TextChanged);
                    txtBatchSearch_SentBatch.Text = "";
                }
                else if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name)
                {
                    txtSearchAllBatch.TextChanged -= new EventHandler(txtSearchAllBatch_TextChanged);
                    txtSearchSubBatch.Text = "";
                }

            }
            catch (Exception)
            { } //blank catch
            finally
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    txtBatchSearch.TextChanged += new EventHandler(txtSearch_TextChanged);
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    txtBatchSearch_SentBatch.TextChanged += new EventHandler(txtSearch_TextChanged);
                }
                else if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name)
                {
                    txtSearchAllBatch.TextChanged += new EventHandler(txtSearchAllBatch_TextChanged);                 
                }
            }
        }

        private void RemoveSearchBatchText()
        {
            try
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    txtSearchUnsentBatches.TextChanged -= new EventHandler(txtSearchBatches_TextChanged);
                    txtSearchUnsentBatches.Text = "";
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    txtSearchSentBatches.TextChanged -= new EventHandler(txtSearchBatches_TextChanged);
                    txtSearchSentBatches.Text = "";
                }
                else if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name)
                {
                    txtSearchAllBatch.TextChanged -= new EventHandler(txtSearchAllBatch_TextChanged);
                    txtSearchAllBatch.Text = "";
                }                
            }
            catch (Exception)
            { } //blank catch
            finally
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    txtSearchUnsentBatches.TextChanged += new EventHandler(txtSearchBatches_TextChanged);
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    txtSearchSentBatches.TextChanged += new EventHandler(txtSearchBatches_TextChanged);
                }
                else if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name)
                {
                    txtSearchAllBatch.TextChanged += new EventHandler(txtSearchAllBatch_TextChanged);                 
                }
            }
        }


        public void UpdateSplittedClaim(Int64 _MastertranId, Int64 _tranId, Int64 _ClinicID)
        {
            gloDatabaseLayer.DBLayer ODB = null;
            try
            {
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                ODB.Connect(false);
                string _strquery = "Update BL_Transaction_Claim_MST WITH(READPAST) set nStatus='" + TransactionStatus.Rejected.GetHashCode() + "' where nTransactionID=" + _tranId + " and  nTransactionMasterID=" + _MastertranId + " and nClinicID=" + _ClinicID + "";
                ODB.Execute_Query(_strquery);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ODB != null)
                {
                    ODB.Disconnect();
                    ODB.Dispose();
                }
            }
        }

        public void SetChargesCheckBox()
        {
            #region "set Check box of charges tab"

            int index = 1;
            int _selectedclaims = 0;
            if (SelectedCharges.Count > 0)
            {
                for (index = 1; index < c1QueuedClaims.Rows.Count; index++)
                {
                    if (SelectedCharges.Contains((c1QueuedClaims.GetData(index, c1QueuedClaims.Cols["TransactionID"].Index))))
                    {
                        c1QueuedClaims.SetCellCheck(index, c1QueuedClaims.Cols["Select"].Index, CheckEnum.Checked);
                        _selectedclaims++;
                    }

                }
            }
            //c1QueuedClaims.Update();

            //c1QueuedClaims.FinishEditing();
            //c1QueuedClaims.Refresh();

            #endregion

            #region "Select All Checkbox"

            //*********************************************************************************************************
            //Checking for all row is selected or not
            int _colIndex = c1QueuedClaims.Cols["Select"].Index;
            bool _SelectAll = false;
            if (index == _selectedclaims)
            {
                _SelectAll = true;
            }

            if (_SelectAll == true)
            {
                tsb_Select.Text = "DeSelect All";
                tsb_Select.Tag = "Deselect";
            }
            else
            {
                tsb_Select.Text = "Select All";
                tsb_Select.Tag = "Select";
            }
            //***********************************************************************************************************

            #endregion
        }

        private void DeletePaper_Claim(gloGeneralItem.gloItems oItems)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                string _strquery;
                if (oItems != null && oItems.Count > 0)
                {
                    oDB.Connect(false);
                    for (int i = 0; i < oItems.Count; i++)
                    {
                        if (oItems[i].Description != "") // IF SUBCLAIM NUMBER IS NOT PRESENT //
                            _strquery = " DELETE BL_CMSEDI_Claim_Send WHERE nClaimno = " + oItems[i].Code + " AND sSubClaimNo = '" + oItems[i].Description + "' AND nClinicID = " + _ClinicID + " ";
                        else
                            _strquery = " DELETE BL_CMSEDI_Claim_Send WHERE nClaimno = " + oItems[i].Code + " AND nClinicID=" + _ClinicID + " ";

                        oDB.Execute_Query(_strquery);
                    }

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
        }

        private void DeleteBatch(Int64 _nBatchID, string _sBatchName)
        {
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                string _strquery = "Delete BL_Transaction_Batch where nBatchID=" + _nBatchID + " and nClinicID=" + _ClinicID + " ";
                ODB.Connect(false);
                ODB.Execute_Query(_strquery);

                _strquery = "Delete BL_Transaction_Batch_DTL where nBatchID =" + _nBatchID + " and nClinicID=" + _ClinicID + "";
                ODB.Execute_Query(_strquery);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                ODB.Disconnect();
                ODB.Dispose();
            }
        }

        private void DeleteBatchForOneClaim(Int64 _nBatchID, string _sBatchName, Int64 _nClaimNo, Int64 _nTransactionMasterID, Int64 _nTransactionID)
        {
            gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                string _strquery = "Delete BL_Transaction_Batch_DTL where nBatchID =" + _nBatchID + " and nClaimNo=" + _nClaimNo + " and nTransactionMasterID=" + _nTransactionMasterID + " and nTransactionID=" + _nTransactionID + " and nClinicID=" + _ClinicID + "";
                ODB.Connect(false);
                ODB.Execute_Query(_strquery);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                ODB.Disconnect();
                ODB.Dispose();
            }
        }

        private Int64 SaveElectronicClaim(Int64 nBatchID, string sBatchName, string s837FilePath, TransactionStatus enmStatus, BillingType BillingType, Int32 BatchBillingMethod)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters;
            gloEDIGeneration oEDI = new gloEDIGeneration("", 0, 0); // PARAMETERS WILL NOT USED IN THIS SECTION // 
            Int64 _Result = 0;

            try
            {
                object oResult;
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchID", nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sBatchName", sBatchName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@i837File", oEDI.ConvertFileToBinary(s837FilePath), ParameterDirection.Input, SqlDbType.Image);
                oDBParameters.Add("@i997File", DBNull.Value, ParameterDirection.Input, SqlDbType.Image);
                oDBParameters.Add("@nStatus", enmStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@dtCreatedDate", DateTime.Now, ParameterDirection.Input, SqlDbType.DateTime);
                oDBParameters.Add("@nUserID", _UserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@BillingType", Convert.ToInt16(BillingType), ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@sendUserID", _UserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sendUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@BatchBillingMethod", BatchBillingMethod, ParameterDirection.Input, SqlDbType.VarChar);

                oDB.Connect(false);
                oDB.Execute("BL_INUP_CMSEDI_Claim", oDBParameters, out oResult);
                oDB.Disconnect();

                if (oResult != null && oResult.ToString() != "")
                    _Result = Convert.ToInt64(oResult);

                //CrossWalk. //SP call Moved to above sp from 6040.
                //AddBacthCrossWalk(nBatchID);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return _Result;
        }

        private Int64 SaveElectronicClaimDetail(Int64 nMasterID, Int64 nClaimNumber, string sSubClaimNumber, Int64 nBillingTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters;
            gloEDIGeneration oEDI = new gloEDIGeneration("", 0, 0); // PARAMETERS WILL NOT USED IN THIS SECTION // 
            Int64 _Result = 0;

            try
            {
                object oResult;
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@nID", nMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nDetailID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nClaimNo", nClaimNumber, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sSubClaimNo", sSubClaimNumber, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nBillingTransactionID", nBillingTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nRemitID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@i276File", DBNull.Value, ParameterDirection.Input, SqlDbType.Image);
                oDBParameters.Add("@s276FileName", DBNull.Value, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@n277ID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@n997ID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Connect(false);
                oDB.Execute("BL_INUP_CMSEDI_Claim_DTL", oDBParameters, out oResult);
                oDB.Disconnect();

                if (oResult != null && oResult.ToString() != "")
                    _Result = Convert.ToInt64(oResult);



            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return _Result;
        }

        private bool DeleteElectronicClaim(Int64 nBatchID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            bool _Result = false;
            try
            {
                string _Query = " DELETE FROM BL_CMSEDI_ElectronicClaim_DTL WHERE nID = (SELECT nID FROM BL_CMSEDI_ElectronicClaim WITH(NOLOCK) WHERE nBatchID = " + nBatchID + ");	" +
                    " DELETE FROM BL_CMSEDI_ElectronicClaim WHERE nBatchID = " + nBatchID + "";
                oDB.Connect(false);
                oDB.Execute_Query(_Query);
                oDB.Disconnect();

                _Result = true;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); oDB = null; }
            }
            return _Result;

        }

        private void AddBacthCrossWalk(Int64 nBatchID)
        {
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            gloDatabaseLayer.DBLayer oDB = null;
            try
            {
                //gloPM5070
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                oDBParameters.Clear();
                oDBParameters.Add("@BatchID", nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Execute("BL_IN_Transaction_Batch_CPTMapping", oDBParameters);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (oDBParameters != null) oDBParameters.Dispose();
            }
        }

        // SUDHIR 20100323 // TO REFRESH BATCH DETAILS AFTER INSURANCE PAYMENT DONE //
        public void RefreshBatchGrid()
        {
            //Not in use
            try
            {
                if (tabManager.SelectedTab.Tag.ToString() == "Batch" && trvBatch.Nodes.Count > 0)
                {
                    TreeNode oNode = trvBatch.SelectedNode;
                    if (oNode != null)
                    {
                        trvBatch.SelectedNode = null;
                        trvBatch.SelectedNode = oNode;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }

        }

        //Function Added By Debasish Das on 7th Apr 2010
        public bool getCopyEDIFiles()
        {
            gloSettings.GeneralSettings oSetting = new gloSettings.GeneralSettings(_databaseconnectionstring);
            DataTable dtversion = new DataTable();
            dtversion = oSetting.GetSetting("COPY_EDI_FILES", 0);
            bool _result = false;

            if (dtversion != null && dtversion.Rows.Count > 0)
            {
                if (Convert.ToString(dtversion.Rows[0]["sSettingsValue"]).Trim() == "1")
                {
                    _result = true;
                }
                else
                {
                    _result = false;
                }
            }
            else
            {
                _result = false;
            }
            return _result;
        }

        private void FillInsuranceCompany()
        {
            try
            {
                this.cmbInsuranceCompany.SelectedIndexChanged -= new System.EventHandler(this.cmbInsuranceCompany_SelectedIndexChanged);
                dtInsuranceCompany = GetInsuranceCompanyDetails();
                if (dtInsuranceCompany != null && dtInsuranceCompany.Rows.Count > 0)
                {
                    DataRow dr = dtInsuranceCompany.NewRow();
                    dr["nID"] = 0;
                    dr["sDescription"] = "";
                    dtInsuranceCompany.Rows.InsertAt(dr, 0);
                    dtInsuranceCompany.AcceptChanges();
                    cmbInsuranceCompany.DataSource = dtInsuranceCompany;
                    cmbInsuranceCompany.DisplayMember = "sDescription";
                    cmbInsuranceCompany.ValueMember = "nID";
                    cmbInsuranceCompany.Refresh();
                }
            }

            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                this.cmbInsuranceCompany.SelectedIndexChanged += new System.EventHandler(this.cmbInsuranceCompany_SelectedIndexChanged);
            }
        }

        public DataTable GetInsuranceCompanyDetails()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable _dtInsCompanies = null;
            string _sqlQuery = "";

            try
            {
                _sqlQuery = "SELECT ISNULL(nID,0) AS nID,ISNULL (sCode,'') AS sCode,ISNULL (sDescription,'') AS sDescription," +
                            " ISNULL (nReportCategoryID,0) AS nReportCategoryID, ISNULL(nInsuranceType,0) AS nInsuranceType," +
                            " ISNULL(nFeeScheduleID,0) AS nFeeScheduleID, ISNULL(sAddressLine1,'') AS sAddressLine1," +
                            " ISNULL(sAddressLine2,'') AS sAddressLine2, ISNULL(sCity,'') AS sCity, ISNULL(sState,'') AS sState," +
                            " ISNULL(sZip,'') AS sZip, ISNULL(sPayerID,'') AS sPayerID, ISNULL(nClinicID,0) AS nClinicID" +
                            " FROM Contacts_InsuranceCompany_MST WITH(NOLOCK) WHERE nClinicID = " + _ClinicID + " ORDER BY sDescription";

                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtInsCompanies);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            { if (oDB != null) { oDB.Dispose(); } }

            return _dtInsCompanies;
        }

        private void BindUserName(ComboBox oComboBox)
        {
            try
            {
                DataTable oBindTable = new DataTable();

                oBindTable.Columns.Add("ID");
                oBindTable.Columns.Add("Description");
                DataRow oRow;
                oRow = oBindTable.NewRow();
                oRow[0] = appSettings["UserID"];
                oRow[1] = appSettings["UserName"];
                oBindTable.Rows.Add(oRow);

                oComboBox.DataSource = oBindTable;
                oComboBox.DisplayMember = "Description";
                oComboBox.ValueMember = "ID";
            }
            catch //(Exception ex)
            {

            }
        }

        private void FillReportingCategory()
        {
            try
            {
                this.cmbReportingCategory.SelectedIndexChanged -= new System.EventHandler(this.cmbReportingCategory_SelectedIndexChanged);
                DataTable dtReportingCategory = GetReportingCategory();
                if (dtReportingCategory != null && dtReportingCategory.Rows.Count > 0)
                {
                    DataRow dr = dtReportingCategory.NewRow();
                    dr["nID"] = 0;
                    dr["sDescription"] = "";
                    dtReportingCategory.Rows.InsertAt(dr, 0);
                    dtReportingCategory.AcceptChanges();

                    cmbReportingCategory.DataSource = dtReportingCategory;
                    cmbReportingCategory.DisplayMember = "sDescription";
                    cmbReportingCategory.ValueMember = "nID";
                    cmbReportingCategory.Refresh();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                this.cmbReportingCategory.SelectedIndexChanged += new System.EventHandler(this.cmbReportingCategory_SelectedIndexChanged);
            }


        }

        public DataTable GetReportingCategory()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable _dtRptCatgegory = null;
            string _sqlQuery = "";

            try
            {
                _sqlQuery = "SELECT  ISNULL(nID,0) AS nID, ISNULL(sCode,'') AS sCode,ISNULL (sDescription,'') AS SDescription " +
                    " FROM Contacts_InsuranceReportingCategory_MST WITH(NOLOCK) WHERE nClinicID = " + _ClinicID + " ORDER BY SDescription ";

                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtRptCatgegory);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            { if (oDB != null) { oDB.Dispose(); } }

            return _dtRptCatgegory;
        }

        private void FillClearingHouse()
        {
            try
            {
                DataTable dtClearingHouse = GetClearingHouse();
                if (dtClearingHouse != null && dtClearingHouse.Rows.Count > 0)
                {
                    DataRow dr = dtClearingHouse.NewRow();
                    dr["nClearingHouseID"] = 0;
                    dr["sClearingHouseCode"] = "";
                    dtClearingHouse.Rows.InsertAt(dr, 0);
                    dtClearingHouse.AcceptChanges();

                    cmbClearingHouse.DataSource = dtClearingHouse;
                    cmbClearingHouse.DisplayMember = "sClearingHouseCode";
                    cmbClearingHouse.ValueMember = "nClearingHouseID";
                    cmbClearingHouse.Refresh();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                //this.cmbClearingHouse.SelectedIndexChanged += new System.EventHandler(this.cmbClearingHouse_SelectedIndexChanged);
            }


        }

        private DataTable GetClearingHouse()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable _dtClearingHouse = null;
            string _sqlQuery = "";

            try
            {
                _sqlQuery = "Select ISNULL(nClearingHouseID,0) as nClearingHouseID,ISNULL(sClearingHouseCode,'') as sClearingHouseCode from BL_ClearingHouse_MST With (NoLock) order by isnull(BL_ClearingHouse_MST.bIsDefault,0) desc";
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtClearingHouse);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            { if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); } }

            return _dtClearingHouse;
        }

        public Int64 GetClearingHouseUndo(Int64 ContactID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            DataTable dtClearingHouse = null;
            Int64 _ClearingHouseID = 0;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);
                oDBParameters.Add("@nContactId", ContactID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@nClinicId", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                dtClearingHouse = new DataTable();
                oDB.Retrive("EDI_GetClearingHouse", oDBParameters, out dtClearingHouse);
                //Same SP used in ClaimManager.
                if (dtClearingHouse != null && dtClearingHouse.Rows.Count > 0)
                {
                    _ClearingHouseID = Convert.ToInt64(dtClearingHouse.Rows[0]["nClearingHouseID"]);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (oDBParameters != null)
                {

                    oDBParameters.Dispose();
                }
            }
            return _ClearingHouseID;
        }

        private void FillLastcloseDate()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            System.Data.DataTable _dtclosedate = new System.Data.DataTable();
            string _sqlQuery = "";
            try
            {
                _sqlQuery = "select dbo.CONVERT_TO_DATE (max(nCloseDayDate)) as nCloseDayDate from dbo.BL_CloseDays WITH(NOLOCK)";
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtclosedate);

                if (_dtclosedate.Rows.Count > 0)
                {
                    if (Convert.ToString(_dtclosedate.Rows[0][0]).Trim() != String.Empty)
                    {
                        maskedCloseDate.Text = Convert.ToDateTime(Convert.ToString(_dtclosedate.Rows[0][0]).Trim()).ToString("MM/dd/yyyy");
                        maskedCloseDate.Focus();
                    }
                }
                oDB.Disconnect();

            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            { if (oDB != null) { oDB.Dispose(); } }

        }

        private string GetLastcloseDate()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            System.Data.DataTable _dtclosedate = new System.Data.DataTable();
            string _sqlQuery = "";
            string _return = String.Empty;
            try
            {
                _sqlQuery = "select dbo.CONVERT_TO_DATE (max(nCloseDayDate)) as nCloseDayDate from dbo.BL_CloseDays WITH(NOLOCK)";
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtclosedate);

                if (_dtclosedate.Rows.Count > 0)
                {
                    _return = Convert.ToDateTime(Convert.ToString(_dtclosedate.Rows[0][0]).Trim()).ToString("MM/dd/yyyy");
                }
                oDB.Disconnect();

            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            { if (oDB != null) { oDB.Dispose(); } }

            return _return;
        }

        void ShowTooltipOnComboBox(object sender, DrawItemEventArgs e)
        {

            try
            {
                combo = (ComboBox)sender;
                if (combo.Items.Count > 0 && e.Index >= 0)
                {



                    e.DrawBackground();
                    using (SolidBrush br = new SolidBrush(e.ForeColor))
                    {
                        e.Graphics.DrawString(combo.GetItemText(combo.Items[e.Index]).ToString(), e.Font, br, e.Bounds);
                    }

                    if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
                    {
                        if (combo.DroppedDown)
                        {
                            string txt = combo.GetItemText(combo.Items[e.Index]).ToString();


                            if (getWidthofListItems(combo.GetItemText(combo.Items[e.Index]).ToString(), combo) >= combo.DropDownWidth - 20)
                            {
                                if (toolTip1.GetToolTip(combo) != txt)
                                {
                                    this.toolTip1.Show(combo.GetItemText(combo.Items[e.Index]), combo, e.Bounds.Right - 180, e.Bounds.Bottom);
                                }
                            }
                            else
                            {
                                this.toolTip1.SetToolTip(combo, "");
                            }
                        }
                        else
                        {
                            this.toolTip1.Hide(combo);
                        }
                    }
                    else
                    {
                        //this.tooltip_Billing.SetToolTip(combo,"");
                    }
                    e.DrawFocusRectangle();



                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
        }

        private int getWidthofListItems(string _text, ComboBox combo)
        {
            //Code Review Changes: Dispose Graphics object
            int width = 0;
            Graphics g = this.CreateGraphics();
            if (g != null)
            {
                SizeF s = g.MeasureString(_text, combo.Font);
                width = Convert.ToInt32(s.Width);
                //Dispose graphics object
                g.Dispose();
            }

            return width;
        }

        private void OpenUB04Form()
        {

            try
            {
                ArrayList _CurTrnIDs = new ArrayList();
                ArrayList _MasTrnIDs = new ArrayList();
                int iCount = 0;
                _BillingTypeId = 1;
                switch (Convert.ToString(tabManager.SelectedTab.Tag))
                {
                    case "Queue":
                        {
                            #region " Get selected transaction id's "

                            for (int rowIndex = 1; rowIndex < c1QueuedClaims.Rows.Count; rowIndex++)
                            {
                                if (c1QueuedClaims.GetCellCheck(rowIndex, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                                {
                                    if (c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index) != null
                                        && Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index)) != ""
                                        && (Convert.ToString(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["Status"].Index)) == TransactionStatus.Transacted.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _MastertrnId = 0;//MaheshB 02152010
                                        Int64 _patientId = 0;

                                        _transactionId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (GetBillingType(_transactionId, _MastertrnId) != Convert.ToInt16(BillingType.Institutional))
                                            {
                                                MessageBox.Show("Select institutional claim(s). ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                        }
                                    }

                                }
                            }

                            #endregion

                            if (_CurTrnIDs.Count > 0)
                            {
                                frmUB04 ofrmUB04 = new frmUB04(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                ofrmUB04.objFrmBillingBatch_New = this;
                                ofrmUB04.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                ofrmUB04.ShowDialog(this);

                                #region " New Code Added "

                                gloSettings.GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);
                                try
                                {
                                    // Check Claims ANSI Version Admin Settings
                                    if (cmbBillingMethod.SelectedIndex != 0)
                                    {
                                        if (ogloSettings.getANSIVersion(0, "CLAIM", _ClinicID) == 0)
                                        {
                                            MessageBox.Show("Claims ANSI Version has not been set.  Billing may not proceed." + Environment.NewLine + "Please review in gloPM Admin. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            //return;
                                            cmbBillingMethod.SelectedValue = (int)BatchBillingMethod.Multiple;
                                        }
                                        if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                                    }
                                    //----------x---
                                }
                                catch (Exception ex)
                                {
                                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                                }
                                finally
                                {
                                    if (ogloSettings != null) { ogloSettings.Dispose(); ogloSettings = null; }
                                }

                                SetView();
                                c1QueuedClaims.Row = c1QueuedClaims.FindRow(Convert.ToDecimal(ofrmUB04.LastAccessedTransaction), 0, c1QueuedClaims.Cols["TransactionID"].Index, true);

                                if (c1QueuedClaims.Row < 0)
                                {
                                    for (iCount = 1; iCount <= c1QueuedClaims.Rows.Count - 1; iCount++)
                                    {
                                        if (c1QueuedClaims.GetCellCheck(iCount, c1QueuedClaims.Cols["Select"].Index) == CheckEnum.Checked)
                                        {
                                            c1QueuedClaims.Select(iCount, c1QueuedClaims.Cols["Select"].Index);
                                            break;
                                        }
                                    }
                                }

                                #endregion
                                if (iCount == c1QueuedClaims.Rows.Count)
                                {
                                    c1QueuedClaims.Select(1, c1QueuedClaims.Cols["Select"].Index);
                                }



                                ofrmUB04.Dispose();
                                SelectedCharges.Clear();
                            }
                            else
                            {
                                MessageBox.Show("Select transaction.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;

                    case "Batch":
                        {
                            if (c1BatchGrid != null && c1BatchGrid.Rows.Count > 1)
                            {
                                #region " Get selected transaction id's "
                                for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
                                {

                                    if (c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()) ||
                                            (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)) == TransactionStatus.Resent.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        Int64 _MastertrnId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (_CurTrnIDs.Count == 1)
                                            {
                                                // _BillingTypeId = Convert.ToInt16(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["BillingTypeId"].Index));
                                                _BillingTypeId = GetBillingType(_transactionId, _MastertrnId);
                                            }

                                            else if (_BillingTypeId != GetBillingType(_transactionId, _MastertrnId))
                                            {
                                                MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }


                                        }
                                    }



                                }
                                if (UB04Setting == true)
                                {
                                    if (_BillingTypeId == 1)
                                    {
                                        MessageBox.Show("Select institutional claim(s) batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }

                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    Int64 SelectedRow = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                    int indexofSelectedRow = 0;
                                    if (_CurTrnIDs.Contains(SelectedRow))
                                        indexofSelectedRow = _CurTrnIDs.IndexOf(SelectedRow);

                                    frmUB04 ofrmUB04 = new frmUB04(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmUB04.objFrmBillingBatch_New = this;
                                    ofrmUB04._TransactionIdCounter = indexofSelectedRow;
                                    ofrmUB04.TransactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionID"].Index));
                                    ofrmUB04.MstTransactionId = Convert.ToInt64(c1BatchGrid.GetData(c1BatchGrid.RowSel, c1BatchGrid.Cols["TransactionMasterID"].Index));
                                    ofrmUB04.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmUB04.ShowDialog(this);

                                    SetView();
                                    c1BatchGrid.Row = c1BatchGrid.FindRow(Convert.ToDecimal(ofrmUB04.LastAccessedTransaction), 0, c1BatchGrid.Cols["TransactionID"].Index, true);

                                    if (c1BatchGrid.Row < 0)
                                    {
                                        c1BatchGrid.Select(1, c1BatchGrid.Cols["TransactionID"].Index);
                                        ofrmUB04.Dispose();
                                        break;
                                    }
                                    ofrmUB04.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select claims having status Batch or SendToClaimManager. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                            else
                            {
                                MessageBox.Show("Select claim to view.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;
                    case "SentBatch":
                        {
                            if (c1BatchGridSentBatch != null && c1BatchGridSentBatch.Rows.Count > 1)
                            {
                                #region " Get selected transaction id's "
                                for (int rowIndex = 1; rowIndex < c1BatchGridSentBatch.Rows.Count; rowIndex++)
                                {

                                    if (c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index) != null
                                            && Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) != ""
                                            && (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Batch.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClaimManager.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.SendToClearingHouse.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.InsurancePaid.ToString()) ||
                                            (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)) == TransactionStatus.Resent.ToString()))
                                    {
                                        Int64 _transactionId = 0;
                                        Int64 _patientId = 0;
                                        Int64 _MastertrnId = 0;

                                        _transactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                        _MastertrnId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index));
                                        _patientId = Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientID"].Index));
                                        if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                        if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                        if (UB04Setting == true)
                                        {
                                            if (_CurTrnIDs.Count == 1)
                                            {
                                                // _BillingTypeId = Convert.ToInt16(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["BillingTypeId"].Index));
                                                _BillingTypeId = GetBillingType(_transactionId, _MastertrnId);
                                            }

                                            else if (_BillingTypeId != GetBillingType(_transactionId, _MastertrnId))
                                            {
                                                MessageBox.Show("Select claim(s) of same billing type. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }


                                        }
                                    }



                                }
                                if (UB04Setting == true)
                                {
                                    if (_BillingTypeId == 1)
                                    {
                                        MessageBox.Show("Select institutional claim(s) batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }

                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    Int64 SelectedRow = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                    int indexofSelectedRow = 0;
                                    if (_CurTrnIDs.Contains(SelectedRow))
                                        indexofSelectedRow = _CurTrnIDs.IndexOf(SelectedRow);

                                    frmUB04 ofrmUB04 = new frmUB04(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmUB04.objFrmBillingBatch_New = this;
                                    ofrmUB04._TransactionIdCounter = indexofSelectedRow;
                                    ofrmUB04.TransactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionID"].Index));
                                    ofrmUB04.MstTransactionId = Convert.ToInt64(c1BatchGridSentBatch.GetData(c1BatchGridSentBatch.RowSel, c1BatchGridSentBatch.Cols["TransactionMasterID"].Index));
                                    ofrmUB04.CallingTab = Convert.ToString(tabManager.SelectedTab.Tag);
                                    ofrmUB04.ShowDialog(this);

                                    SetView();
                                    c1BatchGridSentBatch.Row = c1BatchGridSentBatch.FindRow(Convert.ToDecimal(ofrmUB04.LastAccessedTransaction), 0, c1BatchGridSentBatch.Cols["TransactionID"].Index, true);

                                    if (c1BatchGridSentBatch.Row < 0)
                                    {
                                        c1BatchGridSentBatch.Select(1, c1BatchGridSentBatch.Cols["TransactionID"].Index);
                                        ofrmUB04.Dispose();
                                        break;
                                    }
                                    ofrmUB04.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select claims having status Batch or SendToClaimManager. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                            else
                            {
                                MessageBox.Show("Select claim to view.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        break;
                    case "Void":
                        {
                            if (c1VoidClaims != null && c1VoidClaims.Rows.Count > 0)
                            {
                                #region " Get selected transaction id's "

                                Int64 _transactionId = 0;
                                Int64 _patientId = 0;
                                Int64 _MastertrnId = 0;

                                _transactionId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nTransactionID"].Index));
                                _MastertrnId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nTransactionMasterID"].Index));
                                //_patientId = Convert.ToInt64(c1VoidClaims.GetData(c1BatchGrid.RowSel, c1VoidClaims.Cols["nPatientID"].Index));
                                _patientId = Convert.ToInt64(c1VoidClaims.GetData(c1VoidClaims.RowSel, c1VoidClaims.Cols["nPatientID"].Index));
                                if (_transactionId > 0) { _CurTrnIDs.Add(_transactionId); }
                                if (_MastertrnId > 0) { _MasTrnIDs.Add(_MastertrnId); }

                                #endregion

                                if (_CurTrnIDs.Count > 0)
                                {
                                    frmUB04 ofrmUB04 = new frmUB04(_databaseconnectionstring, _CurTrnIDs, _MasTrnIDs);
                                    ofrmUB04.ShowDialog(this);
                                    ofrmUB04.Dispose();
                                }
                                else
                                {
                                    MessageBox.Show("Select transaction ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }

                            }
                        }
                        break;

                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        public bool IsClaimOnHold(Int64 _TransactionId)
        {
            DataTable dtHold = new DataTable();
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                oDB.Connect(false);
                oDB.Retrive_Query("Select isnull(bIsHold,0) as bIsHold from BL_Transaction_Claim_Mst   WITH(NOLOCK) where nTransactionID='" + _TransactionId + "'", out dtHold);
                if (dtHold != null && dtHold.Rows.Count > 0)
                {
                    if (dtHold.Rows[0]["bIsHold"] != DBNull.Value && Convert.ToString(dtHold.Rows[0]["bIsHold"]).Trim() != "" && Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]) == true)
                    {

                        return true;
                    }

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }

                dtHold.Dispose();


            }
            return false;
        }

        #region "Fill Plan Billing Method"
        //private void AddPlanBillingMethod()
        //{
        //    DataColumn dcBillingMethod;
        //    DataRow drBillingMethod;
        //    DataTable dtBillingMethod = new DataTable();
        //    try
        //    {
        //        cmbBillingMethod.DataSource = null;
        //        dcBillingMethod = new DataColumn();
        //        dcBillingMethod.DataType = System.Type.GetType("System.Int32");
        //        dcBillingMethod.ColumnName = "ID";

        //        dtBillingMethod.Columns.Add(dcBillingMethod);

        //        dcBillingMethod = new DataColumn();
        //        dcBillingMethod.DataType = System.Type.GetType(" System.String");
        //        dcBillingMethod.ColumnName = "Desc";

        //        dtBillingMethod.Columns.Add(dcBillingMethod);

        //        drBillingMethod = dtBillingMethod.NewRow();
        //        drBillingMethod["ID"] = 0;
        //        drBillingMethod["Desc"] = "All";
        //        dtBillingMethod.Rows.Add(drBillingMethod);


        //        drBillingMethod = dtBillingMethod.NewRow();
        //        drBillingMethod["ID"] = 1;
        //        drBillingMethod["Desc"] = "Electronic";
        //        dtBillingMethod.Rows.Add(drBillingMethod);


        //        drBillingMethod = dtBillingMethod.NewRow();
        //        drBillingMethod["ID"] = 2;
        //        drBillingMethod["Desc"] = "Paper";
        //        dtBillingMethod.Rows.Add(drBillingMethod);

        //        gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");

        //        if (ogloBilling.IsenableUB04(_ClinicID))
        //        {
        //            drBillingMethod = dtBillingMethod.NewRow();
        //            drBillingMethod["ID"] = 3;
        //            drBillingMethod["Desc"] = "UB04-Electronic";
        //            dtBillingMethod.Rows.Add(drBillingMethod);


        //            drBillingMethod = dtBillingMethod.NewRow();
        //            drBillingMethod["ID"] = 4;
        //            drBillingMethod["Desc"] = "UB04-Paper";
        //            dtBillingMethod.Rows.Add(drBillingMethod);

        //        }
        //        ogloBilling.Dispose();
        //        this.cmbBillingMethod.SelectedIndexChanged -= new System.EventHandler(this.cmbBillingMethod_SelectedIndexChanged);
        //        cmbBillingMethod.DataSource = dtBillingMethod;
        //        cmbBillingMethod.DisplayMember = "Desc";
        //        cmbBillingMethod.ValueMember = "ID";
        //        cmbBillingMethod.Refresh();


        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //    }
        //    finally
        //    {
        //        this.cmbBillingMethod.SelectedIndexChanged += new System.EventHandler(this.cmbBillingMethod_SelectedIndexChanged);
        //    }
        //}

        private void AddPlanBillingMethod()
        {
            DataColumn dcBillingMethod;
            DataRow drBillingMethod;
            DataTable dtBillingMethod = new DataTable();
            try
            {
                
                cmbBillingMethod.DataSource = null;
                cmbBillingMethod.Items.Clear();
                dcBillingMethod = new DataColumn();
                dcBillingMethod.DataType = System.Type.GetType("System.Int32");
                dcBillingMethod.ColumnName = "ID";

                dtBillingMethod.Columns.Add(dcBillingMethod);

                dcBillingMethod = new DataColumn();
                dcBillingMethod.DataType = System.Type.GetType(" System.String");
                dcBillingMethod.ColumnName = "Desc";

                dtBillingMethod.Columns.Add(dcBillingMethod);


                drBillingMethod = dtBillingMethod.NewRow();
                drBillingMethod["ID"] = BatchBillingMethod.Multiple;
                drBillingMethod["Desc"] = "All";
                dtBillingMethod.Rows.Add(drBillingMethod);

                drBillingMethod = dtBillingMethod.NewRow();
                drBillingMethod["ID"] = BatchBillingMethod.CMS1500;
                drBillingMethod["Desc"] = "CMS1500 08/05"; //"Paper";
                dtBillingMethod.Rows.Add(drBillingMethod);

                drBillingMethod = dtBillingMethod.NewRow();
                drBillingMethod["ID"] = BatchBillingMethod.CMS1500New;
                drBillingMethod["Desc"] = "CMS1500 02/12"; //"Paper";
                dtBillingMethod.Rows.Add(drBillingMethod);

                gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");

                if (ogloBilling.IsenableUB04(_ClinicID))
                {
                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.ElectronicProfessionalANSI4010;
                    drBillingMethod["Desc"] = "Electronic Professional [ANSI 4010]";
                    dtBillingMethod.Rows.Add(drBillingMethod);

                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.ElectronicProfessionalANSI5010;
                    drBillingMethod["Desc"] = "Electronic Professional [ANSI 5010]";
                    dtBillingMethod.Rows.Add(drBillingMethod);


                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.UB04;
                    drBillingMethod["Desc"] = "UB04";// "UB04-Paper";
                    dtBillingMethod.Rows.Add(drBillingMethod);

                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.ElectronicInstitutionalANSI4010;
                    drBillingMethod["Desc"] = "Electronic Institutional [ANSI 4010]";//"UB04-Electronic";
                    dtBillingMethod.Rows.Add(drBillingMethod);

                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.ElectronicInstitutionalANSI5010;
                    drBillingMethod["Desc"] = "Electronic Institutional [ANSI 5010]";//"UB04-Electronic";
                    dtBillingMethod.Rows.Add(drBillingMethod);
                }
                else
                {
                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.ElectronicProfessionalANSI4010;
                    drBillingMethod["Desc"] = "Electronic [ANSI 4010]";
                    dtBillingMethod.Rows.Add(drBillingMethod);

                    drBillingMethod = dtBillingMethod.NewRow();
                    drBillingMethod["ID"] = BatchBillingMethod.ElectronicProfessionalANSI5010;
                    drBillingMethod["Desc"] = "Electronic [ANSI 5010]";
                    dtBillingMethod.Rows.Add(drBillingMethod);
                }

                drBillingMethod = dtBillingMethod.NewRow();
                drBillingMethod["ID"] = 0;
                drBillingMethod["Desc"] = "None";
                dtBillingMethod.Rows.Add(drBillingMethod);


                ogloBilling.Dispose();
                this.cmbBillingMethod.SelectedIndexChanged -= new System.EventHandler(this.cmbBillingMethod_SelectedIndexChanged);
                cmbBillingMethod.DataSource = dtBillingMethod;
                cmbBillingMethod.DisplayMember = "Desc";
                cmbBillingMethod.ValueMember = "ID";
                cmbBillingMethod.Refresh();


            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                this.cmbBillingMethod.SelectedIndexChanged += new System.EventHandler(this.cmbBillingMethod_SelectedIndexChanged);
            }
        }
        #endregion""

        private void ApplySearchCriteria()
        {
            DataView dv = null;
            string sFilter = String.Empty;
            string _strSearch = String.Empty;

            try
            {
                dv = (DataView)c1QueuedClaims.DataSource;

                if (dv != null)
                {
                    if (cmbBillingMethod.SelectedIndex >= 1)
                    {
                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["PlanBillingMethodID"].ColumnName + " = " + cmbBillingMethod.SelectedValue;
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["PlanBillingMethodID"].ColumnName + " = " + cmbBillingMethod.SelectedValue;
                        }
                    }

                    if (cmbMultiChargesTray.SelectedIndex > -1)
                    {
                        _strSearch = String.Empty;
                        for (int iCount = 0; iCount <= cmbMultiChargesTray.Items.Count - 1; iCount++)
                        {
                            if (_strSearch == String.Empty)
                                _strSearch = (Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[iCount])["ID"]));
                            else
                                _strSearch += "," + (Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[iCount])["ID"]));
                        }

                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["TrayID"].ColumnName + " IN (" + _strSearch + ")";
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["TrayID"].ColumnName + " IN (" + _strSearch + ")";
                        }
                    }

                    if (cmbMultiFacility.SelectedIndex > -1)
                    {
                        _strSearch = String.Empty;
                        for (int iCount = 0; iCount <= cmbMultiFacility.Items.Count - 1; iCount++)
                        {
                            if (_strSearch == String.Empty)
                                _strSearch = (Convert.ToString(((DataRowView)cmbMultiFacility.Items[iCount])["ID"]));
                            else
                                _strSearch += "," + (Convert.ToString(((DataRowView)cmbMultiFacility.Items[iCount])["ID"]));
                        }

                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["FacilityCode"].ColumnName + " IN (" + _strSearch + ")";
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["FacilityCode"].ColumnName + " IN (" + _strSearch + ")";
                        }
                    }

                    if (cmbInsuranceCompany.SelectedIndex >= 1)
                    {
                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["InsuranceCompanyID"].ColumnName + " = " + cmbInsuranceCompany.SelectedValue;
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["InsuranceCompanyID"].ColumnName + " = " + cmbInsuranceCompany.SelectedValue;
                        }
                    }

                    if (IsValidDate(maskedCloseDate.Text))
                    {
                        if (maskedCloseDate.Text != String.Empty)
                        {
                            if (sFilter == String.Empty)
                            {
                                sFilter += dv.Table.Columns["CloseDate"].ColumnName + " = '" + maskedCloseDate.Text + "'";
                            }
                            else
                            {
                                sFilter += " AND " + dv.Table.Columns["CloseDate"].ColumnName + " = '" + maskedCloseDate.Text + "'";
                            }
                        }
                    }

                    if (cmbUser.SelectedIndex > -1)
                    {
                        _strSearch = String.Empty;
                        for (int iCount = 0; iCount <= cmbUser.Items.Count - 1; iCount++)
                        {
                            if (_strSearch == String.Empty)
                                _strSearch = (Convert.ToString(((DataRowView)cmbUser.Items[iCount])["ID"]));
                            else
                                _strSearch += "," + (Convert.ToString(((DataRowView)cmbUser.Items[iCount])["ID"]));
                        }

                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["UserID"].ColumnName + " IN (" + _strSearch + ")";
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["UserID"].ColumnName + " IN (" + _strSearch + ")";
                        }
                    }

                    if (cmbProvider.SelectedIndex > -1)
                    {
                        _strSearch = String.Empty;
                        for (int iCount = 0; iCount <= cmbProvider.Items.Count - 1; iCount++)
                        {
                            if (_strSearch == String.Empty)
                                _strSearch = (Convert.ToString(((DataRowView)cmbProvider.Items[iCount])["ID"]));
                            else
                                _strSearch += "," + (Convert.ToString(((DataRowView)cmbProvider.Items[iCount])["ID"]));
                        }

                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["ProviderID"].ColumnName + " IN (" + _strSearch + ")";
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["ProviderID"].ColumnName + " IN (" + _strSearch + ")";
                        }
                    }

                    if (cmbReportingCategory.SelectedIndex >= 1)
                    {
                        if (sFilter == String.Empty)
                        {
                            sFilter += dv.Table.Columns["ReportingCategoryID"].ColumnName + " = " + cmbReportingCategory.SelectedValue;
                        }
                        else
                        {
                            sFilter += " AND " + dv.Table.Columns["ReportingCategoryID"].ColumnName + " = " + cmbReportingCategory.SelectedValue;
                        }
                    }
                }

                dv.RowFilter = sFilter;
                c1QueuedClaims.DataSource = dv;
                DesignGrid("QUEUE");

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void ApplySearchCriteriaFromDB()
        {
            DataTable dtSearchResult = new DataTable();

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;

            try
            {
                oDB.Connect(false);
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nBatchID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sStatusIds", 0, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_Batch_SelectTransactions", oParameters, out dtSearchResult);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }

            c1QueuedClaims.DataSource = dtSearchResult;
            DesignGrid("QUEUE");

        }

        private bool IsValidDate(object strDate)
        {
            bool Success;
            try
            {
                DateTime validatedDate;
                Success = DateTime.TryParseExact(strDate.ToString(), "MM/dd/yyyy", System.Globalization.DateTimeFormatInfo.InvariantInfo, System.Globalization.DateTimeStyles.None, out validatedDate);
                if (validatedDate != null && Success == true)
                {
                    if (validatedDate < DateTime.MaxValue && validatedDate >= Convert.ToDateTime("01/01/1900"))
                    {
                        Success = true;
                    }
                    else
                    {
                        Success = false;
                    }

                }
            }
            catch (FormatException)
            {
                Success = false; // If this line is reached, an exception was thrown

            }
            return Success;
        }

        private void LoadLastSavedSetting()
        {
            gloSettings.DatabaseSetting.DataBaseSetting oSettings = new gloSettings.DatabaseSetting.DataBaseSetting();
            try
            {
                #region "Numeric Updown Event Detach"

                this.numQueueClaimCount.ValueChanged -= new System.EventHandler(this.numClaimCount_ValueChanged);
                this.numVoidClaimCount.ValueChanged -= new System.EventHandler(this.numClaimCount_ValueChanged);
                this.numHoldClaimCount.ValueChanged -= new System.EventHandler(this.numHoldClaimCount_ValueChanged);

                #endregion


                string _sValue = "";

                //-------------Queue
                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", chkQueueClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    chkQueueClaimCount.Checked = Convert.ToBoolean(_sValue);
                }

                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", numQueueClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    numQueueClaimCount.Value = Convert.ToDecimal(_sValue);
                }
                //-------------

                //-------------Batch
                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", chkBatchClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    chkBatchClaimCount.Checked = Convert.ToBoolean(_sValue);
                }
                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", numBatchClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    numBatchClaimCount.Value = Convert.ToDecimal(_sValue);
                }
                //-------------

                //-------------Void
                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", chkVoidClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    chkVoidClaimCount.Checked = Convert.ToBoolean(_sValue);
                }
                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", numVoidClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    numVoidClaimCount.Value = Convert.ToDecimal(_sValue);
                }
                //-------------


                //-------------HoldClaims

                _sValue = Convert.ToString(oSettings.ReadSettings_XML("Bacth", numHoldClaimCount.Name.ToString()));
                if (_sValue.Trim() != "")
                {
                    this.numHoldClaimCount.ValueChanged -= new System.EventHandler(this.numHoldClaimCount_ValueChanged);
                    numHoldClaimCount.Value = Convert.ToDecimal(_sValue);
                    this.numHoldClaimCount.ValueChanged += new System.EventHandler(this.numHoldClaimCount_ValueChanged);
                }
                //-------------

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oSettings != null) { oSettings.Dispose(); }
                this.numQueueClaimCount.ValueChanged += new System.EventHandler(this.numClaimCount_ValueChanged);
                this.numVoidClaimCount.ValueChanged += new System.EventHandler(this.numClaimCount_ValueChanged);
                this.numHoldClaimCount.ValueChanged += new System.EventHandler(this.numHoldClaimCount_ValueChanged);
            }
        }

        #region "UB04 "
        public bool IsenableUB04(Int64 ClinicID)
        {
            bool _Isenable = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            object oUB04Enable = new object();

            try
            {
                oDB.Connect(false);
                if (ClinicID > 0)
                {
                    _sqlQuery = " select sSettingsValue from Settings WITH (NOLOCK) where  sSettingsName='UB04_EnableBilling' and nClinicID=" + ClinicID + "";

                    oUB04Enable = oDB.ExecuteScalar_Query(_sqlQuery);
                    if (oUB04Enable != null && Convert.ToString(oUB04Enable) != "")
                    {
                        if (Convert.ToString(oUB04Enable).ToUpper() == "TRUE")
                            _Isenable = true;
                        else
                            _Isenable = false;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _Isenable = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }

            }
            return _Isenable;

        }
        #endregion

        public bool IsMultipleClearingHouse(Int64 ClinicID)
        {
            bool _Isenable = false;
            gloDatabaseLayer.DBLayer oDB = null;
            string _sqlQuery = "";
            object oMultipleClearingHouse = new object();

            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                _sqlQuery = " select sSettingsValue from Settings WITH (NOLOCK) where  sSettingsName='ISMULTIPLECLEARINGHOUSE' and nClinicID=" + ClinicID + "";

                oMultipleClearingHouse = oDB.ExecuteScalar_Query(_sqlQuery);
                if (oMultipleClearingHouse != null && Convert.ToString(oMultipleClearingHouse) != "")
                {
                    if (Convert.ToString(oMultipleClearingHouse).ToUpper() == "1")
                        _Isenable = true;
                    else
                        _Isenable = false;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _Isenable = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }

            }
            return _Isenable;

        }

        #endregion

        #region "Enum For Types of Files"

        public enum Filetype 
        {
            None = 0,
            ElectronicClaims = 1,
            Statements = 3
        }

        #endregion

        #region "Enum For PrintType"

        public enum PrintType
        {
            PrintOnForm,
            PrintData
        }

        #endregion

        #region " ANSI5010 and SEND button Arrangements "

        private void ArrangeSendButtons(int nBillingMethodID, Int16 ClaimType)
        {
            try
            {
                // Set the drop-down direction.
                Tsb_BatchSend.DropDownItems.Clear();
                Tsb_BatchSend.DropDownDirection = ToolStripDropDownDirection.BelowRight;



                if (ClaimType != Convert.ToInt16(BillingType.Institutional))
                {


                    btnPaperNew = new ToolStripMenuItem();
                    btnPaperNew.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    btnPaperNew.Image = ((System.Drawing.Image)(resources.GetObject("tsb_Send_PaperClaim.Image")));
                    btnPaperNew.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                    btnPaperNew.Tag = BatchBillingMethod.CMS1500New;
                    btnPaperNew.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                    btnPaperNew.Text = "Paper [CMS 02/12]";
                    btnPaperNew.Click += new EventHandler(BatchSendButtonsClick);

                    btnPaper = new ToolStripMenuItem();
                    btnPaper.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    btnPaper.Image = ((System.Drawing.Image)(resources.GetObject("tsb_Send_PaperClaim.Image")));
                    btnPaper.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                    btnPaper.Tag = BatchBillingMethod.CMS1500;
                    btnPaper.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                    btnPaper.Text = "Paper [CMS 08/05]";
                    btnPaper.Click += new EventHandler(BatchSendButtonsClick);


                    if (UB04Setting)
                    {
                        btn4010 = new ToolStripMenuItem();
                        btn4010.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        btn4010.Image = global::gloBilling.Properties.Resources.EDI4010.ToBitmap();//((System.Drawing.Image)(resources.GetObject("EDI4010.Ico")));
                        btn4010.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                        btn4010.Tag = BatchBillingMethod.ElectronicProfessionalANSI4010;
                        btn4010.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                        btn4010.Text = "Electronic Professional [ANSI4010]";

                        btn5010 = new ToolStripMenuItem();
                        btn5010.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        btn5010.Image = global::gloBilling.Properties.Resources.EDI5010.ToBitmap();
                        btn5010.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                        btn5010.Tag = BatchBillingMethod.ElectronicProfessionalANSI5010;
                        btn5010.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                        btn5010.Text = "Electronic Professional [ANSI5010]";
                    }
                    else
                    {
                        btn4010 = new ToolStripMenuItem();
                        btn4010.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        btn4010.Image = global::gloBilling.Properties.Resources.EDI4010.ToBitmap();//((System.Drawing.Image)(resources.GetObject("EDI4010.Ico")));
                        btn4010.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                        btn4010.Tag = BatchBillingMethod.ElectronicProfessionalANSI4010;
                        btn4010.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                        btn4010.Text = "Electronic [ANSI4010]";

                        btn5010 = new ToolStripMenuItem();
                        btn5010.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        btn5010.Image = global::gloBilling.Properties.Resources.EDI5010.ToBitmap();
                        btn5010.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                        btn5010.Tag = BatchBillingMethod.ElectronicProfessionalANSI5010;
                        btn5010.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                        btn5010.Text = "Electronic [ANSI5010]";
                    }

                    btn4010.Click += new EventHandler(BatchSendButtonsClick);
                    btn5010.Click += new EventHandler(BatchSendButtonsClick);
                }
                else
                {
                    //Paper claim for UB04
                    btnPaper = new ToolStripMenuItem();
                    btnPaper.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    btnPaper.Image = ((System.Drawing.Image)(resources.GetObject("tsb_Send_PaperClaim.Image")));
                    btnPaper.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                    btnPaper.Tag = BatchBillingMethod.UB04;
                    btnPaper.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                    btnPaper.Text = "Paper [UB04]";
                    btnPaper.Click += new EventHandler(BatchSendButtonsClick);
                    //For Institutional 4010
                    btnInst4010 = new ToolStripMenuItem();
                    btnInst4010.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    btnInst4010.Image = global::gloBilling.Properties.Resources.EDI4010.ToBitmap();
                    btnInst4010.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                    btnInst4010.Tag = BatchBillingMethod.ElectronicInstitutionalANSI4010;
                    btnInst4010.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                    btnInst4010.Text = "Electronic Institutional [ANSI4010]";


                    //For Institutional 5010
                    btnInst5010 = new ToolStripMenuItem();
                    btnInst5010.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    btnInst5010.Image = global::gloBilling.Properties.Resources.EDI5010.ToBitmap();
                    btnInst5010.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                    btnInst5010.Tag = BatchBillingMethod.ElectronicInstitutionalANSI5010;
                    btnInst5010.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                    btnInst5010.Text = "Electronic Institutional [ANSI5010]";

                    btnInst4010.Click += new EventHandler(BatchSendButtonsClick);
                    btnInst5010.Click += new EventHandler(BatchSendButtonsClick);

                }




                mnuOther = new ToolStripMenuItem();
                mnuOther.Font = gloGlobal.clsgloFont.gFont_BOLD; //new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                mnuOther.Image = global::gloBilling.Properties.Resources.Other.ToBitmap();
                mnuOther.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
                //mnuOther.Size = new System.Drawing.Size(181, 22); 
                mnuOther.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(31)))), ((int)(((byte)(73)))), ((int)(((byte)(125)))));
                mnuOther.Text = "Other";


                switch (nBillingMethodID)
                {
                    case 1:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btn5010, btnPaper, btnPaperNew });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btn4010, mnuOther });
                        }
                        break;
                    case 2:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btn4010, btn5010, btnPaperNew });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnPaper, mnuOther });

                        }
                        break;
                    case 3:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btnInst5010, btnPaper });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnInst4010, mnuOther });

                        }
                        break;
                    case 4:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btnInst4010, btnInst5010 });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnPaper, mnuOther });

                        }
                        break;
                    case 5:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btn4010, btnPaper, btnPaperNew });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btn5010, mnuOther });
                        }
                        break;
                    case 7:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btnInst4010, btnPaper });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnInst5010, mnuOther });
                        }
                        break;
                    case 8:
                        {
                            mnuOther.DropDownItems.AddRange(new ToolStripItem[] { btn4010, btn5010, btnPaper });
                            Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnPaperNew, mnuOther });

                        }
                        break;
                    default:
                        {
                            if (ClaimType != Convert.ToInt16(BillingType.Institutional))
                            {
                                Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnPaper, btn4010, btn5010 });
                            }
                            else
                            {
                                Tsb_BatchSend.DropDownItems.AddRange(new ToolStripItem[] { btnPaper, btnPaperNew, btnInst4010, btnInst5010 });
                            }
                        }
                        break;

                }


            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }

        }

        private void BatchSendButtonsClick(object sender, EventArgs e)
        {
            ToolStripMenuItem senderButton = (ToolStripMenuItem)sender;
            _isProcessingFiles = true;
            EnableDisableControls(false);
            Int64 _BatchId = 0;
            StringBuilder _ClaimInfo = new StringBuilder();
            bool _WrongICD = false;
            string msg = string.Empty;
            Int16 _msgCounter = 0;
            try
            {


                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nBatchID"].Index));
                        for (int rowIndex = 1; rowIndex < c1BatchGrid.Rows.Count; rowIndex++)
                        {
                            if (c1BatchGrid.GetCellCheck(rowIndex, c1BatchGrid.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked
                                && c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index) != null &&
                                    (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)).Trim() != TransactionStatus.InsurancePaid.ToString().Trim())
                                && (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)).Trim() != TransactionStatus.Rebilled.ToString().Trim())
                                && (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)).Trim() != TransactionStatus.Resent.ToString().Trim()))
                            //For HotFix. //&& (Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Status"].Index)).Trim() != TransactionStatus.SendToClearingHouse.ToString().Trim())
                            {


                                if (Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["nICDRevision"].Index)) != CheckICDVersion(Convert.ToInt64(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["ContactID"].Index)), gloDateMaster.gloDate.DateAsNumber(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["dateofservice"].Index).ToString()), 1))
                                {
                                    _msgCounter++;
                                    if (_msgCounter <= 20)
                                    {
                                        if (_ClaimInfo.ToString() == "")
                                        {
                                            object obj = c1BatchGrid.DataSource;
                                            _ClaimInfo.Append(Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Claim"].Index)) + "   " + Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientCode"].Index)) + "-" + Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientFullName"].Index)));
                                        }
                                        else if (_ClaimInfo.ToString() != "")
                                        {
                                            _ClaimInfo.AppendLine();
                                            _ClaimInfo.Append(Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["Claim"].Index)) + "   " + Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientCode"].Index)) + "-" + Convert.ToString(c1BatchGrid.GetData(rowIndex, c1BatchGrid.Cols["PatientFullName"].Index)));
                                        }
                                    }
                                    else if (_msgCounter == 21)
                                    {
                                        _ClaimInfo.AppendLine();
                                        _ClaimInfo.Append("Too many claims to list");
                                    }
                                    if (_WrongICD == false)
                                    {
                                        _WrongICD = true;
                                    }
                                }
                            }
                        }
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                    {
                        _BatchId = Convert.ToInt64(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nBatchID"].Index));

                        for (int rowIndex = 1; rowIndex < c1BatchGridSentBatch.Rows.Count; rowIndex++)
                        {
                            if (c1BatchGridSentBatch.GetCellCheck(rowIndex, c1BatchGridSentBatch.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked
                                && c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index) != null &&
                                    (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)).Trim() != TransactionStatus.InsurancePaid.ToString().Trim())
                                && (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)).Trim() != TransactionStatus.Rebilled.ToString().Trim())
                                && (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)).Trim() != TransactionStatus.Resent.ToString().Trim()))
                            //For HotFix. //&& (Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Status"].Index)).Trim() != TransactionStatus.SendToClearingHouse.ToString().Trim())
                            {


                                if (Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["nICDRevision"].Index)) != CheckICDVersion(Convert.ToInt64(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["ContactID"].Index)), gloDateMaster.gloDate.DateAsNumber(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["dateofservice"].Index).ToString()), 1))
                                {
                                    //if (_ClaimNos == "")
                                    //{
                                    //    _ClaimNos = Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Claim"].Index));
                                    //}
                                    //else if (_ClaimNos != "")
                                    //{
                                    //    _ClaimNos = _ClaimNos + "," + Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Claim"].Index));

                                    _msgCounter++;
                                    if (_msgCounter <= 20)
                                    {
                                        if (_ClaimInfo.ToString() == "")
                                        {
                                            _ClaimInfo.Append(Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Claim"].Index)) + "   " + Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientCode"].Index)) + "-" + Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientFullName"].Index)));
                                        }
                                        else if (_ClaimInfo.ToString() != "")
                                        {
                                            _ClaimInfo.AppendLine();
                                            _ClaimInfo.Append(Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["Claim"].Index)) + "   " + Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientCode"].Index)) + "-" + Convert.ToString(c1BatchGridSentBatch.GetData(rowIndex, c1BatchGridSentBatch.Cols["PatientFullName"].Index)));
                                        }
                                    }
                                    else if (_msgCounter == 21)
                                    {
                                        _ClaimInfo.AppendLine();
                                        _ClaimInfo.Append("Too many claims to list");
                                    }
                                    if (_WrongICD == false)
                                    {
                                        _WrongICD = true;
                                    }
                                }
                            }
                        }
                    }
                }
                if (_WrongICD == true)
                {
                    _WrongICD = false;
                    msg = "ICD9/ICD10 Usage Warning:\n\nClaim Date of Service does not match ICD type  for the following claims:\n\n" + _ClaimInfo.ToString() + "\n\nOk to bill these claims now?";
                    switch (MessageBox.Show(msg, _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2))
                    {
                        case DialogResult.OK:
                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.ICD, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.OK, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                            break;
                        case DialogResult.Cancel:
                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.ICD, gloAuditTrail.ActivityCategory.Validation, gloAuditTrail.ActivityType.Cancle, msg, 0, 0, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                            return;
                        default:
                            break;
                    }
                    msg = string.Empty;
                    _ClaimInfo.Clear();
                }
                if (_BatchId > 0)
                {
                    #region " Send Method Calling"


                    if (senderButton.Tag != null)
                    {
                        switch (Convert.ToInt64(senderButton.Tag))
                        {
                            case 1:
                                {


                                    BillingTypeMethod = 1;
                                    if (SendElectronicClaim(Convert.ToInt32(senderButton.Tag)) == true)
                                    {
                                        //UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        SetView();
                                    }

                                }
                                break;
                            case 2:
                                {
                                    BillingTypeMethod = 2;
                                    if (SendPaperClaim() == true)
                                    {
                                        //UpdateBatchBillingMethodPaper(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        UpdateBatchBillingMethodPaper(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        SetView();
                                    }
                                }
                                break;
                            case 3:
                                {
                                    BillingTypeMethod = 3;
                                    if (SendElectronicClaim(Convert.ToInt32(senderButton.Tag)) == true)
                                    {
                                        //UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        SetView();
                                    }
                                }
                                break;
                            case 4:
                                {
                                    BillingTypeMethod = 4;
                                    if (SendPaperClaim() == true)
                                    {
                                        //UpdateBatchBillingMethodPaper(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        UpdateBatchBillingMethodPaper(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        SetView();
                                    }
                                }
                                break;
                            case 5:
                                {
                                    //DateTime _dtStartSendElectronic = DateTime.Now;
                                    BillingTypeMethod = 5;
                                    if (SendElectronicClaim(Convert.ToInt32(senderButton.Tag)) == true)
                                    {
                                        //DateTime _dtEndSendElectronic = DateTime.Now;
                                        ////UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        //DateTime _dtStartUpdateBatchBillingMethod = DateTime.Now;
                                        UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        //DateTime _dtEndUpdateBatchBillingMethod = DateTime.Now;

                                        //DateTime _dtStartSetView = DateTime.Now;
                                        SetView();
                                        //DateTime _dtEndSetView = DateTime.Now;

                                        //MessageBox.Show("SendElectronicClaim:" + (_dtEndSendElectronic - _dtStartSendElectronic) + ", UpdateBatch: " + (_dtEndUpdateBatchBillingMethod - _dtStartUpdateBatchBillingMethod) + ", SetView: " + (_dtEndSetView - _dtStartSetView) + " ");
                                    }
                                }
                                break;
                            case 6:
                                {
                                    BillingTypeMethod = 6;
                                    if (MessageBox.Show("Batch contains multiple billing methods. Continue sending batch?  ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                                    {
                                        if (SendElectronicClaim(Convert.ToInt32(senderButton.Tag)) == true)
                                        {
                                            //UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                            UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), _BatchId);
                                            SetView();
                                        }
                                    }

                                }
                                break;
                            case 7:
                                {
                                    BillingTypeMethod = 7;
                                    if (SendElectronicClaim(Convert.ToInt32(senderButton.Tag)) == true)
                                    {
                                        //UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        UpdateBatchBillingMethod(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        SetView();
                                    }
                                }
                                break;
                            case 8:
                                {
                                    BillingTypeMethod = 8;
                                    if (SendPaperClaim() == true)
                                    {
                                        //UpdateBatchBillingMethodPaper(Convert.ToInt32(senderButton.Tag), Convert.ToInt64(trvBatch.SelectedNode.Tag));
                                        UpdateBatchBillingMethodPaper(Convert.ToInt32(senderButton.Tag), _BatchId);
                                        SetView();
                                    }
                                }
                                break;
                            default:
                                {
                                    BillingTypeMethod = 0;
                                    MessageBox.Show("Select batch. ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                break;

                        }

                    }

                    #endregion " Send Method Calling"
                }
                else
                {
                    MessageBox.Show("Select batch to send", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                _isProcessingFiles = false;
                EnableDisableControls(true);
            }

        }

        private void UpdateBatchBillingMethod(Int32 _ID, Int64 _nBatchID)
        {
            Int16 _nclaimType = 1;
            try
            {
                //string _claimType = Convert.ToString(trvBatch.SelectedNode.Name);
                //if (_claimType != "")
                //{
                //    _nclaimType = Convert.ToInt16(_claimType);
                //}

                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (c1trvBatch != null && c1trvBatch.RowSel >= 0)
                    {
                        _nclaimType = Convert.ToInt16(c1trvBatch.GetData(c1trvBatch.RowSel, c1trvBatch.Cols["nClaimType"].Index));
                        lblBillingmethodvalue.Text = get_Billingmethod(_ID);
                        ArrangeSendButtons(Convert.ToInt16(_ID), _nclaimType);
                    }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (c1trvBatch_SentBatch != null && c1trvBatch_SentBatch.RowSel >= 0)
                    {
                        _nclaimType = Convert.ToInt16(c1trvBatch_SentBatch.GetData(c1trvBatch_SentBatch.RowSel, c1trvBatch_SentBatch.Cols["nClaimType"].Index));
                        lblBillingmethodvalue_SentBatch.Text = get_Billingmethod(_ID);
                        ArrangeSendButtons(Convert.ToInt16(_ID), _nclaimType);
                    }
                }

                //Get billing method of batch.

            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
            }
        }

        private void UpdateBatchBillingMethodPaper(Int32 _ID, Int64 _nBatchID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, _emrdatabaseconnectionstring);
            DataTable dtBatch = new DataTable();
            try
            {

                oDB.Connect(false);

                _sqlQuery = "UPDATE  bl_Transaction_Batch WITH (READPAST)    SET nBillingMethodID= " + _ID + " where  nBatchID = " + _nBatchID;

                oDB.Execute_Query(_sqlQuery);

                dtBatch = ogloBilling.GetBatch(_nBatchID);

                //Get billing method of batch.
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                { lblBillingmethodvalue.Text = get_Billingmethod(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"])); }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                { lblBillingmethodvalue_SentBatch.Text = get_Billingmethod(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"])); }

                ArrangeSendButtons(Convert.ToInt32(dtBatch.Rows[0]["BillingMethodID"]), Convert.ToInt16(dtBatch.Rows[0]["nClaimType"]));

            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (ogloBilling != null)
                {
                    ogloBilling.Dispose();
                  
                }
                if (dtBatch != null)
                {
                    dtBatch.Dispose();
                }
            }
        }

        private string get_Billingmethod(Int32 _ID)
        {
            switch (_ID)
            {
                case 1:
                    {
                        if (UB04Setting)
                            return "Electronic Professional [ANSI4010]";
                        else
                            return "Electronic [ANSI4010]";
                    }
                // break;
                case 2:
                    {
                        return "CMS1500 08/05";
                    }

                case 3:
                    {
                        return "Electronic Institutional [ANSI4010]";
                    }

                case 4:
                    {
                        return "UB04";
                    }

                case 5:
                    {
                        if (UB04Setting)
                            return "Electronic Professional [ANSI5010]";
                        else
                            return "Electronic [ANSI5010]";
                    }
                case 6:
                    {
                        return "Multiple";
                    }
                case 7:
                    {
                        return "Electronic Institutional [ANSI5010]";
                    }
                case 8:
                    {
                        return "CMS1500 02/12";
                    }
                default:
                    {
                        return "";
                    }
            }
            // return "";
        }

        #endregion

        private void cmbUser_MouseEnter(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbUser.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbUser.Items[cmbUser.SelectedIndex])["Description"]), cmbUser) >= cmbUser.DropDownWidth - 20)
                    {
                        this.tooltip_Billing.SetToolTip(cmbUser, Convert.ToString(((DataRowView)cmbUser.Items[cmbUser.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbUser, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbUser, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbMultiChargesTray_MouseEnter(object sender, EventArgs e)
        {

            try
            {

                combo = (ComboBox)sender;

                if (cmbMultiChargesTray.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[cmbMultiChargesTray.SelectedIndex])["Description"]), cmbMultiChargesTray) >= cmbMultiChargesTray.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbMultiChargesTray, Convert.ToString(((DataRowView)cmbMultiChargesTray.Items[cmbMultiChargesTray.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbMultiChargesTray, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbMultiChargesTray, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbClearingHouse_MouseEnter(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbClearingHouse.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbClearingHouse.Items[cmbClearingHouse.SelectedIndex])["sClearingHouseCode"]), cmbClearingHouse) >= cmbClearingHouse.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbClearingHouse, Convert.ToString(((DataRowView)cmbClearingHouse.Items[cmbClearingHouse.SelectedIndex])["sClearingHouseCode"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbClearingHouse, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbClearingHouse, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbReportingCategory_MouseEnter(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbReportingCategory.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbReportingCategory.Items[cmbReportingCategory.SelectedIndex])["sDescription"]), cmbReportingCategory) >= cmbReportingCategory.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbReportingCategory, Convert.ToString(((DataRowView)cmbReportingCategory.Items[cmbReportingCategory.SelectedIndex])["sDescription"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbReportingCategory, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbReportingCategory, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbInsuranceCompany_MouseEnter(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbInsuranceCompany.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbInsuranceCompany.Items[cmbInsuranceCompany.SelectedIndex])["sDescription"]), cmbInsuranceCompany) >= cmbInsuranceCompany.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbInsuranceCompany, Convert.ToString(((DataRowView)cmbInsuranceCompany.Items[cmbInsuranceCompany.SelectedIndex])["sDescription"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbInsuranceCompany, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbInsuranceCompany, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbProvider_MouseEnter(object sender, EventArgs e)
        {

            try
            {

                combo = (ComboBox)sender;

                if (cmbProvider.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbProvider.Items[cmbProvider.SelectedIndex])["Description"]), cmbProvider) >= cmbProvider.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbProvider, Convert.ToString(((DataRowView)cmbProvider.Items[cmbProvider.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbProvider, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbProvider, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbMultiFacility_MouseEnter(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbMultiFacility.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbMultiFacility.Items[cmbMultiFacility.SelectedIndex])["Description"]), cmbMultiFacility) >= cmbMultiFacility.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbMultiFacility, Convert.ToString(((DataRowView)cmbMultiFacility.Items[cmbMultiFacility.SelectedIndex])["Description"]));
                    }
                    else
                    {
                        tooltip_Billing.SetToolTip(cmbMultiFacility, "");
                    }
                }
                else
                {
                    tooltip_Billing.SetToolTip(cmbMultiFacility, "");
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbBusinessCenter_MouseEnter(object sender, EventArgs e)
        {
            try
            {
                combo = cmbBusinessCenter;
                if (cmbBusinessCenter.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbBusinessCenter.Items[cmbBusinessCenter.SelectedIndex])["BusinessCenter"]), cmbBusinessCenter) >= cmbBusinessCenter.DropDownWidth - 20)
                    {
                        this.toolTip1.SetToolTip(cmbBusinessCenter, Convert.ToString(((DataRowView)cmbBusinessCenter.Items[cmbBusinessCenter.SelectedIndex])["BusinessCenter"]));
                    }
                    else
                    {
                        this.toolTip1.SetToolTip(cmbBusinessCenter, "");
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void cmbBillingMethod_MouseEnter_1(object sender, EventArgs e)
        {
            try
            {

                combo = (ComboBox)sender;

                if (cmbBillingMethod.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbBillingMethod.Items[cmbBillingMethod.SelectedIndex])["Desc"]), cmbBillingMethod) >= cmbBillingMethod.DropDownWidth - 20)
                    {
                        tooltip_Billing.SetToolTip(cmbBillingMethod, Convert.ToString(((DataRowView)cmbBillingMethod.Items[cmbBillingMethod.SelectedIndex])["Desc"]));
                    }
                    else
                    {
                        this.tooltip_Billing.Hide(cmbBillingMethod);
                    }
                }
                else
                {
                    this.tooltip_Billing.Hide(cmbBillingMethod);
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), false);
                Ex = null;
            }
        }

        private void cmbBusinessCenter_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                combo = cmbBusinessCenter;
                if (cmbBusinessCenter.SelectedItem != null)
                {
                    if (getWidthofListItems(Convert.ToString(((DataRowView)cmbBusinessCenter.Items[cmbBusinessCenter.SelectedIndex])["BusinessCenter"]), cmbBusinessCenter) >= cmbBusinessCenter.DropDownWidth - 20)
                    {
                        this.toolTip1.SetToolTip(cmbBusinessCenter, Convert.ToString(((DataRowView)cmbBusinessCenter.Items[cmbBusinessCenter.SelectedIndex])["BusinessCenter"]));
                    }
                    else
                    {
                        this.toolTip1.SetToolTip(cmbBusinessCenter, "");
                    }
                }
            }
            catch (Exception ex)
            {

                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void tsb_PrintNew1500_Click(object sender, EventArgs e)
        {
            try
            {
                OpenHCFA1500ModifyNew();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            { }
        }

        private void BatchSearchClear_Click(object sender, EventArgs e)
        {
            try
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (txtSearchUnsentBatches.Text != "")
                    { txtSearchUnsentBatches.Text = ""; }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (txtSearchSentBatches.Text != "")
                    { txtSearchSentBatches.Text = ""; }
                }
            }
            catch (Exception)
            {
            }
        }

        private void ClearClaimSearch_Click(object sender, EventArgs e)
        {
            try
            {
                if (tabManager.SelectedTab.Name == tbpg_Batch.Name)
                {
                    if (txtBatchSearch.Text != "")
                    { txtBatchSearch.Text = ""; }
                }
                else if (tabManager.SelectedTab.Name == tbpg_SentBatch.Name)
                {
                    if (txtBatchSearch_SentBatch.Text != "")
                    { txtBatchSearch_SentBatch.Text = ""; }
                }
            }
            catch (Exception)
            {
            }
        }

        public Int32 CheckPaperVersion(Int64 nContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBPara = new gloDatabaseLayer.DBParameters();
            Int32 nPaperVersion = 0;

            try
            {
                oDBPara.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                nPaperVersion = Convert.ToInt32(oDB.ExecuteScalar("gsp_CheckPaperVersion", oDBPara));
            }

            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBPara != null) { oDBPara.Dispose(); }
            }
            return nPaperVersion;

        }
        public Int32 CheckICDVersion(Int64 nContactID, Int64 nFromDos, Int16 nClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBPara = new gloDatabaseLayer.DBParameters();
            Int32 nICDVersion = 0;

            try
            {
                oDBPara.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBPara.Add("@nFromDOS", nFromDos, ParameterDirection.Input, SqlDbType.BigInt);
                oDBPara.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.Int);
                oDB.Connect(false);
                nICDVersion = Convert.ToInt32(oDB.ExecuteScalar("BL_GetICDCodeType", oDBPara));
            }

            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBPara != null) { oDBPara.Dispose(); }
            }
            return nICDVersion;

        }
        private void AddResendinggnote(Int64 _MasterTransactionID)
        {

            Common.GeneralNotes oNotes = null;
            Common.GeneralNote oNote = new global::gloBilling.Common.GeneralNote();
            //validation for text box

            try
            {
                oNote = new global::gloBilling.Common.GeneralNote();
                oNote.TransactionID = _MasterTransactionID;
                oNote.TransactionLineId = 0;
                oNote.TransactionDetailID = 0;
                oNote.NoteType = NoteType.Claim_Note;
                oNote.NoteID = 0;
                oNote.NoteDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                oNote.UserID = _UserID;
                oNote.StatementNoteDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                oNote.NoteDescription = @"Claim resend by """ + this.UserName + @""" on """ + DateTime.Now.ToString("MM/dd/yyyy hh:mm:tt") + @""".";
                oNote.ClinicID = _ClinicID;

                oNote.dtCreatedDatetime = DateTime.Now;

                oNotes = new global::gloBilling.Common.GeneralNotes();
                oNotes.Add(oNote);

                gloCharges.SaveClaimNotes(oNotes);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                ex = null;

            }
            finally
            {
                oNotes.Clear();
                oNotes.Dispose();
            }


        }
        private void CreateFollowupScheduleForAutoBatch(Int64 TransactionMasterId, Int64 TransactionId, Int64 ContactId)
        {
            GeneralSettings oSettings = null;
            Collections.CL_FollowUpCode oCollection = null;
            DateTime dtCurrentDate = DateTime.Now;
            object oValue = null;

            try
            {

                bool SettingsValue = Collections.CL_FollowUpCode.IsFollowUpFeatureON();
                if (SettingsValue)
                {
                    dtCurrentDate = Collections.CL_FollowUpCode.GetServerDate();
                    oCollection = new Collections.CL_FollowUpCode();
                    oSettings = new GeneralSettings(gloPMGlobal.DatabaseConnectionString);
                }

                #region "Region for Auto Schedule Setup"

                #region " Account Log Feature Enable Disable according to settings."

                if (SettingsValue)
                {

                    if (ContactId > 0 && TransactionMasterId > 0 && TransactionId > 0)
                    {
                        string sStatus = Collections.CL_FollowUpCode.GetClaimFollowUpStatus(TransactionMasterId, TransactionId, ContactId);
                        string sAction = string.Empty;
                        string sActionDesc = string.Empty;
                        Int32 nDays = 0;
                        bool bHasWorked = false;
                        switch (sStatus)
                        {
                            case "NewBatch":
                                if (sStatus == "NewBatch")
                                {
                                    oCollection.DeleteFollowUpSchedule(TransactionId);
                                }

                                oSettings.GetSetting("CL_INSCLM_START_DEFFUACTION", 0, gloPMGlobal.ClinicID, out oValue);
                                sAction = Convert.ToString(oValue);
                                sActionDesc = Collections.CL_FollowUpCode.GetActionDesc(sAction, Collections.CollectionEnums.FollowUpType.Claim);

                                oSettings.GetSetting("CL_INSCLM_START_DEFFUACTIONDAYS", 0, gloPMGlobal.ClinicID, out oValue);
                                Int32.TryParse(Convert.ToString(oValue), out nDays);

                                oCollection.SaveFollowUpScedule(Collections.CollectionEnums.FollowUpType.Claim, TransactionId, dtCurrentDate.AddDays(nDays), sAction, sActionDesc, gloPMGlobal.UserID, gloPMGlobal.UserName, Collections.CollectionEnums.ScheduleType.System, DateTime.MinValue, ref bHasWorked);
                                break;
                            case "Rebill":
                            case "Resend":
                                oSettings.GetSetting("CL_INSCLM_REBILL_DEFFUACTION", 0, gloPMGlobal.ClinicID, out oValue);
                                sAction = Convert.ToString(oValue);
                                sActionDesc = Collections.CL_FollowUpCode.GetActionDesc(sAction, Collections.CollectionEnums.FollowUpType.Claim);

                                oSettings.GetSetting("CL_INSCLM_REBILL_DEFFUACTIONDAYS", 0, gloPMGlobal.ClinicID, out oValue);
                                Int32.TryParse(Convert.ToString(oValue), out nDays);

                                oCollection.SaveFollowUpScedule(Collections.CollectionEnums.FollowUpType.Claim, TransactionId, dtCurrentDate.AddDays(nDays), sAction, sActionDesc, gloPMGlobal.UserID, gloPMGlobal.UserName, Collections.CollectionEnums.ScheduleType.System, DateTime.MinValue, ref bHasWorked);
                                break;
                        }
                    }
                }

                #endregion

                #endregion
            }
            catch //(Exception ex)
            {
                throw;
            }
            finally
            {
                if (oSettings != null)
                {
                    oSettings.Dispose();
                    oSettings = null;
                }
                if (oCollection != null)
                {
                    oCollection.Dispose();
                    oCollection = null;
                }
            }
        }

        private string GetBatchName(string BatchPrefix)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _retVal = null;
            string _batchName = "";
            //  int _batchCount = 0;

            try
            {
                oDB.Connect(false);

                _sqlQuery = " SELECT ISNULL(MAX(convert(numeric,substring(sBatchName," + Convert.ToInt32(BatchPrefix.Length + 1) + ",len(sBatchName)- " + BatchPrefix.Length + "))),0) + 1   AS BatchName " +
                " FROM BL_Transaction_Batch WITH(NOLOCK) " +
                " WHERE  " +
                " substring(sBatchName,1," + BatchPrefix.Length + ") = '" + BatchPrefix + "'  " +
                " AND  isnumeric(substring(sBatchName, " + Convert.ToInt64(BatchPrefix.Length + 1) + ",len(sBatchName)- " + BatchPrefix.Length + ")) > 0 ";

                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);

                if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                {
                    _batchName = BatchPrefix + Convert.ToInt64(_retVal);
                }

                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return _batchName;
        }
        Int64 _QuedClaimID;
        private void c1QueuedClaims_BeforeSort(object sender, SortColEventArgs e)
        {
            if (c1QueuedClaims.Rows.Count > 1)
            {
                try
                {
                    _QuedClaimID = Convert.ToInt64(c1QueuedClaims.Rows[c1QueuedClaims.RowSel]["TransactionID"]);
                }
                catch (Exception)
                {
                    _QuedClaimID = 0;
                }

            }
        }

        private void c1QueuedClaims_AfterSort(object sender, SortColEventArgs e)
        {
            int _index;
            try
            {
                if (c1QueuedClaims.DataSource != null)
                {
                    if (e.Col == c1QueuedClaims.Cols["Claim"].Index)
                    {
                        c1QueuedClaims.Cols["SortClaim"].Sort = e.Order;
                        c1QueuedClaims.Cols["SortSubClaim"].Sort = SortFlags.Ascending;
                        c1QueuedClaims.Sort(SortFlags.UseColSort, c1QueuedClaims.Cols["SortClaim"].Index, c1QueuedClaims.Cols["SortSubClaim"].Index);
                        //c1QueuedClaims.Sort(e.Order, c1QueuedClaims.Cols["Row_Number"].Index);
                    }
                }

                _index = c1QueuedClaims.FindRow(_QuedClaimID.ToString(), 0, c1QueuedClaims.Cols["TransactionID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }

            c1QueuedClaims.ShowCell(_index, 0);
            c1QueuedClaims.Row = _index;
            c1QueuedClaims.Select();
        }
        Int64 _BatchClaimID;
        private void c1BatchGrid_BeforeSort(object sender, SortColEventArgs e)
        {
            if (c1BatchGrid.Rows.Count > 1)
            {
                try
                {
                    _BatchClaimID = Convert.ToInt64(c1BatchGrid.Rows[c1BatchGrid.RowSel]["TransactionID"]);
                }
                catch (Exception)
                {
                    _BatchClaimID = 0;
                }

            }


        }

        private void c1BatchGrid_AfterSort(object sender, SortColEventArgs e)
        {
            if (c1BatchGrid.DataSource != null)
            {
                if (e.Col == c1BatchGrid.Cols["Claim"].Index)
                {
                    //c1BatchGrid.Sort(e.Order, c1BatchGrid.Cols["SortOrder"].Index);
                    c1BatchGrid.Cols["SortClaim"].Sort = e.Order;
                    c1BatchGrid.Cols["SortSubClaim"].Sort = SortFlags.Ascending;
                    c1BatchGrid.Sort(SortFlags.UseColSort, c1BatchGrid.Cols["SortClaim"].Index, c1BatchGrid.Cols["SortSubClaim"].Index);

                }
            }

            int _index;
            try
            {
                _index = c1BatchGrid.FindRow(_BatchClaimID.ToString(), 0, c1BatchGrid.Cols["TransactionID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }
   
            
      

            c1BatchGrid.ShowCell(_index, 0);
            c1BatchGrid.Row = _index;
            c1BatchGrid.Select();
        }
        Int64 _SentBatchClaimID;
        private void c1BatchGridSentBatch_BeforeSort(object sender, SortColEventArgs e)
        {
            if (c1BatchGridSentBatch.Rows.Count > 1)
            {
                try
                {
                    _SentBatchClaimID = Convert.ToInt64(c1BatchGridSentBatch.Rows[c1BatchGridSentBatch.RowSel]["TransactionID"]);
                }
                catch (Exception)
                {
                    _SentBatchClaimID = 0;
                }

            }
        }

        private void c1BatchGridSentBatch_AfterSort(object sender, SortColEventArgs e)
        {
            if (c1BatchGridSentBatch.DataSource != null)
            {
                if (e.Col == c1BatchGridSentBatch.Cols["Claim"].Index)
                {
                    //c1BatchGridSentBatch.Sort(e.Order, c1BatchGridSentBatch.Cols["SortOrder"].Index);
                    c1BatchGridSentBatch.Cols["SortClaim"].Sort = e.Order;
                    c1BatchGridSentBatch.Cols["SortSubClaim"].Sort = SortFlags.Ascending;
                    c1BatchGridSentBatch.Sort(SortFlags.UseColSort, c1BatchGridSentBatch.Cols["SortClaim"].Index, c1BatchGridSentBatch.Cols["SortSubClaim"].Index);
                }
            }
            int _index;
            try
            {
                _index = c1BatchGridSentBatch.FindRow(_SentBatchClaimID.ToString(), 0, c1BatchGridSentBatch.Cols["TransactionID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }
           

            c1BatchGridSentBatch.ShowCell(_index, 0);
            c1BatchGridSentBatch.Row = _index;
            c1BatchGridSentBatch.Select();
        }
        Int64 _PlanHoldID;
        private void c1PlanHold_BeforeSort(object sender, SortColEventArgs e)
        {
            if (c1PlanHold.Rows.Count > 1)
            {
                try
                {
                    _PlanHoldID = Convert.ToInt64(c1PlanHold.Rows[c1PlanHold.RowSel]["nContactID"]);
                }
                catch (Exception)
                {
                    _PlanHoldID = 0;
                }

            }
        }
        Int64 _VoidedClaimID;
        private void c1VoidClaims_BeforeSort(object sender, SortColEventArgs e)
        {
            if (c1VoidClaims.Rows.Count > 1)
            {
                try
                {
                    _VoidedClaimID = Convert.ToInt64(c1VoidClaims.Rows[c1VoidClaims.RowSel]["TransactionID"]);
                }
                catch (Exception)
                {
                    _VoidedClaimID = 0;
                }
            }
        }

        private void c1VoidClaims_AfterSort(object sender, SortColEventArgs e)
        {
            int _index;
            try
            {
                if (c1VoidClaims.DataSource != null)
                {
                    if (e.Col == c1VoidClaims.Cols["Claim"].Index)
                    {
                        //c1VoidClaims.Sort(e.Order, c1VoidClaims.Cols["SortOrder"].Index);
                        c1VoidClaims.Cols["SortClaim"].Sort = e.Order;
                        c1VoidClaims.Cols["SortSubClaim"].Sort = SortFlags.Ascending;
                        c1VoidClaims.Sort(SortFlags.UseColSort, c1VoidClaims.Cols["SortClaim"].Index, c1VoidClaims.Cols["SortSubClaim"].Index);
                    }
                }
                _index = c1VoidClaims.FindRow(_VoidedClaimID.ToString(), 0, c1VoidClaims.Cols["TransactionID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }

            c1VoidClaims.ShowCell(_index, 0);
            c1VoidClaims.Row = _index;
            c1VoidClaims.Select();

        }
        Int64 _PlanHoldClaimID;
        private void C1PlanHoldclaim_BeforeSort(object sender, SortColEventArgs e)
        {
            if (C1PlanHoldclaim.Rows.Count > 1)
            {
                try
                {
                    _PlanHoldClaimID = Convert.ToInt64(C1PlanHoldclaim.Rows[C1PlanHoldclaim.RowSel]["nTransactionID"]);
                }
                catch (Exception)
                {
                    _PlanHoldClaimID = 0;
                }
            }
        }

        private void C1PlanHoldclaim_AfterSort(object sender, SortColEventArgs e)
        {
            int _index;
            try
            {
                if (C1PlanHoldclaim.DataSource != null)
                {
                    if (e.Col == C1PlanHoldclaim.Cols["Claim No"].Index)
                    {
                        //C1PlanHoldclaim.Sort(e.Order, C1PlanHoldclaim.Cols["SortOrder"].Index);
                        C1PlanHoldclaim.Cols["SortClaim"].Sort = e.Order;
                        C1PlanHoldclaim.Cols["SortSubClaim"].Sort = SortFlags.Ascending;
                        C1PlanHoldclaim.Sort(SortFlags.UseColSort, C1PlanHoldclaim.Cols["SortClaim"].Index, C1PlanHoldclaim.Cols["SortSubClaim"].Index);
                    }
                }
                _index = C1PlanHoldclaim.FindRow(_PlanHoldClaimID.ToString(), 0, C1PlanHoldclaim.Cols["nTransactionID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }
            if (C1PlanHoldclaim.DataSource != null)
            {
                C1PlanHoldclaim.ShowCell(_index, C1PlanHoldclaim.Cols["Claim No"].Index);
            }
            C1PlanHoldclaim.Row = _index;
            C1PlanHoldclaim.Select();

        }
        Int64 _BillingHoldClaimID;
        private void c1BillingHold_BeforeSort(object sender, SortColEventArgs e)
        {
            if (c1BillingHold.Rows.Count > 1)
            {
                try
                {
                    _BillingHoldClaimID = Convert.ToInt64(c1BillingHold.Rows[c1BillingHold.RowSel]["nTransactionID"]);
                }
                catch (Exception)
                {
                    _BillingHoldClaimID = 0;
                }
            }
        }

        private void c1BillingHold_AfterSort(object sender, SortColEventArgs e)
        {
            int _index;
            try
            {
                if (rbBillingHold.Checked)
                {
                    if (c1BillingHold.DataSource != null)
                    {
                        if (e.Col == c1BillingHold.Cols["Claim No"].Index)
                        {
                            //c1BillingHold.Sort(e.Order, c1BillingHold.Cols["SortOrder"].Index);
                            c1BillingHold.Cols["SortClaim"].Sort = e.Order;
                            c1BillingHold.Cols["SortSubClaim"].Sort = SortFlags.Ascending;
                            c1BillingHold.Sort(SortFlags.UseColSort, c1BillingHold.Cols["SortClaim"].Index, c1BillingHold.Cols["SortSubClaim"].Index);

                        }
                    }
                }

                _index = c1BillingHold.FindRow(_BillingHoldClaimID.ToString(), 0, c1BillingHold.Cols["nTransactionID"].Index, false, false, false);
            }
            catch (Exception)
            {
                _index = 0;
            }

            c1BillingHold.ShowCell(_index, c1BillingHold.Cols["Claim No"].Index);
            c1BillingHold.Row = _index;
            c1BillingHold.Select();
        }

        private void tsb_WorkerComp_Click(object sender, EventArgs e)
        {
            frmWorkerCompFormViewer frmWorkerComp = null;
            try
            {

                Int64 _patientId = 0;
                Int64 _TransactionID = 0;
                Int64 _TransactionMasterID = 0;
                bool _isClaimSelected = false;
                if (c1QueuedClaims != null && c1QueuedClaims.Rows.Count > 0)
                {
                    for (int rowIndex = 1; rowIndex < c1QueuedClaims.Rows.Count; rowIndex++)
                    {

                        if (c1QueuedClaims.GetCellCheck(rowIndex, c1QueuedClaims.Cols["Select"].Index) == C1.Win.C1FlexGrid.CheckEnum.Checked)
                        {
                            _TransactionID = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionID"].Index));
                            _TransactionMasterID = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["TransactionMasterID"].Index));
                            _patientId = Convert.ToInt64(c1QueuedClaims.GetData(rowIndex, c1QueuedClaims.Cols["PatientID"].Index));
                            using (frmWorkerComp = new frmWorkerCompFormViewer(_patientId, _TransactionID, _TransactionMasterID, _databaseconnectionstring,0))
                            { frmWorkerComp.ShowDialog(this); }
                            _isClaimSelected = true;
                            break;
                        }

                    }
                    if (!_isClaimSelected)
                    {
                        //MessageBox.Show("Select institutional claim(s). ", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        MessageBox.Show("Select transaction.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                else
                {
                    MessageBox.Show("No transaction found for Select.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }



            }
            catch (Exception)
            {

                //throw;
            }
            finally
            {
                if (frmWorkerComp != null)
                { frmWorkerComp.Dispose(); frmWorkerComp = null; }

            }
        }


        #region Charge Edit Rules
        private void ShowBrokenRules(Int64 TransactionMasterID, Int64 TransactionID)
        {
            List<gloUIControlLibrary.Classes.ClaimRules.TriggeredRuleInfo> lstBrokenRules = null;

            try
            {
                lstBrokenRules = this.GetBrokenRules(TransactionMasterID, TransactionID);

                if (lstBrokenRules != null && lstBrokenRules.Any())
                {
                    gloUIControlLibrary.WPFForms.frmTriggeredRules frmTriggeredRules = new gloUIControlLibrary.WPFForms.frmTriggeredRules(lstBrokenRules, true);
                    System.Windows.Interop.WindowInteropHelper _interophelper = new System.Windows.Interop.WindowInteropHelper(frmTriggeredRules);
                    _interophelper.Owner = this.Handle;
                    frmTriggeredRules.ShowDialog();
                    frmTriggeredRules = null;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
            finally
            {
                if (lstBrokenRules != null)
                {
                    lstBrokenRules.Clear();
                    lstBrokenRules = null;
                }
            }
        }

        private List<gloUIControlLibrary.Classes.ClaimRules.TriggeredRuleInfo> GetBrokenRules(Int64 TransactionMasterID, Int64 TransactionID)
        {
            List<gloUIControlLibrary.Classes.ClaimRules.TriggeredRuleInfo> lstBrokenRules = null;
            DataTable dtBrokenRules = null;

            try
            {
                lstBrokenRules = new List<gloUIControlLibrary.Classes.ClaimRules.TriggeredRuleInfo>();
                dtBrokenRules = gloCharges.GetBrokenRules(TransactionMasterID, TransactionID);

                if (dtBrokenRules != null && dtBrokenRules.Rows.Count > 0)
                {
                    if (dtBrokenRules.Columns.Contains("nRuleID")
                        &&
                        dtBrokenRules.Columns.Contains("sRuleName")
                        &&
                        dtBrokenRules.Columns.Contains("sErrorMessage")
                        &&
                        dtBrokenRules.Columns.Contains("nRuleType"))
                    {
                        lstBrokenRules = dtBrokenRules
                                           .AsEnumerable()
                                           .Select(p => new gloUIControlLibrary.Classes.ClaimRules.TriggeredRuleInfo
                                               (
                                               Convert.ToInt64(p["nRuleID"]),
                                               Convert.ToString(p["sRuleName"]),
                                               Convert.ToString(p["sErrorMessage"]),
                                               (gloUIControlLibrary.Classes.ClaimRules.RuleType)Enum.Parse(typeof(gloUIControlLibrary.Classes.ClaimRules.RuleType),
                                               Convert.ToString(p["nRuleType"])),
                                               Convert.ToString(p["sRuleCategory"]),
                                               Convert.ToString(p["RuleSource"])
                                               )).ToList();
                    }                    
                }

                return lstBrokenRules;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
                return new List<gloUIControlLibrary.Classes.ClaimRules.TriggeredRuleInfo>();
            }
        } 
        #endregion

        #region "Claim Manager"

        #region "Variables for Claim Manager"

        string _PrintFilePath = "";
        string _sStmtFileExtent = string.Empty;

        #endregion

        #region "ClaimManager Button Events"
        
        private void btn_ClearC1SubBatch_Click(object sender, EventArgs e)
        {
            try 
            {
                if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name )
                {   
                    if (txtSearchSubBatch .Text != "")
                    { txtSearchSubBatch.Text = ""; }
                }
            }
            catch (Exception ex) 
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false); }
        }

        private void btn_ClearC1AllBatch_Click(object sender, EventArgs e)
        {
            try 
            {
                if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name)
                {
                    if (txtSearchAllBatch.Text != "")
                    { txtSearchAllBatch.Text = ""; }
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex,false); }
        }

        private void tsb_View_Click(object sender, EventArgs e)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            DataTable dtBatches = new DataTable();
            string sFileID = "";

            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);

                #region "Creating Folder Named By EDI_Files at Application Startup Path"

                if (System.IO.Directory.Exists(gloSettings.FolderSettings.AppTempFolderPath + "View_Files") == false)
                {
                    System.IO.Directory.CreateDirectory(gloSettings.FolderSettings.AppTempFolderPath + "View_Files");
                }

                #endregion

                #region "Delete All Existing Files"

                DirectoryInfo dirInfo = new DirectoryInfo(gloSettings.FolderSettings.AppTempFolderPath + "View_Files");
                FileInfo[] oFileInfo = dirInfo.GetFiles("*.*");
                if (oFileInfo.Length > 0)
                {
                    foreach (FileInfo curFile in oFileInfo)
                    {
                        curFile.Delete();
                    }
                }

                #endregion

                if (c1AllBatch.Cols.Contains("nBatchID"))
                {
                    sFileID = Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index));
                }
                else if (c1AllBatch.Cols.Contains("nBatchPateintStatMstID"))
                {
                    sFileID = Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchPateintStatMstID"].Index));
                }
                switch (iFileTypeID)
                {
                    case (int)EDIFileType.OutBox_837PClaimSubmission:
                        #region "Getting File of 837ElectronicClaimSubmission"

                        oDBParameters.Add("@FileId", sFileID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@FileType", Filetype.ElectronicClaims, ParameterDirection.Input, SqlDbType.VarChar);
                        oDB.Retrive("Get_ClaimFiles", oDBParameters, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            //Generating EDI file in folder named "EDI_Files"
                            if (dtBatches != null && dtBatches.Rows.Count > 0)
                            {
                                _PrintFilePath = GenerateFile(dtBatches.Rows[0]["i837File"], Convert.ToString(dtBatches.Rows[0]["sBatchName"]), Convert.ToString(gloSettings.FolderSettings.AppTempFolderPath + "View_Files\\"));
                                System.Diagnostics.Process.Start(_PrintFilePath);                                
                            }
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_837PClaim_Submitted:
                        #region "Getting File of 837ElectronicClaimSubmitted"

                        oDBParameters.Add("@FileId", sFileID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@FileType", Filetype.ElectronicClaims, ParameterDirection.Input, SqlDbType.VarChar);
                        oDB.Retrive("Get_ClaimFiles", oDBParameters, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            //Generating EDI file in folder named "EDI_Files"
                            if (dtBatches != null && dtBatches.Rows.Count > 0)
                            {
                                _PrintFilePath = GenerateFile(dtBatches.Rows[0]["i837File"], Convert.ToString(dtBatches.Rows[0]["sBatchName"]), Convert.ToString(gloSettings.FolderSettings.AppTempFolderPath + "View_Files\\"));
                                System.Diagnostics.Process.Start(_PrintFilePath);                                
                            }
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_Statements:
                        #region "Getting File of StatementsSubmission"

                        oDBParameters.Add("@FileId", sFileID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@FileType", Filetype.Statements, ParameterDirection.Input, SqlDbType.VarChar);
                        oDB.Retrive("Get_ClaimFiles", oDBParameters, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            //Generating EDI file in folder named "EDI_Files"
                            if (dtBatches != null && dtBatches.Rows.Count > 0)
                            {
                                //7022Items:.STA extension for GatewayEDI statements
                                //Pass the parameter to generate file using _sStmtFileExtent value.
                                _PrintFilePath = GenerateFile(dtBatches.Rows[0]["iBatchStatementFile"], Convert.ToString(dtBatches.Rows[0]["sBatchName"]), Convert.ToString(gloSettings.FolderSettings.AppTempFolderPath + "View_Files\\"), _sStmtFileExtent);
                                System.Diagnostics.Process.Start(_PrintFilePath);                                
                            }
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_Statements_Submitted:
                        #region "Getting File of StatementsSubmitted"

                        oDBParameters.Add("@FileId", sFileID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@FileType", Filetype.Statements, ParameterDirection.Input, SqlDbType.VarChar);
                        oDB.Retrive("Get_ClaimFiles", oDBParameters, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            //Generating EDI file in folder named "EDI_Files"
                            if (dtBatches != null && dtBatches.Rows.Count > 0)
                            {
                                //7022Items:.STA extension for GatewayEDI statements
                                //Pass the parameter to generate file using _sStmtFileExtent value.
                                _PrintFilePath = GenerateFile(dtBatches.Rows[0]["iBatchStatementFile"], Convert.ToString(dtBatches.Rows[0]["sBatchName"]), Convert.ToString(gloSettings.FolderSettings.AppTempFolderPath + "View_Files\\"), _sStmtFileExtent);
                                System.Diagnostics.Process.Start(_PrintFilePath);                                
                            }
                        }
                        break;

                        #endregion
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
            }
        }

        private void tsb_PrintForm_Click(object sender, EventArgs e)
        {            
            try
            {
                if (c1AllBatch.Rows.Count != 0)
                {
                    if (Validation() == true)
                    {
                        Print(PrintType.PrintOnForm);                      
                    }
                }
            }
            catch (Exception ex)
            { 
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); 
            }            
        }

        private void tsb_Print_Click(object sender, EventArgs e)
        {
            try
            {
                gloCMSEDI.frmPrintCMS1500 ofrmPrintCMS1500 = new gloCMSEDI.frmPrintCMS1500(_databaseconnectionstring.ToString());
                if (ofrmPrintCMS1500.GetDefaultCoordinateUpdateSetting())
                {
                    bool _IsAllowPrint = true;
                    ofrmPrintCMS1500.ShowDialog();
                    _IsAllowPrint = ofrmPrintCMS1500.IsAllowPrinting;
                    if (ofrmPrintCMS1500 != null)
                        ofrmPrintCMS1500.Dispose();
                    if (!_IsAllowPrint)
                        return;
                }
                if (Validation() == true)
                {
                    Print(PrintType.PrintData);
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }            
        }

        private void tsb_PrintClaimForm_Click(object sender, EventArgs e)
        {            
            try
            {
                if (c1AllBatch.Rows.Count != 0)
                {
                    if (Validation() == true)
                    {
                        PrintClaim(PrintType.PrintOnForm);                        
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }            
        }

        private void tsb_PrintClaimData_Click(object sender, EventArgs e)
        {   
            try
            {
                gloCMSEDI.frmPrintCMS1500 ofrmPrintCMS1500 = new gloCMSEDI.frmPrintCMS1500(_databaseconnectionstring.ToString());
                if (ofrmPrintCMS1500.GetDefaultCoordinateUpdateSetting())
                {
                    bool _IsAllowPrint = true;
                    ofrmPrintCMS1500.ShowDialog();
                    _IsAllowPrint = ofrmPrintCMS1500.IsAllowPrinting;
                    if (ofrmPrintCMS1500 != null)
                        ofrmPrintCMS1500.Dispose();
                    if (!_IsAllowPrint)
                        return;
                }
                if (Validation() == true)
                {
                    PrintClaim(PrintType.PrintData);                    
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }            
        }

        private void cntmnuUpdateBatchStatus_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            try 
            {
                cntmnuUpdateBatchStatus.Visible = false;
                if (c1SubBatch.Rows.Count != 0) 
                {
                    switch (e.ClickedItem.Name) 
                    {
                        case "mnuItem_UpdateStatus":
                            #region "Menu Item UpdateStatus"

                            if (DialogResult.OK == MessageBox.Show("File status will change to 'SendToClearinghouse'.  This action will NOT transmit the file to the clearinghouse, only change the status.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question))
                            {                                
                                ArrayList oFilesDupli = new ArrayList();
                                int _EDIFileType = (int)EDIFileType.OutBox_837PClaimSubmission;
                                oFilesDupli.Add(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Electronic + "\\" + Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)));
                                UpdateStatus(_EDIFileType, oFilesDupli, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index)));
                                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch,gloAuditTrail.ActivityType.Send, "Batch named-" + (Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index))) + ",changed status as 'SendToClearinghouse' But File Not Transmitted to ClearingHouse, [Billing Method: " + String.Format(lblBillingMethodValue_ClaimManager.Text) + "]", 0, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index)), 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                FillC1AllBatch();
                            }
                            break;

                            #endregion

                        case "mnuItem_UpdateStatement":
                            #region "Menu Item UpdateStatement"

                            if (DialogResult.OK == MessageBox.Show("Statement status will change to 'Submitted'.  This action will NOT send the statement to the clearinghouse, only change the status.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question))
                            {
                                ArrayList oFilesDupli = new ArrayList();
                                int _EDIFileType = (int)EDIFileType.OutBox_Statements;
                                //oFilesDupli.Add(gloPMClaimGeneral.PM_ClaimManagement_OutBox_837PClaimSubmission_Electronic + "\\" + Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)));
                                UpdateStatus(_EDIFileType, oFilesDupli, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchPateintStatMstID"].Index)));
                                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Send, "Statement named-" + (Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index))) + ",changed status as 'Submitted' But Statement Not Transmitted to ClearingHouse", 0, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchPateintStatMstID"].Index)), 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                FillC1AllBatch();
                            }
                            break;

                            #endregion

                        case "mnuItem_MarkBatchPrinted":
                            #region "Menu Item MarkBatchPrinted"

                            if (DialogResult.OK == MessageBox.Show("Batch status will change to 'Printed'.  This action will NOT print the claim(s) in Batch, only change the status.", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Question))
                            {
                                ArrayList oFilesDupli = new ArrayList();
                                int _EDIFileType = (int)EDIFileType.OutBox_837PClaimSubmission;
                                oFilesDupli.Add(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Electronic + "\\" +Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)));
                                UpdateStatus(_EDIFileType, oFilesDupli, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index)));
                                UpdateBatchStatusPrinted(Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index)),0);
                                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Print, "Batch named-" + (Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index))) + ",changed status as 'Printed' But Claims Not Printed, [Billing Method: " + String.Format(lblBillingMethodValue_ClaimManager.Text) + "]", 0, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index)), 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                FillC1AllBatch();
                            }
                            break;

                            #endregion
                    }
                }
            }
            catch (Exception ex) 
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
        }

        void oClearingHouseMenuItem_Click(object sender, EventArgs e)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;

            DataTable dtBatches = new DataTable();
            ToolStripMenuItem cmnuClearingHouseItem = null;

            Int64 _BatchId = 0;
            Int64 _ClearingHouse_ID = 0;

            string sFileID = "";
            string _localPath = "";
            string _ClearingHouse_Name = "";

            EDIFileType _EDIFileType = EDIFileType.None;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);

                #region "Creating Folder Named By EDI_Files at Application Startup Path"

                if (System.IO.Directory.Exists(gloSettings.FolderSettings.AppTempFolderPath + "EDI_Files") == false)
                {
                    System.IO.Directory.CreateDirectory(gloSettings.FolderSettings.AppTempFolderPath + "EDI_Files");
                }

                #endregion

                #region "Delete All Existing Files Files"

                _localPath = gloSettings.FolderSettings.AppTempFolderPath + "EDI_Files";

                DirectoryInfo dirInfo = new DirectoryInfo(_localPath);
                FileInfo[] oFileInfo = dirInfo.GetFiles("*.*");
                if (oFileInfo.Length > 0)
                {
                    foreach (FileInfo curFile in oFileInfo)
                    {
                        curFile.Delete();
                    }
                }

                #endregion

                if (sender != null)
                {
                    ToolStripItem _tlsItem = ((ToolStripMenuItem)sender).OwnerItem;
                    if (_tlsItem.Tag != null)
                    {
                        if (Convert.ToString(_tlsItem.Tag).ToUpper().Trim() == "SEND")
                        {
                            #region "Upload Files For ClearingHouse"

                            cmnuClearingHouseItem = new ToolStripMenuItem();
                            cmnuClearingHouseItem = (ToolStripMenuItem)sender;
                            _ClearingHouse_Name = cmnuClearingHouseItem.Text;
                            _ClearingHouse_ID = Convert.ToInt64(cmnuClearingHouseItem.Tag.ToString());

                            ArrayList oFiles = new ArrayList();
                            ArrayList oFilesDupli = new ArrayList();

                            #region "Get Statement File Extension For Selected ClearingHouse to Send Statement"

                            //7022Items:.STA extension for GatewayEDI statements
                            string _sFileExtent = getStatementFileExtension(_ClearingHouse_ID);

                            #endregion

                            #region "Read Files and Values"
                            if (c1AllBatch.Rows.Count > 0)
                            {
                                if (c1AllBatch.Cols.Contains("nBatchID"))   //Get BatchID of ElectronicClaims
                                {
                                    _BatchId = Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index));
                                    sFileID = Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index));
                                }
                                else if (c1AllBatch.Cols.Contains("nBatchPateintStatMstID"))    //Get BatchID of Statements
                                {
                                    _BatchId = Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchPateintStatMstID"].Index));
                                    sFileID = Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchPateintStatMstID"].Index));
                                }

                                if (sFileID != null && sFileID != "")
                                {
                                    if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission)
                                    {
                                        oDBParameters.Add("@FileId", sFileID, ParameterDirection.Input, SqlDbType.BigInt);
                                        oDBParameters.Add("@FileType", Filetype.ElectronicClaims, ParameterDirection.Input, SqlDbType.VarChar);
                                        oDB.Retrive("Get_ClaimFiles", oDBParameters, out dtBatches);

                                        if (dtBatches != null && dtBatches.Rows.Count > 0)
                                        {
                                            _PrintFilePath = GenerateFile(dtBatches.Rows[0]["i837File"], Convert.ToString(dtBatches.Rows[0]["sBatchName"]), gloSettings.FolderSettings.AppTempFolderPath + "EDI_Files\\");
                                        }

                                    }
                                    else if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                                    {
                                        oDBParameters.Add("@FileId", sFileID, ParameterDirection.Input, SqlDbType.BigInt);
                                        oDBParameters.Add("@FileType", Filetype.Statements, ParameterDirection.Input, SqlDbType.VarChar);
                                        oDB.Retrive("Get_ClaimFiles", oDBParameters, out dtBatches);

                                        if (dtBatches != null && dtBatches.Rows.Count > 0)
                                        {
                                            _PrintFilePath = GenerateFile(dtBatches.Rows[0]["iBatchStatementFile"], Convert.ToString(dtBatches.Rows[0]["sBatchName"]), gloSettings.FolderSettings.AppTempFolderPath + "EDI_Files\\", _sFileExtent);
                                        }
                                    }

                                    if (System.IO.File.Exists(_PrintFilePath) == true)
                                    {
                                        FileInfo _fileInfo = new FileInfo(_PrintFilePath);
                                        if (_fileInfo.Extension == ".X12" || _fileInfo.Extension == ".txt" || _fileInfo.Extension == _sFileExtent)
                                        {
                                            oFiles.Add(_PrintFilePath);
                                            switch (iFileTypeID)
                                            {
                                                case (int)EDIFileType.OutBox_837PClaimSubmission:
                                                    oFilesDupli.Add(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Electronic + "\\" + Convert.ToString(dtBatches.Rows[0]["sBatchName"]));
                                                    break;

                                                case (int)EDIFileType.OutBox_Statements:
                                                    oFilesDupli.Add(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_Statements + "\\" + Convert.ToString(dtBatches.Rows[0]["sBatchName"]));
                                                    break;

                                                default:
                                                    break;
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (oFiles.Count <= 0)
                            {
                                if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                                {
                                    MessageBox.Show("Please select statement to send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                    return;
                                }
                                else
                                {
                                    MessageBox.Show("Please select claim to send.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                    return;
                                }
                            }
                            if (iFileTypeID == (int)EDIFileType.None)
                            {
                                MessageBox.Show("Claim file not found.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                return;
                            }
                            if (_ClearingHouse_ID <= 0)
                            {
                                MessageBox.Show("Clearinghouse not found.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                return;
                            }
                            if (oFiles.Count > 0 && iFileTypeID != (int)EDIFileType.None && _ClearingHouse_ID > 0)
                            {
                                #region "Upload Files For ClearingHouse"

                                _EDIFileType = (int)EDIFileType.None;
                                frmUploadClaim oUploadClaim = new frmUploadClaim(_ClearingHouse_ID, _ClearingHouse_Name, _databaseconnectionstring, oFiles, _EDIFileType);
                                if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                                {
                                    oUploadClaim.Text = "Upload Statement";
                                    oUploadClaim.ShowDialog();
                                }
                                else
                                {
                                    oUploadClaim.Name = "Upload Claim";
                                    oUploadClaim.ShowDialog();
                                }

                                if (System.IO.File.Exists(_PrintFilePath) == true)
                                {
                                    FileInfo MyFile = new FileInfo(@_PrintFilePath);
                                    MyFile.Delete();
                                }

                                #region " If Uploaded Successfully Move Files to Uploaded folder "

                                if (oUploadClaim.DialogResult == true)
                                {
                                    if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                                    {
                                        UpdateStatus(iFileTypeID, oFilesDupli, Convert.ToInt64(sFileID));
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Send, "Statement named-" + Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)) + ", Transmitted to ClearingHouse", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    }
                                    else if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission)
                                    {
                                        UpdateStatus(iFileTypeID, oFilesDupli, Convert.ToInt64(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBatchID"].Index)));
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Send, "Batch named-" + Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)) + ", Transmitted to ClearingHouse", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    }
                                }
                                else 
                                {
                                    if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                                    {
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Send, "Statement named-" + Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)) + ", Transmitted to ClearingHouse", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Failure, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    }
                                    else if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission)
                                    {
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Batch, gloAuditTrail.ActivityType.Send, "Batch named-" + Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)) + ", Transmitted to ClearingHouse", 0, _BatchId, 0, gloAuditTrail.ActivityOutCome.Failure, gloAuditTrail.SoftwareComponent.gloPM, true);
                                    }
                                }

                                #endregion " If uploaded successfully move files to uploaded folder "

                                oUploadClaim.Dispose();

                                #endregion
                            }
                            FillC1AllBatch();
                            
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            finally
            {
                if (System.IO.File.Exists(_PrintFilePath) == true)
                {
                    FileInfo MyFile = new FileInfo(@_PrintFilePath);
                    MyFile.Delete();
                }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
            }
        }

        private void btn_CMMouseHover(object sender, EventArgs e)
        {
            if (((Button)sender).Tag.ToString() == "UnSelected")
            {
                ((Button)sender).BackgroundImage = global::gloBilling.Properties.Resources.Img_LongYellow;
                ((Button)sender).BackgroundImageLayout = ImageLayout.Stretch;
            }
        }

        private void btn_CMMouseLeave(object sender, EventArgs e)
        {
            if (((Button)sender).Tag.ToString() == "UnSelected")
            {
                ((Button)sender).BackgroundImage = global::gloBilling.Properties.Resources.Img_LongBlueBtn;
                ((Button)sender).BackgroundImageLayout = ImageLayout.Stretch;
            }
        }

        #endregion

        #region "ClaimManager C1 Events"
        
        private void c1AllBatch_MouseDown(object sender, MouseEventArgs e)
        {
            try
            {
                if (c1AllBatch.Rows.Count > 0)
                {
                    if (c1AllBatch.HitTest(e.X, e.Y).Row >= 0 && e.Button == MouseButtons.Right)
                    {
                        c1AllBatch.Row = c1AllBatch.HitTest(e.X, e.Y).Row;
                        if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission)
                        {
                            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = true;
                            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
                            cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
                        }

                        if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission)
                        {
                            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
                            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
                            cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = true;
                        }

                        if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                        {
                            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
                            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = true;
                            cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
                        }
                    }
                    else
                    {
                        cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
                        cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
                        cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
                    }
                }
                else 
                {
                    cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
                    cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
                    cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
        }

        private void c1SubBatch_MouseDown(object sender, MouseEventArgs e)
        {
            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
            cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
            cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
        }

        private void c1AllBatch_AfterSelChange(object sender, RangeEventArgs e)
        {
            txtSearchSubBatch.Text = "";
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");            
            DataTable _dtSubbatchClaims = null;
            DataTable dtBatchDTL = null;
            Int64 _batchId = 0;
            string _batchName = "";
            
            try
            {
                if (((C1FlexGrid)sender).Rows.Count > 0 && ((C1FlexGrid)sender).RowSel >= 0)
                {
                    if (c1AllBatch.Cols.Contains("nBatchID") == true)
                    {
                        #region "Fill C1SubClaim With 837 Electronic Claim Details"

                        _batchId = Convert.ToInt64(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["nBatchID"].Index));
                        _batchName = Convert.ToString(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["sBatchName"].Index));

                        if (!(iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission) && !(iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted))
                        {
                            for (int i = 0; i < c1AllBatch.Rows.Count; i++)
                            {
                                if (i == Convert.ToInt32(((C1FlexGrid)sender).RowSel))
                                { ((C1FlexGrid)sender).SetCellImage(((C1FlexGrid)sender).RowSel, 0, imgLst.Images[17]); }
                                else
                                { ((C1FlexGrid)sender).SetCellImage(i, 0, imgLst.Images[0]); }
                            }
                        }

                        if (_batchId > 0 && Convert.ToString(_batchId).Trim() != "")
                        {
                            //dtBatchDTL = ogloBilling.GetBatch(_batchId);                            
                            //_dtSubbatchClaims = GetDTLBatchClaims(_batchId,Convert.ToInt16(dtBatchDTL.Rows[0]["BillingMethodID"]));
                            if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted)
                            {   
                                //_dtSubbatchClaims = GetBatchClaims(_batchId);                                
                                _dtSubbatchClaims = GetBatchElectronicClaims( _batchId);
                            }
                            if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                            {
                                _dtSubbatchClaims = GetBatchPaperClaims(_batchId, IsPrinted); 
                            }                            

                            if (_dtSubbatchClaims != null)
                            {
                                gloGlobal.gloPMGlobal.SplitClaimColumn(_dtSubbatchClaims, _dtSubbatchClaims.Columns.IndexOf("Claim"));
                            }

                            DataView dv = new DataView(_dtSubbatchClaims);
                            if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                            { dv.Sort = "SortClaim ASC,SortSubClaim ASC"; }
                            else
                            { dv.Sort = "SortClaim Desc,SortSubClaim ASC"; }

                            c1SubBatch.DataSource = dv;
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = true;
                            lblClaimAmtValue_ClaimManager.Visible = true;
                            lblBatchDateValue_ClaimManager.Visible = true;
                            lblBatchDate_ClaimManager.Visible = true;
                            lblBillingMethodValue_ClaimManager.Visible = true;
                            lblBillingMethod_ClaimManager.Visible = true;

                            dtBatchDTL = ogloBilling.GetBatch(_batchId);

                            lblNumClaim_ClaimManger.Text = "No. of Claims : ";
                            lblClaimCountValue_ClaimManager.Text = Convert.ToString(_dtSubbatchClaims.Rows.Count);

                            lblClaimAmt_ClaimManager.Text = "Total Claim Amount : ";
                            lblClaimAmtValue_ClaimManager.Text = Convert.ToString(_dtSubbatchClaims.Compute("SUM(Charges)", String.Empty));
                            lblBatchDateValue_ClaimManager.Text = GetBatchDate(Convert.ToInt64(_batchId));
                            if (dtBatchDTL != null && Convert.ToInt32(dtBatchDTL.Rows[0]["BillingMethodID"]) > 0)
                            {
                                lblBillingMethodValue_ClaimManager.Text = get_Billingmethod(Convert.ToInt32(dtBatchDTL.Rows[0]["BillingMethodID"]));
                            }

                            if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission)
                            {
                                cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = true;
                                cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
                                cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
                            }

                            if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission)
                            {
                                cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
                                cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = false;
                                cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = true;
                            }
                        }

                        #endregion
                    }

                    else if (c1AllBatch.Cols.Contains("nBatchPateintStatMstID") == true) 
                    {
                        #region "Fill C1SubClaim With Patients Under the Statements"

                        _batchId = Convert.ToInt64(((C1FlexGrid)sender).GetData(((C1FlexGrid)sender).RowSel, ((C1FlexGrid)sender).Cols["nBatchPateintStatMstID"].Index));
                        for (int i = 0; i < c1AllBatch.Rows.Count; i++) 
                        {
                            if (i == Convert.ToInt32(((C1FlexGrid)sender).RowSel))
                                ((C1FlexGrid)sender).SetCellImage(((C1FlexGrid)sender).RowSel, 0, imgLst.Images[17]);
                            else 
                                ((C1FlexGrid)sender).SetCellImage(i, 0, imgLst.Images[0]);
                        }
                        
                        if (_batchId > 0 && Convert.ToString(_batchId).Trim() != "")
                        {
                            _dtSubbatchClaims = GetBatchPatientList(_batchId);                            

                            DataView dv = new DataView(_dtSubbatchClaims);
                            c1SubBatch.DataSource = dv;

                            if (!_dtSubbatchClaims.Columns.Contains("SortAcc"))
                            {
                                DataColumn dColumn = new DataColumn();
                                dColumn.ColumnName = "SortAcc";
                                dColumn.DataType = typeof(System.String);
                                dColumn.Caption = "SortAcc";
                                _dtSubbatchClaims.Columns.Add(dColumn);
                                dColumn = null;
                            }                            

                            string AccNumber = "";
                            for (int rowIndex = 0; rowIndex < _dtSubbatchClaims.Rows.Count; rowIndex++)
                            {
                                AccNumber = Convert.ToString(_dtSubbatchClaims.Rows[rowIndex][1]);

                                if (AccNumber != null && AccNumber.Length > 0)
                                {
                                    _dtSubbatchClaims.Rows[rowIndex]["SortAcc"] = Convert.ToString(AccNumber);                                                                         
                                }
                            }
                            dv.Sort = "SortAcc Desc";
                            DesignGrid("CLAIM_MANAGER_STATEMENTS");

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = true;
                            lblClaimAmtValue_ClaimManager.Visible = true;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;

                            lblNumClaim_ClaimManger.Text = "No. of Patients : ";
                            lblClaimCountValue_ClaimManager.Text = Convert.ToString(_dtSubbatchClaims.Rows.Count);

                            lblClaimAmt_ClaimManager.Text = "Total Due Amount : ";
                            lblClaimAmtValue_ClaimManager.Text = Convert.ToString(_dtSubbatchClaims.Compute("SUM(PatientDue)", String.Empty));
                            if (lblClaimAmtValue_ClaimManager.Text == "" || lblClaimAmtValue_ClaimManager.Text == null) 
                            { lblClaimAmtValue_ClaimManager.Text = "0"; }


                            if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                            {
                                cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatus"].Visible = false;
                                cntmnuUpdateBatchStatus.Items["mnuItem_UpdateStatement"].Visible = true;
                                cntmnuUpdateBatchStatus.Items["mnuItem_MarkBatchPrinted"].Visible = false;
                            }
                        }

                        #endregion
                    }
                    c1SubBatch.ContextMenuStrip = cntmnuUpdateBatchStatus;
                }
                else 
                {
                    lblNumClaim_ClaimManger.Visible = false;
                    lblClaimCountValue_ClaimManager.Visible = false;
                    lblClaimAmt_ClaimManager.Visible = false;
                    lblClaimAmtValue_ClaimManager.Visible = false;
                    lblBatchDateValue_ClaimManager.Visible = false;
                    lblBatchDate_ClaimManager.Visible = false;
                    lblBillingMethodValue_ClaimManager.Visible = false;
                    lblBillingMethod_ClaimManager.Visible = false;
                    c1SubBatch.DataSource = null;                                   
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
            finally 
            {
                if (_dtSubbatchClaims != null) { _dtSubbatchClaims.Dispose(); _dtSubbatchClaims = null; }
                if (ogloBilling != null) { ogloBilling.Dispose(); ogloBilling = null; }                
            }
        }

        private void c1SubBatch_MouseMove(object sender, MouseEventArgs e)
        {
            gloC1FlexStyle.ShowToolTipForLineBreak(C1SuperTooltipDx, ((C1FlexGrid)sender), e.Location);
        }

        private void c1SubBatch_MouseLeave(object sender, EventArgs e)
        {
            C1SuperTooltipDx.Hide();
        }

        #endregion

        #region "Search"
        
        private void txtSearchAllBatch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (tabManager.SelectedTab.Name == tbpg_ClaimManager.Name)
                {
                    if (chkCrossClaimSearch.Checked == false)
                    {
                        DataView dv = (DataView)c1AllBatch.DataSource;
                        SearchBatch(txtSearchAllBatch.Text, dv);
                    }
                    else if (chkCrossClaimSearch.Checked == true)
                    {
                        if (searchTimer.Enabled == false)
                        {
                            searchTimer.Stop();
                            searchTimer.Enabled = true;
                        }
                    }
                }                
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
            finally 
            {
                this.Cursor = Cursors.Default; 
            }
        }

        private void txtSearchAllBatch_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                _SearchCurrentTime = DateTime.Now;
                if (chkCrossClaimSearch.Checked == true)
                {
                    searchTimer.Stop();
                    searchTimer.Interval = 700;
                    searchTimer.Enabled = true;
                }                
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
        }

        private void txtSearchSubBatch_TextChanged(object sender, EventArgs e)
        {
            Boolean bResult = false;
            if (Convert.ToString(((TextBox)sender).Tag).ToUpper() == "CLAIM MANAGER")
            {
                string sSrchType = "CLAIM MANAGER";
                DataView dv = (DataView)c1SubBatch.DataSource;
                bResult = SearchClaims(sSrchType, txtSearchSubBatch.Text, dv);
            }
        }

        void searchTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (txtSearchAllBatch.Text.Trim() != "")
                {
                    // IF LAST KEY PRESS TIME DIFFERENCE IS 100 MILLISECONDS THEN SEARCHING WILL BE START //
                    if (DateTime.Now.Subtract(_SearchCurrentTime).Milliseconds > 100)
                    {
                        searchTimer.Stop();
                        SearchClaimAcrossBatch(txtSearchAllBatch.Text);
                    }
                }
                else
                {
                    searchTimer.Stop();
                    FillC1AllBatch();
                    chkCrossClaimSearch.Checked = true;
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }

        }
        
        #endregion

        #region "Fill / Design ClaimManager"

        private void FillgloPMClaimStructure()
        {
            #region "Assign Folders Values"
            
            try
            {
                object _ServrPath = GetServerPath();
                if (_ServrPath != null && _ServrPath.ToString().Trim() != "")
                {
                    if (System.IO.Directory.Exists(_ServrPath.ToString()) == true)
                    {
                        ClsGeneralClaimManager.PM_ServerPath = _ServrPath.ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }            

            if (ClsGeneralClaimManager.PM_ServerPath.Trim() != "")
            {
                ClsGeneralClaimManager.PM_ClaimManagement_Path = ClsGeneralClaimManager.PM_ServerPath + "\\Claim Management"; 
                ClsGeneralClaimManager.PM_ClaimManagement_OutBox = ClsGeneralClaimManager.PM_ClaimManagement_Path + "\\OutBox";
                
                ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Electronic = ClsGeneralClaimManager.PM_ClaimManagement_OutBox + "\\837P Claim submission\\Electronic";
                ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Paper = ClsGeneralClaimManager.PM_ClaimManagement_OutBox + "\\837P Claim submission\\Paper";
                ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Sent = ClsGeneralClaimManager.PM_ClaimManagement_OutBox + "\\837P Claim submission Sent";
                              
                ClsGeneralClaimManager.PM_ClaimManagement_OutBox_Statements = ClsGeneralClaimManager.PM_ClaimManagement_OutBox + "\\Statements";
                ClsGeneralClaimManager.PM_ClaimManagement_OutBox_Statements_Sent = ClsGeneralClaimManager.PM_ClaimManagement_OutBox + "\\Statements Sent";
            }

            #endregion
        }

        public void FillC1AllBatch()
        {
            DataTable dtBatches = new DataTable();
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            string sSQL;

            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                switch (iFileTypeID)
                {                    
                    case (int)EDIFileType.OutBox_837PClaimSubmission:
                        #region "837ElectronicClaimSubmission"

                        sSQL = "SELECT nBatchID,sBatchName FROM BL_CMSEDI_ElectronicClaim WHERE i837File IS NOT NULL AND nStatus = " + TransactionStatus.SendToClaimManager.GetHashCode() + " ORDER BY dtCreatedDate DESC";
                        oDB.Retrive_Query(sSQL, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            Tsb_BatchSend.Visible = true;
                            tsb_View.Visible = true;

                            c1AllBatch.ContextMenuStrip = cntmnuUpdateBatchStatus;
                            if (!dtBatches.Columns.Contains("sCellImg"))
                            {
                                dtBatches.Columns.Add("Img").SetOrdinal(0);                                    
                            }
                            c1AllBatch.DataSource = null;                            
                            DataView dv = new DataView(dtBatches);
                            c1AllBatch.DataSource = dv;                            
                            DesignClaimBatchTreeGrid(c1AllBatch);                            
                        }
                        else 
                        {
                            Tsb_BatchSend.Visible = false;
                            tsb_View.Visible = false;

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = false;
                            lblClaimAmtValue_ClaimManager.Visible = false;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;
                            lblNumClaim_ClaimManger.Text = "No. of Claims : ";
                            lblClaimCountValue_ClaimManager.Text = "0";

                            c1AllBatch.ContextMenuStrip = null;
                            c1AllBatch.DataSource = null;
                            c1SubBatch.DataSource = null;
                            c1AllBatch.Rows.Count = 0;
                            c1SubBatch.Rows.Count = 1;
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_837PClaim_Submitted:
                        #region "837ElectronicClaimSubmitted"

                        c1AllBatch.ContextMenuStrip = null;
                        sSQL = "SELECT nBatchID,sBatchName FROM BL_CMSEDI_ElectronicClaim WHERE nStatus = " + TransactionStatus.SendToClearingHouse.GetHashCode() + " ORDER BY dtCreatedDate DESC";
                        oDB.Retrive_Query(sSQL, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {                            
                            tsb_View.Visible = true;
                            if (!dtBatches.Columns.Contains("sCellImg"))
                            {
                                dtBatches.Columns.Add("Img").SetOrdinal(0);
                            }
                            c1AllBatch.DataSource = null;
                            DataView dv = new DataView(dtBatches);
                            c1AllBatch.DataSource = dv;                            
                            DesignClaimBatchTreeGrid(c1AllBatch);                            
                        }
                        else
                        {
                            tsb_View.Visible = false;

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = false;
                            lblClaimAmtValue_ClaimManager.Visible = false;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;
                            lblNumClaim_ClaimManger.Text = "No. of Claims : ";
                            lblClaimCountValue_ClaimManager.Text = "0";

                            c1AllBatch.DataSource = null;
                            c1SubBatch.DataSource = null;
                            c1AllBatch.Rows.Count = 0;
                            c1SubBatch.Rows.Count = 1;
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_837P_PaperClaimSubmission:
                        #region "837PaperClaimSubmission"

                        int c1AllBatchRowSel = 0;
                        if (c1AllBatch.RowSel > 0) 
                        {
                            c1AllBatchRowSel = c1AllBatch.RowSel;
                        }

                        IsPrinted = 0;
                        oDBParameters = new gloDatabaseLayer.DBParameters();
                        oDBParameters.Add("@ClaimStatus", IsPrinted, ParameterDirection.Input, SqlDbType.Int);
                        oDB.Retrive("SELECT_Claims_Submitted_Printed", oDBParameters, out dtBatches);                       
                        c1AllBatch.DataSource = null;
                        c1SubBatch.DataSource = null;                        
                        c1AllBatch.RowSel = -1;                        
                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            tsb_Print.Visible = true;
                            tsb_PrintForm.Visible = true;
                            tsb_PrintClaimData.Visible = true;
                            tsb_PrintClaimForm.Visible = true;

                            c1AllBatch.ContextMenuStrip = cntmnuUpdateBatchStatus;
                            if (!dtBatches.Columns.Contains("sCellImg"))
                            {
                                dtBatches.Columns.Add("Img").SetOrdinal(0);
                            }
                            c1AllBatch.DataSource = null;
                            DataView dv = new DataView(dtBatches);
                            c1AllBatch.DataSource = dv;
                            DesignClaimBatchTreeGrid(c1AllBatch);
                            if (c1AllBatch.RowSel == 0 && !(c1AllBatch.RowSel > 0) && c1AllBatch.Rows.Count != 1)
                            {
                                c1AllBatch.Row = c1AllBatchRowSel;
                            }
                        }                        
                        else
                        {
                            tsb_Print.Visible = false;
                            tsb_PrintForm.Visible = false;
                            tsb_PrintClaimData.Visible = false;
                            tsb_PrintClaimForm.Visible = false;

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = false;
                            lblClaimAmtValue_ClaimManager.Visible = false;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;
                            lblNumClaim_ClaimManger.Text = "No. of Claims : ";
                            lblClaimCountValue_ClaimManager.Text = "0";

                            c1AllBatch.ContextMenuStrip = null;
                            c1AllBatch.DataSource = null;
                            c1SubBatch.DataSource = null;
                            c1AllBatch.Rows.Count = 0;
                            c1SubBatch.Rows.Count = 1;
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");                            
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_837P_PaperClaimSubmitted:
                        #region "837PaperClaimPrinted"

                        c1AllBatchRowSel = 0;
                        if (c1AllBatch.RowSel > 0) 
                        {
                            c1AllBatchRowSel = c1AllBatch.RowSel;
                        }

                        IsPrinted = 1;
                        c1AllBatch.ContextMenuStrip = null;
                        oDBParameters = new gloDatabaseLayer.DBParameters();
                        oDBParameters.Add("@ClaimStatus", IsPrinted, ParameterDirection.Input, SqlDbType.Int);
                        oDB.Retrive("SELECT_Claims_Submitted_Printed", oDBParameters, out dtBatches);
                        c1AllBatch.DataSource = null;
                        c1SubBatch.DataSource = null;                        
                        c1AllBatch.RowSel = -1;                        
                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            tsb_Print.Visible = true;
                            tsb_PrintForm.Visible = true;
                            tsb_PrintClaimData.Visible = true;
                            tsb_PrintClaimForm.Visible = true;

                            if (!dtBatches.Columns.Contains("sCellImg"))
                            {
                                dtBatches.Columns.Add("Img").SetOrdinal(0);
                            }
                            c1AllBatch.DataSource = null;
                            DataView dv = new DataView(dtBatches);
                            c1AllBatch.DataSource = dv;
                            DesignClaimBatchTreeGrid(c1AllBatch);
                            if (c1AllBatch.RowSel == 0 && !(c1AllBatch.RowSel > 0) && c1AllBatch.Rows.Count != 1) 
                            {
                                c1AllBatch.Row = c1AllBatchRowSel;                                
                            }
                        }
                        else
                        {
                            tsb_Print.Visible = false;
                            tsb_PrintForm.Visible = false;
                            tsb_PrintClaimData.Visible = false;
                            tsb_PrintClaimForm.Visible = false;

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = false;
                            lblClaimAmtValue_ClaimManager.Visible = false;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;
                            lblNumClaim_ClaimManger.Text = "No. of Claims : ";
                            lblClaimCountValue_ClaimManager.Text = "0";

                            c1AllBatch.DataSource = null;
                            c1SubBatch.DataSource = null;
                            c1AllBatch.Rows.Count = 0;
                            c1SubBatch.Rows.Count = 1;
                            DesignGrid("CLAIM_MANAGER_ELECTRONICCLAIMS");                            
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_Statements:
                        #region "AllStatementsSubmission"

                        sSQL = "SELECT nBatchPateintStatMstID,sBatchName FROM BL_Batch_PatientStatement_MST WHERE iBatchStatementFile IS NOT NULL And ISNULL(bIsSent,0)=0 And ISNULL(bIsVoid,0)=0 ORDER BY dtCreateDate DESC";
                        oDB.Retrive_Query(sSQL, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            Tsb_BatchSend.Visible = true;
                            tsb_View.Visible = true;

                            c1AllBatch.ContextMenuStrip = cntmnuUpdateBatchStatus;
                            if (!dtBatches.Columns.Contains("sCellImg"))
                            {
                                dtBatches.Columns.Add("Img").SetOrdinal(0);
                            }
                            c1AllBatch.DataSource = null;                            
                            DataView dv = new DataView(dtBatches);
                            c1AllBatch.DataSource = dv;
                            DesignClaimBatchTreeGrid(c1AllBatch);
                        }
                        else
                        {
                            Tsb_BatchSend.Visible = false;
                            tsb_View.Visible = false;

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = false;
                            lblClaimAmtValue_ClaimManager.Visible = false;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;
                            lblNumClaim_ClaimManger.Text = "No. of Patients : ";
                            lblClaimCountValue_ClaimManager.Text = "0";

                            c1AllBatch.ContextMenuStrip = null;
                            c1AllBatch.DataSource = null;
                            c1SubBatch.DataSource = null;
                            c1AllBatch.Rows.Count = 0;
                            c1SubBatch.Rows.Count = 1;
                            DesignGrid("CLAIM_MANAGER_STATEMENTS");
                        }
                        break;

                        #endregion

                    case (int)EDIFileType.OutBox_Statements_Submitted:
                        #region "StatementsSubmitted"

                        c1AllBatch.ContextMenuStrip = null;
                        sSQL = "SELECT nBatchPateintStatMstID,sBatchName FROM BL_Batch_PatientStatement_MST WHERE ISNULL(bIsSent,0) = 1 And ISNULL(bIsVoid,0)=0 ORDER BY dtCreateDate DESC";
                        oDB.Retrive_Query(sSQL, out dtBatches);

                        if (dtBatches != null && dtBatches.Rows.Count != 0)
                        {
                            tsb_View.Visible = true;

                            if (!dtBatches.Columns.Contains("sCellImg"))
                            {
                                dtBatches.Columns.Add("Img").SetOrdinal(0);
                            }
                            c1AllBatch.DataSource = null;                            
                            DataView dv = new DataView(dtBatches);
                            c1AllBatch.DataSource = dv;
                            DesignClaimBatchTreeGrid(c1AllBatch);
                        }
                        else
                        {
                            tsb_View.Visible = false;

                            lblNumClaim_ClaimManger.Visible = true;
                            lblClaimCountValue_ClaimManager.Visible = true;
                            lblClaimAmt_ClaimManager.Visible = false;
                            lblClaimAmtValue_ClaimManager.Visible = false;
                            lblBatchDateValue_ClaimManager.Visible = false;
                            lblBatchDate_ClaimManager.Visible = false;
                            lblBillingMethodValue_ClaimManager.Visible = false;
                            lblBillingMethod_ClaimManager.Visible = false;
                            lblNumClaim_ClaimManger.Text = "No. of Patients : ";
                            lblClaimCountValue_ClaimManager.Text = "0";
                            
                            c1AllBatch.DataSource = null;
                            c1SubBatch.DataSource = null;
                            c1AllBatch.Rows.Count = 0;
                            c1SubBatch.Rows.Count = 1;
                            DesignGrid("CLAIM_MANAGER_STATEMENTS");
                        }
                        break;

                        #endregion
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }

                if (txtSearchAllBatch.Text != "" && txtSearchAllBatch.Text.Length > 0)
                { txtSearchAllBatch.Text = ""; }
                if (txtSearchSubBatch.Text != "" && txtSearchSubBatch.Text.Length > 0)
                { txtSearchSubBatch.Text = ""; }
                if (chkCrossClaimSearch.Checked==true)
                { chkCrossClaimSearch.Checked = false; }
            }
        }

        private DataTable GetListOfPatients(Int64 iPatientStmtID)
        {
            DataTable dtPatientList = new DataTable();
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;            
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);
                oDBParameters.Add("@BatchPatientStatMstID", iPatientStmtID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("SELECT_PatientList_Statement", oDBParameters, out dtPatientList);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
            return dtPatientList;
        }

        private DataTable GetBatchPatientList(Int64 iPatientStmtID)
        {
            DataTable dtPatientList = new DataTable();
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);
                oDBParameters.Add("@BatchPatientStatMstID", iPatientStmtID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("SELECT_BatchPatientList_Statement", oDBParameters, out dtPatientList);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
            return dtPatientList;
        }

        private void FillClearingHouseMenus(ToolStripDropDownButton tsbParents)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtClearingHouse = new DataTable();
            string _SQLQuery = "";
            tsbParents.DropDownItems.Clear();
            try
            {
                oDB.Connect(false);
                _SQLQuery = "SELECT nClearingHouseID,sClearingHouseCode FROM BL_ClearingHouse_MST WHERE nClearingHouseID IS NOT NULL AND sClearingHouseCode IS NOT NULL";
                oDB.Retrive_Query(_SQLQuery, out dtClearingHouse);

                if (dtClearingHouse != null && dtClearingHouse.Rows.Count > 0)
                {
                    for (int i = 0; i < dtClearingHouse.Rows.Count; i++)
                    {
                        ToolStripMenuItem oClearingHouseMenuItem = new ToolStripMenuItem();
                        oClearingHouseMenuItem.Text = dtClearingHouse.Rows[i]["sClearingHouseCode"].ToString();
                        oClearingHouseMenuItem.Tag = dtClearingHouse.Rows[i]["nClearingHouseID"].ToString();
                        oClearingHouseMenuItem.ForeColor = Color.FromArgb(31, 73, 125);
                        oClearingHouseMenuItem.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        oClearingHouseMenuItem.Image = imgLst.Images[16];
                        oClearingHouseMenuItem.ImageAlign = ContentAlignment.MiddleCenter;
                        oClearingHouseMenuItem.ImageScaling = ToolStripItemImageScaling.None;
                        oClearingHouseMenuItem.Click += new EventHandler(oClearingHouseMenuItem_Click);
                        tsbParents.DropDownItems.Add(oClearingHouseMenuItem);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (dtClearingHouse != null) { dtClearingHouse.Dispose(); dtClearingHouse = null; }
            }
        }

        private void DesignClaimBatchTreeGrid(C1FlexGrid c1GridObj)
        {
            try
            {
                c1GridObj.AllowEditing = false;
                if (iFileTypeID == (int)EDIFileType.OutBox_837PClaim_Submitted || iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                {
                    #region "Set Columns For ElectronicFiles"

                    c1GridObj.Cols["sBatchName"].DataType = typeof(System.String);
                    c1GridObj.Cols["nBatchID"].DataType = typeof(System.Int64);

                    c1GridObj.Cols["nBatchID"].Visible = false;
                    c1GridObj.Cols["sBatchName"].Visible = true;                    
                    c1GridObj.Cols["sBatchName"].Width = 150;

                    if (c1GridObj.Cols.Contains("dtCreateddate")) { c1GridObj.Cols["dtCreateddate"].Visible = false; }

                    if (c1GridObj.Cols.Contains("Img"))
                    {
                        c1GridObj.Cols["Img"].Width = 20;                       

                        //if (c1AllBatch.Cols.Contains("dtCreateddate") == true)
                        if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission||iFileTypeID==(int)EDIFileType.OutBox_837P_PaperClaimSubmitted)
                        {
                            c1GridObj.Cols["dtCreateddate"].Visible = false;
                            c1GridObj.Cols["nBillingMethodID"].Visible = false;
                            
                            for (int i = 0; i < c1GridObj.Rows.Count; i++)
                            {
                                if (Convert.ToString(c1GridObj.Rows[i]["nBillingMethodID"]) == "8")
                                {
                                    c1GridObj.SetCellImage(i, 0, imgLst.Images[19]);
                                }
                                if (Convert.ToString(c1GridObj.Rows[i]["nBillingMethodID"]) == "4")
                                {
                                    c1GridObj.SetCellImage(i, 0, imgLst.Images[20]);
                                }
                                if (Convert.ToString(c1GridObj.Rows[i]["nBillingMethodID"]) == "2")
                                {
                                    c1GridObj.SetCellImage(i, 0, imgLst.Images[18]);
                                }
                                if (Convert.ToString(c1GridObj.Rows[i]["nBillingMethodID"]) != "2" && Convert.ToString(c1GridObj.Rows[i]["nBillingMethodID"]) != "4" && Convert.ToString(c1GridObj.Rows[i]["nBillingMethodID"]) != "8") 
                                {
                                    c1GridObj.SetCellImage(i, 0, imgLst.Images[0]);
                                }
                            }
                        }                        
                    }

                    #endregion
                }

                if (iFileTypeID == (int)EDIFileType.OutBox_Statements || iFileTypeID == (int)EDIFileType.OutBox_Statements_Submitted)
                {
                    #region "Set Columns For Statements"

                    c1GridObj.Cols["sBatchName"].DataType = typeof(System.String);
                    c1GridObj.Cols["nBatchPateintStatMstID"].DataType = typeof(System.Int64);

                    c1GridObj.Cols["nBatchPateintStatMstID"].Visible = false;
                    c1GridObj.Cols["sBatchName"].Visible = true;                    
                    c1GridObj.Cols["sBatchName"].Width = 150;

                    if (c1GridObj.Cols.Contains("Img"))
                    {
                        c1GridObj.Cols["Img"].Width = 20;                        
                    }

                    #endregion
                }                
            }
            catch //(Exception ex)
            {
                throw;
            }
        }
        
        #endregion

        #region "File Generate,Insert,Convert"

        public byte[] ConvertFiletoBinary(string strFileName)
        {
            if (File.Exists(strFileName))
            {
                FileStream oFile = default(FileStream);
                BinaryReader oReader = default(BinaryReader);
                try
                {
                    //'Please uncomment the following line of code to read the file, even the file is in use by same or another process
                    //oFile = New FileStream(strFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite, 8, FileOptions.Asynchronous)

                    //'To read the file only when it is not in use by any process
                    oFile = new FileStream(strFileName, FileMode.Open, FileAccess.Read);
                    oReader = new BinaryReader(oFile);
                    byte[] bytesRead = oReader.ReadBytes((int)oFile.Length);

                    return bytesRead;
                }
                catch (IOException ex)
                {
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                    return null;
                }
                catch (Exception ex)
                {
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                    return null;
                }
                finally
                {
                    oFile.Close();
                    oReader.Close();
                }
            }
            else
            {
                return null;
            }
        }

        public Int64 InsertFileDetails(byte[] bRemitFile, string sfileName, int _FileType)
        {
            Int64 _result = 0;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            try
            {
                object _intresult = 0;
                oDB.Connect(false);

                oDBParameters.Add("@IMG_REMIT_FILE", bRemitFile, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Image);
                oDBParameters.Add("@S_REMIT_FILE_NAME", Convert.ToString(sfileName), System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                oDBParameters.Add("@N_STATUS", RemittanceProcessed.NotProcessed, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@DT_CREATED_DATE", DateTime.Now, ParameterDirection.Input, SqlDbType.DateTime);
                oDBParameters.Add("@N_USER_ID", Convert.ToInt64(appSettings["UserID"]), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@N_CLINIC_ID", Convert.ToInt64(appSettings["ClinicID"]), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@N_MACHINE_ID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@N_FILE_TYPE", _FileType, ParameterDirection.Input, SqlDbType.Int);
                _result = oDB.Execute("BL_INSERT_CMSEDI_Remit", oDBParameters);

                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
            return _result;
        }

        public string GenerateFile(object cntFromDB, string strFileName, string sPath, string sFileExtent = ".txt")
        {
            if ((cntFromDB != null))
            {
                if (cntFromDB == System.DBNull.Value == false)
                {
                    byte[] content = (byte[])cntFromDB;
                    MemoryStream stream = new MemoryStream(content);
                    string _FilePath = "";
                    //7022Items:.STA extension for GatewayEDI statements
                    ////Pass file extension to file path.
                    _FilePath += sPath + strFileName + sFileExtent;

                    System.IO.FileStream oFile = new System.IO.FileStream(_FilePath, System.IO.FileMode.Create);

                    stream.WriteTo(oFile);
                    oFile.Close();
                    return _FilePath;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        #endregion 

        #region "Get Current Clearing House"

        private string getStatementFileExtension(Int64 _nClearingHouseID = 0)
        {
            string _sFileExtent = string.Empty;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                string _sqlQuery = string.Empty;
                if (_nClearingHouseID == 0)
                {
                    _sqlQuery = "SELECT sStatementFileExtension FROM dbo.BL_ClearingHouse_MST WHERE bIsDefault= 1 AND nClinicID= 1";
                }
                else
                {
                    _sqlQuery = "SELECT sStatementFileExtension FROM dbo.BL_ClearingHouse_MST WHERE nClearingHouseID= " + _nClearingHouseID + " AND nClinicID= 1";
                }
                oDB.Connect(false);
                _sFileExtent = oDB.ExecuteScalar_Query(_sqlQuery).ToString();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return _sFileExtent;
        }

        #endregion

        #region "Update Status"

        public void UpdateStatus(int iFileType, ArrayList oFilesDupli, Int64 BatchID)
        {
            #region Change Status In Database for uploaded claims

            if (c1AllBatch.Rows.Count != 0) 
            {
                if (c1SubBatch.RowSel != 0) 
                {                    
                    string _batchname = "";
                    if (iFileType == (int)EDIFileType.OutBox_837PClaimSubmission)
                    {
                        _batchname = Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index));
                        
                        if (_batchname != "")
                        {
                            UpdateClaimStatus(_batchname, TransactionStatus.SendToClearingHouse, false);
                        }
                    }
                    else if (iFileType == (int)EDIFileType.OutBox_Statements)
                    {
                        UpdateStatementStatus(Convert.ToInt64(BatchID));
                    }
                }
            }

            #endregion

            if (ClaimgetCopyEDIFiles() == 1 && iFileType != (int)EDIFileType.OutBox_Statements)
            {
                MoveUploadedFiles(oFilesDupli);
            }
            if (iFileType != (int)EDIFileType.OutBox_Statements)
            {
                UpdateBatchStatus(Convert.ToInt64(BatchID));
            }
        }

        void UpdateClaimStatus(string sBatchName, TransactionStatus status, bool IsOldClaim)
        {
            sBatchName = sBatchName.Replace("'", "''");

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtTranaction = null;

            string _sqlQuery = "select BL_Transaction_Batch_DTL.nTransactionMasterID, BL_Transaction_Batch_DTL.nTransactionID, BL_Transaction_Batch_DTL.nClinicID" +
                " from BL_Transaction_Batch_DTL INNER JOIN BL_Transaction_Batch ON BL_Transaction_Batch_DTL.NBATCHID = BL_Transaction_Batch.NBATCHID " +
                " WHERE BL_Transaction_Batch.SBATCHNAME ='" + sBatchName + "'";

            try
            {
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out dtTranaction);

                if ((dtTranaction != null) && (dtTranaction.Rows.Count > 0))
                {
                    for (int i = 0; i < dtTranaction.Rows.Count; i++)
                    {
                        DataRow drTransaction = dtTranaction.Rows[i];

                        _sqlQuery = "UPDATE BL_Transaction_Claim_MST SET nStatus = '" + status.GetHashCode() + "' " +
                            " WHERE nTransactionMasterID = '" + Convert.ToInt64(drTransaction["nTransactionMasterID"]) + "' " +
                            " AND nTransactionID = '" + Convert.ToInt64(drTransaction["nTransactionID"]) + "' " +
                            " AND nClinicID = '" + Convert.ToInt64(drTransaction["nClinicID"]) + "' ";

                        //if (IsOldClaim) //gloPM5040 201000504
                        //{
                        _sqlQuery += " AND nStatus != " + TransactionStatus.InsurancePaid.GetHashCode();
                        _sqlQuery += " AND nStatus != " + TransactionStatus.Rejected.GetHashCode();
                        _sqlQuery += " AND nStatus != 21 ";//Rebilled.
                        _sqlQuery += " AND nStatus != 22 ";//Resent.
                        //}

                        oDB.Execute_Query(_sqlQuery);
                    }
                }
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (dtTranaction != null) { dtTranaction.Dispose(); dtTranaction = null; }
            }
        }

        public void UpdateBatchStatus(Int64 iBatchID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            string sSQL;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                sSQL = "UPDATE BL_CMSEDI_ElectronicClaim SET nStatus = " + TransactionStatus.SendToClearingHouse.GetHashCode() + " WHERE nBatchID = " + iBatchID;
                oDB.Execute_Query(sSQL);
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
        }

        private void UpdateStatementStatus(Int64 StatementID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                oDB.Connect(false);
                string _sqlQuery = "Update BL_Batch_PatientStatement_MST set bIsSent=1 where nBatchPateintStatMstID=" + StatementID + "";
                oDB.Execute_Query(_sqlQuery);                
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
        }

        private void UpdateBatchStatusPrinted(Int64 BatchID, Int64 TransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = null;
            try
            {
                oDB.Connect(false);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDBParameters.Add("@BatchID", BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);                
                oDB.Execute("UpdateBatchStatusPrinted", oDBParameters);                
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }
        }

        private void MoveUploadedFiles(ArrayList oFiles)
        {
            ArrayList arTemp = new ArrayList();
            try
            {
                if (Directory.Exists(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Sent) == false && Convert.ToString(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Sent) != "")
                {
                    Directory.CreateDirectory(ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Sent);
                }

                string _destFileName = "";
                string _destFilePath = "";

                for (int fileIndex = 0; fileIndex < oFiles.Count; fileIndex++)
                {
                    FileInfo ofileInfo = new FileInfo(oFiles[fileIndex].ToString());

                    if (iFileTypeID == (int)EDIFileType.OutBox_Statements)
                    {
                        _destFilePath = ClsGeneralClaimManager.PM_ClaimManagement_OutBox_Statements_Sent + "\\" + ofileInfo.Directory.Name;
                        if (Directory.Exists(_destFilePath) == false) { Directory.CreateDirectory(_destFilePath); }

                        _destFileName = _destFilePath + "\\" + ofileInfo.Name.Replace(ofileInfo.Extension, "") + "-" + DateTime.Now.ToString("yyyyMMddhhmmsstt") + ofileInfo.Extension;
                        File.Move(ofileInfo.FullName, _destFileName);
                        _destFileName = "";
                    }
                    else if (iFileTypeID == (int)EDIFileType.OutBox_837PClaimSubmission)
                    {
                        if (Convert.ToString(ofileInfo.FullName) != "")
                        {
                            _destFilePath = ClsGeneralClaimManager.PM_ClaimManagement_OutBox_837PClaimSubmission_Sent + "\\" + ofileInfo.Name;
                            
                            if (Directory.Exists(_destFilePath) == false) { Directory.CreateDirectory(_destFilePath); }

                            if (Directory.Exists(oFiles[fileIndex].ToString()) == true)
                            {
                                DirectoryInfo directoryInfo = new DirectoryInfo(oFiles[fileIndex].ToString());
                                FileInfo[] oFile = directoryInfo.GetFiles("*.*");

                                if (oFile.Length > 0)
                                {
                                    foreach (FileInfo curFile in oFile)
                                    {
                                        if (Directory.Exists(_destFilePath) == false)
                                        {
                                            Directory.CreateDirectory(_destFilePath);
                                        }
                                        _destFileName = _destFilePath + "\\" + curFile.Name.Replace(curFile.Extension, "") + "-" + DateTime.Now.ToString("yyyyMMddhhmmsstt") + curFile.Extension;
                                        File.Move(curFile.FullName, _destFileName);
                                        if (Directory.GetFiles(curFile.DirectoryName).Length == 0) 
                                        {
                                            Directory.Delete(curFile.DirectoryName);
                                        }
                                    }
                                }
                                _destFileName = "";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public Int32 ClaimgetCopyEDIFiles()
        {
            gloSettings.GeneralSettings oSetting = new gloSettings.GeneralSettings(_databaseconnectionstring);
            DataTable dtversion = new DataTable();
            Int32 Settingvalue = 0;

            try
            {
                dtversion = oSetting.GetSetting("COPY_EDI_FILES", 0);
                if (dtversion != null && dtversion.Rows.Count > 0)
                {
                    Settingvalue = Convert.ToInt32(dtversion.Rows[0]["sSettingsValue"]);                    
                }
                else
                {
                    Settingvalue = 1;                    
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false); }
            finally 
            {
                if (oSetting != null) { oSetting.Dispose(); oSetting = null; }
                if (dtversion != null) { dtversion.Dispose(); }
            }
            return Settingvalue;
        }

        #endregion

        #region "Get Methods"

        public DataTable GetBatchPaperClaims(Int64 _BatchID, int IsPrinted)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
            try
            {
                oDB.Connect(false);                                
                oDBParameters.Add("@BatchID", _BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@IsPrinted", IsPrinted, ParameterDirection.Input, SqlDbType.Int);
                oDB.Retrive("BL_SELECT_Batch_Fill_Claims_Paper", oDBParameters, out dtCharges);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtCharges;
        }

        public DataTable GetBatchElectronicClaims(Int64 _BatchID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = null;
            try
            {
                oDB.Connect(false);                
                oDBParameters.Add("@BatchID", _BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Batch_Fill_Claims_Electronics", oDBParameters, out dtCharges);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtCharges;
        }

        public DataTable GetClaimsAcrossBatch(int Type, int Status,string Claim)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtSearchBatch = null;
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@Type", Type, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@Status", Status, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@sClaim", Claim, ParameterDirection.Input, SqlDbType.VarChar);
                oDB.Retrive("BL_SearchClaimAcrossBatch", oDBParameters, out dtSearchBatch);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtSearchBatch;
        }

        #endregion

        #region "Print Data / Form"

        public bool Validation()
        {
            ArrayList _MastTrans = new ArrayList();
            ArrayList _TransList = new ArrayList();            
            Int64 _nTransactionID = 0;
            Int64 _MasterTransactionID = 0;

            gloDatabaseLayer.DBLayer oDB = null;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring.ToString());
                if (iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmitted || iFileTypeID == (int)EDIFileType.OutBox_837P_PaperClaimSubmission) 
                {
                    for (int i = 1; i < c1SubBatch.Rows.Count; i++) 
                    {   
                        #region Get MasterTransactionID

                        //prgProcess.Increment(1);

                        if (c1SubBatch.Rows[i]["TransactionMasterID"] != null || c1SubBatch.Rows[i]["TransactionMasterID"] != "")
                        {
                            _nTransactionID = Convert.ToInt64(c1SubBatch.Rows[i]["TransactionID"]);
                            _MasterTransactionID = (Convert.ToInt64(c1SubBatch.Rows[i]["TransactionMasterID"]));
                        }
                        else
                        {
                            _nTransactionID = 0; _MasterTransactionID = 0;
                        }

                        _MastTrans.Add(_MasterTransactionID );
                        _TransList.Add(_nTransactionID );

                        #endregion
                    }                  
                }                
                if (_MastTrans.Count > 0 && _MastTrans != null)
                {
                    gloCMSEDI.clsgloBilling clsbilling = new gloCMSEDI.clsgloBilling(_databaseconnectionstring);                    
                    return clsbilling.ValidateExpandedClaimLimits(_MastTrans, _TransList, Convert.ToInt64(appSettings["ClinicID"]), false, UB04Setting);
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                return false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
            }
        }

        void Print(PrintType type)
        {
            //Print the Batch
            dtClaimID = new DataTable();
            try
            {
                if (c1AllBatch.Rows.Count != 0 && c1SubBatch.Rows.Count >= 1)
                {
                    dtClaimID.Columns.Add("BatchID");
                    dtClaimID.Columns.Add("BatchName");
                    dtClaimID.Columns.Add("BillingTypeID");
                    dtClaimID.Columns.Add("BillingMethodID");
                    dtClaimID.Columns.Add("TransactionID");
                    dtClaimID.Columns.Add("MasterTransactionID");
                    dtClaimID.Columns.Add("Claim");

                    for (int i = 1; i < c1SubBatch.Rows.Count; i++)
                    {
                        dtClaimID.Rows.Add(Convert.ToInt64(c1SubBatch.Rows[i]["BatchID"]),
                                            Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)),
                                            Convert.ToInt32(c1SubBatch.GetData(i, c1SubBatch.Cols["BillingTypeId"].Index)),
                                            Convert.ToInt32(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBillingMethodID"].Index)),
                                            Convert.ToInt64(c1SubBatch.Rows[i]["TransactionID"]),
                                            Convert.ToInt64(c1SubBatch.Rows[i]["TransactionMasterID"]),
                                            Convert.ToString(c1SubBatch.Rows[i]["Claim"]));
                    }
                    
                    enableThread(type, dtClaimID);                    
                }
            }
            catch (Exception ex) 
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
        }

        void PrintClaim(PrintType type)
        {
            //Print Single Seleceted Claim
            dtClaimID = new DataTable();
            try
            {
                if (c1AllBatch.Rows.Count != 0 && c1SubBatch.Rows.Count >= 1)
                {
                    dtClaimID.Columns.Add("BatchID");
                    dtClaimID.Columns.Add("BatchName");
                    dtClaimID.Columns.Add("BillingTypeID");
                    dtClaimID.Columns.Add("BillingMethodID");
                    dtClaimID.Columns.Add("TransactionID");
                    dtClaimID.Columns.Add("MasterTransactionID");
                    dtClaimID.Columns.Add("Claim");
                                        
                    {
                        dtClaimID.Rows.Add(Convert.ToInt64(c1SubBatch.GetData(c1SubBatch.RowSel, c1SubBatch.Cols["BatchID"].Index)),
                                            Convert.ToString(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["sBatchName"].Index)),
                                            Convert.ToInt32(c1SubBatch.GetData(c1SubBatch.RowSel, c1SubBatch.Cols["BillingTypeId"].Index)),
                                            Convert.ToInt32(c1AllBatch.GetData(c1AllBatch.RowSel, c1AllBatch.Cols["nBillingMethodID"].Index)),
                                            Convert.ToInt64(c1SubBatch.GetData(c1SubBatch.RowSel, c1SubBatch.Cols["TransactionID"].Index)),
                                            Convert.ToInt64(c1SubBatch.GetData(c1SubBatch.RowSel, c1SubBatch.Cols["TransactionMasterID"].Index)),
                                            Convert.ToString(c1SubBatch.GetData(c1SubBatch.RowSel, c1SubBatch.Cols["Claim"].Index)));
                    }

                    enableThread(type, dtClaimID);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
            }
        }

        #endregion

        #region "Update Claim After Sended to CM,Code Not Used"

        //private DataTable GetListOfPatients(C1FlexGrid c1)
        //{
        //    DataTable dtPatientList = new DataTable();
        //    gloDatabaseLayer.DBLayer oDB = null;
        //    gloDatabaseLayer.DBParameters oDBParameters = null;
        //    try
        //    {
        //        oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //        oDBParameters = new gloDatabaseLayer.DBParameters();
        //        oDB.Connect(false);
        //        oDBParameters.Add("@nTransactionMasterID", Convert.ToString(_c1flexGridForClaims.Rows[i]["TransactionMasterID"]), ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@nTransactionID", Convert.ToString(_c1flexGridForClaims.Rows[i]["TransactionID"]), ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@nBatchID", Convert.ToString(_c1flexGridForClaims.Rows[i]["BatchID"]), ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@sBatchName", Convert.ToString(_BatchName), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@nClaim", Convert.ToString(_c1flexGridForClaims.Rows[i]["Claim"]), ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@dateofservice", Convert.ToString(_c1flexGridForClaims.Rows[i]["dateofservice"]), ParameterDirection.Input, SqlDbType.DateTime);
        //        oDBParameters.Add("@Charges", Convert.ToString(_c1flexGridForClaims.Rows[i]["Charges"]), ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@PatientCode", Convert.ToString(_c1flexGridForClaims.Rows[i]["PatientCode"]), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@PatientFullName", Convert.ToString(_c1flexGridForClaims.Rows[i]["PatientFullName"]), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@ProviderFullName", Convert.ToString(_c1flexGridForClaims.Rows[i]["ProviderFullName"]), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@InsuerdsID", Convert.ToString(_c1flexGridForClaims.Rows[i]["InsuerdsID"]), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@Insurance", Convert.ToString(_c1flexGridForClaims.Rows[i]["Insurance"]), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@BillingType", Convert.ToString(_c1flexGridForClaims.Rows[i]["BillingType"]), ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@nClaimStatus", (TransactionStatus.SendToClaimManager), ParameterDirection.Input, SqlDbType.BigInt);
        //        oDB.Connect(false);
        //        _Dresult = Convert.ToInt32(oDB.ExecuteScalar("BL_IN_Batch_Sended", oDBParameters));
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex, false);
        //    }
        //    finally
        //    {
        //        if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
        //        if (oDBParameters != null) { oDBParameters.Dispose(); }
        //    }
        //    return dtPatientList;
        //}

        public DataTable GetDTLBatchClaims(Int64 _BatchID, int BillingMethodID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtCharges = new DataTable();
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@BatchID", _BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@BillingTypeMethod", BillingMethodID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("Get_Batch_Sended", oDBParameters, out dtCharges);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtCharges;
        }

        #endregion

        #region "Label Events"

        private void lbl837ElectronicClaims_Click(object sender, EventArgs e)
        {
            try
            {   
                DesignCMHeaderlbl(lbl837ElectronicClaims);
                CM837ElectronicClaimSubmission();
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
        }
        
        private void lbl837PaperClaims_Click(object sender, EventArgs e)
        {
            try
            {
                DesignCMHeaderlbl(lbl837PaperClaims);                
                CM837PaperClaimSubmission();
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
        }

        private void lblStatements_Click(object sender, EventArgs e)
        {
            try
            {
                DesignCMHeaderlbl(lblStatements);               
                CMAllStatements();
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
        }

        private void DesignCMHeaderlbl(Label lbl)
        {
            try
            {
                rbToBeSubmitted.Checked = true;
                rbSubmitted.Checked = false;
                txtSearchAllBatch.Text = "";
                
                if (lbl.Text.Trim() == "837 Electronic Claims")
                {                    
                    chkCrossClaimSearch.Checked = false;
                    pnlCrossClaimSearch.Visible = true;                    
                    rbToBeSubmitted.Text = "To Be Submitted";
                    rbSubmitted.Text = "Submitted";
                   
                    pnllbl837ElectronicClaims.BackgroundImage = global::gloBilling.Properties.Resources.Img_LongOrange;
                    pnllbl837PaperClaims.BackgroundImage = global::gloBilling.Properties.Resources.Img_Blue2007;
                    pnllblStatements.BackgroundImage = global::gloBilling.Properties.Resources.Img_Blue2007;

                    lbl837ElectronicClaims.ForeColor = Color.Black;
                    lbl837PaperClaims.ForeColor = Color.White;
                    lblStatements.ForeColor = Color.White;
                }

                if (lbl.Text.Trim() == "Paper Claims") 
                {
                    chkCrossClaimSearch.Checked = false;
                    pnlCrossClaimSearch.Visible = true;
                    rbToBeSubmitted.Text = "To Be Printed";
                    rbSubmitted.Text = "Printed";

                    pnllbl837ElectronicClaims.BackgroundImage = global::gloBilling.Properties.Resources.Img_Blue2007;
                    pnllbl837PaperClaims.BackgroundImage = global::gloBilling.Properties.Resources.Img_LongOrange;
                    pnllblStatements.BackgroundImage = global::gloBilling.Properties.Resources.Img_Blue2007;

                    lbl837ElectronicClaims.ForeColor = Color.White;
                    lbl837PaperClaims.ForeColor = Color.Black;
                    lblStatements.ForeColor = Color.White;
                }

                if (lbl.Text.Trim() == "Statements")
                {
                    chkCrossClaimSearch.Checked = false;
                    pnlCrossClaimSearch.Visible = false;

                    rbToBeSubmitted.Text = "Statements";
                    rbSubmitted.Text = "Statements Submitted";

                    pnllbl837ElectronicClaims.BackgroundImage = global::gloBilling.Properties.Resources.Img_Blue2007;
                    pnllbl837PaperClaims.BackgroundImage = global::gloBilling.Properties.Resources.Img_Blue2007;
                    pnllblStatements.BackgroundImage = global::gloBilling.Properties.Resources.Img_LongOrange;

                    lbl837ElectronicClaims.ForeColor = Color.White;
                    lbl837PaperClaims.ForeColor = Color.White;
                    lblStatements.ForeColor = Color.Black;
                }
            }
            catch { throw; }
        }

        #endregion

        #region "RadioButton Events"

        private void rbToBeSubmitted_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (rbToBeSubmitted.Checked == true)
                {
                    rbToBeSubmitted.Font = gloGlobal.clsgloFont.gFont_BOLD;
                    rbSubmitted.Font = gloGlobal.clsgloFont.gFont;

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                    {
                        CM837ElectronicClaimSubmission();
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission))
                    {
                        CM837ElectronicClaimSubmitted();
                    }

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted))
                    {
                        CM837PaperClaimSubmission();
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                    {
                        CM837PaperClaimPrinted();
                    }

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted))
                    {
                        CMAllStatements();
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements))
                    {
                        CMStatementsSubmitted();
                    }

                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        private void rbSubmitted_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (rbSubmitted.Checked == true)
                {
                    rbToBeSubmitted.Font = gloGlobal.clsgloFont.gFont;
                    rbSubmitted.Font = gloGlobal.clsgloFont.gFont_BOLD;

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission))
                    {
                        CM837ElectronicClaimSubmitted();
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted))
                    {
                        CM837ElectronicClaimSubmission();
                    }

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                    {
                        CM837PaperClaimPrinted();
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission))
                    {
                        CM837PaperClaimPrinted();
                    }

                    if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements))
                    {
                        CMStatementsSubmitted();
                    }
                    else if (iFileTypeID == Convert.ToInt32(EDIFileType.OutBox_Statements))
                    {
                        CMStatementsSubmitted();
                    }
                }
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }

        #endregion

        #region "Electronics / Paper Claims ,Statements "

        private void CM837ElectronicClaimSubmission()
        {
            #region "Show / Hide Buttons"
                        
            tsb_Print.Visible = false;
            tsb_PrintForm.Visible = false;
            Tsb_BatchSend.Visible = true;
            tsb_View.Visible = true;
            tsb_PrintClaimData.Visible = false;
            tsb_PrintClaimForm.Visible = false;

            #endregion

            iFileTypeID = Convert.ToInt32(EDIFileType.OutBox_837PClaimSubmission);
            FillC1AllBatch();            
        }

        private void CM837ElectronicClaimSubmitted()
        {
            #region "Show / Hide Buttons"
                        
            tsb_Print.Visible = false;
            tsb_PrintForm.Visible = false;
            Tsb_BatchSend.Visible = false;
            tsb_View.Visible = true;
            tsb_PrintClaimData.Visible = false;
            tsb_PrintClaimForm.Visible = false;

            #endregion

            iFileTypeID = Convert.ToInt32(EDIFileType.OutBox_837PClaim_Submitted);
            FillC1AllBatch();            
        }

        private void CM837PaperClaimSubmission()
        {
            #region "Show / Hide Buttons"
                        
            Tsb_BatchSend.Visible = false;
            tsb_View.Visible = false;

            tsb_PrintForm.Text = "Print Batch Form";
            tsb_PrintForm.ToolTipText = "Print Batch Form";
            tsb_Print.Text = "Print Batch Data";
            tsb_Print.ToolTipText = "Print Batch Data";

            tsb_PrintClaimForm.Text = "Print Claim Form";
            tsb_PrintClaimForm.ToolTipText = "Print Claim Form";
            tsb_PrintClaimData.Text = "Print Claim Data";
            tsb_PrintClaimData.ToolTipText = "Print Claim Data";

            tsb_Print.Visible = true;
            tsb_PrintForm.Visible = true;
            tsb_PrintClaimData.Visible = true;
            tsb_PrintClaimForm.Visible = true;

            #endregion

            iFileTypeID = Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmission);
            FillC1AllBatch();            
        }

        private void CM837PaperClaimPrinted()
        {
            #region "Show / Hide Buttons"
                        
            Tsb_BatchSend.Visible = false;
            tsb_View.Visible = false;

            tsb_PrintForm.Text = "Reprint Batch Form";
            tsb_PrintForm.ToolTipText = "Reprint Batch Form";
            tsb_Print.Text = "Reprint Batch Data";
            tsb_Print.ToolTipText = "Reprint Batch Data";

            tsb_PrintClaimForm.Text = "Reprint Claim Form";
            tsb_PrintClaimForm.ToolTipText = "Reprint Claim Form";
            tsb_PrintClaimData.Text = "Reprint Claim Data";
            tsb_PrintClaimData.ToolTipText = "Reprint Claim Data";

            tsb_Print.Visible = true;
            tsb_PrintForm.Visible = true;
            tsb_PrintClaimData.Visible = true;
            tsb_PrintClaimForm.Visible = true;

            #endregion

            iFileTypeID = Convert.ToInt32(EDIFileType.OutBox_837P_PaperClaimSubmitted);
            FillC1AllBatch();            
        }

        private void CMAllStatements()
        {
            #region "Show / Hide Buttons"
                        
            tsb_Print.Visible = false;
            tsb_PrintForm.Visible = false;
            Tsb_BatchSend.Visible = true;
            tsb_View.Visible = true;
            tsb_PrintClaimData.Visible = false;
            tsb_PrintClaimForm.Visible = false;

            #endregion

            iFileTypeID = Convert.ToInt32(EDIFileType.OutBox_Statements);
            FillC1AllBatch();
        }

        private void CMStatementsSubmitted()
        {
            #region "Show / Hide Buttons"
                        
            tsb_Print.Visible = false;
            tsb_PrintForm.Visible = false;
            Tsb_BatchSend.Visible = false;
            tsb_View.Visible = true;
            tsb_PrintClaimData.Visible = false;
            tsb_PrintClaimForm.Visible = false;

            #endregion

            iFileTypeID = Convert.ToInt32(EDIFileType.OutBox_Statements_Submitted);
            FillC1AllBatch();
        }

        #endregion

        #region "CheckBox CrossClaim Event"

        private void chkCrossClaimSearch_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chkCrossClaimSearch.Checked == true)
                {
                    chkCrossClaimSearch.Font = gloGlobal.clsgloFont.gFont_BOLD;

                    searchTimer.Tick -= new EventHandler(searchTimer_Tick);
                    searchTimer.Tick += new EventHandler(searchTimer_Tick);
                    if (txtSearchAllBatch.Text.Trim() != "" && txtSearchAllBatch.Text.Length > 0)
                    { SearchClaimAcrossBatch(txtSearchAllBatch.Text); }
                }
                else
                {
                    chkCrossClaimSearch.Font = gloGlobal.clsgloFont.gFont;

                    searchTimer.Tick -= new EventHandler(searchTimer_Tick);
                    if (txtSearchAllBatch.Text.Trim() != "" && txtSearchAllBatch.Text.Length > 0)
                    {
                        FillC1AllBatch();
                        DataView dv = (DataView)c1AllBatch.DataSource;
                        SearchBatch(txtSearchAllBatch.Text, dv);
                    }
                }                
            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false); }
        }

        #endregion

        #endregion "Claim Manager"
    }
}


