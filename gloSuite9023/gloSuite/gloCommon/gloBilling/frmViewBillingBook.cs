using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.EnterpriseServices;
using gloAuditTrail;
using gloSettings;
using System.Collections;
using gloBilling.Statement;
using C1.Win.C1FlexGrid;
using gloBilling.Collections;
using gloGlobal;
using gloDateMaster;
using System.Linq;
using ChargeRules;


namespace gloBilling
{
    /// <summary>
    /// Anil 20071228
    /// Form to view all the Masters for Billing
    /// Masters are: ICD9, CPT, Modifier, Drugs and Category
    /// </summary>
    internal partial class frmViewBillingBook : Form
    {
        //Code Start added by kanchan on 20120102 for gloCommunity integration
        public delegate void gloCommunityHandler();   //added delegate for calling gloCommunityViewDataform for BillingConfig Download.
        public event gloCommunityHandler EvntgloCommunityHandler; //added event for calling gloCommunityViewDataform for AppConfig Download.

        #region "Column Declaration"

        private const int COL_FEE_SCHEDULE_ID = 0;
        private const int COL_YEAR = 1;
        private const int COL_CARRIER_NUMBER = 2;
        private const int COL_LOCALITY = 3;
        private const int COL_HCPCS = 4;
        private const int COL_HCPCS_DESC = 5;
        private const int COL_MODIFIER = 6;
        private const int COL_MODIFIER_DESC = 7;
        private const int COL_NON_FACILITY_FEESCHEDULE_AMOUNT = 8;
        private const int COL_FACILITY_FEESCHEDULE_AMOUNT = 9;
        private const int COL_PCTC_INDICATOR = 10;
        private const int COL_STATUS_CODE = 11;
        private const int COL_SPECIALTY_ID = 12;
        private const int COL_SPECIALITY_DESC = 13;
        private const int COL_CLINIC_CHARGES = 14;
        private const int COL_LIMIT_CHARGES = 15;
        private const int COL_ALLOWED_CHARGES = 16;
        private const int COL_CHARGES_PERCENTAGE = 17;
        private const int COL_VARIANT_AMOUNT = 18;
        private const int COL_FACILITY_CHARGE_AMOUNT = 20;
        private const int COL_NON_FACILITY_CHARGE_AMOUNT = 19;

        private const int COL_COUNT = 21;



        #endregion


        private static frmViewBillingBook frm;
        private bool blnDisposed;
        private DataTable dtcommoncpt = null;

        private Timer searchTimer = null;

        #region  ' Constructor '

        //Constructors
        private frmViewBillingBook()
        {
            InitializeComponent();
            //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
            if (appSettings["ClinicID"] != null)
            {
                if (appSettings["ClinicID"] != "")
                { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
                else { _ClinicID = 0; }
            }
            else
            { _ClinicID = 0; }

            #region " Retrieve MessageBoxCaption from AppSettings "

            if (appSettings["MessageBOXCaption"] != null)
            {
                if (appSettings["MessageBOXCaption"] != "")
                {
                    _messageBoxCaption = Convert.ToString(appSettings["MessageBOXCaption"]);
                }
                else
                {
                    _messageBoxCaption = "";
                }
            }
            else
            { _messageBoxCaption = ""; }

            #endregion


            #region "Retreive UserId & UserName "

            //Added By Pramod Nair For UserRights 20090720

            if (appSettings["UserID"] != null)
            {
                if (appSettings["UserID"] != "")
                { _UserID = Convert.ToInt64(appSettings["UserID"]); }
                else
                { _UserID = 1; }
            }
            else
            { _UserID = 1; }
            //

            //Get User Name
            if (appSettings["UserName"] != null)
            {
                if (appSettings["UserName"] != "")
                { _UserName = Convert.ToString(appSettings["UserName"]).Trim(); }
                else
                { _UserName = ""; }
            }
            else
            { _UserName = ""; }
            //
            #endregion

        }

       //added for snomed connection string
        private string _gstrSMDBServerName = "";
        public string gstrSMDBServerName
        {
            get { return _gstrSMDBServerName; }
            set { _gstrSMDBServerName = value; }
        }


        private string _gstrSMDBDatabaseName = "";
        public string gstrSMDBDatabaseName
        {
            get { return _gstrSMDBDatabaseName; }
            set { _gstrSMDBDatabaseName = value; }
        }

        private bool _gblnSMDBAuthen = false;
        public bool gblnSMDBAuthen
        {
            get { return _gblnSMDBAuthen; }
            set { _gblnSMDBAuthen = value; }
        }

        private string _gstrSMDBUserID = "";
        public string gstrSMDBUserID
        {
            get { return _gstrSMDBUserID; }
            set { _gstrSMDBUserID = value; }
        }

        private string _gstrSMDBPassWord = "";
        public string gstrSMDBPassWord
        {
            get { return _gstrSMDBPassWord; }
            set { _gstrSMDBPassWord = value; }
        }
        
        private frmViewBillingBook(string databaseconnectionstring)
        {
            InitializeComponent();
            _databaseconnectionstring = databaseconnectionstring;
            //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
            if (appSettings["ClinicID"] != null)
            {
                if (appSettings["ClinicID"] != "")
                { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
                else { _ClinicID = 0; }
            }
            else
            { _ClinicID = 0; }

            #region " Retrieve MessageBoxCaption from AppSettings "

            if (appSettings["MessageBOXCaption"] != null)
            {
                if (appSettings["MessageBOXCaption"] != "")
                {
                    _messageBoxCaption = Convert.ToString(appSettings["MessageBOXCaption"]);
                }
                else
                {
                    _messageBoxCaption = "";
                }
            }
            else
            { _messageBoxCaption = ""; }

            #endregion

            #region "Retreive UserId & UserName "

            //Added By Pramod Nair For UserRights 20090720

            if (appSettings["UserID"] != null)
            {
                if (appSettings["UserID"] != "")
                { _UserID = Convert.ToInt64(appSettings["UserID"]); }
                else
                { _UserID = 1; }
            }
            else
            { _UserID = 1; }
            //

            //Get User Name
            if (appSettings["UserName"] != null)
            {
                if (appSettings["UserName"] != "")
                { _UserName = Convert.ToString(appSettings["UserName"]).Trim(); }
                else
                { _UserName = ""; }
            }
            else
            { _UserName = ""; }
            //
            #endregion
        }

        #endregion  ' Constructor '



        public static frmViewBillingBook GetInstance()
        {

            if (frm == null)
            {
                frm = new frmViewBillingBook();
            }

            return frm;
        }


        public static frmViewBillingBook GetInstance(string databaseconnectionstring)
        {
            try
            {
                if (frm == null)
                {
                    frm = new frmViewBillingBook(databaseconnectionstring);
                }
            }
            finally
            {

            }
            return frm;
        }


        #region 'Declarations'

        //Private variables
        private string[] strSearchArray;
        private string _databaseconnectionstring = "";
        private string _messageBoxCaption = "gloPM";

        private DataView _dv;
        public Int64 SelectedView;
        Int64 FeeScheduleTypeID = 0;
        string FeeScheduleType = "";
        string _defaultSpeciality = "";
        string _defaultcarrierNumber = "";
        string _defaultlocality = "";
        string _Searchcolumn = "";
        private bool _isCategoryTypeLoading = false;

        //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
        System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;



        private Int64 _ClinicID = 0;
        //

        //Added By Pramod Nair For UserRights 20090720
        private Int64 _UserID = 0;
        private string _UserName = "";
        private Int64 _CPTMapId = 0;
        private Int64 _RVUId = 0;
        private Int64 _nInsuranceCrosswalkID = 0;
        private bool IsEnableAddEditDeleteSetting = false;


        #endregion 'Declarations'

        #region ' Property Procedures '

        public Int64 ClinicID
        {
            get { return _ClinicID; }
            set { _ClinicID = value; }
        }

        //Property for connection string
        public string DatabaseConnectionString
        {
            get { return _databaseconnectionstring; }
            set { _databaseconnectionstring = value; }
        }
        public gloICD.CodeRevision SelectedICD
        {
            get
            {
                if (RbICD9.Checked)
                {
                    return gloICD.CodeRevision.ICD9;
                }
                else if (RbICD10.Checked)
                {
                    return gloICD.CodeRevision.ICD10;
                }

                return gloICD.CodeRevision.ICD9;
            }
        }
        #endregion ' Property Procedures '

        #region 'Form Fill Methods '

        /// <summary>
        /// Fill TreeView
        /// Fill all the Masters as nodes in a Treeview
        /// </summary>
        public void Fill_MastersTreeview()
        {
            TreeNode oNode = null;
         //   TreeNode oCPTCommonnode = null;  
            GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);

            try
            {
                trvMasters.Nodes.Clear();
                oNode = new TreeNode();
                oNode.Text = "ICD10";
                oNode.Tag = 4;
                oNode.ImageIndex = 56;
                oNode.SelectedImageIndex = 56;
                trvMasters.Nodes.Add(oNode);
                trvMasters.SelectedNode = oNode;

                oNode = new TreeNode();
                oNode.Text = "ICD9";
                oNode.Tag = 1;
                oNode.ImageIndex = 0;
                oNode.SelectedImageIndex = 0;
                trvMasters.Nodes.Add(oNode);
                
                oNode = new TreeNode();
                oNode.Text = "CPT";
                oNode.Tag = 2;
                oNode.ImageIndex = 1;
                oNode.SelectedImageIndex = 1;
                trvMasters.Nodes.Add(oNode);
               
                oNode = new TreeNode();
                oNode.Text = "Common CPT";
                oNode.Tag = 58;
                oNode.ImageIndex = 58;
                oNode.SelectedImageIndex = 58;
                trvMasters.Nodes.Add(oNode);

                oNode = new TreeNode();
                oNode.Text = "Modifiers";
                oNode.Tag = 3;
                oNode.ImageIndex = 2;
                oNode.SelectedImageIndex = 2;
                trvMasters.Nodes.Add(oNode);

                oNode = new TreeNode();
                oNode.Text = "Category";
                oNode.Tag = 5;
                oNode.ImageIndex = 4;
                oNode.SelectedImageIndex = 4;
                trvMasters.Nodes.Add(oNode);

                oNode = new TreeNode();
                oNode.Text = "Specialty";
                oNode.Tag = 15;
                oNode.ImageIndex = 12;
                oNode.SelectedImageIndex = 12;
                trvMasters.Nodes.Add(oNode);

                oNode = new TreeNode();
                oNode.Text = "Patient Relationship";
                oNode.Tag = 13;
                oNode.ImageIndex = 13;
                oNode.SelectedImageIndex = 13;
                trvMasters.Nodes.Add(oNode);

                //plan Type
                oNode = new TreeNode();
                oNode.Text = "Plan Type";
                oNode.Tag = 18;
                oNode.ImageIndex = 17;
                oNode.SelectedImageIndex = 17;
                trvMasters.Nodes.Add(oNode);

                oNode = new TreeNode();
                oNode.Text = "Case Reporting Category";
                oNode.Tag = 49;
                oNode.ImageIndex = 49;
                oNode.SelectedImageIndex = 49;
                trvMasters.Nodes.Add(oNode);

                oNode = new TreeNode();
                oNode.Text = "Invalid ICD";
                oNode.Tag = 24;
                oNode.ImageIndex = 25;
                oNode.SelectedImageIndex = 25;
                trvMasters.Nodes.Add(oNode);

                if (_messageBoxCaption != "gloEMR")
                {
                    oNode = new TreeNode();
                    oNode.Text = "CPT Billing Crosswalk";
                    oNode.Tag = 38;
                    oNode.ImageIndex = 38;
                    oNode.SelectedImageIndex = 38;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Insurance Claim Follow-up Action Crosswalk";
                    oNode.Tag = 63;
                    oNode.ImageIndex = 63;
                    oNode.SelectedImageIndex = 63;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Standard Reason Code";
                    oNode.Tag = 61;
                    oNode.ImageIndex = 61;
                    oNode.SelectedImageIndex = 61;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "ERA Payer";
                    oNode.Tag = 40;
                    oNode.ImageIndex = 40;
                    oNode.SelectedImageIndex = 40;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Type of Service";
                    oNode.Tag = 7;
                    oNode.ImageIndex = 6;
                    oNode.SelectedImageIndex = 6;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Place of Service";
                    oNode.Tag = 8;
                    oNode.ImageIndex = 7;
                    oNode.SelectedImageIndex = 7;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Facility";
                    oNode.Tag = 9;
                    oNode.ImageIndex = 8;
                    oNode.SelectedImageIndex = 8;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Smart Treatment";
                    oNode.Tag = 11;
                    oNode.ImageIndex = 11;
                    oNode.SelectedImageIndex = 11;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Code Type";
                    oNode.Tag = 12;
                    oNode.ImageIndex = 14;
                    oNode.SelectedImageIndex = 14;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Flag Type";
                    oNode.Tag = 14;
                    oNode.ImageIndex = 10;
                    oNode.SelectedImageIndex = 10;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Insurance Service Type";
                    oNode.Tag = 16;
                    oNode.ImageIndex = 15;
                    oNode.SelectedImageIndex = 15;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Insurance Plan Codes";
                    oNode.Tag = 17;
                    oNode.ImageIndex = 16;
                    oNode.SelectedImageIndex = 16;

                    oNode = new TreeNode();
                    oNode.Text = "Clearing House";
                    oNode.Tag = 19;
                    oNode.ImageIndex = 18;
                    oNode.SelectedImageIndex = 18;

                    oNode = new TreeNode();
                    oNode.Text = "Adjustment Type";
                    oNode.Tag = 20;
                    oNode.ImageIndex = 19;
                    oNode.SelectedImageIndex = 19;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Fee Schedule";
                    oNode.Tag = 21;
                    oNode.ImageIndex = 23;
                    oNode.SelectedImageIndex = 23;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "RVU Schedule";
                    oNode.Tag = 43;
                    oNode.ImageIndex = 43;
                    oNode.SelectedImageIndex = 43;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Credit Card Type";
                    oNode.Tag = 23;
                    oNode.ImageIndex = 27;
                    oNode.SelectedImageIndex = 27;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Scrubber";
                    oNode.Tag = 25;
                    oNode.ImageIndex = 24;
                    oNode.SelectedImageIndex = 24;
                    trvMasters.Nodes.Add(oNode);


                    oNode = new TreeNode();
                    oNode.Text = "Referral CPT";
                    oNode.Tag = 26;
                    oNode.ImageIndex = 26;
                    oNode.SelectedImageIndex = 26;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Claim Scrubber";
                    oNode.Tag = 27;
                    oNode.ImageIndex = 28;
                    oNode.SelectedImageIndex = 28;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Payment Tray";
                    oNode.Tag = 29;
                    oNode.ImageIndex = 29;
                    oNode.SelectedImageIndex = 29;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Charge Tray";
                    oNode.Tag = 30;
                    oNode.ImageIndex = 30;
                    oNode.SelectedImageIndex = 30;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Refund Type";
                    oNode.Tag = 31;
                    oNode.ImageIndex = 31;
                    oNode.SelectedImageIndex = 31;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Reason Codes";
                    oNode.Tag = 33;
                    oNode.ImageIndex = 33;
                    oNode.SelectedImageIndex = 33;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Remark Codes";
                    oNode.Tag = 57;
                    oNode.ImageIndex = 59;
                    oNode.SelectedImageIndex = 59;
                    trvMasters.Nodes.Add(oNode);
                    
                    oNode = new TreeNode();
                    oNode.Text = "Group Codes";
                    oNode.Tag = 35;
                    oNode.ImageIndex = 35;
                    oNode.SelectedImageIndex = 35;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Billing ID Qualifiers";
                    oNode.Tag = 41;
                    oNode.ImageIndex = 41;
                    oNode.SelectedImageIndex = 41;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Additional Billing ID Type";
                    oNode.Tag = 42;
                    oNode.ImageIndex = 42;
                    oNode.SelectedImageIndex = 42;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Patient Statement Display Setting";
                    oNode.Tag = 36;
                    oNode.ImageIndex = 36;
                    oNode.SelectedImageIndex = 36;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Patient Statement Filter Setting";
                    oNode.Tag = 37;
                    oNode.ImageIndex = 37;
                    oNode.SelectedImageIndex = 37;
                    trvMasters.Nodes.Add(oNode);

                    gloBilling _UB04_Billing = new gloBilling(_databaseconnectionstring, "");
                    // Revenue Code
                    if (_UB04_Billing.IsenableUB04(ClinicID))
                    {
                        oNode = new TreeNode();
                        oNode.Text = "Revenue Code";
                        oNode.Tag = 39;
                        oNode.ImageIndex = 39;
                        oNode.SelectedImageIndex = 39;
                        trvMasters.Nodes.Add(oNode);

                        oNode = new TreeNode();
                        oNode.Text = "Condition Code";
                        oNode.Tag = 45;
                        oNode.ImageIndex = 45;
                        oNode.SelectedImageIndex = 45;
                        trvMasters.Nodes.Add(oNode);

                        oNode = new TreeNode();
                        oNode.Text = "Occurrence Code";
                        oNode.Tag = 46;
                        oNode.ImageIndex = 46;
                        oNode.SelectedImageIndex = 46;
                        trvMasters.Nodes.Add(oNode);

                        oNode = new TreeNode();
                        oNode.Text = "Occurrence Span Code";
                        oNode.Tag = 47;
                        oNode.ImageIndex = 47;
                        oNode.SelectedImageIndex = 47;
                        trvMasters.Nodes.Add(oNode);

                        oNode = new TreeNode();
                        oNode.Text = "Value Code";
                        oNode.Tag = 48;
                        oNode.ImageIndex = 48;
                        oNode.SelectedImageIndex = 48;
                        trvMasters.Nodes.Add(oNode);

                    }

                    oNode = new TreeNode();
                    oNode.Text = "Import Global Period";
                    oNode.Tag = 50;
                    oNode.ImageIndex = 50;
                    oNode.SelectedImageIndex = 50;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Insurance Claim Follow-up Actions";
                    oNode.Tag = 51;
                    oNode.ImageIndex = 51;
                    oNode.SelectedImageIndex = 51;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Standard Claim Follow-up Actions";
                    oNode.Tag = 62;
                    oNode.ImageIndex = 62;
                    oNode.SelectedImageIndex = 62;
                    trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Patient Account Follow-up Actions";
                    oNode.Tag = 52;
                    oNode.ImageIndex = 52;
                    oNode.SelectedImageIndex = 52;
                    trvMasters.Nodes.Add(oNode);

                    //oNode = new TreeNode();
                    //oNode.Text = "BadDebt Account Follow-up Actions";
                    //oNode.Tag = 60;
                    //oNode.ImageIndex = 52;
                    //oNode.SelectedImageIndex = 52;
                    //trvMasters.Nodes.Add(oNode);

                    oNode = new TreeNode();
                    oNode.Text = "Medicaid Resubmission Code";
                    oNode.Tag = 53;
                    oNode.ImageIndex = 53;
                    oNode.SelectedImageIndex = 53;
                    trvMasters.Nodes.Add(oNode);

                    bool _isBusinessCenterEnable = false;
                    _isBusinessCenterEnable = gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_Feature");

                    if (_isBusinessCenterEnable)
                    {
                        oNode = new TreeNode();
                        oNode.Text = "Business Center";
                        oNode.Tag = 54;
                        oNode.ImageIndex = 54;
                        oNode.SelectedImageIndex = 54;
                        trvMasters.Nodes.Add(oNode);
                    }

                    object value = null;
                    ogloSettings.GetSetting("ShowClaimReportingCategory", out value);
                    bool _isClaimCategoryTypeEnabled = false;

                    if (value == null || value.ToString() == "")
                    {
                        _isClaimCategoryTypeEnabled = false;
                    }
                    else
                    {
                        if (value != null)
                        {
                            _isClaimCategoryTypeEnabled = Convert.ToBoolean(Convert.ToInt16(value));
                        }
                    }

                    if (_isClaimCategoryTypeEnabled)
                    {
                        oNode = new TreeNode();
                        oNode.Text = "Claim Reporting Category";
                        oNode.Tag = 55;
                        oNode.ImageIndex = 55;
                        oNode.SelectedImageIndex = 55;
                        trvMasters.Nodes.Add(oNode);
                    }

                    oNode = new TreeNode();
                    oNode.Text = "Notes";
                    oNode.Tag = 56;
                    oNode.ImageIndex = 57;
                    oNode.SelectedImageIndex = 57;
                    trvMasters.Nodes.Add(oNode);
                    if (IsClaimRulesEnabled())
                    {
                        oNode = new TreeNode();
                        oNode.Text = "Claim Rules";
                        oNode.Tag = 59;
                        oNode.ImageIndex = 60;
                        oNode.SelectedImageIndex = 60;
                        trvMasters.Nodes.Add(oNode);
                    }
                    oNode = new TreeNode();
                    oNode.Text = "Hold Billing";
                    oNode.Tag = 60;
                    oNode.ImageIndex = 61;
                    oNode.SelectedImageIndex = 61;
                    trvMasters.Nodes.Add(oNode);


                  

                    _UB04_Billing.Dispose();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oNode != null) { oNode = null;}
                if (ogloSettings != null) { ogloSettings.Dispose(); }
            }
        }

        public void Fill_RefundTypes(Int64 ID)
        {
            RefundType oRefundType = new RefundType(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oRefundType.GetRefundTypes();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "RefundTypeID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Record Type";
                dgMasters.Columns[4].HeaderText = "ClinicId";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;

                //Set width for columns of grid
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.4 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[4].Width = 0;

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.View, "View Refund Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.None, gloAuditTrail.ActivityType.View, "View Refund Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - RefundType : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oRefundType.Dispose();
            }
        }

        public void Fill_AdjustmentTypes(Int64 ID)
        {
            AdjustmentType oAdjustmentType = new AdjustmentType(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oAdjustmentType.GetAdjustmentTypes();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "AdjustmentTypeID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                dgMasters.Columns[4].HeaderText = "ClinicId";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;

                //Set width for columns of grid
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.3 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.3 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[4].Width = 0;

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.AdjustmentType, ActivityType.View, "View Adjustment Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.AdjustmentType, gloAuditTrail.ActivityType.View, "View Adjustment Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - AdjustmentType : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oAdjustmentType.Dispose();
            }
        }

        /// <summary>
        /// Revised function for Loading ICD 9/10 Codes
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="ICDRevision"></param>
        public void LoadICDCodes(Int64 ID, gloICD.CodeRevision ICDRevision)
        {
            this.Cursor = System.Windows.Forms.Cursors.WaitCursor;

            ICD9 oICD9 = new ICD9(_databaseconnectionstring);

            try
            {
                txtSearch.Clear();

                using (DataTable dt = oICD9.GetICDByRevision(ICDRevision))
                {
                    if (dt != null)
                    {
                        _dv = dt.DefaultView;
                    }
                    else
                    {
                        return;
                    }
                }
                dgMasters.Columns.Clear();
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                dgMasters.Columns[0].HeaderText = "ICD9ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "SpecialtyID";
                dgMasters.Columns[4].HeaderText = "Isactive";
                dgMasters.Columns[5].HeaderText = "Status";
                dgMasters.Columns[6].HeaderText = "Specialty";
                dgMasters.Columns[7].HeaderText = "ConceptID";
                dgMasters.Columns[8].HeaderText = "Snomed"; //added for showing conceptid and snomeddescription 8020 prd changes, chetan 
                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = false;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = true;
                dgMasters.Columns[7].Visible = false;
                dgMasters.Columns[8].Visible = true;
                //Set width for columns of grid


                int nWidth = 970;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.075 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.42 - 10);
                dgMasters.Columns[3].Width = 0;
                dgMasters.Columns[4].Width = 0;
                dgMasters.Columns[5].Width = (int)(nWidth * 0.075 - 10);
                dgMasters.Columns[6].Width = (int)(nWidth * 0.25 - 10);
                dgMasters.Columns[7].Width = 0;
                dgMasters.Columns[8].Width = (int)(nWidth * 0.24 - 10);
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (ICDRevision == gloICD.CodeRevision.ICD9)
                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ICD9, gloAuditTrail.ActivityType.View, "View ICD", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                else
                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ICD10, gloAuditTrail.ActivityType.View, "View ICD", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - ICD : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oICD9 != null) { oICD9.Dispose(); oICD9 = null; }
                this.Cursor = System.Windows.Forms.Cursors.Default;
            }
        }


        /// <summary>
        /// Fill CPT from database
        /// To show CPT values in grid(dgMasters)on the form
        /// </summary>
        public void Fill_CommonCPT(Int16  CPTType)
        {
            ClsCommonCPT objclscommon = new ClsCommonCPT(_databaseconnectionstring, CPTType);
           dtcommoncpt= objclscommon.SelectCommonTypeCPT();
            
           objclscommon = null;
           if (dtcommoncpt != null)
               _dv = dtcommoncpt.DefaultView;
           else
               return;


        //   DataGridViewColumn dgColForSort = new DataGridViewColumn();
         //  ListSortDirection lstdirection = new ListSortDirection();
           if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Ascending)
           {
               //dgColForSort = (DataGridViewColumn)dgMasters.SortedColumn.Clone();
           //    lstdirection = ListSortDirection.Ascending;

               dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Ascending);
           }
          // else if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Descending)
           //{
             //  lstdirection = ListSortDirection.Descending;
               //dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Descending);
           //}
           string str = "";
           if (dgMasters.SortedColumn != null)
           {
               str = dgMasters.SortedColumn.Name.ToString();
           }
           dgMasters.DataSource = null;
           dgMasters.DataSource = _dv;



           dgMasters.Columns[1].HeaderText = "CPT Code";
           dgMasters.Columns[2].HeaderText = "Description";
           dgMasters.Columns[0].Visible = false;
           dgMasters.Columns[1].Width = 150;

           dgMasters.Columns[2].Width = 650;
        //   dgMasters.Columns[3].Width = 150;
           //Set toolstrip buttons enability  
           if (dgMasters.RowCount > 0)
           {
               tsb_Modify.Visible = false;
               tsb_Delete.Visible = true;
               tsb_Modify.Enabled = false;
               tsb_Delete.Enabled = true;
               tsb_ADD.Visible = true;
               tsb_ADD.ImageAlign = System.Drawing.ContentAlignment.MiddleCenter; 
               tsb_ADD.Text = "  Add/Edit";
           }
           else
           {
               tsb_Modify.Visible = false;
               tsb_Delete.Visible = false ;
               tsb_ADD.Visible = true;
               tsb_ADD.ImageAlign = System.Drawing.ContentAlignment.MiddleCenter; 
               tsb_ADD.Text = "  Add/Edit";
           }

        }

        public void Delete_CommonCPT(Int64 nCommonCptId, Int16 CPTType)
        {
            ClsCommonCPT objclscommon = new ClsCommonCPT(_databaseconnectionstring, CPTType);
             dtcommoncpt = objclscommon.DeleteCommonTypeCPTId(nCommonCptId, CPTType);
            objclscommon = null;
            if (dtcommoncpt != null)
                _dv = dtcommoncpt.DefaultView;
            else
                return;


          //  DataGridViewColumn dgColForSort = new DataGridViewColumn();
           // ListSortDirection lstdirection = new ListSortDirection();
            if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Ascending)
            {
                //dgColForSort = (DataGridViewColumn)dgMasters.SortedColumn.Clone();
               // lstdirection = ListSortDirection.Ascending;

                dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Ascending);
            }
         //   else if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Descending)
         //   {
              //  lstdirection = ListSortDirection.Descending;
                //dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Descending);
         //   }
            string str = "";
            if (dgMasters.SortedColumn != null)
            {
                str = dgMasters.SortedColumn.Name.ToString();
            }
            dgMasters.DataSource = null;
            dgMasters.DataSource = _dv;


            dgMasters.Columns[1].HeaderText = "CPT Code";
            dgMasters.Columns[2].HeaderText = "Description";
            dgMasters.Columns[0].Visible  =false ;
            dgMasters.Columns[1].Width = 150;
           
            dgMasters.Columns[2].Width = 650;
          //  dgMasters.Columns[3].Width = 150;
            //Set toolstrip buttons enability  
            FilterCptCommon();    
            if (dgMasters.RowCount > 0)
            {
                tsb_Modify.Visible = false;
                tsb_Delete.Visible = true;
                tsb_Modify.Enabled = false;
                tsb_Delete.Enabled = true;
                tsb_ADD.Visible = true;
                tsb_ADD.ImageAlign = System.Drawing.ContentAlignment.MiddleCenter; 
                tsb_ADD.Text = "  Add/Edit";
            }
            else
            {
                
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false ;
                    tsb_ADD.Visible = true;
                    tsb_ADD.Text = "  Add/Edit";
                    tsb_ADD.ImageAlign = System.Drawing.ContentAlignment.MiddleCenter; 
               
            }
        }
        public void Fill_CPT(Int64 ID)
        {
            CPT oCPT = new CPT(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                dt = oCPT.GetCPTs();

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //nCPTID, sCPTCode, sDescription, sSpecialityCode, sCategoryType, sCategoryDesc, sCodeTypeCode, sCodeTypeDesc, 
                //sDefaultMoodifier1Code, sDefaultMoodifier1Desc, sDefaultMoodifier2Code, sDefaultMoodifier2Desc, 
                //sDefaultMoodifier3Code, sDefaultMoodifier3Desc, sDefaultMoodifier4Code, sDefaultMoodifier4Desc, nDefaultUnits, 
                //bIsCPTDrug, sNDCCode, bIsTaxable, nRate, nCharges, nAllowed, nClinicFee, bInactive, nClinicID


                // nCPTID,sCPTCode,Description,sSpecialityCode,sCategory,sCodeType,Moodifier1,Moodifier1,Moodifier2,Moodifier3,Moodifier4,
                //nDefaultUnits,bIsCPTDrug,sNDCCode,bIsTaxable,nRate,nRate,nAllowed,nClinicFee,bInactive
                //Set dataview as datasource for grid(dgMasters)

                //DataGridViewColumn dgColForSort = new DataGridViewColumn();
                ListSortDirection lstdirection = new ListSortDirection();
                if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Ascending)
                {
                    //dgColForSort = (DataGridViewColumn)dgMasters.SortedColumn.Clone();
                    lstdirection = ListSortDirection.Ascending;

                    dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Ascending);
                }
                else if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Descending)
                {
                    lstdirection = ListSortDirection.Descending;
                    //dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Descending);
                }
                string str = "";
                if (dgMasters.SortedColumn != null)
                {
                    str = dgMasters.SortedColumn.Name.ToString();
                }
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;


                dgMasters.Columns[0].HeaderText = "CPTID";
                dgMasters.Columns[1].HeaderText = "CPT Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Statement Description";

                dgMasters.Columns[4].HeaderText = "Specialty";
                dgMasters.Columns[5].HeaderText = "Category";

                dgMasters.Columns[6].HeaderText = "Modifier1";
                dgMasters.Columns[7].HeaderText = "Modifier2";
                dgMasters.Columns[8].HeaderText = "Modifier3";
                dgMasters.Columns[9].HeaderText = "Modifier4";
                dgMasters.Columns[10].HeaderText = "Units";
                dgMasters.Columns[11].HeaderText = "CPT Drug";
                dgMasters.Columns[12].HeaderText = "NDC Code";
                dgMasters.Columns[13].HeaderText = "IsTaxable";
                dgMasters.Columns[14].HeaderText = "Rate";
                dgMasters.Columns[15].HeaderText = "Charges";

                dgMasters.Columns[16].HeaderText = "ClinicFee";
                dgMasters.Columns[17].HeaderText = "Inactive";
                dgMasters.Columns[18].HeaderText = "Revenue Code";
                dgMasters.Columns[19].HeaderText = "CLIA #"; //  added on 16Apr2014 for CLIANumber on CPT Master - Sameer
                //Make columns visible true or false

                dgMasters.Columns[20].HeaderText = "Activation Date";
                dgMasters.Columns[21].HeaderText = "Inactivation Date";

                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;

                dgMasters.Columns[5].Visible = true;
             
                dgMasters.Columns[6].Visible = true;
                dgMasters.Columns[7].Visible = true;
                dgMasters.Columns[8].Visible = true;
                dgMasters.Columns[9].Visible = true;
                dgMasters.Columns[10].Visible = false;
                dgMasters.Columns[11].Visible = true;
                dgMasters.Columns[12].Visible = true;
                dgMasters.Columns[13].Visible = false;

                dgMasters.Columns[14].Visible = false;
                dgMasters.Columns[15].Visible = true;

                dgMasters.Columns[16].Visible = false;
                dgMasters.Columns[17].Visible = false;

                gloBilling _UB04_Billing = new gloBilling(_databaseconnectionstring, "");
                dgMasters.Columns[18].Visible = _UB04_Billing.IsenableUB04(_ClinicID);
                dgMasters.Columns[19].Visible = true; //  added on 16Apr2014 for CLIANumber on CPT Master - Sameer

                dgMasters.Columns[20].Visible = true;
                dgMasters.Columns[21].Visible = true;

                _UB04_Billing.Dispose();

                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[2].Width = (int)(nWidth * 0.35 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.20 - 10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.15 - 10);

                dgMasters.Columns[20].Width = (int)(nWidth * 0.15 - 10);
                dgMasters.Columns[21].Width = (int)(nWidth * 0.15 - 10);

                dgMasters.Columns[10].ValueType = typeof(System.Decimal);
                dgMasters.Columns[10].DefaultCellStyle.Format = "#############0.####";

                dgMasters.Columns[20].DefaultCellStyle.Format = "MM/dd/yyyy";
                dgMasters.Columns[21].DefaultCellStyle.Format = "MM/dd/yyyy";

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                for (int i = 0; i < dgMasters.Columns.Count; i++)
                {
                    if (dgMasters.Columns[i].Name.ToString() == str)
                    {
                        dgMasters.Sort(dgMasters.Columns[i], lstdirection);
                        break;
                    }
                }

                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.View, "View CPT", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.CPT, gloAuditTrail.ActivityType.View, "View CPT", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }//Catch Exceptions
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - CPT : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oCPT.Dispose();
            }
        }

        public void Fill_RevenueCode(Int64 ID)
        {
            CLsBL_RevenueCode oRevenueCode = new CLsBL_RevenueCode(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                dt = oRevenueCode.GetRevenueCode(0, 0, true);

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //DataGridViewColumn dgColForSort = new DataGridViewColumn();
                ListSortDirection lstdirection = new ListSortDirection();
                if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Ascending)
                {
                    lstdirection = ListSortDirection.Ascending;

                    dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Ascending);
                }
                else if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Descending)
                {
                    lstdirection = ListSortDirection.Descending;

                }
                string str = "";
                if (dgMasters.SortedColumn != null)
                {
                    str = dgMasters.SortedColumn.Name.ToString();
                }
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;


                dgMasters.Columns[0].HeaderText = "Revenue ID";
                dgMasters.Columns[1].HeaderText = "Revenue Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                dgMasters.Columns[4].HeaderText = "RevenueCodeDescription";

                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;


                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.65);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.15 - 10);
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                for (int i = 0; i < dgMasters.Columns.Count; i++)
                {
                    if (dgMasters.Columns[i].Name.ToString() == str)
                    {
                        dgMasters.Sort(dgMasters.Columns[i], lstdirection);
                        break;
                    }
                }

                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.View, "View CPT", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.CPT, gloAuditTrail.ActivityType.View, "View CPT", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }//Catch Exceptions
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Revenue Code : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oRevenueCode.Dispose();
            }
        }

        public void Fill_FollowUpCode(Int64 ID, CollectionEnums.FollowUpType nType)
        {
            CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
            DataTable dt = null;
            try
            {
                dt = oFollowUpCode.GetFollowUpCodeVBB(0, nType);

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //DataGridViewColumn dgColForSort = new DataGridViewColumn();
                ListSortDirection lstdirection = new ListSortDirection();
                if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Ascending)
                {
                    lstdirection = ListSortDirection.Ascending;

                    dgMasters.Sort(dgMasters.SortedColumn, ListSortDirection.Ascending);
                }
                else if (dgMasters.SortOrder == System.Windows.Forms.SortOrder.Descending)
                {
                    lstdirection = ListSortDirection.Descending;

                }
                string str = "";
                if (dgMasters.SortedColumn != null)
                {
                    str = dgMasters.SortedColumn.Name.ToString();
                }
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;


                dgMasters.Columns[0].HeaderText = "FollowUpID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Template";
                dgMasters.Columns[4].HeaderText = "Default Next Action";
                dgMasters.Columns[5].HeaderText = "Default Next Action Days";
                dgMasters.Columns[6].HeaderText = "IsSystemType";
                dgMasters.Columns[7].HeaderText = "Status";



                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = false;
                dgMasters.Columns[7].Visible = true;




                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10 - 5);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.35 - 5);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.20 - 5);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.20 - 5);
                dgMasters.Columns[5].Width = (int)(nWidth * 0.20 - 5);
                dgMasters.Columns[6].Width = 0;
                dgMasters.Columns[7].Width = (int)(nWidth * 0.10 - 5);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                //Grid column gets wrap after selecting valuecode node.
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.False;
                dgMasters.AutoResizeRows();
                //dgMasters.Columns[2].DefaultCellStyle.WrapMode = DataGridViewTriState.False;
                //dgMasters.Columns[3].DefaultCellStyle.WrapMode = DataGridViewTriState.False;
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                for (int i = 0; i < dgMasters.Columns.Count; i++)
                {
                    if (dgMasters.Columns[i].Name.ToString() == str)
                    {
                        dgMasters.Sort(dgMasters.Columns[i], lstdirection);
                        break;
                    }
                }
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.CPT, gloAuditTrail.ActivityType.View, "View CPT", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oFollowUpCode != null) { oFollowUpCode.Dispose(); }
            }
        }

        /// <summary>
        /// Fill Modifiers from database
        /// To show Modifier values in a grid(dgMasters) on a form.
        /// </summary>
        public void Fill_Modifiers(Int64 ID)
        {
            Modifier oModifier = new Modifier(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oModifier.GetModifiers();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for grid(dgMasters)
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "ModifierID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";

                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;

                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.5 - 10);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Modifier, ActivityType.View, "View Modifier", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Modifier, gloAuditTrail.ActivityType.View, "View Modifier", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }//Catch Exceptions
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book Modifiers : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oModifier.Dispose();
            }
        }


        /// <summary>
        /// Fill Drugs from Database
        /// To show Drugs in a grid(dgMasters) on a form
        /// </summary>
        public void Fill_Drugs(Int64 ID)
        {
            Drugs oDrugs = new Drugs(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oDrugs.GetList();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                //Set dataview as datasource for grid(dgMasters)
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "Drug ID";
                dgMasters.Columns[1].HeaderText = "Drug Name";
                dgMasters.Columns[2].HeaderText = "Generic Name";
                dgMasters.Columns[3].HeaderText = "Dosage";
                dgMasters.Columns[4].HeaderText = "Route";
                dgMasters.Columns[5].HeaderText = "Frequency";
                dgMasters.Columns[6].HeaderText = "Duration";
                dgMasters.Columns[7].HeaderText = "Amount";
                dgMasters.Columns[8].HeaderText = "Narcotic";

                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = true;
                dgMasters.Columns[7].Visible = true;
                dgMasters.Columns[8].Visible = true;
                dgMasters.Columns[9].Visible = false;
                dgMasters.Columns[10].Visible = false;
                dgMasters.Columns[11].Visible = false;

                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.1 - 10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.1 - 10);
                dgMasters.Columns[5].Width = (int)(nWidth * 0.12 - 10);
                dgMasters.Columns[6].Width = (int)(nWidth * 0.1 - 10);
                dgMasters.Columns[7].Width = (int)(nWidth * 0.1 - 10);
                dgMasters.Columns[8].Width = (int)(nWidth * 0.15 - 10);
                dgMasters.Columns[9].Width = 0;
                dgMasters.Columns[10].Width = 0;
                dgMasters.Columns[11].Width = 0;


                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Drugs, ActivityType.View, "View Drugs", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Drugs, gloAuditTrail.ActivityType.View, "View Drugs", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //


            }//Catch Exceptions
            catch (gloDatabaseLayer.DBException ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oDrugs.Dispose();
            }
        }


        /// <summary>
        /// Fill Categories from database
        /// To show categories in a grid(dgMasters) on a form
        /// </summary>
        public void Fill_Category(Int64 ID)
        {
            Category oCategory = new Category(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                if (_isCategoryTypeLoading == true) { return; }

                #region " Retrive Categories from Database "

                if (cmbCategoryType == null || cmbCategoryType.Items.Count <= 0 || cmbCategoryType.SelectedIndex == 0)
                {
                    //Get data into datatable
                    dt = oCategory.GetList();
                }
                else
                {
                    string _catType = "";
                    _catType = cmbCategoryType.Text.Trim();
                    dt = oCategory.GetList(_catType);
                    _catType = "";
                }

                #endregion " Retrive Categories from Database "

                #region " Get dataview from datatable for showing data in dgMasters(grid) "

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                #endregion " Get dataview from datatable for showing data in dgMasters(grid) "

                #region " Design DataGrid "

                //Set dataview as datasource for grid(dgMasters)
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Category";
                dgMasters.Columns[4].HeaderText = "IsSystemDefined";
                dgMasters.Columns[5].HeaderText = "Parent Code";
                dgMasters.Columns[6].HeaderText = "Parent Category";
                

                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = true;

                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[4].Width = 0;
                dgMasters.Columns[5].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[6].Width = (int)(nWidth * 0.2 - 10);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                #endregion " Design DataGrid "

                #region " ToolStrip buttons Enable/Disable "

                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                }

                #endregion " ToolStrip buttons Enable/Disable "

                #region " Make Audit Trail Entry "

                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Category, ActivityType.View, "View Category", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Category, gloAuditTrail.ActivityType.View, "View Category", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

                #endregion " Make Audit Trail Entry "

            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log("Billing Book - Category : " + ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            { if (oCategory != null) { oCategory.Dispose(); } }
        }

        public void Fill_CategoryTypes()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable _dtCatgoryTypes = null;

            try
            {
                _isCategoryTypeLoading = true;
                oDB.Connect(false);
                oDB.Retrive("BL_Fill_CategoryTypes", out _dtCatgoryTypes);

                if (_dtCatgoryTypes != null && _dtCatgoryTypes.Rows.Count > 0)
                {
                    DataRow _dataRow = null;
                    _dataRow = _dtCatgoryTypes.NewRow();
                    _dataRow["sDescription"] = "All";
                    _dataRow["nCatTypeID"] = 0;
                    _dtCatgoryTypes.Rows.InsertAt(_dataRow, 0);
                    _dtCatgoryTypes.AcceptChanges();

                    cmbCategoryType.DataSource = _dtCatgoryTypes;
                    cmbCategoryType.DisplayMember = _dtCatgoryTypes.Columns["sDescription"].ColumnName;
                    cmbCategoryType.ValueMember = _dtCatgoryTypes.Columns["nCatTypeID"].ColumnName;
                    cmbCategoryType.SelectedIndex = 0;
                }

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.ToString()); }
            catch (Exception ex)
            { MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                _isCategoryTypeLoading = false;
            }
        }


        /// <summary>
        /// Get the Type Of Services for this Clinic
        /// </summary>
        public void Fill_TOS(Int64 ID)
        {
            CLsBL_TOSPOS oTOSPOS = new CLsBL_TOSPOS(_databaseconnectionstring);
            DataTable dtTOS = null;
            try
            {
                //Pass 0 to get all records
                //dtTOS = oResource.GetTOS(0);
                dtTOS = oTOSPOS.GetTOS(0);
                //if (dtTOS != null && dtTOS.Rows.Count > 0)
                if (dtTOS != null)
                {
                    _dv = dtTOS.DefaultView;
                    //nTOSID,sDescription
                    dgMasters.DataSource = null;
                    dgMasters.DataSource = _dv;
                    dgMasters.Columns[0].HeaderText = "TOSID";
                    dgMasters.Columns[1].HeaderText = "Code";
                    dgMasters.Columns[2].HeaderText = "Description";

                    dgMasters.Columns[0].Visible = false;
                    dgMasters.Columns[1].Visible = true;
                    dgMasters.Columns[2].Visible = true;

                    int nWidth = dgMasters.Width;
                    dgMasters.Columns[0].Width = 0;
                    dgMasters.Columns[1].Width = (nWidth - 10) / 2;
                    dgMasters.Columns[2].Width = (nWidth - 10) / 2;

                    if (dgMasters.DataSource != null && ID != 0)
                    {
                        for (int i = 0; i < dgMasters.Rows.Count; i++)
                        {
                            if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                            {
                                dgMasters.Rows[i].Selected = true;
                                break;
                            }
                        }
                    }
                    //Set toolstrip buttons enability  
                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;
                        
                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.TOS, ActivityType.View, "View Type Of Service", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.TOS, gloAuditTrail.ActivityType.View, "View Type Of Service", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //


            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log("Billing Book - Type Of Service :" + dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oTOSPOS.Dispose();
            }
        }


        /// <summary>
        /// Get the Place Of Service for this Clinic
        /// </summary>
        public void Fill_POS(Int64 ID)
        {
            CLsBL_TOSPOS oTOSPOS = new CLsBL_TOSPOS(_databaseconnectionstring);
            DataTable dtPOS = null;

            try
            {
                dtPOS = oTOSPOS.GetPOS(0);

                if (dtPOS != null && dtPOS.Rows.Count > 0)
                {
                    _dv = dtPOS.DefaultView;

                    //nPOSID,sPOSCode,sPOSName,sPOSDescription
                    dgMasters.DataSource = _dv;
                    dgMasters.Columns[0].HeaderText = "POSID";
                    dgMasters.Columns[1].HeaderText = "Code";
                    dgMasters.Columns[2].HeaderText = "Name";
                    dgMasters.Columns[3].HeaderText = "Description";
                    dgMasters.Columns[4].HeaderText = "nFacilityType";
                    dgMasters.Columns[5].HeaderText = "Facility Type";

                    dgMasters.Columns[0].Visible = false;
                    dgMasters.Columns[1].Visible = true;
                    dgMasters.Columns[2].Visible = true;
                    dgMasters.Columns[3].Visible = true;
                    dgMasters.Columns[4].Visible = false;
                    dgMasters.Columns[5].Visible = false;

                    int nWidth = dgMasters.Width;

                    dgMasters.Columns[0].Width = 0;
                    dgMasters.Columns[1].Width = (int)(nWidth * 0.10 - 3);
                    dgMasters.Columns[2].Width = (int)(nWidth * 0.25 - 3);
                    dgMasters.Columns[3].Width = (int)(nWidth * 0.50 - 3);
                    dgMasters.Columns[4].Width = 0;
                    dgMasters.Columns[5].Width = (int)(nWidth * 0.15 - 3);
                    //Added By Rahul Patel
                    //For Text Wrapping in Cell
                    dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                    dgMasters.AutoResizeRows();
                    //End
                    if (dgMasters.DataSource != null && ID != 0)
                    {
                        for (int i = 0; i < dgMasters.Rows.Count; i++)
                        {
                            if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                            {
                                dgMasters.Rows[i].Selected = true;
                                break;
                            }
                        }
                    }
                    //Set toolstrip buttons enability  
                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.POS, ActivityType.View, "View Place Of Service", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.POS, gloAuditTrail.ActivityType.View, "View Place Of Servicee", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //


            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log("Billing Book - Place Of Service : " + dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oTOSPOS.Dispose();

            }
        }


        /// <summary>
        /// Get All Facilities Registered for the Clinic
        /// </summary>
        public void Fill_Facility(Int64 ID)
        {
            gloFacility ogloFacility = new gloFacility(_databaseconnectionstring);
            DataTable dtFacilities = null;

            try
            {
                dtFacilities = ogloFacility.GetFacilities();
                if (dtFacilities != null && dtFacilities.Rows.Count > 0)
                {

                    _dv = dtFacilities.DefaultView;

                    dgMasters.DataSource = _dv;
                    dgMasters.Columns[0].HeaderText = "FacilityID";
                    dgMasters.Columns[1].HeaderText = "Facility Code";
                    dgMasters.Columns[2].HeaderText = "Facility Name";
                    dgMasters.Columns[3].HeaderText = "NPI";
                    dgMasters.Columns[4].HeaderText = "Medicaid ID";
                    dgMasters.Columns[5].HeaderText = "Blue Shield ID";
                    dgMasters.Columns[6].HeaderText = "Medicare ID";
                    dgMasters.Columns[7].HeaderText = "Tax ID";
                    dgMasters.Columns[8].HeaderText = "City";
                    dgMasters.Columns[9].HeaderText = "Phone";


                    dgMasters.Columns[0].Visible = false;
                    dgMasters.Columns[1].Visible = false;
                    dgMasters.Columns[2].Visible = true;
                    dgMasters.Columns[3].Visible = true;
                    dgMasters.Columns[4].Visible = false;
                    dgMasters.Columns[5].Visible = false;
                    dgMasters.Columns[6].Visible = false;
                    dgMasters.Columns[7].Visible = true;
                    dgMasters.Columns[8].Visible = true;
                    dgMasters.Columns[9].Visible = true;

                    int nWidth = dgMasters.Width;
                    dgMasters.Columns[0].Width = 0;
                    dgMasters.Columns[1].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[2].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[4].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[5].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[6].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[7].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[8].Width = (nWidth - 10) / 8;
                    dgMasters.Columns[9].Width = (nWidth - 10) / 8;

                    //Added By Rahul Patel
                    //For Text Wrapping in Cell
                    dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                    dgMasters.AutoResizeRows();
                    //End 
                    if (dgMasters.DataSource != null && ID != 0)
                    {
                        for (int i = 0; i < dgMasters.Rows.Count; i++)
                        {
                            if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                            {
                                dgMasters.Rows[i].Selected = true;
                                break;
                            }
                        }
                    }
                    //Set toolstrip buttons enability  
                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }
                    //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Facility, ActivityType.View, "View Facility", ActivityOutCome.Success);
                    //Added Rahul on 20101012
                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Facility, gloAuditTrail.ActivityType.View, "View Facility", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                    //


                }
                else
                {
                    //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Facility, ActivityType.View, "View Facility", ActivityOutCome.Failure);
                    //Added Rahul on 20101012
                    gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Facility, gloAuditTrail.ActivityType.View, "View Facility", 0, 0, 0, gloAuditTrail.ActivityOutCome.Failure);
                    //

                    MessageBox.Show("No records found.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log("Billing Book - Facility : " + dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                ogloFacility.Dispose();
            }
        }


        public void Fill_CPTCharges()
        {
            CPTCharges oCPT = new CPTCharges(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                dt = oCPT.GetCPTCharges();

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for grid(dgMasters)
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "CPTID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "CPTCharges";
                dgMasters.Columns[4].HeaderText = "CPTAllowedCharges";
                dgMasters.Columns[5].HeaderText = "ClinicFee";
                dgMasters.Columns[6].HeaderText = "Speciality Code";
                dgMasters.Columns[7].HeaderText = "Speciality Description";
                dgMasters.Columns[8].HeaderText = "Modifier Code";
                dgMasters.Columns[9].HeaderText = "Modifier Description";
                dgMasters.Columns[10].HeaderText = "Facility";

                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = true;
                dgMasters.Columns[7].Visible = true;
                dgMasters.Columns[8].Visible = true;
                dgMasters.Columns[9].Visible = true;
                dgMasters.Columns[10].Visible = true;


                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.20 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[5].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[6].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[7].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[8].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[9].Width = (int)(nWidth * 0.10 - 10);
                dgMasters.Columns[10].Width = (int)(nWidth * 0.10 - 10);

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }//Catch Exceptions
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - CPT : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oCPT.Dispose();
            }
        }


        public void Fill_Codetype(Int64 ID)
        {
            CodeType oCtype = new CodeType(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oCtype.GetCodetypes();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "CodetypeID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;

                //Set width for columns of grid
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.5 - 10);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CodeType, ActivityType.View, "View Code Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.CodeType, gloAuditTrail.ActivityType.View, "View Code Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Codetype : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oCtype.Dispose();
            }
        }

        public void Fill_CreditCards(Int64 ID)
        {
            CreditCards oCtype = new CreditCards(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                dt = oCtype.GetList();
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                dgMasters.DataSource = _dv;
                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "CardID";
                dgMasters.Columns[1].HeaderText = "Description";
                dgMasters.Columns[2].HeaderText = "ClinicID";
                dgMasters.Columns[3].HeaderText = "IsBlocked";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = false;
                dgMasters.Columns[3].Visible = false;

                //Set width for columns of grid
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[2].Width = 0;
                dgMasters.Columns[3].Width = 0;

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CodeType, ActivityType.View, "View Code Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.CodeType, gloAuditTrail.ActivityType.View, "View Code Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Codetype : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oCtype.Dispose();
            }
        }


        public void Fill_PatientRelationship(Int64 ID)
        {
            gloPatient.RelationShip oRelationship = new gloPatient.RelationShip(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oRelationship.GetList();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "IsBlocked";
                dgMasters.Columns[4].HeaderText = "ClinicID";
                dgMasters.Columns[5].HeaderText = "IsSystem";
                dgMasters.Columns[6].HeaderText = "Record Type";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = false;
                dgMasters.Columns[5].Visible = false;
                dgMasters.Columns[6].Visible = true;

                //Set width for columns of grid
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.15 - 3);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.70 - 3);
                dgMasters.Columns[6].Width = (int)(nWidth * 0.15 - 3);


                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Relationship, ActivityType.View, "View PatientRelationship", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Relationship, gloAuditTrail.ActivityType.View, "View PatientRelationship", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - PatientRelationship : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oRelationship.Dispose();
            }

        }


        private void Fill_Flags(Int64 ID)
        {
            FlagType oFtype = new FlagType(_databaseconnectionstring);
            dgMasters.Visible = false;
            c1AppointmentType.Visible = true;

            try
            {
                DataTable dt = null;
                dt = oFtype.GetFlagtypes();


                // c1AppointmentType.DataSource = dt;
                //c1AppointmentType.Clear();// (ClearFlags.All);

                c1AppointmentType.Rows.Count = 1;
                c1AppointmentType.Cols.Count = 4;
                //c1AppointmentType.Cols[0].Caption = "FlagtypeID";
                //c1AppointmentType.Cols[1].Caption = "Code";
                //c1AppointmentType.Cols[2].Caption = "Description";
                //c1AppointmentType.Cols[3].Caption = "ColorCode";

                c1AppointmentType.Rows.Fixed = 1;
                //c1AppointmentType.Cols.Fixed = 1;
                c1AppointmentType.SetData(0, 0, "FlagtypeID");
                c1AppointmentType.SetData(0, 1, "Code");
                c1AppointmentType.SetData(0, 2, "Description");
                c1AppointmentType.SetData(0, 3, "ColorCode");


                c1AppointmentType.Cols[0].Visible = false;
                c1AppointmentType.Cols[1].Visible = true;
                c1AppointmentType.Cols[2].Visible = true;
                c1AppointmentType.Cols[3].Visible = true;


                int nWidth = c1AppointmentType.Width;
                c1AppointmentType.Cols[0].Width = 0;
                c1AppointmentType.Cols[1].Width = (int)(0.30 * (nWidth) - 10);
                c1AppointmentType.Cols[2].Width = (int)(0.50 * (nWidth) - 10);
                c1AppointmentType.Cols[3].Width = (int)(0.15 * (nWidth) - 10);

                c1AppointmentType.Cols[3].AllowResizing = false;
                c1AppointmentType.AllowEditing = false;
                c1AppointmentType.AllowSorting = C1.Win.C1FlexGrid.AllowSortingEnum.SingleColumn;


                c1AppointmentType.Cols[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter;
                c1AppointmentType.Cols[2].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter;

                c1AppointmentType.BringToFront();
                c1AppointmentType.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;

                if (dt != null)
                {
                    _dv = dt.DefaultView;

                    int i;
                    for (i = 0; i <= dt.Rows.Count - 1; i++)
                    {
                        if (c1AppointmentType.Rows.Count - 1 <= i)
                        {
                            c1AppointmentType.Rows.Add();
                        }

                        c1AppointmentType.SetData(i + 1, 0, Convert.ToInt64(dt.Rows[i]["FlagtypeID"]));
                        c1AppointmentType.SetData(i + 1, 1, Convert.ToString(dt.Rows[i]["FlagtypeCode"]));
                        c1AppointmentType.SetData(i + 1, 2, Convert.ToString(dt.Rows[i]["FlagtypeDesc"]));
                        c1AppointmentType.Row = 1;


                        C1.Win.C1FlexGrid.CellStyle cStyle;
                        //c1AppointmentType.Cols[3].UserData = dt.Rows[i]["ColorCode"];
                        //c1AppointmentType.SetData(i + 1, 3, "     " + dt.Rows[i]["ColorCode"]);
                        //c1AppointmentType.SetData(i+1, 3, "     " + dt.Rows[i]["sColorCode"]);
                        C1.Win.C1FlexGrid.CellRange rgBubbleValues = c1AppointmentType.GetCellRange(i + 1, 3);
                      //  cStyle = c1AppointmentType.Styles.Add("BubbleValues" + i);
                        try
                        {
                            if (c1AppointmentType.Styles.Contains("BubbleValues" + i))
                            {
                                cStyle = c1AppointmentType.Styles["BubbleValues" + i];
                            }
                            else
                            {
                                cStyle = c1AppointmentType.Styles.Add("BubbleValues" + i);
                            }

                        }
                        catch
                        {
                            cStyle = c1AppointmentType.Styles.Add("BubbleValues" + i);
     
                        }

                        cStyle.BackColor = Color.FromArgb(Convert.ToInt32(dt.Rows[i]["ColorCode"]));  // Color.Blue;

                        rgBubbleValues.Style = cStyle;
                    }
                    string ID1 = Convert.ToString(ID);
                    if (ID == 0 && c1AppointmentType.Rows.Count > 1)
                    {
                        c1AppointmentType.Row = 1;
                    }
                    else
                    {
                        int RowIndex = c1AppointmentType.FindRow(ID1, 1, 0, false, false, false);
                        c1AppointmentType.Row = RowIndex;
                    }
                    if (c1AppointmentType.Rows.Count > 1)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;
                    }
                    if (c1AppointmentType.Rows.Count <= 1)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;
                    }

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.FlagType, ActivityType.View, "View Flagt Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.FlagType, gloAuditTrail.ActivityType.View, "View Flagt Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oFtype.Dispose();
            }
        }

        private void Fill_Flags(Int64 ID, string strSearch)
        {
            FlagType oFtype = new FlagType(_databaseconnectionstring);
            dgMasters.Visible = false;
            c1AppointmentType.Visible = true;
            string sFilter = "";
            try
            {
                DataTable dt = null;
                dt = oFtype.GetFlagtypes();

                if (dt != null)
                {
                    _dv = dt.DefaultView;

                    strSearch = strSearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                    if (strSearch.Length > 1)
                    {
                        string str = strSearch.Substring(1).Replace("%", "");
                        strSearch = strSearch.Substring(0, 1) + str;
                    }
                    if (strSearch.Trim() != "")
                    {
                        strSearchArray = strSearch.Split(',');
                    }
                    if (strSearch.Trim() != "")
                    {
                        if (strSearchArray.Length == 1)
                        {
                            //For Single value search 
                            strSearch = strSearchArray[0];
                            _dv.RowFilter = _dv.Table.Columns["FlagTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                             _dv.Table.Columns["FlagtypeDesc"].ColumnName + " Like '" + strSearch + "%'";

                        }
                        else
                        {
                            //For Comma separated  value search
                            for (int j = 0; j < strSearchArray.Length; j++)
                            {
                                strSearch = strSearchArray[j];
                                if (strSearch.Trim() != "")
                                {


                                    if (sFilter == "")//if (j == 0)
                                    {
                                        sFilter = " ( " + _dv.Table.Columns["FlagTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                             _dv.Table.Columns["FlagtypeDesc"].ColumnName + " Like '" + strSearch + "%')";
                                    }
                                    else
                                    {
                                        sFilter = sFilter + " AND (" + _dv.Table.Columns["FlagTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                             _dv.Table.Columns["FlagtypeDesc"].ColumnName + " Like '" + strSearch + "%')";
                                    }

                                }
                            }
                            _dv.RowFilter = sFilter;

                        }
                    }
                    else
                    {
                        _dv.RowFilter = "";
                    }

                    #region " Old Code "
                    //if (strSearch.Trim() != "")
                    //{
                    //    //if (strSearch.StartsWith("%") == true | strSearch.StartsWith("*") == true)
                    //    //    _dv.RowFilter = _dv.Table.Columns["FlagtypeDesc"].ColumnName + " Like '" + strSearch + "%'";
                    //    //else
                    //    //    _dv.RowFilter = _dv.Table.Columns["FlagtypeDesc"].ColumnName + " Like '" + strSearch + "%'";

                    //    //_dv.RowFilter = _dv.Table.Columns["sICD9Code"].ColumnName + " Like '" + strSearch + "%' OR " +
                    //     //                          _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";

                    //    if (strSearch.StartsWith("%") == true | strSearch.StartsWith("*") == true)
                    //        _dv.RowFilter = _dv.Table.Columns[_Searchcolumn].ColumnName + " Like '" + strSearch + "%'";
                    //    else
                    //        _dv.RowFilter = _dv.Table.Columns[_Searchcolumn].ColumnName + " Like '" + strSearch + "%'";

                    //    //if (dt != null && dt.Rows.Count > 0)
                    //    //{
                    //    //    dt.Clear();
                    //    //}
                    //    dt = _dv.ToTable().Copy();
                    //}
                    #endregion " Old Code "

                    dt = _dv.ToTable().Copy();


                    c1AppointmentType.Rows.Count = 1;
                    c1AppointmentType.Cols.Count = 4;
                    c1AppointmentType.Cols[0].Caption = "FlagtypeID";
                    c1AppointmentType.Cols[1].Caption = "Code";
                    c1AppointmentType.Cols[2].Caption = "Description";
                    c1AppointmentType.Cols[3].Caption = "ColorCode";


                    c1AppointmentType.Cols[0].Visible = false;
                    c1AppointmentType.Cols[1].Visible = true;
                    c1AppointmentType.Cols[2].Visible = true;
                    c1AppointmentType.Cols[3].Visible = true;


                    int nWidth = c1AppointmentType.Width;
                    c1AppointmentType.Cols[0].Width = 0;
                    c1AppointmentType.Cols[1].Width = (int)(0.30 * (nWidth) - 10);
                    c1AppointmentType.Cols[2].Width = (int)(0.50 * (nWidth) - 10);
                    c1AppointmentType.Cols[3].Width = (int)(0.15 * (nWidth) - 10);

                    c1AppointmentType.Cols[3].AllowResizing = false;
                    c1AppointmentType.AllowEditing = false;
                    c1AppointmentType.AllowSorting = C1.Win.C1FlexGrid.AllowSortingEnum.SingleColumn;


                    c1AppointmentType.Cols[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter;
                    c1AppointmentType.Cols[2].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter;

                    c1AppointmentType.Cols[3].AllowResizing = false;
                    c1AppointmentType.Cols[3].Selected = false;
                    c1AppointmentType.AllowEditing = false;
                    //c1AppointmentType.AllowSorting = C1.Win.C1FlexGrid.AllowSortingEnum.None;
                    //c1AppointmentType.HighLight = C1.Win.C1FlexGrid.HighLightEnum.Never;

                    c1AppointmentType.BringToFront();
                    c1AppointmentType.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Cell;


                    int i;
                    for (i = 0; i <= dt.Rows.Count - 1; i++)
                    {
                        if (c1AppointmentType.Rows.Count - 1 <= i)
                        {
                            c1AppointmentType.Rows.Add();
                        }

                        c1AppointmentType.SetData(i + 1, 0, Convert.ToInt64(dt.Rows[i]["FlagtypeID"]));
                        c1AppointmentType.SetData(i + 1, 1, Convert.ToString(dt.Rows[i]["FlagtypeCode"]));
                        c1AppointmentType.SetData(i + 1, 2, Convert.ToString(dt.Rows[i]["FlagtypeDesc"]));
                        c1AppointmentType.Row = 1;


                        C1.Win.C1FlexGrid.CellStyle cStyle;
                        //c1AppointmentType.Cols[3].UserData = dt.Rows[i]["ColorCode"];
                        //c1AppointmentType.SetData(i + 1, 3, "     " + dt.Rows[i]["ColorCode"]);
                        //c1AppointmentType.SetData(i+1, 3, "     " + dt.Rows[i]["sColorCode"]);
                        C1.Win.C1FlexGrid.CellRange rgBubbleValues = c1AppointmentType.GetCellRange(i + 1, 3);
                       // cStyle = c1AppointmentType.Styles.Add("BubbleValues" + i);
                        try
                        {
                            if (c1AppointmentType.Styles.Contains("BubbleValues" + i))
                            {
                                cStyle = c1AppointmentType.Styles["BubbleValues" + i];
                            }
                            else
                            {
                                cStyle = c1AppointmentType.Styles.Add("BubbleValues" + i);
                            }

                        }
                        catch
                        {
                            cStyle = c1AppointmentType.Styles.Add("BubbleValues" + i);

                        }
                        cStyle.BackColor = Color.FromArgb(Convert.ToInt32(dt.Rows[i]["ColorCode"]));  // Color.Blue;

                        rgBubbleValues.Style = cStyle;
                    }
                    string ID1 = Convert.ToString(ID);
                    if (ID == 0 && c1AppointmentType.Rows.Count > 1)
                    {
                        c1AppointmentType.Row = 1;
                    }
                    else
                    {
                        int RowIndex = c1AppointmentType.FindRow(ID1, 1, 0, false, false, false);
                        c1AppointmentType.Row = RowIndex;
                    }

                }
                c1AppointmentType.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.FlagType, ActivityType.View, "View Flagt Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.FlagType, gloAuditTrail.ActivityType.View, "View Flagt Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oFtype.Dispose();
            }
        }


        private void Fill_Specialty(Int64 ID)
        {
            Specialty oSpec = new Specialty(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oSpec.GetSpecialties();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Taxonomy Code";
                dgMasters.Columns[4].HeaderText = "Taxonomy Description";
                dgMasters.Columns[5].HeaderText = "Classification";
                dgMasters.Columns[6].HeaderText = "Clinic ID";
                dgMasters.Columns[7].HeaderText = "Is Blocked";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = false;
                dgMasters.Columns[7].Visible = false; //ISBlocked


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.30);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.186);
                dgMasters.Columns[5].Width = (int)(nWidth * 0.30);
                dgMasters.Columns[6].Width = 0;
                dgMasters.Columns[7].Width = 0;
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Speciality, ActivityType.View, "View Speciality", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Speciality, gloAuditTrail.ActivityType.View, "View Speciality", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Speciality : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSpec.Dispose();
            }


        }


        private void Fill_InsuranceServicetype(Int64 ID)
        {
            ServiceType oStype = new ServiceType(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oStype.GetInsuranceServiceTypes();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;
                //nServiceTypeID, sServiceTypeCode, sServiceTypeDesc, sInsuranceType, nClinicID  --BL_InsuranceServiceType
                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Service Type Code";
                dgMasters.Columns[2].HeaderText = "Service Type Description";
                dgMasters.Columns[3].HeaderText = "Plan Type";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.60);
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsuranceServiceType, ActivityType.View, "View Insurance Service Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.InsuranceServiceType, gloAuditTrail.ActivityType.View, "View Insurance Service Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Insurance Service Type : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oStype.Dispose();
            }
        }


        private void Fill_InsurancePlan(Int64 ID)
        {
            InsurancePlan oInsurancePlan = new InsurancePlan(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oInsurancePlan.GetInsurancePlans();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Plan Code";
                dgMasters.Columns[2].HeaderText = "Plan Description";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.80);
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsurancePlancode, ActivityType.View, "View Insurance Plan Code", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.InsurancePlancode, gloAuditTrail.ActivityType.View, "View Insurance Plan Code", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Insurance Plan Code : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oInsurancePlan.Dispose();
            }


        }


        private void Fill_InsuranceType(Int64 ID)
        {

            InsuranceType oInsuranceType = new InsuranceType(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oInsuranceType.GetInsuranceTypes();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Type Code";
                dgMasters.Columns[2].HeaderText = "Type Description";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.80);
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsuranceType, ActivityType.View, "View plan Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.InsuranceType, gloAuditTrail.ActivityType.View, "View plan Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Plan Type : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oInsuranceType.Dispose();
            }
        }


        private void Fill_ClearingHouse(Int64 ID)
        {
            ClearingHouse oClearingHouse = new ClearingHouse(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = oClearingHouse.GetClearingHouse();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Name";
                dgMasters.Columns[2].HeaderText = "Reciever ID";
                dgMasters.Columns[3].HeaderText = "Reciever Name";
                dgMasters.Columns[4].HeaderText = "Sender ID";
                dgMasters.Columns[5].HeaderText = "IS1J Qualifier ";
                dgMasters.Columns[6].HeaderText = "1J Qualifier ";
                dgMasters.Columns[7].HeaderText = "IS Sender Code";
                dgMasters.Columns[8].HeaderText = "Sender Code";
                dgMasters.Columns[9].HeaderText = "IS Receiver Code";
                dgMasters.Columns[10].HeaderText = "Receiver Code";
                dgMasters.Columns[11].HeaderText = "IS Loop 1000B NM109";
                dgMasters.Columns[12].HeaderText = "Loop 1000B";
                dgMasters.Columns[13].HeaderText = "Type Of Data";
                dgMasters.Columns[14].HeaderText = "ISA";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = false;
                dgMasters.Columns[6].Visible = false;
                dgMasters.Columns[7].Visible = false;
                dgMasters.Columns[8].Visible = true;
                dgMasters.Columns[9].Visible = false;
                dgMasters.Columns[10].Visible = true;
                dgMasters.Columns[11].Visible = false;
                dgMasters.Columns[12].Visible = false;
                dgMasters.Columns[13].Visible = false;
                dgMasters.Columns[14].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 2;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.14);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.12);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[6].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[8].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[10].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[11].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[12].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[14].Width = (int)(nWidth * 0.08);
                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.ClearingHouse, ActivityType.View, "View Clearing House", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ClearingHouse, gloAuditTrail.ActivityType.View, "View Clearing House", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Clearing House : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oClearingHouse.Dispose();
            }
        }

        private void Fill_Scrubber(Int64 ID)
        {
            gloScrubber ogloScrubber = new gloScrubber(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = ogloScrubber.GetScrubbers();

                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;


                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "CPT Code";
                dgMasters.Columns[1].HeaderText = "CPT Desc";
                dgMasters.Columns[2].HeaderText = "TOS";
                dgMasters.Columns[3].HeaderText = "POS";
                dgMasters.Columns[4].HeaderText = "Diagnosis";
                dgMasters.Columns[5].HeaderText = "Modifiers";

                dgMasters.Columns[1].Visible = false;

                //Set width for columns of grid
                int nWidth = dgMasters.Width - 2;
                dgMasters.Columns[0].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[1].Width = 0;
                dgMasters.Columns[2].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.25);
                dgMasters.Columns[5].Width = (int)(nWidth * 0.25);

                dgMasters.Columns[0].ReadOnly = true;
                dgMasters.Columns[1].ReadOnly = true;
                dgMasters.Columns[2].ReadOnly = true;
                dgMasters.Columns[3].ReadOnly = true;
                dgMasters.Columns[4].ReadOnly = true;
                dgMasters.Columns[5].ReadOnly = true;

                //if (dgMasters.DataSource != null && ID != 0)
                //{
                //    for (int i = 0; i < dgMasters.Rows.Count; i++)
                //    {
                //        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                //        {
                //            dgMasters.Rows[i].Selected = true;
                //            break;
                //        }
                //    }
                //}
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.ClearingHouse, ActivityType.View, "View Clearing House", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ClearingHouse, gloAuditTrail.ActivityType.View, "View Clearing House", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Scrubber : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                ogloScrubber.Dispose();
            }
        }


        private void Fill_StandardFeeScheduleType(Int64 _StdFeeScheeduleID, string _CPTCode)
        {
            dgMasters.Visible = false;
            c1AppointmentType.Visible = true;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlRetrieveQuery = "";
            DataTable dtTemp = null;
          //  DataTable dtDistinctCPT = new DataTable();
            Int32 NoOfRecord = Convert.ToInt32(numCount.Value);
            try
            {
                #region "Design Grid"
                c1AppointmentType.Clear(C1.Win.C1FlexGrid.ClearFlags.All);

                c1AppointmentType.Cols.Count = COL_COUNT;
                c1AppointmentType.Rows.Count = 2;
                c1AppointmentType.Rows.Fixed = 1;



                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].DataType = typeof(System.Int64);
                c1AppointmentType.Cols[COL_YEAR].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_CARRIER_NUMBER].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_LOCALITY].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_HCPCS].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_HCPCS_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_MODIFIER].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_MODIFIER_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_SPECIALTY_ID].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].DataType = typeof(System.Decimal);

                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_FACILITY_CHARGE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_NON_FACILITY_CHARGE_AMOUNT].DataType = typeof(System.Decimal);


                c1AppointmentType.SetData(0, COL_FEE_SCHEDULE_ID, "Fee Schedule ID");
                c1AppointmentType.SetData(0, COL_YEAR, "Year");
                c1AppointmentType.SetData(0, COL_CARRIER_NUMBER, "Carrier Number");
                c1AppointmentType.SetData(0, COL_LOCALITY, "Locality");
                c1AppointmentType.SetData(0, COL_HCPCS, "HCPCS Code");
                c1AppointmentType.SetData(0, COL_HCPCS_DESC, "HCPCS Desc");
                c1AppointmentType.SetData(0, COL_MODIFIER, "Modifier");
                c1AppointmentType.SetData(0, COL_MODIFIER_DESC, "Modifier Desc");
                c1AppointmentType.SetData(0, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, "Non Facility Allowed");
                c1AppointmentType.SetData(0, COL_FACILITY_FEESCHEDULE_AMOUNT, "Facility Allowed");
                c1AppointmentType.SetData(0, COL_PCTC_INDICATOR, "PCTC Indicator");
                c1AppointmentType.SetData(0, COL_STATUS_CODE, "Status Code");
                c1AppointmentType.SetData(0, COL_SPECIALTY_ID, "Specialty ID");
                c1AppointmentType.SetData(0, COL_SPECIALITY_DESC, "Specialty");
                c1AppointmentType.SetData(0, COL_CLINIC_CHARGES, "Clinic Charges");
                c1AppointmentType.SetData(0, COL_LIMIT_CHARGES, "Limit Charges");
                c1AppointmentType.SetData(0, COL_ALLOWED_CHARGES, "Allowed Charges");

                c1AppointmentType.SetData(0, COL_CHARGES_PERCENTAGE, "Charges Percentage");
                c1AppointmentType.SetData(0, COL_VARIANT_AMOUNT, "Variant Charges");

                c1AppointmentType.SetData(0, COL_FACILITY_CHARGE_AMOUNT, "Facility Charges");
                c1AppointmentType.SetData(0, COL_NON_FACILITY_CHARGE_AMOUNT, "Non Facility Charges");

                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].Width = 100;
                c1AppointmentType.Cols[COL_YEAR].Width = 100;
                c1AppointmentType.Cols[COL_CARRIER_NUMBER].Width = 100;
                c1AppointmentType.Cols[COL_LOCALITY].Width = 100;
                c1AppointmentType.Cols[COL_HCPCS].Width = 100;
                c1AppointmentType.Cols[COL_HCPCS_DESC].Width = 0;
                c1AppointmentType.Cols[COL_MODIFIER].Width = 100;
                c1AppointmentType.Cols[COL_MODIFIER_DESC].Width = 0;
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].Width = 130;
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].Width = 100;
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].Width = 100;
                c1AppointmentType.Cols[COL_STATUS_CODE].Width = 100;
                c1AppointmentType.Cols[COL_SPECIALTY_ID].Width = 100;
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].Width = 0;
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Width = 100;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Width = 100;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Width = 100;

                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].Width = 100;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Width = 100;
                c1AppointmentType.Cols[COL_FACILITY_CHARGE_AMOUNT].Width = 130;
                c1AppointmentType.Cols[COL_NON_FACILITY_CHARGE_AMOUNT].Width = 135;

                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].Visible = false;
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].Visible = false;
                c1AppointmentType.Cols[COL_MODIFIER_DESC].Visible = false;
                c1AppointmentType.Cols[COL_HCPCS_DESC].Visible = false;
                c1AppointmentType.Cols[COL_STATUS_CODE].Visible = false;
                c1AppointmentType.Cols[COL_SPECIALTY_ID].Visible = false;
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].Visible = false;
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].Visible = false;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Visible = false;

                C1.Win.C1FlexGrid.CellStyle csCurrency;// = c1AppointmentType.Styles.Add("cs_Currency");
                try
                {
                    if (c1AppointmentType.Styles.Contains("cs_Currency"))
                    {
                        csCurrency = c1AppointmentType.Styles["cs_Currency"];
                    }
                    else
                    {
                        csCurrency = c1AppointmentType.Styles.Add("cs_Currency");
                        csCurrency.DataType = typeof(System.Decimal);
                        csCurrency.Format = "c";
                        csCurrency.Font = gloGlobal.clsgloFont.gFont_SMALL_BOLD;//new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                    }

                }
                catch
                {
                    csCurrency = c1AppointmentType.Styles.Add("cs_Currency");
                    csCurrency.DataType = typeof(System.Decimal);
                    csCurrency.Format = "c";
                    csCurrency.Font = gloGlobal.clsgloFont.gFont_SMALL_BOLD;//new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                }

                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Style = csCurrency;

                c1AppointmentType.Cols[COL_FACILITY_CHARGE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_NON_FACILITY_CHARGE_AMOUNT].Style = csCurrency;


                if (c1AppointmentType != null && c1AppointmentType.Rows.Count > 1)
                {
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_CLINIC_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_LIMIT_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_ALLOWED_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_FACILITY_FEESCHEDULE_AMOUNT, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_VARIANT_AMOUNT, 0.00);
                }

                c1AppointmentType.Row = 1;
                c1AppointmentType.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                c1AppointmentType.AllowSorting = C1.Win.C1FlexGrid.AllowSortingEnum.SingleColumn;
                #endregion

                oDB.Connect(false);

                c1AppointmentType.Rows.Count = 1;

                //c1AppointmentType.Rows.Add();
                Int32 Index = c1AppointmentType.Rows.Count - 1;
                dtTemp = null;
                _sqlRetrieveQuery = "";

                if (_CPTCode != "")
                {
                    //Added by Mukesh on 20090907 For Comma separated  value search
                    String strSearch = _CPTCode;
                    string sFilter = "";
                    strSearchArray = _CPTCode.Split(',');

                    if (strSearchArray.Length == 1)
                    {
                        //For Single value search 
                        strSearch = strSearchArray[0].Trim();
                        sFilter = " AND (sYear like '" + strSearch.Trim() + "%'" +
                                " OR sCarrierNumber like '" + strSearch.Trim() + "%'" +
                                " OR sLocality like '" + strSearch.Trim() + "%'" +
                                " OR sHCPCS like '" + strSearch.Trim() + "%'" +
                                " OR sModifier like '" + strSearch.Trim() + "%'" +
                                " OR convert(varchar(max),nNonFacilityFeeScheduleAmount) like '" + strSearch.Trim() + "%'" +
                                " OR convert(varchar(max),nFacilityFeeScheduleAmount) like '" + strSearch.Trim() + "%')";
                    }
                    else
                    {
                        //For Comma separated  value search
                        for (int i = 0; i < strSearchArray.Length; i++)
                        {
                            strSearch = strSearchArray[i].Trim();
                            if (strSearch.Trim() != "")
                            {
                                sFilter += " AND (sYear like '" + strSearch.Trim() + "%'" +
                                         " OR sCarrierNumber like '" + strSearch.Trim() + "%'" +
                                         " OR sLocality like '" + strSearch.Trim() + "%'" +
                                         " OR sHCPCS like '" + strSearch.Trim() + "%'" +
                                         " OR sModifier like '" + strSearch.Trim() + "%'" +
                                         " OR convert(varchar(max),nNonFacilityFeeScheduleAmount) like '" + strSearch.Trim() + "%'" +
                                         " OR convert(varchar(max),nFacilityFeeScheduleAmount) like '" + strSearch.Trim() + "%')";
                            }
                        }
                    }


                    _sqlRetrieveQuery = "SELECT TOP " + NoOfRecord.ToString() + " ISNULL(nFeeScheduleID, 0) AS nFeeScheduleID, ISNULL(sYear, '') AS sYear, ISNULL(sCarrierNumber, '') AS sCarrierNumber, ISNULL(sLocality, '') " +
                                    " AS sLocality, ISNULL(sHCPCS, '') AS sHCPCS, ISNULL(sModifier, '') AS sModifier, ISNULL(nNonFacilityFeeScheduleAmount, 0) " +
                                    " AS nNonFacilityFeeScheduleAmount, ISNULL(nFacilityFeeScheduleAmount, 0) AS nFacilityFeeScheduleAmount, ISNULL(nPCTCIndicator, 0) " +
                                    " AS nPCTCIndicator, ISNULL(sStatusCode, '') AS sStatusCode, ISNULL(sSpecialtyID, '') AS sSpecialtyID, ISNULL(nClinicCharges, 0) AS nClinicCharges,  " +
                                    " ISNULL(BL_FeeSchedule_DTL.nChargePercentage, 0) AS nChargePercentage, ISNULL(BL_FeeSchedule_DTL.nVariantAmount, 0) AS nVariantAmount," +
                                    " ISNULL(nLimitCharges, 0) AS nLimitCharges, ISNULL(nAllowedCharges, 0) AS nAllowedCharges, ISNULL(nClinicID, 0) AS nClinicID,ISNULL(nnonfacilityChargeAmount,0) As nnonfacilityChargeAmount,ISNULL(nfacilityChargeAmount,0) As nfacilityChargeAmount" +
                                    " FROM BL_FeeSchedule_DTL WITH(NOLOCK) WHERE BL_FeeSchedule_DTL.nFeeScheduleID= " + _StdFeeScheeduleID + sFilter;
                    //" AND ( sYear like '" + _CPTCode.Trim() + "%'" +
                    //" OR sCarrierNumber like '" + _CPTCode.Trim() + "%'" +
                    //" OR sLocality like '" + _CPTCode.Trim() + "%'" +
                    //" OR sHCPCS like '" + _CPTCode.Trim() + "%'" +
                    //" OR sModifier like '" + _CPTCode.Trim() + "%'" +
                    //" OR convert(varchar(max),nNonFacilityFeeScheduleAmount) like '" + _CPTCode.Trim() + "%'" +
                    //" OR convert(varchar(max),nFacilityFeeScheduleAmount) like '" + _CPTCode.Trim() + "%')";

                    if (cmbSpeciality.SelectedIndex > 0)
                    {
                        _sqlRetrieveQuery += " AND sSpecialtyID = '" + cmbSpeciality.SelectedValue.ToString() + "'";
                    }
                }
                else
                {
                    _sqlRetrieveQuery = "SELECT TOP " + NoOfRecord.ToString() + " ISNULL(nFeeScheduleID, 0) AS nFeeScheduleID, ISNULL(sYear, '') AS sYear, ISNULL(sCarrierNumber, '') AS sCarrierNumber, ISNULL(sLocality, '') " +
                                      " AS sLocality, ISNULL(sHCPCS, '') AS sHCPCS, ISNULL(sModifier, '') AS sModifier, ISNULL(nNonFacilityFeeScheduleAmount, 0) " +
                                      " AS nNonFacilityFeeScheduleAmount, ISNULL(nFacilityFeeScheduleAmount, 0) AS nFacilityFeeScheduleAmount, ISNULL(nPCTCIndicator, 0) " +
                                      " AS nPCTCIndicator, ISNULL(sStatusCode, '') AS sStatusCode, ISNULL(sSpecialtyID, '') AS sSpecialtyID, ISNULL(nClinicCharges, 0) AS nClinicCharges,  " +
                                      " ISNULL(BL_FeeSchedule_DTL.nChargePercentage, 0) AS nChargePercentage, ISNULL(BL_FeeSchedule_DTL.nVariantAmount, 0) AS nVariantAmount," +
                                      " ISNULL(nLimitCharges, 0) AS nLimitCharges, ISNULL(nAllowedCharges, 0) AS nAllowedCharges, ISNULL(nClinicID, 0) AS nClinicID,ISNULL(nnonfacilityChargeAmount,0) As nnonfacilityChargeAmount,ISNULL(nfacilityChargeAmount,0) As nfacilityChargeAmount " +
                                      " FROM BL_FeeSchedule_DTL WITH(NOLOCK) WHERE BL_FeeSchedule_DTL.nFeeScheduleID= " + _StdFeeScheeduleID + " ";
                    if (cmbSpeciality.SelectedIndex > 0)
                    {
                        _sqlRetrieveQuery += " AND sSpecialtyID = '" + cmbSpeciality.SelectedValue.ToString() + "'";
                    }
                }
                oDB.Retrive_Query(_sqlRetrieveQuery, out dtTemp);

                if (dtTemp != null && dtTemp.Rows.Count > 0)
                {

                    for (int j = 0; j < dtTemp.Rows.Count; j++)
                    {
                        c1AppointmentType.Rows.Add();
                        Index = c1AppointmentType.Rows.Count - 1;

                        c1AppointmentType.SetData(Index, COL_ALLOWED_CHARGES, Convert.ToString(dtTemp.Rows[j]["nAllowedCharges"]));
                        c1AppointmentType.SetData(Index, COL_CARRIER_NUMBER, Convert.ToString(dtTemp.Rows[j]["sCarrierNumber"]));
                        c1AppointmentType.SetData(Index, COL_CLINIC_CHARGES, Convert.ToString(dtTemp.Rows[j]["nClinicCharges"]));
                        c1AppointmentType.SetData(Index, COL_FACILITY_FEESCHEDULE_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nFacilityFeeScheduleAmount"]));
                        c1AppointmentType.SetData(Index, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nNonFacilityFeeScheduleAmount"]));

                        c1AppointmentType.SetData(Index, COL_FEE_SCHEDULE_ID, Convert.ToString(dtTemp.Rows[j]["nFeeScheduleID"]));
                        c1AppointmentType.SetData(Index, COL_HCPCS, Convert.ToString(dtTemp.Rows[j]["sHCPCS"]));

                        c1AppointmentType.SetData(Index, COL_HCPCS_DESC, Convert.ToString(dtTemp.Rows[j]["sHCPCS"]));
                        c1AppointmentType.SetData(Index, COL_LIMIT_CHARGES, Convert.ToString(dtTemp.Rows[j]["nLimitCharges"]));

                        c1AppointmentType.SetData(Index, COL_LOCALITY, Convert.ToString(dtTemp.Rows[j]["sLocality"]));
                        c1AppointmentType.SetData(Index, COL_MODIFIER, Convert.ToString(dtTemp.Rows[j]["sModifier"]));
                        c1AppointmentType.SetData(Index, COL_MODIFIER_DESC, Convert.ToString(dtTemp.Rows[j]["sModifier"]));
                        c1AppointmentType.SetData(Index, COL_PCTC_INDICATOR, Convert.ToString(dtTemp.Rows[j]["nPCTCIndicator"]));
                        c1AppointmentType.SetData(Index, COL_SPECIALITY_DESC, Convert.ToString(dtTemp.Rows[j]["sSpecialtyID"]));
                        c1AppointmentType.SetData(Index, COL_SPECIALTY_ID, Convert.ToString(dtTemp.Rows[j]["sSpecialtyID"]));
                        c1AppointmentType.SetData(Index, COL_STATUS_CODE, Convert.ToString(dtTemp.Rows[j]["sStatusCode"]));
                        c1AppointmentType.SetData(Index, COL_YEAR, Convert.ToString(dtTemp.Rows[j]["sYear"]));
                        c1AppointmentType.SetData(Index, COL_CHARGES_PERCENTAGE, Convert.ToString(dtTemp.Rows[j]["nChargePercentage"]));
                        c1AppointmentType.SetData(Index, COL_VARIANT_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nVariantAmount"]));
                        c1AppointmentType.SetData(Index, COL_NON_FACILITY_CHARGE_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nnonfacilityChargeAmount"]));
                        c1AppointmentType.SetData(Index, COL_FACILITY_CHARGE_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nfacilityChargeAmount"]));
                    }

                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.SetupStandardFeeSchedule, ActivityType.View, "View Scheduled Fee", 0, _StdFeeScheeduleID, 0, ActivityOutCome.Success);
                }


            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (dtTemp != null) { dtTemp.Dispose(); dtTemp = null; }
            }
        }

        private void Fill_StandardFeeScheduleType(Int64 _StdFeeScheeduleID, string _CPTCode, string Year, string CarrierNumber, string Locality, string Specialty, string Modifier)
        {
            dgMasters.Visible = false;
            c1AppointmentType.Visible = true;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlRetrieveQuery = "";
            DataTable dtTemp = null;
          //  DataTable dtDistinctCPT = new DataTable();
            Int32 NoOfRecord = Convert.ToInt32(numCount.Value);
            try
            {
                #region "Design Grid"
                c1AppointmentType.Clear(C1.Win.C1FlexGrid.ClearFlags.All);

                c1AppointmentType.Cols.Count = COL_COUNT;
                c1AppointmentType.Rows.Count = 2;
                c1AppointmentType.Rows.Fixed = 1;



                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].DataType = typeof(System.Int64);
                c1AppointmentType.Cols[COL_YEAR].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_CARRIER_NUMBER].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_LOCALITY].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_HCPCS].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_HCPCS_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_MODIFIER].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_MODIFIER_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_SPECIALTY_ID].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].DataType = typeof(System.Decimal);

                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].DataType = typeof(System.Decimal);


                c1AppointmentType.SetData(0, COL_FEE_SCHEDULE_ID, "Fee Schedule ID");
                c1AppointmentType.SetData(0, COL_YEAR, "Year");
                c1AppointmentType.SetData(0, COL_CARRIER_NUMBER, "Carrier Number");
                c1AppointmentType.SetData(0, COL_LOCALITY, "Locality");
                c1AppointmentType.SetData(0, COL_HCPCS, "HCPCS Code");
                c1AppointmentType.SetData(0, COL_HCPCS_DESC, "HCPCS Desc");
                c1AppointmentType.SetData(0, COL_MODIFIER, "Modifier");
                c1AppointmentType.SetData(0, COL_MODIFIER_DESC, "Modifier Desc");
                c1AppointmentType.SetData(0, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, "Non Facility Amount");
                c1AppointmentType.SetData(0, COL_FACILITY_FEESCHEDULE_AMOUNT, "Facility Amount");
                c1AppointmentType.SetData(0, COL_PCTC_INDICATOR, "PCTC Indicator");
                c1AppointmentType.SetData(0, COL_STATUS_CODE, "Status Code");
                c1AppointmentType.SetData(0, COL_SPECIALTY_ID, "Specialty ID");
                c1AppointmentType.SetData(0, COL_SPECIALITY_DESC, "Specialty");
                c1AppointmentType.SetData(0, COL_CLINIC_CHARGES, "Clinic Charges");
                c1AppointmentType.SetData(0, COL_LIMIT_CHARGES, "Limit Charges");
                c1AppointmentType.SetData(0, COL_ALLOWED_CHARGES, "Allowed Charges");

                c1AppointmentType.SetData(0, COL_CHARGES_PERCENTAGE, "Charges Percentage");
                c1AppointmentType.SetData(0, COL_VARIANT_AMOUNT, "Variant Charges");

                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].Width = 100;
                c1AppointmentType.Cols[COL_YEAR].Width = 100;
                c1AppointmentType.Cols[COL_CARRIER_NUMBER].Width = 100;
                c1AppointmentType.Cols[COL_LOCALITY].Width = 100;
                c1AppointmentType.Cols[COL_HCPCS].Width = 100;
                c1AppointmentType.Cols[COL_HCPCS_DESC].Width = 0;
                c1AppointmentType.Cols[COL_MODIFIER].Width = 100;
                c1AppointmentType.Cols[COL_MODIFIER_DESC].Width = 0;
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].Width = 150;
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].Width = 100;
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].Width = 100;
                c1AppointmentType.Cols[COL_STATUS_CODE].Width = 100;
                c1AppointmentType.Cols[COL_SPECIALTY_ID].Width = 100;
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].Width = 0;
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Width = 100;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Width = 100;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Width = 100;

                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].Width = 100;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Width = 100;

                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].Visible = false;
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].Visible = false;
                c1AppointmentType.Cols[COL_MODIFIER_DESC].Visible = false;
                c1AppointmentType.Cols[COL_HCPCS_DESC].Visible = false;
                c1AppointmentType.Cols[COL_STATUS_CODE].Visible = false;
                c1AppointmentType.Cols[COL_SPECIALTY_ID].Visible = false;
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].Visible = false;
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].Visible = false;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Visible = false;

                C1.Win.C1FlexGrid.CellStyle csCurrency;// = c1AppointmentType.Styles.Add("cs_Currency");
                try
                {
                    if (c1AppointmentType.Styles.Contains("cs_Currency"))
                    {
                        csCurrency = c1AppointmentType.Styles["cs_Currency"];
                    }
                    else
                    {
                        csCurrency = c1AppointmentType.Styles.Add("cs_Currency");
                        csCurrency.DataType = typeof(System.Decimal);
                        csCurrency.Format = "c";
                        csCurrency.Font = gloGlobal.clsgloFont.gFont_SMALL_BOLD;//new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                    }

                }
                catch
                {
                    csCurrency = c1AppointmentType.Styles.Add("cs_Currency");
                    csCurrency.DataType = typeof(System.Decimal);
                    csCurrency.Format = "c";
                    csCurrency.Font = gloGlobal.clsgloFont.gFont_SMALL_BOLD;//new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                }

                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Style = csCurrency;

                if (c1AppointmentType != null && c1AppointmentType.Rows.Count > 1)
                {
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_CLINIC_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_LIMIT_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_ALLOWED_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_FACILITY_FEESCHEDULE_AMOUNT, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_VARIANT_AMOUNT, 0.00);
                }

                c1AppointmentType.Row = 1;
                c1AppointmentType.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                c1AppointmentType.AllowSorting = C1.Win.C1FlexGrid.AllowSortingEnum.SingleColumn;
                #endregion

                oDB.Connect(false);

                c1AppointmentType.Rows.Count = 1;

                //c1AppointmentType.Rows.Add();
                Int32 Index = c1AppointmentType.Rows.Count - 1;
                dtTemp = null;
                _sqlRetrieveQuery = "";

                if (_CPTCode != "")
                {
                    _sqlRetrieveQuery = "SELECT TOP " + NoOfRecord.ToString() + " ISNULL(nFeeScheduleID, 0) AS nFeeScheduleID, ISNULL(sYear, '') AS sYear, ISNULL(sCarrierNumber, '') AS sCarrierNumber, ISNULL(sLocality, '') " +
                                    " AS sLocality, ISNULL(sHCPCS, '') AS sHCPCS, ISNULL(sModifier, '') AS sModifier, ISNULL(nNonFacilityFeeScheduleAmount, 0) " +
                                    " AS nNonFacilityFeeScheduleAmount, ISNULL(nFacilityFeeScheduleAmount, 0) AS nFacilityFeeScheduleAmount, ISNULL(nPCTCIndicator, 0) " +
                                    " AS nPCTCIndicator, ISNULL(sStatusCode, '') AS sStatusCode, ISNULL(sSpecialtyID, '') AS sSpecialtyID, ISNULL(nClinicCharges, 0) AS nClinicCharges,  " +
                                     " ISNULL(BL_FeeSchedule_DTL.nChargePercentage, 0) AS nChargePercentage, ISNULL(BL_FeeSchedule_DTL.nVariantAmount, 0) AS nVariantAmount," +
                                    " ISNULL(nLimitCharges, 0) AS nLimitCharges, ISNULL(nAllowedCharges, 0) AS nAllowedCharges, ISNULL(nClinicID, 0) AS nClinicID " +
                                    " FROM BL_FeeSchedule_DTL WITH(NOLOCK) WHERE BL_FeeSchedule_DTL.nFeeScheduleID= " + _StdFeeScheeduleID + " AND BL_FeeSchedule_DTL.sHCPCS='" + _CPTCode.Replace("'", "''").Trim() + "'";

                    if (Specialty != "")
                    {
                        _sqlRetrieveQuery += " AND sSpecialtyID = '" + Specialty.Replace("'", "''") + "'";
                    }
                    if (Year != "")
                    {
                        _sqlRetrieveQuery += " AND sYear = '" + Year.Replace("'", "''") + "'";
                    }
                    if (CarrierNumber != "")
                    {
                        _sqlRetrieveQuery += " AND sCarrierNumber = '" + CarrierNumber.Replace("'", "''") + "'";
                    }
                    if (Modifier != "")
                    {
                        _sqlRetrieveQuery += " AND sModifier = '" + Modifier.Replace("'", "''") + "'";
                    }
                    if (Locality != "")
                    {
                        _sqlRetrieveQuery += " AND sLocality = '" + Locality.Replace("'", "''") + "'";
                    }

                }
                else
                {
                    _sqlRetrieveQuery = "SELECT TOP " + NoOfRecord.ToString() + " ISNULL(nFeeScheduleID, 0) AS nFeeScheduleID, ISNULL(sYear, '') AS sYear, ISNULL(sCarrierNumber, '') AS sCarrierNumber, ISNULL(sLocality, '') " +
                                      " AS sLocality, ISNULL(sHCPCS, '') AS sHCPCS, ISNULL(sModifier, '') AS sModifier, ISNULL(nNonFacilityFeeScheduleAmount, 0) " +
                                      " AS nNonFacilityFeeScheduleAmount, ISNULL(nFacilityFeeScheduleAmount, 0) AS nFacilityFeeScheduleAmount, ISNULL(nPCTCIndicator, 0) " +
                                      " AS nPCTCIndicator, ISNULL(sStatusCode, '') AS sStatusCode, ISNULL(sSpecialtyID, '') AS sSpecialtyID, ISNULL(nClinicCharges, 0) AS nClinicCharges,  " +
                                       " ISNULL(BL_FeeSchedule_DTL.nChargePercentage, 0) AS nChargePercentage, ISNULL(BL_FeeSchedule_DTL.nVariantAmount, 0) AS nVariantAmount," +
                                      " ISNULL(nLimitCharges, 0) AS nLimitCharges, ISNULL(nAllowedCharges, 0) AS nAllowedCharges, ISNULL(nClinicID, 0) AS nClinicID " +
                                      " FROM BL_FeeSchedule_DTL WITH(NOLOCK) WHERE BL_FeeSchedule_DTL.nFeeScheduleID= " + _StdFeeScheeduleID + " ";
                    if (cmbSpeciality.SelectedIndex > 0)
                    {
                        _sqlRetrieveQuery += " AND sSpecialtyID = '" + cmbSpeciality.SelectedValue.ToString() + "'";
                    }
                }
                oDB.Retrive_Query(_sqlRetrieveQuery, out dtTemp);

                if (dtTemp != null && dtTemp.Rows.Count > 0)
                {

                    for (int j = 0; j < dtTemp.Rows.Count; j++)
                    {
                        c1AppointmentType.Rows.Add();
                        Index = c1AppointmentType.Rows.Count - 1;

                        c1AppointmentType.SetData(Index, COL_ALLOWED_CHARGES, Convert.ToString(dtTemp.Rows[j]["nAllowedCharges"]));
                        c1AppointmentType.SetData(Index, COL_CARRIER_NUMBER, Convert.ToString(dtTemp.Rows[j]["sCarrierNumber"]));
                        c1AppointmentType.SetData(Index, COL_CLINIC_CHARGES, Convert.ToString(dtTemp.Rows[j]["nClinicCharges"]));
                        c1AppointmentType.SetData(Index, COL_FACILITY_FEESCHEDULE_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nFacilityFeeScheduleAmount"]));
                        c1AppointmentType.SetData(Index, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nNonFacilityFeeScheduleAmount"]));

                        c1AppointmentType.SetData(Index, COL_FEE_SCHEDULE_ID, Convert.ToString(dtTemp.Rows[j]["nFeeScheduleID"]));
                        c1AppointmentType.SetData(Index, COL_HCPCS, Convert.ToString(dtTemp.Rows[j]["sHCPCS"]));

                        c1AppointmentType.SetData(Index, COL_HCPCS_DESC, Convert.ToString(dtTemp.Rows[j]["sHCPCS"]));
                        c1AppointmentType.SetData(Index, COL_LIMIT_CHARGES, Convert.ToString(dtTemp.Rows[j]["nLimitCharges"]));

                        c1AppointmentType.SetData(Index, COL_LOCALITY, Convert.ToString(dtTemp.Rows[j]["sLocality"]));
                        c1AppointmentType.SetData(Index, COL_MODIFIER, Convert.ToString(dtTemp.Rows[j]["sModifier"]));
                        c1AppointmentType.SetData(Index, COL_MODIFIER_DESC, Convert.ToString(dtTemp.Rows[j]["sModifier"]));
                        c1AppointmentType.SetData(Index, COL_PCTC_INDICATOR, Convert.ToString(dtTemp.Rows[j]["nPCTCIndicator"]));
                        c1AppointmentType.SetData(Index, COL_SPECIALITY_DESC, Convert.ToString(dtTemp.Rows[j]["sSpecialtyID"]));
                        c1AppointmentType.SetData(Index, COL_SPECIALTY_ID, Convert.ToString(dtTemp.Rows[j]["sSpecialtyID"]));
                        c1AppointmentType.SetData(Index, COL_STATUS_CODE, Convert.ToString(dtTemp.Rows[j]["sStatusCode"]));
                        c1AppointmentType.SetData(Index, COL_YEAR, Convert.ToString(dtTemp.Rows[j]["sYear"]));
                        c1AppointmentType.SetData(Index, COL_CHARGES_PERCENTAGE, Convert.ToString(dtTemp.Rows[j]["nChargePercentage"]));
                        c1AppointmentType.SetData(Index, COL_VARIANT_AMOUNT, Convert.ToString(dtTemp.Rows[j]["nVariantAmount"]));
                    }//nChargePercentage,nVariantAmount

                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.SetupStandardFeeSchedule, ActivityType.View, "View Scheduled Fee", 0, _StdFeeScheeduleID, 0, ActivityOutCome.Success);
                }


            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (dtTemp != null) { dtTemp.Dispose(); dtTemp = null; }
            }
        }

        private void Fill_StandardFeeScheduleType_new(Int64 _StdFeeScheeduleID, string _CPTCode, string _Desc)
        {
            dgMasters.Visible = false;
            c1AppointmentType.Visible = true;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlRetrieveQuery = "";
            DataTable dtTemp = null;
            DataTable dtDistinctCPT = null;

            try
            {
                #region "Design Grid"
                c1AppointmentType.Clear(C1.Win.C1FlexGrid.ClearFlags.All);

                c1AppointmentType.Cols.Count = COL_COUNT;
                c1AppointmentType.Rows.Count = 2;
                c1AppointmentType.Rows.Fixed = 1;



                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].DataType = typeof(System.Int64);
                c1AppointmentType.Cols[COL_YEAR].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_CARRIER_NUMBER].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_LOCALITY].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_HCPCS].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_HCPCS_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_MODIFIER].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_MODIFIER_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_SPECIALTY_ID].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].DataType = typeof(System.String);
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].DataType = typeof(System.Decimal);

                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].DataType = typeof(System.Decimal);
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].DataType = typeof(System.Decimal);


                c1AppointmentType.SetData(0, COL_FEE_SCHEDULE_ID, "Fee Schedule ID");
                c1AppointmentType.SetData(0, COL_YEAR, "Year");
                c1AppointmentType.SetData(0, COL_CARRIER_NUMBER, "Carrier Number");
                c1AppointmentType.SetData(0, COL_LOCALITY, "Locality");
                c1AppointmentType.SetData(0, COL_HCPCS, "HCPCS Code");
                c1AppointmentType.SetData(0, COL_HCPCS_DESC, "HCPCS Desc");
                c1AppointmentType.SetData(0, COL_MODIFIER, "Modifier");
                c1AppointmentType.SetData(0, COL_MODIFIER_DESC, "Modifier Desc");
                c1AppointmentType.SetData(0, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, "Non Facility Amount");
                c1AppointmentType.SetData(0, COL_FACILITY_FEESCHEDULE_AMOUNT, "Facility Amount");
                c1AppointmentType.SetData(0, COL_PCTC_INDICATOR, "PCTC Indicator");
                c1AppointmentType.SetData(0, COL_STATUS_CODE, "Status Code");
                c1AppointmentType.SetData(0, COL_SPECIALTY_ID, "Specialty ID");
                c1AppointmentType.SetData(0, COL_SPECIALITY_DESC, "Specialty");
                c1AppointmentType.SetData(0, COL_CLINIC_CHARGES, "Clinic Charges");
                c1AppointmentType.SetData(0, COL_LIMIT_CHARGES, "Limit Charges");
                c1AppointmentType.SetData(0, COL_ALLOWED_CHARGES, "Allowed Charges");

                c1AppointmentType.SetData(0, COL_CHARGES_PERCENTAGE, "Charges Percentage");
                c1AppointmentType.SetData(0, COL_VARIANT_AMOUNT, "Variant Charges");

                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].Width = 100;
                c1AppointmentType.Cols[COL_YEAR].Width = 100;
                c1AppointmentType.Cols[COL_CARRIER_NUMBER].Width = 100;
                c1AppointmentType.Cols[COL_LOCALITY].Width = 100;
                c1AppointmentType.Cols[COL_HCPCS].Width = 100;
                c1AppointmentType.Cols[COL_HCPCS_DESC].Width = 0;
                c1AppointmentType.Cols[COL_MODIFIER].Width = 100;
                c1AppointmentType.Cols[COL_MODIFIER_DESC].Width = 0;
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].Width = 150;
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].Width = 100;
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].Width = 100;
                c1AppointmentType.Cols[COL_STATUS_CODE].Width = 100;
                c1AppointmentType.Cols[COL_SPECIALTY_ID].Width = 100;
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].Width = 0;
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Width = 100;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Width = 100;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Width = 100;

                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].Width = 100;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Width = 100;

                c1AppointmentType.Cols[COL_FEE_SCHEDULE_ID].Visible = false;
                c1AppointmentType.Cols[COL_PCTC_INDICATOR].Visible = false;
                c1AppointmentType.Cols[COL_MODIFIER_DESC].Visible = false;
                c1AppointmentType.Cols[COL_HCPCS_DESC].Visible = false;
                c1AppointmentType.Cols[COL_STATUS_CODE].Visible = false;
                c1AppointmentType.Cols[COL_SPECIALTY_ID].Visible = false;
                c1AppointmentType.Cols[COL_SPECIALITY_DESC].Visible = false;
                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Visible = false;
                c1AppointmentType.Cols[COL_CHARGES_PERCENTAGE].Visible = false;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Visible = false;

                C1.Win.C1FlexGrid.CellStyle csCurrency;// = c1AppointmentType.Styles.Add("cs_Currency");
                try
                {
                    if (c1AppointmentType.Styles.Contains("cs_Currency"))
                    {
                        csCurrency = c1AppointmentType.Styles["cs_Currency"];
                    }
                    else
                    {
                        csCurrency = c1AppointmentType.Styles.Add("cs_Currency");
                        csCurrency.DataType = typeof(System.Decimal);
                        csCurrency.Format = "c";
                        csCurrency.Font = gloGlobal.clsgloFont.gFont_SMALL_BOLD;//new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                    }

                }
                catch
                {
                    csCurrency = c1AppointmentType.Styles.Add("cs_Currency");
                    csCurrency.DataType = typeof(System.Decimal);
                    csCurrency.Format = "c";
                    csCurrency.Font = gloGlobal.clsgloFont.gFont_SMALL_BOLD;//new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                }

                c1AppointmentType.Cols[COL_CLINIC_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_LIMIT_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_ALLOWED_CHARGES].Style = csCurrency;
                c1AppointmentType.Cols[COL_NON_FACILITY_FEESCHEDULE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_FACILITY_FEESCHEDULE_AMOUNT].Style = csCurrency;
                c1AppointmentType.Cols[COL_VARIANT_AMOUNT].Style = csCurrency;

                if (c1AppointmentType != null && c1AppointmentType.Rows.Count > 1)
                {
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_CLINIC_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_LIMIT_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_ALLOWED_CHARGES, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_NON_FACILITY_FEESCHEDULE_AMOUNT, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_FACILITY_FEESCHEDULE_AMOUNT, 0.00);
                    c1AppointmentType.SetData(c1AppointmentType.Rows.Count - 1, COL_VARIANT_AMOUNT, 0.00);
                }

                c1AppointmentType.Row = 1;
                c1AppointmentType.SelectionMode = C1.Win.C1FlexGrid.SelectionModeEnum.Row;
                c1AppointmentType.AllowSorting = C1.Win.C1FlexGrid.AllowSortingEnum.SingleColumn;
                #endregion

                oDB.Connect(false);

                if (_CPTCode.Trim() == "")
                {
                    _sqlRetrieveQuery = " SELECT  DISTINCT TOP 150 ISNULL(HCPCSMOD,'')AS HCPCSMOD, ISNULL(SPEC,'') AS SPEC " +
                        "  FROM BL_StandardFeeSchedule WITH(NOLOCK)  WHERE nStdFeeScheduleId = " + _StdFeeScheeduleID + " ";

                    if (cmbSpeciality.SelectedValue != null && cmbSpeciality.SelectedValue.ToString() != "0")
                    {
                        _sqlRetrieveQuery += " AND SPEC = '" + cmbSpeciality.SelectedValue.ToString() + "'";
                    }
                }
                else
                {
                    _sqlRetrieveQuery = " SELECT  DISTINCT TOP 150 ISNULL(HCPCSMOD,'')AS HCPCSMOD, ISNULL(SPEC,'') AS SPEC " +
                                        "  FROM BL_StandardFeeSchedule WITH(NOLOCK)  WHERE nStdFeeScheduleId = " + _StdFeeScheeduleID + "   AND HCPCSMOD LIKE '" + _CPTCode.Trim() + "%' ";

                    if (cmbSpeciality.SelectedValue.ToString() != "0")
                    {
                        _sqlRetrieveQuery += " AND SPEC = '" + cmbSpeciality.SelectedValue.ToString() + "'";
                    }
                }
                oDB.Retrive_Query(_sqlRetrieveQuery, out dtDistinctCPT);

                c1AppointmentType.Rows.Count = 1;
                if (dtDistinctCPT != null && dtDistinctCPT.Rows.Count > 0)
                {
                    for (int i = 0; i < (dtDistinctCPT.Rows.Count); i++)
                    {
                        //c1AppointmentType.Rows.Add();
                        //Int32 Index = c1AppointmentType.Rows.Count - 1;
                        dtTemp = null;
                        _sqlRetrieveQuery = "";

                        _sqlRetrieveQuery = " SELECT  ISNULL(BL_StandardFeeSchedule.SPEC,'') AS SPEC,ISNULL(BL_StandardFeeSchedule.HCPCS,'') AS HCPCS, " +
                                " ISNULL(BL_StandardFeeSchedule.MOD,'') AS MOD,ISNULL(BL_StandardFeeSchedule.FACILITY,'') AS FACILITY, ISNULL(BL_StandardFeeSchedule.ALCHG,0) AS ALCHG, " +
                                " ISNULL(BL_StandardFeeSchedule.SERVICES,0) AS SERVICES,ISNULL(BL_StandardFeeSchedule.sStdFeeScheduleType,'') AS  sStdFeeScheduleType, " +
                                " ISNULL(CPT_MST.sDescription,'') AS CPTDesc   FROM BL_StandardFeeSchedule WITH(NOLOCK) LEFT OUTER JOIN  CPT_MST WITH(NOLOCK) ON BL_StandardFeeSchedule.HCPCSMOD =CPT_MST.sCPTCode " +
                                " WHERE BL_StandardFeeSchedule.nStdFeeScheduleId = " + _StdFeeScheeduleID + " AND BL_StandardFeeSchedule.HCPCSMOD ='" + Convert.ToString(dtDistinctCPT.Rows[i]["HCPCSMOD"]) + "' AND BL_StandardFeeSchedule.SPEC ='" + Convert.ToString(dtDistinctCPT.Rows[i]["SPEC"]) + "'  ";

                        if (_Desc.Trim() != "")
                        {
                            _sqlRetrieveQuery += " AND CPT_MST.sDescription LIKE '" + _Desc + "%' ";
                        }
                        {
                            oDB.Retrive_Query(_sqlRetrieveQuery, out dtTemp);

                            if (dtTemp != null && dtTemp.Rows.Count > 0)
                            {
                                //txt_StdFeeScheduleType.Text = Convert.ToString(dtTemp.Rows[0]["sStdFeeScheduleType"]);

                                c1AppointmentType.Rows.Add();
                                Int32 Index = c1AppointmentType.Rows.Count - 1;

                                for (int j = 0; j < dtTemp.Rows.Count; j++)
                                {



                                }
                            }
                            if (dtTemp != null)
                            {
                                dtTemp.Dispose();
                                dtTemp = null;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {

                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);

            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (dtTemp != null) { dtTemp.Dispose(); dtTemp = null; }
                if (dtDistinctCPT != null) { dtDistinctCPT.Dispose(); dtDistinctCPT = null; }
            }
        }

        private void FillStandardShcheduleNames(Int64 ID)
        {

            frmSetupStdFeeSchedule OfrmstdFeeSchedule = new frmSetupStdFeeSchedule(_databaseconnectionstring);
            DataTable dt = null;
            //TreeNode oNode = new TreeNode();
            try
            {

                dt = OfrmstdFeeSchedule.GetAllStdFeeSchedules();
                if (dt != null)
                {
                    if (dt != null)
                        _dv = dt.DefaultView;
                    else
                        return;

                    dgMasters.DataSource = null;
                    dgMasters.DataSource = _dv;

                    //Give Header Names for the grid
                    dgMasters.Columns[0].HeaderText = "Fee Scheduled ID";
                    dgMasters.Columns[1].HeaderText = "Fee Scheduled Type";
                    dgMasters.Columns[2].HeaderText = "Fee Schedule Name";
                    dgMasters.Columns[3].HeaderText = "Start Date";
                    dgMasters.Columns[4].HeaderText = "End Date";
                    //  dgMasters.Columns[4].HeaderText = "Record Type";

                    //Set visible true or false to show the columns on the form
                    dgMasters.Columns[0].Visible = false;
                    dgMasters.Columns[1].Visible = false;
                    dgMasters.Columns[2].Visible = true;
                    dgMasters.Columns[3].Visible = true;
                    dgMasters.Columns[4].Visible = true;
                    //  dgMasters.Columns[4].Visible = true;
                    dgMasters.Columns[3].SortMode = DataGridViewColumnSortMode.NotSortable;
                    dgMasters.Columns[4].SortMode = DataGridViewColumnSortMode.NotSortable;


                    //Set width for columns of grid
                    int nWidth = dgMasters.Width - 5;
                    dgMasters.Columns[0].Width = 0;
                    dgMasters.Columns[1].Width = 0;
                    dgMasters.Columns[2].Width = (int)(nWidth * 0.65);
                    dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                    dgMasters.Columns[4].Width = (int)(nWidth * 0.10);
                    //  dgMasters.Columns[4].Width = (int)(nWidth * 0.10);              


                    dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                    dgMasters.AutoResizeRows();

                    if (dgMasters.DataSource != null && ID != 0)
                    {
                        for (int i = 0; i < dgMasters.Rows.Count; i++)
                        {
                            if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                            {
                                dgMasters.Rows[i].Selected = true;
                                break;
                            }
                        }
                    }

                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_ADD.Visible = true;
                    }
                }

                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.StandardFeeSchedule, ActivityType.View, "View Standard Fee Schedule", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.StandardFeeSchedule, gloAuditTrail.ActivityType.View, "View Standard Fee Schedule", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                OfrmstdFeeSchedule.Dispose();
                OfrmstdFeeSchedule = null;
            }
        }

        private void Fill_StandardFeeScheduleAllocation(Int64 ID)
        {

            DataTable dt = null;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                oDB.Connect(false);

                string _sqlQuery = "SELECT TOP 500 ISNULL(BL_FeeSchedule_MST.nFeeScheduleID,0) AS nScheduleID, ISNULL(BL_FeeSchedule_MST.sFeeScheduleName,'') AS sFeeScheduleName, "
                + " ISNULL(BL_FeeSchedule_Allocation.nFromDate,0) AS  nFromDate,ISNULL(BL_FeeSchedule_Allocation.nToDate,0) AS nToDate"
                + " FROM  BL_FeeSchedule_Allocation WITH(NOLOCK) INNER JOIN BL_FeeSchedule_MST WITH(NOLOCK) ON BL_FeeSchedule_Allocation.nFeeScheduleID = BL_FeeSchedule_MST.nFeeScheduleID"
                + " WHERE BL_FeeSchedule_Allocation.nClinicID = " + _ClinicID;

                oDB.Retrive_Query(_sqlQuery, out dt);
                oDB.Disconnect();

                //Get dataview from datatable for showing data in dgMasters(grid)
                DataTable oBindTable = new DataTable();
                oBindTable.Columns.Add("nScheduleID");
                oBindTable.Columns.Add("sFeeScheduleName");
                oBindTable.Columns.Add("dtFromDate");
                oBindTable.Columns.Add("dtToDate");

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        DataRow oRow = oBindTable.NewRow();
                        oRow["nScheduleID"] = dt.Rows[i]["nScheduleID"].ToString();
                        oRow["sFeeScheduleName"] = dt.Rows[i]["sFeeScheduleName"].ToString();
                        oRow["dtFromDate"] = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dt.Rows[i]["nFromDate"])).ToString("MM/dd/yyyy");
                        oRow["dtToDate"] = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dt.Rows[i]["nToDate"])).ToString("MM/dd/yyyy");
                        oBindTable.Rows.Add(oRow);
                    }
                }


                if (oBindTable != null)
                    _dv = oBindTable.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Fee Schedule Name";
                dgMasters.Columns[2].HeaderText = "From Date";
                dgMasters.Columns[3].HeaderText = "Till Date";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.50);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.20);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsuranceType, ActivityType.View, "View Plan Type", ActivityOutCome.Success);
                //Added Rahul on 20101012
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.InsuranceType, gloAuditTrail.ActivityType.View, "View Plan Type", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                //

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Standard FeeSchedule Allocation : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
        }

        /// <summary>
        /// Revised function for loading invalid ICD Codes
        /// </summary>
        /// <param name="ID"></param>
        public void LoadInvalidICD(gloICD.CodeRevision ICDRevision)
        {
            

            ICD9 oICD9 = new ICD9(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                dt = oICD9.GetInvalidICD9(ICDRevision);



                if (dt != null)
                {
                    dt.Columns.Add("Select", typeof(System.Boolean));
                    dt.AcceptChanges();
                    _dv = dt.DefaultView;
                }
                else
                {
                    return;
                }
                dgMasters.DataSource = _dv;

                dgMasters.Columns[0].HeaderText = "Code";
                dgMasters.Columns[1].HeaderText = "Description";
                dgMasters.Columns[2].HeaderText = "Select";

                dgMasters.Columns[0].Visible = true;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;

                dgMasters.Columns[2].DisplayIndex = 0;
                dgMasters.Columns[2].ReadOnly = false;
                dgMasters.Columns[0].ReadOnly = true;
                dgMasters.Columns[1].ReadOnly = true;
                
                int nWidth = dgMasters.Width;

                dgMasters.Columns[0].Width = (int)(nWidth * 0.3 - 10);
                dgMasters.Columns[1].Width = (int)(nWidth * 0.6 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.1 - 10);

                //if (dgMasters.DataSource != null && ID != 0)
                //{
                //    for (int i = 0; i < dgMasters.Rows.Count; i++)
                //    {
                //        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                //        {
                //            dgMasters.Rows[i].Selected = true;
                //            break;
                //        }
                //    }
                //}
               
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = false;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = false;
                }
              
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.ICD9, gloAuditTrail.ActivityType.View, "View ICD", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
                
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Invalid ICD9 : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oICD9 != null) { oICD9.Dispose(); oICD9 = null; }

            }
        }

        public void Fill_ReferralCPTs(Int64 ID)
        {
            gloReferralCPT ogloReferralCPT = new gloReferralCPT(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = ogloReferralCPT.GetReferralCPTs();

                //dt.Columns.Add("Select", typeof(System.Boolean));
                //dt.AcceptChanges();
                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid

                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Referral Required";
                dgMasters.Columns[4].HeaderText = "Clinic ID";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;

                dgMasters.Columns[1].DisplayIndex = 0;
                dgMasters.Columns[2].ReadOnly = true;
                dgMasters.Columns[0].ReadOnly = true;
                dgMasters.Columns[1].ReadOnly = true;
                //Set width for columns of grid
                int nWidth = dgMasters.Width;

                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.3 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[4].Width = 0;

                dgMasters.Columns[0].ReadOnly = true;
                dgMasters.Columns[1].ReadOnly = true;
                dgMasters.Columns[2].ReadOnly = true;
                dgMasters.Columns[3].ReadOnly = true;
                dgMasters.Columns[4].ReadOnly = true;


                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Referral CPT : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                ogloReferralCPT.Dispose();
            }
        }

        public void Fill_ClaimScrubber(Int64 ID)
        {
            gloAntiScrubber ogloAntiScrubber = new gloAntiScrubber(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                //Get data into datatable
                dt = ogloAntiScrubber.GetAntiScrubberData();

                //dt.Columns.Add("Select", typeof(System.Boolean));
                //dt.AcceptChanges();
                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid

                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "TOS";
                dgMasters.Columns[2].HeaderText = "POS";
                dgMasters.Columns[3].HeaderText = "CPT Code";
                dgMasters.Columns[4].HeaderText = "CPT Desc";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = false;
                dgMasters.Columns[6].Visible = false;

                dgMasters.Columns[0].DisplayIndex = 0;
                dgMasters.Columns[1].DisplayIndex = 1;
                dgMasters.Columns[2].DisplayIndex = 2;
                dgMasters.Columns[3].DisplayIndex = 3;
                dgMasters.Columns[4].DisplayIndex = 4;
                dgMasters.Columns[5].DisplayIndex = 5;
                dgMasters.Columns[6].DisplayIndex = 6;
                //dgMasters.Columns[2].ReadOnly = true;
                //dgMasters.Columns[0].ReadOnly = true;
                //dgMasters.Columns[1].ReadOnly = true;
                //Set width for columns of grid
                int nWidth = dgMasters.Width;

                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.1 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.1 - 10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.2 - 10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[5].Width = 0;
                dgMasters.Columns[6].Width = 0;

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Billing Book - Claim Scrubber : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                ogloAntiScrubber.Dispose();
            }
        }

        private void DeleteFeeScheduleAllocation(Int64 ID)
        {
//            DataTable dt = null;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Int64 _result = 0;
            try
            {
                oDB.Connect(false);

                string _sqlQuery = "DELETE FROM BL_FeeSchedule_Allocation "
                + " WHERE BL_FeeSchedule_Allocation.nFeeScheduleID=" + ID + " AND BL_FeeSchedule_Allocation.nClinicID = " + _ClinicID;

                _result = oDB.Execute_Query(_sqlQuery);
                oDB.Disconnect();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Dispose();
                    oDB = null;
                }
            }
        }

        //Added By MaheshB

        public void Fill_CloseDayTray()
        {
            DataTable dt = null;
            try
            {
                //Get data into datatable
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                if (IsAdmin() != true)
                {
                    //_sqlRetrieveQuery = "Select nCloseDayTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default' end as Default1,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate,Case when isnull(bIsClosed,0)=0 Then 'Active' else 'Closed' end from BL_CloseDayTray,User_MST.sLoginName as User1 inner join User_MST ON BL_CloseDayTray.nUserID=User_MST.nUserID where nUserID='" + _UserID + "'";
                    //Change made by Rahul Patel on 14-09-2010 for showing "active" status.
                    _sqlRetrieveQuery = "Select nCloseDayTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default' end as Default1,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate,Case when isnull(bIsActive,0)=1 Then 'Active' else 'InActive' end ,User_MST.sLoginName as [User] from BL_CloseDayTray WITH(NOLOCK) inner join User_MST WITH(NOLOCK) ON BL_CloseDayTray.nUserID=User_MST.nUserID where User_MST.nUserID='" + _UserID + "'";
                }
                else
                {
                    //Change made by Rahul Patel on 14-09-2010 for showing "active" status.
                    _sqlRetrieveQuery = "Select nCloseDayTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default' end as Default1,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate,Case when isnull(bIsActive,0)=1 Then 'Active' else 'InActive' end,User_MST.sLoginName as [User] from BL_CloseDayTray WITH(NOLOCK) inner join User_MST WITH(NOLOCK) ON BL_CloseDayTray.nUserID=User_MST.nUserID";
                }
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Disconnect();
                oDB.Dispose();
                //Get dataview from datatable for showing data in dgMasters(grid)
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                //dgMasters.Rows.Clear();
                //dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "nCloseDayTrayID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Number of Days";
                dgMasters.Columns[4].HeaderText = "Default";

                //Added By Pramod Nair For Displayig Dates
                dgMasters.Columns[5].HeaderText = "User";
                dgMasters.Columns[6].HeaderText = "End Date";
                dgMasters.Columns[7].HeaderText = "Status";

                //dgMasters.Columns[8].HeaderText = "User";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = false;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = true;

                //Added By Pramod Nair For Displayig Dates
                dgMasters.Columns[5].Visible = false;
                dgMasters.Columns[6].Visible = false;
                dgMasters.Columns[7].Visible = true;
                dgMasters.Columns[8].Visible = true;




                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = 0;// (int)(nWidth * 0.30);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.50);
                dgMasters.Columns[3].Width = 0;
                dgMasters.Columns[4].Width = (int)(nWidth * 0.15);
                //Added By Pramod Nair For Displayig Dates
                dgMasters.Columns[5].Width = 0;
                dgMasters.Columns[6].Width = 0;
                dgMasters.Columns[7].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[8].Width = (int)(nWidth * 0.25);
                //Added By Rahul Patel
                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End 

                //if (dgMasters.DataSource != null && ID != 0)
                //{
                //    for (int i = 0; i < dgMasters.Rows.Count; i++)
                //    {
                //        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                //        {
                //            dgMasters.Rows[i].Selected = true;
                //            break;
                //        }
                //    }
                //}
                //Set toolstrip buttons enability  

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// Ex)
            {
                //Ex.ToString();
                //Ex = null;
            }
        }

        public bool IsAdmin()
        {
            string _SqlQuery = String.Empty;
            //DataTable dt = new DataTable();
            gloDatabaseLayer.DBLayer ODB = null;
            DataTable dt = null;
            bool _IsAdmin = false;
            try
            {
                _SqlQuery = "Select nUserID from User_MST WITH(NOLOCK) where nUserID='" + _UserID + "' and nClinicID='" + _ClinicID + "' and nAdministrator=1";
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                //dt = new DataTable();
                ODB.Connect(false);
                ODB.Retrive_Query(_SqlQuery, out dt);
                if (dt != null)
                {
                    if (Convert.ToInt32(dt.Rows.Count) > 0 && dt.Rows[0]["nUserID"] != null)
                    {
                        _IsAdmin = true;
                    }
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ODB != null)
                {
                    ODB.Disconnect();
                    ODB.Dispose();
                    ODB = null;
                }
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
            return _IsAdmin;
        }

        //Added By Pramod Nair For Charges Tray
        private void Fill_ChargesTray()
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                if (IsAdmin() != true)
                {
                    //    _sqlRetrieveQuery = "Select nChargeTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default'  end as Default1, " +
                    //                          " CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate ," +
                    //                          " Case when isnull(bIsClosed,0)=0 Then 'Active' else 'Closed' end from BL_ChargesTray,User_MST.sLoginName as User1 inner join User_MST ON BL_ChargesTray.nUserID=User_MST.nUserID where nUserID='" + _UserID + "'";

                    _sqlRetrieveQuery = "Select nChargeTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default'  end as Default1, " +
                                           " CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate ," +
                                           " Case when isnull(bIsActive,0)=1 Then '' else 'InActive' end ,User_MST.sLoginName as [User] from BL_ChargesTray WITH(NOLOCK) inner join User_MST WITH(NOLOCK) ON BL_ChargesTray.nUserID=User_MST.nUserID where User_MST.nUserID='" + _UserID + "'";
                }
                else
                {
                    _sqlRetrieveQuery = "Select nChargeTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default'  end as Default1, " +
                                           " CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate ," +
                                           " Case when isnull(bIsActive,0)=1 Then 'Active' else 'InActive' end,User_MST.sLoginName as [User] from BL_ChargesTray WITH(NOLOCK) inner join User_MST WITH(NOLOCK) ON BL_ChargesTray.nUserID=User_MST.nUserID";
                }
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "nCloseDayTrayID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Number of Days";
                dgMasters.Columns[4].HeaderText = "Default";
                //dgMasters.Columns[5].HeaderText = "User";
                dgMasters.Columns[5].HeaderText = "Start Date";
                dgMasters.Columns[6].HeaderText = "End Date";
                dgMasters.Columns[7].HeaderText = "Status";
                dgMasters.Columns[8].HeaderText = "User";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = false;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = false;
                dgMasters.Columns[6].Visible = false;
                dgMasters.Columns[7].Visible = true;
                dgMasters.Columns[8].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = 0;// (int)(nWidth * 0.30);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.50);
                dgMasters.Columns[3].Width = 0;
                dgMasters.Columns[4].Width = (int)(nWidth * 0.15);
                //dgMasters.Columns[5].Width = (int)(nWidth * 0.25);
                dgMasters.Columns[5].Width = 0;
                dgMasters.Columns[6].Width = 0;
                dgMasters.Columns[7].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[8].Width = (int)(nWidth * 0.25);

                //Added By Rahul Patel
                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End 
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        //Added By Mukesh Patel for Statement Criteria
        private void Fill_StatementCriteria(Int64 ID)
        {

            DataTable dt = null;
            try
            {

           //     gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
             //   oDB.Connect(false);

                PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);

                dt = oPatinetStatementCriteria.GetPatinetStatementCriterias();
                oPatinetStatementCriteria.Dispose();
                oPatinetStatementCriteria = null;
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Statement Criteria ID";
                dgMasters.Columns[1].HeaderText = "Patient Statement Criteria";
                dgMasters.Columns[2].HeaderText = "nClinicId";
                dgMasters.Columns[3].HeaderText = "Default";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = false;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;



                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.60);
                dgMasters.Columns[2].Width = 0;

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = false;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }
        private void Fill_Qualifier()
        {


            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "select nQualifierMstID,sCode,sDescription,nRecordType,case ISNULL(nRecordType,0)  when 1 then 'System' when 2 then 'Default' when 3 then 'User' end  as nRecordType from  BL_IDQualifier WITH(NOLOCK) order by sDescription";


                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;



                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Qualifier  Code";
                dgMasters.Columns[2].HeaderText = "Qualifier Description";
                dgMasters.Columns[4].HeaderText = "Record Type";



                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = true;

                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.65);
                dgMasters.Columns[3].Width = 0;
                dgMasters.Columns[4].Width = (int)(nWidth * 0.15);


                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End



                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_Qualifier_Association()
        {



            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "select nQualifierID,sCode,sAdditionalDescription,nQualifierMstID from  BL_IDQualifier_Association WITH(NOLOCK) where bIsSystem !=1 ";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "ID";
                dgMasters.Columns[1].HeaderText = "Qualifier  Code";
                dgMasters.Columns[2].HeaderText = "Qualifier Description";


                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;


                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.75);

                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }

        }

        private void Fill_StatementDisplaySettings(Int64 ID)
        {
            DataTable dt = null;
            string sFilter = string.Empty;
            try
            {
                bool _isBusinessCenterEnable = false;
                
                _isBusinessCenterEnable = gloGlobal.gloPMGlobal.GetBusinessCenterSettings("BusinessCenter_Statment");
               
                //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                //oDB.Connect(false);

                PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);

                //dt = oPatinetStatementCriteria.GetPatinetStatementCriterias();
                dt = oPatinetStatementCriteria.GetPatinetStatementDisplaySettings();
                oPatinetStatementCriteria.Dispose();
                oPatinetStatementCriteria = null;
                if (dt != null)
                {
                    _dv = dt.DefaultView;
                    //if (_isBusinessCenterEnable)
                    //    sFilter = "(Type = 'Display'";
                    //else
                    //    sFilter = "(Default = 'Default' AND Type = 'Display'";
                    sFilter = "(Type = 'Display'";
                    _dv.RowFilter = sFilter + " )";
                }
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Statement Criteria ID";
                dgMasters.Columns[1].HeaderText = "Patient Statement Display Setting";
                dgMasters.Columns[2].HeaderText = "nClinicId";
                dgMasters.Columns[3].HeaderText = "Default";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = false;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;
                dgMasters.Columns[5].Visible = false;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.60);
                dgMasters.Columns[2].Width = 0;
                dgMasters.Columns[3].Width = (int)(nWidth * 0.20);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    if (_isBusinessCenterEnable)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_ADD.Visible = true;
                    }
                    else
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_ADD.Visible = false;
                    }

                }
                if (dgMasters.RowCount == 0)
                {
                    if (_isBusinessCenterEnable)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_ADD.Visible = true;
                    }
                    else
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_ADD.Visible = true;
                    }

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_StatementFilterSettings(Int64 ID)
        {
            DataTable dt = null;
            try
            {

                //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                //oDB.Connect(false);

                PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);

                //dt = oPatinetStatementCriteria.GetPatinetStatementCriterias();
                dt = oPatinetStatementCriteria.GetPatinetStatementFilter();
                oPatinetStatementCriteria.Dispose();
                oPatinetStatementCriteria = null;
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Statement Criteria ID";
                dgMasters.Columns[1].HeaderText = "Patient Statement Filter Setting";
                dgMasters.Columns[2].HeaderText = "nClinicId";
                dgMasters.Columns[3].HeaderText = "Default";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = false;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;



                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.60);
                dgMasters.Columns[2].Width = 0;

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    //tsb_Delete.Enabled = true;
                    tsb_Modify.Visible = false;
                    //tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    //tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }
        private void Fill_OccurrenceCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "select nOccurrenceID, sOccurrenceCode, sDescription, " +
                                    " Case IsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive, " +
                                   " Case IsSystem when 1 THEN 'System' ELSE 'User' END as IsSystem " +
                                   "  from  UB_OccurrenceCodes WITH(NOLOCK)  ";



                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;



                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Occurrence ID";
                dgMasters.Columns[1].HeaderText = "Occurrence Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                dgMasters.Columns[4].HeaderText = "Record Type";



                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;




                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.16);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.60);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);


                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End

                if (dgMasters.DataSource != null)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_ConditionCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "select nConditionID, sConditionCode, sDescription, " +
                                    " Case IsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive, " +
                                   " Case IsSystem when 1 THEN 'System' ELSE 'User' END as IsSystem " +
                                   "  from  UB_ConditionCodes WITH(NOLOCK)  ";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Condition ID";
                dgMasters.Columns[1].HeaderText = "Condition Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                dgMasters.Columns[4].HeaderText = "Record Type";



                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.113);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.65);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);


                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End

                if (dgMasters.DataSource != null)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_OccurrenceSpanCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "select nOccurrenceSpanID, sOccurrenceSpanCode, sDescription, " +
                                    " Case IsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive, " +
                                   " Case IsSystem when 1 THEN 'System' ELSE 'User' END as IsSystem " +
                                   "  from  UB_OccurrenceSpanCodes WITH(NOLOCK)  ";


                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;



                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "OccurrenceSpan ID";
                dgMasters.Columns[1].HeaderText = "Occurrence Span Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                dgMasters.Columns[4].HeaderText = "Record Type";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;




                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.19);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.55);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);

                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End

                if (dgMasters.DataSource != null)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_ValueCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "select nValueID, sValueCode, sDescription, " +
                                    " Case IsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive, " +
                                   " Case IsSystem when 1 THEN 'System' ELSE 'User' END as IsSystem " +
                                   "  from  UB_ValueCodes WITH(NOLOCK)  ";


                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Value ID";
                dgMasters.Columns[1].HeaderText = "Value code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                dgMasters.Columns[4].HeaderText = "Record Type";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.65);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);


                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_ReportingCategory(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                _sqlRetrieveQuery = " Select nID, sCode, sDescription " +
                                   "  from  Cases_ReportingCategory WITH(NOLOCK)  where bIsblocked=0 Order by sCode ";


                //}
                //else
                //{
                //    _sqlRetrieveQuery = "Select nChargeTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default' end, " +
                //                             " CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate ," +
                //                             " Case when isnull(bIsClosed,0)=0 Then 'Active' else 'Closed' end from BL_ChargesTray";
                //}
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = " ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";

                //dgMasters.Columns[6].HeaderText = "Description";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;





                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.30);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.70);


                //Added By Rahul Patel
                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        //Added By MaheshB
        private void Fill_ReasonCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                _sqlRetrieveQuery = "select nReasonID,sGroupCode, sCode, sDescription, " +
                                   " Case bIsSystem when 1 THEN 'System' ELSE 'User' END as bIsSystem, " +
                                   " Case  bIsBlock when 1 THEN 'TRUE' ELSE 'FALSE' END  as bIsBlock , " +
                                   " isnull(nActionID,0) as nActionID from  BL_ReasonCodes_MST WITH(NOLOCK)  ";


                //}
                //else
                //{
                //    _sqlRetrieveQuery = "Select nChargeTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default' end, " +
                //                             " CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate ," +
                //                             " Case when isnull(bIsClosed,0)=0 Then 'Active' else 'Closed' end from BL_ChargesTray";
                //}
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Reason ID";
                dgMasters.Columns[1].HeaderText = "Group Code";
                dgMasters.Columns[2].HeaderText = "Reason Code";
                dgMasters.Columns[3].HeaderText = "Description";
                dgMasters.Columns[4].HeaderText = "Record Type";
                dgMasters.Columns[5].HeaderText = "IsBlock";
                dgMasters.Columns[6].HeaderText = "ActionID";
                //dgMasters.Columns[6].HeaderText = "Description";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = false;
                dgMasters.Columns[6].Visible = false;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[3].Width = (int)(nWidth);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);

                //Added By Rahul Patel
                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_ClaimRules(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "SELECT nRuleID, sRuleName ,sErrorMessage ,  CASE WHEN ISNULL(nRuleType, 0) = 1 THEN 'Error' WHEN ISNULL(nRuleType, 0) = 2 THEN 'Warning' ELSE 'Information' END AS [RuleType],CASE WHEN ISNULL(bIsActive,0)=0 THEN 'De-activated' ELSE 'Activated' END  AS [status] FROM dbo.ClaimRule_Master WITH ( NOLOCK ) ORDER BY bIsActive DESC ,sRuleName";
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                dgMasters.Columns[0].HeaderText = "RuleID";
                dgMasters.Columns[1].HeaderText = "Name";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "RuleType";
                dgMasters.Columns[4].HeaderText = "Status";
                


                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
               
                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.60);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);

                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.False;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                    tsbCopyAs.Visible = true;
                    tsb_Export.Visible = true;
                    tsb_Verify.Visible = true;//Hemant
                    tsb_TestAllRules.Visible = true;

                    if (gloGlobal.gloPMGlobal.IsCommunicationServiceEnable && Uri.IsWellFormedUriString(gloGlobal.gloPMGlobal.sCommunicationServiceURL, UriKind.Absolute) == true)
                    {
                        tsb_Publish.Visible = true;
                    }
                    Int64 _RuleID = 0;
                    if (dgMasters.SelectedRows != null && dgMasters.SelectedRows.Count > 0)
                    {
                        _RuleID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                        if (IsClaimRulesActive(_RuleID))
                        {
                            tsb_Activate.Visible = false;
                            tsb_Deactivate.Visible = true;
                           
                        }
                        else
                        {
                            tsb_Activate.Visible = true;
                            tsb_Deactivate.Visible = false;
                            
                        }
                    }
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;                   
                    tsb_Activate.Visible = false;
                    tsb_Deactivate.Visible = false;                    
                    tsb_Export.Visible = false;
                    tsb_Verify.Visible = false;//Hemant
                    tsbCopyAs.Visible = false;
                    tsb_Verify.Visible = false;
                    tsb_TestAllRules.Visible = false;
                    tsb_Publish.Visible = false;
                }
                tsb_Import.Visible = true;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, true);
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
               
            }
        }

        private Boolean IsClaimRulesActive(Int64 ID)
        {

            DataTable dt = null;
            Boolean result = false;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "SELECT isnull(bIsActive,0) As bIsActive   FROM dbo.ClaimRule_Master WITH ( NOLOCK ) WHERE nRuleID=" + ID;
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null )
                    result = Convert.ToBoolean(dt.Rows[0]["bIsActive"]);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, true);
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                result= false;
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
            return result;
        }
        private void ActiveDeactiveFollowUp(Int64 nFollowUpID, int nStatus, CollectionEnums.FollowUpType nType)
        {
            DataTable dt=null;
            Boolean result=false;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetriveQuery = String.Empty;
                _sqlRetriveQuery = "Update dbo.CL_FollowUpAction_Mst Set bIsActive=" + nStatus + " where nFollowUpActionType=" + nType.GetHashCode()+ " and nFollowUpActionID=" + nFollowUpID;
                if (_sqlRetriveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetriveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                if (dt != null && dt.Rows.Count > 0)

                    result = Convert.ToBoolean(dt.Rows[0]["bIsActive"]);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, true);
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                result = false;
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
         
        }
        
        
    
        

        private Boolean IsScheduleActionsActive(Int64 ID)
        {

            DataTable dt = null;
            Boolean result = false;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "SELECT isnull(bIsActive,0) As bIsActive   FROM dbo.CL_FollowUpAction_Mst WITH ( NOLOCK ) WHERE nFollowUpActionID=" + ID;
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null && dt.Rows.Count > 0)
{  result = Convert.ToBoolean(dt.Rows[0]["bIsActive"]);}

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, true);
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                result = false;
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
            return result;
        }
        private Boolean IsClaimRuleTriggered(Int64 ID)
        {

            DataTable dt = null;
            Boolean result = false;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "SELECT TOP 1 nRuleID FROM dbo.ClaimRule_TriggeredRuleInfo WHERE nRuleID="+ ID;
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        result = true;
                    }
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, true);
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                result = false;
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
            return result;
        }
        private Boolean IsClaimRulesEnabled()
        {

            DataTable dt = null;
            Boolean result = false;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "SELECT sSettingsValue As ClaimRuleEnabled FROM dbo.settings WHERE sSettingsName='bEnableclaimRule'";
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        result = Convert.ToBoolean(dt.Rows[0]["ClaimRuleEnabled"]);
                    }
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex, true);
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                result = false;
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }
            return result;
        }

        private void Fill_RemarkCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                _sqlRetrieveQuery = "SELECT  nRemarkID ,sRemarkCode ,sRemarkDescription ,CASE bIsSystem WHEN 1 THEN 'System' ELSE 'User' END AS bIsSystem , CASE bIsBlock WHEN 1 THEN 'TRUE' ELSE 'FALSE' END AS bIsBlock FROM    dbo.BL_RemarkCodes_MST WITH ( NOLOCK )";
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;


                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                dgMasters.Columns[0].HeaderText = "Remark ID";
                dgMasters.Columns[1].HeaderText = "Remark Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Record Type";
                dgMasters.Columns[4].HeaderText = "IsBlock";
              


                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;
              
               


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.12);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.78);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = 0;

                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        //Code Added by Mayuri:20091106
        //To fill Action Codes
        private void Fill_ActionCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                _sqlRetrieveQuery = "select nActionCodeID, sCode, sDescription, " +
                                   " Case bIsSystem when 1 THEN 'System' ELSE 'User' END as bIsSystem, " +
                                   " Case  bIsBlock when 1 THEN 'TRUE' ELSE 'FALSE' END  as bIsBlock , " +
                                   " isnull(nActionID,0) as nActionID from  BL_ActionCodes_MST WITH(NOLOCK)  ";


                //}
                //else
                //{
                //    _sqlRetrieveQuery = "Select nChargeTrayID,sCode,sDescription,nNumberOfDays,Case when bIsDefault=0 Then '' else 'Default' end, " +
                //                             " CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nStartDate), 101) AS nStartDate,CONVERT(VARCHAR, dbo.CONVERT_TO_DATE(nEndDate), 101) AS nEndDate ," +
                //                             " Case when isnull(bIsClosed,0)=0 Then 'Active' else 'Closed' end from BL_ChargesTray";
                //}
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Action Code ID";
                dgMasters.Columns[1].HeaderText = "Action Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Record Type";
                dgMasters.Columns[4].HeaderText = "IsBlock";
                dgMasters.Columns[5].HeaderText = "ActionID";
                //dgMasters.Columns[6].HeaderText = "Description";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;
                dgMasters.Columns[5].Visible = false;
                //dgMasters.Columns[6].Visible = false;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.40);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.40);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void AssignUserRights()
        {
            gloUserRights.ClsgloUserRights oClsgloUserRights = null;
            try
            {
                if (_UserName.Trim() != "")
                {
                    oClsgloUserRights = new gloUserRights.ClsgloUserRights(_databaseconnectionstring);
                    oClsgloUserRights.CheckForUserRights(_UserName);

                    if (trvMasters.Nodes.Count > 0)
                    {
                        for (int i = trvMasters.Nodes.Count - 1; i >= 0; i--)
                        {
                            // Added user rights for ICD-10
                            if (trvMasters.Nodes[i].Text == "ICD10")
                            {
                                if (!oClsgloUserRights.ICD10)
                                    trvMasters.Nodes[i].Remove();
                            }
                            if (trvMasters.Nodes[i].Text == "ICD9")
                            {
                                if (!oClsgloUserRights.ICD9)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "CPT")
                            {
                                if (!oClsgloUserRights.CPT)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Modifiers")
                            {
                                if (!oClsgloUserRights.Modifier)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Drugs")
                            {
                                if (!oClsgloUserRights.Drugs)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Category")
                            {
                                if (!oClsgloUserRights.Category)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Type Of Service")
                            {
                                if (!oClsgloUserRights.TOS)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Place Of Service")
                            {
                                if (!oClsgloUserRights.POS)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Facility")
                            {
                                if (!oClsgloUserRights.Facility)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Smart Treatment")
                            {
                                if (!oClsgloUserRights.smartTreatment)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Code Type")
                            {
                                if (!oClsgloUserRights.CodeType)
                                    trvMasters.Nodes[i].Remove();

                            }
                            else if (trvMasters.Nodes[i].Text == "Patient Relationship")
                            {
                                if (!oClsgloUserRights.PatientRelationship)
                                    trvMasters.Nodes[i].Remove();

                            }
                            else if (trvMasters.Nodes[i].Text == "Flag Type")
                            {
                                if (!oClsgloUserRights.FlagType)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Specialty")
                            {
                                if (!oClsgloUserRights.Specialty)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Insurance Service type")
                            {
                                if (!oClsgloUserRights.InsServiceType)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Insurance Plan Codes")
                            {
                                if (!oClsgloUserRights.InsPlanCodes)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Plan Type")
                            {
                                if (!oClsgloUserRights.InsType)
                                    trvMasters.Nodes[i].Remove();

                            }
                            else if (trvMasters.Nodes[i].Text == "Adjustment Type")
                            {
                                if (!oClsgloUserRights.AdjType)
                                    trvMasters.Nodes[i].Remove();

                            }
                            else if (trvMasters.Nodes[i].Text == "Fee Schedule")
                            {
                                if (!oClsgloUserRights.FSchedule)
                                    trvMasters.Nodes[i].Remove();

                            }
                            else if (trvMasters.Nodes[i].Text == "Fee Schedule Allocation")
                            {
                                if (!oClsgloUserRights.FScheduleAllocation)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "CreditCard Type")
                            {
                                if (!oClsgloUserRights.CreditCardType)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Scrubber")
                            {
                                if (!oClsgloUserRights.Scrubber)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Referral CPT")
                            {
                                if (!oClsgloUserRights.RefCPT)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Claim Scrubber")
                            {
                                if (!oClsgloUserRights.CScrubber)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Invalid ICD9")
                            {
                                if (!oClsgloUserRights.InValidICD9)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Case Reporting Category")
                            {
                                if (!oClsgloUserRights.CaseReportingCategory)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Claim Rules")
                            {
                                if (!oClsgloUserRights.ClaimRule)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Insurance Claim Follow-up Action Crosswalk")
                            {
                                if (!oClsgloUserRights.InsFollowupActionCrosswalk)
                                    trvMasters.Nodes[i].Remove();
                            }
                            else if (trvMasters.Nodes[i].Text == "Standard Claim Follow-up Actions")
                            {
                                if (!oClsgloUserRights.StandardFollowupAction)
                                    trvMasters.Nodes[i].Remove();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oClsgloUserRights != null) { oClsgloUserRights.Dispose(); oClsgloUserRights = null; }
            }
        }

        private void Fill_ERAPayers()
        {
            DataTable dt = null;
            using (gloERA.ERAPayer oPayer = new global::gloBilling.gloERA.ERAPayer())
            {
                try
                {
                    dt = oPayer.GetERAPayerList();
                    if (dt != null)
                        _dv = dt.DefaultView;
                    else
                        return;

                    dgMasters.DataSource = _dv;

                    dgMasters.Columns[1].HeaderText = "Payer ID";
                    dgMasters.Columns[2].HeaderText = "Activated";
                    dgMasters.Columns[3].HeaderText = "Use Claim Status";
                    dgMasters.Columns[4].HeaderText = "Post Secondary Adjustments";

                    dgMasters.Columns[0].Visible = false;

                    int _Width = dgMasters.Width;
                    dgMasters.Columns[1].Width = (int)(_Width * 0.3);
                    dgMasters.Columns[2].Width = (int)(_Width * 0.1);
                    dgMasters.Columns[3].Width = (int)(_Width * 0.15);
                    dgMasters.Columns[4].Width = (int)(_Width * 0.2);

                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;

                    }
                }
                catch (Exception ex)
                {
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                }
            }
         
        }

        private void Fill_MedicaidResubmissionCodes(Int64 ID)
        {

            DataTable dt = null;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "select nResubmissionCodeID, sResubmissionCode, sDescription, " +
                                    " Case bIsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive" +
                                   "  from  BL_MedicaidResubmissionCodes WITH(NOLOCK) ORDER BY sResubmissionCode ";


                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "MedicaidResubmission ID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                //  dgMasters.Columns[4].HeaderText = "Record Type";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                //  dgMasters.Columns[4].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.65);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.10);
                //  dgMasters.Columns[4].Width = (int)(nWidth * 0.10);


                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void Fill_BusinessCenter(Int64 ID)
        {

            DataTable dt = null;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "SELECT nBusinessCenterID , " +
                                    "         sBusinessCenterCode , " +
                                    "         sDescription , ISNULL(sStatementCriteriaName,'') AS sStatementCriteriaName, " +
                                    "         Case bIsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive " +
                                    " FROM    BL_BusinessCenterCodes " +
                                    "         LEFT OUTER JOIN dbo.RPT_PatStatementCriteria_MST ON dbo.BL_BusinessCenterCodes.nStatementDisplaySettingsID = dbo.RPT_PatStatementCriteria_MST.nStatementCriteriaID ";
                //"select nBusinessCenterID, sBusinessCenterCode, sDescription, " +
                //                    " Case bIsActive when 1 THEN 'Active' ELSE 'InActive' END as IsActive, " +
                //                   "  from  BL_BusinessCenterCodes WITH(NOLOCK) ORDER BY sBusinessCenterCode ";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }

                oDB.Dispose();
                oDB = null;
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "BusinessCenter ID";
                dgMasters.Columns[1].HeaderText = "Code"; 
                dgMasters.Columns[2].HeaderText = "Name";
                dgMasters.Columns[4].HeaderText = "Status";
                dgMasters.Columns[3].HeaderText = "Patient Statement Display Settings";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = false;
                //  dgMasters.Columns[4].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.40);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.40);
                //  dgMasters.Columns[4].Width = (int)(nWidth * 0.10);


                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }


        private void Fill_ClaimReportingCategory(Int64 ID)
        {

            DataTable dt = null;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;

                _sqlRetrieveQuery = "SELECT  nClaimReportingCategoryID ," +
                                    " ISNULL(sCode, '') AS sCode , " +
                                    " ISNULL(sDescription, '') AS sDescription , " +
                                    " CASE ISNULL(bIsactive, 1) "+
                                    " WHEN 1 THEN 'Active' "+
                                    " WHEN 0 THEN 'Inactive' "+
                                     " END AS sStatus   FROM    BL_ClaimReportingCategory_MST ORDER BY sCode";
              
                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "nClaimReportingCategoryID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "Status";
                

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
              

                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.60);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.30);
              

                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        public void Fill_QuickNotes(Int64 ID)
        {
            QuickNotes oQuickNotes = new QuickNotes(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                 dt = oQuickNotes.GetList();

                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                #region " Design DataGrid "

                //Set dataview as datasource for grid(dgMasters)
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "nID";
                dgMasters.Columns[1].HeaderText = "Active";
                dgMasters.Columns[2].HeaderText = "Note Type";
                dgMasters.Columns[3].HeaderText = "Note";
                           
                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.05);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.12 );
                dgMasters.Columns[3].Width = (int)(nWidth * 0.83);
                             
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                #endregion " Design DataGrid "

                #region " ToolStrip buttons Enable/Disable "
                tsb_ADD.Visible = true;
                //Set toolstrip buttons enability  
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsbCopyAs.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsbCopyAs.Visible = false;
                }

                #endregion " ToolStrip buttons Enable/Disable "

               gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Notes, gloAuditTrail.ActivityType.View, "View Quick Notes", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
               
            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log("Billing Book - Quick Notes : " + ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            { if (oQuickNotes != null) { oQuickNotes.Dispose(); oQuickNotes = null; }
                if (dt != null) { dt.Dispose(); dt = null; }
            }
        }

        /// <summary>
        /// Fill Hold Billing Info from Database
        /// To show hold billing info in a grid(dgMasters) on a form
        /// </summary>
        /// 
        public void Fill_HoldBilling(Int64 ID)
        {
            HoldBilling oHoldBilling = new HoldBilling(_databaseconnectionstring);
            DataTable dt = null;
            try
            {
                dt = oHoldBilling.GetHoldBilling(0);
                if (dt != null)
                {
                    _dv = dt.DefaultView;
                }
                else
                    return;
                //Set dataview as datasource for grid(dgMasters)
                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "Hold Billing ID";
                dgMasters.Columns[1].HeaderText = "Reason";
                dgMasters.Columns[2].HeaderText = "Description";


                //Make columns visible true or false
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;

                //Set the width for columns of a grid(dgMasters)
                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.5 - 10);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }
                //Set toolstrip buttons enability 
                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.Modifier, gloAuditTrail.ActivityType.View, "View Modifier", 0, 0, 0, gloAuditTrail.ActivityOutCome.Success);
            }

            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log("Hold Billing : " + ex.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oHoldBilling.Dispose();
            }
        }

        public void Fill_StandardReasonCode()
        {
            DataTable dt = null;
            using (clsStandardReasonCode oStandardReasonCode = new global::gloBilling.clsStandardReasonCode())
            {
                try
                {
                    dt = oStandardReasonCode.GetStandardReasonCodeList();
                    if (dt != null)
                        _dv = dt.DefaultView;
                    else
                        return;
                    dgMasters.DataSource = _dv;

                    //Set dataview as datasource for grid(dgMasters)
                    dgMasters.DataSource = null;
                    dgMasters.DataSource = _dv;
                    dgMasters.Columns[0].HeaderText = "Reason Code ID";
                    dgMasters.Columns[1].HeaderText = "Group";
                    dgMasters.Columns[2].HeaderText = "Reason";
                    dgMasters.Columns[3].HeaderText = "Description";
                    dgMasters.Columns[4].HeaderText = "Type";
                    dgMasters.Columns[5].HeaderText = "System Defined";

                    //Make columns visible true or false
                    dgMasters.Columns[0].Visible = false;
                    dgMasters.Columns[1].Visible = true;
                    dgMasters.Columns[2].Visible = true;
                    dgMasters.Columns[3].Visible = true;
                    dgMasters.Columns[4].Visible = true;
                    dgMasters.Columns[5].Visible = true;

                    //Set the width for columns of a grid(dgMasters)
                    int nWidth = dgMasters.Width;
                    dgMasters.Columns[0].Width = 0;
                    dgMasters.Columns[1].Width = (int)(nWidth * 0.1);
                    dgMasters.Columns[2].Width = (int)(nWidth * 0.1);
                    dgMasters.Columns[3].Width = (int)(nWidth * 0.5 - 10);
                    dgMasters.Columns[4].Width = (int)(nWidth * 0.1);
                    dgMasters.Columns[5].Width = (int)(nWidth * 0.2);

                    //Set toolstrip buttons enability 
                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;
                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                        tsb_ADD.Visible = true;
                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                        tsb_Modify.Visible = false;
                        tsb_Delete.Visible = false;                        
                        tsb_ADD.Visible = true;
                    }
                }                
                catch (Exception ex)
                {
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                }                
            }
        }

        public void Fill_StandardFollowupAction(Int64 ID)
        {
            DataTable dt = null;
            StandardFollowupAction oStandardFollowupAction = new StandardFollowupAction(DatabaseConnectionString);
            try
            {
                dt = oStandardFollowupAction.GetStdFollowupAction(0);
                if (dt != null)
                {
                    _dv = dt.DefaultView;
                }
                dgMasters.DataSource = _dv;

                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;
                dgMasters.Columns[0].HeaderText = "nID";
                dgMasters.Columns[1].HeaderText = "Code";
                dgMasters.Columns[2].HeaderText = "Description";

                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;

                int nWidth = dgMasters.Width;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.5 - 10);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.5 - 10);

                if (dgMasters.DataSource != null && ID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (ID == Convert.ToInt64(dgMasters.Rows[i].Cells[0].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;
                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_ADD.Visible = true;
                }
                if (!oStandardFollowupAction.IsEnableAddEditDeleteSetting())
                {
                    IsEnableAddEditDeleteSetting = false;
                    tsb_ADD.Visible = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Refresh.Visible = false;
                }
                else
                {
                    IsEnableAddEditDeleteSetting = true;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
            }

        }

        public void Fill_InsuranceFollowupCrosswalk()
        {
            DataTable dt = null;

            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(DatabaseConnectionString);
                oDB.Connect(false);
                string sqlQuery = "select ISNULL(nInsuranceCrosswalkID,0) as nInsuranceCrosswalkID ,ISNULL(sInsuranceCrosswalkName,'') as sInsuranceCrosswalkName ,ISNULL(dtCreatedDate,101) as dtCreatedDate,convert(varchar(10),dtCreatedDate,101) AS CreatedDateForSearch  from BL_InsuranceClaimCrossWalk_MST WITH(NOLOCK)";
                oDB.Retrive_Query(sqlQuery, out dt);

                oDB.Dispose();
                oDB = null;
                if (dt != null)
                {
                    _dv = dt.DefaultView;
                }
                else
                    return;

                //Set dataview as datasource for dgMasters

                dgMasters.DataSource = _dv;

                dgMasters.DataSource = null;
                dgMasters.DataSource = _dv;
                //Give Header Names for the grid

                dgMasters.Columns[0].HeaderText = "Insurance Crosswalk ID";
                dgMasters.Columns[1].HeaderText = "Insurance Claim Follow-up Crosswalk Name";
                dgMasters.Columns[2].HeaderText = "Created Date";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;



                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.80);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].DefaultCellStyle.Format = "MM/dd/yyyy";



                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.Rows.Count >= 1)
                {
                    tsb_ADD.Visible = false;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (dt != null)
                {
                    dt.Dispose();
                    dt = null;
                }
               
            }
        }

        #endregion 'Form Fill Methods '

        #region ' Tree View After Select Event '

        /// <summary>
        /// Actions to do after selecting a node from treeview(trvMasters)
        /// Change the Search lable text
        /// Fill the grid(dgMasters) with respective data usinf functions written above
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void trvMasters_AfterSelect(object sender, TreeViewEventArgs e)
        {
            ResetControls();

            SelectedView = Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1));
            lblSelectedText.Text = trvMasters.SelectedNode.Text.ToString();
            this.Text = trvMasters.SelectedNode.Text.ToString();

            if (SelectedView != 14)
            {
                dgMasters.Visible = true;
                c1AppointmentType.Visible = false;
            }
            if (SelectedView != 56)
            {
                tsbCopyAs.Visible = false;
            }
            #region "TODO : Need to check with the Owner "
            
            if (SelectedView != 21 && trvMasters.SelectedNode.Level != 1)
            {
                for (int i = 0; i < trvMasters.Nodes.Count; i++)
                {
                    if (Convert.ToString(trvMasters.Nodes[i].Tag) == "21")
                    {
                        trvMasters.Nodes[i].Nodes.Clear();
                    }
                }
            }
            if (SelectedView != 38 && trvMasters.SelectedNode.Level != 1)
            {
                for (int i = 0; i < trvMasters.Nodes.Count; i++)
                {
                    if (Convert.ToString(trvMasters.Nodes[i].Tag) == "38")
                    {
                        trvMasters.Nodes[i].Nodes.Clear();
                    }
                }
            }
            if (SelectedView != 43 && trvMasters.SelectedNode.Level != 1)
            {
                for (int i = 0; i < trvMasters.Nodes.Count; i++)
                {
                    if (Convert.ToString(trvMasters.Nodes[i].Tag) == "43")
                    {
                        trvMasters.Nodes[i].Nodes.Clear();
                    }
                }
            }
            #endregion

            try
            {
                Cursor.Current = Cursors.WaitCursor;

                if (trvMasters.SelectedNode != null)
                {
                    tsb_Print.Visible = false;
                    tsb_GenReport.Visible = false;
                    switch (SelectedView)
                    {
                        case 1: // ICD9
                            {
                                tsb_InvalidICD9.Text = "In&valid ICD";
                                tsb_InvalidICD9.Tag = "InvalidICD";
                                tsb_InvalidICD9.Visible = true;
                               // tsb_InvalidICD9.Enabled = false;

                                ////Commented For no Use of this button
                                //ts_MarkICD.Text = "Mark as ICD10";
                                //ts_MarkICD.Tag = "9to10";
                                //ts_MarkICD.Visible = true;
                                //ts_MarkICD.Image = global::gloBilling.Properties.Resources.MarkedICD10;  

                                //this.Text = "ICD 9";
                                LoadICDCodes(0, gloICD.CodeRevision.ICD9);
                            }
                            break;
                        case 2: // CPT
                            {
                                tsb_ModifyMultiple.Text = "Edit &Multiple";
                                tsb_ModifyMultiple.Tag = "Modify Multiple";
                                tsb_ModifyMultiple.Visible = true;
                                tsb_GenReport.Visible = true;
                                Fill_CPT(0);
                            }
                            break;
                        case 58: // Common CPT
                            {
                                //frmCommonCPT objfrmcpt = new frmCommonCPT();
                                //objfrmcpt.DatabaseConnectionString = DatabaseConnectionString; 
                                //objfrmcpt.ShowDialog(this);
                                //objfrmcpt.Dispose();
                                //objfrmcpt = null; 
                                //tsb_ModifyMultiple.Text = "Edit &Multiple";
                                //tsb_ModifyMultiple.Tag = "Modify Multiple";
                                //tsb_ModifyMultiple.Visible = true;
                                //tsb_GenReport.Visible = true;
                                tsb_Refresh.Visible = false; 
                                Fill_CommonCPT(1);
                            }
                            break;
                        case 3: // Modifiers
                            {
                                Fill_Modifiers(0);
                            }
                            break;
                        case 4: // ICD-10
                            {
                                //this.Text = "ICD 10";

                                tsb_InvalidICD9.Text = "In&valid ICD";
                                tsb_InvalidICD9.Tag = "InvalidICD";
                                tsb_InvalidICD9.Visible = true;
                               // tsb_InvalidICD9.Enabled = false;

                                ////Commented For no Use of this button
                                //ts_MarkICD.Text = "Mark as ICD9";
                                //ts_MarkICD.Tag = "10to9";
                                //ts_MarkICD.Visible = true;
                                //ts_MarkICD.Image = global::gloBilling.Properties.Resources.Marked_ICD9; 

                                LoadICDCodes(0,gloICD.CodeRevision.ICD10);
                            }
                            break;
                        case 5: // Category
                            {
                                cmbCategoryType.Visible = true;
                                lbl_Speciality.Visible = true;
                                lbl_Speciality.Text = "Category Types : ";
                                Fill_CategoryTypes();

                                Fill_Category(0);
                            }
                            break;
                        case 6: // Insurance CPT Association. 
                            {

                            }
                            break;
                        case 7: //Type Of Service
                            {
                                Fill_TOS(0);
                            }
                            break;
                        case 8: // Place Of Service
                            {
                                Fill_POS(0);
                            }
                            break;
                        case 9: // Facility
                            {
                                Fill_Facility(0);
                            }
                            break;
                        case 10://Type Of Service - CPT Association
                            {
                                frmSetupTOSCPTAssociation ofrmSetupTOSCPTAssociation = new frmSetupTOSCPTAssociation(_databaseconnectionstring);
                                ofrmSetupTOSCPTAssociation.MdiParent = this.MdiParent;
                                ofrmSetupTOSCPTAssociation.WindowState = FormWindowState.Maximized;
                                ofrmSetupTOSCPTAssociation.Show();
                                trvMasters.SelectedNode = trvMasters.Nodes["ICD9"];
                            }
                            break;
                        case 11: // Smart Treatment
                            {
                                FillSmartTreatment();
                            }
                            break;
                        case 12://Code Type
                            {
                                Fill_Codetype(0);
                            }
                            break;
                        case 13://Patient Relationship
                            {
                                Fill_PatientRelationship(0);
                            }
                            break;
                        case 14://Flag Type
                            {
                                Fill_Flags(0);
                            }
                            break;
                        case 15://Flag Type
                            {
                                Fill_Specialty(0);
                            }
                            break;
                        case 16://Insurance Service type
                            {
                                Fill_InsuranceServicetype(0);
                            }
                            break;
                        case 17://Insurance Plan Codes
                            {
                                Fill_InsurancePlan(0);
                            }
                            break;
                        case 18://Plan Type
                            {
                                Fill_InsuranceType(0);
                            }
                            break;
                        case 19://Clearing House
                            {
                                Fill_ClearingHouse(0);
                            }
                            break;
                        case 20: // Adjustment Type
                            {
                                Fill_AdjustmentTypes(0);
                            }
                            break;
                        case 21: // Fee Schedule Type
                            {
                                if (trvMasters.SelectedNode.Level == 0)
                                {
                                    FillStandardShcheduleNames(0);
                                    if (dgMasters.Rows.Count > 0)
                                        tsb_SaveAsCopy.Visible = true;
                                    else
                                        tsb_SaveAsCopy.Visible = false;
                                }
                            }
                            break;
                        case 22: // Standard Fee Schedule Allocation
                            {
                                Fill_StandardFeeScheduleAllocation(0);
                            }
                            break;
                        case 23://Credit Card Type
                            {
                                Fill_CreditCards(0);
                            }
                            break;

                        case 24: //Invalid ICD9
                            {
                                this.Text = "Invalid ICD";

                                tsb_InvalidICD9.Text = "&Valid ICD";
                                tsb_InvalidICD9.Tag = "ValidICD";
                                tsb_InvalidICD9.Visible = true;

                                pnlICDCodetype.Visible = true;

                                SetDefaultRevision();

                                LoadInvalidICD(SelectedICD);
                            }
                            break;
                        case 25: // Scrubber
                            {
                                Fill_Scrubber(0);
                            }
                            break;
                        case 26://Referral CPTs
                            {
                                Fill_ReferralCPTs(0);
                            }
                            break;
                        case 27://Claim Scrubber
                            {
                                Fill_ClaimScrubber(0);
                            }
                            break;

                        case 29://CloseDayTray
                            {
                                Fill_CloseDayTray();
                            }
                            break;

                        case 30://Charges Tray
                            {
                                Fill_ChargesTray();
                            }
                            break;
                        case 31://Refund Type
                            {

                                Fill_RefundTypes(0);
                            }
                            break;
                        case 32://Patient Statement Criteria Settings
                            {
                                Fill_StatementCriteria(0);

                            }
                            break;
                        case 33://Reason Codes
                            {
                                Fill_ReasonCodes(0);
                            }
                            break;
                        case 34://Action Codes
                            {
                                Fill_ActionCodes(0);
                            }
                            break;
                        case 35:
                            {
                                Fill_GropCodes(0);
                            }
                            break;
                        case 36://Patient Statement Display Settings
                            {
                                Fill_StatementDisplaySettings(0);
                            }
                            break;
                        case 37://Patient Statement Filter Settings
                            {
                                Fill_StatementFilterSettings(0);
                            }
                            break;
                        case 38:
                            {
                                if (trvMasters.SelectedNode.Level == 0)
                                {
                                    Fill_CPTMapping();
                                    trvMasters.SelectedNode.Expand();
                                }
                                else
                                {
                                    Fill_CPTMappingDetails(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));
                                }
                            }
                            break;
                        case 39://Revenue Code
                            {
                                Fill_RevenueCode(0);
                            }
                            break;
                        case 40: // ERA Payer 
                            {
                                tsb_Print.Visible = true;
                                Fill_ERAPayers();
                            }
                            break;
                        case 41: // Qualifier
                            {
                                Fill_Qualifier();
                            }
                            break;

                        case 42: // Qualifier Association
                            {
                                Fill_Qualifier_Association();
                            }
                            break;
                        case 43: // RVU SCHEDULE
                            {
                                if (trvMasters.SelectedNode.Level == 0)
                                {
                                    FillRVU();
                                    trvMasters.SelectedNode.Expand();
                                }
                                else
                                {
                                    Fill_RVUDetails(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));
                                }
                            }
                            break;

                        case 45: // Condition Code
                            {
                                Fill_ConditionCodes(0);
                            }
                            break;
                        case 46: // Occurrence Code
                            {
                                Fill_OccurrenceCodes(0);
                            }
                            break;
                        case 47: // Occurrence Span Code
                            {
                                Fill_OccurrenceSpanCodes(0);
                            }
                            break;
                        case 48: // Occurrence Code
                            {
                                Fill_ValueCodes(0);
                            }
                            break;
                        case 49: // Reporting Category
                            {
                                Fill_ReportingCategory(0);
                            }
                            break;
                        case 50: // Reporting Category
                            {
                                pnlCloseSearch.Visible = false;
                                txtSearch.Visible = false;
                                lblSearch.Visible = false;
                                dgMasters.DataSource = null;
                                tsb_Modify.Visible = false;
                                tsb_Delete.Visible = false;
                                tsb_Refresh.Visible = false;
                                tsb_ADD.Visible = true;
                            }
                            break;
                        case 51: // Ins. Cliam Follow Up Code
                            {
                                tsb_Activate.Visible = true;
                                tsb_Deactivate.Visible = true; 
                                Fill_FollowUpCode(0, CollectionEnums.FollowUpType.Claim);
                            }
                            break;
                        case 52: // Pat. Acc. Follow Up Code
                            {
                                tsb_Activate.Visible = true;
                                tsb_Deactivate.Visible = true; 
                                Fill_FollowUpCode(0, CollectionEnums.FollowUpType.PatientAccount);
                            }
                            break;
                        //case 60: // BadDebt Acc. Follow Up Code
                        //    {
                        //        Fill_FollowUpCode(0, CollectionEnums.FollowUpType.BadDebt);
                        //    }
                        //    break;
                        case 53://for MedicaidResubmissionCodes box 22
                            {
                                Fill_MedicaidResubmissionCodes(0);
                            }
                            break;
                        case 54://for BusinessCenter 
                            {
                                Fill_BusinessCenter(0);
                            }
                            break;
                        case 55://for Claim CategoryType
                            {
                                Fill_ClaimReportingCategory(0);
                            }
                            break;
                        case 56:
                            {
                                Fill_QuickNotes(0);
                            }
                            break;

                        case 57://Reason Codes
                            {
                                Fill_RemarkCodes(0);
                            }
                            break;
                        case 59://Claim Rules
                            {
                                Fill_ClaimRules(0);
                            }
                            break;
                        case 60:
                            {
                                Fill_HoldBilling(0);
                            }
                            break;
                        case 61://Standard Reason Code
                            {
                                Fill_StandardReasonCode();
                            }
                            break;
                        case 62:
                            {
                                Fill_StandardFollowupAction(0);
                            }
                            break;
                        case 63:
                            {
                                Fill_InsuranceFollowupCrosswalk();
                            }
                            break;
                    }
                    dgMasters.ReadOnly = true;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                Cursor.Current = Cursors.Default;
            }
        }

        private void SetDefaultRevision()
        {
            gloBilling oGlobilling = new gloBilling(_databaseconnectionstring, _databaseconnectionstring);           
            try
            {
                if (oGlobilling.GetICDCodeType(0, gloDate.DateAsNumber(DateTime.Now.Date.ToString())) == gloGlobal.gloICD.CodeRevision.ICD10)
                {
                    RbICD10.CheckedChanged -= new EventHandler(RbICD10_CheckedChanged);
                    RbICD10.Checked = true;
                    RbICD10.CheckedChanged += new EventHandler(RbICD10_CheckedChanged);
                }
                else
                {
                    RbICD9.CheckedChanged -= new System.EventHandler(this.RbICD9_CheckedChanged);
                    RbICD9.Checked = true;
                    RbICD9.CheckedChanged += new System.EventHandler(this.RbICD9_CheckedChanged);
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Exception while setting a default revision " + ex.ToString(), true);
            }
            finally
            {
                if (oGlobilling != null) { oGlobilling.Dispose(); oGlobilling = null; }
            }

        }

        private void ResetControls()
        {
            try
            {
                pnlCloseSearch.Visible = true;
                txtSearch.Visible = true;
                lblSearch.Visible = true;
                lbl_Speciality.Visible = false;
                cmbSpeciality.Visible = false;
                numCount.Visible = false;
                tsbFeeScheduleCharges.Visible = false;
                cmbCategoryType.Visible = false;
                txtSearch.Dock = DockStyle.Left;
                txtSearch.Clear();
                tsb_InvalidICD9.Visible = false;
               // ts_MarkICD.Visible = false;
                tsb_Import.Visible = false;
                tsb_Export.Visible = false;
                tsb_Verify.Visible = false;
                tsb_DeleteFeeSchedule.Visible = false;
                tsb_ModifyMultiple.Visible = false;
                tsb_Refresh.Visible = true;
                tsb_SaveAsCopy.Visible = false;
                pnlICDCodetype.Visible = false;
                tsb_ADD.Text = "&Add";
                tsb_Activate.Visible = false;
                tsb_Deactivate.Visible = false;
                tsb_TestAllRules.Visible = false;
                tsb_Verify.Visible = false;
                tsb_Publish.Visible = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Exception while Reset Controls " + ex.ToString(), true);
            }
        }

        private void Fill_CPTMappingDetails(Int64 ID)
        {
            DataTable dt = null;

            try
            {
                _CPTMapId = ID;
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                _sqlRetrieveQuery = "SELECT distinct CPT_Mapping_DTL.nCPTMappingID, CPT_Mapping_DTL.nCPTMappingDetailsID, CPT_Mapping_DTL.sCPTCode, CPT_MST.sDescription, " +
                      " CPT_Mapping_DTL.sMappingCPT, CPT_MST_1.sDescription AS sMappingDescription " +
                      " FROM         CPT_Mapping_DTL WITH(NOLOCK) LEFT OUTER JOIN " +
                      " CPT_MST AS CPT_MST_1 WITH(NOLOCK) ON CPT_Mapping_DTL.sMappingCPT = CPT_MST_1.sCPTCode LEFT OUTER JOIN " +
                      " CPT_MST WITH(NOLOCK) ON CPT_Mapping_DTL.sCPTCode = CPT_MST.sCPTCode  WHERE CPT_Mapping_DTL.nCPTMappingID= " + ID.ToString() + " order by CPT_Mapping_DTL.sCPTCode";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                dgMasters.Columns[0].HeaderText = "CPT Mapping Details ID";
                dgMasters.Columns[1].HeaderText = "CPT Mapping ID";
                dgMasters.Columns[2].HeaderText = "Original CPT";
                dgMasters.Columns[3].HeaderText = "Description";
                dgMasters.Columns[4].HeaderText = "Replacement CPT";
                dgMasters.Columns[5].HeaderText = "Description";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = false;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = true;



                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = 0;
                dgMasters.Columns[2].Width = (int)(nWidth * 0.15);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.35);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.15);
                dgMasters.Columns[5].Width = (int)(nWidth * 0.35);




                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }


        }

        private void Fill_RVUDetails(Int64 ID)
        {
            DataTable dt = null;

            try
            {
                _RVUId = ID;
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                _sqlRetrieveQuery = "SELECT distinct BL_RVU_Schedule_DTL.nRVUID, BL_RVU_Schedule_DTL.nRVUDtlID, BL_RVU_Schedule_DTL.sCPTCode, BL_RVU_Schedule_DTL.sModifier," +
                " BL_RVU_Schedule_DTL.sCPTDescription, " +
                " BL_RVU_Schedule_DTL.dWorkUnits, BL_RVU_Schedule_DTL.dPEUnits ,dMPUnits,dTotalRVU " +
                " FROM BL_RVU_Schedule_DTL WITH(NOLOCK) " +
                " WHERE BL_RVU_Schedule_DTL.nRVUID=" + ID.ToString() + " order by BL_RVU_Schedule_DTL.sCPTCode";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                dgMasters.Columns[0].HeaderText = "nRVUID";
                dgMasters.Columns[1].HeaderText = "nRVUDtlID";
                dgMasters.Columns[2].HeaderText = "CPT Code";
                dgMasters.Columns[3].HeaderText = "Modifier";
                dgMasters.Columns[4].HeaderText = "Description";
                dgMasters.Columns[5].HeaderText = "Work Units";
                dgMasters.Columns[6].HeaderText = "PE Units";
                dgMasters.Columns[7].HeaderText = "MP Units";
                dgMasters.Columns[8].HeaderText = "Total RVU";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = false;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;
                dgMasters.Columns[5].Visible = true;
                dgMasters.Columns[6].Visible = true;
                dgMasters.Columns[7].Visible = true;
                dgMasters.Columns[8].Visible = true;



                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = 0;
                dgMasters.Columns[2].Width = (int)(nWidth * 0.09);//CPT Code
                dgMasters.Columns[3].Width = (int)(nWidth * 0.05);//Modifier
                dgMasters.Columns[4].Width = (int)(nWidth * 0.29);//Description
                dgMasters.Columns[5].Width = (int)(nWidth * 0.14);//Work Units
                dgMasters.Columns[6].Width = (int)(nWidth * 0.14);//PE Units
                dgMasters.Columns[7].Width = (int)(nWidth * 0.14);//MP Units
                dgMasters.Columns[8].Width = (int)(nWidth * 0.14);//Total RVU
                

                dgMasters.Columns[5].DefaultCellStyle.Alignment = DataGridViewContentAlignment.TopRight;
                dgMasters.Columns[6].DefaultCellStyle.Alignment = DataGridViewContentAlignment.TopRight;
                dgMasters.Columns[7].DefaultCellStyle.Alignment = DataGridViewContentAlignment.TopRight;
                dgMasters.Columns[8].DefaultCellStyle.Alignment = DataGridViewContentAlignment.TopRight;

                dgMasters.Columns[5].DefaultCellStyle.Format = "############0.####";
                dgMasters.Columns[6].DefaultCellStyle.Format = "############0.####";
                dgMasters.Columns[7].DefaultCellStyle.Format = "############0.####";
                dgMasters.Columns[8].DefaultCellStyle.Format = "############0.####";


                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }


        }


        private void Fill_CPTMapping()
        {
            DataTable dt = null;
            TreeNode oNode = null;
            bool isnodePresent = false;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                //_sqlRetrieveQuery = "SELECT nCPTMappingID,sCPTMappingName,convert(varchar(10),dtCreatedDate,101) AS CreatedDate FROM CPT_Mapping_mst order by sCPTMappingName";
                _sqlRetrieveQuery = "SELECT nCPTMappingID,sCPTMappingName,dtCreatedDate AS CreatedDate,convert(varchar(10),dtCreatedDate,101) AS CreatedDateForSearch FROM CPT_Mapping_mst WITH(NOLOCK) order by sCPTMappingName";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;



                for (int i = 0; i < trvMasters.Nodes.Count; i++)
                {
                    if (Convert.ToInt16(trvMasters.Nodes[i].Tag) == Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1)))
                    {
                        trvMasters.Nodes[i].Nodes.Clear();
                    }
                }

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        isnodePresent = false;
                        oNode = new TreeNode();
                        oNode.Text = Convert.ToString(dt.Rows[i]["sCPTMappingName"]);
                        oNode.Tag = "38~" + dt.Rows[i]["nCPTMappingID"];
                        oNode.ImageIndex = 21;
                        oNode.SelectedImageIndex = 21;

                        foreach (TreeNode childNode in trvMasters.SelectedNode.Nodes)
                        {
                            if (Convert.ToString(childNode.Tag) == Convert.ToString(oNode.Tag))
                            {
                                isnodePresent = true;
                                break;
                            }
                        }
                        if (isnodePresent == false)
                        {
                            trvMasters.SelectedNode.Nodes.Add(oNode);
                        }
                    }

                    ////added 
                    //foreach (TreeNode childNode in trvMasters.SelectedNode.Nodes)
                    //{
                    //    if (Convert.ToString(childNode.Tag) == "38~" + Convert.ToString(ID))
                    //    {
                    //        trvMasters.SelectedNode = childNode;
                    //    }
                    //}

                }




                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "CPT Crosswalk ID";
                dgMasters.Columns[1].HeaderText = "CPT Billing Crosswalk Name";
                dgMasters.Columns[2].HeaderText = "Created Date";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.80);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.20);
                dgMasters.Columns[2].DefaultCellStyle.Format = "MM/dd/yyyy";



                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }

        }



        private void FillRVU()
        {
            DataTable dt = null;
            TreeNode oNode = null;
            bool isnodePresent = false;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //Bug ID: 47919	Date Sort: Billing Configuration -> Effective Date column is not sorting the date proparly.
                //Remove convert(varchar(10),dtEffectiveDate,101) for effective date and place dtEffectiveDate.
                _sqlRetrieveQuery = "SELECT nRVUID,dtEffectiveDate AS dtEffectiveDate,(CASE WHEN nScheduleType=0 THEN 'None' WHEN nScheduleType=1 THEN 'Transitioned, Non-Facility' " +
                 " WHEN nScheduleType=2 THEN 'Transitioned, Facility' WHEN nScheduleType=3 THEN 'Fully Implemented, Non-Facility' WHEN nScheduleType=4 THEN 'Fully Implemented, Facility' END) AS nScheduleType, " +
                 " sStatementNote,(CASE WHEN bISActive='true' then 'Active' ELSE 'InActive' END) As Status " +
                  " FROM BL_RVU_Schedule_MST WITH(NOLOCK) order by dtEffectiveDate";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                dgMasters.DataSource = _dv;

                for (int i = 0; i < trvMasters.Nodes.Count; i++)
                {
                    if (Convert.ToInt16(trvMasters.Nodes[i].Tag) == Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1)))
                    {
                        trvMasters.Nodes[i].Nodes.Clear();
                    }
                }

                if (dt != null)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {

                        isnodePresent = false;
                        oNode = new TreeNode();
                        //Bug ID: 47919	Date Sort: Billing Configuration -> Effective Date column is not sorting the date proparly.
                        //Remove Convert.ToString(dt.Rows[i]["dtEffectiveDate"]); and add Convert.ToDateTime(dt.Rows[i]["dtEffectiveDate"]).ToString("MM/dd/yyyy"); as effective date return as datetime
                        oNode.Text = Convert.ToDateTime(dt.Rows[i]["dtEffectiveDate"]).ToString("MM/dd/yyyy");
                        oNode.Tag = "43~" + dt.Rows[i]["nRVUID"];
                        oNode.ImageIndex = 44;
                        oNode.SelectedImageIndex = 44;

                        foreach (TreeNode childNode in trvMasters.SelectedNode.Nodes)
                        {
                            if (Convert.ToString(childNode.Tag) == Convert.ToString(oNode.Tag))
                            {
                                isnodePresent = true;
                                break;
                            }
                        }
                        if (isnodePresent == false)
                        {
                            trvMasters.SelectedNode.Nodes.Add(oNode);
                        }
                    }

                    ////added 
                    //foreach (TreeNode childNode in trvMasters.SelectedNode.Nodes)
                    //{
                    //    if (Convert.ToString(childNode.Tag) == "38~" + Convert.ToString(ID))
                    //    {
                    //        trvMasters.SelectedNode = childNode;
                    //    }
                    //}

                }





                dgMasters.Columns[0].HeaderText = "RVU ID";
                dgMasters.Columns[1].HeaderText = "Effective Date";
                dgMasters.Columns[2].HeaderText = "Practice Expense Type";
                dgMasters.Columns[3].HeaderText = "Note";
                dgMasters.Columns[4].HeaderText = "Status";

                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = true;
                dgMasters.Columns[4].Visible = true;



                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.15);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.25);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.50);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.1);
                dgMasters.Columns[1].DefaultCellStyle.Format = "MM/dd/yyyy";



                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }

        }

        private void Fill_GropCodes(Int64 GroupCodeID)
        {

            DataTable dt = null;
            try
            {

                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string _sqlRetrieveQuery = String.Empty;
                //if (IsAdmin() != true)
                //{
                _sqlRetrieveQuery = "SELECT nID,sCode,sDescription, Case  IsBlock when 1 THEN 'TRUE' ELSE 'FALSE' END  as IsBlock,case ISNULL(bIsSystem,0)  when 0 then 'User' when 1 then 'System' end AS bIsSystem  FROM BL_Reason_GroupCode_MST WITH(NOLOCK)";

                if (_sqlRetrieveQuery != "")
                {
                    oDB.Retrive_Query(_sqlRetrieveQuery, out dt);
                }
                oDB.Dispose();
                oDB = null;
                //Set dataview as datasource for dgMasters
                if (dt != null)
                    _dv = dt.DefaultView;
                else
                    return;

                //Set dataview as datasource for dgMasters
                dgMasters.DataSource = _dv;

                //Give Header Names for the grid
                dgMasters.Columns[0].HeaderText = "Group CodeID";
                dgMasters.Columns[1].HeaderText = "Group Code";
                dgMasters.Columns[2].HeaderText = "Description";
                dgMasters.Columns[3].HeaderText = "IsBlock";
                dgMasters.Columns[4].HeaderText = "Record Type";
                //dgMasters.Columns[6].HeaderText = "Description";


                //Set visible true or false to show the columns on the form
                dgMasters.Columns[0].Visible = false;
                dgMasters.Columns[1].Visible = true;
                dgMasters.Columns[2].Visible = true;
                dgMasters.Columns[3].Visible = false;
                dgMasters.Columns[4].Visible = true;


                //Set width for columns of grid
                int nWidth = dgMasters.Width - 5;
                dgMasters.Columns[0].Width = 0;
                dgMasters.Columns[1].Width = (int)(nWidth * 0.09);
                dgMasters.Columns[2].Width = (int)(nWidth * 0.91);
                dgMasters.Columns[3].Width = (int)(nWidth * 0.0);
                dgMasters.Columns[4].Width = (int)(nWidth * 0.10);

                //Added By Rahul Patel
                //For Text Wrapping in Cell
                dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                dgMasters.AutoResizeRows();
                //End
                if (dgMasters.DataSource != null && GroupCodeID != 0)
                {
                    for (int i = 0; i < dgMasters.Rows.Count; i++)
                    {
                        if (GroupCodeID == Convert.ToInt64(dgMasters.Rows[i].Cells[1].Value))
                        {
                            dgMasters.Rows[i].Selected = true;
                            break;
                        }
                    }
                }

                if (dgMasters.RowCount > 0)
                {
                    tsb_Modify.Visible = true;
                    tsb_Delete.Visible = true;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }
                if (dgMasters.RowCount == 0)
                {
                    tsb_Modify.Enabled = false;
                    tsb_Delete.Enabled = false;
                    tsb_Modify.Visible = false;
                    tsb_Delete.Visible = false;
                    tsb_Modify.Enabled = true;
                    tsb_Delete.Enabled = true;
                    tsb_ADD.Visible = true;

                }

            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }

        }

        public void FillSmartTreatment()
        {
            try
            {
                DataTable dtTreatment = null;
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                DataView _dv;
                try
                {
                    string strSQL = "SELECT nTreatmentID,sTreatmentName FROM BL_SmartTreatment WITH(NOLOCK)";
                    oDB.Connect(false);
                    oDB.Retrive_Query(strSQL, out dtTreatment);
                    oDB.Disconnect();
                    oDB.Dispose();
                    oDB = null;
                    if (dtTreatment != null)
                    {
                        _dv = dtTreatment.DefaultView;
                        //Set dataview as datasource for dgMasters
                        dgMasters.DataSource = _dv;
                        //if (dtTreatment.Rows.Count > 0)
                        //{


                        //Give Header Names for the grid
                        dgMasters.Columns[0].HeaderText = "ID";
                        dgMasters.Columns[1].HeaderText = "Smart Treatment";

                        dgMasters.Columns[0].Visible = false;
                        dgMasters.Columns[1].Visible = true;

                        int nWidth = dgMasters.Width - 5;
                        dgMasters.Columns[0].Width = 0;
                        dgMasters.Columns[1].Width = (int)(nWidth * 0.80);
                        //}
                    }
                    //Set toolstrip buttons enability  
                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Modify.Visible = true;
                        tsb_Delete.Visible = true;

                        tsb_Modify.Enabled = true;
                        tsb_Delete.Enabled = true;
                    }
                    if (dgMasters.RowCount == 0)
                    {
                        tsb_Modify.Enabled = false;
                        tsb_Delete.Enabled = false;
                    }
                }
                catch (gloDatabaseLayer.DBException dbEx)
                {
                    dbEx.ERROR_Log(dbEx.ToString());
                }
                catch (Exception ex)
                {
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                }
                finally
                {
                    dtTreatment.Dispose();
                }
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        #endregion ' Tree View After Select Event '

        #region ' Form Load Method '

        /// <summary>
        /// Form Load Event
        /// Fill TreeView with all masters as its nodes
        /// Fill ICD9 values in a grid
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmViewMasters_Load(object sender, EventArgs e)
        {
            Fill_MastersTreeview();
            AssignUserRights();

            //TODO : Seems not in use, can be deleted
            ts_btnAddLine.Visible = false;

            #region "Code Start added by kanchan on 20120102 for gloCommunity integration"

            ts_gloCommunityDownload.Visible = false;
            if (_messageBoxCaption.ToLower() != "gloPM".ToLower())
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);

                oDB.Connect(false);
                string strQueryRight = "SELECT  Rights_MST.sRightsName AS RightsName FROM UserRights_DTL INNER JOIN Rights_MST ON UserRights_DTL.nRightsID = Rights_MST.nRightsID INNER JOIN User_MST ON UserRights_DTL.nUserID = User_MST.nUserID WHERE User_MST.sLoginName = '" + _UserName + "' AND Rights_MST.sRightsName = 'Share' AND ISNULL(ApplicationType, 0) = 0";
                if (Convert.ToString(oDB.ExecuteScalar_Query(strQueryRight)) != string.Empty)//Added condition to fixed Bug # : 37984 on 20120928
                {
                    string strQuery = "Select sSettingsValue as SettingsValue from Settings where sSettingsName='gloCommunity Feature' ";
                    Boolean Result = false;
                    Boolean.TryParse(Convert.ToString(oDB.ExecuteScalar_Query(strQuery)), out Result);
                    ts_gloCommunityDownload.Visible = Result;
                }
                oDB.Disconnect();
                oDB.Dispose();
                oDB = null;
            }

            #endregion "Code end added by kanchan on 20120102 for gloCommunity integration"

            tsb_GenReport.Visible = false;
           // if (gloEMRGeneralLibrary.glogeneral.clsgeneral.gblnIcd10Transition==)

            this.searchTimer = new Timer();
            this.searchTimer.Interval = 500;
            this.searchTimer.Tick += new EventHandler(searchTimer_Tick);
        }

       

        //To resolve the grid resizing problem
        private void frmViewBillingBook_Shown(object sender, EventArgs e)
        {
            //TODO: Seems not required, need to check with the owner
            ////Fill_ICD9(0);
            //trvMasters.SelectedNode = trvMasters.TopNode;
            //trvMasters_AfterSelect(sender, null);
        }

        #endregion ' Form Load Method '

        #region ' Tool Strip Event '

        /// <summary>
        /// On click at item in toolstrip
        /// Here the operations to do for each item clicked are declared
        /// Switch cases are used to distinguish between different masters and also different buttons which ever is selected
        /// </summary>
        /// <param name="sender">object</param>
        /// <param name="e">ToolStripItemClickedEventArgs</param>
        private void ts_Commands_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            try
            {
                if (e.ClickedItem.Tag.ToString() == "Close")
                {
                    this.Close();
                    return;
                }
                //  added on 16Apr2014 for clear search textbox on Refresh - Sameer
                else if (e.ClickedItem.Tag.ToString() == "Refresh")
                {
                    txtSearch.Clear();
                }

                #region  " Get Selected ID for Item "

                Int64 ID = 0;
                string icdCode = string.Empty;
                string icdDescription = string.Empty;

                if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify" || e.ClickedItem.Tag.ToString() == "InvalidICD" || e.ClickedItem.Tag.ToString() == "9to10" || e.ClickedItem.Tag.ToString() == "10to9")
                {
                    if (Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1))) == 14)
                    {
                        if (c1AppointmentType.RowSel == -1)
                        {
                            return;
                        }
                        else
                        {
                            ID = Convert.ToInt64(c1AppointmentType.GetData(c1AppointmentType.RowSel, 0));
                        }
                    }
                    else
                    {
                        if (Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1))) != 21 && Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1))) != 38 && Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 1))) != 63)
                        {
                            // Check only for Modify & Delete 
                            if (dgMasters.SelectedRows.Count <= 0)
                            {
                                // If Data Is Not Selected from GridView to Modify or Delete
                                return;
                            }
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                // If ID is Not Present
                                return;
                            else
                            {
                                ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                //Smart treatment was throwing an exception while editing : Bug resoved 
                                if (SelectedView == 1 || SelectedView == 4 || SelectedView == 24)
                                {
                                    icdCode = Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value);
                                    icdDescription = Convert.ToString(dgMasters.SelectedRows[0].Cells[2].Value);
                                }
                            }
                        }
                    }
                }

                #endregion  " Get Selected ID for Item "

                #region "ICD Commands"

                if (SelectedView == 1 || SelectedView == 4)
                {
                      frmSetupICD9 ofrmICD9 = null;

                      if (e.ClickedItem.Tag.ToString() == "Add")
                      {
                         
                          if (SelectedView == 1)
                          {
                              ofrmICD9 = new frmSetupICD9(gloICD.CodeRevision.ICD9, _databaseconnectionstring);
                              ofrmICD9.Height = 320;  //height change as design change 8020 Order PRD
                          }
                          else if (SelectedView == 4)
                          {
                              ofrmICD9 = new frmSetupICD9(gloICD.CodeRevision.ICD10, _databaseconnectionstring);
                              ofrmICD9.Height = 320;   //height change as design change 8020 Order PRD
                          }

                          ofrmICD9.gstrSMDBDatabaseName = gstrSMDBDatabaseName;
                          ofrmICD9.gstrSMDBServerName = gstrSMDBServerName;
                          ofrmICD9.gstrSMDBUserID = gstrSMDBUserID;
                          ofrmICD9.gstrSMDBPassWord = gstrSMDBPassWord;
                          ofrmICD9.gblnSMDBAuthen = gblnSMDBAuthen;
                          ofrmICD9.ShowDialog(this);

                          ID = ofrmICD9.nICD9ID;
                          ofrmICD9.Dispose();
                          ofrmICD9 = null;
                      }

                    if (dgMasters.RowCount > 0)
                    {
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                        {
                            using (ICD9 oICD9 = new ICD9(_databaseconnectionstring))
                            {

                                if (e.ClickedItem.Tag.ToString() == "Modify")
                                {
                                    if (SelectedView == 1)
                                    {
                                        ofrmICD9 = new frmSetupICD9(gloICD.CodeRevision.ICD9, ID, _databaseconnectionstring);
                                        ofrmICD9.Height = 320;
                                    }
                                    else if (SelectedView == 4)
                                    { ofrmICD9 = new frmSetupICD9(gloICD.CodeRevision.ICD10, ID, _databaseconnectionstring); }

                                    ofrmICD9.gstrSMDBDatabaseName = gstrSMDBDatabaseName;
                                    ofrmICD9.gstrSMDBServerName = gstrSMDBServerName;
                                    ofrmICD9.gstrSMDBUserID = gstrSMDBUserID;
                                    ofrmICD9.gstrSMDBPassWord = gstrSMDBPassWord;
                                    ofrmICD9.gblnSMDBAuthen = gblnSMDBAuthen;

                                    ofrmICD9.ShowDialog(this);
                                    ofrmICD9.Dispose();
                                    ofrmICD9 = null;
                                }
                                else if (e.ClickedItem.Tag.ToString() == "Delete")
                                {
                                    bool IsInUse = false;

                                    if (SelectedView == 1)
                                    { IsInUse = clsICD.IsInUseICD(icdCode, gloICD.CodeRevision.ICD9.GetHashCode()); }
                                    else if (SelectedView == 4)
                                    { IsInUse = clsICD.IsInUseICD(icdCode, gloICD.CodeRevision.ICD10.GetHashCode()); }

                                    if (IsInUse)
                                    {
                                        MessageBox.Show("Cannot delete this record. This code is already used.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                    else
                                    {
                                        if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                        {
                                            if (clsICD.Delete(ID))
                                            {
                                                if (SelectedView == 1)
                                                {
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.ICD9, ActivityType.Delete, "Delete ICD-9 Code:"+icdCode.ToString(), 0, ID, 0, ActivityOutCome.Success);
                                                }
                                                else if (SelectedView == 4)
                                                {
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.ICD10, ActivityType.Delete, "Delete ICD-10 Code:" + icdCode.ToString(), 0, ID, 0, ActivityOutCome.Success);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (e.ClickedItem.Tag.ToString() == "10to9" || e.ClickedItem.Tag.ToString() == "9to10")
                                {
                                    string msg = string.Empty;

                                    if (e.ClickedItem.Tag.ToString() == "10to9")
                                    {
                                        msg = "ICD-10 code " + icdCode.Trim() + " will be moved to the ICD-9 List." + Environment.NewLine + Environment.NewLine + "Continue? ";
                                    }
                                    else
                                    {
                                        msg = "ICD-9 code " + icdCode.Trim() + " will be moved to the ICD-10 List." + Environment.NewLine + Environment.NewLine + "Continue? "; //"Are you sure you want to mark this record as ICD-10 ?";
                                    }
                                    if (MessageBox.Show(msg, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                    {
                                        oICD9.MoveICD(ID, e.ClickedItem.Tag.ToString());
                                    }
                                }
                                else if (e.ClickedItem.Tag.ToString() == "InvalidICD")
                                {
                                    if (MessageBox.Show("Are you sure you want to mark this record as Invalid ?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                    {
                                        if (SelectedView == 1)
                                        {
                                            oICD9.MarkAsInvalidForEDI(icdCode, icdDescription, gloICD.CodeRevision.ICD9);
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.ICD9, ActivityType.MarkedInvalid, "Marked Invalid ICD-9 Code:" + icdCode.ToString(), 0, ID, 0, ActivityOutCome.Success);
                                        }
                                        else if (SelectedView == 4)
                                        {
                                            oICD9.MarkAsInvalidForEDI(icdCode, icdDescription, gloICD.CodeRevision.ICD10);
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.ICD10, ActivityType.MarkedInvalid, "Marked Invalid ICD-10 Code:" + icdCode.ToString(), 0, ID, 0, ActivityOutCome.Success);
                                        }
                                        
                                    }
                                }

                                if (ofrmICD9 != null) { ofrmICD9.Dispose(); ofrmICD9 = null; }
                            }

                        }
                    }

                    if (SelectedView == 1)
                    { LoadICDCodes(ID, gloICD.CodeRevision.ICD9); }
                    else if (SelectedView == 4)
                    { LoadICDCodes(ID, gloICD.CodeRevision.ICD10); }
                }
                else if (SelectedView == 24)
                {
                    if (dgMasters.RowCount > 0)
                    {
                        if (e.ClickedItem.Tag.ToString() == "ValidICD")
                        {

                            List<string> icdCodes = new List<string>();

                            for (int _CodeIndex = 0; _CodeIndex < dgMasters.Rows.Count; _CodeIndex++)
                            {
                                if (dgMasters.Rows[_CodeIndex].Cells["Select"].Value != DBNull.Value)
                                {
                                    if (Convert.ToBoolean(dgMasters.Rows[_CodeIndex].Cells["Select"].Value) == true)
                                    {
                                        icdCodes.Add(dgMasters.Rows[_CodeIndex].Cells["sICD9Code"].Value.ToString());
                                    }
                                }
                            }
                            if (icdCodes.Count > 0)
                            {
                                using (ICD9 oICD9 = new ICD9(_databaseconnectionstring))
                                {
                                    oICD9.MarkAsValidForEDI(icdCodes);
                                }
                            }
                        }
                    }
                    LoadInvalidICD(SelectedICD);
                }
               
                #endregion

                switch (SelectedView)
                {
                    //For CPT
                    case 58:

                        if (e.ClickedItem.Tag.ToString() == "Add")
                        {

                            ShowCommonCPT();


                        }


                        if (e.ClickedItem.Tag.ToString() == "Delete")
                        {
                            if (dgMasters.Rows.IndexOf(dgMasters.SelectedRows[0]) >= 0)
                            {
                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                {
                                    DataGridViewRow dr = dgMasters.SelectedRows[0];
                                    Int64 commoncptid = Convert.ToInt64(dr.Cells[0].Value);


                                    Delete_CommonCPT(commoncptid, 1);



                                }

                            }

                        }



                        break;
                    case 2:
                        {
                            #region CPT

                            #region " Get ID for Selected CPT "

                            //Declare a object of CPT Master form
                            frmSetupCPT ofrmCPT;
                            //Declare ID and code
                            Int64 CPTID = 0;
                            string _strCPTCode = "";

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CPTID is Not Present
                                    return;
                                else
                                    CPTID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                _strCPTCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                            }

                            #endregion " Get ID for Selected CPT "

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {

                                        #region " Add CPT through Master frmSetupCPT "

                                        // new object for a form frmSetupCPT
                                        ofrmCPT = new frmSetupCPT(_databaseconnectionstring);

                                        //show form as dialog
                                        ofrmCPT.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_CPT(ofrmCPT.CPTID);

                                        //Dispose the form object
                                        ofrmCPT.Dispose();

                                        #endregion " Add CPT through Master frmSetupCPT "
                                        break;
                                    }
                                //To modify CPT
                                case "Modify":
                                    {

                                        #region " Modify CPT "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check CPTID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                ofrmCPT = new frmSetupCPT(CPTID, false, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmCPT.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmCPT.ShowDialog(this);
                                                ofrmCPT.Dispose();
                                                ofrmCPT = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this CPT.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_CPT(CPTID);

                                        #endregion " Modify CPT "
                                        break;
                                    }
                                case "Modify Multiple":
                                    {

                                        #region " Modify Multiple CPT "


                                        ofrmCPT = new frmSetupCPT(CPTID, true, _databaseconnectionstring);

                                        ofrmCPT.ShowDialog(this);
                                        ofrmCPT.Dispose();
                                        ofrmCPT = null;
                                        Fill_CPT(CPTID);

                                        #endregion " Modify CPT "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Block CPT "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                CPT oCPT = new CPT(_databaseconnectionstring);

                                                if (oCPT.IsCPTCodeInUse(Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value).Trim()))
                                                {
                                                    MessageBox.Show("CPT Code is in use.  It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                else
                                                {

                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        oCPT.CPTID = CPTID;
                                                        //if (oCPT.Block())
                                                        if (oCPT.Delete(CPTID))
                                                        {

                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.Delete, "Delete CPT ", 0, CPTID, 0, ActivityOutCome.Success);
                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                                oCPT.Dispose();
                                                oCPT = null;
                                            }

                                        }
                                        Fill_CPT(0);

                                        #endregion " Block CPT "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_CPT(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    //For Modifier
                    case 3:
                        {
                            #region Modifier

                            #region  " Get ID for Selected Modifier "

                            //Declare a object of Modifier Master form
                            frmSetupModifier ofrmModifier;
                            //Declare ID and code
                            Int64 ModifierID = 0;
                            string _strModifierCode = "";

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If ModifierID is Not Present
                                    return;
                                else
                                    ModifierID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                _strModifierCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                            }

                            #endregion  " Get ID for Selected Modifier "


                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "To add Modifier through Master frmSetupModifier"

                                        // new object for a form frmSetupModifier
                                        ofrmModifier = new frmSetupModifier(_databaseconnectionstring);

                                        //show form as dialog
                                        ofrmModifier.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_Modifiers(ofrmModifier.ModifierID);

                                        //Dispose the form object
                                        ofrmModifier.Dispose();

                                        #endregion "To add Modifier through Master frmSetupModifier"
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " To modify Modifier "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check ModifierID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                ofrmModifier = new frmSetupModifier(ModifierID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmModifier.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmModifier.ShowDialog(this);
                                                ofrmModifier.Dispose();
                                                ofrmModifier = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this modifier.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }
                                        //Fill data
                                        Fill_Modifiers(ModifierID);

                                        #endregion " To modify Modifier "
                                        break;
                                    }

                                case "Delete":
                                    {
                                        #region " Block Modifier "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                Modifier oModifier = new Modifier(_databaseconnectionstring);
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {

                                                    //if (oModifier.Block(ModifierID))
                                                    if (oModifier.Delete(ModifierID))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Modifier, ActivityType.Delete, "Delete Modifier ", 0, ModifierID, 0, ActivityOutCome.Success);

                                                        // MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }
                                                oModifier.Dispose();
                                                oModifier = null;
                                            }

                                        }
                                        Fill_Modifiers(0);

                                        #endregion " Block Modifier "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Modifiers(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    ////For Category
                    case 5:
                        {
                            #region Category

                            #region " Get ID for Selected Category "

                            //Declare a object of Category Master form
                            frmSetupCategory ofrmCategory;
                            //Declare ID and code
                            Int64 CategoryID = 0;
                            string _strCategoryCode = "";

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }

                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                {
                                    // If CategoryID is Not Present
                                    return;
                                }
                                else if (Convert.ToBoolean(Convert.ToString(dgMasters.SelectedRows[0].Cells[4].Value)) == true)
                                {
                                    MessageBox.Show("Cannot " + Convert.ToString(e.ClickedItem.Tag).ToLower() + " system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }
                                else
                                    CategoryID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                _strCategoryCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                            }

                            #endregion " Get ID for Selected Category "

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " To add Category through Master frmSetupCategory "

                                        // new object for a form frmSetupCategory
                                        ofrmCategory = new frmSetupCategory(_databaseconnectionstring);

                                        //show form as dialog
                                        ofrmCategory.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_Category(ofrmCategory.catID);

                                        //Dispose the form object
                                        ofrmCategory.Dispose();

                                        #endregion " To add Category through Master frmSetupCategory "
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " To modify Category "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            // added by sandip dhakane 20100729 to restrict system record template from editting or modifying
                                            ArrayList _Category = new ArrayList();

                                            string[] _aCat;
                                            string cat = "Labs,RADIOLOGY,Tags,Messages,Patient Letters,Referral Letter,SOAP,PTProtocol,Wellness Guidelines,Disease Management,Patient Consent,Fax Cover Page,Patient Education,Orders,Preventive Services,Disclosure Management,Nurses Notes,MIS Reports";
                                            _aCat = cat.Split(',');

                                            for (int i = 0; i <= _aCat.Length - 1; i++)
                                            {
                                                _Category.Add(_aCat[i]);

                                            }

                                            if (_Category.Contains(dgMasters.SelectedRows[0].Cells[1].Value.ToString()) && dgMasters.SelectedRows[0].Cells[2].Value.ToString() == "Template")
                                            {
                                                MessageBox.Show("Cannot modify system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                            // end code

                                            //Check CategoryID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                ofrmCategory = new frmSetupCategory(CategoryID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmCategory.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmCategory.ShowDialog(this);
                                                ofrmCategory.Dispose();
                                                ofrmCategory = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this category.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_Category(CategoryID);

                                        #endregion " To modify Category "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Block Category "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            // added by sandip dhakane 20100729 to restrict system record template from deleteing
                                            ArrayList _Category = new ArrayList();

                                            string[] _aCat;
                                            // Problem # = 160 MIS Report category included in System categories, so that user will not be able delete.
                                            string cat = "Labs,RADIOLOGY,Tags,Messages,Patient Letters,Referral Letter,SOAP,PTProtocol,Wellness Guidelines,Disease Management,Patient Consent,Fax Cover Page,Patient Education,Orders,Preventive Services,Disclosure Management,Nurses Notes,MIS Reports";
                                            _aCat = cat.Split(',');

                                            for (int i = 0; i <= _aCat.Length - 1; i++)
                                            {
                                                _Category.Add(_aCat[i]);

                                            }

                                            if (_Category.Contains(dgMasters.SelectedRows[0].Cells[1].Value.ToString()) && dgMasters.SelectedRows[0].Cells[2].Value.ToString() == "Template")
                                            {
                                                MessageBox.Show("Cannot delete system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                            // end code
                                           
                                            Category oCategory = new Category(_databaseconnectionstring);
                                            string strcatype = Convert.ToString(dgMasters.SelectedRows[0].Cells[3].Value);
                                            string strCatDesc = Convert.ToString(dgMasters.SelectedRows[0].Cells[2].Value);
                                            string strCode = Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value);
                                            if ((strcatype.ToUpper() == "LANGUAGE") | (strcatype.ToUpper() == "RACE") | (strcatype.ToUpper() == "ETHNICITY") | (strcatype.ToUpper() == "GENDER IDENTITY") | (strcatype.ToUpper() == "SEXUAL ORIENTATION") | (strcatype.ToUpper() == "RACE SPECIFICATION") | (strcatype.ToUpper() == "ETHNICITY SPECIFICATION") | (strcatype.ToUpper() == "BIRTH SEX"))
                                            {
                                                if ((IsCategoryUsedInPatientDetails(strCatDesc, strcatype, strCode) == true))
                                                {
                                                    MessageBox.Show("Selected category is associated with patient(s),can not be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    return;
                                                }
                                            }

                                          

                                            if (oCategory.IsCPTCategoryInUse(CategoryID, _strCategoryCode))
                                            {
                                                MessageBox.Show("CPT Category is in use.  It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            else
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {

                                                        //if (oCategory.Block(CategoryID))
                                                        if (oCategory.Delete(CategoryID))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Category, ActivityType.Delete, "Delete Category ", 0, CategoryID, 0, ActivityOutCome.Success);

                                                            // MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                            }
                                            if (oCategory != null)
                                            {
                                                oCategory.Dispose();
                                            }

                                        }
                                        Fill_Category(0);

                                        #endregion " Block Category "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Category(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    case 6:
                        {
                            #region " Insurance CPT Association "
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Close":
                                    this.Close();
                                    break;
                            }
                            #endregion " Insurance CPT Association "
                        }
                        break;

                    case 7: //Type of Service  
                        {
                            #region Type Of Service

                            {


                                switch (e.ClickedItem.Tag.ToString())
                                {
                                    case "Add":
                                        {
                                            #region " Add TOS "

                                            frmSetupTOS ofrmSetupTOS = new frmSetupTOS(_databaseconnectionstring, 0);
                                            ofrmSetupTOS.ShowDialog(this);
                                            Fill_TOS(ofrmSetupTOS.TOSID);
                                            ofrmSetupTOS.Dispose();
                                            ofrmSetupTOS = null;
                                            #endregion " Add TOS "
                                            break;
                                        }

                                    case "Modify":
                                        {
                                            #region " Modify TOS "

                                            frmSetupTOS ofrmSetupTOS = new frmSetupTOS(_databaseconnectionstring, ID);
                                            //Code Added by Mayuri:20091103
                                            //To make invisible button save if form gets open for modify
                                            ofrmSetupTOS.tsb_Save.Visible = false;
                                            //End Code Added by Mayuri:20091103
                                            ofrmSetupTOS.ShowDialog(this);
                                            Fill_TOS(ID);
                                            ofrmSetupTOS.Dispose();
                                            ofrmSetupTOS = null;
                                            #endregion " Modify TOS "
                                            break;
                                        }

                                    case "Delete":
                                        {
                                            #region " Block TOS "

                                            if (dgMasters.SelectedRows.Count > 0)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        CLsBL_TOSPOS oTOS = new CLsBL_TOSPOS(_databaseconnectionstring);
                                                        //if (oTOS.BlockTOS(ID))
                                                        if (oTOS.DeleteTOS(ID))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.TOS, ActivityType.Delete, "Delete Type Of Service ", 0, ID, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                        oTOS.Dispose();
                                                        oTOS = null;
                                                    }
                                                }
                                            }
                                            Fill_TOS(0);
                                            break;

                                            #endregion " Block TOS "
                                        }
                                    case "Refresh":
                                        {
                                            Fill_TOS(0);
                                            break;
                                        }
                                    case "Close":
                                        {
                                            this.Close();
                                            break;
                                        }

                                }
                            }
                            break;
                            #endregion
                        }

                    case 8: //Place Of Service
                        {
                            #region Place Of Service
                            {

                                switch (e.ClickedItem.Tag.ToString())
                                {
                                    case "Add":
                                        {
                                            #region " Add POS "

                                            frmSetupPOS ofrmSetupPOS = new frmSetupPOS(_databaseconnectionstring, 0);
                                            ofrmSetupPOS.ShowDialog(this);
                                            Fill_POS(ofrmSetupPOS.POSID);
                                            ofrmSetupPOS.Dispose();
                                            ofrmSetupPOS = null;
                                            #endregion " Add POS "
                                            break;
                                        }

                                    case "Modify":
                                        {
                                            #region " Modify POS "

                                            frmSetupPOS ofrmSetupPOS = new frmSetupPOS(_databaseconnectionstring, ID);
                                            //Code Added by Mayuri:20091103
                                            //To make invisible button save if form gets open for modify
                                            ofrmSetupPOS.tsb_Save.Visible = false;
                                            //End Code Added by Mayuri:20091103
                                            ofrmSetupPOS.ShowDialog(this);
                                            Fill_POS(ID);
                                            ofrmSetupPOS.Dispose();
                                            ofrmSetupPOS = null;
                                            #endregion " Modify POS "
                                            break;
                                        }

                                    case "Delete":
                                        {
                                            #region " Block POS "
                                            if (dgMasters.SelectedRows.Count > 0)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    CLsBL_TOSPOS oTOSPOS = new CLsBL_TOSPOS(_databaseconnectionstring);
                                                    if (oTOSPOS.IsPOSCodeInUse(Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value).Trim(), Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value)))
                                                    {
                                                        MessageBox.Show("POS is in use.  It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    }
                                                    else
                                                    {
                                                        if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                        {
                                                            CLsBL_TOSPOS oPOS = new CLsBL_TOSPOS(_databaseconnectionstring);
                                                            //if (oPOS.BlockPOS(ID))
                                                            if (oPOS.DeletePOS(ID))
                                                            {
                                                                gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.POS, ActivityType.Delete, "Delete Place Of Service ", 0, ID, 0, ActivityOutCome.Success);

                                                                //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                            }
                                                            oPOS.Dispose();
                                                            oPOS = null;
                                                        }

                                                    }
                                                    oTOSPOS.Dispose();
                                                }
                                            }
                                            Fill_POS(0);

                                            #endregion " Block POS "
                                            break;
                                        }
                                    case "Refresh":
                                        {
                                            Fill_POS(0);
                                            break;
                                        }
                                    case "Close":
                                        {
                                            this.Close();
                                        }
                                        break;
                                }
                            }
                            break;
                            #endregion
                        }
                    case 9: //Facility
                        {
                            #region " Facility "
                            {
                                switch (e.ClickedItem.Tag.ToString())
                                {
                                    case "Add":
                                        {
                                            #region " Add Facility "

                                            frmSetupFacility ofrmSetupFacility = new frmSetupFacility(0, _databaseconnectionstring);
                                            ofrmSetupFacility.ShowDialog(this);
                                            Fill_Facility(ofrmSetupFacility.FacilityID);
                                            ofrmSetupFacility.Dispose();
                                            ofrmSetupFacility = null;
                                            #endregion " Add Facility "
                                            break;
                                        }

                                    case "Modify":
                                        {
                                            #region " Modify Facility "

                                            frmSetupFacility ofrmSetupFacility = new frmSetupFacility(ID, _databaseconnectionstring);
                                            //Code Added by Mayuri:20091103
                                            //To make invisible button save if form gets open for modify
                                            ofrmSetupFacility.tsb_Save.Visible = false;
                                            //End Code Added by Mayuri:20091103
                                            ofrmSetupFacility.ShowDialog(this);
                                            Fill_Facility(ID);
                                            ofrmSetupFacility.Dispose();
                                            ofrmSetupFacility = null;
                                            #endregion " Modify Facility "
                                            break;
                                        }
                                    case "Delete":
                                        {
                                            #region " Block Facility "

                                            if (dgMasters.SelectedRows.Count > 0)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    CPT ocpt = new CPT(_databaseconnectionstring);

                                                    if (ocpt.IsFacilityInUse(dgMasters.SelectedRows[0].Cells[0].Value.ToString()))
                                                    {
                                                        MessageBox.Show("Facility is in use.  It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    }
                                                    else
                                                    {

                                                        if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                        {
                                                            gloFacility ogloFacility = new gloFacility(_databaseconnectionstring);
                                                            //if (ogloFacility.BlockFacility(ID))
                                                            if (ogloFacility.Delete(ID))
                                                            {
                                                                ogloFacility.DeleteFacility_Location(ID);
                                                                ogloFacility.DeleteFacility_QualifierIDs(ID);
                                                                gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Facility, ActivityType.Delete, "Delete Facility", 0, ID, 0, ActivityOutCome.Success);
                                                                // MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                            }
                                                            //Clear Facility Cache if Facility is added or modified
                                                            gloGlobal.gloPMMasters.ClearCache(gloGlobal.gloPMMasters.MasterType.Facilities);
                                                            ogloFacility.Dispose();
                                                            ogloFacility = null;
                                                        }
                                                    }
                                                    ocpt.Dispose();
                                                    ocpt = null;
                                                }
                                            }
                                            Fill_Facility(0);

                                            #endregion " Block Facility "
                                            break;
                                        }
                                    case "Refresh":
                                        {
                                            Fill_Facility(0);
                                            break;
                                        }
                                    case "Close":
                                        {
                                            this.Close();
                                        }
                                        break;
                                }
                            }
                            break;

                            #endregion " Facility "
                        }
                    case 11:
                        {
                            #region " Smart Treatment "
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add "
                                        frmSetupSmartTreatment ofrmSetupSmartTreatment = new frmSetupSmartTreatment(_databaseconnectionstring, 0, "");
                                        ofrmSetupSmartTreatment.CloseButton_Click += new frmSetupSmartTreatment.CloseButtonClick(ofrmSetupSmartTreatment_CloseButton_Click);
                                        ofrmSetupSmartTreatment.MdiParent = this.MdiParent;
                                        ofrmSetupSmartTreatment.WindowState = FormWindowState.Maximized;
                                        ofrmSetupSmartTreatment.Show();
                                        //FillSmartTreatment();
                                        #endregion " Add "
                                        break;
                                    }

                                case "Modify":
                                    {
                                        #region " Modify "
                                        frmSetupSmartTreatment ofrmSetupSmartTreatment = new frmSetupSmartTreatment(_databaseconnectionstring, Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value), Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value));
                                        ofrmSetupSmartTreatment.CloseButton_Click += new frmSetupSmartTreatment.CloseButtonClick(ofrmSetupSmartTreatment_CloseButton_Click);
                                        ofrmSetupSmartTreatment.MdiParent = this.MdiParent;
                                        ofrmSetupSmartTreatment.WindowState = FormWindowState.Maximized;
                                        //Code Added by Mayuri:20091103
                                        //To make invisible button save if form gets open for modify
                                        ofrmSetupSmartTreatment.tsb_Save.Visible = false;
                                        //End Code Added by Mayuri:20091103
                                        ofrmSetupSmartTreatment.Show();
                                        #endregion " Modify "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        DeleteTreatment();
                                        FillSmartTreatment();
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        FillSmartTreatment();
                                        break;
                                    }
                                case "Close":
                                    this.Close();
                                    break;
                            }
                            #endregion " Smart Treatment "
                        }
                        break;
                    case 12:
                        {
                            #region " Code Type "
                            switch (e.ClickedItem.Tag.ToString())
                            {


                                case "Add":
                                    {
                                        #region " Code Type "

                                        frmCodeType ofrmctype = new frmCodeType(_databaseconnectionstring);
                                        ofrmctype.ShowDialog(this);

                                        Fill_Codetype(ofrmctype.CodeTypeID);
                                        ofrmctype.Dispose();

                                        #endregion " Code Type "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Code Type"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check ICD9ID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                frmCodeType ofrmctype = new frmCodeType(ID, _databaseconnectionstring);
                                                ofrmctype.tsb_Save.Visible = false;

                                                ofrmctype.ShowDialog(this);
                                                Fill_Codetype(ID);
                                                ofrmctype.Dispose();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this code type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }



                                        #endregion " Modify Code Type "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Code Type "
                                        CodeType oCtype = new CodeType(_databaseconnectionstring);
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    if (oCtype.DeleteCodetype(ID))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CodeType, ActivityType.Delete, "Delete Code Type", 0, ID, 0, ActivityOutCome.Success);

                                                        //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }
                                            }
                                        }
                                        oCtype.Dispose();
                                        oCtype = null;
                                        Fill_Codetype(0);

                                        #endregion " Delete Code Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Codetype(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " Code Type "
                        }
                        break;
                    case 13:
                        {
                            #region " Patient Relationship "

                            switch (e.ClickedItem.Tag.ToString())
                            {


                                case "Add":
                                    {
                                        #region " Patient Relationship "

                                        gloPatient.frmPatientRelationship ofrmRel = new gloPatient.frmPatientRelationship(_databaseconnectionstring);
                                        ofrmRel.ShowDialog(this);


                                        Fill_PatientRelationship(ofrmRel.nPatientRelationshipID);
                                        ofrmRel.Dispose();

                                        #endregion " Patient Relationship "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Patient Relationship"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[5].Value.ToString() == "True")
                                            {
                                                MessageBox.Show("Cannot modify system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                gloPatient.frmPatientRelationship ofrmRel = new gloPatient.frmPatientRelationship(ID, _databaseconnectionstring);
                                                //frmPatientRelationship ofrmRel = new frmPatientRelationship(ID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify

                                                ofrmRel.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmRel.ShowDialog(this);
                                                ofrmRel.Dispose();

                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this relationship.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_PatientRelationship(ID);

                                        #endregion " Modify Patient Relationship "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Patient Relationship "
                                        gloPatient.RelationShip oRel = new gloPatient.RelationShip(_databaseconnectionstring);
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[5].Value.ToString() == "True")
                                            {
                                                MessageBox.Show("Cannot delete system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    oRel.Delete(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Relationship, ActivityType.Delete, "Delete Patient Relationship", 0, ID, 0, ActivityOutCome.Success);

                                                    //if (oCtype.DeleteCodetype(ID))
                                                    //{
                                                    //    //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    //}
                                                }
                                            }
                                        }
                                        oRel.Dispose();
                                        oRel = null;
                                        Fill_PatientRelationship(0);
                                        #endregion " Delete Patient Relationship "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_PatientRelationship(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " Code Type "

                        }
                        break;
                    case 14:
                        {
                            #region " Flag Type "

                            switch (e.ClickedItem.Tag.ToString())
                            {


                                case "Add":
                                    {
                                        #region " Flag Type "

                                        frmSetup_FlagType ofrmFtype = new frmSetup_FlagType(_databaseconnectionstring);
                                        ofrmFtype.ShowDialog(this);

                                        Fill_Flags(ofrmFtype.flagtypeID);
                                        //Fill_FlagTypes();
                                        ofrmFtype.Dispose();

                                        #endregion "Flag Type "1
                                        break;
                                    }

                                case "Modify":
                                    {

                                        //Check whether row in a grid is selected to modify or not
                                        if (c1AppointmentType.Rows.Count > 0)
                                        {
                                            if (c1AppointmentType.Rows[0].ToString() != "" || c1AppointmentType.Rows[0].ToString() != "0")
                                            {
                                                frmSetup_FlagType ofrmFtype = new frmSetup_FlagType(ID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmFtype.ToolStripButton1.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmFtype.ShowDialog(this);
                                                ofrmFtype.Dispose();
                                                ofrmFtype = null;
                                            }
                                            //if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            //{

                                            //    frmSetup_FlagType ofrmFtype = new frmSetup_FlagType(ID ,_databaseconnectionstring);
                                            //    ofrmFtype.ShowDialog(this);

                                            //}
                                            //else
                                            //{
                                            //    MessageBox.Show("You Cannot modify this  Flag Type", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            //}

                                        }

                                        //Fill_FlagTypes();
                                        Fill_Flags(ID);


                                        break;
                                    }
                                case "Delete":
                                    {

                                        #region " Delete  "

                                        if (c1AppointmentType.Rows.Count > 0)
                                        {
                                            FlagType oFtype = new FlagType(_databaseconnectionstring);
                                            if (c1AppointmentType.Rows[0].ToString() != "" || c1AppointmentType.Rows[0].ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    oFtype.DeleteFlagtype(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.FlagType, ActivityType.Delete, "Delete Flag Type", 0, ID, 0, ActivityOutCome.Success);


                                                }
                                            }
                                            oFtype.Dispose();
                                            oFtype = null;
                                        }
                                        Fill_Flags(0);
                                        //Fill_FlagTypes ();
                                        #endregion " Delete Flag Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Flags(0);
                                        //Fill_FlagTypes();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion

                        }

                        break;
                    case 15:
                        {
                            #region " Specialty "

                            switch (e.ClickedItem.Tag.ToString())
                            {


                                case "Add":
                                    {
                                        #region " Specialty "

                                        frmSetupSpecialty ofrSpec = new frmSetupSpecialty(_databaseconnectionstring);
                                        ofrSpec.ShowDialog(this);

                                        Fill_Specialty(ofrSpec.SpecialtyID);
                                        ofrSpec.Dispose();

                                        #endregion " Specialty "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Specialty"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                frmSetupSpecialty ofrmSpec = new frmSetupSpecialty(ID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSpec.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103

                                                ofrmSpec.ShowDialog(this);
                                                ofrmSpec.Dispose();
                                                ofrmSpec = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this specialty.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_Specialty(ID);

                                        #endregion " Modify Specialty "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Specialty "
                                        Specialty ospec = new Specialty(_databaseconnectionstring);
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    ospec.Delete(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Speciality, ActivityType.Delete, "Delete Speciality", 0, ID, 0, ActivityOutCome.Success);

                                                    Fill_Specialty(0);
                                                }
                                            }
                                        }
                                        ospec.Dispose();
                                        ospec = null;
                                        #endregion " Delete Specialty "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Specialty(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " Specialty "

                        }
                        break;
                    case 16:
                        {
                            #region " Insurance Service Type "

                            switch (e.ClickedItem.Tag.ToString())
                            {


                                case "Add":
                                    {
                                        #region " Insurance Service Type "

                                        frmInsuranceServiceType ofrmServicetype = new frmInsuranceServiceType(_databaseconnectionstring);
                                        ofrmServicetype.ShowDialog(this);

                                        Fill_InsuranceServicetype(ofrmServicetype.ServiceTypeID);
                                        ofrmServicetype.Dispose();

                                        #endregion " Insurance Service Type "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Insurance Service Type"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                frmInsuranceServiceType ofrmServicetype = new frmInsuranceServiceType(ID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmServicetype.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103


                                                ofrmServicetype.ShowDialog(this);
                                                ofrmServicetype.Dispose();
                                                ofrmServicetype = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this insurance service type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_InsuranceServicetype(ID);

                                        #endregion " Modify Insurance Service Type "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Insurance Service Type "
                                        ServiceType oStype = new ServiceType(_databaseconnectionstring);
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    oStype.DeleteInsuranceServiceType(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Speciality, ActivityType.Delete, "Delete Speciality", 0, ID, 0, ActivityOutCome.Success);

                                                    Fill_InsuranceServicetype(0);
                                                }
                                            }
                                        }
                                        oStype.Dispose();
                                        oStype = null;
                                        #endregion " Delete Insurance Service Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_InsuranceServicetype(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " Insurance Service Type "

                        }
                        break;
                    case 17:
                        {
                            #region " Insurance Plan Codes "

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Insurance Plan Codes "

                                        frmSetupInsurancePlan ofrmSetupInsurancePlan = new frmSetupInsurancePlan(_databaseconnectionstring);
                                        ofrmSetupInsurancePlan.ShowDialog(this);

                                        Fill_InsurancePlan(ofrmSetupInsurancePlan.InsurancePlanID);
                                        ofrmSetupInsurancePlan.Dispose();

                                        #endregion "  Insurance Plan Codes "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Insurance Plan Codes"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                frmSetupInsurancePlan ofrmSetupInsurancePlan = new frmSetupInsurancePlan(_databaseconnectionstring, ID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupInsurancePlan.tsb_save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupInsurancePlan.ShowDialog(this);
                                                ofrmSetupInsurancePlan.Dispose();
                                                ofrmSetupInsurancePlan = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this insurance plan code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_InsurancePlan(ID);

                                        #endregion " Modify Insurance Plan Codes "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Insurance Plan Codes "

                                        frmSetupInsurancePlan ofrmSetupInsurancePlan = new frmSetupInsurancePlan(_databaseconnectionstring);
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    ofrmSetupInsurancePlan.DeleteInsurancePlan(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsurancePlancode, ActivityType.Delete, "Delete Insurance Plan Codes", 0, ID, 0, ActivityOutCome.Success);
                                                    Fill_InsurancePlan(0);
                                                }
                                            }
                                        }
                                        ofrmSetupInsurancePlan.Dispose();
                                        ofrmSetupInsurancePlan = null;
                                        #endregion " Delete Insurance Plan Codes "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_InsurancePlan(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion "  Insurance Plan Codes  "

                        }
                        break;
                    case 18:
                        {
                            #region " Plan Type "

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Plan Type "

                                        frmSetup_InsuranceType ofrmSetupInsuranceType = new frmSetup_InsuranceType(_databaseconnectionstring);
                                        ofrmSetupInsuranceType.ShowDialog(this);

                                        Fill_InsuranceType(ofrmSetupInsuranceType.InsurancetypeID);
                                        ofrmSetupInsuranceType.Dispose();

                                        #endregion " Plan Type "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Plan Type"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                frmSetup_InsuranceType ofrmSetupInsuranceType = new frmSetup_InsuranceType(_databaseconnectionstring, ID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupInsuranceType.tls_btnSave.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupInsuranceType.ShowDialog(this);
                                                ofrmSetupInsuranceType.Dispose();
                                                ofrmSetupInsuranceType = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this plan type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_InsuranceType(ID);

                                        #endregion " Modify Plan Type "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Plan Type"

                                        frmSetup_InsuranceType ofrmSetupInsuranceType = new frmSetup_InsuranceType(_databaseconnectionstring, ID);
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    ofrmSetupInsuranceType.DeleteInsuranceType(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsuranceType, ActivityType.Delete, "Delete Plan Type ", 0, ID, 0, ActivityOutCome.Success);

                                                    Fill_InsuranceType(0);
                                                }
                                            }
                                        }
                                        ofrmSetupInsuranceType.Dispose();
                                        ofrmSetupInsuranceType = null;
                                        #endregion " Delete Plan Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_InsuranceType(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " Plan Type  "

                        }
                        break;
                    case 19:
                        {
                            #region " Clearing House "

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Clearing House "
                                        frmSetupClearingHouse ofrmSetupClearingHouse = new frmSetupClearingHouse(_databaseconnectionstring);
                                        ofrmSetupClearingHouse.ShowDialog(this);
                                        ofrmSetupClearingHouse.Dispose();
                                        Fill_ClearingHouse(ofrmSetupClearingHouse.nClearingHouseID);
                                        #endregion "  "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modifiy Clearing House"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                frmSetupClearingHouse ofrmSetupClearingHouse = new frmSetupClearingHouse(_databaseconnectionstring, ID);
                                                ofrmSetupClearingHouse.ShowDialog(this);
                                                ofrmSetupClearingHouse.Dispose();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this plan type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }
                                        Fill_ClearingHouse(ID);

                                        #endregion "  "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Clearing House"
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                //if (MessageBox.Show("Do you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                    ClearingHouse oClearingHouse = new ClearingHouse(_databaseconnectionstring);
                                                    oClearingHouse.Delete(ID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsuranceType, ActivityType.Delete, "Delete Clearing House", 0, ID, 0, ActivityOutCome.Success);
                                                    oClearingHouse.Dispose();
                                                    oClearingHouse = null;
                                                }
                                            }

                                        }
                                        Fill_ClearingHouse(0);

                                        #endregion "  "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ClearingHouse(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " Plan Type  "

                        }
                        break;
                    case 20:
                        {
                            #region AdjustmentType

                            #region " Get ID for Selected Adjustment Type ID "
                            frmSetupAdjustmentType ofrmSetupAdjustmentType = null;
                            Int64 _AdjustmentTypeID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _AdjustmentTypeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Adjustment Type "

                                        ofrmSetupAdjustmentType = new frmSetupAdjustmentType(_databaseconnectionstring);
                                        ofrmSetupAdjustmentType.ShowDialog(this);
                                        Fill_AdjustmentTypes(ofrmSetupAdjustmentType.AdjustmentTypeID);
                                        ofrmSetupAdjustmentType.Dispose();

                                        #endregion " Add Adjustment Type "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Adjustment Type "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check ICD9ID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                ofrmSetupAdjustmentType = new frmSetupAdjustmentType(_AdjustmentTypeID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupAdjustmentType.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupAdjustmentType.ShowDialog(this);
                                                ofrmSetupAdjustmentType.Dispose();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this adjustment type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_AdjustmentTypes(_AdjustmentTypeID);

                                        #endregion " Modify Adjustment Type "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Adjustment Type "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            AdjustmentType oAdjustmentType = new AdjustmentType(_databaseconnectionstring);
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                string adjustmentTypeCode = string.Empty;
                                                adjustmentTypeCode = Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value).Trim();
                                                if (oAdjustmentType.IsInUse(adjustmentTypeCode) == false)
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        if (oAdjustmentType.DeleteAdjustmentType(_AdjustmentTypeID))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.AdjustmentType, ActivityType.Delete, "Delete AdjustmentType", 0, _AdjustmentTypeID, 0, ActivityOutCome.Success);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Adjustment type is in use cannot delete.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                            }
                                            oAdjustmentType.Dispose();
                                            oAdjustmentType = null;
                                        }

                                        Fill_AdjustmentTypes(0);

                                        #endregion " Delete Adjustment Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_AdjustmentTypes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    case 21:
                        {
                            #region" Fee Schedule "


                            //Switch to check which item of toolstrip is clicked

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Fee Schedule "

                                        frmSetupStdFeeSchedule ofrmSetupStdFeeSchedule = new frmSetupStdFeeSchedule(0, "", _databaseconnectionstring, false);
                                        ofrmSetupStdFeeSchedule.ShowDialog(this);
                                        ofrmSetupStdFeeSchedule.Dispose();
                                        FillStandardShcheduleNames(0);
                                        if (dgMasters.Rows.Count > 0)
                                            tsb_SaveAsCopy.Visible = true;
                                        else
                                            tsb_SaveAsCopy.Visible = false;
                                        #endregion " Fee Schedule "

                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Fee Schedule "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                FeeScheduleTypeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                FeeScheduleType = Convert.ToString(dgMasters.SelectedRows[0].Cells[2].Value.ToString());
                                                frmSetupStdFeeSchedule ofrmSetupStdFeeSchedule = new frmSetupStdFeeSchedule(FeeScheduleTypeID, FeeScheduleType, _databaseconnectionstring, false);
                                                ofrmSetupStdFeeSchedule.ShowDialog(this);
                                                FillStandardShcheduleNames(FeeScheduleTypeID);
                                                ofrmSetupStdFeeSchedule.Dispose();
                                                ofrmSetupStdFeeSchedule = null;
                                            }
                                        }
                                        #endregion " Fee Schedule "
                                        break;
                                    }

                                case "Delete":
                                    {
                                        #region " Fee Schedule "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (Convert.ToString(dgMasters.SelectedRows[0].Cells[2].Value.ToString()) != "")
                                            {
                                                ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                                                if (CLsBL_FeeSchedule.IsFeeScheduleInUse(ID))
                                                {
                                                    MessageBox.Show("Fee Schedule is in use.  It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                else
                                                {

                                                    if (MessageBox.Show("Are you sure you want to delete this Fee Schedule?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        CLsBL_FeeSchedule.DeleteStdFeeSchedule(ID);
                                                        FillStandardShcheduleNames(0);
                                                    }
                                                }

                                            }
                                        }
                                        #endregion " Fee Schedule "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        FillStandardShcheduleNames(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    case 22:
                        {
                            #region " Fee Schedule Allocation "

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        frmSetupFeeScheduleAllocation ofrm = new frmSetupFeeScheduleAllocation(_databaseconnectionstring, 0);
                                        ofrm.ShowDialog(this);
                                        ofrm.Dispose();
                                        Fill_StandardFeeScheduleAllocation(0);
                                        break;
                                    }

                                case "Modify":
                                    {

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                frmSetupFeeScheduleAllocation ofrm = new frmSetupFeeScheduleAllocation(_databaseconnectionstring, ID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrm.tsbOnlySave.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrm.ShowDialog(this);
                                                ofrm.Dispose();

                                            }
                                        }
                                        Fill_StandardFeeScheduleAllocation(ID);
                                        break;
                                    }
                                case "Delete":
                                    {
                                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                        {
                                            ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                            if (ID > 0)
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this Fee Schedule Allocation?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    DeleteFeeScheduleAllocation(ID);
                                                }
                                            }
                                            else
                                            {
                                                MessageBox.Show("No record to delete.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                        }
                                        Fill_StandardFeeScheduleAllocation(0);
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_StandardFeeScheduleAllocation(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            #endregion " "

                        }
                        break;
                    case 25:
                        {
                            #region " CPT Scrubber "

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        frmSetupScrubber ofrm = new frmSetupScrubber(_databaseconnectionstring);
                                        ofrm.ShowDialog(this);
                                        ofrm.Dispose();
                                        Fill_Scrubber(0);
                                        break;
                                    }

                                case "Modify":
                                    {

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            gloScrubber ogloScrubber = new gloScrubber(_databaseconnectionstring);
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                string sCPTCode = dgMasters.SelectedRows[0].Cells[0].Value.ToString();

                                                frmSetupScrubber ofrm = new frmSetupScrubber(sCPTCode, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrm.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrm.ShowDialog(this);
                                                ofrm.Dispose();
                                                Fill_Scrubber(0);
                                            }
                                            ogloScrubber.Dispose();
                                            ogloScrubber = null;
                                        }
                                        break;
                                    }
                                case "Delete":
                                    {
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            gloScrubber ogloScrubber = new gloScrubber(_databaseconnectionstring);
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    string sCPTCode = dgMasters.SelectedRows[0].Cells[0].Value.ToString();
                                                    //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                    if (ogloScrubber.DeleteScruber(sCPTCode))
                                                    {
                                                        Fill_Scrubber(0);
                                                    }
                                                }
                                            }
                                            ogloScrubber.Dispose();
                                            ogloScrubber = null;
                                        }
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Scrubber(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                            }
                            #endregion " "
                        }
                        break;
                    case 23:
                        {
                            #region Credit Card Type

                            #region " Get ID for Selected card Type ID "
                            frmSetupCardType ofrmSetupCardType = null;
                            Int64 _ID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Card Type "

                                        ofrmSetupCardType = new frmSetupCardType(_databaseconnectionstring);
                                        ofrmSetupCardType.ShowDialog(this);
                                        Fill_CreditCards(ofrmSetupCardType.CreditCardID);
                                        ofrmSetupCardType.Dispose();

                                        #endregion " Add Adjustment Type "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Adjustment Type "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check ICD9ID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                ofrmSetupCardType = new frmSetupCardType(_databaseconnectionstring, _ID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupCardType.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupCardType.ShowDialog(this);
                                                ofrmSetupCardType.Dispose();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this card type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_CreditCards(_ID);

                                        #endregion " Modify Adjustment Type "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Adjustment Type "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            CreditCards oCreditCards = new CreditCards(_databaseconnectionstring);
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (oCreditCards.checkExistsCCType(Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value.ToString()).Trim()))
                                                {
                                                    MessageBox.Show("Credit Card Type is in use .It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                else
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                        if (oCreditCards.Block(_ID))
                                                        {
                                                            //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.AdjustmentType, ActivityType.Delete, "Delete AdjustmentType", 0, _AdjustmentTypeID, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }

                                                    }
                                                }
                                            }
                                            oCreditCards.Dispose();
                                            oCreditCards = null;
                                        }

                                        Fill_CreditCards(0);

                                        #endregion " Delete Adjustment Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_CreditCards(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    case 26:
                        {
                            #region Referral CPT

                            #region " Get ID for Selected CPT "

                            //Declare a object of CPT Master form
                            frmSetupReferralCPT ofrmSetupReferralCPT;
                            //Declare ID and code
                            Int64 CPTID = 0;
                            string _strCPTCode = "";

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CPTID is Not Present
                                    return;
                                else
                                    CPTID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                _strCPTCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                            }

                            #endregion " Get ID for Selected CPT "

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add CPT through Master frmSetupReferralCPT "

                                        // new object for a form frmSetupCPT
                                        ofrmSetupReferralCPT = new frmSetupReferralCPT(_databaseconnectionstring);

                                        //show form as dialog
                                        ofrmSetupReferralCPT.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_ReferralCPTs(ofrmSetupReferralCPT.CPTID);

                                        //Dispose the form object
                                        ofrmSetupReferralCPT.Dispose();

                                        #endregion " Add CPT through Master frmSetupReferralCPT "
                                        break;
                                    }
                                //To modify CPT
                                case "Modify":
                                    {

                                        #region " Modify Referral CPT "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check CPTID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                ofrmSetupReferralCPT = new frmSetupReferralCPT(_databaseconnectionstring, CPTID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupReferralCPT.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupReferralCPT.ShowDialog(this);
                                                ofrmSetupReferralCPT.Dispose();
                                                ofrmSetupReferralCPT = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this CPT.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_ReferralCPTs(CPTID);

                                        #endregion " Modify CPT "
                                        break;
                                    }


                                case "Delete":
                                    {
                                        #region " Delete Referral CPT "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                gloReferralCPT ogloReferralCPT = new gloReferralCPT(_databaseconnectionstring);
                                                Int64 _result = 0;
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    _result = ogloReferralCPT.DeleteReferralCPT(Convert.ToString(dgMasters.SelectedRows[0].Cells["sCPTCode"].Value).Trim());
                                                    if (_result > 0)
                                                    {
                                                        //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.Delete, "Delete Referral CPT ", 0, CPTID, 0, ActivityOutCome.Success);
                                                    }
                                                }
                                                ogloReferralCPT.Dispose();
                                                ogloReferralCPT = null;

                                            }

                                        }
                                        Fill_ReferralCPTs(0);

                                        #endregion " Delete CPT "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ReferralCPTs(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    case 27:
                        {
                            #region Claim Scrubber

                            #region " Get ID for Selected Scrubber "

                            //Declare a object of CPT Master form
                            frmSetupAntiScrubber ofrmSetupAntiScrubber;
                            //Declare ID and code
                            Int64 ScrubberID = 0;
                            string _strTOSCode = "";
                            string _strPOSCode = "";
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CPTID is Not Present
                                    return;
                                else
                                    ScrubberID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                _strTOSCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                                _strPOSCode = dgMasters.SelectedRows[0].Cells[2].Value.ToString();
                            }

                            #endregion " Get ID for Selected Scrubber "

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Scrubber"

                                        // new object for a form frmSetupCPT
                                        ofrmSetupAntiScrubber = new frmSetupAntiScrubber(_databaseconnectionstring);

                                        //show form as dialog
                                        ofrmSetupAntiScrubber.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_ClaimScrubber(ofrmSetupAntiScrubber.ScrubberID);

                                        //Dispose the form object
                                        ofrmSetupAntiScrubber.Dispose();

                                        #endregion " Add Scrubber "
                                        break;
                                    }
                                //To modify CPT
                                case "Modify":
                                    {

                                        #region " Modify Anti Scrubber "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check CPTID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                ofrmSetupAntiScrubber = new frmSetupAntiScrubber(_databaseconnectionstring, ScrubberID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupAntiScrubber.tsb_save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupAntiScrubber.ShowDialog(this);
                                                ofrmSetupAntiScrubber.Dispose();
                                                ofrmSetupAntiScrubber = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_ClaimScrubber(ScrubberID);

                                        #endregion " Modify Anti Scrubber "
                                        break;
                                    }


                                case "Delete":
                                    {
                                        #region " Delete Claim Scrubber "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                gloAntiScrubber ogloAntiScrubber = new gloAntiScrubber(_databaseconnectionstring);
                                                Int64 _result = 0;
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    _result = ogloAntiScrubber.DeleteScrubberData(Convert.ToString(dgMasters.SelectedRows[0].Cells["sPOSCode"].Value).Trim(), Convert.ToString(dgMasters.SelectedRows[0].Cells["sTOSCode"].Value).Trim(), Convert.ToString(dgMasters.SelectedRows[0].Cells["sCode"].Value).Trim());
                                                    if (_result > 0)
                                                    {
                                                        //gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.Delete, "Delete Referral CPT ", 0, CPTID, 0, ActivityOutCome.Success);
                                                    }
                                                }
                                                ogloAntiScrubber.Dispose();
                                                ogloAntiScrubber = null;
                                            }

                                        }
                                        Fill_ClaimScrubber(0);

                                        #endregion " Delete CPT "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ClaimScrubber(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    case 29:
                        {
                            #region Closeday Tray
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region  Add
                                        frmSetupCloseDayJournals ofrmCloseDayTray = new frmSetupCloseDayJournals(0, _databaseconnectionstring);
                                        ofrmCloseDayTray.ShowDialog(this);
                                        ofrmCloseDayTray.Dispose();
                                        ofrmCloseDayTray = null;
                                        Fill_CloseDayTray();
                                        #endregion
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " Modify  "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check CPTID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                frmSetupCloseDayJournals ofrmCloseDayTray = new frmSetupCloseDayJournals(Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value), _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmCloseDayTray.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmCloseDayTray.ShowDialog(this);
                                                ofrmCloseDayTray.Dispose();
                                                ofrmCloseDayTray = null;
                                                Fill_CloseDayTray();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }
                                        break;
                                        #endregion
                                    }
                                case "Delete":
                                    {
                                        #region " Delete  "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                //Commented by Rahul Patel on 14/09/2010
                                                /* if (DialogResult.Yes == MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information))
                                                {*/
                                                gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                                ODB.Connect(false);


                                                //string _strquery = "select count(nCloseDayTrayID) as CountID from BL_Transaction_Payment_MST where nCloseDayTrayID = " + ID + " ";
                                                //object _result = ODB.ExecuteScalar_Query(_strquery);

                                                string _strquery = "";
                                                //_strquery = "select count(nPaymentTrayId) as CountID from BL_EOBPayment_MST WITH(NOLOCK) where nPaymentTrayId = " + ID + " ";
                                                _strquery = "select count(nPaymentTrayId) as CountID from Credits WITH(NOLOCK) where nPaymentTrayId = " + ID + " ";
                                                //_strquery = "select count(nCloseDayTrayID) as CountID from BL_Transaction_AdvancePayment_MST where nCloseDayTrayID = " + ID + " ";
                                                object _result = ODB.ExecuteScalar_Query(_strquery);

                                                if (_result != null)
                                                {
                                                    if ((int)_result == 0)
                                                    {
                                                        //MaheshB 20091120 ODB

                                                        string _strquery1 = "select IsNull(bIsActive,0) as bIsActive from BL_CloseDayTray WITH(NOLOCK) where nCloseDayTrayID = " + ID + " ";
                                                        DataTable _dtIsActive = null;
                                                        ODB.Retrive_Query(_strquery1, out _dtIsActive);
                                                        if (_dtIsActive != null && _dtIsActive.Rows.Count > 0)
                                                        {
                                                            if (Convert.ToBoolean(_dtIsActive.Rows[0]["bIsActive"]) == false)
                                                            {
                                                                //Added by Rahul Patel on 13/09/2010
                                                                // For showing alert message while deleting
                                                                if (DialogResult.Yes == MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information))
                                                                {
                                                                    string strquery = "Delete from BL_CloseDayTray where nCloseDayTrayID='" + Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value) + "'";
                                                                    ODB.Execute_Query(strquery);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                MessageBox.Show("You cannot delete this record, as it is active record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            }
                                                        }
                                                        if (_dtIsActive != null)
                                                        {
                                                            _dtIsActive.Dispose();
                                                            _dtIsActive = null;
                                                        }


                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("You cannot delete this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("You cannot delete this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }

                                                ODB.Dispose();
                                                ODB = null;

                                                // }

                                            }

                                        }
                                        Fill_CloseDayTray();

                                        #endregion " Delete CPT "
                                        break;
                                    }

                                case "Refresh":
                                    {
                                        Fill_CloseDayTray();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                        }
                            #endregion

                    case 30:
                        {

                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region  Add
                                        frmSetupChargesTray ofrmSetupChargesTray = new frmSetupChargesTray(0, _databaseconnectionstring);
                                        ofrmSetupChargesTray.ShowDialog(this);
                                        ofrmSetupChargesTray.Dispose();
                                        ofrmSetupChargesTray = null;
                                        Fill_ChargesTray();
                                        #endregion
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " Modify  "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check CPTID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                frmSetupChargesTray ofrmSetupChargesTray = new frmSetupChargesTray(Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value), _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupChargesTray.tsb_btnSave.Visible = false;
                                                //End Code Added by Mayuri:20091103

                                                ofrmSetupChargesTray.ShowDialog(this);
                                                ofrmSetupChargesTray.Dispose();
                                                ofrmSetupChargesTray = null;
                                                Fill_ChargesTray();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }
                                        break;
                                        #endregion
                                    }
                                case "Delete":
                                    {
                                        #region " Delete  "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                // commented by Rahul Patel on 14-09-2010
                                                // For not showing the Delete confirmation message
                                                //if (DialogResult.Yes == MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information))
                                                //{
                                                gloDatabaseLayer.DBLayer ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                                ODB.Connect(false);
                                                try
                                                {
                                                    string _strquery = "select count(nChargesDayTrayID) as CountID from BL_Transaction_MST WITH(NOLOCK) where nChargesDayTrayID = " + ID + " ";
                                                    object _result = ODB.ExecuteScalar_Query(_strquery);

                                                    if (_result != null)
                                                    {

                                                        if ((int)_result == 0)
                                                        {
                                                            //MaheshB 20091120 ODB

                                                            string _strquery1 = "select IsNull(bIsActive,0) as bIsActive from BL_ChargesTray WITH(NOLOCK) where nChargeTrayID = " + ID + " ";
                                                            DataTable _dtIsActive = null;
                                                            ODB.Retrive_Query(_strquery1, out _dtIsActive);
                                                            if (_dtIsActive != null && _dtIsActive.Rows.Count > 0)
                                                            {
                                                                if (Convert.ToBoolean(_dtIsActive.Rows[0]["bIsActive"]) == false)
                                                                {
                                                                    //Added BY Rahul Patel on 14-09-2010
                                                                    //For Showing the delete confirm message.
                                                                    if (DialogResult.Yes == MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2))
                                                                    {
                                                                        string strquery = "Delete from BL_ChargesTray where nChargeTrayID='" + Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value) + "'";
                                                                        ODB.Execute_Query(strquery);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    MessageBox.Show("You cannot delete this record, as it is active record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                                }
                                                            }
                                                            if (_dtIsActive != null)
                                                            {
                                                                _dtIsActive.Dispose();
                                                                _dtIsActive = null;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            MessageBox.Show("You cannot delete this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show("You cannot delete this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    }
                                                    ODB.Disconnect();
                                                    ODB.Dispose();
                                                    ODB = null;
                                                }
                                                catch (Exception ex)
                                                {
                                                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                                                }
                                                finally
                                                {
                                                    if (ODB != null)
                                                    {
                                                        ODB.Disconnect();
                                                        ODB.Dispose();
                                                    }
                                                }



                                                //}

                                            }

                                        }
                                        Fill_ChargesTray();

                                        #endregion " Delete CPT "
                                        break;
                                    }

                                case "Refresh":
                                    {
                                        Fill_ChargesTray();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                        }
                    case 31:
                        {
                            #region RefundType

                            #region " Get ID for Selected Refund Type ID "
                            frmSetupRefundType ofrmSetupRefundType = null;
                            Int64 _RefundTypeID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _RefundTypeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Refund Type "

                                        ofrmSetupRefundType = new frmSetupRefundType(_databaseconnectionstring);
                                        ofrmSetupRefundType.ShowDialog(this);
                                        Fill_RefundTypes(ofrmSetupRefundType.RefundTypeID);
                                        ofrmSetupRefundType.Dispose();

                                        #endregion " Add Refund Type "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Refund Type "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            RefundType oRefundType = new RefundType(_databaseconnectionstring);
                                            oRefundType.RefundTypeID = _RefundTypeID;
                                            if (oRefundType.CanDelete(_RefundTypeID))
                                            {
                                                ofrmSetupRefundType = new frmSetupRefundType(_RefundTypeID, _databaseconnectionstring);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmSetupRefundType.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmSetupRefundType.ShowDialog(this);
                                                ofrmSetupRefundType.Dispose();
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify system refund type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            oRefundType.Dispose();
                                            oRefundType = null;
                                        }

                                        Fill_RefundTypes(_RefundTypeID);

                                        #endregion " Modify Refund Type "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Refund Type "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            RefundType oRefundType = new RefundType(_databaseconnectionstring);
                                            oRefundType.RefundTypeID = _RefundTypeID;
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (oRefundType.CanDelete(_RefundTypeID))
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                        if (oRefundType.DeleteRefundType(_RefundTypeID))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete RefundType", 0, _RefundTypeID, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete RefundType", 0, ID, 0, ActivityOutCome.Failure);
                                                    MessageBox.Show("Cannot delete system refund type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                            }
                                            oRefundType.Dispose();
                                            oRefundType = null;
                                        }

                                        Fill_RefundTypes(0);

                                        #endregion " Delete Refund Type "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_RefundTypes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    case 32:
                        {
                            #region "Patient Statement Criteria"

                            #region " Get ID for Selected Statement Criteria ID "
                            frmSetupPatientStatementCriteria ofrmSetupPatientStatementCriteria = null;
                            Int64 _StatementCriteriaID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _StatementCriteriaID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Statement Criteria "

                                        ofrmSetupPatientStatementCriteria = new frmSetupPatientStatementCriteria(_databaseconnectionstring);
                                        ofrmSetupPatientStatementCriteria.ShowDialog(this);
                                        Fill_StatementCriteria(ofrmSetupPatientStatementCriteria.StatementCriteriaID);
                                        ofrmSetupPatientStatementCriteria.Dispose();

                                        #endregion " Add Statement Criteria "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Statement Criteria "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;

                                            ofrmSetupPatientStatementCriteria = new frmSetupPatientStatementCriteria(_StatementCriteriaID, _databaseconnectionstring);
                                            //Code Added by Mayuri:20091103
                                            //To make invisible button save if form gets open for modify
                                            ofrmSetupPatientStatementCriteria.tlsp_btnSave.Visible = false;
                                            //End Code Added by Mayuri:20091103
                                            ofrmSetupPatientStatementCriteria.ShowDialog(this);
                                            ofrmSetupPatientStatementCriteria.Dispose();
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;
                                        }

                                        Fill_StatementCriteria(_StatementCriteriaID);

                                        #endregion " Modify Statement Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Statement Criteria "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                    if (oPatinetStatementCriteria.Delete(_StatementCriteriaID))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Statement Criteria", 0, _StatementCriteriaID, 0, ActivityOutCome.Success);

                                                        //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }

                                            }
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;
                                        }

                                        Fill_StatementCriteria(0);

                                        #endregion " Delete Statement Criteria "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_StatementCriteria(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    case 33:
                        {
                            #region ReasonCodes
                            frmSetupReasonCodes ofrmReasonCodes = null;
                            Int64 _ReasonID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _ReasonID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }



                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add ReasonCode "

                                        ofrmReasonCodes = new frmSetupReasonCodes(_databaseconnectionstring, 0);
                                        ofrmReasonCodes.ShowDialog(this);
                                        Fill_ReasonCodes(_ReasonID);
                                        ofrmReasonCodes.Dispose();
                                        ofrmReasonCodes = null;
                                        //frmSetupReasonCodes.Dispose();

                                        #endregion " Add Statement Criteria"
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify ReasonCode"
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ReasonCodes ObjReasonCodes = new ReasonCodes();
                                            if (ObjReasonCodes.CanDelete(_ReasonID, DatabaseConnectionString))
                                            {
                                                ofrmReasonCodes = new frmSetupReasonCodes(_databaseconnectionstring, _ReasonID);
                                                //Code Added by Mayuri:20091103
                                                //To make invisible button save if form gets open for modify
                                                ofrmReasonCodes.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091103
                                                ofrmReasonCodes.ShowDialog(this);
                                                ofrmReasonCodes.Dispose();
                                                ofrmReasonCodes = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            ObjReasonCodes.Dispose();
                                            ObjReasonCodes = null;

                                        }

                                        Fill_ReasonCodes(_ReasonID);

                                        txtSearch.TextChanged -= new EventHandler(txtSearch_TextChanged);
                                        txtSearch.Text = string.Empty;
                                        txtSearch.TextChanged += new EventHandler(txtSearch_TextChanged);

                                        #endregion " Modify Statement Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete ReasonCodes "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                //Commented by Rahul Patel on 14-09-2010
                                                //For removing the delete confirm message 
                                                //if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                //{
                                                //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                Int64 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                ReasonCodes frmReasonCodes = new ReasonCodes();

                                                if (frmReasonCodes.CanDelete(_ReasonID, DatabaseConnectionString))
                                                {
                                                    //Added by Rahul Patel on 14-09-2010
                                                    // for Showing the delete confirm message
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        frmReasonCodes.DeleteReasonCode(_ID, DatabaseConnectionString);
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Group Code Code", 0, _ID, 0, ActivityOutCome.Success);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                frmReasonCodes.Dispose();
                                                frmReasonCodes = null;
                                                //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                //}
                                            }



                                            Fill_ReasonCodes(0);




                                        #endregion " Delete ReasonCodes"
                                        }
                                        break;
                                    }

                                case "Refresh":
                                    {
                                        Fill_ReasonCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();

                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    //Code Added by Mayuri:20091106
                    //Case for Action Codes
                    case 34:
                        {
                            #region ActionCodes
                            frmSetupActionCodes ofrmActionCodes = null;
                            Int64 _ActionCodeID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _ActionCodeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }



                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add ReasonCode "

                                        ofrmActionCodes = new frmSetupActionCodes(_databaseconnectionstring, 0);
                                        ofrmActionCodes.ShowDialog(this);
                                        ofrmActionCodes.txtCode.Focus();
                                        Fill_ActionCodes(_ActionCodeID);
                                        ofrmActionCodes.Dispose();
                                        ofrmActionCodes = null;
                                        #endregion " Add Statement Criteria"
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify ReasonCode"
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ReasonCodes ObjReasonCodes = new ReasonCodes();
                                            if (ObjReasonCodes.CanDeleteCode(_ActionCodeID, DatabaseConnectionString))
                                            {
                                                ofrmActionCodes = new frmSetupActionCodes(_databaseconnectionstring, _ActionCodeID);

                                                //Code Added by Mayuri:20091106
                                                //To make invisible button save if form gets open for modify
                                                ofrmActionCodes.tsb_Save.Visible = false;
                                                //End Code Added by Mayuri:20091106
                                                ofrmActionCodes.ShowDialog(this);
                                                ofrmActionCodes.Dispose();
                                                ofrmActionCodes = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            ObjReasonCodes.Dispose();
                                            ObjReasonCodes = null;

                                        }

                                        Fill_ActionCodes(_ActionCodeID);

                                        #endregion " Modify Statement Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete ReasonCodes "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {

                                                    Int64 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                    frmSetupGroupCode ofrmSetupGroupCode = new frmSetupGroupCode();

                                                    ofrmSetupGroupCode.DeleteGroupCode(_ID, DatabaseConnectionString);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete ResonCode", 0, _ID, 0, ActivityOutCome.Success);
                                                    ofrmSetupGroupCode.Dispose();
                                                    ofrmSetupGroupCode = null;
                                                }
                                            }

                                        }
                                        Fill_ActionCodes(0);
                                        break;


                                        #endregion " Delete ReasonCodes"
                                    }

                                case "Refresh":
                                    {
                                        Fill_ActionCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }

                    case 35:
                        {
                            #region GroupCodes
                            //Code Added by Mahesh Nawal:20091231
                            frmSetupGroupCode ofrmGroupCodes = null; // new frmSetupGroupCode();
                            Int64 _GroupCodeID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _GroupCodeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }



                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Group Code "

                                        ofrmGroupCodes = new frmSetupGroupCode(0, _databaseconnectionstring);
                                        ofrmGroupCodes.ShowDialog(this);
                                        Fill_GropCodes(_GroupCodeID);
                                        ofrmGroupCodes.Dispose();
                                        ofrmGroupCodes = null;
                                        //frmSetupReasonCodes.Dispose();

                                        #endregion " Add ReasonCode "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Group Code"
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            ReasonCodes ObjReasonCodes = new ReasonCodes();
                                            if (ObjReasonCodes.CanDeleteGroupCode(_GroupCodeID, DatabaseConnectionString))
                                            {
                                                ofrmGroupCodes = new frmSetupGroupCode(_GroupCodeID, _databaseconnectionstring); ;

                                                //To make invisible button save if form gets open for modify
                                                ofrmGroupCodes.tsb_Save.Visible = false;

                                                ofrmGroupCodes.ShowDialog(this);
                                                ofrmGroupCodes.Dispose();
                                                ofrmGroupCodes = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            ObjReasonCodes.Dispose();
                                            ObjReasonCodes = null;
                                        }

                                        Fill_GropCodes(_GroupCodeID);

                                        #endregion " Modify Statement Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Group Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                //Commented by Rahul Patel on 14-09-2010
                                                //For not showing the Delete confirm message.

                                                //if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                //{
                                                //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))




                                                Int64 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                frmSetupGroupCode ofrmSetupGroupCode = new frmSetupGroupCode();
                                                ReasonCodes ObjReasonCodes = new ReasonCodes();
                                                if (ObjReasonCodes.CanDeleteGroupCode(_GroupCodeID, DatabaseConnectionString))
                                                {
                                                    //Added by Rahul Patel on 14-09-2010
                                                    //Added condition to show delete confirm message
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        ofrmSetupGroupCode.DeleteGroupCode(_GroupCodeID, DatabaseConnectionString);
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete ResonCode", 0, _ID, 0, ActivityOutCome.Success);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                ofrmSetupGroupCode.Dispose();
                                                ofrmSetupGroupCode = null;
                                                ObjReasonCodes.Dispose();
                                                ObjReasonCodes = null;
                                                // }
                                            }

                                        }
                                        Fill_GropCodes(0);

                                        break;


                                        #endregion " Delete ReasonCodes"
                                    }

                                case "Refresh":
                                    {
                                        Fill_GropCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }

                    case 36:
                        {
                            #region "Patient Statement Display Settings"

                            #region " Get ID for Selected Statement Criteria ID "
                            frmSetupPatientStatementDisplaySettings ofrmSetupPatientStatementDisplaySettings = null;
                            Int64 _StatementCriteriaID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _StatementCriteriaID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Statement Criteria "

                                        ofrmSetupPatientStatementDisplaySettings = new frmSetupPatientStatementDisplaySettings(_databaseconnectionstring);
                                        ofrmSetupPatientStatementDisplaySettings.IsNewStatementDisplaySettings = true;
                                        ofrmSetupPatientStatementDisplaySettings.ShowDialog(this);
                                        Fill_StatementDisplaySettings(ofrmSetupPatientStatementDisplaySettings.StatementCriteriaID);
                                        ofrmSetupPatientStatementDisplaySettings.Dispose();

                                        #endregion " Add Statement Criteria "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Statement Criteria "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;

                                            ofrmSetupPatientStatementDisplaySettings = new frmSetupPatientStatementDisplaySettings(_StatementCriteriaID, _databaseconnectionstring);
                                            //Code Added by Mayuri:20091103
                                            //To make invisible button save if form gets open for modify
                                            ofrmSetupPatientStatementDisplaySettings.tlsp_btnSave.Visible = false;
                                            //End Code Added by Mayuri:20091103
                                            ofrmSetupPatientStatementDisplaySettings.ShowDialog(this);
                                            ofrmSetupPatientStatementDisplaySettings.Dispose();
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;
                                        }

                                        Fill_StatementDisplaySettings(_StatementCriteriaID);

                                        #endregion " Modify Statement Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Statement Criteria "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;
                                            if (oPatinetStatementCriteria.VerifyforDeleteDisplaySettingsCode(_StatementCriteriaID) == false)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        if (oPatinetStatementCriteria.Delete(_StatementCriteriaID))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Statement Criteria", 0, _StatementCriteriaID, 0, ActivityOutCome.Success);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox.Show("Patient Statement Display Setting in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;
                                        }

                                        Fill_StatementDisplaySettings(0);

                                        #endregion " Delete Statement Criteria "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_StatementDisplaySettings(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion

                        }
                    case 37:
                        {
                            #region "Patient Statement Filter Settings"

                            #region " Get ID for Selected Statement Criteria ID "
                            frmSetupPatientStatementFilterCriteria ofrmSetupPatientStatementFilterCriteria = null;
                            Int64 _StatementCriteriaID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _StatementCriteriaID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add Statement Criteria "

                                        ofrmSetupPatientStatementFilterCriteria = new frmSetupPatientStatementFilterCriteria(_databaseconnectionstring);
                                        ofrmSetupPatientStatementFilterCriteria.ShowDialog(this);
                                        Fill_StatementFilterSettings(ofrmSetupPatientStatementFilterCriteria.StatementCriteriaID);
                                        ofrmSetupPatientStatementFilterCriteria.Dispose();

                                        #endregion " Add Statement Criteria "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Statement Filter Criteria "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;

                                            ofrmSetupPatientStatementFilterCriteria = new frmSetupPatientStatementFilterCriteria(_StatementCriteriaID, _databaseconnectionstring);
                                            //Code Added by Mayuri:20091103
                                            //To make invisible button save if form gets open for modify
                                            ofrmSetupPatientStatementFilterCriteria.tlsp_btnSave.Visible = false;
                                            //End Code Added by Mayuri:20091103
                                            ofrmSetupPatientStatementFilterCriteria.ShowDialog(this);
                                            ofrmSetupPatientStatementFilterCriteria.Dispose();
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;

                                        }

                                        Fill_StatementFilterSettings(_StatementCriteriaID);

                                        #endregion " Modify Statement Filter Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Statement Filter Criteria "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                    if (oPatinetStatementCriteria.Delete(_StatementCriteriaID))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Statement Criteria", 0, _StatementCriteriaID, 0, ActivityOutCome.Success);

                                                        //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }

                                            }
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;
                                        }

                                        Fill_StatementFilterSettings(0);

                                        #endregion " Delete Statement Filter Criteria "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_StatementFilterSettings(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion

                        }
                    case 38:
                        {

                            #region " Get ID for Selected Statement Criteria ID "
                            frmCPTMapping ofrmCPTMapping = null;
                            Int64 _CPTMappingID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    if (trvMasters.SelectedNode.Level == 0)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        _CPTMappingID = _CPTMapId;
                                    }


                                }

                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                }
                                // If CategoryID is Not Present
                                // return;
                                else
                                    _CPTMappingID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            #endregion


                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add CPT Mapping "
                                        ofrmCPTMapping = new frmCPTMapping(_databaseconnectionstring);
                                        ofrmCPTMapping.ShowDialog(this);
                                        ofrmCPTMapping.Dispose();
                                        ofrmCPTMapping = null;
                                        //  trvMasters.SelectedNode.Collapse();
                                        Fill_CPTMapping();
                                        #endregion

                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify CPT Mapping "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            ofrmCPTMapping = new frmCPTMapping(_CPTMappingID, _databaseconnectionstring);
                                            ofrmCPTMapping.ShowDialog(this);
                                            if (trvMasters.SelectedNode.Level == 0)
                                            {
                                                Fill_CPTMapping();
                                            }
                                            else
                                            {

                                                if (dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim().Length > 0)
                                                {
                                                    Fill_CPTMappingDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim()));
                                                }
                                                Fill_CPTMapping();

                                            }
                                            ofrmCPTMapping.Dispose();
                                            ofrmCPTMapping = null;
                                        }
                                        else
                                        {
                                            if (trvMasters.SelectedNode.Level != 0)
                                            {
                                                ofrmCPTMapping = new frmCPTMapping(_CPTMappingID, _databaseconnectionstring);
                                                ofrmCPTMapping.ShowDialog(this);
                                                if (trvMasters.SelectedNode.Level == 0)
                                                {
                                                    Fill_CPTMapping();
                                                }
                                                else
                                                {

                                                    Fill_CPTMappingDetails(_CPTMappingID);

                                                    if (dgMasters.RowCount > 0)
                                                    {

                                                        if (dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim().Length > 0)
                                                        {
                                                            Fill_CPTMappingDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim()));
                                                        }
                                                    }
                                                    Fill_CPTMapping();


                                                }
                                                ofrmCPTMapping.Dispose();
                                                ofrmCPTMapping = null;
                                            }
                                        }

                                        #endregion
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete CPT Mapping"

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                                try
                                                {
                                                    String _msg = String.Empty;
                                                    if (trvMasters.SelectedNode.Level == 0)
                                                    {
                                                        oDB.Connect(false);
                                                        string _sCPTMappingID = "";
                                                        DataTable _dtmapping = null;
                                                        _sCPTMappingID = dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim();
                                                        oDB.Retrive_Query("SELECT count(nContactID) FROM Contacts_Insurance_DTL WITH(NOLOCK) WHERE nCPTMappingID=" + _sCPTMappingID, out  _dtmapping);
                                                        oDB.Disconnect();
                                                        if (Convert.ToInt64(_dtmapping.Rows[0][0]) > 0)
                                                        {
                                                            _msg = "Cannot delete CPT billing crosswalk because insurance plans are associated.";
                                                            MessageBox.Show(_msg, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                            return;
                                                        }
                                                        else
                                                        {
                                                            _msg = "Are you sure you want to delete CPT Billing Crosswalk? ";
                                                        }

                                                    }
                                                    else
                                                    {

                                                        _msg = "Are you sure you want to delete this record from CPT Billing Crosswalk? ";

                                                    }
                                                    if (MessageBox.Show(_msg, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        try
                                                        {

                                                            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                                                            Int64 _tempId = 0;
                                                            Int64 _CPTMappingId = 0;
                                                            string _Flag = "";
                                                            if (trvMasters.SelectedNode.Level == 0)
                                                            {
                                                                oDB.Connect(false);
                                                                _Flag = "RemoveCrosswalk";

                                                                if (dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim().Length > 0)
                                                                {
                                                                    _tempId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim());
                                                                }
                                                                oDBParameters.Add("@Flag", _Flag, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                                oDBParameters.Add("@CPTMappingID", _tempId, System.Data.ParameterDirection.InputOutput, System.Data.SqlDbType.BigInt);
                                                                //oDBParameters.Add("@DetailsCPTMappingID", _tempId, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                                oDB.Execute("BL_CPTBillingCrosswalk", oDBParameters);
                                                                oDB.Disconnect();
                                                                Fill_CPTMapping();

                                                            }
                                                            else
                                                            {
                                                                oDB.Connect(false);
                                                                _Flag = "RemoveLine";

                                                                if (dgMasters.SelectedRows[0].Cells["nCPTMappingDetailsID"].Value.ToString().Trim().Length > 0)
                                                                {
                                                                    _tempId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingDetailsID"].Value.ToString().Trim());
                                                                    _CPTMappingId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim());
                                                                }
                                                                oDBParameters.Add("@Flag", _Flag, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                                //  oDBParameters.Add("@CPTMappingID", _CPTMappingId, System.Data.ParameterDirection.InputOutput, System.Data.SqlDbType.BigInt);
                                                                oDBParameters.Add("@DetailsCPTMappingID", _tempId, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                                oDB.Execute("BL_CPTBillingCrosswalk", oDBParameters);
                                                                oDB.Disconnect();
                                                                Fill_CPTMappingDetails(_CPTMappingId);

                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                                                        }

                                                    }
                                                }
                                                catch
                                                {

                                                }
                                                finally
                                                {
                                                    oDB.Disconnect();
                                                    oDB.Dispose();
                                                    oDB = null;
                                                }
                                            }
                                            oPatinetStatementCriteria.Dispose();
                                            oPatinetStatementCriteria = null;

                                        }

                                        #endregion
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        if (trvMasters.SelectedNode.Level == 0)
                                        {
                                            Fill_CPTMapping();
                                        }
                                        else
                                        {
                                            if (dgMasters.RowCount > 0)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim().Length > 0)
                                                {
                                                    Fill_CPTMappingDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim()));
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;

                            }

                            break;
                        }

                    #region " CPT Charges "
                    //case 12:
                    //    {
                    //        #region " CPT Charges "
                    //        switch (e.ClickedItem.Tag.ToString())
                    //        {


                    //            case "Add":
                    //                {
                    //                    #region " CPT Charges "

                    //                    // new object for a form frmSetupICD9
                    //                    frmCPTCharges ofrmCPTCharges = new frmCPTCharges(_databaseconnectionstring);

                    //                    //show form as dialog
                    //                    ofrmCPTCharges.ShowDialog(this);

                    //                    //After adding the data Fill the grid
                    //                    Fill_CPTCharges();

                    //                    //Dispose the form object
                    //                    ofrmCPTCharges.Dispose();

                    //                    #endregion " CPT Charges "
                    //                    break;
                    //                }

                    //            case "Modify":
                    //                {

                    //                    #region " Modify CPT Charges "
                    //                    //Check whether row in a grid is selected to modify or not
                    //                    if (dgMasters.SelectedRows.Count > 0)
                    //                    {
                    //                        //Check ICD9ID is present or not
                    //                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                    //                        {

                    //                            frmCPTCharges ofrmCPTCharges = new frmCPTCharges(ID, _databaseconnectionstring);
                    //                            ofrmCPTCharges.ShowDialog(this);

                    //                        }
                    //                        else
                    //                        {
                    //                            MessageBox.Show("You Cannot modify this CPT Charges", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //                        }

                    //                    }

                    //                    Fill_CPTCharges();

                    //                    #endregion " Modify CPT Charges "
                    //                    break;
                    //                }
                    //            case "Delete":
                    //                {
                    //                    #region " Delete CPT Charges "
                    //                    CPTCharges oCPT = new CPTCharges(_databaseconnectionstring);
                    //                    if (dgMasters.SelectedRows.Count > 0)
                    //                    {
                    //                        frmCPTCharges ofrmCPTCharges = new frmCPTCharges(_databaseconnectionstring);
                    //                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                    //                        {
                    //                            if (MessageBox.Show("Are you sure you want to delete this record? ", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    //                            {
                    //                                if (oCPT.DeleteCPTCharges(ID))
                    //                                {
                    //                                    MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                    //                                }
                    //                            }
                    //                        }
                    //                    }

                    //                    Fill_CPTCharges();

                    //                    #endregion " Delete CPT Charges "
                    //                    break;
                    //                }
                    //            case "Refresh":
                    //                {
                    //                    Fill_CPTCharges();
                    //                    break;
                    //                }
                    //            case "Close":
                    //                {
                    //                    this.Close();
                    //                    break;
                    //                }
                    //            case "Help":
                    //                {
                    //                    break;
                    //                }
                    //            default:
                    //                break;
                    //        }
                    //        }
                    //        break;
                    #endregion " CPT Charges "

                    case 39:
                        {
                            #region Revenue Code

                            #region " Get ID for Selected Revenue Code "

                            //Declare a object of CPT Master form
                            frmSetupRevCode ofrmRevCode;
                            //Declare ID and code
                            Int64 nRevCodeID = 0;
                            //Int64 nRevCode = 0;

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CPTID is Not Present
                                    return;
                                else
                                    nRevCodeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                //nRevCode = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[1].Value.ToString());
                            }

                            #endregion " Get ID for Selected Revenue Code "


                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {

                                        #region " Add Revenue Code through Master frmSetupRevCode "

                                        // new object for a form frmSetupCPT
                                        ofrmRevCode = new frmSetupRevCode(_databaseconnectionstring, nRevCodeID);

                                        //show form as dialog
                                        ofrmRevCode.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_RevenueCode(ofrmRevCode.RevCodeId);

                                        //Dispose the form object
                                        ofrmRevCode.Dispose();

                                        #endregion " Add Revenue Code through Master frmSetupRevCode "

                                        break;
                                    }
                                case "Modify":
                                    {

                                        #region " Modify Revenue Code "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check CPTID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                ofrmRevCode = new frmSetupRevCode(_databaseconnectionstring, nRevCodeID);
                                                ofrmRevCode.ShowDialog(this);
                                                ofrmRevCode.Dispose();
                                                ofrmRevCode = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this Revenue Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }

                                        Fill_RevenueCode(nRevCodeID);

                                        #endregion " Modify Revenue Code "

                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Block Revenue Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                CLsBL_RevenueCode oRevenueCode = new CLsBL_RevenueCode(_databaseconnectionstring);
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {

                                                    if (oRevenueCode.DeleteRevenueCode(nRevCodeID))
                                                    {

                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.Delete, "Delete Revenue Code ", 0, nRevCodeID, 0, ActivityOutCome.Success);
                                                        //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }
                                                oRevenueCode.Dispose();
                                                oRevenueCode = null;
                                            }

                                        }
                                        Fill_RevenueCode(0);

                                        #endregion " Block CPT "

                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_RevenueCode(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    case 40:
                        {
                            #region "ERA Payer"
                            Int64 _SettingID = 0;
                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " Add ERA Payer "
                                        using (gloERA.frmERAPayerSetup frmPayer = new global::gloBilling.gloERA.frmERAPayerSetup(0))
                                        {
                                            if (frmPayer.ShowDialog(this) == DialogResult.Yes)
                                                Fill_ERAPayers();                                            
                                        }
                                        #endregion
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " Modify ERA Payer "
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                                return;
                                            else
                                                _SettingID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                                            using (gloERA.frmERAPayerSetup frmPayer = new global::gloBilling.gloERA.frmERAPayerSetup(_SettingID))
                                            {
                                                if (frmPayer.ShowDialog(this) == DialogResult.Yes)
                                                    Fill_ERAPayers();                                                
                                            }
                                        }
                                        #endregion
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region" Delete ERA Payer "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                                    return;
                                                else
                                                    _SettingID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                                                using (gloERA.ERAPayer oPayer = new global::gloBilling.gloERA.ERAPayer())
                                                {
                                                    oPayer.DeletePayer(_SettingID);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ERAPayer, ActivityCategory.Setup, ActivityType.Delete, "ERAPayer Deleted", 0, 0, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                                }
                                                Fill_ERAPayers();
                                            }
                                        }

                                        #endregion
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ERAPayers();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }                  

                    case 41:
                        {
                            #region "Qualifier"
                            Int64 _QualifierID = 0;
                            frmSetupIDQualifier ofrmSetupIDQualifier = null;
                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add Qualifier  "

                                        ofrmSetupIDQualifier = new frmSetupIDQualifier(_databaseconnectionstring, 0);
                                        ofrmSetupIDQualifier.ShowDialog(this);
                                        Fill_Qualifier();
                                        //Fill_RefundTypes(ofrmSetupRefundType.RefundTypeID);
                                        ofrmSetupIDQualifier.Dispose();
                                        #endregion
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " Modify Qualifier  "
                                        //Check whether row in a grid is selected to modify or not

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            //Check CPTID is present or not
                                            if ((dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0") && dgMasters.SelectedRows[0].Cells[3].Value.ToString() != "1")
                                            {
                                                _QualifierID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                ofrmSetupIDQualifier = new frmSetupIDQualifier(_databaseconnectionstring, _QualifierID);
                                                ofrmSetupIDQualifier.ShowDialog(this);
                                                ofrmSetupIDQualifier.Dispose();
                                                ofrmSetupIDQualifier = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            Fill_Qualifier();
                                        }

                                        #endregion
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region" Delete Qualifier "
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[3].Value.ToString() != "1")
                                            {
                                                Qualifier objQulifier = new Qualifier(_databaseconnectionstring);
                                                _QualifierID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                if (objQulifier.CanDelete(_QualifierID))
                                                    MessageBox.Show("Mapping already exists, cannot delete record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                else if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                                        return;
                                                    else
                                                    {
                                                        objQulifier.DeleteQualifier(_QualifierID);
                                                        Fill_Qualifier();
                                                    }
                                                }
                                                objQulifier = null;
                                            }
                                            else { MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        }
                                        #endregion
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Qualifier();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    case 42:
                        {
                            #region "Qualifier Association"
                            Int64 _QualifierAssociationID = 0;
                            Int64 _QualifierMstID = 0;
                            frmSetupIDQualifierAssociation ofrmSetupIDQualifierAssociation = null;
                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add Qualifier  Association"

                                        ofrmSetupIDQualifierAssociation = new frmSetupIDQualifierAssociation(_databaseconnectionstring, 0, 0);
                                        ofrmSetupIDQualifierAssociation.ShowDialog(this);
                                        Fill_Qualifier_Association();
                                        ofrmSetupIDQualifierAssociation.Dispose();
                                        #endregion
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " Modify Qualifier  Association"
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                _QualifierAssociationID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                _QualifierMstID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[3].Value.ToString());
                                                ofrmSetupIDQualifierAssociation = new frmSetupIDQualifierAssociation(_databaseconnectionstring, _QualifierAssociationID, _QualifierMstID);
                                                ofrmSetupIDQualifierAssociation.ShowDialog(this);
                                                ofrmSetupIDQualifierAssociation.Dispose();
                                                ofrmSetupIDQualifierAssociation = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this Revenue Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            Fill_Qualifier_Association();
                                        }

                                        #endregion
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region" Delete Qualifier Association"
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            _QualifierAssociationID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                            QualifierAssociation objQualifierassociation = new QualifierAssociation(_databaseconnectionstring);
                                            if (objQualifierassociation.CanDelete(_QualifierAssociationID))
                                                MessageBox.Show("Mapping already exists, cannot delete record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            else if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                                    return;
                                                else
                                                {

                                                    objQualifierassociation.DeleteQualifier(_QualifierAssociationID);
                                                    Fill_Qualifier_Association();
                                                }
                                            }
                                            objQualifierassociation = null;
                                        }
                                        #endregion
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_Qualifier_Association();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }


                    #region RVU Schedule
                    case 43:
                        {

                            #region " Get ID for Selected RVU Schedule "
                            frm_SetupRVUSchedule ofrmSetupRVUSchedule = null;
                            Int64 _nRVUID = 0;
                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    if (trvMasters.SelectedNode.Level == 0)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        _nRVUID = _RVUId;
                                    }
                                }
                                else
                                {
                                    _nRVUID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                }

                            }

                            #endregion


                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add RVU Schedule "
                                        ofrmSetupRVUSchedule = new frm_SetupRVUSchedule(_nRVUID, _databaseconnectionstring);
                                        ofrmSetupRVUSchedule.ShowDialog(this);
                                        ofrmSetupRVUSchedule.Dispose();
                                        ofrmSetupRVUSchedule = null;
                                        //  trvMasters.SelectedNode.Collapse();
                                        FillRVU();
                                        #endregion

                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify RVU Schedule "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            ofrmSetupRVUSchedule = new frm_SetupRVUSchedule(_nRVUID, _databaseconnectionstring);
                                            ofrmSetupRVUSchedule.ShowDialog(this);
                                            if (trvMasters.SelectedNode.Level == 0)
                                            {
                                                FillRVU();
                                            }
                                            else
                                            {

                                                if (dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim().Length > 0)
                                                {
                                                    Fill_RVUDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim()));
                                                }
                                                FillRVU();

                                            }
                                            ofrmSetupRVUSchedule.Dispose();
                                            ofrmSetupRVUSchedule = null;
                                        }
                                        else
                                        {
                                            if (trvMasters.SelectedNode.Level != 0)
                                            {
                                                ofrmSetupRVUSchedule = new frm_SetupRVUSchedule(_nRVUID, _databaseconnectionstring);
                                                ofrmSetupRVUSchedule.ShowDialog(this);
                                                if (trvMasters.SelectedNode.Level == 0)
                                                {
                                                    FillRVU();
                                                }
                                                else
                                                {

                                                    Fill_CPTMappingDetails(_nRVUID);
                                                    if (dgMasters.RowCount > 0)
                                                    {

                                                        if (dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim().Length > 0)
                                                        {
                                                            Fill_RVUDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim()));
                                                        }
                                                    }
                                                    FillRVU();


                                                }
                                                ofrmSetupRVUSchedule.Dispose();
                                                ofrmSetupRVUSchedule = null;
                                            }
                                        }

                                        #endregion
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete RVU Schedule"
                                        try
                                        {
                                            if (dgMasters.SelectedRows.Count > 0)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString() != "0")
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);


                                                        Int64 nRVUID = 0;

                                                        nRVUID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nRVUID"].Value);
                                                        gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

                                                        if (trvMasters.SelectedNode.Level == 0)
                                                        {
                                                            oDB.Connect(false);
                                                            oDBParameters.Add("@nRVUID", nRVUID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                            oDB.Execute("BL_RVUSchedule_Delete", oDBParameters);
                                                            oDB.Disconnect();
                                                            FillRVU();

                                                        }
                                                        else
                                                        {
                                                            oDB.Connect(false);
                                                            oDBParameters.Add("@nRVUID", nRVUID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                            oDB.Execute("BL_RVUSchedule_Delete", oDBParameters);
                                                            oDB.Disconnect();
                                                            FillRVU();

                                                        }
                                                        oDB.Dispose();
                                                        oDB = null;
                                                    }
                                                }


                                            }
                                        }

                                        catch (Exception ex)
                                        {
                                            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                                        }
                                        #endregion
                                        break;
                                    }



                                case "Refresh":
                                    {
                                        if (trvMasters.SelectedNode.Level == 0)
                                        {
                                            FillRVU();
                                        }
                                        else
                                        {
                                            if (dgMasters.RowCount > 0)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim().Length > 0)
                                                {
                                                    Fill_RVUDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim()));
                                                }
                                            }
                                        }
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;

                            }

                            break;
                        }
                    #endregion RVU Schedule

                    case 45:
                        {
                            #region "Condition Code Settings"

                            //#region " Get ID for Selected Statement Criteria ID "
                            frmSetupConditionCode ofrmSetupConditionCode = null;
                            Int64 _nConditionId = 0;
                            ////Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _nConditionId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add Condition Code "

                                        ofrmSetupConditionCode = new frmSetupConditionCode(0, _databaseconnectionstring);
                                        ofrmSetupConditionCode.ShowDialog(this);

                                        Fill_ConditionCodes(ofrmSetupConditionCode.ConditionID);
                                        ofrmSetupConditionCode.Dispose();

                                        #endregion "Add Condition Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Condition Code "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ConditionCodes oConditionCodes = new ConditionCodes();
                                            ofrmSetupConditionCode = new frmSetupConditionCode(_nConditionId, _databaseconnectionstring);
                                            if (oConditionCodes.IsSystemRecord(_nConditionId, DatabaseConnectionString) == true)
                                            {
                                                ofrmSetupConditionCode.IsSystemRecord = false;

                                                //ofrmSetupConditionCode = new frmSetupConditionCode(_nConditionId, _databaseconnectionstring);                                                
                                                //ofrmSetupConditionCode.ShowDialog(this);
                                                //ofrmSetupConditionCode.Dispose();

                                            }
                                            else
                                            {
                                                ofrmSetupConditionCode.IsSystemRecord = true;
                                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                            ofrmSetupConditionCode.ShowDialog(this);
                                            ofrmSetupConditionCode.Dispose();
                                            oConditionCodes.Dispose();
                                            oConditionCodes = null;

                                        }

                                        Fill_ConditionCodes(_nConditionId);

                                        #endregion " Modify Condition Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Condition Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ConditionCodes oConditionCodes = new ConditionCodes(_databaseconnectionstring);


                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (oConditionCodes.IsSystemRecord(_nConditionId, _databaseconnectionstring))
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                        if (oConditionCodes.DeleteConditionCode(_nConditionId, _databaseconnectionstring))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Condition Code  ", 0, _nConditionId, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }

                                            }
                                            oConditionCodes.Dispose();
                                            oConditionCodes = null;
                                        }

                                        Fill_ConditionCodes(0);

                                        #endregion " Delete Condition Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ConditionCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion

                        }

                    case 46:
                        {
                            #region "Occurrence Code Settings"

                            //#region " Get ID for Selected Statement Criteria ID "
                            frmSetupOccurrenceCode ofrmSetupOccurrenceCode = null;
                            Int64 _nOccurrenceId = 0;
                            ////Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _nOccurrenceId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add Occurrence Code "

                                        ofrmSetupOccurrenceCode = new frmSetupOccurrenceCode(0, _databaseconnectionstring);
                                        ofrmSetupOccurrenceCode.ShowDialog(this);

                                        Fill_OccurrenceCodes(ofrmSetupOccurrenceCode.OccurrenceCodeID);
                                        ofrmSetupOccurrenceCode.Dispose();
                                        ofrmSetupOccurrenceCode = null;
                                        #endregion "Add Occurrence Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Occurrence Code "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            OccurrenceCodes oOccurrenceCodes = new OccurrenceCodes();
                                            ofrmSetupOccurrenceCode = new frmSetupOccurrenceCode(_nOccurrenceId, _databaseconnectionstring);
                                            if (oOccurrenceCodes.IsSystemRecord(_nOccurrenceId, DatabaseConnectionString) == true)
                                            {
                                                ofrmSetupOccurrenceCode.IsSystemRecord = false;
                                                //ofrmSetupOccurrenceCode = new frmSetupOccurrenceCode(_nOccurrenceId, _databaseconnectionstring);                                               
                                                //ofrmSetupOccurrenceCode.ShowDialog(this);
                                                //ofrmSetupOccurrenceCode.Dispose();

                                            }
                                            else
                                            {
                                                ofrmSetupOccurrenceCode.IsSystemRecord = true;
                                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                            ofrmSetupOccurrenceCode.ShowDialog(this);
                                            ofrmSetupOccurrenceCode.Dispose();
                                            oOccurrenceCodes.Dispose();
                                            oOccurrenceCodes = null;

                                        }

                                        Fill_OccurrenceCodes(_nOccurrenceId);

                                        #endregion " Modify Occurrence Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Occurrence Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            OccurrenceCodes oOccurrenceCodes = new OccurrenceCodes(_databaseconnectionstring);


                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (oOccurrenceCodes.IsSystemRecord(_nOccurrenceId, _databaseconnectionstring))
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                        if (oOccurrenceCodes.DeleteOccurrenceCode(_nOccurrenceId, _databaseconnectionstring))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Occurrence Code  ", 0, _nOccurrenceId, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }

                                            }
                                            oOccurrenceCodes.Dispose();
                                            oOccurrenceCodes = null;
                                        }

                                        Fill_OccurrenceCodes(0);

                                        #endregion " Delete Occurrence Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_OccurrenceCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion

                        }

                    case 47:
                        {
                            #region "OccurrenceSpan Code Settings"

                            //#region " Get ID for Selected Statement Criteria ID "
                            frmSetupOccurrenceSpanCode ofrmSetupOccurrenceSpanCode = null;
                            Int64 _nOccurrenceSpanId = 0;
                            ////Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _nOccurrenceSpanId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add OccurrenceSpan Code "

                                        ofrmSetupOccurrenceSpanCode = new frmSetupOccurrenceSpanCode(0, _databaseconnectionstring);
                                        ofrmSetupOccurrenceSpanCode.ShowDialog(this);

                                        Fill_OccurrenceSpanCodes(ofrmSetupOccurrenceSpanCode.OccurrenceSpanCodeID);
                                        ofrmSetupOccurrenceSpanCode.Dispose();
                                        ofrmSetupOccurrenceSpanCode = null;
                                        #endregion "Add OccurrenceSpan Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify OccurrenceSpan Code "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            OccurrenceSpanCodes oOccurrenceSpanCodes = new OccurrenceSpanCodes();
                                            ofrmSetupOccurrenceSpanCode = new frmSetupOccurrenceSpanCode(_nOccurrenceSpanId, _databaseconnectionstring);
                                            if (oOccurrenceSpanCodes.IsSystemRecord(_nOccurrenceSpanId, DatabaseConnectionString) == true)
                                            {
                                                ofrmSetupOccurrenceSpanCode.IsSystemRecord = false;
                                                //ofrmSetupOccurrenceSpanCode = new frmSetupOccurrenceSpanCode(_nOccurrenceSpanId, _databaseconnectionstring);                                              
                                                //ofrmSetupOccurrenceSpanCode.ShowDialog(this);
                                                //ofrmSetupOccurrenceSpanCode.Dispose();

                                            }
                                            else
                                            {
                                                ofrmSetupOccurrenceSpanCode.IsSystemRecord = true;
                                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                            ofrmSetupOccurrenceSpanCode.ShowDialog(this);
                                            ofrmSetupOccurrenceSpanCode.Dispose();
                                            oOccurrenceSpanCodes.Dispose();
                                            oOccurrenceSpanCodes = null;
                                        }

                                        Fill_OccurrenceSpanCodes(_nOccurrenceSpanId);

                                        #endregion " Modify OccurrenceSpan Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete OccurrenceSpan Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            OccurrenceSpanCodes oOccurrenceSpanCodes = new OccurrenceSpanCodes(_databaseconnectionstring);


                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (oOccurrenceSpanCodes.IsSystemRecord(_nOccurrenceSpanId, _databaseconnectionstring))
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                        if (oOccurrenceSpanCodes.DeleteOccurrenceSpanCode(_nOccurrenceSpanId, _databaseconnectionstring))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete OccurrenceSpan Code  ", 0, _nOccurrenceSpanId, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }

                                            }
                                            oOccurrenceSpanCodes.Dispose();
                                            oOccurrenceSpanCodes = null;
                                        }

                                        Fill_OccurrenceSpanCodes(0);

                                        #endregion " Delete OccurrenceSpan Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_OccurrenceSpanCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion

                        }
                    case 48:
                        {
                            #region "Value Code Settings"

                            //#region " Get ID for Selected Statement Criteria ID "
                            frmSetupValueCode ofrmSetupValueCode = null;
                            Int64 _nValueId = 0;
                            ////Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _nValueId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add Value Code "

                                        ofrmSetupValueCode = new frmSetupValueCode(0, _databaseconnectionstring);
                                        ofrmSetupValueCode.ShowDialog(this);

                                        Fill_ValueCodes(ofrmSetupValueCode.ValueID);
                                        ofrmSetupValueCode.Dispose();
                                        ofrmSetupValueCode = null;
                                        #endregion "Add Value Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Value Code "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ValueCodes oValueCodes = new ValueCodes();
                                            ofrmSetupValueCode = new frmSetupValueCode(_nValueId, _databaseconnectionstring);
                                            if (oValueCodes.IsSystemRecord(_nValueId, DatabaseConnectionString) == true)
                                            {
                                                ofrmSetupValueCode.IsSystemRecord = false;
                                                //ofrmSetupValueCode = new frmSetupValueCode(_nValueId, _databaseconnectionstring);                                              
                                                //ofrmSetupValueCode.ShowDialog(this);
                                                //ofrmSetupValueCode.Dispose();

                                            }
                                            else
                                            {
                                                ofrmSetupValueCode.IsSystemRecord = true;
                                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                            ofrmSetupValueCode.ShowDialog(this);
                                            ofrmSetupValueCode.Dispose();
                                            oValueCodes.Dispose();
                                            oValueCodes = null;
                                        }

                                        Fill_ValueCodes(_nValueId);

                                        #endregion " Modify Value Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Value Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ValueCodes oValueCodes = new ValueCodes(_databaseconnectionstring);


                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (oValueCodes.IsSystemRecord(_nValueId, _databaseconnectionstring))
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                        if (oValueCodes.DeleteValueCode(_nValueId, _databaseconnectionstring))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Value Code  ", 0, _nValueId, 0, ActivityOutCome.Success);

                                                            //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }

                                            }
                                            oValueCodes.Dispose();
                                            oValueCodes = null;
                                        }

                                        Fill_ValueCodes(0);

                                        #endregion " Delete Value Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ValueCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }

                    case 49:
                        {
                            #region "Reporting Category Settings"

                            //#region " Get ID for Selected Statement Criteria ID "
                            frmSetupReportingCategory ofrmSetupReportingCategory = null;
                            Int64 _nValueId = 0;
                            ////Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _nValueId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add Value Code "

                                        ofrmSetupReportingCategory = new frmSetupReportingCategory(_databaseconnectionstring, 0);
                                        ofrmSetupReportingCategory.ShowDialog(this);
                                        ofrmSetupReportingCategory.Dispose();
                                        ofrmSetupReportingCategory = null;
                                        Fill_ReportingCategory(0);
                                        #endregion "Add Value Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Value Code "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ReportingCategory oReportingCategorys = new ReportingCategory();
                                            // PatinetStatementCriteria oPatinetStatementCriteria = new PatinetStatementCriteria(_databaseconnectionstring);
                                            //oPatinetStatementCriteria.StatementCriteriaID = _StatementCriteriaID;

                                            ofrmSetupReportingCategory = new frmSetupReportingCategory(_databaseconnectionstring, _nValueId);
                                            //Code Added by Mayuri:20091103
                                            ////To make invisible button save if form gets open for modify
                                            //ofrmSetupPatientStatementDisplaySettings.tlsp_btnSave.Visible = false;
                                            ////End Code Added by Mayuri:20091103
                                            ofrmSetupReportingCategory.ShowDialog(this);
                                            ofrmSetupReportingCategory.Dispose();
                                            oReportingCategorys.Dispose();
                                            oReportingCategorys = null;
                                        }

                                        Fill_ReportingCategory(_nValueId);

                                        #endregion " Modify Value Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Value Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ReportingCategory oReportingCategorys = new ReportingCategory(_databaseconnectionstring);


                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                    if (oReportingCategorys.DeleteReportingCategory(_nValueId, _databaseconnectionstring))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Value Code  ", 0, _nValueId, 0, ActivityOutCome.Success);

                                                        //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }



                                            }
                                            oReportingCategorys.Dispose();
                                            oReportingCategorys = null;
                                        }

                                        Fill_ReportingCategory(0);

                                        #endregion " Delete Value Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ReportingCategory(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                    case 50:
                        {

                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        frmImportGlobalPeriod objfrmImportGlobalPeriod = new frmImportGlobalPeriod(0, _databaseconnectionstring);
                                        objfrmImportGlobalPeriod.ShowDialog(this);
                                        objfrmImportGlobalPeriod.Dispose();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;

                            }
                            break;

                        }
                    case 51:
                        {
                            #region Ins. Claim Follow Up Code

                            #region " Get ID for Selected Follow Up Code "

                            //Declare a object of Follow Up Master form
                            frmSetupInsClaimFollowUp ofrmSetupClaimAccFollowUp;
                            //Declare ID and code
                            Int64 nFollowUpID = 0;
                            

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify" || e.ClickedItem.Tag.ToString() == "Activate" || e.ClickedItem.Tag.ToString() == "De-activate")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                {
                                    return;
                                }
                                else
                                {
                                    nFollowUpID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                }

                            }

                            #endregion " Ins. Claim Follow Up Code "
                            

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {

                                        #region " Add Follow Up Code through Master frmSetupClaimAccFollowUp "

                                        // new object for a form Follow Up Form
                                        ofrmSetupClaimAccFollowUp = new frmSetupInsClaimFollowUp(nFollowUpID);

                                        //show form as dialog
                                        ofrmSetupClaimAccFollowUp.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_FollowUpCode(ofrmSetupClaimAccFollowUp.FollowUPCodeId, CollectionEnums.FollowUpType.Claim);

                                        //Dispose the form object
                                        ofrmSetupClaimAccFollowUp.Dispose();

                                        #endregion " Add Follow Up Code through Master frmSetupClaimAccFollowUp "

                                        break;
                                    }
                                case "Modify":
                                    {

                                        #region " Modify Follow Up Code "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check Follow Up ID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {

                                                CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                                                ofrmSetupClaimAccFollowUp = new frmSetupInsClaimFollowUp(nFollowUpID);
                                                if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.Claim, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                                                {
                                                    ofrmSetupClaimAccFollowUp.bIsUsed = false;
                                                }
                                                else
                                                {
                                                    //MessageBox.Show("Follow-up code in use. It cannot be modified.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    ofrmSetupClaimAccFollowUp.bIsUsed = true;
                                                }
                                                ofrmSetupClaimAccFollowUp.ShowDialog(this);
                                                ofrmSetupClaimAccFollowUp.Dispose();
                                                Fill_FollowUpCode(nFollowUpID, CollectionEnums.FollowUpType.Claim);
                                                oFollowUpCode.Dispose();
                                                oFollowUpCode = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this Follow Up Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }



                                        #endregion " Modify Follow Up Code "

                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Follow Up Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                                                if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.Claim, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {

                                                        if (oFollowUpCode.DeleteFollowUpCode(nFollowUpID, CollectionEnums.FollowUpType.Claim))
                                                        {
                                                            Fill_FollowUpCode(0, CollectionEnums.FollowUpType.Claim);
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.Delete, "Delete Follow Up Code ", 0, nFollowUpID, 0, ActivityOutCome.Success);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Follow-up code in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                oFollowUpCode.Dispose();
                                                oFollowUpCode = null;
                                            }

                                        }


                                        #endregion " Delete Follow Up Code "

                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_FollowUpCode(0, CollectionEnums.FollowUpType.Claim);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "De-activate":
                                    {
                                        CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                                        if (oFollowUpCode.VerifyBeforeDeactivateFollowUpCode(dgMasters.SelectedRows[0].Cells[1].Value.ToString(),CollectionEnums.FollowUpType.Claim))
                                        {
                                            MessageBox.Show("Follow-up action item in use. Cannot deactivated.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2);
                                        }
                                        else
                                        {
                                            if (MessageBox.Show("Selected Insurance Claim follow-up action will be deactivated. Do you want to continue?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                            {
                                                ActiveDeactiveFollowUp(nFollowUpID, 0, CollectionEnums.FollowUpType.Claim);
                                                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.FollowUpScheduledActions, gloAuditTrail.ActivityType.DeActivate, "Insurance Claim FollowUp action De-activated successfully.", 0, nFollowUpID, 0, gloAuditTrail.ActivityOutCome.Success);
                                                Fill_FollowUpCode(0, CollectionEnums.FollowUpType.Claim);

                                            }
                                        }
                                        break;
                                    }
                                case "Activate":
                                    {
                                        if (MessageBox.Show("Selected Insurance Claim follow-up action will be activated. Do you want to continue?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                        {
                                            ActiveDeactiveFollowUp(nFollowUpID, 1, CollectionEnums.FollowUpType.Claim);
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.FollowUpScheduledActions, gloAuditTrail.ActivityType.Activate, "Insurance Claim FollowUp action activated successfully.", 0, nFollowUpID, 0, gloAuditTrail.ActivityOutCome.Success);
                                            Fill_FollowUpCode(0, CollectionEnums.FollowUpType.Claim);
                                           
                                        }
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }

                    case 52:
                        {
                            #region Pat. Acc. Follow Up Code

                            #region " Get ID for Selected Follow Up Code "

                            //Declare a object of Follow Up Master form
                            frmSetupAccFollowUp ofrmSetupAccFollowUp;
                            //Declare ID and code
                            Int64 nFollowUpID = 0;
                        

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify" || e.ClickedItem.Tag.ToString() == "Activate" || e.ClickedItem.Tag.ToString() == "De-activate")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                {
                                    return;
                                }
                                else
                                {
                                    nFollowUpID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                }

                            }

                            #endregion " Get ID for Selected Follow Up Code "


                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {

                                        #region " Add Follow Up Code through Master frmSetupClaimAccFollowUp "

                                        // new object for a form Follow Up Form
                                        ofrmSetupAccFollowUp = new frmSetupAccFollowUp(nFollowUpID);

                                        //show form as dialog
                                        ofrmSetupAccFollowUp.ShowDialog(this);

                                        //After adding new data Fill the grid
                                        Fill_FollowUpCode(ofrmSetupAccFollowUp.FollowUPCodeId, CollectionEnums.FollowUpType.PatientAccount);

                                        //Dispose the form object
                                        ofrmSetupAccFollowUp.Dispose();

                                        #endregion " Add Follow Up Code through Master frmSetupClaimAccFollowUp "

                                        break;
                                    }
                                case "Modify":
                                    {

                                        #region " Modify Follow Up Code "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            //Check Follow Up ID is present or not
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                                                ofrmSetupAccFollowUp = new frmSetupAccFollowUp(nFollowUpID);
                                                if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.PatientAccount, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                                                {
                                                    ofrmSetupAccFollowUp.bIsUsed = false;
                                                }
                                                else
                                                {
                                                    ofrmSetupAccFollowUp.bIsUsed = true;
                                                    // MessageBox.Show("Follow-up code in use. It cannot be modified.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }

                                                ofrmSetupAccFollowUp.ShowDialog(this);
                                                ofrmSetupAccFollowUp.Dispose();
                                                Fill_FollowUpCode(nFollowUpID, CollectionEnums.FollowUpType.PatientAccount);
                                                oFollowUpCode.Dispose();
                                                oFollowUpCode = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify this Follow Up Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }

                                        }



                                        #endregion " Modify Follow Up Code "

                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Follow Up Code "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                                                if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.PatientAccount, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                                                {

                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {

                                                        if (oFollowUpCode.DeleteFollowUpCode(nFollowUpID, CollectionEnums.FollowUpType.PatientAccount))
                                                        {
                                                            Fill_FollowUpCode(0, CollectionEnums.FollowUpType.PatientAccount);
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.CPT, ActivityType.Delete, "Delete Follow Up Code ", 0, nFollowUpID, 0, ActivityOutCome.Success);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Follow-up code in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                oFollowUpCode.Dispose();
                                                oFollowUpCode = null;
                                            }

                                        }
                                        #endregion " Delete Follow Up Code "

                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_FollowUpCode(0, CollectionEnums.FollowUpType.PatientAccount);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "De-activate":
                                    {
                                        CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                                        if (oFollowUpCode.VerifyBeforeDeactivateFollowUpCode(dgMasters.SelectedRows[0].Cells[1].Value.ToString(), CollectionEnums.FollowUpType.PatientAccount))
                                        {
                                            MessageBox.Show("Follow-up action item in use. Cannot deactivated.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button2);
                                        }

                                        else
                                        {

                                            if (MessageBox.Show("Selected Patient account follow-up action will be deactivated. Do you want to continue?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                            {
                                                ActiveDeactiveFollowUp(nFollowUpID, 0, CollectionEnums.FollowUpType.PatientAccount);
                                                gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.FollowUpScheduledActions, gloAuditTrail.ActivityType.DeActivate, "Patient account FollowUp De-activated successfully", 0, nFollowUpID, 0, gloAuditTrail.ActivityOutCome.Success);
                                                Fill_FollowUpCode(0, CollectionEnums.FollowUpType.PatientAccount);



                                            }
                                        }
                                        break;
                                    }
                                case "Activate":
                                    {
                                        if (MessageBox.Show("Selected Patient account follow-up action will be activated. Do you want to continue?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                        {
                                            ActiveDeactiveFollowUp(nFollowUpID, 1, CollectionEnums.FollowUpType.PatientAccount);
                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.FollowUpScheduledActions, gloAuditTrail.ActivityType.Activate, "Patient account FollowUp Activated successfully.", 0, nFollowUpID, 0, gloAuditTrail.ActivityOutCome.Success);
                                            Fill_FollowUpCode(0, CollectionEnums.FollowUpType.PatientAccount);
                                           
                                            
                                        }
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                    case 53:
                        {
                            #region "MedicaidResubmissionCode"
                            //#region " Get ID for Selected Statement Criteria ID "
                            frmSetupMedicaidResubmissionCode ofrmMedicaidResubmissionCode = null;
                            Int64 _nValueId = 0;
                            ////Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    // If CategoryID is Not Present
                                    return;
                                else
                                    _nValueId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add MedicaidResubmissionCode"

                                        ofrmMedicaidResubmissionCode = new frmSetupMedicaidResubmissionCode(0, _databaseconnectionstring);
                                        ofrmMedicaidResubmissionCode.ShowDialog(this);

                                        Fill_MedicaidResubmissionCodes(ofrmMedicaidResubmissionCode.ValueID);
                                        ofrmMedicaidResubmissionCode.Dispose();
                                        ofrmMedicaidResubmissionCode = null;
                                        #endregion "Add Value Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify MedicaidResubmissionCode "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ofrmMedicaidResubmissionCode = new frmSetupMedicaidResubmissionCode(_nValueId, _databaseconnectionstring);
                                            ofrmMedicaidResubmissionCode.ShowDialog(this);
                                            ofrmMedicaidResubmissionCode.Dispose();
                                        }

                                        Fill_MedicaidResubmissionCodes(_nValueId);

                                        #endregion " Modify Value Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete MedicaidResubmissionCode "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            MedicaidResubmissionCode ObjMedicaidResubmissionCode = new MedicaidResubmissionCode(_databaseconnectionstring);


                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                    //if (oAdjustmentType.BlockAdjustmentType(_AdjustmentTypeID))
                                                    if (ObjMedicaidResubmissionCode.DeleteMedicaidResubmissionCode(_nValueId, _databaseconnectionstring))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Value Code  ", 0, _nValueId, 0, ActivityOutCome.Success);

                                                        //MessageBox.Show("Record Deleted Successfully", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                    }
                                                }
                                            }
                                            ObjMedicaidResubmissionCode.Dispose();
                                            ObjMedicaidResubmissionCode = null;
                                        }

                                        Fill_MedicaidResubmissionCodes(0);

                                        #endregion " Delete Value Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_MedicaidResubmissionCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        //Fill_StatementCriteria(_StatementCriteriaID);
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }

                    case 54:
                        {
                            #region "BusinessCenter"

                            frmSetupBusinessCenter ofrmSetupBusinessCenter = null;
                            Int64 _nValueId = 0;

                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    return;
                                else
                                    _nValueId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //#endregion

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add BusinessCenterCode"

                                        ofrmSetupBusinessCenter = new frmSetupBusinessCenter(0, _databaseconnectionstring);
                                        ofrmSetupBusinessCenter.ShowDialog(this);

                                        Fill_BusinessCenter(ofrmSetupBusinessCenter.ValueID);
                                        ofrmSetupBusinessCenter.Dispose();
                                        ofrmSetupBusinessCenter = null;
                                        #endregion "Add Value Code "
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify BusinessCenterCode "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ofrmSetupBusinessCenter = new frmSetupBusinessCenter(_nValueId, _databaseconnectionstring);
                                            ofrmSetupBusinessCenter.ShowDialog(this);
                                            ofrmSetupBusinessCenter.Dispose();
                                        }

                                        Fill_BusinessCenter(_nValueId);

                                        #endregion " Modify Value Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete BusinessCenterCode "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            BusinessCenter ObjBusinessCenterCode = new BusinessCenter(_databaseconnectionstring);

                                            if (ObjBusinessCenterCode.VerifyBforDeleteBusinessCenterCode(_nValueId) == false)
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        if (ObjBusinessCenterCode.DeleteBusinessCenterCode(_nValueId, _databaseconnectionstring))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Value Code  ", 0, _nValueId, 0, ActivityOutCome.Success);
                                                            gloGlobal.gloPMMasters.ClearCache(gloGlobal.gloPMMasters.MasterType.BusinessCenter);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox.Show("Business Center code in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            ObjBusinessCenterCode.Dispose();
                                            ObjBusinessCenterCode = null;
                                        }

                                        Fill_BusinessCenter(0);

                                        #endregion " Delete Value Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_BusinessCenter(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion "BusinessCenter"
                        }

                    case 55:
                        {
                            #region "Claim Reporting Category"

                            frmSetupClaimCategoryType ofrmSetupClaimCategoryType = null;
                            Int64 _nValueId = 0;

                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    return;
                                else
                                    _nValueId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region "Add BusinessCenterCode"

                                        ofrmSetupClaimCategoryType = new frmSetupClaimCategoryType(0, _databaseconnectionstring);
                                        ofrmSetupClaimCategoryType.ShowDialog(this);

                                        Fill_ClaimReportingCategory(ofrmSetupClaimCategoryType.ClaimReportingCategoryID);
                                        ofrmSetupClaimCategoryType.Dispose();
                                        ofrmSetupClaimCategoryType = null;
                                        #endregion "Add Value Code "
                                        break;
                                    }

                                case "Modify":
                                    {
                                        #region " Modify BusinessCenterCode "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ofrmSetupClaimCategoryType = new frmSetupClaimCategoryType(_nValueId, _databaseconnectionstring);
                                            ofrmSetupClaimCategoryType.ShowDialog(this);
                                            ofrmSetupClaimCategoryType.Dispose();
                                        }

                                        Fill_ClaimReportingCategory(_nValueId);

                                        #endregion " Modify Value Code "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete BusinessCenterCode "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            ClaimReportingCategory objClaimCategoryType = new ClaimReportingCategory(_databaseconnectionstring);

                                            objClaimCategoryType.ClaimReportingCategoryID = _nValueId;

                                            if (!objClaimCategoryType.IsClaimReportingCategoryUsedinTransactions())
                                            {
                                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        if (objClaimCategoryType.DeleteClaimReportingCategory())
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Value Code  ", 0, _nValueId, 0, ActivityOutCome.Success);
                                                            gloGlobal.gloPMMasters.ClearCache(gloGlobal.gloPMMasters.MasterType.BusinessCenter);
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                MessageBox.Show("Claim reporting category is in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            objClaimCategoryType.Dispose();
                                            objClaimCategoryType = null;
                                        }

                                        Fill_ClaimReportingCategory(0);

                                        #endregion " Delete Value Code "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_ClaimReportingCategory(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion "Claim Reporting Category"
                        }
                    case 56:
                        {
                            #region Notes

                            #region " Get ID for Selected Note "

                            frmSetupQuickNotes ofrmSetupNotes;
                            Int64 nID = 0;

                            //Check which item is clicked
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify" || e.ClickedItem.Tag.ToString() == "Copy As")
                            {
                                // Check whether row is selected or not, only for Modify & Delete 
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    // If Data Is Not Selected from GridView to Modify or Delete
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    return;
                                else
                                    nID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            }

                            #endregion " Get ID for Selected Category "

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {

                                case "Add":
                                    {
                                        #region " To add Quick Note through Master frmSetupQuickNotes "
                                        ofrmSetupNotes = new frmSetupQuickNotes(_databaseconnectionstring);
                                        ofrmSetupNotes.ShowDialog(this);
                                        Fill_QuickNotes(ofrmSetupNotes.ID);
                                        ofrmSetupNotes.Dispose();
                                        ofrmSetupNotes = null;
                                        #endregion " To add Quick Note through Master frmSetupCategory "
                                        break;
                                    }
                                case "Modify":
                                    {
                                        #region " To modify Quick Note "
                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (nID != 0)
                                            {
                                                ofrmSetupNotes = new frmSetupQuickNotes(nID, _databaseconnectionstring);
                                                ofrmSetupNotes.ShowDialog(this);
                                                Fill_QuickNotes(nID);
                                                ofrmSetupNotes.Dispose();
                                                ofrmSetupNotes = null;
                                            }

                                        }
                                        #endregion " To modify Quick Note "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Quick Note "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (nID != 0)
                                            {
                                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {

                                                    QuickNotes oQuickNotes = new QuickNotes(_databaseconnectionstring);
                                                    if (oQuickNotes.Delete(nID))
                                                    {
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.Notes, ActivityType.Delete, "Delete Quick Note ", 0, nID, 0, ActivityOutCome.Success);
                                                        Fill_QuickNotes(nID);
                                                    }
                                                    if (oQuickNotes != null)
                                                    {
                                                        oQuickNotes.Dispose();
                                                        oQuickNotes = null;
                                                    }
                                                }
                                            }
                                        }
                                        #endregion " Delete Quick Note "
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_QuickNotes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                case "Copy As":
                                        {
                                                 string sNote = "";
                                                if (dgMasters != null && dgMasters.SelectedRows.Count > 0)
                                                {
                                                    if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                                        return;
                                                    else
                                                        sNote = dgMasters.SelectedRows[0].Cells["sNoteDescription"].Value.ToString();

                                                    if (sNote != "")
                                                    {
                                                        ofrmSetupNotes = new frmSetupQuickNotes(sNote, _databaseconnectionstring);
                                                        ofrmSetupNotes.ShowDialog(this);
                                                        Fill_QuickNotes(0);
                                                        ofrmSetupNotes.Dispose();
                                                        ofrmSetupNotes = null;
                                                    }
                                                }
                                            break;
                                        }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }

                    case 57:
                        {
                            #region RemarkCodes

                            frmSetupRemarkCodes ofrmRemarkCodes = null;
                            Int64 _RemarkID = 0;

                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    return;
                                else
                                    _RemarkID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add RemarkCode "

                                        ofrmRemarkCodes = new frmSetupRemarkCodes(_databaseconnectionstring, 0);
                                        ofrmRemarkCodes.ShowDialog(this);
                                        Fill_RemarkCodes(_RemarkID);
                                        ofrmRemarkCodes.Dispose();
                                        ofrmRemarkCodes = null;

                                        #endregion " Add RemarkCode"
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify RemarkCode"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            RemarkCodes ObjRemarkCodes = new RemarkCodes();
                                            if (ObjRemarkCodes.CanDelete(_RemarkID, DatabaseConnectionString))
                                            {
                                                ofrmRemarkCodes = new frmSetupRemarkCodes(_databaseconnectionstring, _RemarkID);
                                                ofrmRemarkCodes.tsb_Save.Visible = false;
                                                ofrmRemarkCodes.ShowDialog(this);
                                                ofrmRemarkCodes.Dispose();
                                                ofrmRemarkCodes = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            ObjRemarkCodes.Dispose();
                                            ObjRemarkCodes = null;

                                        }

                                        Fill_RemarkCodes(_RemarkID);

                                        #endregion " Modify Statement Criteria "
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete RemarkCode "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                Int64 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                                RemarkCodes oRemarkCodes = new RemarkCodes();

                                                if (oRemarkCodes.CanDelete(_RemarkID, DatabaseConnectionString))
                                                {
                                                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        oRemarkCodes.DeleteRemarkCode(_ID, DatabaseConnectionString);
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.None, ActivityType.Delete, "Delete Group Code Code", 0, _ID, 0, ActivityOutCome.Success);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot delete system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                oRemarkCodes.Dispose();
                                                oRemarkCodes = null;

                                            }

                                            Fill_RemarkCodes(0);


                                        }

                                        #endregion " Delete RemarkCodes"
                                        break;
                                    }

                                case "Refresh":
                                    {
                                        Fill_RemarkCodes(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }

                    case 59:
                        {
                            #region RuleEditor

                          ChargeRules.frmRuleEditor ofrmRuleEditor = null;
                            Int64 _RuleID = 0;

                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify" || e.ClickedItem.Tag.ToString() == "Copy As" || e.ClickedItem.Tag.ToString() == "Verify")
                            {
                                if (dgMasters.SelectedRows.Count <= 0)
                                {
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                    return;
                                else
                                    _RuleID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                            }

                            //Switch to check which item of toolstrip is clicked
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region " Add RemarkCode "

                                        ofrmRuleEditor = new ChargeRules.frmRuleEditor(0);
                                        ofrmRuleEditor.ShowDialog(this);
                                        ofrmRuleEditor.Dispose();
                                        if (ofrmRuleEditor.DialogResult == DialogResult.OK)
                                        {
                                            MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                        ofrmRuleEditor = null;
                                        Fill_ClaimRules(0);
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Add, "Claim rule added", 0, 0, 0, ActivityOutCome.Success,SoftwareComponent.gloPM,true);
                                        #endregion " Add RemarkCode"

                                        ChargeRules.RulesRepository.ClearRulesCache();
                                        break;
                                    }

                                case "Modify":
                                    {

                                        #region " Modify Rule"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (_RuleID != 0)
                                            {
                                                ofrmRuleEditor = new ChargeRules.frmRuleEditor(_RuleID);
                                                ofrmRuleEditor.ShowDialog(this);
                                                if (ofrmRuleEditor.DialogResult == DialogResult.OK)
                                                {
                                                    MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                Fill_ClaimRules(_RuleID);
                                                ofrmRuleEditor.Dispose();
                                                ofrmRuleEditor = null;
                                                gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Modify, "Claim rule modified", 0,_RuleID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                            }

                                        }

                                        #endregion " Modify Rule "

                                        ChargeRules.RulesRepository.ClearRulesCache();
                                        break;
                                    }
                                case "Delete":
                                    {
                                        #region " Delete Rule "

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                Int64 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());


                                                ClsRuleEngine oClsRuleEngine = new ClsRuleEngine();
                                                if (IsClaimRuleTriggered(_ID))
                                                {
                                                    if (MessageBox.Show("Claim(s) having error message triggered from rule will not show rule \n information after deletion \n Are you sure you want to delete this rule?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {

                                                        oClsRuleEngine.DeleteRules(_ID);
                                                        MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        Fill_ClaimRules(0);
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Delete, "Claim rule deleted", 0, _RuleID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                                    }
                                                    else
                                                    {
                                                        Fill_ClaimRules(_RuleID);

                                                    }
                                                }
                                                else if (MessageBox.Show("Are you sure you want to delete this rule?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    { 
                                                       
                                                        oClsRuleEngine.DeleteRules(_ID);
                                                        Fill_ClaimRules(0);
                                                        MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Delete, "Claim rule deleted", 0, _RuleID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                                    }
                                                else
                                                {
                                                    Fill_ClaimRules(_RuleID);
                                                }

                                                    oClsRuleEngine.Dispose();
                                                    oClsRuleEngine = null;

                                            }

                                            


                                        }

                                        #endregion "Delete Rule"

                                        ChargeRules.RulesRepository.ClearRulesCache();
                                        break;
                                    }

                                case "Refresh":
                                    {
                                        Fill_ClaimRules(0);
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Refresh, "Claim rule refresh", 0, 0, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                        break;
                                    }
                                case "Import":
                                    {
                                        ChargeRules.frmImportRules frmImportRules = new frmImportRules();
                                        frmImportRules.ShowDialog(this);
                                        break;
                                    }
                                case "Export":
                                    {
                                        ChargeRules.frmExportRules frmExportRules = new frmExportRules();
                                        frmExportRules.ShowDialog(this);
                                        break;
                                    }
                                case "Publish":
                                    {
                                        ChargeRules.frmPublishRules frmPublishRules = new frmPublishRules();
                                        frmPublishRules.ShowDialog(this);
                                        break;
                                    }
                                case "Verify":
                                    {
                                     
                                            ChargeRules.frmClaimRuleVerification frmRuleVerification = new frmClaimRuleVerification(DatabaseConnectionString, _RuleID);
                                            frmRuleVerification.SetSelectedText(Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value.ToString()));
                                            frmRuleVerification.ShowDialog(this);
                                            frmRuleVerification.Dispose();
                                            frmRuleVerification = null;
                                      
                                        break;
                                    }
                                case "TestAllRules":
                                    {
                                        ChargeRules.frmClaimRuleVerification frmRuleVerification = new frmClaimRuleVerification(DatabaseConnectionString,0);
                                        frmRuleVerification.SetSelectedText(Convert.ToString("All Rules"));
                                        frmRuleVerification.ShowDialog(this);
                                        frmRuleVerification.Dispose();
                                        frmRuleVerification = null;
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Close, "Claim rule closed", 0, 0, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                        break;
                                    }
                                case "Activate":
                                    {
                                        Int64 _ID = 0;
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                                                ClsRuleEngine oClsRuleEngine = new ClsRuleEngine();
                                                if (MessageBox.Show("Are you sure you want to Activate this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {
                                                   
                                                    oClsRuleEngine.ActiveDeactiveRule(1, _ID);
                                                    MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Activate, "Claim rule activated", 0, _RuleID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                                    ChargeRules.RulesRepository.ClearRulesCache();
                                                }

                                                oClsRuleEngine.Dispose();
                                                oClsRuleEngine = null;

                                            }

                                            Fill_ClaimRules(_ID);
                                        }

                                        break;
                                    }
                                case "De-activate":
                                    {
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {
                                             Int64 _ID=0;
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                 _ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                                                ClsRuleEngine oClsRuleEngine = new ClsRuleEngine();
                                                if (MessageBox.Show("Are you sure you want to De-activate this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                {

                                                    oClsRuleEngine.ActiveDeactiveRule(0, _ID);
                                                    MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.DeActivate, "Claim rule De-activated", 0, _RuleID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);

                                                    ChargeRules.RulesRepository.ClearRulesCache();
                                                }

                                                oClsRuleEngine.Dispose();
                                                oClsRuleEngine = null;

                                            }

                                            Fill_ClaimRules(_ID);
                                        }

                                        break;
                                    }
                                case "Copy As":
                                    {

                                        #region " Copy Rule"

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (_RuleID != 0)
                                            {
                                                ofrmRuleEditor = new ChargeRules.frmRuleEditor(_RuleID);
                                                ofrmRuleEditor.IsCopy = true;
                                                ofrmRuleEditor.ShowDialog(this);
                                                Fill_ClaimRules(_RuleID);
                                                if (ofrmRuleEditor.DialogResult == DialogResult.OK)
                                                {
                                                    MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                                ofrmRuleEditor.Dispose();
                                                ofrmRuleEditor = null;
                                                gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Modify, "Claim rule coppied", 0, _RuleID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                               
                                            }

                                        }

                                        #endregion " Copy Rule "
                                        break;
                                    }
                                case "Help":
                                    {
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                            #endregion
                        }
                   case 60:
                        {
                            #region "Hold Billing"

                            FrmSetupHoldBilling ofrmHoldBilling;
                            Int64 HoldBillingID=0;
                            string _strHoldBillingReason="";
                            if(e.ClickedItem.Tag.ToString()=="Delete"||e.ClickedItem.Tag.ToString()=="Modify")
                            {
                                if(dgMasters.SelectedRows.Count <=0)
                                {
                                    return;
                                }

                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                {
                                    return;
                                }
                                else
                                {
                                    HoldBillingID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                    _strHoldBillingReason = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                                }
                            }
                            #endregion

                            //Switch to check which item of toolstrip is clicked
                                switch(e.ClickedItem.Tag.ToString())
                                {
                                    case "Add":
                                        {
                                        #region "To add Hold Billing through Master frmSetupHoldBilling
                                            ofrmHoldBilling=new FrmSetupHoldBilling(_databaseconnectionstring);
                                            ofrmHoldBilling.ShowDialog(this);
                                            Fill_HoldBilling(ofrmHoldBilling.HoldBillingID);
                                            ofrmHoldBilling.Dispose();
                                        #endregion "To add Hold Billing through Master frmSetupHoldBilling
                                            break;
                                        }
                                    case "Modify":
                                        {
                                            if(dgMasters.SelectedRows.Count>0)
                                            {
                                                if(dgMasters.SelectedRows[0].Cells[0].Value.ToString()!=""||dgMasters.SelectedRows[0].Cells[0].Value.ToString()!="0")
                                                {
                                                    ofrmHoldBilling=new FrmSetupHoldBilling(HoldBillingID,_databaseconnectionstring);
                                                    ofrmHoldBilling.tlsbtn_Save.Visible = false;
                                                    ofrmHoldBilling.ShowDialog(this);
                                                    ofrmHoldBilling.Dispose();
                                                    ofrmHoldBilling=null;
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Cannot Modify Hold Billing", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                }
                                            }
                                            Fill_HoldBilling(HoldBillingID);

                                           
                                            break;
                                        }
                                    case "Delete":
                                        {
                                            #region "Delete Hold Billing"
                                            if(dgMasters.SelectedRows.Count > 0)
                                            {
                                                if(dgMasters.SelectedRows[0].Cells[0].Value.ToString()!=""||dgMasters.SelectedRows[0].Cells[0].Value.ToString()!="0")
                                                {
                                                    HoldBilling oHoldBilling = new HoldBilling(_databaseconnectionstring);
                                                    if (oHoldBilling.IsHoldBillingReasonCodeUsed(HoldBillingID))
                                                    {
                                                        MessageBox.Show("Record is in use. Can not be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);  
                                                    }
                                                    else if (MessageBox.Show("Are you sure you want to delete this record?",_messageBoxCaption,MessageBoxButtons.YesNo,MessageBoxIcon.Question,MessageBoxDefaultButton.Button2)==DialogResult.Yes)
                                                    {
                                                        if(oHoldBilling.Delete(HoldBillingID))
                                                        {
                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.HoldBilling, ActivityType.Delete, "Delete Hold Billing ", 0, HoldBillingID, 0, ActivityOutCome.Success);
                                                        }
                                                        oHoldBilling.Dispose();
                                                        oHoldBilling=null;
                                                    }
                                                }
                                                Fill_HoldBilling(0);
                                            }
                                                #endregion "delete HoldBilling"
                                                break;
                                        }
                                    case "Refresh":
                                        {
                                             Fill_HoldBilling(0);
                                                break;
                                        }
                                    case "Close":
                                        {
                                            this.Close();
                                            break;
                                        }
                                    default:
                                        break;
                                }
                                break;
                               
                            }

                   case 61://Standard Reason Code
                        {
                            #region "Standard Reason Code"
                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        
                                        OpenreasonCodeScreen(1);//Flag =1 To Open Screen for New record.
                                        break;
                                    }
                                case "Modify":
                                    {
                                        OpenreasonCodeScreen(2);//Flag =2 To Open Screen for modify selecte record.
                                        break;
                                    }
                                case "Delete":
                                    {
                                        Deletereasoncode();
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_StandardReasonCode();
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;
                            #endregion
                        }
                   case 62:
                        {
                            #region "Standard Follow up Action"
                            frmStandardFollowupAction oStdFollowup;
                            Int64 StdFollowupID = 0;
                            string StdFollowupCode = "";
                            string StdFollowupDesc = "";
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                if (dgMasters.Rows.Count <= 0)
                                {
                                    return;
                                }
                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                {
                                    return;
                                }
                                else
                                {
                                    StdFollowupID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value);
                                    StdFollowupCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                                    StdFollowupDesc = dgMasters.SelectedRows[0].Cells[2].Value.ToString();
                                }
                            }
                            #endregion

                            //Switch case for toolstrip buttons

                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        #region "Add Standard follow up Action"
                                        oStdFollowup = new frmStandardFollowupAction(DatabaseConnectionString);
                                        oStdFollowup.ShowDialog(this);
                                        Fill_StandardFollowupAction(oStdFollowup.nStdFollowupActionID);
                                        oStdFollowup.Dispose();
                                        #endregion
                                        break;
                                    }
                                case "Modify":
                                    {
                                        if (dgMasters.Rows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                oStdFollowup = new frmStandardFollowupAction(StdFollowupID, DatabaseConnectionString);
                                                oStdFollowup.ShowDialog();
                                                oStdFollowup.Dispose();
                                                oStdFollowup = null;
                                            }
                                            else
                                            {
                                                MessageBox.Show("Cannot modify Standard Claim Follow-up Action.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                            Fill_StandardFollowupAction(ID);
                                        }
                                        break;
                                    }
                                case "Delete":
                                    {
                                        if (dgMasters.Rows.Count > 0)
                                        {
                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                 StandardFollowupAction ostd = new StandardFollowupAction(DatabaseConnectionString);
                                                 if (!ostd.VerifyBeforeDeleteStdCode(StdFollowupID))
                                                 {
                                                     if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                     {
                                                         if (ostd.Delete(StdFollowupID))
                                                         {
                                                             gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.FollowUp, ActivityType.Delete, "Delete Standard Follow-up Action ", 0, StdFollowupID, 0, ActivityOutCome.Success);
                                                         }
                                                        
                                                     }
                                                 }
                                                 else
                                                 {
                                                     MessageBox.Show("Standard Claim Follow-up Action code in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                 }
                                                 ostd.Dispose();
                                                 ostd = null;
                                            }
                                            Fill_StandardFollowupAction(0);
                                        }
                                        break;
                                    }
                                case "Refresh":
                                    {
                                        Fill_StandardFollowupAction(0);
                                        break;
                                    }
                                case "Close":
                                    {
                                        this.Close();
                                        break;
                                    }
                                default:
                                    break;
                            }
                            break;

                        }
                   case 63:
                        {
                            frmInsuranceFollowupActionCrossWalk oInsCrosswalk = null;
                            Int64 _nInsCrosswalkID = 0;
                            if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                            {
                                if (dgMasters.Rows.Count <= 0)
                                {
                                    return;
                                }

                                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                {
                                    return;
                                }
                                else
                                {
                                    _nInsCrosswalkID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                }

                            }


                            switch (e.ClickedItem.Tag.ToString())
                            {
                                case "Add":
                                    {
                                        oInsCrosswalk = new frmInsuranceFollowupActionCrossWalk(DatabaseConnectionString);
                                        oInsCrosswalk.ShowDialog();
                                        oInsCrosswalk.Dispose();
                                        Fill_InsuranceFollowupCrosswalk();
                                    }
                                    break;
                                case "Modify":
                                    {
                                        #region " Modify Follow up code Mapping "

                                        //Check whether row in a grid is selected to modify or not
                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            oInsCrosswalk = new frmInsuranceFollowupActionCrossWalk(_nInsCrosswalkID, DatabaseConnectionString);
                                            oInsCrosswalk.ShowDialog(this);
                                            Fill_InsuranceFollowupCrosswalk();
                                            oInsCrosswalk.Dispose();
                                            oInsCrosswalk = null;
                                        }
                                        else
                                        {
                                            MessageBox.Show("Cannot modify Insurance Claim follow-up action Crosswalk", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); 
                                        }

                                        #endregion
                                    }
                                    break;
                                case "Delete":
                                    {
                                        #region " Delete Follow up Mapping Mapping"

                                        if (dgMasters.SelectedRows.Count > 0)
                                        {

                                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                                            {
                                                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                                try
                                                {


                                                    string _msg = "Are you sure you want to delete this record from Insurance Claim Follow-up Crosswalk? ";


                                                    if (MessageBox.Show(_msg, _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                                                    {
                                                        try
                                                        {

                                                            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
                                                            Int64 _tempId = 0;
                                                            
                                                            oDB.Connect(false);

                                                            string _InsCrosswalkName = Convert.ToString(dgMasters.Rows[0].Cells["sInsuranceCrosswalkName"].Value.ToString().Trim());

                                                            if (dgMasters.SelectedRows[0].Cells["nInsuranceCrosswalkID"].Value.ToString().Trim().Length > 0)
                                                            {
                                                                _tempId = Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nInsuranceCrosswalkID"].Value.ToString().Trim());
                                                            }
                                                            oDBParameters.Add("@nID", _tempId, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                            oDB.Execute("gsp_DeleteInsFollowupLine", oDBParameters);
                                                            oDB.Disconnect();

                                                            Fill_InsuranceFollowupCrosswalk();

                                                            gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.Billing, ActivityCategory.InsuranceClaimFollowupMapping, ActivityType.Delete, "Insurance Claim Folloup Action Crosswalk Name '" + _InsCrosswalkName + "' Deleted", 0, _tempId, 0, ActivityOutCome.Success);
                                                            oDBParameters.Dispose();
                                                           
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                                                        }

                                                    }
                                                }
                                                catch
                                                {

                                                }
                                                finally
                                                {
                                                    oDB.Disconnect();
                                                    oDB.Dispose();
                                                    oDB = null;
                                                    
                                                }
                                            }

                                        }
                                        #endregion
                                    }
                                    break;
                                case "Refresh":
                                    {

                                        Fill_InsuranceFollowupCrosswalk();

                                    }
                                    break;
                                case "Close":
                                    {
                                        this.Close();
                                    }
                                    break;
                                default:
                                    break;

                            }

                        }
                        break;



                    //case 60: //Bad Debt follow-up setup
                    //    {
                    //        #region Bad Debt Follow Up Code

                    //        #region " Get ID for Selected Follow Up Code "

                    //        //Declare a object of Follow Up Master form
                    //        frmSetupBadDebtFollowUp ofrmSetupBadDebtFollowUp;
                    //        //Declare ID and code
                    //        Int64 nFollowUpID = 0;

                    //        //Check which item is clicked
                    //        if (e.ClickedItem.Tag.ToString() == "Delete" || e.ClickedItem.Tag.ToString() == "Modify")
                    //        {
                    //            // Check whether row is selected or not, only for Modify & Delete 
                    //            if (dgMasters.SelectedRows.Count <= 0)
                    //            {
                    //                // If Data Is Not Selected from GridView to Modify or Delete
                    //                return;
                    //            }
                    //            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                    //            {
                    //                return;
                    //            }
                    //            else
                    //            {
                    //                nFollowUpID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                    //                if (Convert.ToString(dgMasters.SelectedRows[0].Cells[6].Value) != "" && Convert.ToBoolean(dgMasters.SelectedRows[0].Cells[6].Value) == true)
                    //                {
                    //                    MessageBox.Show("Cannot modify/delete system defined bad debt follow-up action.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //                    return;
                    //                }
                    //            }

                    //        }

                    //        #endregion " Get ID for Selected Follow Up Code "


                    //        //Switch to check which item of toolstrip is clicked
                    //        switch (e.ClickedItem.Tag.ToString())
                    //        {

                    //            case "Add":
                    //                {

                    //                    #region " Add Follow Up Code through Master frmSetupClaimAccFollowUp "

                    //                    // new object for a form Follow Up Form
                    //                    ofrmSetupBadDebtFollowUp = new frmSetupBadDebtFollowUp(nFollowUpID);

                    //                    //show form as dialog
                    //                    ofrmSetupBadDebtFollowUp.ShowDialog(this);

                    //                    //After adding new data Fill the grid
                    //                    Fill_FollowUpCode(ofrmSetupBadDebtFollowUp.FollowUPCodeId, CollectionEnums.FollowUpType.BadDebt);

                    //                    //Dispose the form object
                    //                    ofrmSetupBadDebtFollowUp.Dispose();

                    //                    #endregion " Add Follow Up Code through Master frmSetupClaimAccFollowUp "

                    //                    break;
                    //                }
                    //            case "Modify":
                    //                {

                    //                    #region " Modify Follow Up Code "

                    //                    //Check whether row in a grid is selected to modify or not
                    //                    if (dgMasters.SelectedRows.Count > 0)
                    //                    {
                    //                        //Check Follow Up ID is present or not
                    //                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                    //                        {
                    //                            CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                    //                            ofrmSetupBadDebtFollowUp = new frmSetupBadDebtFollowUp(nFollowUpID);
                    //                            if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.BadDebt, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                    //                            {
                    //                                ofrmSetupBadDebtFollowUp.bIsUsed = false;
                    //                            }
                    //                            else
                    //                            {
                    //                                ofrmSetupBadDebtFollowUp.bIsUsed = true;
                    //                                // MessageBox.Show("Follow-up code in use. It cannot be modified.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //                            }

                    //                            ofrmSetupBadDebtFollowUp.ShowDialog(this);
                    //                            ofrmSetupBadDebtFollowUp.Dispose();
                    //                            Fill_FollowUpCode(nFollowUpID, CollectionEnums.FollowUpType.BadDebt);
                    //                            ofrmSetupBadDebtFollowUp.Dispose();
                    //                            ofrmSetupBadDebtFollowUp = null;
                    //                        }
                    //                        else
                    //                        {
                    //                            MessageBox.Show("Cannot modify this Follow Up Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //                        }

                    //                    }



                    //                    #endregion " Modify Follow Up Code "

                    //                    break;
                    //                }
                    //            case "Delete":
                    //                {
                    //                    #region " Delete Follow Up Code "

                    //                    if (dgMasters.SelectedRows.Count > 0)
                    //                    {
                    //                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                    //                        {
                    //                            CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                    //                            if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.BadDebt, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                    //                            {

                    //                                if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                    //                                {

                    //                                    if (oFollowUpCode.DeleteFollowUpCode(nFollowUpID, CollectionEnums.FollowUpType.BadDebt))
                    //                                    {
                    //                                        Fill_FollowUpCode(0, CollectionEnums.FollowUpType.BadDebt);
                    //                                        gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.RCM, ActivityCategory.None, ActivityType.Delete, "Delete bad debt Follow Up Code ", 0, nFollowUpID, 0, ActivityOutCome.Success);
                    //                                    }
                    //                                }
                    //                            }
                    //                            else
                    //                            {
                    //                                MessageBox.Show("Follow-up code in use. It cannot be deleted.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //                            }
                    //                            oFollowUpCode.Dispose();
                    //                            oFollowUpCode = null;
                    //                        }

                    //                    }
                    //                    #endregion " Delete Follow Up Code "

                    //                    break;
                    //                }
                    //            case "Refresh":
                    //                {
                    //                    Fill_FollowUpCode(0, CollectionEnums.FollowUpType.BadDebt);
                    //                    break;
                    //                }
                    //            case "Close":
                    //                {
                    //                    this.Close();
                    //                    break;
                    //                }
                    //            default:
                    //                break;
                    //        }
                    //        break;
                    //        #endregion
                    //    }
                }

            } // end - try
            catch (gloDatabaseLayer.DBException DBErr)
            {
                MessageBox.Show(DBErr.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                this.Cursor = System.Windows.Forms.Cursors.Default;
            }
        }
        // end - private void ts_Commands_ItemClicked(object sender, ToolStripItemClickedEventArgs e)

       #endregion ' Tool Strip Event '



        private void Deletereasoncode()
        {
            Tuple<long, string, string, string, string, Boolean> ReasonCodeData = null;
            Int64 ReasonID = 0;
            clsStandardReasonCode oStandardReasonCode = new global::gloBilling.clsStandardReasonCode();
            try
            {
                ReasonID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                if (oStandardReasonCode.isSystemDefinedReasonCode(ReasonID))
                {
                    MessageBox.Show("Cannot Delete Standard Reason Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    if (MessageBox.Show("Are you sure you want to delete this record?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                    {
                        using (frmStandardReasonCodeSetup ofrmStandardReasonCodeSetup = new global::gloBilling.frmStandardReasonCodeSetup(ReasonCodeData))
                        {
                            ofrmStandardReasonCodeSetup.DeleteReasonCodes(ReasonID);
                            Fill_StandardReasonCode();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            finally
            {
            }
        }

        private void OpenreasonCodeScreen(int flag)
        {
            frmStandardReasonCodeSetup ofrmStandardReasonCodeSetup;
            Tuple<long, string, string, string, string, Boolean> ReasonCodeData = null;
            Int64 ReasonID = 0;
            string GroupCode = "";
            string ReasonCode = "";
            string CodeType = "";
            string Description = "";
            bool isSystemDefined = false;

            try
            {
                if (flag == 1)//Open to add new code
                {
                    ofrmStandardReasonCodeSetup = new global::gloBilling.frmStandardReasonCodeSetup(ReasonCodeData);
                    ofrmStandardReasonCodeSetup.ShowDialog();
                }
                else if (flag == 2)//Open to modify selected Code)
                {

                    ReasonID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                    clsStandardReasonCode oStandardReasonCode = new global::gloBilling.clsStandardReasonCode();
                    if (!oStandardReasonCode.isSystemDefinedReasonCode(ReasonID))
                    {
                        GroupCode = dgMasters.SelectedRows[0].Cells[1].Value.ToString();
                        ReasonCode = dgMasters.SelectedRows[0].Cells[2].Value.ToString();
                        Description = dgMasters.SelectedRows[0].Cells[3].Value.ToString();
                        CodeType = dgMasters.SelectedRows[0].Cells[4].Value.ToString();
                        if (dgMasters.SelectedRows[0].Cells[5].Value.ToString() == "Yes")
                            isSystemDefined = true;
                        else
                            isSystemDefined = false;
                        ReasonCodeData = new Tuple<long, string, string, string, string, Boolean>(ReasonID, GroupCode, ReasonCode, CodeType, Description, isSystemDefined);
                        ofrmStandardReasonCodeSetup = new global::gloBilling.frmStandardReasonCodeSetup(ReasonCodeData);
                        ofrmStandardReasonCodeSetup.ShowDialog();
                    }
                    else
                    {
                        MessageBox.Show("Cannot Modify Standard Reason Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                Fill_StandardReasonCode();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
            }
            finally
            {
             
            }
        }


        #region ' Grid Events '

        private void dgMasters_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {

                if (e.ColumnIndex == 2 && SelectedView == 24)
                {
                    dgMasters.EndEdit();
                    if (dgMasters.Rows[e.RowIndex].Cells[2].Value == DBNull.Value)
                    {
                        dgMasters.Rows[e.RowIndex].Cells[2].Value = false;
                    }
                    if (Convert.ToBoolean(dgMasters.Rows[e.RowIndex].Cells[2].Value) == true)
                    {
                        dgMasters.Rows[e.RowIndex].Cells[2].Value = false;
                    }
                    else
                    {
                        dgMasters.Rows[e.RowIndex].Cells[2].Value = true;
                    }
                }
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }

        private void dgMasters_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            Int64 ID = 0;

            if (e.RowIndex == -1 || SelectedView ==24)
            {
                return;
            }

            if (SelectedView == 58)
            {
                ShowCommonCPT();
                return;

            }
            ID = Convert.ToInt64(dgMasters.Rows[e.RowIndex].Cells[0].Value);

            switch (SelectedView)
            {
                // For ICD9 
                case 1:
                    {
                        LoadICDMaster(gloICD.CodeRevision.ICD9, ID);
                    }
                    break;
                //For CPT
                case 2:

                    #region " CPT "
                    {
                        frmSetupCPT ofrmCPT;
                        //Check CPTID is present or not
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            ofrmCPT = new frmSetupCPT(ID, false, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmCPT.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmCPT.ShowDialog(this);
                            ofrmCPT.Dispose();
                            ofrmCPT = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this CPT.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                    Fill_CPT(ID);
                    break;
                    #endregion " CPT "

                //For Modifier
                case 3:

                    #region " Modifier "
                    {
                        frmSetupModifier ofrmModifier;
                        //Check ModifierID is present or not
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            ofrmModifier = new frmSetupModifier(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmModifier.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmModifier.ShowDialog(this);
                            ofrmModifier.Dispose();
                            ofrmModifier = null;
                            Fill_Modifiers(ID);
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this modifier.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                    //Fill data

                    break;
                    #endregion " Modifier "

                //For Drugs
                case 4:
                    {
                        LoadICDMaster(gloICD.CodeRevision.ICD10, ID);
                    }
                    break;
                //For Category
                case 5:

                    #region " Category "
                    {
                        frmSetupCategory ofrmCategory;


                        //****** added by sandip dhakane 20100729 to restrict system record from editting or modifying
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            ArrayList _Category = new ArrayList();

                            string[] _aCat;
                            string cat = "Labs,RADIOLOGY,Tags,Messages,Patient Letters,Referral Letter,SOAP,PTProtocol,Wellness Guidelines,Disease Management,Patient Consent,Fax Cover Page,Patient Education,Orders,Preventive Services,Disclosure Management,Nurses Notes,MIS Reports";
                            _aCat = cat.Split(',');

                            for (int i = 0; i <= _aCat.Length - 1; i++)
                            {
                                _Category.Add(_aCat[i]);

                            }

                            if (_Category.Contains((dgMasters[1, e.RowIndex].Value.ToString())) && dgMasters[2, e.RowIndex].Value.ToString() == "Template")
                            {
                                MessageBox.Show("Cannot modify system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }

                            if (Convert.ToBoolean(dgMasters[4, e.RowIndex].Value) == true)
                            {
                                MessageBox.Show("Cannot modify system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            // end code sandip dhakane

                            //Check CategoryID is present or not
                            if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                            {

                                ofrmCategory = new frmSetupCategory(ID, _databaseconnectionstring);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmCategory.tsb_Save.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmCategory.ShowDialog(this);
                                ofrmCategory.Dispose();
                                ofrmCategory = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this category.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                    }
                    Fill_Category(ID);
                    break;
                    #endregion " Category "

                case 6: // Insurance CPT Association
                    break;

                case 7: //Type of Service  

                    #region Type Of Service
                    {
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            frmSetupTOS ofrmSetupTOS = new frmSetupTOS(_databaseconnectionstring, ID);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmSetupTOS.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmSetupTOS.ShowDialog(this);
                            ofrmSetupTOS.Dispose();
                            ofrmSetupTOS = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this type of service.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                    Fill_TOS(ID);
                    break;

                    #endregion

                case 8: //Place Of Service

                    #region Place Of Service
                    {
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            frmSetupPOS ofrmSetupPOS = new frmSetupPOS(_databaseconnectionstring, ID);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmSetupPOS.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmSetupPOS.ShowDialog(this);
                            ofrmSetupPOS.Dispose();
                            ofrmSetupPOS = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this place of service.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                    Fill_POS(ID);
                    break;
                    #endregion

                case 9: //Facility

                    #region " Facility "
                    {
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            frmSetupFacility ofrmSetupFacility = new frmSetupFacility(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmSetupFacility.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmSetupFacility.ShowDialog(this);
                            ofrmSetupFacility.Dispose();
                            ofrmSetupFacility = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this facility.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                    Fill_Facility(ID);
                    break;
                    #endregion " Facility "

                case 11://Smart treatment

                    #region " Modify "
                    frmSetupSmartTreatment ofrmSetupSmartTreatment = new frmSetupSmartTreatment(_databaseconnectionstring, Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value), Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value));
                    ofrmSetupSmartTreatment.CloseButton_Click += new frmSetupSmartTreatment.CloseButtonClick(ofrmSetupSmartTreatment_CloseButton_Click);
                    ofrmSetupSmartTreatment.MdiParent = this.MdiParent;
                    ofrmSetupSmartTreatment.WindowState = FormWindowState.Maximized;
                    //Code Added by Mayuri:20091103
                    //To make invisible button save if form gets open for modify
                    ofrmSetupSmartTreatment.tsb_Save.Visible = false;
                    //End Code Added by Mayuri:20091103
                    ofrmSetupSmartTreatment.Show();
                    break;
                    #endregion " Modify "

                case 12: //Code Type

                    #region " Code Type "
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        //Check ICD9ID is present or not
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                        {

                            frmCodeType ofrmctype = new frmCodeType(ID, _databaseconnectionstring);
                            ofrmctype.ShowDialog(this);
                            ofrmctype.Dispose();
                            ofrmctype = null;
                            Fill_Codetype(ID);

                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this code type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }


                    break;
                    #endregion " Code Type"

                case 13: //Patient Relationship

                    #region " Patient Relationship "


                    //Check whether row in a grid is selected to modify or not
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        if (dgMasters.SelectedRows[0].Cells[5].Value.ToString() == "True")
                        {
                            MessageBox.Show("Cannot modify system records.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                        {
                            gloPatient.frmPatientRelationship ofrmRel = new gloPatient.frmPatientRelationship(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify

                            ofrmRel.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmRel.ShowDialog(this);
                            ofrmRel.Dispose();
                            ofrmRel = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this relationship.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                    }

                    Fill_PatientRelationship(ID);

                    break;
                    #endregion " Code Type"

                case 15: //Specialty

                    #region " Specialty "


                    #region " Modify Specialty"

                    //Check whether row in a grid is selected to modify or not
                    if (dgMasters.SelectedRows.Count > 0)
                    {

                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                        {

                            frmSetupSpecialty ofrmSpec = new frmSetupSpecialty(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmSpec.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103


                            ofrmSpec.ShowDialog(this);
                            ofrmSpec.Dispose();
                            ofrmSpec = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this specialty.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }

                    Fill_Specialty(ID);

                    #endregion " Modify Specialty "
                    break;
                    #endregion " Specialty"

                case 16:
                    {

                        #region " Modify Insurance Service Type"

                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {

                                frmInsuranceServiceType ofrmServicetype = new frmInsuranceServiceType(ID, _databaseconnectionstring);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmServicetype.tsb_Save.Visible = false;
                                //End Code Added by Mayuri:20091103

                                ofrmServicetype.ShowDialog(this);
                                ofrmServicetype.Dispose();
                                ofrmServicetype = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this insurance service type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }

                        Fill_InsuranceServicetype(ID);

                        #endregion " Modify Insurance Service Type "

                    }
                    break;

                case 17:
                    {
                        #region " Modify Insurance Plan Codes"

                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {

                                frmSetupInsurancePlan ofrmSetupInsurancePlan = new frmSetupInsurancePlan(_databaseconnectionstring, ID);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmSetupInsurancePlan.tsb_save.Visible = false;
                                //End Code Added by Mayuri:20091103

                                ofrmSetupInsurancePlan.ShowDialog(this);
                                ofrmSetupInsurancePlan.Dispose();
                                ofrmSetupInsurancePlan = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this insurance plan code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }

                        Fill_InsurancePlan(ID);

                        #endregion " Modify Insurance Plan Codes "
                    }
                    break;
                case 18:
                    {
                        #region " Modify Insurance Type"

                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                frmSetup_InsuranceType ofrmSetupInsuranceType = new frmSetup_InsuranceType(_databaseconnectionstring, ID);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmSetupInsuranceType.tls_btnSave.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmSetupInsuranceType.ShowDialog(this);
                                ofrmSetupInsuranceType.Dispose();
                                ofrmSetupInsuranceType = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this plan type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }

                        Fill_InsuranceType(ID);

                        #endregion " Modify Plan Type "
                    }
                    break;
                case 19:
                    {
                        #region " Modifiy Clearing House"

                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                frmSetupClearingHouse ofrmSetupClearingHouse = new frmSetupClearingHouse(_databaseconnectionstring, ID);
                                ofrmSetupClearingHouse.ShowDialog(this);
                                ofrmSetupClearingHouse.Dispose();
                                ofrmSetupClearingHouse = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this clearing house.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }
                        Fill_ClearingHouse(ID);

                        #endregion "  "
                    }
                    break;
                //For Adjustment Type Master
                case 20:

                    #region " Adjustment Type "
                    {
                        frmSetupAdjustmentType ofrmSetupAdjustmentType;
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            ofrmSetupAdjustmentType = new frmSetupAdjustmentType(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmSetupAdjustmentType.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmSetupAdjustmentType.ShowDialog(this);
                            ofrmSetupAdjustmentType.Dispose();
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this adjustment type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                    Fill_AdjustmentTypes(ID);
                    #endregion "Adjustment Type "
                    break;
                case 21:

                    #region " Standard Fee Schedule "
                    if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                    {
                        FeeScheduleTypeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                        FeeScheduleType = Convert.ToString(dgMasters.SelectedRows[0].Cells[2].Value.ToString());
                        frmSetupStdFeeSchedule ofrmSetupStdFeeSchedule = new frmSetupStdFeeSchedule(FeeScheduleTypeID, FeeScheduleType, _databaseconnectionstring, false);
                        ofrmSetupStdFeeSchedule.ShowDialog(this);
                        FillStandardShcheduleNames(FeeScheduleTypeID);
                        ofrmSetupStdFeeSchedule.Dispose();
                        ofrmSetupStdFeeSchedule = null;

                    }
                    #endregion " Standard Fee Schedule "
                    break;
                case 22:
                    {
                        #region " Modify Fee schedule allocation"

                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                ID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                frmSetupFeeScheduleAllocation ofrm = new frmSetupFeeScheduleAllocation(_databaseconnectionstring, ID);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrm.tsbOnlySave.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrm.ShowDialog(this);
                                ofrm.Dispose();
                            }

                        }
                        Fill_StandardFeeScheduleAllocation(ID);

                        #endregion "  "
                    }
                    break;
                case 23:
                    {
                        if (dgMasters.SelectedRows.Count > 0)
                        {
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                frmSetupCardType ofrmSetupCardType = new frmSetupCardType(_databaseconnectionstring, ID);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmSetupCardType.tsb_Save.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmSetupCardType.ShowDialog(this);
                                ofrmSetupCardType.Dispose();
                                Fill_CreditCards(0);
                            }
                        }
                    }
                    break;
                case 25:
                    {
                        if (dgMasters.SelectedRows.Count > 0)
                        {
                            gloScrubber ogloScrubber = new gloScrubber(_databaseconnectionstring);
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                string sCPTCode = dgMasters.SelectedRows[0].Cells[0].Value.ToString();
                                frmSetupScrubber ofrm = new frmSetupScrubber(sCPTCode, _databaseconnectionstring);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrm.tsb_Save.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrm.ShowDialog(this);
                                ofrm.Dispose();
                                Fill_Scrubber(0);
                            }
                            ogloScrubber.Dispose();
                            ogloScrubber = null;
                        }
                    }
                    break;
                case 26: //Referral CPT
                    {
                        #region " Modify Referral CPT "

                        Int64 _cptid = 0;
                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {
                            //Check CPTID is present or not
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                _cptid = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString().Trim());
                                frmSetupReferralCPT ofrmSetupReferralCPT = new frmSetupReferralCPT(_databaseconnectionstring, _cptid);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmSetupReferralCPT.tsb_Save.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmSetupReferralCPT.ShowDialog(this);
                                ofrmSetupReferralCPT.Dispose();
                                ofrmSetupReferralCPT = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this CPT.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }

                        Fill_ReferralCPTs(_cptid);

                        #endregion " Modify CPT "
                    }
                    break;
                case 27:
                    {

                        #region " Modify Anti Scrubber "
                        Int64 ScrubberID = 0;
                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {

                            //Check CPTID is present or not
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                ScrubberID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString().Trim());
                                frmSetupAntiScrubber ofrmSetupAntiScrubber = new frmSetupAntiScrubber(_databaseconnectionstring, ScrubberID);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmSetupAntiScrubber.tsb_save.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmSetupAntiScrubber.ShowDialog(this);
                                ofrmSetupAntiScrubber.Dispose();
                                ofrmSetupAntiScrubber = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }

                        Fill_ClaimScrubber(ScrubberID);

                        #endregion " Modify Anti Scrubber "
                    }
                    break;
                case 29:
                    {

                        #region " Modify Closeday Tray "
                        //   Int64 ScrubberID = 0;
                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                frmSetupCloseDayJournals ofrmCloseDayTray = new frmSetupCloseDayJournals(Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value), _databaseconnectionstring);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmCloseDayTray.tsb_Save.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmCloseDayTray.ShowDialog(this);
                                Fill_CloseDayTray();
                                ofrmCloseDayTray.Dispose();
                                ofrmCloseDayTray = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }


                        #endregion " Modify Closeday Tray "
                    }
                    break;

                case 30:
                    {
                        #region " Modify Charges Tray "

                        //Check whether row in a grid is selected to modify or not
                        if (dgMasters.SelectedRows.Count > 0)
                        {
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                            {
                                frmSetupChargesTray ofrmChargesTray = new frmSetupChargesTray(Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value), _databaseconnectionstring);
                                //Code Added by Mayuri:20091103
                                //To make invisible button save if form gets open for modify
                                ofrmChargesTray.tsb_btnSave.Visible = false;
                                //End Code Added by Mayuri:20091103
                                ofrmChargesTray.ShowDialog(this);
                                Fill_ChargesTray();
                                ofrmChargesTray.Dispose();
                                ofrmChargesTray = null;
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                        }


                        #endregion " Modify Charges Tray"
                    }
                    break;
                case 31:
                    #region " Refund Type "
                    //Check whether row in a grid is selected to modify or not
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        RefundType oRefundType = new RefundType(_databaseconnectionstring);
                        oRefundType.RefundTypeID = ID;
                        if (oRefundType.CanDelete(ID))
                        {
                            frmSetupRefundType ofrmSetupRefundType;
                            ofrmSetupRefundType = new frmSetupRefundType(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmSetupRefundType.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            ofrmSetupRefundType.ShowDialog(this);
                            ofrmSetupRefundType.Dispose();
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify system refund type.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        oRefundType.Dispose();
                        oRefundType = null;
                    }

                    Fill_RefundTypes(ID);

                    #endregion " Refund Type "
                    break;

                case 32:
                    #region " Patient Statement Criteria "
                    //Check whether row in a grid is selected to modify or not
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        frmSetupPatientStatementCriteria ofrmSetupPatientStatementCriteria;
                        ofrmSetupPatientStatementCriteria = new frmSetupPatientStatementCriteria(ID, _databaseconnectionstring);
                        //Code Added by Mayuri:20091103
                        //To make invisible button save if form gets open for modify
                        ofrmSetupPatientStatementCriteria.tlsp_btnSave.Visible = false;
                        //End Code Added by Mayuri:20091103
                        ofrmSetupPatientStatementCriteria.ShowDialog(this);
                        ofrmSetupPatientStatementCriteria.Dispose();
                    }

                    Fill_StatementCriteria(ID);

                    #endregion " Patient Statement Criteria "
                    break;

                case 33:
                    #region Reason Code
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        ID = Convert.ToInt64(dgMasters.Rows[e.RowIndex].Cells[0].Value);
                        ReasonCodes ObjReasonCodes = new ReasonCodes();
                        if (ObjReasonCodes.CanDelete(ID, DatabaseConnectionString) == true)
                        {
                            frmSetupReasonCodes ofrmReasonCodes;
                            ofrmReasonCodes = new frmSetupReasonCodes(_databaseconnectionstring, ID);
                            //Code Added by Mayuri:20091103
                            //To make invisible button save if form gets open for modify
                            ofrmReasonCodes.tsb_Save.Visible = false;
                            //End Code Added by Mayuri:20091103
                            //line added by dipak 20091210
                            ofrmReasonCodes.GroupCode = Convert.ToString(dgMasters.Rows[e.RowIndex].Cells[1].Value);
                            //end line added by dipak 
                            ofrmReasonCodes.ShowDialog(this);
                            ofrmReasonCodes.Dispose();
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        ObjReasonCodes.Dispose();
                        ObjReasonCodes = null;
                    }

                    Fill_ReasonCodes(ID);
                    #endregion

                    break;
                //
                case 34:
                    #region Reason Code
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        ReasonCodes ObjReasonCodes = new ReasonCodes();
                        if (ObjReasonCodes.CanDeleteCode(ID, DatabaseConnectionString) == true)
                        {
                            frmSetupActionCodes ofrmActionCodes;

                            ofrmActionCodes = new frmSetupActionCodes(_databaseconnectionstring, ID);
                            //Code Added by Mayuri:20091106
                            //To make invisible button save if form gets open for modify
                            ofrmActionCodes.tsb_Save.Visible = false;

                            //End Code Added by Mayuri:20091106
                            ofrmActionCodes.ShowDialog(this);
                            ofrmActionCodes.Dispose();
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        ObjReasonCodes.Dispose();
                        ObjReasonCodes = null;
                    }

                    Fill_ActionCodes(ID);
                    #endregion

                    break;
                //
                case 35:
                    #region Group Code
                    //20091231  Mahesh Nawal  Check the Group code is system code or not.
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        //To make invisible button save if form gets open for modify                   
                        ReasonCodes ObjReasonCodes = new ReasonCodes();
                        if (ObjReasonCodes.CanDeleteGroupCode(ID, DatabaseConnectionString) == true)
                        {
                            frmSetupGroupCode ofrmGroupCodes = new frmSetupGroupCode(ID, _databaseconnectionstring);
                            //Code Added by Mayuri:20091106
                            //To make invisible button save if form gets open for modify
                            ofrmGroupCodes.tsb_Save.Visible = false;
                            ofrmGroupCodes.ShowDialog(this);
                            ofrmGroupCodes.Dispose();
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        ObjReasonCodes.Dispose();
                        ObjReasonCodes = null;
                    }

                    Fill_GropCodes(ID);
                    #endregion

                    break;

                case 36:
                    #region " Patient Statement Display Settings "
                    //Check whether row in a grid is selected to modify or not
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        frmSetupPatientStatementDisplaySettings ofrmSetupPatientStatementDisplaySettings;
                        ofrmSetupPatientStatementDisplaySettings = new frmSetupPatientStatementDisplaySettings(ID, _databaseconnectionstring);
                        //Code Added by Mayuri:20091103
                        //To make invisible button save if form gets open for modify
                        ofrmSetupPatientStatementDisplaySettings.tlsp_btnSave.Visible = false;
                        //End Code Added by Mayuri:20091103
                        ofrmSetupPatientStatementDisplaySettings.ShowDialog(this);
                        ofrmSetupPatientStatementDisplaySettings.Dispose();
                    }

                    Fill_StatementDisplaySettings(ID);

                    #endregion " Patient Statement Display Settings "
                    break;

                case 37:
                    #region " Patient Statement Filter Settings "
                    //Check whether row in a grid is selected to modify or not
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        frmSetupPatientStatementFilterCriteria ofrmSetupPatientStatementFilterCriteria;
                        ofrmSetupPatientStatementFilterCriteria = new frmSetupPatientStatementFilterCriteria(ID, _databaseconnectionstring);
                        //Code Added by Mayuri:20091103
                        //To make invisible button save if form gets open for modify
                        ofrmSetupPatientStatementFilterCriteria.tlsp_btnSave.Visible = false;
                        //End Code Added by Mayuri:20091103
                        ofrmSetupPatientStatementFilterCriteria.ShowDialog(this);
                        ofrmSetupPatientStatementFilterCriteria.Dispose();
                    }

                    Fill_StatementFilterSettings(ID);

                    #endregion " Patient Statement Filter Settings "
                    break;

                case 38:


                    #region " Modify CPT Mapping "
                    frmCPTMapping ofrmCPTMapping = null;
                    Int64 _CPTMappingID = 0;

                    if (dgMasters.SelectedRows.Count <= 0)
                    {
                        if (trvMasters.SelectedNode.Level == 0)
                        {
                            return;
                        }
                        else
                        {
                            _CPTMappingID = _CPTMapId;
                        }
                    }

                    if (dgMasters.SelectedRows.Count <= 0)
                    {
                    }
                    else
                        _CPTMappingID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());


                    if (dgMasters.SelectedRows.Count > 0)
                    {

                        ofrmCPTMapping = new frmCPTMapping(_CPTMappingID, _databaseconnectionstring);
                        ofrmCPTMapping.ShowDialog(this);
                        if (trvMasters.SelectedNode.Level == 0)
                        {
                            Fill_CPTMapping();
                        }
                        else
                        {
                            if (dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim().Length > 0)
                            {
                                Fill_CPTMappingDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim()));
                            }
                        }
                        ofrmCPTMapping.Dispose();
                        ofrmCPTMapping = null;
                    }
                    else
                    {
                        if (trvMasters.SelectedNode.Level != 0)
                        {
                            ofrmCPTMapping = new frmCPTMapping(_CPTMappingID, _databaseconnectionstring);
                            ofrmCPTMapping.ShowDialog(this);
                            if (trvMasters.SelectedNode.Level == 0)
                            {
                                Fill_CPTMapping();
                            }
                            else
                            {
                                Fill_CPTMappingDetails(_CPTMappingID);
                                if (dgMasters.RowCount > 0)
                                {
                                    if (dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim().Length > 0)
                                    {
                                        Fill_CPTMappingDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nCPTMappingID"].Value.ToString().Trim()));
                                    }
                                }
                            }
                            ofrmCPTMapping.Dispose();
                            ofrmCPTMapping = null;
  
                        }
                    }

                    #endregion

                    break;

                case 39:
                    #region "Modify ReveneuCode"
                    {
                        frmSetupRevCode ofrmRevCode;

                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            ofrmRevCode = new frmSetupRevCode(_databaseconnectionstring, ID);

                            ofrmRevCode.tsb_Save.Visible = false;

                            ofrmRevCode.ShowDialog(this);
                            ofrmRevCode.Dispose();
                            ofrmRevCode = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this Revenue Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }
                    Fill_RevenueCode(ID);
                    break;
                    #endregion

                case 40:
                    {
                        #region " Modify ERA Payer "
                        Int64 _SettingID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                            _SettingID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());

                        using (gloERA.frmERAPayerSetup frmPayer = new global::gloBilling.gloERA.frmERAPayerSetup(_SettingID))
                        {
                            if (frmPayer.ShowDialog(this) == DialogResult.Yes)
                                Fill_ERAPayers();                            
                        }
                        #endregion
                    }
                    break;
                case 41:
                    {
                        #region " Modify Qulifier"
                        Int64 _QualifierID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {

                            if (dgMasters.SelectedRows[0].Cells[3].Value.ToString() != "1")
                            {
                                _QualifierID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                                frmSetupIDQualifier ofrmSetupIDQualifier = new frmSetupIDQualifier(_databaseconnectionstring, _QualifierID);
                                ofrmSetupIDQualifier.ShowDialog(this);
                                ofrmSetupIDQualifier.Dispose();
                                ofrmSetupIDQualifier = null;
                                Fill_Qualifier();
                            }
                            else { MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); }

                        }
                        #endregion
                    }
                    break;

                case 42:
                    {
                        #region " Modify Qulifier Accociation"
                        Int64 _QualifierAccociationID = 0;
                        Int64 _QualifierMstID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _QualifierAccociationID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            _QualifierMstID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[3].Value.ToString());
                            frmSetupIDQualifierAssociation ofrmSetupIDQualifierAssociation = new frmSetupIDQualifierAssociation(_databaseconnectionstring, _QualifierAccociationID, _QualifierMstID);
                            ofrmSetupIDQualifierAssociation.ShowDialog(this);
                            ofrmSetupIDQualifierAssociation.Dispose();
                            ofrmSetupIDQualifierAssociation = null;
                            Fill_Qualifier_Association();
                        }
                        #endregion
                    }
                    break;

                case 43:


                    #region " Modify RVU Schedule "
                    frm_SetupRVUSchedule ofrm_SetupRVUSchedule = null;
                    Int64 _nRVUID = 0;

                    if (dgMasters.SelectedRows.Count <= 0)
                    {
                        if (trvMasters.SelectedNode.Level == 0)
                        {
                            return;
                        }
                        else
                        {
                            _nRVUID = _RVUId;
                        }
                    }

                    if (dgMasters.SelectedRows.Count <= 0)
                    {
                    }
                    else
                        _nRVUID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());


                    if (dgMasters.SelectedRows.Count > 0)
                    {

                        ofrm_SetupRVUSchedule = new frm_SetupRVUSchedule(_nRVUID, _databaseconnectionstring);
                        ofrm_SetupRVUSchedule.ShowDialog(this);
                        
                        if (trvMasters.SelectedNode.Level == 0)
                        {
                            FillRVU();
                        }
                        else
                        {
                            if (dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim().Length > 0)
                            {
                                Fill_RVUDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim()));
                            }
                        }
                        ofrm_SetupRVUSchedule.Dispose();
                        ofrm_SetupRVUSchedule = null;
                    }
                    else
                    {
                        if (trvMasters.SelectedNode.Level != 0)
                        {
                            ofrm_SetupRVUSchedule = new frm_SetupRVUSchedule(_nRVUID, _databaseconnectionstring);
                            ofrm_SetupRVUSchedule.ShowDialog(this);
                            if (trvMasters.SelectedNode.Level == 0)
                            {
                                FillRVU();
                            }
                            else
                            {
                                Fill_RVUDetails(_nRVUID);
                                if (dgMasters.RowCount > 0)
                                {
                                    if (dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim().Length > 0)
                                    {
                                        Fill_RVUDetails(Convert.ToInt64(dgMasters.SelectedRows[0].Cells["nRVUID"].Value.ToString().Trim()));
                                    }
                                }
                            }
                            ofrm_SetupRVUSchedule.Dispose();
                            ofrm_SetupRVUSchedule = null;
 
                        }
                    }

                    #endregion

                    break;

                case 45:
                    {
                        #region " Condition Code"

                        Int64 _nConditionID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nConditionID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            ConditionCodes oConditionCodes = new ConditionCodes();

                            frmSetupConditionCode ofrmSetupConditionCode = new frmSetupConditionCode(_nConditionID, _databaseconnectionstring);

                            if (oConditionCodes.IsSystemRecord(_nConditionID, DatabaseConnectionString) == true)
                            {
                                ofrmSetupConditionCode.IsSystemRecord = false;
                                //frmSetupConditionCode ofrmSetupConditionCode = new frmSetupConditionCode(_nConditionID, _databaseconnectionstring);
                                //ofrmSetupConditionCode.ShowDialog(this);
                                //Fill_ConditionCodes(_nConditionID);
                                //ofrmSetupConditionCode.Dispose();
                            }
                            else
                            {
                                ofrmSetupConditionCode.IsSystemRecord = true;
                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            ofrmSetupConditionCode.ShowDialog(this);
                            Fill_ConditionCodes(_nConditionID);
                            ofrmSetupConditionCode.Dispose();
                            oConditionCodes.Dispose();
                            oConditionCodes = null;
                        }
                        #endregion
                    }
                    break;
                case 46:
                    {
                        #region " Occurrence Code"

                        Int64 _nOccurrenceID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nOccurrenceID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            OccurrenceCodes oOccurrenceCodes = new OccurrenceCodes();
                            frmSetupOccurrenceCode ofrmSetupOccurrenceCode = new frmSetupOccurrenceCode(_nOccurrenceID, _databaseconnectionstring);
                            if (oOccurrenceCodes.IsSystemRecord(_nOccurrenceID, DatabaseConnectionString) == true)
                            {
                                ofrmSetupOccurrenceCode.IsSystemRecord = false;
                                //frmSetupOccurrenceCode ofrmSetupOccurrenceCode = new frmSetupOccurrenceCode(_nOccurrenceID, _databaseconnectionstring);
                                //ofrmSetupOccurrenceCode.ShowDialog(this);
                                //Fill_OccurrenceCodes(_nOccurrenceID);
                                //ofrmSetupOccurrenceCode.Dispose();

                            }
                            else
                            {
                                ofrmSetupOccurrenceCode.IsSystemRecord = true;
                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            ofrmSetupOccurrenceCode.ShowDialog(this);
                            Fill_OccurrenceCodes(_nOccurrenceID);
                            ofrmSetupOccurrenceCode.Dispose();
                            oOccurrenceCodes.Dispose();
                            oOccurrenceCodes = null;
                        }
                        #endregion
                    }
                    break;
                case 47:
                    {
                        #region " OccurrenceSpan Code"

                        Int64 _nOccurrenceSpanID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nOccurrenceSpanID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            OccurrenceSpanCodes oOccurrenceSpanCodes = new OccurrenceSpanCodes();
                            frmSetupOccurrenceSpanCode ofrmSetupOccurrenceSpanCode = new frmSetupOccurrenceSpanCode(_nOccurrenceSpanID, _databaseconnectionstring);
                            if (oOccurrenceSpanCodes.IsSystemRecord(_nOccurrenceSpanID, DatabaseConnectionString) == true)
                            {
                                ofrmSetupOccurrenceSpanCode.IsSystemRecord = false;
                                //frmSetupOccurrenceSpanCode ofrmSetupOccurrenceSpanCode = new frmSetupOccurrenceSpanCode(_nOccurrenceSpanID, _databaseconnectionstring);
                                //ofrmSetupOccurrenceSpanCode.ShowDialog(this);
                                //Fill_OccurrenceSpanCodes(_nOccurrenceSpanID);
                                //ofrmSetupOccurrenceSpanCode.Dispose();
                            }
                            else
                            {
                                ofrmSetupOccurrenceSpanCode.IsSystemRecord = true;
                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            ofrmSetupOccurrenceSpanCode.ShowDialog(this);
                            Fill_OccurrenceSpanCodes(_nOccurrenceSpanID);
                            ofrmSetupOccurrenceSpanCode.Dispose();
                            oOccurrenceSpanCodes.Dispose();
                            oOccurrenceSpanCodes = null;
                        }
                        #endregion
                    }
                    break;

                case 48:
                    {
                        #region " Value Code"

                        Int64 _nValueID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nValueID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            ValueCodes oValueCodes = new ValueCodes();
                            frmSetupValueCode ofrmSetupValueCode = new frmSetupValueCode(_nValueID, _databaseconnectionstring);
                            if (oValueCodes.IsSystemRecord(_nValueID, DatabaseConnectionString) == true)
                            {
                                ofrmSetupValueCode.IsSystemRecord = false;
                                //frmSetupValueCode ofrmSetupValueCode = new frmSetupValueCode(_nValueID, _databaseconnectionstring);
                                //ofrmSetupValueCode.ShowDialog(this);
                                //Fill_ValueCodes(_nValueID);
                                //ofrmSetupValueCode.Dispose();

                            }
                            else
                            {
                                ofrmSetupValueCode.IsSystemRecord = true;
                                //MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            ofrmSetupValueCode.ShowDialog(this);
                            Fill_ValueCodes(_nValueID);
                            ofrmSetupValueCode.Dispose();
                            oValueCodes.Dispose();
                            oValueCodes = null;
                        }
                        #endregion
                    }
                    break;
                case 49:
                    {
                        #region "Reporting Category"

                        Int64 _nID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            ReportingCategory oReportingCategory = new ReportingCategory();
                            frmSetupReportingCategory ofrmSetupReportingCategory = new frmSetupReportingCategory(_databaseconnectionstring, _nID);
                            ofrmSetupReportingCategory.ShowDialog(this);
                            Fill_ReportingCategory(_nID);
                            ofrmSetupReportingCategory.Dispose();


                        }
                        #endregion
                    }
                    break;

                case 51:
                    #region "Modify Ins. Claim Follow Up Code"
                    {

                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                            frmSetupInsClaimFollowUp ofrmSetupClaimAccFollowUp;
                            ofrmSetupClaimAccFollowUp = new frmSetupInsClaimFollowUp(ID);
                            if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.Claim, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                            {
                                ofrmSetupClaimAccFollowUp.bIsUsed = false;

                            }
                            else
                            {
                                ofrmSetupClaimAccFollowUp.bIsUsed = true;
                                //MessageBox.Show("Follow-up code in use. It cannot be modified.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                            ofrmSetupClaimAccFollowUp.tsb_Save.Visible = false;
                            ofrmSetupClaimAccFollowUp.ShowDialog(this);
                            Fill_FollowUpCode(ID, CollectionEnums.FollowUpType.Claim);
                            ofrmSetupClaimAccFollowUp.Dispose();
                            ofrmSetupClaimAccFollowUp = null;

                            oFollowUpCode.Dispose();
                            oFollowUpCode = null;
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this Follow Up Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }

                    break;
                    #endregion

                case 52:
                    #region "Modify Pat. Acc. Follow Up Code"
                    {


                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                           
                            CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                            frmSetupAccFollowUp ofrmSetupClaimAccFollowUp;
                            ofrmSetupClaimAccFollowUp = new frmSetupAccFollowUp(ID);
                            if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.PatientAccount, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                            {
                                ofrmSetupClaimAccFollowUp.bIsUsed = false;
                               
                            }
                            else
                            {
                                ofrmSetupClaimAccFollowUp.bIsUsed = true;
                                //MessageBox.Show("Follow-up code in use. It cannot be modified.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                            ofrmSetupClaimAccFollowUp.ShowDialog(this);
                            ofrmSetupClaimAccFollowUp.Dispose();
                            Fill_FollowUpCode(ID, CollectionEnums.FollowUpType.PatientAccount);
                            oFollowUpCode.Dispose();
                            oFollowUpCode = null;
                            
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this Follow Up Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }

                    }

                    break;

                    #endregion
                //case 60:
                //    #region "Modify BadDebt. Acc. Follow Up Code"
                //    {


                //        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                //        {
                //            if (Convert.ToString(dgMasters.Rows[e.RowIndex].Cells[6].Value) != "" && Convert.ToBoolean(dgMasters.Rows[e.RowIndex].Cells[6].Value) == false)
                //            {
                //                CL_FollowUpCode oFollowUpCode = new CL_FollowUpCode();
                //                frmSetupBadDebtFollowUp ofrmSetupBadDebtFollowUp;
                //                ofrmSetupBadDebtFollowUp = new frmSetupBadDebtFollowUp(ID);

                //                if (oFollowUpCode.VerifyBforDeleteFollowUpCode(CollectionEnums.FollowUpType.BadDebt, dgMasters.SelectedRows[0].Cells[1].Value.ToString()) == false)
                //                {
                //                    ofrmSetupBadDebtFollowUp.bIsUsed = false;
                //                }
                //                else
                //                {
                //                    ofrmSetupBadDebtFollowUp.bIsUsed = true;
                //                    //MessageBox.Show("Follow-up code in use. It cannot be modified.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                //                }

                //                ofrmSetupBadDebtFollowUp.ShowDialog(this);
                //                ofrmSetupBadDebtFollowUp.Dispose();
                //                Fill_FollowUpCode(ID, CollectionEnums.FollowUpType.BadDebt);
                //                oFollowUpCode.Dispose();
                //                oFollowUpCode = null;
                //            }
                //            else
                //            {
                //                MessageBox.Show("Cannot modify system defined bad debt follow-up action.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                //            }
                //        }
                //        else
                //        {
                //            MessageBox.Show("Cannot modify this Follow Up Code.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                //        }

                //    }

                //    break;

                //    #endregion
                case 53:
                    {
                        #region " Medicaid Resubmission Code"

                        Int64 _nMedicaidResubmissionID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nMedicaidResubmissionID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            frmSetupMedicaidResubmissionCode ofrmSetupMedicaidResubmission = new frmSetupMedicaidResubmissionCode(_nMedicaidResubmissionID, _databaseconnectionstring);
                            ofrmSetupMedicaidResubmission.ShowDialog(this);
                            Fill_MedicaidResubmissionCodes(_nMedicaidResubmissionID);
                            ofrmSetupMedicaidResubmission.Dispose();
                        }
                        #endregion
                    }
                    break;

                case 54:
                    {
                        #region "Business Center"

                        Int64 _nBusinessCenterID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            _nBusinessCenterID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            frmSetupBusinessCenter ofrmSetupBusinessCenter = new frmSetupBusinessCenter(_nBusinessCenterID, _databaseconnectionstring);
                            ofrmSetupBusinessCenter.ShowDialog(this);
                            Fill_BusinessCenter(_nBusinessCenterID);
                            ofrmSetupBusinessCenter.Dispose();
                        }
                        #endregion "Business Center"
                    }
                    break;

                case 55:
                    {
                        #region "Claim Category Center"

                        Int64 nClaimReportingCategoryID = 0;
                        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                            return;
                        else
                        {
                            nClaimReportingCategoryID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            frmSetupClaimCategoryType ofrmSetupClaimCategoryType = new frmSetupClaimCategoryType(nClaimReportingCategoryID, _databaseconnectionstring);
                            ofrmSetupClaimCategoryType.ShowDialog(this);
                            Fill_ClaimReportingCategory(nClaimReportingCategoryID);
                            ofrmSetupClaimCategoryType.Dispose();
                        }
                        #endregion "Business Center"
                    }
                    break;
                case 56:
                    {
                        #region Notes

                       frmSetupQuickNotes ofrmSetupNotes;
                        Int64 nID = 0;
                                             
                            if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
                                return;
                            else
                                nID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                        
                                 if (nID != 0)
                                {
                                    ofrmSetupNotes = new frmSetupQuickNotes(nID, _databaseconnectionstring);
                                    ofrmSetupNotes.ShowDialog(this);
                                    Fill_QuickNotes(nID);
                                    ofrmSetupNotes.Dispose();
                                    ofrmSetupNotes = null;
                                }

                        #endregion Notes
                    }
                    break;
                case 57:
                    #region Remark Code
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        ID = Convert.ToInt64(dgMasters.Rows[e.RowIndex].Cells[0].Value);
                        RemarkCodes ObjRemarkCodes = new RemarkCodes();
                        if (ObjRemarkCodes.CanDelete(ID, DatabaseConnectionString) == true)
                        {
                            frmSetupRemarkCodes ofrmRemarkCodes;
                            ofrmRemarkCodes = new frmSetupRemarkCodes(_databaseconnectionstring, ID);
                            ofrmRemarkCodes.tsb_Save.Visible = false;
                            ofrmRemarkCodes.ShowDialog(this);
                            ofrmRemarkCodes.Dispose();
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify system record.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        ObjRemarkCodes.Dispose();
                        ObjRemarkCodes = null;
                    }

                    Fill_RemarkCodes(ID);
                    #endregion

                    break;
                case 59:
                    #region ChargeEdit
                    if (dgMasters.SelectedRows.Count > 0)
                    {
                       frmRuleEditor ofrmRuleEditor=null;
                        ID = Convert.ToInt64(dgMasters.Rows[e.RowIndex].Cells[0].Value);
                        if (ID != 0)
                            {
                                ofrmRuleEditor = new frmRuleEditor(ID);
                                ofrmRuleEditor.ShowDialog(this);
                                Fill_ClaimRules(ID);
                                if (ofrmRuleEditor.DialogResult == DialogResult.OK)
                                {
                                    gloAuditTrail.gloAuditTrail.CreateAuditLog(ActivityModule.ChargeRule, ActivityCategory.ChargeRuleSetup, ActivityType.Modify, "Claim rule modified", 0, ID, 0, ActivityOutCome.Success, SoftwareComponent.gloPM, true);
                                    MessageBox.Show("Rule(s) changes done require a re-start to gloPM application for changes to take effect for all logged in users.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                ofrmRuleEditor.Dispose();
                                ofrmRuleEditor = null;
                            }
                    }
                  #endregion

                    ChargeRules.RulesRepository.ClearRulesCache();

                    break;
               case 60:
                    {
                        FrmSetupHoldBilling ofrmHoldBilling;

                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            ofrmHoldBilling = new FrmSetupHoldBilling(ID, _databaseconnectionstring);
                            ofrmHoldBilling.tlsbtn_Save.Visible = false;
                            ofrmHoldBilling.ShowDialog(this);
                            ofrmHoldBilling.Dispose();
                            ofrmHoldBilling = null;
                            Fill_HoldBilling(ID);
                        }
                        else
                        {
                            MessageBox.Show("Cannot modify this Hold Billing.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }


                    }
                    break;
               case 61:
                    {
                        OpenreasonCodeScreen(2); 
                    }
                    break;
               case 62:
                    {
                        frmStandardFollowupAction ostd;
                        if (IsEnableAddEditDeleteSetting)
                        {
                            if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                            {
                                ostd = new frmStandardFollowupAction(ID, DatabaseConnectionString);
                                ostd.ShowDialog();
                                ostd.Dispose();
                                Fill_StandardFollowupAction(ID);
                            }
                            else
                            {
                                MessageBox.Show("Cannot modify this Standard Follow-up Action", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                        else
                        {
                            return;
                        }
                    }
                    break;
               case 63:
                    {
                        frmInsuranceFollowupActionCrossWalk oInsCrosswalk;
                        Int64 _nInsCrosswalkID = 0;
                        if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
                        {
                            if (dgMasters.Rows.Count <= 0)
                            {
                                return;
                            }
                            else
                            {
                                _nInsCrosswalkID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            }
                        }

                        if (dgMasters.SelectedRows.Count > 0)
                        {
                            oInsCrosswalk = new frmInsuranceFollowupActionCrossWalk(_nInsCrosswalkID, DatabaseConnectionString);
                            oInsCrosswalk.ShowDialog();
                            oInsCrosswalk.Dispose();
                            oInsCrosswalk = null;
                            Fill_InsuranceFollowupCrosswalk();
                           
                        }
                        else
                        {

                         MessageBox.Show("Cannot modify Insurance Claim follow-up action Crosswalk", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                    break;
            }
            // Code added to clear the reset search text 
            txtSearch.TextChanged -= new EventHandler(txtSearch_TextChanged);
            txtSearch.Text = string.Empty;
            txtSearch.TextChanged += new EventHandler(txtSearch_TextChanged);
        }

         private void LoadICDMaster(gloICD.CodeRevision ICDRevision,  Int64 ID)
        {
            frmSetupICD9 ofrmICD9 = null;

            try
            {
                ofrmICD9 = new frmSetupICD9(ICDRevision, ID, _databaseconnectionstring);
                ofrmICD9.gstrSMDBDatabaseName = gstrSMDBDatabaseName;  //snomed connection string set 8020 
                ofrmICD9.gstrSMDBServerName = gstrSMDBServerName;
                ofrmICD9.gstrSMDBUserID = gstrSMDBUserID;
                ofrmICD9.gstrSMDBPassWord = gstrSMDBPassWord;
                ofrmICD9.gblnSMDBAuthen = gblnSMDBAuthen;                      
                ofrmICD9.Height = 320;  
                ofrmICD9.tsb_save.Visible = false;
                ofrmICD9.ShowDialog(this);
                LoadICDCodes(ID, ICDRevision);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Exception while loading ICD Master " + ex.ToString(), true);
            }
            finally
            {
                if (ofrmICD9 != null) { ofrmICD9.Dispose(); ofrmICD9 = null; }
            }

            ////Check ICD9ID is present or not
            //if (dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "" || dgMasters.Rows[e.RowIndex].Cells[0].Value.ToString() != "0")
            //{

            //}
            //else
            //{
            //    MessageBox.Show("Cannot modify this ICD9.", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //}
        }

        private void c1AppointmentType_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Change_flexgridSerchColumn(sender, e);
            if (c1AppointmentType.Row == -1)
            {
                return;
            }
            Int64 ID = 0;

            if (SelectedView == 14)
            {
                if (c1AppointmentType.RowSel > 0)
                {
                    ID = Convert.ToInt64(c1AppointmentType.GetData(c1AppointmentType.RowSel, 0));
                }
                if (c1AppointmentType.Rows.Count > 1)
                {
                    if (c1AppointmentType.Rows[0].ToString() != "" || c1AppointmentType.Rows[0].ToString() != "0")
                    {
                        frmSetup_FlagType ofrmFtype = new frmSetup_FlagType(ID, _databaseconnectionstring);
                        //Code Added by Mayuri:20091103
                        //To make invisible button save if form gets open for modify
                        ofrmFtype.ToolStripButton1.Visible = false;
                        //End Code Added by Mayuri:20091103
                        ofrmFtype.ShowDialog(this);
                        ofrmFtype.Dispose();
                        ofrmFtype = null;
                    }
                }
                Fill_Flags(ID);
            }
            if (SelectedView == 21 && c1AppointmentType.Rows.Count > 1)
            {
                #region " Fee Schedule "
                //Check whether row in a grid is selected to modify or not
                if (trvMasters.SelectedNode.Level == 0)
                {
                    return;
                }
                if (c1AppointmentType.Rows.Count > 1 && c1AppointmentType.Row != -1)
                {
                    ID = Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));               

                    frmSetupStdFeeSchedule ofrmSetupStdFeeSchedule = new frmSetupStdFeeSchedule(ID, "", _databaseconnectionstring, false);
                    ofrmSetupStdFeeSchedule.ShowDialog(this);

                    if (ofrmSetupStdFeeSchedule.StdFeeScheeduleID != 0)
                    {
                        Fill_StandardFeeScheduleType(ofrmSetupStdFeeSchedule.StdFeeScheeduleID, "");
                    }
                    ofrmSetupStdFeeSchedule.Dispose();
                    Fill_StandardFeeScheduleType(ID, "");
                }

                #endregion " Fee Schedule "
            }

            // Code added to clear the reset search text 
            txtSearch.TextChanged -= new EventHandler(txtSearch_TextChanged);
            txtSearch.Text = string.Empty;
            txtSearch.TextChanged += new EventHandler(txtSearch_TextChanged);
        }

        #endregion ' Grid Events '

        #region " Search Functionality "

        private void change_SerachColumn(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                //Get the node name in string variable(SelectedView)
                //SelectedView = Convert.ToInt16(trvMasters.SelectedNode.Tag.ToString());
                //Switch to node which is selected
                //switch (SelectedView)
                //{
                    #region " Commented Code "
                    //case 1: // ICD9
                    //    {


                    //      if (e.ColumnIndex == 2) 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sDescription";
                    //        }
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sICD9Code";
                    //        }

                    //    }
                    //    break;
                    //case 2: // CPT
                    //    {

                    //        if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sDescription";
                    //        }
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "CPT Code";
                    //            _Searchcolumn = "sCPTCode";
                    //        }

                    //    }
                    //    break;
                    //case 3: // Modifiers
                    //    {

                    //         if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sDescription";
                    //        }
                    //         if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sModifierCode";
                    //        }

                    //    }
                    //    break;
                    //case 4: // Drugs
                    //    {
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Drug Name :";
                    //            _Searchcolumn = "sDrugName";
                    //        }
                    //         else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Generic Name :";
                    //            _Searchcolumn = "sGenericName";

                    //        }
                    //        else if (e.ColumnIndex == 3) // 
                    //        {
                    //            lblSearch.Text = "Dosage :";
                    //            _Searchcolumn = "sDosage";
                    //        }
                    //        else if (e.ColumnIndex == 4) // 
                    //        {
                    //            lblSearch.Text = "Route :";
                    //            _Searchcolumn ="sRoute";
                    //        }

                    //    }
                    //    break;
                    //case 5: // Category
                    //    {
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sDescription";
                    //        }
                    //        else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Category Type :";
                    //            _Searchcolumn = "sCategoryType";

                    //        }
                    //    }
                    //    break;
                    //case 6: // Insurance CPT Association. 
                    //    {

                    //    }
                    //    break;
                    //case 7: //Type Of Service
                    //    {
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sTOsCode";
                    //        }
                    //        else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sDescription";

                    //        }
                    //    }
                    //    break;
                    //case 8: // Place Of Service
                    //    {
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sPOSCode";
                    //        }

                    //        else if (e.ColumnIndex == 3) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sPOSDescription";
                    //        }
                    //        else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Name :";
                    //            _Searchcolumn = "sPOSName";

                    //        }

                    //    }
                    //    break;
                    //case 9: // Facility
                    //    {
                    //        //if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Facility Name :";
                    //            _Searchcolumn = "sFacilityName";
                    //        }
                    //    }
                    //    break;
                    //case 10://Type Of Service - CPT Association
                    //    {

                    //    }
                    //    break;
                    //case 11: // Smart Treatment
                    //    {
                    //        lblSearch.Text = "Treatment :"; 
                    //        _Searchcolumn = "sTreatmentName";
                    //    }
                    //    break;
                    //case 12://Code Type
                    //    {

                    //      if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "CodeTypedesc";
                    //        }
                    //      else if(e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code";
                    //            _Searchcolumn = "Code";
                    //        }
                    //    }
                    //    break;
                    //case 13://Patient Relationship
                    //    {
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sRelationshipCode";
                    //        }
                    //        else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sRelationshipDesc";

                    //        }
                    //    }
                    //    break;
                    //case 14://Flag Type
                    //    {

                    //    }
                    //    break;
                    //case 15://Speciality
                    //    {

                    //         if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sDescription";

                    //        }
                    //        else if (e.ColumnIndex == 3) // 
                    //        {
                    //            lblSearch.Text = "Taxonomy Code :";
                    //            _Searchcolumn = "sTaxonomyCode";
                    //        }
                    //        else if (e.ColumnIndex == 4) // 
                    //        {
                    //            lblSearch.Text = "Taxonomy Description :";
                    //            _Searchcolumn = "sTaxonomyDesc";
                    //        }
                    //         else if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sCode";
                    //        }
                    //    }
                    //    break;
                    //case 16://Insurance Service type
                    //    {

                    //         if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Service Type Code :";
                    //            _Searchcolumn = "ServiceTypeCode";

                    //        }
                    //        else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Service Type Description :";
                    //            _Searchcolumn = "ServiceTypeDesc";
                    //        }
                    //         else if   (e.ColumnIndex == 3 ) // 
                    //        {
                    //            lblSearch.Text = "Insurance Type :";
                    //            _Searchcolumn = "InsuranceType";
                    //        }
                    //    }
                    //    break;

                    //case 17://Insurance Plan Codes
                    //    {
                    //       if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = " Plan Description :";
                    //            _Searchcolumn = "sPlanDescription";
                    //        }
                    //        else if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Plan Code :";
                    //            _Searchcolumn = "sPlanCode";
                    //        }
                    //    }
                    //    break;
                    //case 18://Insurance Type
                    //    {

                    //        if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Type Description :";
                    //            _Searchcolumn = "sTypeDesc";
                    //        }
                    //        else // if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Type Code :";
                    //            _Searchcolumn = "sTypeCode";
                    //        }
                    //    }
                    //    break;
                    //case 19://Clearing House
                    //    {
                    //        if (e.ColumnIndex == 3) // 
                    //            {
                    //            lblSearch.Text = "Receiver Name :";
                    //            _Searchcolumn = "sReceiverName";
                    //        }

                    //        else if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Name :";
                    //            _Searchcolumn = "sClearingHouseName";
                    //        }
                    //    }
                    //    break;
                    //case 20: // Adjustment Type
                    //    {
                    //        if (e.ColumnIndex == 1) // 
                    //        {
                    //            lblSearch.Text = "Code :";
                    //            _Searchcolumn = "sAdjustmentTypeCode";
                    //        }
                    //        else// if (e.ColumnIndex == 2) // 
                    //        {
                    //            lblSearch.Text = "Description :";
                    //            _Searchcolumn = "sAdjustmentTypeDesc";

                    //        }
                    //    }
                    //    break;
                    //case 21: // Standard Fee Schedule Type
                    //    {

                    //    }
                    //    break;

                    #endregion " Commented Code "

                    //default:


                //}
                //lblSearch.Text = "Search : ";

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
            }



        }

        private void Change_flexgridSerchColumn(object sender, MouseEventArgs e)
        {
            C1.Win.C1FlexGrid.HitTestInfo hti = c1AppointmentType.HitTest(e.X, e.Y);
            //C1Flexgrid usd for flag Type
            if (SelectedView == 14)
            {
                if (hti.Column == 1 && hti.Row == 0)
                {
                    lblSearch.Text = "Code :";
                    _Searchcolumn = "FlagtypeCode";
                }
                if (hti.Column == 2 && hti.Row == 0)
                {
                    lblSearch.Text = "Description :";
                    _Searchcolumn = "FlagtypeDesc";
                }
            }
            //C1Flexgrid usd for standard fee schedule 
            if (SelectedView == 21)
            {
                if (hti.Column == 1 && hti.Row == 0)
                {
                    //lblSearch.Text = "CPT Description";
                    lblSearch.Text = "Description :";

                    _Searchcolumn = "Desc";
                }
                if (hti.Column == 0 && hti.Row == 0)
                {
                    lblSearch.Text = "CPT Code :";
                    _Searchcolumn = "code";
                }
            }
        }

        void txtSearch_TextChanged(object sender, EventArgs e)
        {
            if (this.searchTimer != null)
            {
                this.searchTimer.Stop();
                this.searchTimer.Start();
            }
        }

        private void searchTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (this.searchTimer != null)
                { this.searchTimer.Stop(); }

                string sFilter = "";

                _dv = (DataView)dgMasters.DataSource;
                dgMasters.DataSource = _dv;
                if (_dv == null) return;
                string strSearch = txtSearch.Text.Trim();
                strSearch = strSearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");

                if (strSearch.Trim() != "")
                {
                    strSearchArray = strSearch.Split(',');
                }

                switch (SelectedView)
                {
                    case 1: // ICD9
                    case 24:
                        {
                            SearchICD(gloICD.CodeRevision.ICD9, strSearch);
                        }
                        break;
                    case 2: // CPT
                        {
                            #region " CPT Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    gloBilling _UB04_Billing = new gloBilling(_databaseconnectionstring, "");
                                    //Bug #70059: 00000718: CPT search is not working in 8020 when UB04 Settings from gloPM Admin is turn Off
                                    if (_UB04_Billing.IsenableUB04(_ClinicID))
                                    {
                                        _dv.RowFilter = _dv.Table.Columns["sCPTCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sDescription"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sStatementDesc"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sSpecialityCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sCategory"].ColumnName + " Like '%" + strSearch + "%' OR " +

                                                             _dv.Table.Columns["Modifier1"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["Modifier2"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["Modifier3"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["Modifier4"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                //_dv.Table.Columns["nUnits"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["bIsCPTDrug"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sRevenueCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sNDCCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                             _dv.Table.Columns["sCLIANo"].ColumnName + " Like '%" + strSearch + "%'"; //  added on 16Apr2014 for CLIANumber  - Sameer
                                        }
                                        else
                                        {
                                            _dv.RowFilter = _dv.Table.Columns["sCPTCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sDescription"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sStatementDesc"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sSpecialityCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sCategory"].ColumnName + " Like '%" + strSearch + "%' OR " +

                                                         _dv.Table.Columns["Modifier1"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier2"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier3"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier4"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                //_dv.Table.Columns["nUnits"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["bIsCPTDrug"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sNDCCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sCLIANo"].ColumnName + " Like '%" + strSearch + "%'"; //  added on 16Apr2014 for CLIANumber - Sameer

                                        }

                                    _UB04_Billing.Dispose();
                                    }
                                    else
                                    {
                                        //For Comma separated  value search
                                        for (int i = 0; i < strSearchArray.Length; i++)
                                        {
                                            strSearch = strSearchArray[i].Trim();
                                            if (strSearch.Length > 1)
                                            {
                                                string str = strSearch.Substring(1).Replace("%", "");
                                                strSearch = strSearch.Substring(0, 1) + str;
                                            }
                                            if (strSearch.Trim() != "")
                                            {


                                                if (sFilter == "")//(i == 0)
                                                {
                                                    sFilter = " ( " + _dv.Table.Columns["sCPTCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sDescription"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["sStatementDesc"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sSpecialityCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                        _dv.Table.Columns["sCategory"].ColumnName + " Like '%" + strSearch + "%' OR " +

                                                         _dv.Table.Columns["Modifier1"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier2"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier3"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier4"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                        //_dv.Table.Columns["nUnits"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["bIsCPTDrug"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sNDCCode"].ColumnName + " Like '%" + strSearch + "%' ) ";
                                                }
                                                else
                                                {
                                                    sFilter = sFilter + " AND (" + _dv.Table.Columns["sCPTCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sDescription"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sStatementDesc"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sSpecialityCode"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                       _dv.Table.Columns["sCategory"].ColumnName + " Like '%" + strSearch + "%' OR " +

                                                         _dv.Table.Columns["Modifier1"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier2"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier3"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Modifier4"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                        //_dv.Table.Columns["nUnits"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["bIsCPTDrug"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sNDCCode"].ColumnName + " Like '%" + strSearch + "%' ) ";
                                                }

                                            }
                                        }
                                        _dv.RowFilter = sFilter;

                                    }
                                }
                                else
                                {
                                    _dv.RowFilter = "";
                                }

                            #endregion " CPT Search "
                            
                        }
                        break;
                    case 3: // Modifiers
                        {
                            #region " Modifier Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sModifierCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sModifierCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";

                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sModifierCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";

                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Modifier Search "
                        }
                        break;
                    case 4: // ICD10
                        {
                            SearchICD(gloICD.CodeRevision.ICD10, strSearch);
                        }
                        break;
                    case 5: // Category 
                        {
                            #region " Category Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["Description"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Category"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["Description"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["Category"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["Description"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["Category"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Category Search "
                        }
                        break;

                    case 7: // Type Of Service 
                        {
                            #region " TOS Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sTOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sTOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sTOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " TOS Search "
                        }
                        break;
                    case 8: // Place Of Service
                        {
                            #region " POS Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sPOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["sPOSName"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPOSDescription"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sPOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sPOSName"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sPOSDescription"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sPOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sPOSName"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sPOSDescription"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " POS Search "
                        }
                        break;
                    case 9: // Facility
                        {
                            #region " Facility Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sFacilityCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sFacilityName"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sNPI"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sMedicadID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sBlueShieldID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sMedicareID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sCity"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPhone"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sFacilityCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sFacilityName"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sNPI"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sMedicadID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sBlueShieldID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sMedicareID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sCity"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPhone"].ColumnName + " Like '" + strSearch + "%') ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sFacilityCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sFacilityName"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sNPI"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sMedicadID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sBlueShieldID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sMedicareID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxID"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sCity"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPhone"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Facility Search "
                        }
                        break;
                    case 11: // Smart Treatment
                        {
                            #region " Treatment Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sTreatmentName"].ColumnName + " Like '" + strSearch + "%' ";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {
                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sTreatmentName"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sTreatmentName"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Treatment Search "
                        }
                        break;
                    case 12: // Code Type
                        {
                            #region " Code Type Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["Code"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["CodeTypedesc"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["Code"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["CodeTypedesc"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["Code"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["CodeTypedesc"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Code Type Search "
                        }
                        break;
                    case 13: // Patient Relation
                        {
                            #region " Patient Relationship Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sRelationshipCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sRelationshipDesc"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sRelationshipCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sRelationshipDesc"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sRelationshipCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sRelationshipDesc"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Patient Relationship Search "
                        }
                        break;

                    case 14: // Flag Type
                        {
                            //Int64 ID = Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));
                            Int64 ID = 0;
                            if (c1AppointmentType.Rows.Count > 0 && c1AppointmentType.RowSel > 0)
                            {
                                ID = Convert.ToInt64(c1AppointmentType.GetData(c1AppointmentType.RowSel, 0));
                            }
                            Fill_Flags(ID, strSearch);
                            return;
                        }
                        
                    case 15: // Specialty
                        {
                            #region " Specialty Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyClassification"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyClassification"].ColumnName + " Like '" + strSearch + "%') ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTaxonomyClassification"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Specialty Search "
                        }
                        break;
                    case 16: // Insurance Service Type
                        {
                            #region " Insurance Service Type Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["ServiceTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["ServiceTypeDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["InsuranceType"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["ServiceTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["ServiceTypeDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["InsuranceType"].ColumnName + " Like '" + strSearch + "%') ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["ServiceTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["ServiceTypeDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["InsuranceType"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Insurance Service Search "
                        }
                        break;
                    case 17: // Insurance Plan Code
                        {
                            #region " Insurance Plan Code Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sPlanCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPlanDescription"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sPlanCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPlanDescription"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sPlanCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPlanDescription"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Insurance Plan Code Search "
                        }
                        break;
                    case 18: // Insurance Type
                        {
                            #region " Plan Type Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTypeDesc"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTypeDesc"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTypeDesc"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Plan Type Search "
                        }
                        break;
                    case 19: // Clearing House
                        {
                            //Not using anymore shifted to gloPM Admin
                        }
                        break;
                    case 20: // Adjustment Type
                        {
                            #region " Adjustment Type Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sAdjustmentTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sAdjustmentTypeDesc"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sAdjustmentTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sAdjustmentTypeDesc"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sAdjustmentTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sAdjustmentTypeDesc"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Adjustment Type Search "
                        }
                        break;
                    case 21: // Standard Fee Schedule Type
                        {
                            #region " Fee Schedule Allocation Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sFeeScheduleName"].ColumnName + " Like '" + strSearch + "%' ";
                                   
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {
                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sFeeScheduleName"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sFeeScheduleName"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Fee Schedule Allocation Search "

                        }
                        break;
                    case 22://Fee Schedule Allocation
                        {
                            #region " Fee Schedule Allocation Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sFeeScheduleName"].ColumnName + " Like '" + strSearch + "%' ";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {
                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sFeeScheduleName"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sFeeScheduleName"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Fee Schedule Allocation Search "
                        }
                        break;
                    case 23://Credit Card Type
                        {
                            #region " Credit Card Type Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sCreditCardDesc"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sCreditCardDesc"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sCreditCardDesc"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Credit Card Type Search "
                        }
                        break;
                    //case 24://Invalid ICD9
                    //    {
                    //        SearchICD(gloICD.CodeRevision.ICD9, strSearch);
                    //    }
                    //    break;
                    case 25://Scrubber
                        {
                            #region " Scrubber Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["CPTCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["CPTDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["TOS"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["POS"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Diagnosis"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Modifiers"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["CPTCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["CPTDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["TOS"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["POS"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Diagnosis"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Modifiers"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["CPTCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["CPTDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["TOS"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["POS"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Diagnosis"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["Modifiers"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Scrubber Search "
                        }
                        break;
                    case 26://Referral CPT
                        {
                            #region " Referral CPT Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sCPTCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sCPTCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sCPTCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Referral CPT Search "
                        }
                        break;
                    case 27://Claim Scrubber
                        {
                            #region " Scrubber Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPOSCode"].ColumnName + " Like '" + strSearch + "%' ";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {

                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPOSCode"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sTOSCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sPOSCode"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Scrubber Search "
                        }
                        break;

                    case 29://Close Day Tray
                        {
                            #region " Close Day Tray Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {

                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";

                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";
                                            }
                                            if (sFilter.EndsWith(")"))
                                            { }
                                            else
                                            {
                                                sFilter = sFilter + ")";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Scrubber Search "
                        }
                        break;

                    case 30://Close Day Tray
                        {
                            #region " Charges Tray Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {

                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";

                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%'";
                                            }
                                            if (sFilter.EndsWith(")"))
                                            { }
                                            else
                                            {
                                                sFilter = sFilter + ")";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Charges Tray Search "
                        }
                        break;

                    case 31: // Refund Type
                        {
                            #region " Refund Type Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sRefundTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sRefundTypeDesc"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sRefundTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sRefundTypeDesc"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sRefundTypeCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sRefundTypeDesc"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Refund Type Search "
                        }
                        break;
                    case 32: // Patient Statement Criteria
                        {
                            #region " Statement Criteria Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%') ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Statement Criteria Search "
                        }
                        break;
                    case 33: // Reason Codes
                        {
                            #region " Reason Codes Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sGroupCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' ";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sGroupCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sGroupCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Reason Codes Search "
                        }
                        break;
                    case 34:
                    case 35:
                        {
                            #region " Action Codes Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' ";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' ";
                                                // " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                //      _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Action Codes Search "
                        }
                        break;
                    case 36: // Patient Statement Display Settings
                        {
                            #region " Statement Display Settings Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%') ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Statement Display Settings Search "
                        }
                        break;
                    case 37:
                        {
                            #region " Statement Filter Settings Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%'";
                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%') ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Statement Filter Settings Search "
                        }
                        break;

                    case 38:
                        {
                            #region " CPT Mapping Filter"
                            if (trvMasters.SelectedNode.Level == 0)
                            {
                                if (strSearch.Trim() != "")
                                {
                                    // sFilter = " ( " + _dv.Table.Columns["sCPTMappingName"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["CreatedDate"].ColumnName + " Like '" + strSearch + "%')";
                                    sFilter = " ( " + _dv.Table.Columns["sCPTMappingName"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["CreatedDateForSearch"].ColumnName + " Like '" + strSearch + "%')";
                                }
                            }
                            else
                            {
                                if (strSearch.Trim() != "")
                                {
                                    sFilter = " ( " + _dv.Table.Columns["sCPTCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%') or" +
                                        " ( " + _dv.Table.Columns["sMappingCPT"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sMappingDescription"].ColumnName + " Like '" + strSearch + "%')";
                                }
                            }
                            _dv.RowFilter = sFilter;

                            #endregion
                        }
                        break;
                    case 39:
                        {
                            #region " CPT Mapping Filter"
                            if (trvMasters.SelectedNode.Level == 0)
                            {
                                if (strSearch.Trim() != "")
                                {
                                    //sFilter = " ( " + _dv.Table.Columns["nCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";
                                    sFilter = " ( " + _dv.Table.Columns["nCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')or(" + _dv.Table.Columns["bIsActive"].ColumnName + " Like '" + strSearch + "%')";
                                }


                            }
                            else
                            {
                                if (strSearch.Trim() != "")
                                {
                                    //sFilter = " ( " + _dv.Table.Columns["nCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";
                                    sFilter = " ( " + _dv.Table.Columns["nCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')or (" + _dv.Table.Columns["bIsActive"].ColumnName + " Like '" + strSearch + "%')";

                                }
                            }
                            _dv.RowFilter = sFilter;

                            #endregion
                        }
                        break;
                    case 40:
                        {
                            #region " ERA Payer "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = _dv.Table.Columns["sERAPayerID"].ColumnName + " Like '" + strSearch + "%' ";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 41:
                        {
                            #region " Qualifier "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 42:
                        {
                            #region " Qualifier "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sAdditionalDescription"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 43:
                        {
                            #region " RVU "
                            if (trvMasters.SelectedNode.Level == 0)
                            {
                                if (strSearch.Trim() != "")
                                {
                                    // sFilter = " ( " + _dv.Table.Columns["sCPTMappingName"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["CreatedDate"].ColumnName + " Like '" + strSearch + "%')";
                                    sFilter = " ( " + _dv.Table.Columns["dtEffectiveDate"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["nScheduleType"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sStatementNote"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["Status"].ColumnName + " Like '" + strSearch + "%')";
                                }
                            }
                            else
                            {
                                if (strSearch.Trim() != "")
                                {
                                    sFilter = " ( " + _dv.Table.Columns["sCPTCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sCPTDescription"].ColumnName + " Like '" + strSearch + "%')";
                                }
                            }
                            _dv.RowFilter = sFilter;

                            #endregion
                        }
                        break;
                    case 45:
                        {
                            #region " Condition "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sConditionCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                   + " or ( " + _dv.Table.Columns["IsActive"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["IsSystem"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 46:
                        {
                            #region " Occurrence "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;

                                }
                                sFilter = " ( " + _dv.Table.Columns["sOccurrenceCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                     + " or ( " + _dv.Table.Columns["IsActive"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["IsSystem"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 47:
                        {
                            #region " OccurrenceSpan "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;

                                }
                                sFilter = " ( " + _dv.Table.Columns["sOccurrenceSpanCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                     + " or ( " + _dv.Table.Columns["IsActive"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["IsSystem"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 48:
                        {
                            #region " Value "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sValueCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                + " or ( " + _dv.Table.Columns["IsActive"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["IsSystem"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;

                    case 49:
                        {
                            #region " Reporting Category "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;

                    case 51:
                        {
                            #region " Ins .Claim Follow Up Code "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sFollowUpActionCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sFollowUpActionDescription"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDefNextAction"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sTemplateName"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;

                    case 52:
                        {
                            #region " Pat. Acc. Follow Up Code "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sFollowUpActionCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sFollowUpActionDescription"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDefNextAction"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sTemplateName"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 53:
                        {
                            #region " Value "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sResubmissionCode"].ColumnName + " Like '" + strSearch + "%') OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                + " or ( " + _dv.Table.Columns["IsActive"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 54:
                        {
                            #region " Business Center "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sBusinessCenterCode"].ColumnName + " Like '" + strSearch + "%') "
                                     + " OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                     + " or ( " + _dv.Table.Columns["sStatementCriteriaName"].ColumnName + " Like '" + strSearch + "%')"
                                     + " or ( " + _dv.Table.Columns["IsActive"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;

                    case 55:
                        {
                            #region " Claim Reporting Category "
                            if (strSearch.Trim() != "")
                            {
                                //For Single value search 
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                sFilter = " ( " + _dv.Table.Columns["sCode"].ColumnName + " Like '" + strSearch + "%') "
                                     + " OR ( " + _dv.Table.Columns["sDescription"].ColumnName + " Like '" + strSearch + "%')"
                                     + " or ( " + _dv.Table.Columns["sStatus"].ColumnName + " Like '" + strSearch + "%')";

                            }
                            _dv.RowFilter = sFilter;
                            #endregion
                        }
                        break;
                    case 56: // Quick Notes
                        {
                            #region " Quick Notes Search"

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["nNoteType"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["nNoteType"].ColumnName + " Like '" + strSearch + "%')";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sNoteDescription"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["nNoteType"].ColumnName + " Like '" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                            dgMasters.AutoResizeRows();
                            #endregion " Quick Notes Search "
                        }
                        break;


                    case 57: // Remark Codes
                        {
                            #region " Remark Codes Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sRemarkCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["sRemarkDescription"].ColumnName + " Like '" + strSearch + "%' ";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sRemarkCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["sRemarkDescription"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%' ) ";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sRemarkCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sRemarkDescription"].ColumnName + " Like '" + strSearch + "%' OR " + _dv.Table.Columns["bIsSystem"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Remark Codes Search "
                        }
                        break;

                    case 58:
                      //common CPT
                        if (strSearch.Trim() != "")
                        {
                            if (strSearchArray.Length == 1)
                            {
                                //For Single value search 
                                strSearch = strSearchArray[0].Trim();
                                if (strSearch.Length > 1)
                                {
                                    string str = strSearch.Substring(1).Replace("%", "");
                                    strSearch = strSearch.Substring(0, 1) + str;
                                }
                                _dv.RowFilter = " sCPTCode Like '" + strSearch + "%' OR sDescription like '%" + strSearch + "%'";

                            }
                            else
                            {
                                //For Comma separated  value search
                                for (int i = 0; i < strSearchArray.Length; i++)
                                {
                                    strSearch = strSearchArray[i].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    if (strSearch.Trim() != "")
                                    {
                                        if (sFilter == "")//(i == 0)
                                        {
                                            sFilter = " (sCPTCode Like '" + strSearch + "%' OR sDescription like '%" + strSearch + "%')";
                                        }
                                        else
                                        {
                                            sFilter = sFilter + " AND (sCPTCode Like '" + strSearch + "%' OR sDescription like '%" + strSearch + "%')";
                                        }
                                    }
                                }
                                _dv.RowFilter = sFilter;

                            }
                        }
                        else
                        {
                            _dv.RowFilter = "";
                        }

                        
                  
                        break;

                    case 59: // Charge Edit Search
                        {
                            #region " Charge Edit Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sRuleName"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["sErrorMessage"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["RuleType"].ColumnName + " Like '%" + strSearch + "%' OR  " +
                                                    _dv.Table.Columns["status"].ColumnName + " Like '%" + strSearch + "%' ";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sRuleName"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                                  _dv.Table.Columns["RuleType"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                                  _dv.Table.Columns["status"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                                  _dv.Table.Columns["sErrorMessage"].ColumnName + " Like '%" + strSearch + "%' )";
                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sRuleName"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                                               _dv.Table.Columns["RuleType"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                                               _dv.Table.Columns["status"].ColumnName + " Like '%" + strSearch + "%' OR " +
                                                                               _dv.Table.Columns["sErrorMessage"].ColumnName + " Like '%" + strSearch + "%')";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Remark Codes Search "
                        }
                        break;
                   case 60:
                        {
                            #region " Hold Billing Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["sHoldBillingReason"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                     _dv.Table.Columns["sHoldBillingDescription"].ColumnName + " Like '" + strSearch + "%'";

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["sHoldBillingReason"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sHoldBillingDescription"].ColumnName + " Like '" + strSearch + "%')";

                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sHoldBillingReason"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                             _dv.Table.Columns["sHoldBillingDescription"].ColumnName + " Like '" + strSearch + "%')";

                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }
                            #endregion " Hold Billing Search "

                        }
                        break;
                   case 61:
                        {
                            #region " Standard Reason Codes Search "

                            if (strSearch.Trim() != "")
                            {
                                if (strSearchArray.Length == 1)
                                {
                                    //For Single value search 
                                    strSearch = strSearchArray[0].Trim();
                                    if (strSearch.Length > 1)
                                    {
                                        string str = strSearch.Substring(1).Replace("%", "");
                                        strSearch = strSearch.Substring(0, 1) + str;
                                    }
                                    _dv.RowFilter = _dv.Table.Columns["GroupCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["ReasonCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                    _dv.Table.Columns["Description"].ColumnName + " Like '" + strSearch + "%' OR "+
                                                    _dv.Table.Columns["Type"].ColumnName + " Like '" + strSearch + "%' OR "+
                                                    _dv.Table.Columns["SystemDefined"].ColumnName + " Like '" + strSearch + "%'";                                   

                                }
                                else
                                {
                                    //For Comma separated  value search
                                    for (int i = 0; i < strSearchArray.Length; i++)
                                    {
                                        strSearch = strSearchArray[i].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        if (strSearch.Trim() != "")
                                        {


                                            if (sFilter == "")//(i == 0)
                                            {
                                                sFilter = " ( " + _dv.Table.Columns["GroupCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["ReasonCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["Description"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["Type"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                          _dv.Table.Columns["SystemDefined"].ColumnName + " Like '" + strSearch + "%' ) ";

                                            }
                                            else
                                            {
                                                sFilter = sFilter + " AND (" + _dv.Table.Columns["GroupCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["ReasonCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Description"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["Type"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["SystemDefined"].ColumnName + " Like '" + strSearch + "%') ";
                                            }

                                        }
                                    }
                                    _dv.RowFilter = sFilter;

                                }
                            }
                            else
                            {
                                _dv.RowFilter = "";
                            }

                            #endregion " Standard Reason Codes Search "
                        }
                        break;
                   case 62:
                        {
                            #region " Standard Followup Action Search "

                            try
                            {
                                if (strSearch.Trim() != "")
                                {
                                    if (strSearchArray.Length == 1)
                                    {
                                        //For Single value search 
                                        strSearch = strSearchArray[0].Trim();
                                        if (strSearch.Length > 1)
                                        {
                                            string str = strSearch.Substring(1).Replace("%", "");
                                            strSearch = strSearch.Substring(0, 1) + str;
                                        }
                                        _dv.RowFilter = _dv.Table.Columns["sStdFollowupActionCode"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                         _dv.Table.Columns["sStdFollowupActionDesc"].ColumnName + " Like '" + strSearch + "%'";

                                    }
                                    else
                                    {
                                        //For Comma separated  value search
                                        for (int i = 0; i < strSearchArray.Length; i++)
                                        {
                                            strSearch = strSearchArray[i].Trim();
                                            if (strSearch.Length > 1)
                                            {
                                                string str = strSearch.Substring(1).Replace("%", "");
                                                strSearch = strSearch.Substring(0, 1) + str;
                                            }
                                            if (strSearch.Trim() != "")
                                            {


                                                if (sFilter == "")//(i == 0)
                                                {
                                                    sFilter = " ( " + _dv.Table.Columns["sHoldBillingReason"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                                 _dv.Table.Columns["sHoldBillingDescription"].ColumnName + " Like '" + strSearch + "%')";

                                                }
                                                else
                                                {
                                                    sFilter = sFilter + " AND (" + _dv.Table.Columns["sHoldBillingReason"].ColumnName + " Like '" + strSearch + "%' OR " +
                                                                                 _dv.Table.Columns["sHoldBillingDescription"].ColumnName + " Like '" + strSearch + "%')";

                                                }

                                            }
                                        }
                                        _dv.RowFilter = sFilter;

                                    }
                                }
                                else
                                {
                                    _dv.RowFilter = "";
                                }
                            }
                            catch (Exception ex)
                            {
                                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                            }
                            finally
                            {
                               
                            }
                            #endregion

                        }
                        break;
                   case 63:
                        {
                            #region " Followup Mapping Filter"
                            try
                            {
                                if (trvMasters.SelectedNode.Level == 0)
                                {
                                    if (strSearch.Trim() != "")
                                    {
                                        // sFilter = " ( " + _dv.Table.Columns["sCPTMappingName"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["CreatedDate"].ColumnName + " Like '" + strSearch + "%')";
                                        sFilter = " ( " + _dv.Table.Columns["sInsuranceCrosswalkName"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["CreatedDateForSearch"].ColumnName + " Like '" + strSearch + "%')";
                                    }
                                }
                                else
                                {
                                    if (strSearch.Trim() != "")
                                    {
                                        sFilter = " ( " + _dv.Table.Columns["sOriginalFollowupCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sOriginalFollowupDesc"].ColumnName + " Like '" + strSearch + "%') or" +
                                            " ( " + _dv.Table.Columns["sReplaceFollowupCode"].ColumnName + " Like '" + strSearch + "%') or  ( " + _dv.Table.Columns["sReplaceFollowupDesc"].ColumnName + " Like '" + strSearch + "%')";
                                    }
                                }
                                _dv.RowFilter = sFilter;
                            }
                            catch (Exception ex)
                            {
                                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                            }
                            finally
                            {
                                
                            }

                            #endregion
                        }
                        break;
                }


                dgMasters.DataSource = _dv;
                
                // Resize all the row heights to fit the contents of all non-header cells.
                // Changed from AllCellsExceptHeaders to DisplayedCellsExceptHeaders
                // because ICD 10 search was slowing down for all ICD 10 data.
                dgMasters.AutoResizeRows(DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders);

                if (SelectedView == 58) //Common CPT
                {
                   
                    if (dgMasters.RowCount > 0)
                    {
                        tsb_Delete.Visible = true;
                        tsb_Delete.Enabled = true;
                        
                    }
                    else
                    {
                        tsb_Delete.Visible = false;
                    }
                }
                if (SelectedView == 59) //Common CPT
                {
                    Int64 _RuleID = 0;

                    if (dgMasters.SelectedRows != null && dgMasters.SelectedRows.Count > 0)
                    {
                        if (dgMasters.SelectedRows[0].Cells[0].Value != null)
                        {
                            _RuleID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                            if (IsClaimRulesActive(_RuleID))
                            {
                                tsb_Activate.Visible = false;
                                tsb_Deactivate.Visible = true;
                            }
                            else
                            {
                                tsb_Activate.Visible = true;
                                tsb_Deactivate.Visible = false;
                            }
                        }
                    }
                    else
                    {
                        tsb_Activate.Visible = false;
                        tsb_Deactivate.Visible = false;
                        tsb_Verify.Visible = false;
                    }
                }
               }


            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void FilterCptCommon()
        {
            try
            {
                string sFilter = "";

                _dv = (DataView)dgMasters.DataSource;
                dgMasters.DataSource = _dv;
                if (_dv == null) return;
                string strSearch = txtSearch.Text.Trim();
                strSearch = strSearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");

                if (strSearch.Trim() != "")
                {
                    strSearchArray = strSearch.Split(',');
                }
                if (strSearch.Trim() != "")
                {
                    if (strSearchArray.Length == 1)
                    {
                        //For Single value search 
                        strSearch = strSearchArray[0].Trim();
                        if (strSearch.Length > 1)
                        {
                            string str = strSearch.Substring(1).Replace("%", "");
                            strSearch = strSearch.Substring(0, 1) + str;
                        }
                        _dv.RowFilter = " sCPTCode Like '" + strSearch + "%' OR sDescription like '%" + strSearch + "%'";

                    }
                    else
                    {
                        //For Comma separated  value search
                        for (int i = 0; i < strSearchArray.Length; i++)
                        {
                            strSearch = strSearchArray[i].Trim();
                            if (strSearch.Length > 1)
                            {
                                string str = strSearch.Substring(1).Replace("%", "");
                                strSearch = strSearch.Substring(0, 1) + str;
                            }
                            if (strSearch.Trim() != "")
                            {
                                if (sFilter == "")//(i == 0)
                                {
                                    sFilter = " (sCPTCode Like '" + strSearch + "%' OR sDescription like '%" + strSearch + "%')";
                                }
                                else
                                {
                                    sFilter = sFilter + " AND (sCPTCode Like '" + strSearch + "%' OR sDescription like '%" + strSearch + "%')";
                                }
                            }
                        }
                        _dv.RowFilter = sFilter;

                    }
                }
                else
                {
                    _dv.RowFilter = "";
                }
                dgMasters.DataSource = _dv; //added for bugid 79114
                if (dgMasters.RowCount > 0)
                {
                    tsb_Delete.Visible = true;
                    tsb_Delete.Enabled = true;

                }
                else
                {
                    tsb_Delete.Visible = false;
                }
            }
            catch
            {
            
            }
        }
        
        //TODO: Comma Seperated not working, also need to set the order for searching
        // ICDVersion Parameter is added is not in use currently, but can be utilize for future 10 specific search
        private void SearchICD(gloICD.CodeRevision ICDRevision, string Keyword)
        {
            string sFilter = "";

            try
            {
                if (Keyword.Trim() != "")
                {
                    foreach (string sKeyword in strSearchArray)
                    {
                        Keyword = sKeyword.Trim();

                        if (Keyword.Length > 1)
                        {
                            string str = Keyword.Substring(1).Replace("%", "");
                            Keyword = Keyword.Substring(0, 1) + str;
                        }
                        if (Keyword.Trim() != "")
                        {
                            if (sFilter == "")
                            {
                                sFilter = " ( " + _dv.Table.Columns["sICD9Code"].ColumnName + " Like '" + Keyword + "%' OR " +
                                     //_dv.Table.Columns["sStatus"].ColumnName + " Like '" + Keyword + "%' OR " +
                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + Keyword + "%')";
                            }
                            else
                            {
                                sFilter = sFilter + " AND (" + _dv.Table.Columns["sICD9Code"].ColumnName + " Like '" + Keyword + "%' OR " +
                                     //_dv.Table.Columns["sStatus"].ColumnName + " Like '" + Keyword + "%' OR " +
                                     _dv.Table.Columns["sDescription"].ColumnName + " Like '" + Keyword + "%')";
                            }
                        }
                    }
                    _dv.RowFilter = sFilter;
                }
                else
                {
                    _dv.RowFilter = "";
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Exception while searching ICD " + ex.ToString(), true);
            }
        }

        private void txtSearch_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {

                if (e.KeyCode == Keys.Enter)
                {
                    string strSearch = txtSearch.Text.Trim();
                    strSearch = strSearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                    if (strSearch.Length > 1)
                    {
                        string str = strSearch.Substring(1).Replace("%", "");
                        strSearch = strSearch.Substring(0, 1) + str;
                    }
                    if (SelectedView == 21)
                    {
                        if (trvMasters.SelectedNode.Level != 0)
                        {
                            Int64 ID = Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));
                            //Fill_StandardFeeScheduleType(ID, strSearch);
                            if (_Searchcolumn == "Desc")
                            {
                                Fill_StandardFeeScheduleType(ID, strSearch);
                            }
                            else
                            {
                                //Fill_StandardFeeScheduleType_new(ID,strSearch,"");
                                Fill_StandardFeeScheduleType(ID, strSearch);
                            }
                        }
                    }
                    //else if (SelectedView == 14)
                    //{
                    //    Int64 ID = Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));
                    //    Fill_Flags(ID, strSearch);
                    //}


                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        #endregion " Search Fucntionality "

        #region " Methods Added for Standard Fee Schedule Type"

        private object GetTagElement(string TagContent, Char Delimeter, Int64 Position)
        {
            string[] temp;
            if (TagContent.Contains(Delimeter.ToString()))
            {
                temp = TagContent.Split(Delimeter);
                return temp[Position - 1];
            }
            else
            {
                return TagContent;
            }
        }

        private void GetDefaultSpeciality()
        {
            GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);

            object value = null;
            ogloSettings.GetSetting("DefaultFeeSpeciality", out value);
            ogloSettings.Dispose();
            ogloSettings = null;
            //if (value != null)
            //{
            //    if (value != null)
            //    {
            //        _defaultSpeciality = Convert.ToString(value);

            //    }
            //}
            //else 
            if (value == null || value.ToString() == "")
            {
                _defaultSpeciality = "11";
            }
            else
            {
                if (value != null)
                {
                    _defaultSpeciality = Convert.ToString(value);
                }
            }
            //value = null;
        }

        private void GetDefaultCarrierNumber()
        {
            GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);

            object value = null;
            ogloSettings.GetSetting("DefaultCarrierNumber", out value);
            ogloSettings.Dispose();
            ogloSettings = null;
            if (value != null)
            {
                if (value != null)
                {
                    _defaultcarrierNumber = Convert.ToString(value);

                }
            }
            if (value == null || value.ToString() == "0" || value.ToString() == "")
            {
                _defaultcarrierNumber = "";
            }
            value = null;
        }

        private void GetDefaultLocality()
        {
            GeneralSettings ogloSettings = new GeneralSettings(_databaseconnectionstring);

            object value = null;
            ogloSettings.GetSetting("DefaultLocality", out value);
            ogloSettings.Dispose();
            ogloSettings = null;
            if (value != null)
            {
                if (value != null)
                {
                    _defaultlocality = Convert.ToString(value);
                }
            }
            if (value == null || value.ToString() == "0" || value.ToString() == "")
            {
                _defaultlocality = "";
            }
            value = null;
        }

        public void FillSpecialities()
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtSpeciality = null;
            string strQuery = "";
           
            cmbSpeciality.DataSource = null;
            cmbSpeciality.Items.Clear();
            try
            {
                oDB.Connect(false);

                if (_ClinicID == 0)
                {
                    strQuery = "SELECT sCode,(sCode + ' - ' + sDescription) AS SpecCodeName FROM Specialty_MST WITH(NOLOCK) where " +
                        " sCode IS NOT NULL AND sDescription IS NOT NULL AND bIsBlocked = 0 ";
                }
                else
                {
                    strQuery = "SELECT sCode,(sCode + ' - ' + sDescription) AS SpecCodeName FROM Specialty_MST WITH(NOLOCK) where " +
                        " sCode IS NOT NULL AND sDescription IS NOT NULL AND bIsBlocked = 0 AND nClinicID = " + _ClinicID + "";
                }

                oDB.Retrive_Query(strQuery, out dtSpeciality);

        
                if (dtSpeciality != null && dtSpeciality.Rows.Count > 0)
                {
                    DataRow dr = dtSpeciality.NewRow();
                    dr["SpecCodeName"] = "0 - All";
                    dr["sCode"] = "0";
                    dtSpeciality.Rows.InsertAt(dr, 0);
                    dtSpeciality.AcceptChanges();

                    cmbSpeciality.DataSource = dtSpeciality;
                    cmbSpeciality.DisplayMember = dtSpeciality.Columns["SpecCodeName"].ColumnName;
                    cmbSpeciality.ValueMember = dtSpeciality.Columns["sCode"].ColumnName;
                }
                //cmbSpeciality.SelectedValue = Convert.ToInt16(_defaultSpeciality);
                cmbSpeciality.SelectedValue = Convert.ToString(_defaultSpeciality);

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

        }

        #endregion

        private void c1AppointmentType_AfterResizeColumn(object sender, C1.Win.C1FlexGrid.RowColEventArgs e)
        {
            try
            {
                c1AppointmentType.Row = -1;
            }
            catch (Exception ex)
            {

                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);

            }
        }

        private void c1AppointmentType_AfterSort(object sender, C1.Win.C1FlexGrid.SortColEventArgs e)
        {
            try
            {

                c1AppointmentType.Row = -1;
            }
            catch (Exception ex)
            {

                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);

            }
        }

        private void cmbSpeciality_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                Fill_StandardFeeScheduleType(FeeScheduleTypeID, Convert.ToString(txtSearch.Text));
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

        }

        private void ShowCommonCPT()
        {
            frmCommonCPT objfrmcpt = new frmCommonCPT(1);
            objfrmcpt.DatabaseConnectionString = DatabaseConnectionString;
            objfrmcpt.ShowDialog(this);
            objfrmcpt.Dispose();
            objfrmcpt = null;
            Fill_CommonCPT(1);
            FilterCptCommon();     
        }

        private void DeleteTreatment()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string strSQL = "";
            //int _result = 0;
            object ID = null;
            try
            {
                if (MessageBox.Show("Are you sure you want to delete this smart treatment?", _messageBoxCaption, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                {

                    if (dgMasters.SelectedRows.Count > 0)
                    {
                        oDB.Connect(false);
                        strSQL = "Delete FROM BL_SmartTreatment Where (nTreatmentID=" + Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value) + ") AND sTreatmentName='" + Convert.ToString(dgMasters.SelectedRows[0].Cells[1].Value).Replace("'", "''") + "'";
                        ID = oDB.ExecuteScalar_Query(strSQL);
                        strSQL = "Delete FROM BL_SmartTreatmentCPT Where (nTreatmentID=" + Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value) + ")";
                        ID = oDB.ExecuteScalar_Query(strSQL);
                        strSQL = "Delete FROM BL_SmartTreatmentICD9 Where (nTreatmentID=" + Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value) + ")";
                        ID = oDB.ExecuteScalar_Query(strSQL);
                        FillSmartTreatment();
                    }
                }
            }
            catch (Exception)// ex)
            {

                //ex.ToString();
                //ex = null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
        }

        private void ofrmSetupSmartTreatment_CloseButton_Click(object sender, EventArgs e)
        {
            FillSmartTreatment();
        }

        private void c1AppointmentType_CellButtonClick(object sender, C1.Win.C1FlexGrid.RowColEventArgs e)
        {

        }
        
        private void cmbCategoryType_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                Fill_Category(0);
            }
            catch (Exception)// ex)
            {
                //ex.ToString();
                //ex = null;
            }
        }


        #region " Form Events"

        protected override void Dispose(bool disposing)
        {
            // Check to see if Dispose has already been called. 
            if (!(this.blnDisposed))
            {
                // If disposing equals true, dispose all managed 
                // and unmanaged resources. 
                if ((disposing))
                {
                    try
                    {
                        gloGlobal.cEventHelper.RemoveAllEventHandlers(this);
                    }
                    catch
                    {
                    }
                    // Dispose managed resources. 
                    if ((components != null))
                    {
                        components.Dispose();
                    }

                    if (this.searchTimer != null)
                    {
                        this.searchTimer.Tick -= new EventHandler(searchTimer_Tick);
                        this.searchTimer.Dispose();
                        this.searchTimer = null;
                    }
                    //frm = Nothing 
                }
                // Release unmanaged resources. If disposing is false, 
                // only the following code is executed. 

                // Note that this is not thread safe. 
                // Another thread could start disposing the object 
                // after the managed resources are disposed, 
                // but before the disposed flag is set to true. 
                // If thread safety is necessary, it must be 
                // implemented by the client. 
            }
            frm = null;
            this.blnDisposed = true;
            base.Dispose(disposing);
        }

        public void Disposer()
        {
            Dispose(true);
            // Take yourself off of the finalization queue 
            // to prevent finalization code for this object 
            // from executing a second time. 
            System.GC.SuppressFinalize(this);
        }

        ~frmViewBillingBook()
        {
            Dispose(false);
        }

        private void frmViewBillingBook_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (dtcommoncpt != null)
            {
                dtcommoncpt.Dispose();
                dtcommoncpt = null; 
            }
            this.Dispose();
        }

        #endregion

        private void numCount_ValueChanged(object sender, EventArgs e)
        {
            try
            {


                string strSearch = txtSearch.Text.Trim();
                strSearch = strSearch.Replace("'", "''").Replace("[", "").Replace("]", "").Replace("*", "%");
                if (strSearch.Length > 1)
                {
                    string str = strSearch.Substring(1).Replace("%", "");
                    strSearch = strSearch.Substring(0, 1) + str;
                }
                if (SelectedView == 21)
                {
                    if (trvMasters.SelectedNode.Level != 0)
                    {
                        Int64 ID = Convert.ToInt64(Convert.ToInt64(GetTagElement(trvMasters.SelectedNode.Tag.ToString(), '~', 2)));
                        //Fill_StandardFeeScheduleType(ID, strSearch);
                        if (_Searchcolumn == "Desc")
                        {
                            Fill_StandardFeeScheduleType_new(ID, "", strSearch);
                        }
                        else
                        {
                            //Fill_StandardFeeScheduleType_new(ID,strSearch,"");
                            Fill_StandardFeeScheduleType(ID, strSearch);
                        }
                    }
                }


            }

            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
        }

        private void c1AppointmentType_MouseMove(object sender, MouseEventArgs e)
        {
            //  gloC1FlexStyle.ShowToolTip(C1SuperTooltip1, (C1FlexGrid)sender, e.Location);
        }

        private void tsb_Modify_Click(object sender, EventArgs e)
        {

        }

        private void tsb_Print_Click(object sender, EventArgs e)
        {
            string _parameterName = string.Empty;
            string _ParameterValue = string.Empty;
            if (dgMasters.Rows.Count <= 0)
            {
                return;
            }
            if (dgMasters.SelectedRows.Count > 0)
            {
                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != null || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                {
                    _parameterName = "nPayerSettingID";
                    _ParameterValue = dgMasters.SelectedRows[0].Cells[0].Value.ToString();
                }
            }
            if (_parameterName != string.Empty)
                _parameterName = _parameterName + ",nClinicID";
            else
                _parameterName = "nPayerSettingID,nClinicID";

            if (_ParameterValue != string.Empty)
                _ParameterValue = _ParameterValue + "," + _ClinicID;
            else
                _ParameterValue = "0" + "," + _ClinicID;

            //Cursor.Current = Cursors.WaitCursor;
            SSRSApplication.frmSSRSViewer frmSSRS = new SSRSApplication.frmSSRSViewer();
            frmSSRS.Conn = _databaseconnectionstring;
            frmSSRS.reportName = "rptERAPayerSetupReport";
            frmSSRS.reportTitle = "ERA Payer Report";
            frmSSRS.parameterName = _parameterName;
            frmSSRS.ParameterValue = _ParameterValue;
            frmSSRS.formIcon = null;
            frmSSRS.IsgloStreamReport = true;
            //frmSSRS.MdiParent = this;
            //Cursor.Current = Cursors.Default;
            //frmSSRS.Show();
            frmSSRS.ShowDialog(this);
            frmSSRS.Dispose();
            frmSSRS = null;
            //ShowHideMainMenu(false, false);
        }

        private void ts_gloCommunityDownload_Click(object sender, EventArgs e)
        {
            //Code Start added by kanchan on 20120102 for gloCommunity integration
            if (EvntgloCommunityHandler != null)
                EvntgloCommunityHandler();
        }

        private void tsb_SaveAsCopy_Click(object sender, EventArgs e)
        {

            if (dgMasters.SelectedRows.Count > 0)
            {
                if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() != "0")
                {
                    FeeScheduleTypeID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                    FeeScheduleType = Convert.ToString(dgMasters.SelectedRows[0].Cells[2].Value.ToString());
                    frmSetupStdFeeSchedule ofrmSetupStdFeeSchedule = new frmSetupStdFeeSchedule(FeeScheduleTypeID, FeeScheduleType, _databaseconnectionstring, true);
                    ofrmSetupStdFeeSchedule.ShowDialog(this);
                    ofrmSetupStdFeeSchedule.Dispose();
                    ofrmSetupStdFeeSchedule = null;
                    FillStandardShcheduleNames(0);

                }
            }

               
        }

        private void RbICD9_CheckedChanged(object sender, EventArgs e)
        {
            if (RbICD9.Checked)
            {
                ResetList();
                RbICD9.Font = gloGlobal.clsgloFont.gFont_BOLD;//new Font("Tahoma", 9, FontStyle.Bold);
            }
           
            else
            {
                RbICD9.Font = gloGlobal.clsgloFont.gFont ;//new Font("Tahoma", 9, FontStyle.Regular);
            }
        }

        private void RbICD10_CheckedChanged(object sender, EventArgs e)
        {
            if (RbICD10.Checked)
            {
                ResetList();
                RbICD10.Font = gloGlobal.clsgloFont.gFont_BOLD;//new Font("Tahoma", 9, FontStyle.Bold);
            }
            else
            {
                RbICD10.Font = gloGlobal.clsgloFont.gFont ;//new Font("Tahoma", 9, FontStyle.Regular);
            }
        }

        private void ResetList()
        {
            try
            {
                LoadInvalidICD(SelectedICD);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Exception while loading Invalid ICD" + ex.ToString(), true);
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {

            txtSearch.ResetText();
            txtSearch.Focus();
        }

        //private void tsbCopyAs_Click(object sender, EventArgs e)
        //{
        //    frmSetupQuickNotes ofrmSetupNotes;
        //    string sNote = "";
        //    if (dgMasters != null && dgMasters.SelectedRows.Count > 0)
        //    {
        //        if (dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "" || dgMasters.SelectedRows[0].Cells[0].Value.ToString() == "0")
        //            return;
        //        else
        //            sNote = dgMasters.SelectedRows[0].Cells["sNoteDescription"].Value.ToString();

        //        if (sNote != "")
        //        {
        //            ofrmSetupNotes = new frmSetupQuickNotes(sNote, _databaseconnectionstring);
        //            ofrmSetupNotes.ShowDialog(this);
        //            Fill_QuickNotes(0);
        //            ofrmSetupNotes.Dispose();
        //            ofrmSetupNotes = null;
        //        }
        //    }
        //}

        private void dgMasters_Sorted(object sender, EventArgs e)
        {
            switch (SelectedView)
            {
                case 56:
                     dgMasters.DefaultCellStyle.WrapMode = DataGridViewTriState.True;
                            dgMasters.AutoResizeRows();
                    break;
            }
        }

        private void tsb_GenReport_Click(object sender, EventArgs e)
        {
            SSRSApplication.frmSSRSViewer frmSSRS = new SSRSApplication.frmSSRSViewer();
            try
            { 
                    if (dgMasters.Rows.Count <= 0)
                {
                    frmSSRS.Dispose();
                    frmSSRS = null;
                    return;
                }
                   
                  
                    frmSSRS.Conn = _databaseconnectionstring;
                    frmSSRS.reportName = "rptCPTMasterListing";
                    frmSSRS.reportTitle = "CPT Report";

                    frmSSRS.formIcon = null;
                    frmSSRS.IsgloStreamReport = true;


                    frmSSRS.MdiParent = this.MdiParent;
                    frmSSRS.WindowState = FormWindowState.Maximized;
                    frmSSRS.Show();
                //frmSSRS.Dispose();
                //frmSSRS = null;

                //ShowHideMainMenu(false, false);
            }
            catch(Exception ex )
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog("Exception while loading Invalid ICD" + ex.ToString(), true);
                frmSSRS.Dispose();
                frmSSRS = null;
                return;
            }
            
        }

        private void dgMasters_CurrentCellChanged(object sender, EventArgs e)
        {
            Int64 _RuleID = 0;
            if (tsb_Activate.Visible == true || tsb_Deactivate.Visible == true)
            {
                if (SelectedView != 51 && SelectedView!=52)
                {
                if (dgMasters.SelectedRows != null && dgMasters.SelectedRows.Count > 0)
                {
                    if (dgMasters.SelectedRows[0].Cells[0].Value != null)
                    {
                        _RuleID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                        if (IsClaimRulesActive(_RuleID))
                        {
                            tsb_Activate.Visible = false;                          
                            tsb_Deactivate.Visible = true;
                        }
                        else
                        {
                            tsb_Activate.Visible = true;
                            tsb_Deactivate.Visible = false;                          
                        }
                    }
                }
                }
                else if (SelectedView ==51 ||SelectedView==52)
                {
                    if (dgMasters.SelectedRows != null && dgMasters.SelectedRows.Count > 0)
                {
                    if (dgMasters.SelectedRows[0].Cells[0].Value != null)
                    {
                        _RuleID = Convert.ToInt64(dgMasters.SelectedRows[0].Cells[0].Value.ToString());
                        if (IsScheduleActionsActive(_RuleID))
                        {
                            tsb_Activate.Visible = false;                          
                            tsb_Deactivate.Visible = true;
                        }
                        else
                        {
                            tsb_Activate.Visible = true;
                            tsb_Deactivate.Visible = false;                          
                        }
                    }
                }
                }
               

                
            }
        }


        public bool IsCategoryUsedInPatientDetails(string categoryName, string categoryType, string sCode)
        {
            try
            {
                object oResult = null;
                

                SqlConnection con = new SqlConnection(_databaseconnectionstring);
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = con;
                if ((categoryType == "Language"))
                {
                    cmd.CommandText = "SELECT COUNT(*) FROM patient where sLang= '" + categoryName.Replace("'", "''") + "'";
                }
                else if ((categoryType == "Birth Sex"))
                {
                    cmd.CommandText = "SELECT COUNT(*) FROM patient where sGender= '" + categoryName.Replace("'", "''") + "'";
                }
                else if ((categoryType.ToUpper() == "ETHNICITY" | categoryType.ToUpper() == "ETHNICITY SPECIFICATION"))
                {
                    cmd.CommandText = "SELECT COUNT(*) FROM Patient_EthnicitySpecification where sEthnicitySpecificationDescription= '" + categoryName.Replace("'", "''") + "'";
                }
                else if ((categoryType.ToUpper() == "RACE" | categoryType.ToUpper() == "RACE SPECIFICATION"))
                {
                    cmd.CommandText = "SELECT COUNT(*) FROM Patient_RaceSpecification where sRaceSpecificationDescription= '" + categoryName.Replace("'", "''") + "'";
                }
                else if ((categoryType.ToUpper() == "SEXUAL ORIENTATION"))
                {
                    cmd.CommandText = "SELECT COUNT(*) FROM dbo.Patient_OtherDetails AS POD WHERE ISNULL(POD.nSexualOrientationCategoryID,0)<>0 AND POD.sSexualOrientationDesc= '" + categoryName.Replace("'", "''") + "'";
                }
                else if ((categoryType.ToUpper() == "GENDER IDENTITY"))
                {
                    cmd.CommandText = "SELECT COUNT(*) FROM dbo.Patient_OtherDetails AS POD WHERE ISNULL(POD.nGenderIdentityCateroryID,0)<>0 AND POD.sGenderIdentityDesc= '" + categoryName.Replace("'", "''") + "'";
                }

                con.Open();
                oResult = cmd.ExecuteScalar();

                if (cmd != null)
                {
                    cmd.Parameters.Clear();
                    cmd.Dispose();
                    cmd = null;
                }

                con.Close();
                con.Dispose();
                con = null;

                if ((Int32)oResult > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception)
            {
                return true;
            }
        }

        
    }
}
