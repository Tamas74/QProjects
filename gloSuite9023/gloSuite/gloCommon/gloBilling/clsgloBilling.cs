using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using gloBilling.Common;
using System.Windows.Forms;
using System.Collections;
using System.Data.SqlClient;
using gloSettings;
using gloGlobal;
using System.Linq;

namespace gloBilling
{

    public class gloBilling
    {
        //Code Start added by kanchan on 20120102 for gloCommunity integration
        public delegate void gloBillingHandler();   //added delegate for calling gloCommunityViewDataform for BillingConfig Download.
        public event gloBillingHandler EvntBillingHandler; //added event for calling gloCommunityViewDataform for BillingConfig Download.

        #region "Constructor & Distructor"

        //private string _databaseconnectionstring = "";
        internal static string _databaseconnectionstring = "";
        private string _emrdatabaseconnectionstring = "";
        private static string _messageBoxCaption = String.Empty;

        //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
        System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
        private Int64 _ClinicID = 0;
        public Int64 ClinicID
        {
            get { return _ClinicID; }
            set { _ClinicID = value; }
        }
        Int64 _UserId = 0;
        string _UserName = "";
        private string _paymentPrefix = "GPM#";
        //added for reteriving snomed setting
        private string _gstrSMDBServerName = "";
        public string gstrSMDBServerName
        {
            get { return _gstrSMDBServerName; }
            set { _gstrSMDBServerName = value; }
        }


        private string _gstrSMDBDatabaseName = "";
        public string gstrSMDBDatabaseName
        {
            get { return _gstrSMDBDatabaseName; }
            set { _gstrSMDBDatabaseName = value; }
        }

        private bool _gblnSMDBAuthen = false;
        public bool gblnSMDBAuthen
        {
            get { return _gblnSMDBAuthen; }
            set { _gblnSMDBAuthen = value; }
        }

        private string _gstrSMDBUserID = "";
        public string gstrSMDBUserID
        {
            get { return _gstrSMDBUserID; }
            set { _gstrSMDBUserID = value; }
        }

        private string _gstrSMDBPassWord = "";
        public string gstrSMDBPassWord
        {
            get { return _gstrSMDBPassWord; }
            set { _gstrSMDBPassWord = value; }
        }
        public gloBilling(string DatabaseConnectionString, string EMRDatabaseConnectionString)
        {
           

            _databaseconnectionstring = DatabaseConnectionString;
            _emrdatabaseconnectionstring = EMRDatabaseConnectionString;
            //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
            if (appSettings["ClinicID"] != null)
            {
                if (appSettings["ClinicID"] != "")
                { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
                else { _ClinicID = 0; }
            }
            else
            { _ClinicID = 0; }
            if (appSettings["MessageBOXCaption"] != null)
            {
                if (appSettings["MessageBOXCaption"] != "")
                {
                    _messageBoxCaption = Convert.ToString(appSettings["MessageBOXCaption"]);
                }
                else
                {
                    _messageBoxCaption = "gloPM";
                }
            }
            else
            { _messageBoxCaption = "gloPM"; }

            #region " Retrive UserID from appSettings "

            if (appSettings["UserID"] != null)
            {
                if (appSettings["UserID"] != "")
                {
                    _UserId = Convert.ToInt64(appSettings["UserID"]);
                }
            }
            else
            {
                _UserId = 0;
            }

            #endregion

            #region " Retrive UserName from appSettings "

            if (appSettings["UserName"] != null)
            {
                if (appSettings["UserName"] != "")
                {
                    _UserName = Convert.ToString(appSettings["UserName"]);
                }
            }
            else
            {
                _UserName = "";
            }

            #endregion



        }

        private bool disposed = false;

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {

                }
            }
            disposed = true;
        }

        ~gloBilling()
        {
            Dispose(false);
        }

        #endregion

        #region "Insert, Delete & GetTransaction"

        //// Commented on 02/05/2008
        ////public Int64 Insert(Common.Transaction oTransaction)
        ////{
        ////    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        ////    gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
        ////    Object objectID;
        ////    Int64 TransactionID=0;
        ////    try
        ////    {
        ////        oDB.Connect(false);

        ////        // For the Transaction Table
        ////        //nTransactionID, nPatientID, nProviderID, sBillNumberPrfx, nBillNumberId, nBillDate, bIsLocked, nClinicID
        ////        //@TransactionID, @PatientID, @ProviderID, @BillNumberPrfx, @BillNumberId, @BillDate, @IsLocked, @ClinicID

        ////        oDBParameters.Add("@TransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
        ////        oDBParameters.Add("@PatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
        ////        oDBParameters.Add("@ProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
        ////        oDBParameters.Add("@BillNumberPrfx", oTransaction.BillNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
        ////        oDBParameters.Add("@BillNumberId", oTransaction.BillNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////        oDBParameters.Add("@BillDate", oTransaction.BillDate, ParameterDirection.Input, SqlDbType.BigInt);
        ////        oDBParameters.Add("@IsLocked", oTransaction.IsBlock, ParameterDirection.Input, SqlDbType.Bit);
        ////        oDBParameters.Add("@ClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

        ////        oDB.Execute("BL_INUP_Transaction", oDBParameters, out  objectID);

        ////        if (objectID == null)
        ////        { return 0; }
        ////            //Set the value of the Transaction Id.
        ////            TransactionID = (Int64)objectID;




        ////        // For the Transaction Lines Table                 
        ////            //Delete the existing information for the transaction
        ////            oDB.Execute_Query("Delete from BL_TransactionLines where nTransactionID= "+TransactionID);

        ////        //Database //nTransactionID, nLineNo, nStartDate, nEndDate, nProviderID, sCPTCode, sCPTDescription, nLocationID, dUnitQty, dRateAmount, dTotalAMount, nClinicID
        ////        //Params   //@TransactionID, @LineNo, @StartDate, @EndDate, @ProviderID, @CPTCode, @CPTDescription, @LocationID, @UnitQty, @RateAmount, @TotalAMount, @ClinicID


        ////        for (int i = 0; i < oTransaction.Lines.Count; i++)
        ////            {
        ////                oDBParameters.Clear();
        ////                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@LineNo", oTransaction.Lines[i].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@StartDate", oTransaction.Lines[i].StartDate, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@EndDate", oTransaction.Lines[i].EndDate, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@ProviderID", oTransaction.Lines[i].ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@CPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@CPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@LocationID", oTransaction.Lines[i].Location, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@UnitQty", oTransaction.Lines[i].UnitQuantity, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@RateAmount", oTransaction.Lines[i].RateAmount, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@TotalAMount", oTransaction.Lines[i].TotalAmount, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@ClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);


        ////                oDB.Execute("BL_INSERT_TransactionLine", oDBParameters);
        ////            }




        ////         // For the Transaction Modifier Table 
        ////                //Delete the existing information for the transaction
        ////                oDB.Execute_Query("Delete from BL_TransactionLineModifiers where nTransactionID= " + TransactionID);


        ////        //Database //nTransactionID, nLineNo, nColumnNo, sModifierCode, sModifierDescription, nClinicID
        ////        //Params   //@TransactionID, @LineNo, @ColumnNo, @ModifierCode, @ModifierDescription, @ClinicID

        ////        for (int i = 0; i < oTransaction.Lines.Count; i++)
        ////        {
        ////           for (int j = 0; j < oTransaction.Lines[i].Modifiers.Count; j++)
        ////           {
        ////               oDBParameters.Clear();
        ////               oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////               oDBParameters.Add("@LineNo", oTransaction.Lines[i].Modifiers[j].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////               oDBParameters.Add("@ColumnNo", oTransaction.Lines[i].Modifiers[j].ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////               oDBParameters.Add("@ModifierCode", oTransaction.Lines[i].Modifiers[j].ModifierCode, ParameterDirection.Input, SqlDbType.VarChar);
        ////               oDBParameters.Add("@ModifierDescription", oTransaction.Lines[i].Modifiers[j].ModifierDescription, ParameterDirection.Input, SqlDbType.VarChar);
        ////               oDBParameters.Add("@ClinicID", oTransaction.Lines[i].Modifiers[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);


        ////               oDB.Execute("BL_INSERT_TransactionLineModifier", oDBParameters);
        ////           }
        ////        }




        ////        // For the Transaction ICD9 Table 
        ////            //Delete the existing information for the transaction
        ////            oDB.Execute_Query("Delete from BL_TransactionLineICD9s where nTransactionID= " + TransactionID);

        ////        // nTransactionID, nLineNo, nColumnNo, sICD9Code, sICD9Description, nClinicID
        ////        // @TransactionID, @LineNo, @ColumnNo, @ICD9Code, @ICD9Description, @ClinicID

        ////        for (int i = 0; i < oTransaction.Lines.Count; i++)
        ////        {
        ////            for (int j = 0; j < oTransaction.Lines[i].ICD9s.Count; j++)
        ////            {
        ////                oDBParameters.Clear();
        ////                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@LineNo", oTransaction.Lines[i].ICD9s[j].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@ColumnNo", oTransaction.Lines[i].ICD9s[j].ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@ICD9Code", oTransaction.Lines[i].ICD9s[j].ICD9Code, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@ICD9Description", oTransaction.Lines[i].ICD9s[j].ICD9Description, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@ClinicID", oTransaction.Lines[i].ICD9s[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);


        ////                oDB.Execute("BL_INSERT_TransactionLineICD9", oDBParameters);
        ////            }
        ////        }


        ////        // For the Transaction Taxs Table 
        ////            //Delete the existing information for the transaction
        ////            oDB.Execute_Query("Delete from BL_TransactionTaxes where nTransactionID= " + TransactionID);

        ////        // nTransactionID, nLineNo, nTaxID, sTaxName, dTaxPercentage, dTaxAmount, nClinicID
        ////        // @TransactionID, @LineNo, @TaxID, @TaxName, @TaxPercentage, @TaxAmount, @ClinicID

        ////        for (int i = 0; i < oTransaction.Lines.Count; i++)
        ////        {
        ////            for (int j = 0; j < oTransaction.Lines[i].Taxs.Count; j++)
        ////            {
        ////                oDBParameters.Clear();
        ////                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@LineNo", oTransaction.Lines[i].Taxs[j].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@TaxID", oTransaction.Lines[i].Taxs[j].TaxID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@TaxName", oTransaction.Lines[i].Taxs[j].TaxName, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@TaxPercentage", oTransaction.Lines[i].Taxs[j].TaxPercentage, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@TaxAmount", oTransaction.Lines[i].Taxs[j].TaxAmount, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@ClinicID", oTransaction.Lines[i].Taxs[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);


        ////                oDB.Execute("BL_INSERT_TransactionTax", oDBParameters);
        ////            }
        ////        }


        ////        // For the Transaction Payments Table 
        ////            //Delete the existing information for the transaction
        ////            oDB.Execute_Query("Delete from BL_TransactionPayments where nTransactionID= " + TransactionID);

        ////        // nTransactionID, nLineNo, nPaymentTypeID, nPaymentID, dPaymentPercentage, dPaymentAmount, sPaymentNotes, nClinicID
        ////        // @TransactionID, @LineNo, @PaymentTypeID, @PaymentID, @PaymentPercentage, @PaymentAmount, @PaymentNotes, @ClinicID 

        ////        for (int i = 0; i < oTransaction.Lines.Count; i++) 
        ////        {
        ////            for (int j = 0; j < oTransaction.Lines[i].Payments.Count; j++)
        ////            {
        ////                oDBParameters.Clear();
        ////                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@LineNo", oTransaction.Lines[i].Payments[j].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@PaymentTypeID", oTransaction.Lines[i].Payments[j].PaymentTypeID, ParameterDirection.Input, SqlDbType.BigInt);
        ////                oDBParameters.Add("@PaymentID", oTransaction.Lines[i].Payments[j].PaymentID, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@PaymentPercentage", oTransaction.Lines[i].Payments[j].PaymentPercentage, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@PaymentAmount", oTransaction.Lines[i].Payments[j].PaymentAmount, ParameterDirection.Input, SqlDbType.Decimal);
        ////                oDBParameters.Add("@PaymentNotes", oTransaction.Lines[i].Payments[j].PaymentNotes, ParameterDirection.Input, SqlDbType.VarChar);
        ////                oDBParameters.Add("@ClinicID", oTransaction.Lines[i].Payments[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);


        ////                oDB.Execute("BL_INSERT_TransactionPayment", oDBParameters);
        ////            }
        ////        }            


        ////        oDB.Disconnect();

        ////    }
        ////    catch (Exception ex)
        ////    {

        ////        System.Windows.Forms.MessageBox.Show("Error while iserting transaction in database.");
        ////    }
        ////    finally 
        ////    {
        ////        oDBParameters.Dispose();
        ////        oDB.Dispose();
        ////    }
        ////    return TransactionID;
        ////}

        //public Int64 AddBill(Transaction oTransaction)
        //{
        //    Int64 TransactionID = 0;
        //    Object objectID;
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
        //    try
        //    {
        //        oDB.Connect(false);

        //        // For the Transaction Table
        //        //nTransactionID,nTransactionType,nVisitId, nPatientID, nProviderID, sBillNumberPrfx, nBillNumberId, nBillDate, bIsLocked, nClinicID

        //        oDBParameters.Add("@TransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
        //        oDBParameters.Add("@TransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@VisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@PatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@ProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@BillNumberPrfx", oTransaction.BillNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
        //        oDBParameters.Add("@BillNumberId", oTransaction.BillNo, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@BillDate", oTransaction.BillDate, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDBParameters.Add("@IsLocked", oTransaction.IsBlock, ParameterDirection.Input, SqlDbType.Bit);
        //        oDBParameters.Add("@ClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

        //        oDB.Execute("BL_INUP_Transaction", oDBParameters, out  objectID);

        //        if (objectID == null)
        //        { return 0; }
        //        TransactionID = (Int64)objectID;

        //        //Delete the existing Transaction Lines
        //        oDB.Execute_Query("Delete from BL_TransactionLines where nTransactionID= " + TransactionID);

        //        //Delete the existing Transaction Lines CPT  
        //        oDB.Execute_Query("Delete from BL_TransactionLine_CPT where nTransactionID= " + TransactionID);

        //        //Delete ICD9s
        //        oDB.Execute_Query("Delete from BL_TransactionLine_CPT_ICD9s where nTransactionID= " + TransactionID);

        //        //Delete Modifiers 
        //        oDB.Execute_Query("Delete from BL_TransactionLine_CPT_Modifiers where nTransactionID= " + TransactionID);

        //        //Delete Payment 
        //        oDB.Execute_Query("Delete from BL_TransactionLine_Payment where nTransactionID= " + TransactionID);

        //        //Delete Payment Details
        //        oDB.Execute_Query("Delete from BL_TransactionLine_Payment_Details where nTransactionID= " + TransactionID);

        //        //Delete Taxes
        //        oDB.Execute_Query("Delete from BL_TransactionLine_Payment_Taxes where nTransactionID= " + TransactionID);


        //        //Transaction Lines
        //        for (int i = 0; i < oTransaction.Lines.Count; i++)
        //        {
        //            oDBParameters.Clear();
        //            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //            oDBParameters.Add("@LineNo", oTransaction.Lines[i].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //            oDBParameters.Add("@StartDate", oTransaction.Lines[i].StartDate, ParameterDirection.Input, SqlDbType.BigInt);
        //            oDBParameters.Add("@EndDate", oTransaction.Lines[i].EndDate, ParameterDirection.Input, SqlDbType.BigInt);
        //            oDBParameters.Add("@BillingProviderID", oTransaction.Lines[i].BillingProviderID, ParameterDirection.Input, SqlDbType.BigInt);
        //            oDBParameters.Add("@LocationId", oTransaction.Lines[i].Location, ParameterDirection.Input, SqlDbType.BigInt);
        //            oDBParameters.Add("@IsSendToBill", false, ParameterDirection.Input, SqlDbType.Bit);
        //            oDBParameters.Add("@IsBilled", false, ParameterDirection.Input, SqlDbType.Bit);
        //            oDBParameters.Add("@ClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

        //            oDB.Execute("BL_INSERT_TransactionLine", oDBParameters);
        //        }

        //        for (int i = 0; i < oTransaction.Lines.Count; i++)
        //        {
        //            //Transaction Lines-->Procedure
        //            for (int j = 0; j < oTransaction.Lines[i].Procedures.Count; j++)
        //            {
        //                oDBParameters.Clear();
        //                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDBParameters.Add("@LineNo", oTransaction.Lines[i].Procedures[j].LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDBParameters.Add("@ColumnNo", oTransaction.Lines[i].Procedures[j].ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDBParameters.Add("@ProcedureCode", oTransaction.Lines[i].Procedures[j].ProcedureCode, ParameterDirection.Input, SqlDbType.VarChar);
        //                oDBParameters.Add("@ProcedureDescription", oTransaction.Lines[i].Procedures[j].ProcedureDescription, ParameterDirection.Input, SqlDbType.VarChar);
        //                oDBParameters.Add("@ClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

        //                oDB.Execute("BL_INSERT_TransactionLineCPT", oDBParameters);

        //                //Transaction Lines-->Procedures-->ICD9s
        //                for (int k = 0; k < oTransaction.Lines[i].Procedures[j].ICD9s.Count; k++)
        //                {
        //                    TransactionLineICD9 oICD9 = oTransaction.Lines[i].Procedures[j].ICD9s[k];

        //                    oDBParameters.Clear();
        //                    oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@LineNo", oICD9.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@ColumnNo", oICD9.ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@ICD9Code", oICD9.ICD9Code, ParameterDirection.Input, SqlDbType.VarChar);
        //                    oDBParameters.Add("@ICD9Description", oICD9.ICD9Description, ParameterDirection.Input, SqlDbType.VarChar);
        //                    oDBParameters.Add("@ClinicID", oICD9.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

        //                    oDB.Execute("BL_INSERT_TransactionLineCPT_ICD9", oDBParameters);
        //                }//End ICD9s

        //                //Transaction Lines-->Procedures-->Modifier
        //                for (int k = 0; k < oTransaction.Lines[i].Procedures[j].Modifiers.Count; k++)
        //                {
        //                    TransactionLineModifier oModifier = oTransaction.Lines[i].Procedures[j].Modifiers[k];

        //                    oDBParameters.Clear();
        //                    oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@LineNo", oModifier.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@ColumnNo", oModifier.ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@ModifierCode", oModifier.ModifierCode, ParameterDirection.Input, SqlDbType.VarChar);
        //                    oDBParameters.Add("@ModifierDescription", oModifier.ModifierDescription, ParameterDirection.Input, SqlDbType.VarChar);
        //                    oDBParameters.Add("@ClinicID", oModifier.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

        //                    oDB.Execute("BL_INSERT_TransactionLineCPT_Modifier", oDBParameters);
        //                }//End Modifier

        //                //Transaction Lines-->Procedures-->Payment
        //                oDBParameters.Clear();
        //                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDBParameters.Add("@LineNo", oTransaction.Lines[i].Procedures[j].Payment.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDBParameters.Add("@ColumnNo", oTransaction.Lines[i].Procedures[j].Payment.ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDBParameters.Add("@RateAmount", oTransaction.Lines[i].Procedures[j].Payment.RateAmount, ParameterDirection.Input, SqlDbType.Decimal);
        //                oDBParameters.Add("@UnitQuantity", oTransaction.Lines[i].Procedures[j].Payment.UnitQuantity, ParameterDirection.Input, SqlDbType.Decimal);
        //                oDBParameters.Add("@SubTotalAmount", oTransaction.Lines[i].Procedures[j].Payment.SubTotalAmount, ParameterDirection.Input, SqlDbType.Decimal);
        //                oDBParameters.Add("@TotalAmount", oTransaction.Lines[i].Procedures[j].Payment.TotalAmount, ParameterDirection.Input, SqlDbType.Decimal);
        //                oDBParameters.Add("@ClinicID", oTransaction.Lines[i].Procedures[j].Payment.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
        //                oDB.Execute("BL_INSERT_TransactionLine_Payment", oDBParameters);

        //                //Transaction Lines-->Procedures-->Payment-->Payments
        //                for (int k = 0; k < oTransaction.Lines[i].Procedures[j].Payment.Payments.Count; k++)
        //                {
        //                    TransactionLinePayment oPayment = oTransaction.Lines[i].Procedures[j].Payment.Payments[k];
        //                    oDBParameters.Clear();
        //                    oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@LineNo", oPayment.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@ColumnNo", oPayment.ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@PaymentMode", oPayment.PaymentMode, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@PaymentModeType", oPayment.PaymentModeType, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@PaymentPercentage", oPayment.PaymentPercentage, ParameterDirection.Input, SqlDbType.Decimal);
        //                    oDBParameters.Add("@PaymentAmount", oPayment.PaymentAmount, ParameterDirection.Input, SqlDbType.Decimal);
        //                    oDBParameters.Add("@PaymentNotes", oPayment.PaymentNotes, ParameterDirection.Input, SqlDbType.VarChar);
        //                    oDBParameters.Add("@ClinicID", oPayment.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDB.Execute("BL_INSERT_TransactionLine_Payment_Details", oDBParameters);
        //                }//END Payment-->Payments


        //                //Transaction Lines-->Procedures-->Payment-->Taxes
        //                for (int k = 0; k < oTransaction.Lines[i].Procedures[j].Payment.Taxes.Count; k++)
        //                {
        //                    TransactionLineTax oTax = oTransaction.Lines[i].Procedures[j].Payment.Taxes[k];
        //                    oDBParameters.Clear();
        //                    oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@LineNo", oTax.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@ColumnNo", oTax.ColumnNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@TaxID", oTax.TaxID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@TaxType", oTax.TaxType, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@TaxName", oTax.TaxName, ParameterDirection.Input, SqlDbType.VarChar);
        //                    oDBParameters.Add("@TaxPercentage", oTax.TaxPercentage, ParameterDirection.Input, SqlDbType.Decimal);
        //                    oDBParameters.Add("@TaxAmount", oTax.TaxAmount, ParameterDirection.Input, SqlDbType.Decimal);
        //                    oDBParameters.Add("@ClinicID", oTax.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDB.Execute("BL_INSERT_TransactionLine_Payment_Tax", oDBParameters);
        //                }//End Payment-->Taxes
        //                //End Procedures-->Payment

        //            }//End Procedure
        //        }//End Lines
        //        //End Transaction 

        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //        TransactionID = 0;
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //        TransactionID = 0;
        //    }
        //    finally
        //    {
        //    }
        //    return TransactionID;

        //}

        //#region Commented on 02/05/2008
        ////public Common.Transaction GetTransaction(Int64 TransactionID) 
        ////{
        ////    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        ////    gloDatabaseLayer.DBParameters oDBParameters= new gloDatabaseLayer.DBParameters();

        ////    DataTable dt= new DataTable();
        ////    Common.Transaction oTransaction = new Common.Transaction(_databaseconnectionstring);
        ////    try
        ////    {
        ////        // For Transaction Table.
        ////        oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////        oDB.Retrive("BL_SELECT_Transaction", oDBParameters, out dt);

        ////        if (dt != null)
        ////        {
        ////            if (dt.Rows.Count > 0)
        ////            {
        ////                //nTransactionID, nPatientID, nProviderID, sBillNumberPrfx, nBillNumberId, nBillDate, bIsLocked, nClinicID
        ////                oTransaction.TransactionID = Convert.ToInt64(TransactionID);
        ////                oTransaction.PatientID = Convert.ToInt64(dt.Rows[0]["PatientID"]);
        ////                oTransaction.ProviderID = Convert.ToInt64(dt.Rows[0]["ProviderID"]);
        ////                oTransaction.BillNoPrefix = Convert.ToString(dt.Rows[0]["BillNoPrifix"]);
        ////                oTransaction.BillNo = Convert.ToInt64(dt.Rows[0]["BillNo"]);
        ////                oTransaction.BillDate = Convert.ToInt64(dt.Rows[0]["BillDate"]);
        ////                oTransaction.IsBlock = false;
        ////                oTransaction.ClinicID = Convert.ToInt64(dt.Rows[0]["ClinicID"]);
        ////            }
        ////        }

        ////        // For Transaction Line Table.
        ////        dt = null;
        ////        dt = new DataTable();
        ////        oDBParameters.Clear();

        ////        oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////        oDB.Retrive("BL_SELECT_TransactionLines", oDBParameters, out dt);

        ////        if (dt != null)
        ////        {
        ////            if (dt.Rows.Count > 0)
        ////            {
        ////                for (int i = 0; i < dt.Rows.Count; i++)
        ////                {
        ////                    //nTransactionID, nLineNo, nStartDate, nEndDate, nProviderID, sCPTCode, sCPTDescription, nLocationID, dUnitQty, 
        ////                    //dRateAmount, dTotalAMount, nClinicID
        ////                    oTransaction.Lines[i].TransactionID = TransactionID;
        ////                    oTransaction.Lines[i].LineNo = Convert.ToInt64(dt.Rows[i]["nLineNo"]);
        ////                    oTransaction.Lines[i].StartDate = Convert.ToInt64(dt.Rows[i]["StartDate"]);
        ////                    oTransaction.Lines[i].EndDate = Convert.ToInt64(dt.Rows[i]["EndDate"]);
        ////                    oTransaction.Lines[i].ProviderID = Convert.ToInt64(dt.Rows[i]["ProviderID"]);
        ////                    oTransaction.Lines[i].CPTCode = Convert.ToString(dt.Rows[i]["CPTCode"]);
        ////                    oTransaction.Lines[i].CPTDescription = Convert.ToString(dt.Rows[i]["CPTDescription"]);
        ////                    oTransaction.Lines[i].Location = Convert.ToInt64(dt.Rows[i]["LocationID"]);
        ////                    oTransaction.Lines[i].UnitQuantity = Convert.ToInt64(dt.Rows[i]["UnitQty"]);
        ////                    oTransaction.Lines[i].RateAmount = Convert.ToInt64(dt.Rows[i]["RateAmount"]);
        ////                    oTransaction.Lines[i].TotalAmount = Convert.ToInt64(dt.Rows[i]["TotalAMount"]);
        ////                    oTransaction.Lines[i].ClinicID = Convert.ToInt64(dt.Rows[i]["ClinicID"]);

        ////                }

        ////            }
        ////        }


        ////        // For Transaction Modifiers Table.
        ////        for (int i = 0; i < oTransaction.Lines.Count; i++)
        ////        {

        ////            dt = null;
        ////            dt = new DataTable();
        ////            oDBParameters.Clear();

        ////            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////            oDB.Retrive("BL_SELECT_TransactionLineModifiers", oDBParameters, out dt);

        ////            if (dt != null)
        ////            {
        ////                if (dt.Rows.Count > 0)
        ////                {

        ////                    for (int j = 0; j < dt.Rows.Count; j++)
        ////                    {
        ////                        //nTransactionID, nLineNo, nColumnNo, sModifierCode, sModifierDescription, nClinicID

        ////                        oTransaction.Lines[i].Modifiers[j].LineNo = Convert.ToInt64(dt.Rows[j]["nLineNo"]);
        ////                        oTransaction.Lines[i].Modifiers[j].ColumnNo = Convert.ToInt64(dt.Rows[j]["ColumnNo"]);
        ////                        oTransaction.Lines[i].Modifiers[j].ModifierCode = Convert.ToString(dt.Rows[j]["ModifierCode"]);
        ////                        oTransaction.Lines[i].Modifiers[j].ModifierDescription = Convert.ToString(dt.Rows[j]["ModifierDescription"]);
        ////                        oTransaction.Lines[i].Modifiers[j].ClinicID = Convert.ToInt64(dt.Rows[j]["ClinicID"]);

        ////                    }
        ////                }
        ////            }




        ////            // For Transaction ICD9 Table.
        ////            dt = null;
        ////            dt = new DataTable();
        ////            oDBParameters.Clear();

        ////            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////            oDB.Retrive("BL_SELECT_TransactionLineICD9s", oDBParameters, out dt);

        ////            if (dt != null)
        ////            {
        ////                if (dt.Rows.Count > 0)
        ////                {
        ////                    for (int j = 0; j < dt.Rows.Count; j++)
        ////                    {
        ////                        //nTransactionID, nLineNo, nColumnNo, sICD9Code, sICD9Description, nClinicID

        ////                        oTransaction.Lines[i].ICD9s[j].LineNo = Convert.ToInt64(dt.Rows[j]["nLineNo"]);
        ////                        oTransaction.Lines[i].ICD9s[j].ColumnNo = Convert.ToInt64(dt.Rows[j]["ColumnNo"]);
        ////                        oTransaction.Lines[i].ICD9s[j].ICD9Code = Convert.ToString(dt.Rows[j]["ICD9Code"]);
        ////                        oTransaction.Lines[i].ICD9s[j].ICD9Description = Convert.ToString(dt.Rows[j]["ICD9Description"]);
        ////                        oTransaction.Lines[i].ICD9s[j].ClinicID = Convert.ToInt64(dt.Rows[j]["nClinicID"]);
        ////                    }

        ////                }
        ////            }



        ////            // For Transaction TAX Table.
        ////            dt = null;
        ////            dt = new DataTable();
        ////            oDBParameters.Clear();

        ////            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////            oDB.Retrive("BL_SELECT_TransactionTaxes", oDBParameters, out dt);

        ////            if (dt != null)
        ////            {
        ////                if (dt.Rows.Count > 0)
        ////                {
        ////                    for (int j = 0; j < dt.Rows.Count; j++)
        ////                    {
        ////                        //nTransactionID, nLineNo, nTaxID, sTaxName, dTaxPercentage, dTaxAmount, nClinicID

        ////                        oTransaction.Lines[i].Taxs[j].LineNo = Convert.ToInt64(dt.Rows[j]["nLineNo"]);
        ////                        oTransaction.Lines[i].Taxs[j].TaxID = Convert.ToInt64(dt.Rows[j]["TaxID"]);
        ////                        oTransaction.Lines[i].Taxs[j].TaxName = Convert.ToString(dt.Rows[j]["TaxName"]);
        ////                        oTransaction.Lines[i].Taxs[j].TaxPercentage = Convert.ToDecimal(dt.Rows[j]["TaxPercentage"]);
        ////                        oTransaction.Lines[i].Taxs[j].TaxAmount = Convert.ToDecimal(dt.Rows[j]["TaxAmount"]);
        ////                        oTransaction.Lines[i].Taxs[j].ClinicID = Convert.ToInt64(dt.Rows[j]["nClinicID"]);
        ////                    }

        ////                }
        ////            }



        ////            // For Transaction Payments Table.
        ////            dt = null;
        ////            dt = new DataTable();
        ////            oDBParameters.Clear();

        ////            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        ////            oDB.Retrive("BL_SELECT_TransactionPayments", oDBParameters, out dt);

        ////            if (dt != null)
        ////            {
        ////                if (dt.Rows.Count > 0)
        ////                {
        ////                    for (int j = 0; j < dt.Rows.Count; j++)
        ////                    {
        ////                        //nTransactionID, nLineNo, nPaymentTypeID, nPaymentID, dPaymentPercentage, dPaymentAmount, sPaymentNotes, nClinicID                           

        ////                        oTransaction.Lines[i].Payments[j].LineNo = Convert.ToInt64(dt.Rows[j]["nLineNo"]);
        ////                        oTransaction.Lines[i].Payments[j].PaymentTypeID = Convert.ToInt64(dt.Rows[j]["PaymentTypeID"]);
        ////                        oTransaction.Lines[i].Payments[j].PaymentID = Convert.ToInt64(dt.Rows[j]["PaymentID"]);
        ////                        oTransaction.Lines[i].Payments[j].PaymentPercentage = Convert.ToDecimal(dt.Rows[j]["PaymentPercentage"]);
        ////                        oTransaction.Lines[i].Payments[j].PaymentAmount = Convert.ToDecimal(dt.Rows[j]["PaymentAmount"]);
        ////                        oTransaction.Lines[i].Payments[j].PaymentNotes = Convert.ToString(dt.Rows[j]["PaymentNotes"]);
        ////                        oTransaction.Lines[i].Payments[j].ClinicID = Convert.ToInt64(dt.Rows[j]["nClinicID"]);

        ////                    }

        ////                }
        ////            }

        ////        }
        ////    }
        ////    catch (Exception ex)
        ////    {

        ////        throw (ex);

        ////    }
        ////    finally 
        ////    {
        ////        dt.Dispose(); 

        ////        oDBParameters.Dispose();

        ////        oDB.Dispose();

        ////    }


        ////    return oTransaction;
        ////}
        //#endregion

        //public Transaction GetTransaction(Int64 TransactionID)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

        //    DataTable dtTrans = new DataTable();
        //    Transaction oTransaction = new Transaction(_databaseconnectionstring);
        //    try
        //    {
        //        oDB.Connect(false);
        //        // For Transaction Table.
        //        oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDB.Retrive("BL_SELECT_Transaction", oDBParameters, out dtTrans);

        //        if (dtTrans != null)
        //        {
        //            if (dtTrans.Rows.Count > 0)
        //            {
        //                //nTransactionID, nTransactionType, nVisitID, nPatientID, nProviderID, sBillNumberPrfx, nBillNumberId, nBillDate, bIsLocked, nClinicID                       
        //                oTransaction.TransactionID = TransactionID;
        //                oTransaction.BillDate = Convert.ToInt64(dtTrans.Rows[0]["nBillDate"]);
        //                oTransaction.BillNo = Convert.ToInt64(dtTrans.Rows[0]["nBillNumberId"]);
        //                oTransaction.BillNoPrefix = Convert.ToString(dtTrans.Rows[0]["sBillNumberPrfx"]);
        //                oTransaction.ClinicID = Convert.ToInt64(dtTrans.Rows[0]["nClinicID"]);
        //                oTransaction.IsBlock = false; ;
        //                oTransaction.PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
        //                oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nProviderID"]);
        //                oTransaction.TransactionMode = (TransactionType)Convert.ToInt32(dtTrans.Rows[0]["nTransactionType"]);
        //                oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
        //            }
        //        }
        //        dtTrans.Dispose();

        //        //Transaction -->Lines
        //        DataTable dtLines = new DataTable();
        //        oDBParameters.Clear();
        //        oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //        oDB.Retrive("BL_SELECT_TransactionLines", oDBParameters, out dtLines);

        //        if (dtLines != null)
        //        {
        //            if (dtLines.Rows.Count > 0)
        //            {
        //                for (int i = 0; i < dtLines.Rows.Count; i++)
        //                {
        //                    //nTransactionID, nLineNo, nStartDate, nEndDate, nBillingProviderID, nLocationID, nIsSendToBill, nIsBilled, nClinicID
        //                    TransactionLine oLine = new TransactionLine();
        //                    oLine.BillingProviderID = Convert.ToInt64(dtLines.Rows[i]["nBillingProviderID"]);
        //                    oLine.ClinicID = Convert.ToInt64(dtLines.Rows[i]["nClinicID"]);
        //                    oLine.EndDate = Convert.ToInt64(dtLines.Rows[i]["nEndDate"]);
        //                    oLine.LineNo = Convert.ToInt64(dtLines.Rows[i]["nLineNo"]);
        //                    oLine.Location = Convert.ToInt64(dtLines.Rows[i]["nLocationID"]);
        //                    oLine.StartDate = Convert.ToInt64(dtLines.Rows[i]["nStartDate"]);
        //                    oLine.TransactionID = TransactionID;



        //                    //Lines-->Procedure
        //                    DataTable dtProc = new DataTable();
        //                    oDBParameters.Clear();
        //                    oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDBParameters.Add("@LineNo", oLine.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                    oDB.Retrive("BL_SELECT_TransactionLinesCPT", oDBParameters, out dtProc);

        //                    //nTransactionID, nLineNo, nColumnNo, sProcedureCode, sProcedureDescription, nClinicID
        //                    if (dtProc != null)
        //                    {
        //                        for (int j = 0; j < dtProc.Rows.Count; j++)
        //                        {
        //                            TransactionLineProcedure oProcedure = new TransactionLineProcedure();
        //                            oProcedure.ClinicID = Convert.ToInt64(dtProc.Rows[j]["nClinicID"]);
        //                            oProcedure.ColumnNo = Convert.ToInt64(dtProc.Rows[j]["nColumnNo"]);
        //                            oProcedure.LineNo = Convert.ToInt64(dtProc.Rows[j]["nLineNo"]);
        //                            oProcedure.ProcedureCode = Convert.ToString(dtProc.Rows[j]["sProcedureCode"]);
        //                            oProcedure.ProcedureDescription = Convert.ToString(dtProc.Rows[j]["sProcedureDescription"]);
        //                            oProcedure.TransactionID = TransactionID;


        //                            //Lines-->Procedure-->ICD9s
        //                            DataTable dtICD9 = new DataTable();
        //                            oDBParameters.Clear();
        //                            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDBParameters.Add("@LineNo", oProcedure.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDB.Retrive("BL_SELECT_TransactionLinesCPT_ICD9", oDBParameters, out dtICD9);
        //                            if (dtICD9 != null)
        //                            {
        //                                //nTransactionID, nLineNo, nColumnNo, sICD9Code, sICD9Description, nClinicID
        //                                for (int k = 0; k < dtICD9.Rows.Count; k++)
        //                                {
        //                                    TransactionLineICD9 oICD9 = new TransactionLineICD9();
        //                                    oICD9.ClinicID = Convert.ToInt64(dtICD9.Rows[k]["nClinicID"]);
        //                                    oICD9.ColumnNo = Convert.ToInt64(dtICD9.Rows[k]["nColumnNo"]);
        //                                    oICD9.ICD9Code = Convert.ToString(dtICD9.Rows[k]["sICD9Code"]);
        //                                    oICD9.ICD9Description = Convert.ToString(dtICD9.Rows[k]["sICD9Description"]);
        //                                    oICD9.LineNo = Convert.ToInt64(dtICD9.Rows[k]["nLineNo"]);
        //                                    oProcedure.ICD9s.Add(oICD9);

        //                                }

        //                            }//if (dtICD9 != null)


        //                            //Lines-->Procedure-->Modifier
        //                            DataTable dtMod = new DataTable();
        //                            oDBParameters.Clear();
        //                            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDBParameters.Add("@LineNo", oProcedure.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDB.Retrive("BL_SELECT_TransactionLinesCPT_Modifier", oDBParameters, out dtMod);
        //                            if (dtMod != null)
        //                            {
        //                                //nTransactionID, nLineNo, nColumnNo, sModifierCode, sModifierDescription, nClinicID
        //                                for (int k = 0; k < dtMod.Rows.Count; k++)
        //                                {
        //                                    TransactionLineModifier oModifier = new TransactionLineModifier();
        //                                    oModifier.ClinicID = Convert.ToInt64(dtMod.Rows[k]["nClinicID"]);
        //                                    oModifier.ColumnNo = Convert.ToInt64(dtMod.Rows[k]["nColumnNo"]);
        //                                    oModifier.ModifierCode = Convert.ToString(dtMod.Rows[k]["sModifierCode"]);
        //                                    oModifier.ModifierDescription = Convert.ToString(dtMod.Rows[k]["sModifierDescription"]);
        //                                    oModifier.LineNo = Convert.ToInt64(dtMod.Rows[k]["nLineNo"]);
        //                                    oProcedure.Modifiers.Add(oModifier);

        //                                }

        //                            }//if (dtMod != null)


        //                            //Lines-->Procedure-->Payment
        //                            DataTable dtPay = new DataTable();
        //                            oDBParameters.Clear();
        //                            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDBParameters.Add("@LineNo", oProcedure.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDB.Retrive("[BL_SELECT_TransactionLines_Payment]", oDBParameters, out dtPay);
        //                            if (dtPay != null)
        //                            {
        //                                if (dtPay.Rows.Count > 0)
        //                                {
        //                                    //nTransactionID, nLineNo, nColumnNo, dRateAmount, dUnitQuantity, dSubTotalAmount, dTotalAmount, nClinicID
        //                                    oProcedure.Payment.ClinicID = Convert.ToInt64(dtPay.Rows[0]["nClinicID"]);
        //                                    oProcedure.Payment.ColumnNo = Convert.ToInt64(dtPay.Rows[0]["nColumnNo"]);
        //                                    oProcedure.Payment.LineNo = Convert.ToInt64(dtPay.Rows[0]["nLineNo"]); ;
        //                                    oProcedure.Payment.RateAmount = Convert.ToInt64(dtPay.Rows[0]["dRateAmount"]);
        //                                    oProcedure.Payment.SubTotalAmount = Convert.ToInt64(dtPay.Rows[0]["dSubTotalAmount"]);
        //                                    oProcedure.Payment.TotalAmount = Convert.ToInt64(dtPay.Rows[0]["dTotalAmount"]);
        //                                    oProcedure.Payment.TransactionID = TransactionID;
        //                                    oProcedure.Payment.UnitQuantity = Convert.ToInt64(dtPay.Rows[0]["dUnitQuantity"]);
        //                                }

        //                            }//if (dtPay != null)


        //                            //Lines-->Procedure-->Payment-->Payments
        //                            DataTable dtPayments = new DataTable();
        //                            oDBParameters.Clear();
        //                            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDBParameters.Add("@LineNo", oProcedure.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDB.Retrive("BL_SELECT_TransactionLines_Payment_Details", oDBParameters, out dtPayments);
        //                            if (dtPayments != null)
        //                            {
        //                                //nTransactionID, nLineNo, nColumnNo, dPaymentMode, dPaymentModeType, dPaymentPercentage, dPaymentAmount, sPaymentNotes, nClinicID
        //                                for (int k = 0; k < dtPayments.Rows.Count; k++)
        //                                {
        //                                    TransactionLinePayment oLinePayment = new TransactionLinePayment();

        //                                    oLinePayment.ClinicID = Convert.ToInt64(dtPayments.Rows[k]["nClinicID"]);
        //                                    oLinePayment.ColumnNo = Convert.ToInt64(dtPayments.Rows[k]["nColumnNo"]);
        //                                    oLinePayment.LineNo = Convert.ToInt64(dtPayments.Rows[k]["nLineNo"]);
        //                                    oLinePayment.PaymentAmount = Convert.ToDecimal(dtPayments.Rows[k]["dPaymentAmount"]);
        //                                    oLinePayment.PaymentMode = (PaymentMode)Convert.ToInt32(dtPayments.Rows[k]["dPaymentMode"]);
        //                                    oLinePayment.PaymentModeType = (PaymentModeType)Convert.ToInt32(dtPayments.Rows[k]["dPaymentModeType"]);
        //                                    oLinePayment.PaymentNotes = Convert.ToString(dtPayments.Rows[k]["sPaymentNotes"]);
        //                                    oLinePayment.PaymentPercentage = Convert.ToDecimal(dtPayments.Rows[k]["dPaymentPercentage"]);
        //                                    oLinePayment.TransactionID = TransactionID;
        //                                    oProcedure.Payment.Payments.Add(oLinePayment);

        //                                }

        //                            }//if (dtPayments != null)




        //                            //Lines-->Procedure-->Payment-->Taxes
        //                            DataTable dtTax = new DataTable();
        //                            oDBParameters.Clear();
        //                            oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDBParameters.Add("@LineNo", oProcedure.LineNo, ParameterDirection.Input, SqlDbType.BigInt);
        //                            oDB.Retrive("BL_SELECT_TransactionLines_Payment_Taxes", oDBParameters, out dtTax);
        //                            if (dtTax != null)
        //                            {
        //                                //nTransactionID, nLineNo, nColumnNo, dTaxID, nTaxType, dTaxName, dTaxPercentage, dTaxAmount, nClinicID
        //                                for (int k = 0; k < dtTax.Rows.Count; k++)
        //                                {
        //                                    TransactionLineTax oTax = new TransactionLineTax();
        //                                    oTax.ClinicID = Convert.ToInt64(dtTax.Rows[k]["nClinicID"]);
        //                                    oTax.ColumnNo = Convert.ToInt64(dtTax.Rows[k]["nColumnNo"]);
        //                                    oTax.LineNo = Convert.ToInt64(dtTax.Rows[k]["nLineNo"]);
        //                                    oTax.TaxAmount = Convert.ToDecimal(dtTax.Rows[k]["dTaxAmount"]);
        //                                    oTax.TaxID = Convert.ToInt64(dtTax.Rows[k]["dTaxID"]);
        //                                    oTax.TaxName = Convert.ToString(dtTax.Rows[k]["dTaxName"]);
        //                                    oTax.TaxPercentage = Convert.ToDecimal(dtTax.Rows[k]["dTaxPercentage"]);
        //                                    oTax.TaxType = (TaxType)Convert.ToInt32(dtTax.Rows[k]["nTaxType"]);
        //                                    oProcedure.Payment.Taxes.Add(oTax);
        //                                }

        //                            }//if (dtTax != null)

        //                            oLine.Procedures.Add(oProcedure);
        //                        }//End Proc                                 
        //                    }// if (dtProc != null)
        //                    oTransaction.Lines.Add(oLine);
        //                }//End Lines
        //            }//if dtLines.Rows.Count > 0
        //        }//if (dtLines != null)

        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    finally
        //    {
        //        dtTrans.Dispose();

        //        oDBParameters.Dispose();

        //        oDB.Dispose();

        //    }
        //    return oTransaction;
        //}

        //public DataTable GetTransactionIDs(Int64 PatientID)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    DataTable dt = new DataTable();
        //    try
        //    {
        //        oDB.Connect(false);
        //        string sqlQuery = "SELECT DISTINCT BL_Transaction.nTransactionID FROM BL_Transaction INNER JOIN BL_TransactionLines " +
        //                          "ON BL_Transaction.nTransactionID = BL_TransactionLines.nTransactionID " +
        //                          "WHERE BL_Transaction.nPatientID = " + PatientID + " AND BL_TransactionLines.nIsSendToBill = 0 " +
        //                          "ORDER BY BL_Transaction.nTransactionID";
        //        oDB.Retrive_Query(sqlQuery, out dt);
        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    finally
        //    {
        //        oDB.Dispose();
        //    }
        //    return dt;
        //}

        //public Boolean Delete(Int64 TransactionID)
        //{
        //    Boolean _result =false ;
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    oDB.Connect(false);
        //    try
        //    {
        //        oDB.Execute_Query("Delete from BL_Transaction where nTransactionID= " + TransactionID);
        //        oDB.Execute_Query("Delete from BL_TransactionLines where nTransactionID= " + TransactionID);
        //        oDB.Execute_Query("Delete from BL_TransactionLineModifiers where nTransactionID= " + TransactionID);
        //        oDB.Execute_Query("Delete from BL_TransactionLineICD9s where nTransactionID= " + TransactionID);
        //        oDB.Execute_Query("Delete from BL_TransactionTaxes where nTransactionID= " + TransactionID);
        //        oDB.Execute_Query("Delete from BL_TransactionPayments where nTransactionID= " + TransactionID);

        //        _result = true;
        //        oDB.Disconnect();
        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    return _result;
        //}

        #endregion "Insert, Delete & GetTransaction"

        #region "Show UI"
        public void ShowBillingBookView(System.Windows.Forms.Form oParentWindow)
        {
            //frmViewBillingBook oViewBillingBook = new frmViewBillingBook();
            frmViewBillingBook oViewBillingBook = frmViewBillingBook.GetInstance();
            oViewBillingBook.DatabaseConnectionString = _databaseconnectionstring;
            oViewBillingBook.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            oViewBillingBook.MdiParent = oParentWindow;
            //Code Start added by kanchan on 20120102 for gloCommunity integration
            //calling gloCommunityViewDataform for BillingConfig Download.
            oViewBillingBook.EvntgloCommunityHandler += getBillingHandler;
            //end
              oViewBillingBook.gstrSMDBDatabaseName = gstrSMDBDatabaseName;
            oViewBillingBook.gstrSMDBServerName = gstrSMDBServerName;
            oViewBillingBook.gstrSMDBUserID = gstrSMDBUserID;
            oViewBillingBook.gstrSMDBPassWord = gstrSMDBPassWord;
            oViewBillingBook.gblnSMDBAuthen = gblnSMDBAuthen; 
            oViewBillingBook.Show();
        }

        //Code Start added by kanchan on 20120102 for gloCommunity integration
        private void getBillingHandler()
        {
            if (EvntBillingHandler != null)
                EvntBillingHandler();
        }


     

        public void ShowBillingPayment(Int64 PatientID, Int64 PaymentTransactionID, Int64 PaymentClaimNo, System.Windows.Forms.Form oParentWindow)
        {
            //frmBillingPayment ofrmBillingPayment = new frmBillingPayment(_databaseconnectionstring, PatientID,PaymentTransactionID, PaymentClaimNo);
            //frmBillingPayment ofrmBillingPayment = frmBillingPayment.GetInstance(_databaseconnectionstring, PatientID, PaymentTransactionID, PaymentClaimNo);
            //ofrmBillingPayment.WindowState = FormWindowState.Maximized;
            //ofrmBillingPayment.MdiParent = oParentWindow;
            //ofrmBillingPayment.Show();
        }

        public void ShowBillingRemmitance(Int64 PatientID, Int64 PaymentTransactionID, Int64 PaymentClaimNo, System.Windows.Forms.Form oParentWindow)
        {
            //frmBillingPayment ofrmBillingPayment = new frmBillingPayment(_databaseconnectionstring, PatientID,PaymentTransactionID, PaymentClaimNo);
            //frmBillingPayment ofrmBillingPayment = frmBillingPayment.GetInstance(_databaseconnectionstring, PatientID, 0, 0);
            //ofrmBillingPayment.WindowState = FormWindowState.Maximized;
            //ofrmBillingPayment.MdiParent = oParentWindow;
            //ofrmBillingPayment.IsOpenForRemittance = true;
            //ofrmBillingPayment.Show();
        }

        public void ShowPatientBalance(Int64 PatientID, System.Windows.Forms.Form oParentWindow)
        {
            //frmRpt_PatientBalance ofrmPatientBalance = new frmRpt_PatientBalance(_databaseconnectionstring, PatientID);
            //ofrmPatientBalance.MdiParent = oParentWindow;
            //ofrmPatientBalance.WindowState = FormWindowState.Maximized;
            //ofrmPatientBalance.Show();
        }

        //public void ShowPatientLedger(Int64 PatientID, System.Windows.Forms.Form oParentWindow)
        //{
        //    //frmPatientLedger ofrmPatientLedger = new frmPatientLedger(_databaseconnectionstring);
        //    //ofrmPatientLedger.MdiParent = oParentWindow;
        //    //ofrmPatientLedger.WindowState = FormWindowState.Maximized;
        //    //ofrmPatientLedger.Show();
        //    frmRpt_PatientLedger ofrmPatientLedger = new frmRpt_PatientLedger(PatientID);
        //    ofrmPatientLedger.MdiParent = oParentWindow;
        //    ofrmPatientLedger.WindowState = FormWindowState.Maximized;
        //    ofrmPatientLedger.Show();
        //}

        public void ShowAssociation(System.Windows.Forms.Form oParentWindow1)
        {
            frmSetupAssociation oAssociation = new frmSetupAssociation();
            oAssociation.DatabaseConnectionString = _databaseconnectionstring;
            oAssociation.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            oAssociation.MdiParent = oParentWindow1;
            oAssociation.Show();
        }

        public void ShowSetupBill(Int64 nPatientID, System.Windows.Forms.Form oParentWindow2)
        {
            //frmSetupBill oSetupBill = new frmSetupBill(nPatientID ,_databaseconnectionstring );
            ////oSetupBill.DatabaseConnectionString = _databaseconnectionstring;
            //oSetupBill.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            //oSetupBill.MdiParent = oParentWindow2;
            //oSetupBill.Show();

            //frmSetupCaseClaim oSetupBill = new frmSetupCaseClaim();//nPatientID, _databaseconnectionstring);
            ////oSetupBill.DatabaseConnectionString = _databaseconnectionstring;
            //oSetupBill.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            //oSetupBill.MdiParent = oParentWindow2;
            //oSetupBill.Show();

        }

        public void ShowBillingTransaction(Int64 nPatientID, System.Windows.Forms.Form oParentWindow2)
        {
            frmBillingTransaction ofrmBillingTransaction = frmBillingTransaction.GetInstance(nPatientID);
            ofrmBillingTransaction.MdiParent = oParentWindow2;
            ofrmBillingTransaction.WindowState = FormWindowState.Maximized;
            ofrmBillingTransaction.Show();
        }

        //Added By Mukesh Patel To Open Latest Claims
        public Int64 GetLastTransactionID(Int64 nTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            string _sqlQuery = string.Empty;
            DataTable _dtClaimDetails = null;
            //DataTable _dtClaims = null;
            Int64 _nTransactionID = 0;
            //Int64 ClaimNumber = 0;
            //String SubClaimNumber = String.Empty;
            try
            {
                oDB.Connect(false);

                //_sqlQuery = "Select nClaimno,sMainClaimNo,nSubClaimNo from BL_Transaction_Claim_MST WITH (NOLOCK) where nTransactionID = " + nTransactionID.ToString();
                //oDB.Retrive_Query(_sqlQuery, out _dtClaims);
                //if (_dtClaims != null && _dtClaims.Rows.Count > 0)
                //{
                //    ClaimNumber = Convert.ToInt64(_dtClaims.Rows[0]["nClaimno"]);
                //    if (Convert.ToString(_dtClaims.Rows[0]["nSubClaimNo"]).Contains("-"))
                //        SubClaimNumber = Convert.ToString(_dtClaims.Rows[0]["sMainClaimNo"]);
                //    else
                //        SubClaimNumber = Convert.ToString(_dtClaims.Rows[0]["nSubClaimNo"]);


                oParameters.Clear();
                //oParameters.Add("@nClaimno", ClaimNumber, ParameterDirection.Input, SqlDbType.BigInt);
                //oParameters.Add("@sSubClaimno", SubClaimNumber, ParameterDirection.Input, SqlDbType.VarChar, 50);
                oParameters.Add("@nTransactionID", nTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_Select_SplitClaims", oParameters, out _dtClaimDetails);
                oDB.Disconnect();

                if (_dtClaimDetails != null && _dtClaimDetails.Rows.Count > 0)
                {
                    _nTransactionID = Convert.ToInt64(_dtClaimDetails.Rows[0]["nTransactionID"]);
                }
                //}
                //_dtClaims = null;
                if (_dtClaimDetails != null) { _dtClaimDetails.Dispose(); _dtClaimDetails = null; }
                if (_nTransactionID == 0)
                { _nTransactionID = nTransactionID; }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                _nTransactionID = nTransactionID;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Clear(); oParameters.Dispose(); oParameters = null; }
                if (_dtClaimDetails != null) { _dtClaimDetails.Dispose(); }
            }
            return _nTransactionID;
        }


        /// <summary>
        /// Returns True if Charges are modified
        /// </summary>
        /// <param name="nPatientID"></param>
        /// <param name="nTransactionID"></param>
        /// <returns></returns>
        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    //Added By Mukesh Patel To Open Latest Claims
                    nTransactionID = GetLastTransactionID(nTransactionID);

                    //frmBillingModifyCharges ofrmBillingModifyCharges = frmBillingModifyCharges.GetInstance(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    //ofrmBillingModifyCharges.MdiParent = oParentWindow2;
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.ShowDialog(ofrmBillingModifyCharges.Parent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;

        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID,Form oParent)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    //Added By Mukesh Patel To Open Latest Claims
                    nTransactionID = GetLastTransactionID(nTransactionID);

                    //frmBillingModifyCharges ofrmBillingModifyCharges = frmBillingModifyCharges.GetInstance(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    //ofrmBillingModifyCharges.MdiParent = oParentWindow2;
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.ShowDialog(oParent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;

        }
        public Boolean ShowModifyChargesFromPatientPayment(Int64 nPatientID, Int64 nTransactionID, bool _isRevisedPayment,Form oParent)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    //Added By Mukesh Patel To Open Latest Claims
                    nTransactionID = GetLastTransactionID(nTransactionID);

                    //frmBillingModifyCharges ofrmBillingModifyCharges = frmBillingModifyCharges.GetInstance(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.ShowDialog(oParent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;

        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID,String sCallingContainerName)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    //Added By Mukesh Patel To Open Latest Claims
                    nTransactionID = GetLastTransactionID(nTransactionID);

                    //frmBillingModifyCharges ofrmBillingModifyCharges = frmBillingModifyCharges.GetInstance(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    //ofrmBillingModifyCharges.MdiParent = oParentWindow2;
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.CallingContainer = sCallingContainerName;
                    ofrmBillingModifyCharges.ShowDialog(ofrmBillingModifyCharges.Parent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();
                    

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;

        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, String sCallingContainerName, Form oParent)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    nTransactionID = GetLastTransactionID(nTransactionID);
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.CallingContainer = sCallingContainerName;
                    ofrmBillingModifyCharges.ShowDialog(oParent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();


                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;

        }

        /// <summary>
        /// Returns True if Charges are modified
        /// </summary>
        /// <param name="nPatientID"></param>
        /// <param name="nTransactionID"></param>
        /// <returns></returns>
        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, bool _Isvoid)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    //Added By Mukesh Patel To Open Latest Claims
                    nTransactionID = GetLastTransactionID(nTransactionID);

                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    //ofrmBillingModifyCharges.MdiParent = oParentWindow2;
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.IsClaimVoided = _Isvoid;
                    ofrmBillingModifyCharges.ShowDialog(ofrmBillingModifyCharges.Parent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;
        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, bool _Isvoid,Form oParent)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    nTransactionID = GetLastTransactionID(nTransactionID);

                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.IsClaimVoided = _Isvoid;
                    ofrmBillingModifyCharges.ShowDialog(oParent);

                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;
        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, bool _Isvoid, bool _isRevisedPayment)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    nTransactionID = GetLastTransactionID(nTransactionID);
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.IsClaimVoided = _Isvoid;
                    ofrmBillingModifyCharges.ShowDialog(ofrmBillingModifyCharges.Parent);
                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;
        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, bool _Isvoid, bool _isRevisedPayment,Form oParent)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    nTransactionID = GetLastTransactionID(nTransactionID);
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.IsClaimVoided = _Isvoid;
                    ofrmBillingModifyCharges.ShowDialog(oParent);
                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;
        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, bool _Isvoid, bool _isRevisedPayment, String sCallingContainerName)
        {
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    nTransactionID = GetLastTransactionID(nTransactionID);
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.IsClaimVoided = _Isvoid;
                    ofrmBillingModifyCharges.CallingContainer = sCallingContainerName;
                    ofrmBillingModifyCharges.ShowDialog(ofrmBillingModifyCharges.Parent);
                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();
                    
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;
        }

        public Boolean ShowModifyCharges(Int64 nPatientID, Int64 nTransactionID, bool _Isvoid, bool _isRevisedPayment, String sCallingContainerName,Form oParent)
        {   
            gloSecurity.gloSecurity oSecurity = new gloSecurity.gloSecurity(_databaseconnectionstring);
            bool _IsModified = false;
            try
            {
                if (oSecurity.isPatientLock(nPatientID, true) == false)
                {
                    nTransactionID = GetLastTransactionID(nTransactionID);                 
                    frmBillingModifyCharges ofrmBillingModifyCharges = new frmBillingModifyCharges(nPatientID, nTransactionID, false, _databaseconnectionstring, _emrdatabaseconnectionstring);
                    ofrmBillingModifyCharges.WindowState = FormWindowState.Maximized;
                    ofrmBillingModifyCharges.IsClaimVoided = _Isvoid;
                    ofrmBillingModifyCharges.CallingContainer = sCallingContainerName;
                    ofrmBillingModifyCharges.ShowDialog(oParent);
                    _IsModified = ofrmBillingModifyCharges.IsModified;
                    ofrmBillingModifyCharges.Dispose();

                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oSecurity.Dispose();
            }
            return _IsModified;
            
        }

        //public void ShowBillingTransaction_New(Int64 nPatientID, System.Windows.Forms.Form oParentWindow2)
        //{
        //    frmBillingTransaction_New ofrmBillingTransaction = frmBillingTransaction_New.GetInstance(nPatientID, 0, true, _databaseconnectionstring, _emrdatabaseconnectionstring);
        //    ofrmBillingTransaction.MdiParent = oParentWindow2;
        //    ofrmBillingTransaction.WindowState = FormWindowState.Maximized;
        //    ofrmBillingTransaction.Show();
        //}

        //public void ShowViewBilling(Int64 nPatientID, System.Windows.Forms.Form oParentWindow2)
        //{
        //    ////frmViewBilling oViewBill = new frmViewBilling(nPatientID, _databaseconnectionstring);
        //    //frmBillingCase oViewBill = new frmBillingCase(_databaseconnectionstring);
        //    ////oSetupBill.DatabaseConnectionString = _databaseconnectionstring;
        //    ////oViewBill.MdiParent = oParentWindow2;
        //    ////oViewBill.WindowState = System.Windows.Forms.FormWindowState.Maximized;
        //    //oViewBill.StartPosition = FormStartPosition.CenterScreen;
        //    //oViewBill.ShowDialog();

        //    frmViewBillingTransaction oViewBillingCase = new frmViewBillingTransaction(nPatientID, _databaseconnectionstring, _emrdatabaseconnectionstring);
        //    oViewBillingCase.MdiParent = oParentWindow2;
        //    oViewBillingCase.WindowState = FormWindowState.Maximized;
        //    oViewBillingCase.Show();
        //}

        public void ShowViewChargesNBatch(Int64 nPatientID, System.Windows.Forms.Form oParentWindow2)
        {
            //frmBillingBatch oViewBilling = new frmBillingBatch(_databaseconnectionstring);//nPatientID, _databaseconnectionstring, _emrdatabaseconnectionstring);
            frmBillingBatch_New oViewBilling = frmBillingBatch_New.GetInstance();
            oViewBilling.MdiParent = oParentWindow2;
            oViewBilling.WindowState = FormWindowState.Maximized;
            oViewBilling.Show();
        }

        //public void ShowReportClaimStatus(System.Windows.Forms.Form oParentWindow)
        //{
        //    frmRpt_ClaimStatusReport oRpt_ClaimStatus = new frmRpt_ClaimStatusReport(_databaseconnectionstring);
        //    //frmRpt_ClaimStatus oRpt_ClaimStatus = new frmRpt_ClaimStatus();
        //    //oRpt_ClaimStatus.DatabaseConnectionString = _databaseconnectionstring;
        //    oRpt_ClaimStatus.MdiParent = oParentWindow;
        //    oRpt_ClaimStatus.WindowState = System.Windows.Forms.FormWindowState.Maximized;
        //    oRpt_ClaimStatus.Show();
        //}

        public void ShowReportClaimStatusNew(System.Windows.Forms.Form oParentWindow)
        {
            //frmRpt_ClaimStatusReportNew oRpt_ClaimStatus = new frmRpt_ClaimStatusReportNew(_databaseconnectionstring);
            //oRpt_ClaimStatus.MdiParent = oParentWindow;
            //oRpt_ClaimStatus.WindowState = System.Windows.Forms.FormWindowState.Maximized;
            //oRpt_ClaimStatus.Show();
        }

        public void ShowReportListofClaimsReviwed(System.Windows.Forms.Form oParentWindow)
        {
            //frmRpt_ListofClaimsReviewed oRpt_ListofClaimsReviewed = new frmRpt_ListofClaimsReviewed();
            //oRpt_ListofClaimsReviewed.MdiParent = oParentWindow;
            //oRpt_ListofClaimsReviewed.Show();
            //oRpt_ListofClaimsReviewed.WindowState = System.Windows.Forms.FormWindowState.Maximized;
        }

        //public void ShowReportListofReports(System.Windows.Forms.Form oParentWindow)
        //{
        //    frmRpt_ListofClaimsReviewed ofrmRpt_ListofReports = new frmRpt_ListofClaimsReviewed();
        //    ofrmRpt_ListofReports.WindowState = System.Windows.Forms.FormWindowState.Maximized;
        //    ofrmRpt_ListofReports.MdiParent = oParentWindow;
        //    ofrmRpt_ListofReports.Show();
        //}
        #endregion

        #region " Code moved to ClaimManager"

        #region "Status"

        public Int64 UpdateTransactionStatus(Int64 patientid, Int64 statusid, Int64 batchid, string batchname, Int64 batchdate, Int32 batchtype, Int64 batchno, Int64 transactionid, Int64 claimno, Int64 transactionlinefrom, Int64 transactionlineto, TransactionStatus status, Int64 statusdate, Int64 statustime, string statusnote, Int64 clinicid, Int64 sendtoinsuranceid, gloPatient.TypeOfBilling sendclaimtype)
        {
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
          //  Int64 _PrefixID = 123;
            Int64 _returnid = 0;
            try
            {
                oDB.Connect(false);

                oDBParameters.Add("@nStatusID", statusid, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchID", batchid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sBatchName", batchname, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nBatchDate", batchdate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchType", batchtype, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nBatchNo", batchno, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", transactionid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClaimNo", claimno, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineFrom", transactionlinefrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineTo", transactionlineto, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nStatus", status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nStatusDate", statusdate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nStatusTime", statustime, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sStatusNote", statusnote, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClinicID", clinicid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nSendToInsuranceID", sendtoinsuranceid, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClaimSendType", sendclaimtype.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@PrefixID", GetPrefixTransactionID(patientid), ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_INUP_Transaction_Status", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                _returnid = (Int64)objectID;

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                _returnid = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                _returnid = 0;
            }
            finally
            {
                oDB.Disconnect();
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
            return _returnid;

        }

        public Int64 UpdateBatchCounter(Int64 batchid, Int64 claimcounter, Int64 clinicid)
        {
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            Int64 _currentcounter = 0;
            Int64 _returnid = 0;

            try
            {
                oDB.Connect(false);
                objectID = oDB.ExecuteScalar_Query("SELECT nClaimCounter FROM BL_Transaction_Batch WHERE nBatchID = " + batchid + " AND nClinicID = " + clinicid + "");

                if (objectID != null && objectID.ToString().Trim() != "")
                {
                    _currentcounter = Convert.ToInt64(objectID.ToString().Trim());
                }
                _currentcounter = _currentcounter + claimcounter;
                oDB.Execute_Query("UPDATE BL_Transaction_Batch SET nClaimCounter = " + _currentcounter + " WHERE nBatchID = " + batchid + " AND nClinicID = " + clinicid + "");
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                _returnid = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                _returnid = 0;
            }
            finally
            {
                oDB.Disconnect(); if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
            return _returnid;

        }

        public Int64 UpdateClaimSendType(Int64 statusid, Int64 batchid, Int64 transactionid, Int64 insuranceid, gloPatient.TypeOfBilling sendclaimtype, Int64 clinicid, bool updateinsurance, bool updateboth)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Int64 _returnid = 0;

            try
            {
                oDB.Connect(false);
                if (updateboth == true)
                {
                    _returnid = oDB.Execute_Query("UPDATE BL_Transaction_Status SET nSendToInsuranceID = " + insuranceid + ", nClaimSendType = " + sendclaimtype.GetHashCode() + " " +
                        " WHERE nStatusID = " + statusid + " AND nBatchID = " + batchid + " AND nTransactionID = " + transactionid + " AND nClinicID = " + clinicid + "");
                }
                else
                {
                    if (updateinsurance == true)
                    {
                        _returnid = oDB.Execute_Query("UPDATE BL_Transaction_Status SET nSendToInsuranceID = " + insuranceid + " " +
                        " WHERE nStatusID = " + statusid + " AND nBatchID = " + batchid + " AND nTransactionID = " + transactionid + " AND nClinicID = " + clinicid + "");
                    }
                    else
                    {
                        _returnid = oDB.Execute_Query("UPDATE BL_Transaction_Status SET nClaimSendType = " + sendclaimtype.GetHashCode() + " " +
                        " WHERE nStatusID = " + statusid + " AND nBatchID = " + batchid + " AND nTransactionID = " + transactionid + " AND nClinicID = " + clinicid + "");
                    }
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                _returnid = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                _returnid = 0;
            }
            finally
            {
                oDB.Disconnect(); if (oDB != null) { oDB.Dispose(); }
            }
            return _returnid;
        }

        //public void UpdateCurrentStatus(Int64 Transactionid, TransactionStatus oStatus)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string _sqlQuery = "";

        //    try
        //    {
        //        if (Transactionid > 0)
        //        {
        //            oDB.Connect(false);
        //            _sqlQuery = "UPDATE BL_Transaction_MST SET nTransactionStatusID = " + oStatus.GetHashCode() + " WHERE nTransactionID = " +Transactionid+ " ";
        //            oDB.Execute_Query(_sqlQuery);
        //            oDB.Disconnect();
        //        }
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    {
        //        dbEx.ERROR_Log(dbEx.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }
        //    finally
        //    {
        //        if (oDB != null) { oDB.Dispose(); }
        //    }
        //}

        public void UpdateCurrentStatus(Int64 Transactionid, TransactionStatus oStatus, Int64 StatusId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                if (Transactionid > 0)
                {
                    oDB.Connect(false);
                    _sqlQuery = "UPDATE BL_Transaction_MST SET nLastStatusId = " + StatusId + ",nTransactionStatusID = " + oStatus.GetHashCode() + " WHERE nTransactionID = " + Transactionid + " ";
                    oDB.Execute_Query(_sqlQuery);
                    oDB.Disconnect();
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
        }

        public void UpdateRejectionCounter(Int64 Transactionid, Int64 Patientid, Int64 Clinicid)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = "UPDATE BL_Transaction_MST SET nSendToRejection = (ISNULL(nSendToRejection,0) + 1) " +
                " WHERE nTransactionID = " + Transactionid + " AND nPatientID = " + Patientid + " AND nClinicID = " + Clinicid + "";
                oDB.Execute_Query(_sqlQuery);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
        }

        public void UpdateSentCounter(Int64 Transactionid, Int64 Patientid, Int64 Clinicid)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = "UPDATE BL_Transaction_MST SET nSendCounter = (ISNULL(nSendCounter,0) + 1) " +
                " WHERE nTransactionID = " + Transactionid + " AND nPatientID = " + Patientid + " AND nClinicID = " + Clinicid + "";
                oDB.Execute_Query(_sqlQuery);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
        }

        public void UpdateCurrentStatus(string Transactionids, TransactionStatus oStatus)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";

            try
            {
                if (Transactionids.Trim() != "")
                {
                    oDB.Connect(false);
                    _sqlQuery = "UPDATE BL_Transaction_MST WITH(READPAST) SET nTransactionStatusID = " + oStatus.GetHashCode() + " WHERE nTransactionID IN ('" + Transactionids + "') ";
                    oDB.Execute_Query(_sqlQuery);
                    oDB.Disconnect();
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
        }

        #endregion

        #endregion " Code moved to ClaimManager"

        #region " Hold or Unhold Claim "



        #endregion

        Int64 _MainClaimNumber = 0;
        public Int64 MainClaimNumber
        {
            get { return _MainClaimNumber; }
            set { _MainClaimNumber = value; }
        }

        String _ClaimNumber = "";
        public String ClaimNumber
        {
            get { return _ClaimNumber; }
            set { _ClaimNumber = value; }
        }

        string _SubClaimNumber = "";
        public string SubClaimNumber
        {
            get { return _SubClaimNumber; }
            set { _SubClaimNumber = value; }
        }

        public decimal FormatNumber(decimal Number)
        {
            Decimal _result = Number;
            try
            {
                String[] no = _result.ToString().Split('.');
                if (no.GetUpperBound(0) > 0)
                {
                    if (no[1].ToString().Length > 4)
                    {
                        no[1] = no[1].Substring(0, 4);
                    }
                    _result = Convert.ToDecimal(no[0] + "." + no[1]);
                }
                _result = Convert.ToDecimal(_result.ToString("0.####"));
                //if (_result == 0)
                //{
                //    _result = 1;
                //}
            }
            catch
            {
                _result = Number;
            }
            return _result;
        }
   
        public Int64 AddTransaction(Common.Transaction oTransaction)
        {
            Int64 TransactionID = 0;
            Int64 TransactionDetailID = 0;
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
         //   Int64 _PrefixID = 123;
            Object objDetailID = null;
            try
            {
                oDB.Connect(false);

                // For the Transaction_MST Table
                //@nTransactionID,@nMasterAppointmentID,@nAppointmentID ,@nVisitID ,@nTransactionDate,@sCaseNoPrefix , 
                //@nCaseNo,@nPatientID ,@nTransactionProviderID ,@sMaritalStatus ,@sFacilityCode, 
                //@sFacilityDescription varchar(255), 
                //@nTransactionType int,	
                //@nClinicID numeric(18,0),
                //@PrefixID numeric(18,0)

                // Added Later by Anil on 20080912
                //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nMasterAppointmentID", oTransaction.MasterAppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAppointmentID", oTransaction.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nVisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nOnsiteDate", oTransaction.OnsiteDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nInjuryDate", oTransaction.InjuryDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkFromDate", oTransaction.UnableToWorkFromDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkTillDate", oTransaction.UnableToWorkTillDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sCaseNoPrefix", oTransaction.CaseNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sMaritalStatus", oTransaction.MaritalStatus, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityCode", oTransaction.FacilityCode, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityDescription", oTransaction.FacilityDescription, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nTransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDBParameters.Add("@PrefixID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                oDBParameters.Add("@nTransactionStatusID", oTransaction.Transaction_Status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@sState", oTransaction.State, ParameterDirection.Input, SqlDbType.VarChar, 50);
                oDBParameters.Add("@nHopitalizationDateFrom", oTransaction.HospitalizationDateFrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nHopitalizationDateTo", oTransaction.HospitalizationDateTo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bOutSideLab", oTransaction.OutSideLab, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@dOutSideLabCharges", oTransaction.OutSideLabCharges, ParameterDirection.Input, SqlDbType.Decimal);

                //Code added on 20081020,Sagar Ghodke
                oDBParameters.Add("@bAutoClaim", oTransaction.AutoClaim, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nAccidentDate", oTransaction.AccidentDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bWorkersComp", oTransaction.WorkersComp, ParameterDirection.Input, SqlDbType.Bit);

                //

                //Code added on 20081125 , Sagar Ghodke 
                oDBParameters.Add("@nAuthorizationID", oTransaction.PriorAuthorizationID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sAuthorizationNumber", oTransaction.PriorAuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                //End 20081125

                //Code added on 20081201, Sagar Ghodke 
                oDBParameters.Add("@nReferralID", oTransaction.ReferralProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                //End 20081201
                oDBParameters.Add("@nSendCounter", oTransaction.SendCounter, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nSendToRejection", oTransaction.SendToRejection, ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@nLastStatusId", oTransaction.LastStatusId, ParameterDirection.Input, SqlDbType.BigInt);

                //Code added on 20090505 By - Sagar Ghodke 
                //Code added to implement UserId for Transaction

                oDBParameters.Add("@nUserID", oTransaction.TransactionUserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sUserName", oTransaction.TransactionUserName, ParameterDirection.Input, SqlDbType.VarChar);

                //End code add - 20090505,Sagar Ghodke

                //Code added on 20090710,Vinayak Gadekar
                oDBParameters.Add("@bOtherAccident", oTransaction.OtherAccident, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nOtherAccidentDate", oTransaction.OtherAccidentDate, ParameterDirection.Input, SqlDbType.BigInt);

                //...*** Code added on 20090730 by - Sagar Ghodke
                //...
                oDBParameters.Add("@nSendToInsFlag", oTransaction.SendToInsuranceFlag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                //...
                //...*** End code add on 20090730,Sagar Ghodke
                oDBParameters.Add("@sWorkersCompNo", oTransaction.WorkersCompNo, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(50),
                oDBParameters.Add("@bIsWorkersCompOnCMS1500", oTransaction.WorkersCompPrintonCMS1500, ParameterDirection.Input, SqlDbType.Bit);

                //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
                oDBParameters.Add("@nPAccountID", oTransaction.PAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAccountPatientID", oTransaction.AccountPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nGuarantorID", oTransaction.GuarantorID, ParameterDirection.Input, SqlDbType.BigInt);
                //End

                oDB.Execute("BL_INUP_Transaction_Mst", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                TransactionID = (Int64)objectID;

                //Code added on 20080821 By - Sagar Ghodke

                //Delete the existing Transaction Lines if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID);

                //End 20080821

                //Delete the existing BL_Transaction_Lines_Notes
                //oDB.Execute_Query("DELETE FROM BL_Transaction_Lines_Notes WHERE nTransactionID = " + TransactionID);

                //Delete the existing BL_Transaction_Lines_Insurances  
                oDB.Execute_Query("DELETE FROM BL_Transaction_MST_Ins WHERE nTransactionID = " + TransactionID);



                //Transaction Lines
                if (oTransaction.Lines != null)
                {
                    for (int i = 0; i < oTransaction.Lines.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nFromDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceFrom.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        

                        //DOS To implementation with null value, for now null value means 0 as it is numeric field

                        if (oTransaction.Lines[i].DateServiceTillIsNull == true)
                        {
                            oDBParameters.Add("@nToDate", 0, ParameterDirection.Input, SqlDbType.BigInt);
                        }
                        else
                        {
                            oDBParameters.Add("@nToDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceTill.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        }

                        oDBParameters.Add("@sPOSCode", oTransaction.Lines[i].POSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sPOSDescription", oTransaction.Lines[i].POSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSCode", oTransaction.Lines[i].TOSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSDescription", oTransaction.Lines[i].TOSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Code", oTransaction.Lines[i].Dx1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Description", oTransaction.Lines[i].Dx1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Code", oTransaction.Lines[i].Dx2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Description", oTransaction.Lines[i].Dx2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Code", oTransaction.Lines[i].Dx3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Description", oTransaction.Lines[i].Dx3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Code", oTransaction.Lines[i].Dx4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Description", oTransaction.Lines[i].Dx4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Code", oTransaction.Lines[i].Dx5Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Description", oTransaction.Lines[i].Dx5Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Code", oTransaction.Lines[i].Dx6Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Description", oTransaction.Lines[i].Dx6Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Code", oTransaction.Lines[i].Dx7Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Description", oTransaction.Lines[i].Dx7Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Code", oTransaction.Lines[i].Dx8Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Description", oTransaction.Lines[i].Dx8Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nDx1Pointer", oTransaction.Lines[i].Dx1Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx2Pointer", oTransaction.Lines[i].Dx2Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx3Pointer", oTransaction.Lines[i].Dx3Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx4Pointer", oTransaction.Lines[i].Dx4Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx5Pointer", oTransaction.Lines[i].Dx5Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx6Pointer", oTransaction.Lines[i].Dx6Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx7Pointer", oTransaction.Lines[i].Dx7Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx8Pointer", oTransaction.Lines[i].Dx8Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sMod1Code", oTransaction.Lines[i].Mod1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod1Description", oTransaction.Lines[i].Mod1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Code", oTransaction.Lines[i].Mod2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Description", oTransaction.Lines[i].Mod2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Code", oTransaction.Lines[i].Mod3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Description", oTransaction.Lines[i].Mod3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Code", oTransaction.Lines[i].Mod4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Description", oTransaction.Lines[i].Mod4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@dCharges", oTransaction.Lines[i].Charges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dUnit", oTransaction.Lines[i].Unit, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dTotal", oTransaction.Lines[i].Total, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dAllowed", oTransaction.Lines[i].AllowedCharges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@nProvider", oTransaction.Lines[i].RefferingProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNumber", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);

                        oDBParameters.Add("@nTransactionLineStatus", oTransaction.Lines[i].LineStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);

                        //Code added on 20090509 by - Sagar Ghodke
                        //Code added to implement LabCharges line wise

                        oDBParameters.Add("@bIsLabCPT", oTransaction.Lines[i].IsLabCPT, ParameterDirection.Input, SqlDbType.Bit); // bit,
                        oDBParameters.Add("@sAuthorizationNo", oTransaction.Lines[i].AuthorizationNo.Trim(), ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@bSentToClaim", oTransaction.Lines[i].SendToClaim, ParameterDirection.Input, SqlDbType.Bit);
                        //End Code add 20090509

                        //Code added on 20090514 by - Sagar Ghodke
                        //Code added to implement LinePrimaryDiagnosis

                        oDBParameters.Add("@sLinePrimaryDxCode", oTransaction.Lines[i].LinePrimaryDxCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sLinePrimaryDxDesc", oTransaction.Lines[i].LinePrimaryDxDesc, ParameterDirection.Input, SqlDbType.VarChar);

                        //End code add 20090514,Sagar Ghodke

                        //...Code added on 20090618 by Sagar Ghodke 
                        //...Code added to implement ReplicationID on Transaction Lines Table 

                        oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                        //...End code add 20090618,Sagar Ghodke

                        //Code added on 20100819 by Sagar Ghodke
                        //Code added to save the NDC fields data 
                        oDBParameters.Add("@nNDCID", oTransaction.Lines[i].NDCID, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0) = NULL,
                        oDBParameters.Add("@sNDCCodeQualifier", oTransaction.Lines[i].NDCCodeQualifier, ParameterDirection.Input, SqlDbType.VarChar, 5);//  VARCHAR(5) = NULL,
                        oDBParameters.Add("@sNDCCode", oTransaction.Lines[i].NDCCode, ParameterDirection.Input, SqlDbType.VarChar, 11);//  varchar(11) = NULL,
                        oDBParameters.Add("@sNDCDescription", oTransaction.Lines[i].NDCDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnitCode", oTransaction.Lines[i].NDCUnitCode, ParameterDirection.Input, SqlDbType.VarChar, 5);//  varchar(5) = NULL,
                        oDBParameters.Add("@sNDCUnitDescription", oTransaction.Lines[i].NDCUnitDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnit", oTransaction.Lines[i].NDCUnit, ParameterDirection.Input, SqlDbType.VarChar, 13);//  varchar(13) = NULL,
                        oDBParameters.Add("@sNDCUnitPricing", oTransaction.Lines[i].NDCUnitPricing, ParameterDirection.Input, SqlDbType.VarChar, 15);//  varchar(15) = NULL
                        oDBParameters.Add("@sPrescription", oTransaction.Lines[i].Prescription, ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL
                        //End code add on 20100819 by Sagar Ghodke

                        objDetailID = null;
                        oDB.Execute("BL_INUP_Transaction_Lines", oDBParameters, out objDetailID);
                        if (objDetailID == null) { return 0; }
                        TransactionDetailID = Convert.ToInt64(objDetailID);
                        //Notes
                        //Transaction Lines-->Notes
                        if (oTransaction.Lines[i].LineNotes != null)
                        {
                            for (int j = 0; j < oTransaction.Lines[i].LineNotes.Count; j++)
                            {

                                oDBParameters.Clear();
                                //@nTransactionID numeric(18,0),@nLineNo numeric (18,0), @nNoteType int, @nNoteId numeric (18,0), 
                                //@nNoteDateTime numeric (18,0), @nUserID numeric (18,0), @nNoteDescription varchar(255),@nClinicID numeric(18,0)

                                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nLineNo", oTransaction.Lines[i].LineNotes[j].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteType", oTransaction.Lines[i].LineNotes[j].NoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nNoteId", oTransaction.Lines[i].LineNotes[j].NoteID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteDateTime", oTransaction.Lines[i].LineNotes[j].NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nUserID", oTransaction.Lines[i].LineNotes[j].UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@sNoteDescription", oTransaction.Lines[i].LineNotes[j].NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                                oDBParameters.Add("@nClinicID", oTransaction.Lines[i].LineNotes[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nStatementNoteDate", oTransaction.Lines[i].LineNotes[j].StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@dtCreatedDateTime", oTransaction.Lines[i].LineNotes[j].dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);
                                oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters);
                            }//End Lines Notes 
                        }
                        //Added by Anil on 20080912 --->> nTransactionDetailID =1,nTransactionLineNo
                        //Transaction Lines-->Insurances
                        //if (oTransaction.Insurances != null)
                        //{
                        //    for (int k = 0; k < oTransaction.Count; k++)
                        //    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.Lines[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPaymentMode", oTransaction.Lines[i].InsuranceSelfMode.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_Mst_Ins", oDBParameters);
                        //    }//End Insurances 
                        //}

                    }
                }


                //Code added on 20091104 By - Mukesh Patel

                #region " Insurance Plan "

                //Delete the existing Transaction Insurance Plans if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_InsPlan WHERE nTransactionID = " + TransactionID);

                //Add Transaction Insurance Plans 
                if (oTransaction.InsurancePlans != null)
                {
                    for (int i = 0; i < oTransaction.InsurancePlans.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.InsurancePlans[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nContactID", oTransaction.InsurancePlans[i].ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nResponsibilityNo", oTransaction.InsurancePlans[i].ResponsibilityNo.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nResponsibilityType", oTransaction.InsurancePlans[i].ResponsibilityType, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nClinicID", oTransaction.InsurancePlans[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_InsPlan", oDBParameters);

                    }
                }

                #endregion
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                TransactionID = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                TransactionID = 0;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
            return TransactionID;

        }

        public Int64 AddTransaction(Common.Transaction oTransaction, Int64 nBatchID, Int64 nBatchNo, string sBatchPrefix, Int64 nBatchDate, Int32 nBatchType, Int64 nClinicID)
        {
            Int64 TransactionID = 0;
            Int64 TransactionDetailID = 0;
            Int64 BatchID = 0;
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
          //  Int64 _PrefixID = 123;
            try
            {
                oDB.Connect(false);

                // For the Transaction_MST Table
                //@nTransactionID,@nMasterAppointmentID,@nAppointmentID ,@nVisitID ,@nTransactionDate,@sCaseNoPrefix , 
                //@nCaseNo,@nPatientID ,@nTransactionProviderID ,@sMaritalStatus ,@sFacilityCode, 
                //@sFacilityDescription varchar(255), 
                //@nTransactionType int,	
                //@nClinicID numeric(18,0),
                //@PrefixID numeric(18,0)

                // Added Later by Anil on 20080912
                //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nMasterAppointmentID", oTransaction.MasterAppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAppointmentID", oTransaction.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nVisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nOnsiteDate", oTransaction.OnsiteDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nInjuryDate", oTransaction.InjuryDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkFromDate", oTransaction.UnableToWorkFromDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkTillDate", oTransaction.UnableToWorkTillDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sCaseNoPrefix", oTransaction.CaseNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sMaritalStatus", oTransaction.MaritalStatus, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityCode", oTransaction.FacilityCode, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityDescription", oTransaction.FacilityDescription, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nTransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDBParameters.Add("@PrefixID",oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                //Code added on 20081018 , Sagar Ghodke
                oDBParameters.Add("@nTransactionStatusID", oTransaction.Transaction_Status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@sState", oTransaction.State, ParameterDirection.Input, SqlDbType.VarChar, 50);
                oDBParameters.Add("@nHopitalizationDateFrom", oTransaction.HospitalizationDateFrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nHopitalizationDateTo", oTransaction.HospitalizationDateTo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bOutSideLab", oTransaction.OutSideLab, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@dOutSideLabCharges", oTransaction.OutSideLabCharges, ParameterDirection.Input, SqlDbType.Decimal);

                //End 20081018

                //Code added on 20081020,Sagar Ghodke
                oDBParameters.Add("@bAutoClaim", oTransaction.AutoClaim, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nAccidentDate", oTransaction.AccidentDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bWorkersComp", oTransaction.WorkersComp, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@bIsWorkersCompOnCMS1500", oTransaction.WorkersCompPrintonCMS1500, ParameterDirection.Input, SqlDbType.Bit);
                //

                //Code added on 20081125 , Sagar Ghodke 
                oDBParameters.Add("@nAuthorizationID", oTransaction.PriorAuthorizationID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sAuthorizationNumber", oTransaction.PriorAuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                //End 20081125

                //Code added on 20081201, Sagar Ghodke 
                oDBParameters.Add("@nReferralID", oTransaction.ReferralProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                //End 20081201

                //20090131
                oDBParameters.Add("@nSendCounter", oTransaction.SendCounter, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nSendToRejection", oTransaction.SendToRejection, ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@nLastStatusId", oTransaction.LastStatusId, ParameterDirection.Input, SqlDbType.BigInt);

                //Code added on 20090505 by - Sagar Ghodke
                //Code added to implement UserId for Transaction Master
                oDBParameters.Add("@nUserID", oTransaction.TransactionUserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sUserName", oTransaction.TransactionUserName, ParameterDirection.Input, SqlDbType.VarChar);
                //oDBParameters.Add("@sUserName",oTransaction.
                //End code add - 20090505,Sagar Ghodke

                //Code added on 20090710,Vinayak Gadekar
                oDBParameters.Add("@bOtherAccident", oTransaction.OtherAccident, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nOtherAccidentDate", oTransaction.OtherAccidentDate, ParameterDirection.Input, SqlDbType.BigInt);

                //...*** Code added on 20090730 by - Sagar Ghodke
                //...
                oDBParameters.Add("@nSendToInsFlag", oTransaction.SendToInsuranceFlag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                //...
                //...*** End code add on 20090730,Sagar Ghodke
                //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
                oDBParameters.Add("@nPAccountID", oTransaction.PAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAccountPatientID", oTransaction.AccountPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nGuarantorID", oTransaction.GuarantorID, ParameterDirection.Input, SqlDbType.BigInt);
                //End

                oDB.Execute("BL_INUP_Transaction_Mst", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                TransactionID = (Int64)objectID;

                //Code added on 20080821 By - Sagar Ghodke

                //Vinayak - 27 Sep 2008
                #region "Batch Master"
                oDBParameters.Clear();
                BatchID = 0;
                objectID = null;

                oDBParameters.Add("@nBatchID", nBatchID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchDate", nBatchDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sBatchNoPrefix", sBatchPrefix, ParameterDirection.Input, SqlDbType.VarChar, 20);
                oDBParameters.Add("@nBatchNo", nBatchNo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nBatchType", nBatchType, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDBParameters.Add("@PrefixID", GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_INUP_Batch_Mst", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                BatchID = (Int64)objectID;
                #endregion

                //Delete the existing Transaction Lines if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID);

                //End 20080821

                //Delete the existing BL_Transaction_Lines_Notes
                //oDB.Execute_Query("DELETE FROM BL_Transaction_Lines_Notes WHERE nTransactionID = " + TransactionID);

                //Delete the existing BL_Transaction_Lines_Insurances  
                oDB.Execute_Query("DELETE FROM BL_Transaction_MST_Ins WHERE nTransactionID = " + TransactionID);



                //Transaction Lines
                if (oTransaction.Lines != null)
                {
                    for (int i = 0; i < oTransaction.Lines.Count; i++)
                    {
                        TransactionDetailID = 0;

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@TransactionDetailID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                        oDBParameters.Add("@nFromDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceFrom.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);

                        //DOS To implementation with null value, for now null value means 0 as it is numeric field

                        if (oTransaction.Lines[i].DateServiceTillIsNull == true)
                        {
                            oDBParameters.Add("@nToDate", 0, ParameterDirection.Input, SqlDbType.BigInt);
                        }
                        else
                        {
                            oDBParameters.Add("@nToDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceTill.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        }

                        oDBParameters.Add("@sPOSCode", oTransaction.Lines[i].POSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sPOSDescription", oTransaction.Lines[i].POSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSCode", oTransaction.Lines[i].TOSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSDescription", oTransaction.Lines[i].TOSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Code", oTransaction.Lines[i].Dx1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Description", oTransaction.Lines[i].Dx1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Code", oTransaction.Lines[i].Dx2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Description", oTransaction.Lines[i].Dx2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Code", oTransaction.Lines[i].Dx3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Description", oTransaction.Lines[i].Dx3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Code", oTransaction.Lines[i].Dx4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Description", oTransaction.Lines[i].Dx4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Code", oTransaction.Lines[i].Dx5Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Description", oTransaction.Lines[i].Dx5Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Code", oTransaction.Lines[i].Dx6Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Description", oTransaction.Lines[i].Dx6Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Code", oTransaction.Lines[i].Dx7Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Description", oTransaction.Lines[i].Dx7Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Code", oTransaction.Lines[i].Dx8Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Description", oTransaction.Lines[i].Dx8Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nDx1Pointer", oTransaction.Lines[i].Dx1Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx2Pointer", oTransaction.Lines[i].Dx2Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx3Pointer", oTransaction.Lines[i].Dx3Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx4Pointer", oTransaction.Lines[i].Dx4Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx5Pointer", oTransaction.Lines[i].Dx5Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx6Pointer", oTransaction.Lines[i].Dx6Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx7Pointer", oTransaction.Lines[i].Dx7Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx8Pointer", oTransaction.Lines[i].Dx8Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sMod1Code", oTransaction.Lines[i].Mod1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod1Description", oTransaction.Lines[i].Mod1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Code", oTransaction.Lines[i].Mod2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Description", oTransaction.Lines[i].Mod2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Code", oTransaction.Lines[i].Mod3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Description", oTransaction.Lines[i].Mod3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Code", oTransaction.Lines[i].Mod4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Description", oTransaction.Lines[i].Mod4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@dCharges", oTransaction.Lines[i].Charges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dUnit", oTransaction.Lines[i].Unit, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dTotal", oTransaction.Lines[i].Total, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dAllowed", oTransaction.Lines[i].AllowedCharges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@nProvider", oTransaction.Lines[i].RefferingProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNumber", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                        //Code added on 20081018 , Sagar Ghodke
                        oDBParameters.Add("@nTransactionLineStatus", oTransaction.Lines[i].LineStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        //

                        //..Code added on 20090511 By - Sagar Ghodke
                        //Code added to implement CLIA number functionality
                        // & sent service line to claim file

                        oDBParameters.Add("@bIsLabCPT", oTransaction.Lines[i].IsLabCPT, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sAuthorizationNo", oTransaction.Lines[i].AuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@bSentToClaim", oTransaction.Lines[i].SendToClaim, ParameterDirection.Input, SqlDbType.Bit);

                        //..End Code add 20090511,Sagar Ghodke

                        //Code added on 20090514 by - Sagar Ghodke
                        //Code added to implement LinePrimaryDiagnosis

                        oDBParameters.Add("@sLinePrimaryDxCode", oTransaction.Lines[i].LinePrimaryDxCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sLinePrimaryDxDesc", oTransaction.Lines[i].LinePrimaryDxDesc, ParameterDirection.Input, SqlDbType.VarChar);

                        //End code add 20090514,Sagar Ghodke

                        //...Code added on 20090618 by Sagar Ghodke 
                        //...Code added to implement ReplicationID on Transaction Lines Table 

                        oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                        //...End code add 20090618,Sagar Ghodke

                        //Code added on 20100819 by Sagar Ghodke
                        //Code added to save the NDC fields data 
                        oDBParameters.Add("@nNDCID", oTransaction.Lines[i].NDCID, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0) = NULL,
                        oDBParameters.Add("@sNDCCodeQualifier", oTransaction.Lines[i].NDCCodeQualifier, ParameterDirection.Input, SqlDbType.VarChar, 5);//  VARCHAR(5) = NULL,
                        oDBParameters.Add("@sNDCCode", oTransaction.Lines[i].NDCCode, ParameterDirection.Input, SqlDbType.VarChar, 11);//  varchar(11) = NULL,
                        oDBParameters.Add("@sNDCDescription", oTransaction.Lines[i].NDCDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnitCode", oTransaction.Lines[i].NDCUnitCode, ParameterDirection.Input, SqlDbType.VarChar, 5);//  varchar(5) = NULL,
                        oDBParameters.Add("@sNDCUnitDescription", oTransaction.Lines[i].NDCUnitDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnit", oTransaction.Lines[i].NDCUnit, ParameterDirection.Input, SqlDbType.VarChar, 13);//  varchar(13) = NULL,
                        oDBParameters.Add("@sNDCUnitPricing", oTransaction.Lines[i].NDCUnitPricing, ParameterDirection.Input, SqlDbType.VarChar, 15);//  varchar(15) = NULL
                        oDBParameters.Add("@sPrescription", oTransaction.Lines[i].Prescription , ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL
                        //End code add on 20100819 by Sagar Ghodke

                        objectID = null;
                        oDB.Execute("BL_INUP_Transaction_Lines", oDBParameters, out  objectID);
                        if (objectID == null)
                        { return 0; }
                        TransactionDetailID = Convert.ToInt64(objectID);

                        //Vinayak - 27 Sep 2008
                        #region "Batch Details"
                        oDBParameters.Clear();

                        oDBParameters.Add("@nBatchID", BatchID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Batch_Dtl", oDBParameters, out  objectID);
                        #endregion

                        //Notes
                        //Transaction Lines-->Notes
                        if (oTransaction.Lines[i].LineNotes != null)
                        {
                            for (int j = 0; j < oTransaction.Lines[i].LineNotes.Count; j++)
                            {

                                oDBParameters.Clear();
                                //@nTransactionID numeric(18,0),@nLineNo numeric (18,0), @nNoteType int, @nNoteId numeric (18,0), 
                                //@nNoteDateTime numeric (18,0), @nUserID numeric (18,0), @nNoteDescription varchar(255),@nClinicID numeric(18,0)

                                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nLineNo", oTransaction.Lines[i].LineNotes[j].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteType", oTransaction.Lines[i].LineNotes[j].NoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nNoteId", oTransaction.Lines[i].LineNotes[j].NoteID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteDateTime", oTransaction.Lines[i].LineNotes[j].NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nUserID", oTransaction.Lines[i].LineNotes[j].UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@sNoteDescription", oTransaction.Lines[i].LineNotes[j].NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                                oDBParameters.Add("@nClinicID", oTransaction.Lines[i].LineNotes[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nBillingNoteType", oTransaction.Lines[i].LineNotes[j].BillingNoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nStatementNoteDate", oTransaction.Lines[i].LineNotes[j].StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@dtCreatedDateTime", oTransaction.Lines[i].LineNotes[j].dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);
                                oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters);
                            }//End Lines Notes 
                        }
                        //Added by Anil on 20080912 --->> nTransactionDetailID =1,nTransactionLineNo
                        //Transaction Lines-->Insurances
                        //if (oTransaction.Insurances != null)
                        //{
                        //    for (int k = 0; k < oTransaction.Count; k++)
                        //    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.Lines[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPaymentMode", oTransaction.Lines[i].InsuranceSelfMode.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_Mst_Ins", oDBParameters);
                        //    }//End Insurances 
                        //}

                    }
                }

                //Code added on 20091104 By - Mukesh Patel

                #region " Insurance Plan "

                //Delete the existing Transaction Insurance Plans if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_InsPlan WHERE nTransactionID = " + TransactionID);

                //Add Transaction Insurance Plans 
                if (oTransaction.InsurancePlans != null)
                {
                    for (int i = 0; i < oTransaction.InsurancePlans.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.InsurancePlans[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nContactID", oTransaction.InsurancePlans[i].ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nResponsibilityNo", oTransaction.InsurancePlans[i].ResponsibilityNo.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nResponsibilityType", oTransaction.InsurancePlans[i].ResponsibilityType, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nClinicID", oTransaction.InsurancePlans[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_InsPlan", oDBParameters);

                    }
                }

                #endregion
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                TransactionID = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                TransactionID = 0;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
            return TransactionID;

        }

        public Int64 AddTransaction(Common.Transaction oTransaction, Int64 nClinicID)
        {
            Int64 TransactionID = 0;
            Int64 TransactionDetailID = 0;
           // Int64 BatchID = 0;
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
           // Int64 _PrefixID = 123;
            try
            {
                oDB.Connect(false);

                // For the Transaction_MST Table
                //@nTransactionID,@nMasterAppointmentID,@nAppointmentID ,@nVisitID ,@nTransactionDate,@sCaseNoPrefix , 
                //@nCaseNo,@nPatientID ,@nTransactionProviderID ,@sMaritalStatus ,@sFacilityCode, 
                //@sFacilityDescription varchar(255), 
                //@nTransactionType int,	
                //@nClinicID numeric(18,0),
                //@PrefixID numeric(18,0)

                // Added Later by Anil on 20080912
                //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nMasterAppointmentID", oTransaction.MasterAppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAppointmentID", oTransaction.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nVisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nOnsiteDate", oTransaction.OnsiteDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nInjuryDate", oTransaction.InjuryDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkFromDate", oTransaction.UnableToWorkFromDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkTillDate", oTransaction.UnableToWorkTillDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sCaseNoPrefix", oTransaction.CaseNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sMaritalStatus", oTransaction.MaritalStatus, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityCode", oTransaction.FacilityCode, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityDescription", oTransaction.FacilityDescription, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nTransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                //...Code Changes done on 20090618 by - Sagar Ghodke
                //...Code chages done to implement replication id using DatabaseLayer Method
                //...Below commented code is existing code

                //oDBParameters.Add("@PrefixID", GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                //...End Code changes 20090618-Sagar Ghodke

                //Code added on 20081018 , Sagar Ghodke
                oDBParameters.Add("@nTransactionStatusID", oTransaction.Transaction_Status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@sState", oTransaction.State, ParameterDirection.Input, SqlDbType.VarChar, 50);
                oDBParameters.Add("@nHopitalizationDateFrom", oTransaction.HospitalizationDateFrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nHopitalizationDateTo", oTransaction.HospitalizationDateTo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bOutSideLab", oTransaction.OutSideLab, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@dOutSideLabCharges", oTransaction.OutSideLabCharges, ParameterDirection.Input, SqlDbType.Decimal);

                //End 20081018

                //Code added on 20081020,Sagar Ghodke
                oDBParameters.Add("@bAutoClaim", oTransaction.AutoClaim, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nAccidentDate", oTransaction.AccidentDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bWorkersComp", oTransaction.WorkersComp, ParameterDirection.Input, SqlDbType.Bit);

                //

                //Code added on 20081125 , Sagar Ghodke 
                oDBParameters.Add("@nAuthorizationID", oTransaction.PriorAuthorizationID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sAuthorizationNumber", oTransaction.PriorAuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                //End 20081125

                //Code added on 20081201 , Sagar Ghodke
                oDBParameters.Add("@nReferralID", oTransaction.ReferralProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                //End 20081201

                //20090131
                oDBParameters.Add("@nSendCounter", oTransaction.SendCounter, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nSendToRejection", oTransaction.SendToRejection, ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@nLastStatusId", oTransaction.LastStatusId, ParameterDirection.Input, SqlDbType.BigInt);

                //Code added on 20090505 by - Sagar Ghodke
                //Code added to implement UserId on Transaction

                oDBParameters.Add("nUserID", oTransaction.TransactionUserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("sUserName", oTransaction.TransactionUserName, ParameterDirection.Input, SqlDbType.VarChar);

                //End code add - 20090505,Sagar Ghodke

                //Code added on 20090710,Vinayak Gadekar
                oDBParameters.Add("@bOtherAccident", oTransaction.OtherAccident, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nOtherAccidentDate", oTransaction.OtherAccidentDate, ParameterDirection.Input, SqlDbType.BigInt);

                //...*** Code added on 20090730 by - Sagar Ghodke
                //...
                oDBParameters.Add("@nSendToInsFlag", oTransaction.SendToInsuranceFlag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                //...
                //...*** End code add on 20090730,Sagar Ghodke

                //...*** Code added on 20090826 by - Mukesh Patel
                //...
                oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit
                //...*** End code add on 20090826, Mukesh Patel

                oDBParameters.Add("@sWorkersCompNo", oTransaction.WorkersCompNo, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(50),
                oDBParameters.Add("@bIsWorkersCompOnCMS1500", oTransaction.WorkersCompPrintonCMS1500, ParameterDirection.Input, SqlDbType.Bit);

                //Added By Debasish on 10th jun 2010
                oDBParameters.Add("@bSameAsBillingProvider", oTransaction.IsSameAsBillingProvider, ParameterDirection.Input, SqlDbType.Bit);// bit
                //***

                //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
                oDBParameters.Add("@nPAccountID", oTransaction.PAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAccountPatientID", oTransaction.AccountPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nGuarantorID", oTransaction.GuarantorID, ParameterDirection.Input, SqlDbType.BigInt);
                //End

                //Added By mukesh on 12 Nov 2010
                oDBParameters.Add("@nIllnessDate", oTransaction.IllnessDate, ParameterDirection.Input, SqlDbType.BigInt);
                //***

                oDBParameters.Add("@nLastSeenDate", oTransaction.LastSeenDate, ParameterDirection.Input, SqlDbType.BigInt);

                //add on 20110630 by Mahesh Nawal for 6031
                oDBParameters.Add("@sDelayReasonCode", oTransaction.DelayReasonCodeID, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sServiceAuthExceCode", oTransaction.ServiceAuthExceCode, ParameterDirection.Input, SqlDbType.VarChar);

                oDBParameters.Add("@bIsRefProvAsSupervisor", oTransaction.bIsRefprovAsSupervisor, ParameterDirection.Input, SqlDbType.Bit);

                oDB.Execute("BL_INUP_Transaction_Mst", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                TransactionID = (Int64)objectID;


                //Delete the existing Transaction Lines if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID);

                //End 20080821

                //Delete the existing BL_Transaction_Lines_Notes
                //oDB.Execute_Query("DELETE FROM BL_Transaction_Lines_Notes WHERE nTransactionID = " + TransactionID + " AND nClinicID = "+this.ClinicID+" ");

                //Delete the existing BL_Transaction_Lines_Insurances  
                oDB.Execute_Query("DELETE FROM BL_Transaction_MST_Ins WHERE nTransactionID = " + TransactionID);



                //Transaction Lines
                if (oTransaction.Lines != null)
                {
                    for (int i = 0; i < oTransaction.Lines.Count; i++)
                    {
                        TransactionDetailID = 0;
                        //TransactionDetailID = oTransaction.Lines[i].TransactionDetailID;

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@TransactionDetailID", TransactionDetailID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                        oDBParameters.Add("@nFromDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceFrom.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);

                        //DOS To implementation with null value, for now null value means 0 as it is numeric field

                        if (oTransaction.Lines[i].DateServiceTillIsNull == true)
                        {
                            oDBParameters.Add("@nToDate", 0, ParameterDirection.Input, SqlDbType.BigInt);
                        }
                        else
                        {
                            oDBParameters.Add("@nToDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceTill.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        }

                        oDBParameters.Add("@sPOSCode", oTransaction.Lines[i].POSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sPOSDescription", oTransaction.Lines[i].POSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSCode", oTransaction.Lines[i].TOSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSDescription", oTransaction.Lines[i].TOSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Code", oTransaction.Lines[i].Dx1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Description", oTransaction.Lines[i].Dx1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Code", oTransaction.Lines[i].Dx2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Description", oTransaction.Lines[i].Dx2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Code", oTransaction.Lines[i].Dx3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Description", oTransaction.Lines[i].Dx3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Code", oTransaction.Lines[i].Dx4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Description", oTransaction.Lines[i].Dx4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Code", oTransaction.Lines[i].Dx5Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Description", oTransaction.Lines[i].Dx5Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Code", oTransaction.Lines[i].Dx6Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Description", oTransaction.Lines[i].Dx6Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Code", oTransaction.Lines[i].Dx7Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Description", oTransaction.Lines[i].Dx7Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Code", oTransaction.Lines[i].Dx8Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Description", oTransaction.Lines[i].Dx8Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nDx1Pointer", oTransaction.Lines[i].Dx1Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx2Pointer", oTransaction.Lines[i].Dx2Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx3Pointer", oTransaction.Lines[i].Dx3Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx4Pointer", oTransaction.Lines[i].Dx4Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx5Pointer", oTransaction.Lines[i].Dx5Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx6Pointer", oTransaction.Lines[i].Dx6Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx7Pointer", oTransaction.Lines[i].Dx7Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx8Pointer", oTransaction.Lines[i].Dx8Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sMod1Code", oTransaction.Lines[i].Mod1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod1Description", oTransaction.Lines[i].Mod1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Code", oTransaction.Lines[i].Mod2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Description", oTransaction.Lines[i].Mod2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Code", oTransaction.Lines[i].Mod3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Description", oTransaction.Lines[i].Mod3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Code", oTransaction.Lines[i].Mod4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Description", oTransaction.Lines[i].Mod4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@dCharges", oTransaction.Lines[i].Charges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dUnit", oTransaction.Lines[i].Unit, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dTotal", oTransaction.Lines[i].Total, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dAllowed", oTransaction.Lines[i].AllowedCharges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@nProvider", oTransaction.Lines[i].RefferingProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNumber", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);

                        //Code added on 20081018 , Sagar Ghodke
                        oDBParameters.Add("@nTransactionLineStatus", oTransaction.Lines[i].LineStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        //

                        ///Code added on 20090511 by - Sagar Ghodke
                        /////Code added to implement CLIA number & sent service line in claim file
                        // functionality

                        oDBParameters.Add("@bIsLabCPT", oTransaction.Lines[i].IsLabCPT, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sAuthorizationNo", oTransaction.Lines[i].AuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@bSentToClaim", oTransaction.Lines[i].SendToClaim, ParameterDirection.Input, SqlDbType.Bit);

                        ///End Code add 20090511,Sagar Ghodke
                        ///

                        //Code added on 20090514 by - Sagar Ghodke
                        //Code added to implement LinePrimaryDiagnosis

                        oDBParameters.Add("@sLinePrimaryDxCode", oTransaction.Lines[i].LinePrimaryDxCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sLinePrimaryDxDesc", oTransaction.Lines[i].LinePrimaryDxDesc, ParameterDirection.Input, SqlDbType.VarChar);

                        //End code add 20090514,Sagar Ghodke

                        //...Code added on 20090618 by Sagar Ghodke 
                        //...Code added to implement ReplicationID on Transaction Lines Table 

                        oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                        //...End code add 20090618,Sagar Ghodke

                        //...*** Code added on 20090826 by - Mukesh Patel
                        //...
                        oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                        oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                        oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                        oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit
                        //...*** End code add on 20090826, Mukesh Patel

                        //Code added on 20100819 by Sagar Ghodke
                        //Code added to save the NDC fields data 
                        oDBParameters.Add("@nNDCID", oTransaction.Lines[i].NDCID, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0) = NULL,
                        oDBParameters.Add("@sNDCCodeQualifier", oTransaction.Lines[i].NDCCodeQualifier, ParameterDirection.Input, SqlDbType.VarChar, 5);//  VARCHAR(5) = NULL,
                        oDBParameters.Add("@sNDCCode", oTransaction.Lines[i].NDCCode, ParameterDirection.Input, SqlDbType.VarChar, 11);//  varchar(11) = NULL,
                        oDBParameters.Add("@sNDCDescription", oTransaction.Lines[i].NDCDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnitCode", oTransaction.Lines[i].NDCUnitCode, ParameterDirection.Input, SqlDbType.VarChar, 5);//  varchar(5) = NULL,
                        oDBParameters.Add("@sNDCUnitDescription", oTransaction.Lines[i].NDCUnitDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnit", oTransaction.Lines[i].NDCUnit, ParameterDirection.Input, SqlDbType.VarChar, 13);//  varchar(13) = NULL,
                        oDBParameters.Add("@sNDCUnitPricing", oTransaction.Lines[i].NDCUnitPricing, ParameterDirection.Input, SqlDbType.VarChar, 15);//  varchar(15) = NULL
                        oDBParameters.Add("@sPrescription", oTransaction.Lines[i].Prescription, ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL
                        //End code add on 20100819 by Sagar Ghodke

                        objectID = null;
                        oDB.Execute("BL_INUP_Transaction_Lines", oDBParameters, out  objectID);
                        if (objectID == null)
                        { return 0; }
                        TransactionDetailID = (Int64)objectID;


                        //Notes
                        //Transaction Lines-->Notes
                        if (oTransaction.Lines[i].LineNotes != null)
                        {
                            for (int j = 0; j < oTransaction.Lines[i].LineNotes.Count; j++)
                            {

                                oDBParameters.Clear();
                                //@nTransactionID numeric(18,0),@nLineNo numeric (18,0), @nNoteType int, @nNoteId numeric (18,0), 
                                //@nNoteDateTime numeric (18,0), @nUserID numeric (18,0), @nNoteDescription varchar(255),@nClinicID numeric(18,0)

                                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nLineNo", oTransaction.Lines[i].LineNotes[j].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteType", oTransaction.Lines[i].LineNotes[j].NoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nNoteId", oTransaction.Lines[i].LineNotes[j].NoteID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteDateTime", oTransaction.Lines[i].LineNotes[j].NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nUserID", oTransaction.Lines[i].LineNotes[j].UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@sNoteDescription", oTransaction.Lines[i].LineNotes[j].NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                                oDBParameters.Add("@nClinicID", oTransaction.Lines[i].LineNotes[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nBillingNoteType", oTransaction.Lines[i].LineNotes[j].BillingNoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nStatementNoteDate", oTransaction.Lines[i].LineNotes[j].StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@dtCreatedDateTime", oTransaction.Lines[i].LineNotes[j].dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);
                                oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters);
                            }//End Lines Notes 
                        }

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.Lines[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPaymentMode", oTransaction.Lines[i].InsuranceSelfMode.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_Mst_Ins", oDBParameters);



                    }
                }

                //Code added on 20091104 By - Mukesh Patel

                #region " Insurance Plan "

                //Delete the existing Transaction Insurance Plans if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_InsPlan WHERE nTransactionID = " + TransactionID);

                //Add Transaction Insurance Plans 
                if (oTransaction.InsurancePlans != null)
                {
                    for (int i = 0; i < oTransaction.InsurancePlans.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.InsurancePlans[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nContactID", oTransaction.InsurancePlans[i].ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nResponsibilityNo", oTransaction.InsurancePlans[i].ResponsibilityNo.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nResponsibilityType", oTransaction.InsurancePlans[i].ResponsibilityType, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nClinicID", oTransaction.InsurancePlans[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_InsPlan", oDBParameters);

                    }
                }

                #endregion
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                TransactionID = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                TransactionID = 0;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }

            return TransactionID;

        }

        public Int64 AddTransactionModifySave(Common.Transaction oTransaction, Int64 nClinicID)
        {
            Int64 TransactionID = 0;
            Int64 TransactionDetailID = 0;
           // Int64 BatchID = 0;
            Object objectID;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
          //  Int64 _PrefixID = 123;
            ArrayList _arrDeleteTrnDtlIds = new ArrayList();

            try
            {
                oDB.Connect(false);

                // For the Transaction_MST Table
                //@nTransactionID,@nMasterAppointmentID,@nAppointmentID ,@nVisitID ,@nTransactionDate,@sCaseNoPrefix , 
                //@nCaseNo,@nPatientID ,@nTransactionProviderID ,@sMaritalStatus ,@sFacilityCode, 
                //@sFacilityDescription varchar(255), 
                //@nTransactionType int,	
                //@nClinicID numeric(18,0),
                //@PrefixID numeric(18,0)

                // Added Later by Anil on 20080912
                //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nMasterAppointmentID", oTransaction.MasterAppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAppointmentID", oTransaction.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nVisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nOnsiteDate", oTransaction.OnsiteDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nInjuryDate", oTransaction.InjuryDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkFromDate", oTransaction.UnableToWorkFromDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkTillDate", oTransaction.UnableToWorkTillDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sCaseNoPrefix", oTransaction.CaseNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sMaritalStatus", oTransaction.MaritalStatus, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityCode", oTransaction.FacilityCode, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityDescription", oTransaction.FacilityDescription, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nTransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                //...Code Changes done on 20090618 by - Sagar Ghodke
                //...Code chages done to implement replication id using DatabaseLayer Method
                //...Below commented code is existing code

                //oDBParameters.Add("@PrefixID", GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                //...End Code changes 20090618-Sagar Ghodke

                //Code added on 20081018 , Sagar Ghodke
                oDBParameters.Add("@nTransactionStatusID", oTransaction.Transaction_Status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@sState", oTransaction.State, ParameterDirection.Input, SqlDbType.VarChar, 50);
                oDBParameters.Add("@nHopitalizationDateFrom", oTransaction.HospitalizationDateFrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nHopitalizationDateTo", oTransaction.HospitalizationDateTo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bOutSideLab", oTransaction.OutSideLab, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@dOutSideLabCharges", oTransaction.OutSideLabCharges, ParameterDirection.Input, SqlDbType.Decimal);

                //End 20081018

                //Code added on 20081020,Sagar Ghodke
                oDBParameters.Add("@bAutoClaim", oTransaction.AutoClaim, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nAccidentDate", oTransaction.AccidentDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bWorkersComp", oTransaction.WorkersComp, ParameterDirection.Input, SqlDbType.Bit);

                //

                //Code added on 20081125 , Sagar Ghodke 
                oDBParameters.Add("@nAuthorizationID", oTransaction.PriorAuthorizationID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sAuthorizationNumber", oTransaction.PriorAuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                //End 20081125

                //Code added on 20081201 , Sagar Ghodke
                oDBParameters.Add("@nReferralID", oTransaction.ReferralProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                //End 20081201

                //20090131
                oDBParameters.Add("@nSendCounter", oTransaction.SendCounter, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nSendToRejection", oTransaction.SendToRejection, ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@nLastStatusId", oTransaction.LastStatusId, ParameterDirection.Input, SqlDbType.BigInt);

                //Code added on 20090505 by - Sagar Ghodke
                //Code added to implement UserId on Transaction

                oDBParameters.Add("nUserID", oTransaction.TransactionUserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("sUserName", oTransaction.TransactionUserName, ParameterDirection.Input, SqlDbType.VarChar);

                //End code add - 20090505,Sagar Ghodke

                //Code added on 20090710,Vinayak Gadekar
                oDBParameters.Add("@bOtherAccident", oTransaction.OtherAccident, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nOtherAccidentDate", oTransaction.OtherAccidentDate, ParameterDirection.Input, SqlDbType.BigInt);

                //...*** Code added on 20090730 by - Sagar Ghodke
                //...
                oDBParameters.Add("@nSendToInsFlag", oTransaction.SendToInsuranceFlag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                //...
                //...*** End code add on 20090730,Sagar Ghodke

                oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit

                oDBParameters.Add("@sWorkersCompNo", oTransaction.WorkersCompNo, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(50),
                oDBParameters.Add("@bIsWorkersCompOnCMS1500", oTransaction.WorkersCompPrintonCMS1500, ParameterDirection.Input, SqlDbType.Bit);
                
                //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
                oDBParameters.Add("@nPAccountID", oTransaction.PAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAccountPatientID", oTransaction.AccountPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nGuarantorID", oTransaction.GuarantorID, ParameterDirection.Input, SqlDbType.BigInt);
                //End

                oDB.Execute("BL_INUP_Transaction_Mst", oDBParameters, out  objectID);

                if (objectID == null)
                { return 0; }
                TransactionID = (Int64)objectID;


                ////Delete the existing Transaction Lines if save modify
                //oDB.Execute_Query("DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID);

                ////End 20080821

                ////Delete the existing BL_Transaction_Lines_Notes
                ////oDB.Execute_Query("DELETE FROM BL_Transaction_Lines_Notes WHERE nTransactionID = " + TransactionID + " AND nClinicID = "+this.ClinicID+" ");

                ////Delete the existing BL_Transaction_Lines_Insurances  
                //oDB.Execute_Query("DELETE FROM BL_Transaction_MST_Ins WHERE nTransactionID = " + TransactionID);



                //Transaction Lines
                if (oTransaction.Lines != null)
                {
                    for (int i = 0; i < oTransaction.Lines.Count; i++)
                    {
                        TransactionDetailID = 0;
                        TransactionDetailID = oTransaction.Lines[i].TransactionDetailID;

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@TransactionDetailID", TransactionDetailID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                        oDBParameters.Add("@nFromDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceFrom.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);

                        //DOS To implementation with null value, for now null value means 0 as it is numeric field

                        if (oTransaction.Lines[i].DateServiceTillIsNull == true)
                        {
                            oDBParameters.Add("@nToDate", 0, ParameterDirection.Input, SqlDbType.BigInt);
                        }
                        else
                        {
                            oDBParameters.Add("@nToDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceTill.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        }

                        oDBParameters.Add("@sPOSCode", oTransaction.Lines[i].POSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sPOSDescription", oTransaction.Lines[i].POSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSCode", oTransaction.Lines[i].TOSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSDescription", oTransaction.Lines[i].TOSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Code", oTransaction.Lines[i].Dx1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Description", oTransaction.Lines[i].Dx1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Code", oTransaction.Lines[i].Dx2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Description", oTransaction.Lines[i].Dx2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Code", oTransaction.Lines[i].Dx3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Description", oTransaction.Lines[i].Dx3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Code", oTransaction.Lines[i].Dx4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Description", oTransaction.Lines[i].Dx4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Code", oTransaction.Lines[i].Dx5Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Description", oTransaction.Lines[i].Dx5Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Code", oTransaction.Lines[i].Dx6Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Description", oTransaction.Lines[i].Dx6Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Code", oTransaction.Lines[i].Dx7Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Description", oTransaction.Lines[i].Dx7Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Code", oTransaction.Lines[i].Dx8Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Description", oTransaction.Lines[i].Dx8Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nDx1Pointer", oTransaction.Lines[i].Dx1Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx2Pointer", oTransaction.Lines[i].Dx2Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx3Pointer", oTransaction.Lines[i].Dx3Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx4Pointer", oTransaction.Lines[i].Dx4Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx5Pointer", oTransaction.Lines[i].Dx5Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx6Pointer", oTransaction.Lines[i].Dx6Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx7Pointer", oTransaction.Lines[i].Dx7Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx8Pointer", oTransaction.Lines[i].Dx8Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sMod1Code", oTransaction.Lines[i].Mod1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod1Description", oTransaction.Lines[i].Mod1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Code", oTransaction.Lines[i].Mod2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Description", oTransaction.Lines[i].Mod2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Code", oTransaction.Lines[i].Mod3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Description", oTransaction.Lines[i].Mod3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Code", oTransaction.Lines[i].Mod4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Description", oTransaction.Lines[i].Mod4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@dCharges", oTransaction.Lines[i].Charges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dUnit", oTransaction.Lines[i].Unit, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dTotal", oTransaction.Lines[i].Total, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dAllowed", oTransaction.Lines[i].AllowedCharges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@nProvider", oTransaction.Lines[i].RefferingProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNumber", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);

                        //Code added on 20081018 , Sagar Ghodke
                        oDBParameters.Add("@nTransactionLineStatus", oTransaction.Lines[i].LineStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        //

                        ///Code added on 20090511 by - Sagar Ghodke
                        /////Code added to implement CLIA number & sent service line in claim file
                        // functionality

                        oDBParameters.Add("@bIsLabCPT", oTransaction.Lines[i].IsLabCPT, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sAuthorizationNo", oTransaction.Lines[i].AuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@bSentToClaim", oTransaction.Lines[i].SendToClaim, ParameterDirection.Input, SqlDbType.Bit);

                        ///End Code add 20090511,Sagar Ghodke
                        ///

                        //Code added on 20090514 by - Sagar Ghodke
                        //Code added to implement LinePrimaryDiagnosis

                        oDBParameters.Add("@sLinePrimaryDxCode", oTransaction.Lines[i].LinePrimaryDxCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sLinePrimaryDxDesc", oTransaction.Lines[i].LinePrimaryDxDesc, ParameterDirection.Input, SqlDbType.VarChar);

                        //End code add 20090514,Sagar Ghodke

                        //...Code added on 20090618 by Sagar Ghodke 
                        //...Code added to implement ReplicationID on Transaction Lines Table 

                        oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                        //...End code add 20090618,Sagar Ghodke

                        oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                        oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                        oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                        oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit

                        //Code added on 20100819 by Sagar Ghodke
                        //Code added to save the NDC fields data 
                        oDBParameters.Add("@nNDCID", oTransaction.Lines[i].NDCID, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0) = NULL,
                        oDBParameters.Add("@sNDCCodeQualifier", oTransaction.Lines[i].NDCCodeQualifier, ParameterDirection.Input, SqlDbType.VarChar, 5);//  VARCHAR(5) = NULL,
                        oDBParameters.Add("@sNDCCode", oTransaction.Lines[i].NDCCode, ParameterDirection.Input, SqlDbType.VarChar, 11);//  varchar(11) = NULL,
                        oDBParameters.Add("@sNDCDescription", oTransaction.Lines[i].NDCDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnitCode", oTransaction.Lines[i].NDCUnitCode, ParameterDirection.Input, SqlDbType.VarChar, 5);//  varchar(5) = NULL,
                        oDBParameters.Add("@sNDCUnitDescription", oTransaction.Lines[i].NDCUnitDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnit", oTransaction.Lines[i].NDCUnit, ParameterDirection.Input, SqlDbType.VarChar, 13);//  varchar(13) = NULL,
                        oDBParameters.Add("@sNDCUnitPricing", oTransaction.Lines[i].NDCUnitPricing, ParameterDirection.Input, SqlDbType.VarChar, 15);//  varchar(15) = NULL
                        oDBParameters.Add("@sPrescription", oTransaction.Lines[i].Prescription, ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL
                        //End code add on 20100819 by Sagar Ghodke

                        objectID = null;
                        oDB.Execute("BL_INUP_Transaction_Lines", oDBParameters, out  objectID);
                        if (objectID == null)
                        { return 0; }
                        TransactionDetailID = (Int64)objectID;

                        if (TransactionDetailID > 0)
                        {
                            _arrDeleteTrnDtlIds.Add(TransactionDetailID);
                        }


                        //Notes
                        //Transaction Lines-->Notes
                        if (oTransaction.Lines[i].LineNotes != null)
                        {
                            for (int j = 0; j < oTransaction.Lines[i].LineNotes.Count; j++)
                            {

                                oDBParameters.Clear();
                                //@nTransactionID numeric(18,0),@nLineNo numeric (18,0), @nNoteType int, @nNoteId numeric (18,0), 
                                //@nNoteDateTime numeric (18,0), @nUserID numeric (18,0), @nNoteDescription varchar(255),@nClinicID numeric(18,0)

                                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nLineNo", oTransaction.Lines[i].LineNotes[j].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteType", oTransaction.Lines[i].LineNotes[j].NoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nNoteId", oTransaction.Lines[i].LineNotes[j].NoteID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteDateTime", oTransaction.Lines[i].LineNotes[j].NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nUserID", oTransaction.Lines[i].LineNotes[j].UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@sNoteDescription", oTransaction.Lines[i].LineNotes[j].NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                                oDBParameters.Add("@nClinicID", oTransaction.Lines[i].LineNotes[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nStatementNoteDate", oTransaction.Lines[i].LineNotes[j].StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@dtCreatedDateTime", oTransaction.Lines[i].LineNotes[j].dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);
                                oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters);
                            }//End Lines Notes 
                        }

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.Lines[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPaymentMode", oTransaction.Lines[i].InsuranceSelfMode.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_Mst_Ins", oDBParameters);



                    }

                    #region " Delete Transaction Lines which are removed from Claim "

                    string _strTrnDtlIds = "";
                    if (_arrDeleteTrnDtlIds != null && _arrDeleteTrnDtlIds.Count > 0)
                    {
                        for (int i = 0; i < _arrDeleteTrnDtlIds.Count; i++)
                        {
                            _strTrnDtlIds += Convert.ToString(_arrDeleteTrnDtlIds[i]) + ",";
                        }
                        _strTrnDtlIds = _strTrnDtlIds.TrimEnd(',');
                    }

                    if (_strTrnDtlIds.Trim() != "")
                    {
                        string _strQuery = "";
                        _strQuery = " DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID + " " +
                        " AND nTransactionDetailID NOT IN (" + _strTrnDtlIds.Trim() + ") ";
                        int _val = oDB.Execute_Query(_strQuery);
                        //oDB.Execute_Query("DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID);
                    }
                    if (_arrDeleteTrnDtlIds != null)
                    {
                        _arrDeleteTrnDtlIds.Clear();
                        _arrDeleteTrnDtlIds = null;
                    }
                    #endregion " Delete Transaction Lines which are removed from Claim "



                }

                //Code added on 20091104 By - Mukesh Patel

                #region " Insurance Plan "

                //Delete the existing Transaction Insurance Plans if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_InsPlan WHERE nTransactionID = " + TransactionID);

                //Add Transaction Insurance Plans 
                if (oTransaction.InsurancePlans != null)
                {
                    for (int i = 0; i < oTransaction.InsurancePlans.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.InsurancePlans[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nContactID", oTransaction.InsurancePlans[i].ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nResponsibilityNo", oTransaction.InsurancePlans[i].ResponsibilityNo.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nResponsibilityType", oTransaction.InsurancePlans[i].ResponsibilityType, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nClinicID", oTransaction.InsurancePlans[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_InsPlan", oDBParameters);

                    }
                }

                #endregion
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                TransactionID = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                TransactionID = 0;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }

            return TransactionID;

        }

        public Int64 AddChargesModifySave(Common.Transaction oTransaction, Int64 nClinicID)
        {
            Int64 TransactionID = 0;
            Int64 TransactionDetailID = 0;
         //   Int64 BatchID = 0;
            Object objectID;
            Object oClaimNo;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
          //  Int64 _PrefixID = 123;
            ArrayList _arrDeleteTrnDtlIds = new ArrayList();

            try
            {
                oDB.Connect(false);

                // For the Transaction_MST Table
                //@nTransactionID,@nMasterAppointmentID,@nAppointmentID ,@nVisitID ,@nTransactionDate,@sCaseNoPrefix , 
                //@nCaseNo,@nPatientID ,@nTransactionProviderID ,@sMaritalStatus ,@sFacilityCode, 
                //@sFacilityDescription varchar(255), 
                //@nTransactionType int,	
                //@nClinicID numeric(18,0),
                //@PrefixID numeric(18,0)

                // Added Later by Anil on 20080912
                //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nMasterAppointmentID", oTransaction.MasterAppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAppointmentID", oTransaction.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nVisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nOnsiteDate", oTransaction.OnsiteDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nInjuryDate", oTransaction.InjuryDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkFromDate", oTransaction.UnableToWorkFromDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nUnableToWorkTillDate", oTransaction.UnableToWorkTillDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sCaseNoPrefix", oTransaction.CaseNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sMaritalStatus", oTransaction.MaritalStatus, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityCode", oTransaction.FacilityCode, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sFacilityDescription", oTransaction.FacilityDescription, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nTransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                //...Code Changes done on 20090618 by - Sagar Ghodke
                //...Code chages done to implement replication id using DatabaseLayer Method
                //...Below commented code is existing code

                //oDBParameters.Add("@PrefixID", GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                //...End Code changes 20090618-Sagar Ghodke

                //Code added on 20081018 , Sagar Ghodke
                oDBParameters.Add("@nTransactionStatusID", oTransaction.Transaction_Status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@sState", oTransaction.State, ParameterDirection.Input, SqlDbType.VarChar, 50);
                oDBParameters.Add("@nHopitalizationDateFrom", oTransaction.HospitalizationDateFrom, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nHopitalizationDateTo", oTransaction.HospitalizationDateTo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bOutSideLab", oTransaction.OutSideLab, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@dOutSideLabCharges", oTransaction.OutSideLabCharges, ParameterDirection.Input, SqlDbType.Decimal);

                //End 20081018

                //Code added on 20081020,Sagar Ghodke
                oDBParameters.Add("@bAutoClaim", oTransaction.AutoClaim, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nAccidentDate", oTransaction.AccidentDate, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bWorkersComp", oTransaction.WorkersComp, ParameterDirection.Input, SqlDbType.Bit);

                //

                //Code added on 20081125 , Sagar Ghodke 
                oDBParameters.Add("@nAuthorizationID", oTransaction.PriorAuthorizationID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sAuthorizationNumber", oTransaction.PriorAuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                //End 20081125

                //Code added on 20081201 , Sagar Ghodke
                oDBParameters.Add("@nReferralID", oTransaction.ReferralProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                //End 20081201

                //20090131
                oDBParameters.Add("@nSendCounter", oTransaction.SendCounter, ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nSendToRejection", oTransaction.SendToRejection, ParameterDirection.Input, SqlDbType.Int);

                oDBParameters.Add("@nLastStatusId", oTransaction.LastStatusId, ParameterDirection.Input, SqlDbType.BigInt);

                //Code added on 20090505 by - Sagar Ghodke
                //Code added to implement UserId on Transaction

                oDBParameters.Add("nUserID", oTransaction.TransactionUserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("sUserName", oTransaction.TransactionUserName, ParameterDirection.Input, SqlDbType.VarChar);

                //End code add - 20090505,Sagar Ghodke

                //Code added on 20090710,Vinayak Gadekar
                oDBParameters.Add("@bOtherAccident", oTransaction.OtherAccident, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@nOtherAccidentDate", oTransaction.OtherAccidentDate, ParameterDirection.Input, SqlDbType.BigInt);

                //...*** Code added on 20090730 by - Sagar Ghodke
                //...
                oDBParameters.Add("@nSendToInsFlag", oTransaction.SendToInsuranceFlag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                //...
                //...*** End code add on 20090730,Sagar Ghodke

                oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit

                oDBParameters.Add("@sWorkersCompNo", oTransaction.WorkersCompNo, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(50),

                //Hold Fee Schedule
                oDBParameters.Add("@nFeeScheduleType", oTransaction.FeeScheduleType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nFeeScheduleID", oTransaction.FeeScheduleID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nFacilityType", oTransaction.FacilityType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);

                //Added By Debasish on 10th jun 2010
                oDBParameters.Add("@bSameAsBillingProvider", oTransaction.IsSameAsBillingProvider, ParameterDirection.Input, SqlDbType.Bit);// bit
                //***

                //Added By Debasish on 16th jun 2010
                oDBParameters.Add("@nReferralProviderID", oTransaction.ReferalProviderID_New, ParameterDirection.Input, SqlDbType.BigInt);
                //***

                //Added By abhisekh on 19th aug 2010
                oDBParameters.Add("@bIsReplacementClaim", oTransaction.IsReplacementClaim, ParameterDirection.Input, SqlDbType.Bit);
                //***


                
                //***
                //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
                oDBParameters.Add("@nPAccountID", oTransaction.PAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nAccountPatientID", oTransaction.AccountPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nGuarantorID", oTransaction.GuarantorID, ParameterDirection.Input, SqlDbType.BigInt);
                //End

                //Added By mukesh on 12 Nov 2010
                oDBParameters.Add("@nIllnessDate", oTransaction.IllnessDate, ParameterDirection.Input, SqlDbType.BigInt);
                //***

                oDBParameters.Add("@nLastSeenDate", oTransaction.LastSeenDate, ParameterDirection.Input, SqlDbType.BigInt);

                //add on 20110630 by Mahesh Nawal for 6031
                oDBParameters.Add("@sDelayReasonCode", oTransaction.DelayReasonCodeID, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sServiceAuthExceCode", oTransaction.ServiceAuthExceCode, ParameterDirection.Input, SqlDbType.VarChar);

                oDBParameters.Add("@bIsRefProvAsSupervisor", oTransaction.bIsRefprovAsSupervisor, ParameterDirection.Input, SqlDbType.Bit);

                oDBParameters.Add("@dtInitTreatmentDate", oTransaction.dtInitTreatmentDate, ParameterDirection.Input, SqlDbType.Date);
                if (oTransaction.nClaimCategoryID == 0)
                {
                    oDBParameters.Add("@nClaimReportingCategoryID", DBNull.Value, ParameterDirection.Input, SqlDbType.BigInt);
                }
                else
                {
                    oDBParameters.Add("@nClaimReportingCategoryID", oTransaction.nClaimCategoryID, ParameterDirection.Input, SqlDbType.BigInt);
                }

                oDBParameters.Add("@dtBox15Date", oTransaction.ClaimBox15Date, ParameterDirection.Input, SqlDbType.Date);// DATE = NULL ,
                oDBParameters.Add("@sBox15DateQualifier", oTransaction.ClaimBox15QualifierCode, ParameterDirection.Input, SqlDbType.VarChar, 5);// VARCHAR(5) = NULL,
                oDBParameters.Add("@sProviderQualifier", oTransaction.ProviderQualifierCode, ParameterDirection.Input, SqlDbType.VarChar, 5);// VARCHAR(5) = NULL
                oDBParameters.Add("@sBox14DateQualifier", oTransaction.ClaimBox14QualifierCode, ParameterDirection.Input, SqlDbType.VarChar, 5);// VARCHAR(5) = NULL,
                oDBParameters.Add("@sCLIANumber", oTransaction.CLIANumber, ParameterDirection.Input, SqlDbType.VarChar, 255);// VARCHAR(5) = NULL,

                oDB.Execute("BL_INUP_Transaction_Mst", oDBParameters, out  objectID, out oClaimNo);

                if (objectID == null)
                { return 0; }
                TransactionID = (Int64)objectID;

                if (oClaimNo != null)
                {
                    oTransaction.ClaimNo = (Int64)oClaimNo;
                }

                oTransaction.TransactionID = TransactionID;
                oTransaction.TransactionMasterID = TransactionID;

                //Transaction Lines
                if (oTransaction.Lines != null)
                {
                    for (int i = 0; i < oTransaction.Lines.Count; i++)
                    {
                        TransactionDetailID = 0;
                        TransactionDetailID = oTransaction.Lines[i].TransactionDetailID;

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@TransactionDetailID", TransactionDetailID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                        oDBParameters.Add("@nFromDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceFrom.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        
                        //DOS To implementation with null value, for now null value means 0 as it is numeric field

                        if (oTransaction.Lines[i].DateServiceTillIsNull == true)
                        {
                            oDBParameters.Add("@nToDate", 0, ParameterDirection.Input, SqlDbType.BigInt);
                        }
                        else
                        {
                            oDBParameters.Add("@nToDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceTill.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                        }


                        oDBParameters.Add("@sPOSCode", oTransaction.Lines[i].POSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sPOSDescription", oTransaction.Lines[i].POSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSCode", oTransaction.Lines[i].TOSCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sTOSDescription", oTransaction.Lines[i].TOSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sCPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Code", oTransaction.Lines[i].Dx1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx1Description", oTransaction.Lines[i].Dx1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Code", oTransaction.Lines[i].Dx2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx2Description", oTransaction.Lines[i].Dx2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Code", oTransaction.Lines[i].Dx3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx3Description", oTransaction.Lines[i].Dx3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Code", oTransaction.Lines[i].Dx4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx4Description", oTransaction.Lines[i].Dx4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Code", oTransaction.Lines[i].Dx5Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx5Description", oTransaction.Lines[i].Dx5Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Code", oTransaction.Lines[i].Dx6Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx6Description", oTransaction.Lines[i].Dx6Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Code", oTransaction.Lines[i].Dx7Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx7Description", oTransaction.Lines[i].Dx7Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Code", oTransaction.Lines[i].Dx8Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sDx8Description", oTransaction.Lines[i].Dx8Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nDx1Pointer", oTransaction.Lines[i].Dx1Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx2Pointer", oTransaction.Lines[i].Dx2Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx3Pointer", oTransaction.Lines[i].Dx3Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx4Pointer", oTransaction.Lines[i].Dx4Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx5Pointer", oTransaction.Lines[i].Dx5Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx6Pointer", oTransaction.Lines[i].Dx6Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx7Pointer", oTransaction.Lines[i].Dx7Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@nDx8Pointer", oTransaction.Lines[i].Dx8Ptr, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sMod1Code", oTransaction.Lines[i].Mod1Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod1Description", oTransaction.Lines[i].Mod1Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Code", oTransaction.Lines[i].Mod2Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod2Description", oTransaction.Lines[i].Mod2Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Code", oTransaction.Lines[i].Mod3Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod3Description", oTransaction.Lines[i].Mod3Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Code", oTransaction.Lines[i].Mod4Code, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sMod4Description", oTransaction.Lines[i].Mod4Description, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@dCharges", oTransaction.Lines[i].Charges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dUnit", oTransaction.Lines[i].Unit, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dTotal", oTransaction.Lines[i].Total, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@dAllowed", oTransaction.Lines[i].AllowedCharges, ParameterDirection.Input, SqlDbType.Decimal);
                        oDBParameters.Add("@nProvider", oTransaction.Lines[i].RefferingProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNumber", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);

                        //Code added on 20081018 , Sagar Ghodke
                        oDBParameters.Add("@nTransactionLineStatus", oTransaction.Lines[i].LineStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        //

                        ///Code added on 20090511 by - Sagar Ghodke
                        /////Code added to implement CLIA number & sent service line in claim file
                        // functionality

                        oDBParameters.Add("@bIsLabCPT", oTransaction.Lines[i].IsLabCPT, ParameterDirection.Input, SqlDbType.Bit);
                        oDBParameters.Add("@sAuthorizationNo", oTransaction.Lines[i].AuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@bSentToClaim", oTransaction.Lines[i].SendToClaim, ParameterDirection.Input, SqlDbType.Bit);

                        ///End Code add 20090511,Sagar Ghodke
                        ///

                        //Code added on 20090514 by - Sagar Ghodke
                        //Code added to implement LinePrimaryDiagnosis

                        oDBParameters.Add("@sLinePrimaryDxCode", oTransaction.Lines[i].LinePrimaryDxCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sLinePrimaryDxDesc", oTransaction.Lines[i].LinePrimaryDxDesc, ParameterDirection.Input, SqlDbType.VarChar);

                        //End code add 20090514,Sagar Ghodke

                        //...Code added on 20090618 by Sagar Ghodke 
                        //...Code added to implement ReplicationID on Transaction Lines Table 

                        oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);

                        //...End code add 20090618,Sagar Ghodke

                        oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                        oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                        oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                        oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit

                        oDBParameters.Add("@dPatientResponsibility", oTransaction.Lines[i].PatientResponsibility, ParameterDirection.Input, SqlDbType.Decimal);// varchar(255),
                        oDBParameters.Add("@sHoldReason", oTransaction.Lines[i].HoldReason, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                        oDBParameters.Add("@bIsHold", oTransaction.Lines[i].IsHold, ParameterDirection.Input, SqlDbType.Bit);// bit                        

                        //Hold Fee Schedule
                        oDBParameters.Add("@nFeeScheduleType", oTransaction.Lines[i].FeeScheduleType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nFeeScheduleID", oTransaction.Lines[i].FeeScheduleID, ParameterDirection.Input, SqlDbType.BigInt);//
                        oDBParameters.Add("@nFacilityType", oTransaction.Lines[i].FacilityType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);

                        //Code added on 20100819 by Sagar Ghodke
                        //Code added to save the NDC fields data 
                        oDBParameters.Add("@nNDCID", oTransaction.Lines[i].NDCID, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0) = NULL,
                        oDBParameters.Add("@sNDCCodeQualifier", oTransaction.Lines[i].NDCCodeQualifier, ParameterDirection.Input, SqlDbType.VarChar, 5);//  VARCHAR(5) = NULL,
                        oDBParameters.Add("@sNDCCode", oTransaction.Lines[i].NDCCode, ParameterDirection.Input, SqlDbType.VarChar, 11);//  varchar(11) = NULL,
                        oDBParameters.Add("@sNDCDescription", oTransaction.Lines[i].NDCDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnitCode", oTransaction.Lines[i].NDCUnitCode, ParameterDirection.Input, SqlDbType.VarChar, 5);//  varchar(5) = NULL,
                        oDBParameters.Add("@sNDCUnitDescription", oTransaction.Lines[i].NDCUnitDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                        oDBParameters.Add("@sNDCUnit", oTransaction.Lines[i].NDCUnit, ParameterDirection.Input, SqlDbType.VarChar, 13);//  varchar(13) = NULL,
                        oDBParameters.Add("@sNDCUnitPricing", oTransaction.Lines[i].NDCUnitPricing, ParameterDirection.Input, SqlDbType.VarChar, 15);//  varchar(15) = NULL
                        //End code add on 20100819 by Sagar Ghodke
                        oDBParameters.Add("@sPrescription", oTransaction.Lines[i].Prescription, ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL

                        oDBParameters.Add("@sPrescriptionDesc", oTransaction.Lines[i].PrescriptionDescription, ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL


                        //Added By mukesh on 12 Nov 2010
                        oDBParameters.Add("@bEMG", oTransaction.Lines[i].EMG, ParameterDirection.Input, SqlDbType.Bit);
                        //***


                        objectID = null;
                        oDB.Execute("BL_INUP_Charges_Lines", oDBParameters, out  objectID);
                        if (objectID == null)
                        { return 0; }
                        TransactionDetailID = (Int64)objectID;

                        oTransaction.Lines[i].TransactionDetailID = TransactionDetailID;
                        oTransaction.Lines[i].TransactionMasterDetailID = TransactionDetailID;

                        if (TransactionDetailID > 0)
                        {
                            _arrDeleteTrnDtlIds.Add(TransactionDetailID);
                        }


                        //Notes
                        //Transaction Lines-->Notes
                        if (oTransaction.Lines[i].LineNotes != null)
                        {
                            for (int j = 0; j < oTransaction.Lines[i].LineNotes.Count; j++)
                            {

                                oDBParameters.Clear();
                                //@nTransactionID numeric(18,0),@nLineNo numeric (18,0), @nNoteType int, @nNoteId numeric (18,0), 
                                //@nNoteDateTime numeric (18,0), @nUserID numeric (18,0), @nNoteDescription varchar(255),@nClinicID numeric(18,0)

                                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nLineNo", oTransaction.Lines[i].LineNotes[j].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteType", oTransaction.Lines[i].LineNotes[j].NoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nNoteId", oTransaction.Lines[i].LineNotes[j].NoteID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oDBParameters.Add("@nNoteDateTime", oTransaction.Lines[i].LineNotes[j].NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nUserID", oTransaction.Lines[i].LineNotes[j].UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@sNoteDescription", oTransaction.Lines[i].LineNotes[j].NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                                oDBParameters.Add("@nClinicID", oTransaction.Lines[i].LineNotes[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nBillingNoteType", oTransaction.Lines[i].LineNotes[j].BillingNoteType, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nCloseDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@nStatementNoteDate", oTransaction.Lines[i].LineNotes[j].StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                                oDBParameters.Add("@dtCreatedDateTime", oTransaction.Lines[i].LineNotes[j].dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);

                                oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters);
                            }//End Lines Notes 
                        }

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.Lines[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPaymentMode", oTransaction.Lines[i].InsuranceSelfMode.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_Mst_Ins", oDBParameters);

                        oDBParameters.Clear();

                        //if (oTransaction.Lines[i].bIsAneshtesia)
                        //{
                        //    oDBParameters.Add("@bIsAnesthesia", oTransaction.Lines[i].bIsAneshtesia, ParameterDirection.Input, SqlDbType.Bit);
                        //    oDBParameters.Add("@nAnesthesiaID", oTransaction.Lines[i].AnesthesiaID, ParameterDirection.Input, SqlDbType.BigInt);
                        //    oDBParameters.Add("@nTransactionMasterID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        //    oDBParameters.Add("@nTransactionMasterDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        //    oDBParameters.Add("@nTransactionID", oTransaction.ActualTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        //    oDBParameters.Add("@nTransactionDetailID", oTransaction.Lines[i].ActualTransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        //    oDBParameters.Add("@dtStartDateTime", oTransaction.Lines[i].AnesthesiaStartTime, ParameterDirection.Input, SqlDbType.DateTime);
                        //    oDBParameters.Add("@dtEndDateTime", oTransaction.Lines[i].AnesthesiaEndTime, ParameterDirection.Input, SqlDbType.DateTime);
                        //    oDBParameters.Add("@nTotalMinutes", oTransaction.Lines[i].AnesthesiaTotalMinutes, ParameterDirection.Input, SqlDbType.BigInt);
                        //    oDBParameters.Add("@dMinPerUnit", oTransaction.Lines[i].AnesthesiaMinPerUnit, ParameterDirection.Input, SqlDbType.Decimal);
                        //    oDBParameters.Add("@dTimeUnits", oTransaction.Lines[i].AnesthesiaTimeUnits, ParameterDirection.Input, SqlDbType.Decimal);
                        //    oDBParameters.Add("@dBaseUnits", oTransaction.Lines[i].AnesthesiaBaseUnits, ParameterDirection.Input, SqlDbType.Decimal);
                        //    oDBParameters.Add("@dOtherUnits", oTransaction.Lines[i].AnesthesiaOtherUnits, ParameterDirection.Input, SqlDbType.Decimal);
                        //    oDBParameters.Add("@dTotalUnits", oTransaction.Lines[i].AnesthesiaTotalUnits, ParameterDirection.Input, SqlDbType.Decimal);
                        //    oDBParameters.Add("@bIsAutoCalculate", oTransaction.Lines[i].bIsAutoCalculateAnesthesia, ParameterDirection.Input, SqlDbType.Bit);
                        //    oDB.Execute("BL_INUP_Anesthesia", oDBParameters);
                        //}
                        //else
                        //{
                        //    if (oTransaction.Lines[i].AnesthesiaID > 0)
                        //    {
                        //        oDBParameters.Add("@bIsAnesthesia", oTransaction.Lines[i].bIsAneshtesia, ParameterDirection.Input, SqlDbType.Bit);
                        //        oDBParameters.Add("@nAnesthesiaID", oTransaction.Lines[i].AnesthesiaID, ParameterDirection.Input, SqlDbType.BigInt);
                        //        oDBParameters.Add("@nTransactionMasterID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        //        oDBParameters.Add("@nTransactionMasterDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        //        oDBParameters.Add("@nTransactionID", oTransaction.ActualTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        //        oDBParameters.Add("@nTransactionDetailID", oTransaction.Lines[i].ActualTransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        //        oDBParameters.Add("@dtStartDateTime", DBNull.Value, ParameterDirection.Input, SqlDbType.DateTime);
                        //        oDBParameters.Add("@dtEndDateTime", DBNull.Value, ParameterDirection.Input, SqlDbType.DateTime);
                        //        oDBParameters.Add("@nTotalMinutes", DBNull.Value, ParameterDirection.Input, SqlDbType.BigInt);
                        //        oDBParameters.Add("@dMinPerUnit", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                        //        oDBParameters.Add("@dTimeUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                        //        oDBParameters.Add("@dBaseUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                        //        oDBParameters.Add("@dOtherUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                        //        oDBParameters.Add("@dTotalUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                        //        oDBParameters.Add("@bIsAutoCalculate", DBNull.Value, ParameterDirection.Input, SqlDbType.Bit);
                                
                        //        oDB.Execute("BL_INUP_Anesthesia", oDBParameters);
                        //    }
 
                        //}
                        

                    }

                    #region " Delete Transaction Lines which are removed from Claim "

                    string _strTrnDtlIds = "";
                    if (_arrDeleteTrnDtlIds != null && _arrDeleteTrnDtlIds.Count > 0)
                    {
                        for (int i = 0; i < _arrDeleteTrnDtlIds.Count; i++)
                        {
                            _strTrnDtlIds += Convert.ToString(_arrDeleteTrnDtlIds[i]) + ",";
                        }
                        _strTrnDtlIds = _strTrnDtlIds.TrimEnd(',');
                    }

                    if (_strTrnDtlIds.Trim() != "")
                    {
                        //string _strQuery = "";
                        //_strQuery = " DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID + " " +
                        //" AND nTransactionDetailID NOT IN (" + _strTrnDtlIds.Trim() + ") ";
                        //int _val = oDB.Execute_Query(_strQuery);
                        //oDB.Execute_Query("DELETE FROM BL_Transaction_Lines WHERE nTransactionID = " + TransactionID);

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@sTransactionDetailID", _strTrnDtlIds, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nUserId", gloGlobal.gloPMGlobal.UserID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@sMachineName", Environment.MachineName, ParameterDirection.Input, SqlDbType.VarChar);

                        oDB.Execute("BL_Delete_Transaction_Lines", oDBParameters);

                        oDBParameters.Clear();


                        //_strQuery = " DELETE FROM BL_Transaction_Anesthesia WHERE nTransactionID = " + TransactionID + " " +
                        //" AND nTransactionDetailID NOT IN (" + _strTrnDtlIds.Trim() + ") ";
                        //int _valAnesthesia = oDB.Execute_Query(_strQuery);
                    }
                    if (_arrDeleteTrnDtlIds != null)
                    {
                        _arrDeleteTrnDtlIds.Clear();
                        _arrDeleteTrnDtlIds = null;
                    }
                    #endregion " Delete Transaction Lines which are removed from Claim "
                }

                //Code added on 20091104 By - Mukesh Patel

                #region " Insurance Plan "

                //Delete the existing Transaction Insurance Plans if save modify
                oDB.Execute_Query("DELETE FROM BL_Transaction_InsPlan WHERE nTransactionID = " + TransactionID);

                //Add Transaction Insurance Plans 
                if (oTransaction.InsurancePlans != null)
                {
                    for (int i = 0; i < oTransaction.InsurancePlans.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nInsuranceID", oTransaction.InsurancePlans[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nContactID", oTransaction.InsurancePlans[i].ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nResponsibilityNo", oTransaction.InsurancePlans[i].ResponsibilityNo, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nResponsibilityType", oTransaction.InsurancePlans[i].ResponsibilityType, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nClinicID", oTransaction.InsurancePlans[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                        oDB.Execute("BL_INUP_Transaction_InsPlan", oDBParameters);

                    }
                }

                #endregion
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                TransactionID = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                TransactionID = 0;
            }
            finally
            {
                if (oDBParameters != null) { oDBParameters.Clear(); oDBParameters.Dispose(); }

                if (oDB != null) { oDB.Dispose(); }
            }

            return TransactionID;

        }

        public Int64 AddTransactionClaim(Common.Transaction oTransaction, Int64 nClinicID)
        {
            Int64 TransactionID = 0;
            Int64 TransactionDetailID = 0;
        //    Int64 BatchID = 0;
            Object objectID;

            //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;


        //    Int64 _PrefixID = 123;
         //   ArrayList _arrDeleteTrnDtlIds = new ArrayList();
            Exception _customException = null;

            try
            {
                if (oTransaction != null)
                {
                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDBParameters = new gloDatabaseLayer.DBParameters();
                    if (oTransaction.UseExtSqlConnection == false)
                    {

                        oDB.Connect(false);
                    }


                    // For the Transaction_MST Table
                    //@nTransactionID,@nMasterAppointmentID,@nAppointmentID ,@nVisitID ,@nTransactionDate,@sCaseNoPrefix , 
                    //@nCaseNo,@nPatientID ,@nTransactionProviderID ,@sMaritalStatus ,@sFacilityCode, 
                    //@sFacilityDescription varchar(255), 
                    //@nTransactionType int,	
                    //@nClinicID numeric(18,0),
                    //@PrefixID numeric(18,0)

                    // Added Later by Anil on 20080912
                    //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate



                    oDBParameters.Add("@nTransactionMasterID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                    oDBParameters.Add("@nMasterAppointmentID", oTransaction.MasterAppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nAppointmentID", oTransaction.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nVisitID", oTransaction.VisitID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nOnsiteDate", oTransaction.OnsiteDate, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nInjuryDate", oTransaction.InjuryDate, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nUnableToWorkFromDate", oTransaction.UnableToWorkFromDate, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nUnableToWorkTillDate", oTransaction.UnableToWorkTillDate, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nTransactionDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@sCaseNoPrefix", oTransaction.CaseNoPrefix, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nSubClaimNo", oTransaction.SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nTransactionProviderID", oTransaction.ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@sMaritalStatus", oTransaction.MaritalStatus, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@sFacilityCode", oTransaction.FacilityCode, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@sFacilityDescription", oTransaction.FacilityDescription, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@nTransactionType", oTransaction.TransactionMode, ParameterDirection.Input, SqlDbType.Int);
                    oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                    //...Code Changes done on 20090618 by - Sagar Ghodke
                    //...Code chages done to implement replication id using DatabaseLayer Method
                    //...Below commented code is existing code

                    //oDBParameters.Add("@PrefixID", GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                    if (oTransaction.UseExtSqlConnection == false)
                    { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }
                    else
                    { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.ExtSqlConnection, oTransaction.ExtSqlTransaction, true, oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }


                    //...End Code changes 20090618-Sagar Ghodke

                    //Code added on 20081018 , Sagar Ghodke
                    oDBParameters.Add("@nTransactionStatusID", oTransaction.Transaction_Status.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                    oDBParameters.Add("@sState", oTransaction.State, ParameterDirection.Input, SqlDbType.VarChar, 50);
                    oDBParameters.Add("@nHopitalizationDateFrom", oTransaction.HospitalizationDateFrom, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nHopitalizationDateTo", oTransaction.HospitalizationDateTo, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@bOutSideLab", oTransaction.OutSideLab, ParameterDirection.Input, SqlDbType.Bit);
                    oDBParameters.Add("@dOutSideLabCharges", oTransaction.OutSideLabCharges, ParameterDirection.Input, SqlDbType.Decimal);

                    //End 20081018

                    //Code added on 20081020,Sagar Ghodke
                    oDBParameters.Add("@bAutoClaim", oTransaction.AutoClaim, ParameterDirection.Input, SqlDbType.Bit);
                    oDBParameters.Add("@nAccidentDate", oTransaction.AccidentDate, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@bWorkersComp", oTransaction.WorkersComp, ParameterDirection.Input, SqlDbType.Bit);

                    //

                    //Code added on 20081125 , Sagar Ghodke 
                    oDBParameters.Add("@nAuthorizationID", oTransaction.PriorAuthorizationID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@sAuthorizationNumber", oTransaction.PriorAuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                    //End 20081125

                    //Code added on 20081201 , Sagar Ghodke
                    oDBParameters.Add("@nReferralID", oTransaction.ReferralProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                    //End 20081201

                    //20090131
                    oDBParameters.Add("@nSendCounter", oTransaction.SendCounter, ParameterDirection.Input, SqlDbType.Int);
                    oDBParameters.Add("@nSendToRejection", oTransaction.SendToRejection, ParameterDirection.Input, SqlDbType.Int);

                    oDBParameters.Add("@nLastStatusId", oTransaction.LastStatusId, ParameterDirection.Input, SqlDbType.BigInt);

                    //Code added on 20090505 by - Sagar Ghodke
                    //Code added to implement UserId on Transaction

                    oDBParameters.Add("nUserID", oTransaction.TransactionUserID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("sUserName", oTransaction.TransactionUserName, ParameterDirection.Input, SqlDbType.VarChar);

                    //End code add - 20090505,Sagar Ghodke

                    //Code added on 20090710,Vinayak Gadekar
                    oDBParameters.Add("@bOtherAccident", oTransaction.OtherAccident, ParameterDirection.Input, SqlDbType.Bit);
                    oDBParameters.Add("@nOtherAccidentDate", oTransaction.OtherAccidentDate, ParameterDirection.Input, SqlDbType.BigInt);

                    //...*** Code added on 20090730 by - Sagar Ghodke
                    //...
                    oDBParameters.Add("@nSendToInsFlag", oTransaction.SendToInsuranceFlag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                    //...
                    //...*** End code add on 20090730,Sagar Ghodke

                    oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                    oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                    oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                    oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit

                    oDBParameters.Add("@sWorkersCompNo", oTransaction.WorkersCompNo, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(50),
                    oDBParameters.Add("@bIsWorkersCompOnCMS1500", oTransaction.WorkersCompPrintonCMS1500, ParameterDirection.Input, SqlDbType.Bit);

                    #region " Insurance Party "
                    oDBParameters.Add("@nInsuranceID", oTransaction.InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nContactID", oTransaction.ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nResponsibilityNo", oTransaction.ResponsibilityNo, ParameterDirection.Input, SqlDbType.Int);
                    oDBParameters.Add("@nResponsibilityType", oTransaction.ResponsibilityType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                    #endregion " Insurance Party "


                    oDBParameters.Add("@nClaimStatus", oTransaction.ClaimStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);


                    #region " Parent Transaction ID and Claim No "

                    oDBParameters.Add("@nParentTransactionID", oTransaction.ParentTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nParentClaimNo", oTransaction.ParentClaimNo, ParameterDirection.Input, SqlDbType.VarChar);

                    #endregion

                    //Hold Fee Schedule
                    oDBParameters.Add("@nFeeScheduleType", oTransaction.FeeScheduleType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                    oDBParameters.Add("@nFeeScheduleID", oTransaction.FeeScheduleID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nFacilityType", oTransaction.FacilityType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);

                    oDBParameters.Add("@bIsRebilled", oTransaction.IsRebill, ParameterDirection.Input, SqlDbType.Bit);

                    //Added By Debasish Das on 10th Jun 2010
                    oDBParameters.Add("@bSameAsBillingProvider", oTransaction.IsSameAsBillingProvider, ParameterDirection.Input, SqlDbType.Bit);
                    //**

                    //Added By Debasish on 16th jun 2010
                    oDBParameters.Add("@nReferralProviderID", oTransaction.ReferalProviderID_New, ParameterDirection.Input, SqlDbType.BigInt);
                    //***

                    //Added By Debasish on 8th July 2010
                    oDBParameters.Add("@bUpdateAllClaims", true, ParameterDirection.Input, SqlDbType.Bit);
                    //***
                    //Added By abhisekh on 19th aug 2010
                    oDBParameters.Add("@bIsReplacementClaim", oTransaction.IsReplacementClaim, ParameterDirection.Input, SqlDbType.Bit);
                    //***

                    //Added By mukesh on 12 Nov 2010
                    oDBParameters.Add("@nIllnessDate", oTransaction.IllnessDate, ParameterDirection.Input, SqlDbType.BigInt);
                    //***

                    oDBParameters.Add("@nLastSeenDate", oTransaction.LastSeenDate, ParameterDirection.Input, SqlDbType.BigInt);


                    //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
                    oDBParameters.Add("@nPAccountID", oTransaction.PAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nAccountPatientID", oTransaction.AccountPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@nGuarantorID", oTransaction.GuarantorID, ParameterDirection.Input, SqlDbType.BigInt);
                    //End
					
					  //add on 20110630 by Mahesh Nawal for 6031
                    oDBParameters.Add("@sDelayReasonCode", oTransaction.DelayReasonCodeID, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@sServiceAuthExceCode", oTransaction.ServiceAuthExceCode, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@nCaseID", oTransaction.CaseID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDBParameters.Add("@bIsRefProvAsSupervisor", oTransaction.bIsRefprovAsSupervisor, ParameterDirection.Input, SqlDbType.Bit);
					oDBParameters.Add("@dtInitTreatmentDate", oTransaction.dtInitTreatmentDate, ParameterDirection.Input, SqlDbType.Date);	
                    oDBParameters.Add("@sMedicaidResubmissionCode", oTransaction.MedicaidResubmissioncode, ParameterDirection.Input, SqlDbType.VarChar);

                    oDBParameters.Add("@bIsEPSDTScreening", oTransaction.ClaimEPSDT.ClaimIncludeEPSDTScreening, ParameterDirection.Input, SqlDbType.Bit);
                    oDBParameters.Add("@bIsEPSDTReferral", oTransaction.ClaimEPSDT.PatientGivenEPSDTReferral, ParameterDirection.Input, SqlDbType.Bit);
                    oDBParameters.Add("@sReferralType", oTransaction.ClaimEPSDT.ReferralType, ParameterDirection.Input, SqlDbType.VarChar);
                    oDBParameters.Add("@sReferralCode", oTransaction.ClaimEPSDT.ReferralCode, ParameterDirection.Input, SqlDbType.VarChar);
                    if (oTransaction.nClaimCategoryID == 0)
                    {
                        oDBParameters.Add("@nClaimReportingCategoryID", DBNull.Value, ParameterDirection.Input, SqlDbType.BigInt);
                    }
                    else
                    {
                        oDBParameters.Add("@nClaimReportingCategoryID", oTransaction.nClaimCategoryID, ParameterDirection.Input, SqlDbType.BigInt);
                    }

                    oDBParameters.Add("@dtBox15Date", oTransaction.ClaimBox15Date, ParameterDirection.Input, SqlDbType.Date);// DATE = NULL ,
                    oDBParameters.Add("@sBox15DateQualifier", oTransaction.ClaimBox15QualifierCode, ParameterDirection.Input, SqlDbType.VarChar,5);// VARCHAR(5) = NULL,
                    oDBParameters.Add("@sProviderQualifier", oTransaction.ProviderQualifierCode, ParameterDirection.Input, SqlDbType.VarChar,5);// VARCHAR(5) = NULL
                    oDBParameters.Add("@nICDRevision", oTransaction.nICDRevision, ParameterDirection.Input, SqlDbType.Int );// VARCHAR(5) = NULL
                    oDBParameters.Add("@sBox14DateQualifier", oTransaction.ClaimBox14QualifierCode, ParameterDirection.Input, SqlDbType.VarChar, 5);// VARCHAR(5) = NULL,
                    oDBParameters.Add("@sPWKReportTypeCode", oTransaction.PWKReportTypeCode, ParameterDirection.Input, SqlDbType.VarChar);// VARCHAR(5) = NULL,
                    oDBParameters.Add("@sPWKReportTransmissionCode", oTransaction.PWKReportTransmissionCode, ParameterDirection.Input, SqlDbType.VarChar);// VARCHAR(5) = NULL,
                    oDBParameters.Add("@sPWKAttachmentControlNumber", oTransaction.PWKAttachmentControlNumber, ParameterDirection.Input, SqlDbType.VarChar);// VARCHAR(5) = NULL,
                    oDBParameters.Add("@sMammogramCertNumber",oTransaction.MammogramCertNumber,ParameterDirection.Input,SqlDbType.VarChar);
                    oDBParameters.Add("@sCLIANumber", oTransaction.CLIANumber, ParameterDirection.Input, SqlDbType.VarChar);// VARCHAR(5) = NULL,
                    oDBParameters.Add("@sIDENo", oTransaction.IDENo, ParameterDirection.Input, SqlDbType.VarChar);// VARCHAR(5) = NULL,
                    //..Code changes done by Sagar Ghodke on 20100719 
                    //..Code chages done for implemention ERA SqlTransaction
                    if (oTransaction.UseExtSqlConnection == false)
                    {
                        oDB.Execute("BL_INUP_Transaction_Claim_Mst", oDBParameters, out  objectID);
                    }
                    else
                    {
                        using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                        {
                            _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                            _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                            _sqlCommand.CommandType = CommandType.StoredProcedure;
                            _sqlCommand.CommandText = "BL_INUP_Transaction_Claim_Mst";

                            int _result = _sqlCommand.ExecuteNonQuery();

                            if (_sqlCommand.Parameters["@nTransactionID"].Value != null)
                            { objectID = _sqlCommand.Parameters["@nTransactionID"].Value; }
                            else
                            { objectID = null; }
                            if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                        }
                    }

                    if (objectID == null)
                    {
                        if (oTransaction.UseExtSqlConnection == false)
                        { return 0; }
                        else
                        {
                            _customException = new Exception("Error creating saving claim information");
                            throw _customException;
                        }
                    }
                    TransactionID = (Int64)objectID;

                    oTransaction.TransactionID = TransactionID;

                    #region "Inserting Hold Information"

                    //********************************
                    //By Debasish on 21st April 2010
                    //Hold Information

                    if (oTransaction.Hold != null)
                    {
                        if (oTransaction.Hold.HoldReason != "" && oTransaction.Hold.HoldModified == true)
                        {
                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionMstID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@bIsHold", oTransaction.Hold.IsHold, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@sHoldReason", oTransaction.Hold.HoldReason, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@dtHoldDateTime", oTransaction.Hold.HoldDateTime, ParameterDirection.Input, SqlDbType.DateTime);
                            oDBParameters.Add("@nHoldUserID", oTransaction.Hold.HoldUserID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nHoldModUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@dtHoldModDateTime", oTransaction.Hold.HoldModDateTime, ParameterDirection.Input, SqlDbType.DateTime);
                            oDBParameters.Add("@nHoldBillingID", oTransaction.Hold.HoldID, ParameterDirection.Input, SqlDbType.BigInt);

                            //oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                            if (oTransaction.UseExtSqlConnection == false)
                            { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }
                            else
                            { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.ExtSqlConnection, oTransaction.ExtSqlTransaction, true, oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }

                            

                            //Console.WriteLine(gloDatabaseLayer.DBLayer.getProcedureExeCode("BL_UPDATE_CLAIM_HOLD", oDBParameters));

                            if (oTransaction.UseExtSqlConnection == false)
                            {
                                oDB.Execute("BL_UPDATE_CLAIM_HOLD", oDBParameters);
                            }
                            else
                            {
                                using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                                {
                                    _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                    _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                    _sqlCommand.CommandType = CommandType.StoredProcedure;
                                    _sqlCommand.CommandText = "BL_UPDATE_CLAIM_HOLD";

                                    int _result = _sqlCommand.ExecuteNonQuery();
                                    if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                                }
                            }


                        }
                    }
                    //*********************************



                    #endregion

                    #region " Insurance Plan "

                    if (oTransaction.UseExtSqlConnection == false)
                    {
                        oDB.Execute_Query("DELETE FROM BL_Claim_Insurance WHERE  nTransactionMasterID = " + oTransaction.TransactionMasterID + " and nTransactionID = " + oTransaction.TransactionID);
                    }
                    else
                    {
                        using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                        {
                            _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                            _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                            _sqlCommand.CommandType = CommandType.Text;
                            _sqlCommand.CommandText = "DELETE FROM BL_Claim_Insurance WHERE  nTransactionMasterID = " + oTransaction.TransactionMasterID + " and nTransactionID = " + oTransaction.TransactionID;

                            int _result = _sqlCommand.ExecuteNonQuery();
                            if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                        }
                    }



                    //Add Transaction Insurance Plans 
                    if (oTransaction.InsurancePlans != null)
                    {
                        for (int i = 0; i < oTransaction.InsurancePlans.Count; i++)
                        {
                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionMasterID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@sSubClaimNo", oTransaction.SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@nInsuranceID", oTransaction.InsurancePlans[i].InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nContactID", oTransaction.InsurancePlans[i].ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nResponsibilityNo", oTransaction.InsurancePlans[i].ResponsibilityNo, ParameterDirection.Input, SqlDbType.Int);
                            oDBParameters.Add("@nResponsibilityType", oTransaction.InsurancePlans[i].ResponsibilityType, ParameterDirection.Input, SqlDbType.Int);
                            oDBParameters.Add("@nClinicID", oTransaction.InsurancePlans[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                            // oDB.Execute("BL_INUP_Transaction_InsPlan", oDBParameters);


                            if (oTransaction.UseExtSqlConnection == false)
                            {
                                oDB.Execute("BL_INUP_Claim_Insurance", oDBParameters);
                            }
                            else
                            {
                                using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                                {
                                    _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                    _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                    _sqlCommand.CommandType = CommandType.StoredProcedure;
                                    _sqlCommand.CommandText = "BL_INUP_Claim_Insurance";

                                    int _result = _sqlCommand.ExecuteNonQuery();
                                    if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                                }
                            }

                        }
                    }

                    #endregion
                    //Transaction Lines
                    if (oTransaction.Lines != null)
                    {
                        for (int i = 0; i < oTransaction.Lines.Count; i++)
                        {
                            TransactionDetailID = 0;
                            //TransactionDetailID = oTransaction.Lines[i].TransactionDetailID;

                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionMasterID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionMasterDetailID", oTransaction.Lines[i].TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@TransactionDetailID", oTransaction.Lines[i].TransactionDetailID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                            oDBParameters.Add("@nFromDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceFrom.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                            
                            //DOS To implementation with null value, for now null value means 0 as it is numeric field

                            if (oTransaction.Lines[i].DateServiceTillIsNull == true)
                            {
                                oDBParameters.Add("@nToDate", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            }
                            else
                            {
                                oDBParameters.Add("@nToDate", gloDateMaster.gloDate.DateAsNumber(oTransaction.Lines[i].DateServiceTill.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);
                            }

                            oDBParameters.Add("@sPOSCode", oTransaction.Lines[i].POSCode, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sPOSDescription", oTransaction.Lines[i].POSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sTOSCode", oTransaction.Lines[i].TOSCode, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sTOSDescription", oTransaction.Lines[i].TOSDescription, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sCPTDescription", oTransaction.Lines[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx1Code", oTransaction.Lines[i].Dx1Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx1Description", oTransaction.Lines[i].Dx1Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx2Code", oTransaction.Lines[i].Dx2Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx2Description", oTransaction.Lines[i].Dx2Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx3Code", oTransaction.Lines[i].Dx3Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx3Description", oTransaction.Lines[i].Dx3Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx4Code", oTransaction.Lines[i].Dx4Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx4Description", oTransaction.Lines[i].Dx4Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx5Code", oTransaction.Lines[i].Dx5Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx5Description", oTransaction.Lines[i].Dx5Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx6Code", oTransaction.Lines[i].Dx6Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx6Description", oTransaction.Lines[i].Dx6Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx7Code", oTransaction.Lines[i].Dx7Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx7Description", oTransaction.Lines[i].Dx7Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx8Code", oTransaction.Lines[i].Dx8Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sDx8Description", oTransaction.Lines[i].Dx8Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@nDx1Pointer", oTransaction.Lines[i].Dx1Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx2Pointer", oTransaction.Lines[i].Dx2Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx3Pointer", oTransaction.Lines[i].Dx3Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx4Pointer", oTransaction.Lines[i].Dx4Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx5Pointer", oTransaction.Lines[i].Dx5Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx6Pointer", oTransaction.Lines[i].Dx6Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx7Pointer", oTransaction.Lines[i].Dx7Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@nDx8Pointer", oTransaction.Lines[i].Dx8Ptr, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@sMod1Code", oTransaction.Lines[i].Mod1Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod1Description", oTransaction.Lines[i].Mod1Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod2Code", oTransaction.Lines[i].Mod2Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod2Description", oTransaction.Lines[i].Mod2Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod3Code", oTransaction.Lines[i].Mod3Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod3Description", oTransaction.Lines[i].Mod3Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod4Code", oTransaction.Lines[i].Mod4Code, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sMod4Description", oTransaction.Lines[i].Mod4Description, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@dCharges", oTransaction.Lines[i].Charges, ParameterDirection.Input, SqlDbType.Decimal);
                            oDBParameters.Add("@dUnit", oTransaction.Lines[i].Unit, ParameterDirection.Input, SqlDbType.Decimal);
                            oDBParameters.Add("@dTotal", oTransaction.Lines[i].Total, ParameterDirection.Input, SqlDbType.Decimal);
                            oDBParameters.Add("@dAllowed", oTransaction.Lines[i].AllowedCharges, ParameterDirection.Input, SqlDbType.Decimal);
                            oDBParameters.Add("@nProvider", oTransaction.Lines[i].RefferingProviderId, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", oTransaction.Lines[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClaimNumber", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);

                            //Code added on 20081018 , Sagar Ghodke
                            oDBParameters.Add("@nTransactionLineStatus", oTransaction.Lines[i].LineStatus.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                            //

                            ///Code added on 20090511 by - Sagar Ghodke
                            /////Code added to implement CLIA number & sent service line in claim file
                            // functionality

                            oDBParameters.Add("@bIsLabCPT", oTransaction.Lines[i].IsLabCPT, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@sAuthorizationNo", oTransaction.Lines[i].AuthorizationNo, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@bSentToClaim", oTransaction.Lines[i].SendToClaim, ParameterDirection.Input, SqlDbType.Bit);

                            ///End Code add 20090511,Sagar Ghodke
                            ///

                            //Code added on 20090514 by - Sagar Ghodke
                            //Code added to implement LinePrimaryDiagnosis

                            oDBParameters.Add("@sLinePrimaryDxCode", oTransaction.Lines[i].LinePrimaryDxCode, ParameterDirection.Input, SqlDbType.VarChar);
                            oDBParameters.Add("@sLinePrimaryDxDesc", oTransaction.Lines[i].LinePrimaryDxDesc, ParameterDirection.Input, SqlDbType.VarChar);

                            //End code add 20090514,Sagar Ghodke

                            //...Code added on 20090618 by Sagar Ghodke 
                            //...Code added to implement ReplicationID on Transaction Lines Table 

                            //oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt);
                            if (oTransaction.UseExtSqlConnection == false)
                            { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }
                            else
                            { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.ExtSqlConnection, oTransaction.ExtSqlTransaction, true, oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }



                            //...End code add 20090618,Sagar Ghodke

                            oDBParameters.Add("@nChargesDayTrayID", oTransaction.CloseDayTrayID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                            oDBParameters.Add("@sChargesTrayCode", oTransaction.CloseDayTrayCode, ParameterDirection.Input, SqlDbType.VarChar);// varchar(255),
                            oDBParameters.Add("@sChargesTrayDescription", oTransaction.CloseDayTrayName, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                            oDBParameters.Add("@nIsTrayClose", false, ParameterDirection.Input, SqlDbType.Bit);// bit

                            oDBParameters.Add("@dPatientResponsibility", oTransaction.Lines[i].PatientResponsibility, ParameterDirection.Input, SqlDbType.Decimal);// varchar(255),
                            oDBParameters.Add("@sHoldReason", oTransaction.Lines[i].HoldReason, ParameterDirection.Input, SqlDbType.VarChar);//  varchar(255),
                            oDBParameters.Add("@bIsHold", oTransaction.Lines[i].IsHold, ParameterDirection.Input, SqlDbType.Bit);// bit                        
                            oDBParameters.Add("@dBilliedAmount", oTransaction.Lines[i].BilledAmount, ParameterDirection.Input, SqlDbType.Decimal);// bit                        

                            #region " Parent Transaction ID and Parent Transaction Detail ID "

                            oDBParameters.Add("@nParentTransactionID", oTransaction.ParentTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nParentTransactionDetailID", oTransaction.Lines[i].ParentTransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@bIsSplitted", oTransaction.Lines[i].IsLineSplitted, ParameterDirection.Input, SqlDbType.Bit);// bit                        

                            #endregion

                            //Hold Fee Schedule
                            oDBParameters.Add("@nFeeScheduleType", oTransaction.Lines[i].FeeScheduleType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                            oDBParameters.Add("@nFeeScheduleID", oTransaction.Lines[i].FeeScheduleID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nFacilityType", oTransaction.Lines[i].FacilityType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);

                            //Code added on 20100819 by Sagar Ghodke
                            //Code added to save the NDC fields data 
                            oDBParameters.Add("@nNDCID", oTransaction.Lines[i].NDCID, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0) = NULL,
                            oDBParameters.Add("@sNDCCodeQualifier", oTransaction.Lines[i].NDCCodeQualifier, ParameterDirection.Input, SqlDbType.VarChar, 5);//  VARCHAR(5) = NULL,
                            oDBParameters.Add("@sNDCCode", oTransaction.Lines[i].NDCCode, ParameterDirection.Input, SqlDbType.VarChar, 11);//  varchar(11) = NULL,
                            oDBParameters.Add("@sNDCDescription", oTransaction.Lines[i].NDCDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                            oDBParameters.Add("@sNDCUnitCode", oTransaction.Lines[i].NDCUnitCode, ParameterDirection.Input, SqlDbType.VarChar, 5);//  varchar(5) = NULL,
                            oDBParameters.Add("@sNDCUnitDescription", oTransaction.Lines[i].NDCUnitDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(255) = NULL,
                            oDBParameters.Add("@sNDCUnit", oTransaction.Lines[i].NDCUnit, ParameterDirection.Input, SqlDbType.VarChar, 13);//  varchar(13) = NULL,
                            oDBParameters.Add("@sNDCUnitPricing", oTransaction.Lines[i].NDCUnitPricing, ParameterDirection.Input, SqlDbType.VarChar, 15);//  varchar(15) = NULL
                            oDBParameters.Add("@sPrescription", oTransaction.Lines[i].Prescription , ParameterDirection.Input, SqlDbType.VarChar, 50);//  varchar(50) = NULL
                            oDBParameters.Add("@sPrescriptionDesc", oTransaction.Lines[i].PrescriptionDescription, ParameterDirection.Input, SqlDbType.VarChar, 255);//  varchar(50) = NULL
                            //End code add on 20100819 by Sagar Ghodke

                            //Added By mukesh on 12 Nov 2010
                            oDBParameters.Add("@bEMG", oTransaction.Lines[i].EMG, ParameterDirection.Input, SqlDbType.Bit);
                            //***

                            oDBParameters.Add("@bIsServiceScreening", oTransaction.Lines[i].ServiceIsTheScreening, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@bIsServiceResultofScreening", oTransaction.Lines[i].ServiceIsTheResultOfScreening, ParameterDirection.Input, SqlDbType.Bit);
                            oDBParameters.Add("@bIsFamilyPlanningIndicator", oTransaction.Lines[i].ServiceFamilyPlanningIndicator, ParameterDirection.Input, SqlDbType.Bit);

                            objectID = null;

                            if (oTransaction.UseExtSqlConnection == false)
                            {
                                oDB.Execute("BL_INUP_Transaction_Claim_Lines", oDBParameters, out  objectID);
                                if (objectID == null)
                                { return 0; }
                            }
                            else
                            {
                                using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                                {
                                    _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                    _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                    _sqlCommand.CommandType = CommandType.StoredProcedure;
                                    _sqlCommand.CommandText = "BL_INUP_Transaction_Claim_Lines";

                                    int _result = _sqlCommand.ExecuteNonQuery();

                                    if (_sqlCommand.Parameters["@TransactionDetailID"].Value != null)
                                    { objectID = _sqlCommand.Parameters["@TransactionDetailID"].Value; }
                                    else
                                    {
                                        objectID = null;
                                        oTransaction.ExtTransactionErrorValue = true;
                                        oTransaction.ExtTransactionErrorMsg = "Error saving transaction lines";
                                        _customException = new Exception(oTransaction.ExtTransactionErrorMsg);
                                        throw _customException;
                                    }
                                    if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                                }
                            }

                            TransactionDetailID = (Int64)objectID;

                            oTransaction.Lines[i].TransactionDetailID = TransactionDetailID;
                            Boolean _bIsParameters = false;
                            oDBParameters.Clear();
                            if (oTransaction.Lines[i].bIsAneshtesia)
                            {
                                oDBParameters.Add("@bIsAnesthesia", oTransaction.Lines[i].bIsAneshtesia, ParameterDirection.Input, SqlDbType.Bit);
                                oDBParameters.Add("@nAnesthesiaID", oTransaction.Lines[i].AnesthesiaID, ParameterDirection.Input, SqlDbType.BigInt);
                                if (oTransaction.Lines[i].TransactionMasterID==0)
                                    oDBParameters.Add("@nTransactionMasterID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                                else
                                    oDBParameters.Add("@nTransactionMasterID", oTransaction.Lines[i].TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionMasterDetailID", oTransaction.Lines[i].TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@nTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                if (Convert.ToDateTime(oTransaction.Lines[i].AnesthesiaStartTime).Date.ToShortDateString() != "1/1/0001")
                                {
                                    oDBParameters.Add("@dtStartDateTime", oTransaction.Lines[i].AnesthesiaStartTime, ParameterDirection.Input, SqlDbType.DateTime);
                                    oDBParameters.Add("@dtEndDateTime", oTransaction.Lines[i].AnesthesiaEndTime, ParameterDirection.Input, SqlDbType.DateTime);
                                }
                                else
                                {
                                    oDBParameters.Add("@dtStartDateTime", DBNull.Value , ParameterDirection.Input, SqlDbType.DateTime);
                                    oDBParameters.Add("@dtEndDateTime", DBNull.Value, ParameterDirection.Input, SqlDbType.DateTime);
                                }
                                oDBParameters.Add("@nTotalMinutes", oTransaction.Lines[i].AnesthesiaTotalMinutes, ParameterDirection.Input, SqlDbType.BigInt);
                                oDBParameters.Add("@dMinPerUnit", oTransaction.Lines[i].AnesthesiaMinPerUnit, ParameterDirection.Input, SqlDbType.Decimal);
                                oDBParameters.Add("@dTimeUnits", oTransaction.Lines[i].AnesthesiaTimeUnits, ParameterDirection.Input, SqlDbType.Decimal);
                                oDBParameters.Add("@dBaseUnits", oTransaction.Lines[i].AnesthesiaBaseUnits, ParameterDirection.Input, SqlDbType.Decimal);
                                oDBParameters.Add("@dOtherUnits", oTransaction.Lines[i].AnesthesiaOtherUnits, ParameterDirection.Input, SqlDbType.Decimal);
                                oDBParameters.Add("@dTotalUnits", oTransaction.Lines[i].AnesthesiaTotalUnits, ParameterDirection.Input, SqlDbType.Decimal);
                                oDBParameters.Add("@bIsAutoCalculate", oTransaction.Lines[i].bIsAutoCalculateAnesthesia, ParameterDirection.Input, SqlDbType.Bit);
                                //oDB.Execute("BL_INUP_Anesthesia", oDBParameters);
                                _bIsParameters = true;
                            }
                            else
                            {
                                if (oTransaction.Lines[i].AnesthesiaID > 0)
                                {
                                    oDBParameters.Add("@bIsAnesthesia", oTransaction.Lines[i].bIsAneshtesia, ParameterDirection.Input, SqlDbType.Bit);
                                    oDBParameters.Add("@nAnesthesiaID", oTransaction.Lines[i].AnesthesiaID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oDBParameters.Add("@nTransactionMasterID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oDBParameters.Add("@nTransactionMasterDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oDBParameters.Add("@nTransactionDetailID", oTransaction.Lines[i].TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oDBParameters.Add("@dtStartDateTime", DBNull.Value, ParameterDirection.Input, SqlDbType.DateTime);
                                    oDBParameters.Add("@dtEndDateTime", DBNull.Value, ParameterDirection.Input, SqlDbType.DateTime);
                                    oDBParameters.Add("@nTotalMinutes", DBNull.Value, ParameterDirection.Input, SqlDbType.BigInt);
                                    oDBParameters.Add("@dMinPerUnit", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                                    oDBParameters.Add("@dTimeUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                                    oDBParameters.Add("@dBaseUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                                    oDBParameters.Add("@dOtherUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                                    oDBParameters.Add("@dTotalUnits", DBNull.Value, ParameterDirection.Input, SqlDbType.Decimal);
                                    oDBParameters.Add("@bIsAutoCalculate", DBNull.Value, ParameterDirection.Input, SqlDbType.Bit);
                                    _bIsParameters = true;
                                    //oDB.Execute("BL_INUP_Anesthesia", oDBParameters);
                                }

                            }
                            if (_bIsParameters)
                            {
                                if (oTransaction.UseExtSqlConnection == false)
                                {
                                    oDB.Execute("BL_INUP_Anesthesia", oDBParameters);

                                }
                                else
                                {
                                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                                    {
                                        _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                        _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                                        _sqlCommand.CommandText = "BL_INUP_Anesthesia";

                                        int _result = _sqlCommand.ExecuteNonQuery();

                                        if (_result == 1)
                                        { }
                                        else
                                        {

                                            oTransaction.ExtTransactionErrorValue = true;
                                            oTransaction.ExtTransactionErrorMsg = "Error saving transaction lines";
                                            _customException = new Exception(oTransaction.ExtTransactionErrorMsg);
                                            throw _customException;
                                        }
                                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                                    }
                                }
                            }



                            if (TransactionDetailID > 0)
                            {
                                // _arrDeleteTrnDtlIds.Add(TransactionDetailID);
                            }


                            //Transaction Lines-->Notes
                            if (oTransaction.Lines[i].LineNotes != null)
                            {
                                string _delsqlQuery = "";
                                if (oTransaction.UseExtSqlConnection == false)
                                {
                                    _delsqlQuery = " delete from BL_Transaction_Lines_Notes  WITH(READPAST) where nTransactionId =" + oTransaction.TransactionMasterID + " and nTransactionDetailId>0 and nTransactionDetailId =  " + oTransaction.Lines[i].TransactionMasterDetailID + " ";
                                    oDB.Execute_Query(_delsqlQuery);
                                }
                                else
                                {
                                    _delsqlQuery = " delete from BL_Transaction_Lines_Notes  WITH(READPAST) where nTransactionId =" + oTransaction.TransactionMasterID + " and nTransactionDetailId>0 and nTransactionDetailId =  " + oTransaction.Lines[i].TransactionMasterDetailID + "";

                                    using (SqlCommand _sqlCommand = new SqlCommand())
                                    {
                                        _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                        _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                        _sqlCommand.CommandType = CommandType.Text;
                                        _sqlCommand.CommandText = _delsqlQuery;

                                        int _result = _sqlCommand.ExecuteNonQuery();
                                    }
                                }

                                if (oTransaction.Lines[i].LineNotes.Count > 0)
                                {
                                    string _sqlQuery = "";

                                    for (int j = 0; j < oTransaction.Lines[i].LineNotes.Count; j++)
                                    {
                                        if (oTransaction.Lines[i].LineNotes[j].BillingNoteType == EOBPaymentSubType.Other || oTransaction.Lines[i].LineNotes[j].BillingNoteType == EOBPaymentSubType.InternalNote || oTransaction.Lines[i].LineNotes[j].BillingNoteType == EOBPaymentSubType.StatementNote)
                                        {
                                            if (oTransaction.UseExtSqlConnection == false)
                                            {
                                                // string _sqlQuery = " Update BL_EOB_Notes set sNoteDescription = '" + oTransaction.Lines[i].LineNotes[j].NoteDescription + "',nUserID=" + _UserId + ",dtModifiedDateTime=dbo.gloGetDate()  where nId =" + oTransaction.Lines[i].LineNotes[j].NoteID + " ";  commeneted on 20100222
                                                _sqlQuery = "";
                                                //_sqlQuery = " Update BL_EOB_Notes  WITH(READPAST) set sNoteDescription = '" + oTransaction.Lines[i].LineNotes[j].NoteDescription.Replace("'", "''") + "',nUserID=" + oTransaction.Lines[i].LineNotes[j].UserID + ",dtModifiedDateTime=dbo.gloGetDate(), nDateTime = '" + gloDateMaster.gloDate.DateAsDate(oTransaction.Lines[i].LineNotes[j].StatementNoteDate) + "',sNoteCode = '1'  where nId =" + oTransaction.Lines[i].LineNotes[j].NoteID + " ";
                                                _sqlQuery = " Update BL_EOB_Notes  WITH(READPAST) set sNoteDescription = '" + oTransaction.Lines[i].LineNotes[j].NoteDescription.Replace("'", "''") + "',nUserID=" + oTransaction.Lines[i].LineNotes[j].UserID + ",dtModifiedDateTime=dbo.gloGetDate(), nCloseDate = '" + oTransaction.Lines[i].LineNotes[j].StatementNoteDate + "',sNoteCode = '1'  where nId =" + oTransaction.Lines[i].LineNotes[j].NoteID + " ";
                                                oDB.Execute_Query(_sqlQuery);
                                            }
                                            else
                                            {
                                                _sqlQuery = "";
                                                //_sqlQuery = " Update BL_EOB_Notes  WITH(READPAST) set sNoteDescription = '" + oTransaction.Lines[i].LineNotes[j].NoteDescription.Replace("'", "''") + "',nUserID=" + oTransaction.Lines[i].LineNotes[j].UserID + ",dtModifiedDateTime=dbo.gloGetDate(), nDateTime = '" + gloDateMaster.gloDate.DateAsDateTime(oTransaction.Lines[i].LineNotes[j].StatementNoteDate) + "',sNoteCode = '1'    where nId =" + oTransaction.Lines[i].LineNotes[j].NoteID + "  ";
                                                _sqlQuery = " Update BL_EOB_Notes  WITH(READPAST) set sNoteDescription = '" + oTransaction.Lines[i].LineNotes[j].NoteDescription.Replace("'", "''") + "',nUserID=" + oTransaction.Lines[i].LineNotes[j].UserID + ",dtModifiedDateTime=dbo.gloGetDate(), nCloseDate = '" + oTransaction.Lines[i].LineNotes[j].StatementNoteDate + "',sNoteCode = '1'    where nId =" + oTransaction.Lines[i].LineNotes[j].NoteID + "  ";

                                                using (SqlCommand _sqlCommand = new SqlCommand())
                                                {
                                                    _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                                    _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                                    _sqlCommand.CommandType = CommandType.Text;
                                                    _sqlCommand.CommandText = _sqlQuery;

                                                    int _result = _sqlCommand.ExecuteNonQuery();
                                                }
                                            }

                                        }
                                        else
                                        {


                                            oDBParameters.Clear();
                                            //@nTransactionID numeric(18,0),@nLineNo numeric (18,0), @nNoteType int, @nNoteId numeric (18,0), 
                                            //@nNoteDateTime numeric (18,0), @nUserID numeric (18,0), @nNoteDescription varchar(255),@nClinicID numeric(18,0)

                                            oDBParameters.Add("@nTransactionID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                                            oDBParameters.Add("@nLineNo", oTransaction.Lines[i].LineNotes[j].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                                            oDBParameters.Add("@nTransactionDetailID", oTransaction.Lines[i].TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                                            oDBParameters.Add("@nNoteType", oTransaction.Lines[i].LineNotes[j].NoteType, ParameterDirection.Input, SqlDbType.Int);
                                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                            oDBParameters.Add("@nNoteDateTime", oTransaction.Lines[i].LineNotes[j].NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                                            oDBParameters.Add("@nUserID", oTransaction.Lines[i].LineNotes[j].UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                            oDBParameters.Add("@sNoteDescription", oTransaction.Lines[i].LineNotes[j].NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                                            oDBParameters.Add("@nClinicID", oTransaction.Lines[i].LineNotes[j].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                            oDBParameters.Add("@nStatementNoteDate", oTransaction.Lines[i].LineNotes[j].StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                                            oDBParameters.Add("@dtCreatedDateTime", oTransaction.Lines[i].LineNotes[j].dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);
                                            if (oTransaction.UseExtSqlConnection == false)
                                            { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }
                                            else
                                            { oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(oTransaction.ExtSqlConnection, oTransaction.ExtSqlTransaction, true, oTransaction.PatientID), ParameterDirection.Input, SqlDbType.BigInt); }


                                            oDBParameters.Add("@nBillingNoteType", oTransaction.Lines[i].LineNotes[j].BillingNoteType, ParameterDirection.Input, SqlDbType.Int);
                                            oDBParameters.Add("@nCloseDate", oTransaction.TransactionDate, ParameterDirection.Input, SqlDbType.Int);

                                            objectID = null;
                                            if (oTransaction.UseExtSqlConnection == false)
                                            {
                                                oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters, out  objectID);
                                                if (objectID != null && oTransaction.Lines[i].TransactionMasterDetailID != 0)
                                                { oTransaction.Lines[i].LineNotes[j].NoteID = (Int64)objectID; }
                                            }
                                            else
                                            {
                                                using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                                                {
                                                    _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                                    _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                                    _sqlCommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlCommand.CommandText = "BL_INUP_Transaction_Lines_Notes";

                                                    int _result = _sqlCommand.ExecuteNonQuery();

                                                    if (_sqlCommand.Parameters["@nNoteId"].Value != null)
                                                    { objectID = _sqlCommand.Parameters["@nNoteId"].Value; }
                                                    else
                                                    { objectID = null; }

                                                    if (objectID != null && oTransaction.Lines[i].TransactionMasterDetailID != 0)
                                                    { oTransaction.Lines[i].LineNotes[j].NoteID = (Int64)objectID; }
                                                    if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                                                }
                                            }

                                        }
                                    }//End Lines Notes 
                                }
                                else
                                {
                                    string _sqlQuery = "";
                                    if (oTransaction.UseExtSqlConnection == false)
                                    {
                                        _sqlQuery = " delete from BL_Transaction_Lines_Notes WITH(READPAST)   where nTransactionId =" + oTransaction.TransactionMasterID + " and nTransactionDetailId =  " + oTransaction.Lines[i].TransactionMasterDetailID + " and nNoteType <> 12  ";
                                        oDB.Execute_Query(_sqlQuery);
                                    }
                                    else
                                    {
                                        _sqlQuery = " delete from BL_Transaction_Lines_Notes WITH(READPAST)   where nTransactionId =" + oTransaction.TransactionMasterID + " and nTransactionDetailId =  " + oTransaction.Lines[i].TransactionMasterDetailID + "and  nNoteType <> 12  ";
                                        using (SqlCommand _sqlCommand = new SqlCommand())
                                        {
                                            _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                            _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                            _sqlCommand.CommandType = CommandType.Text;
                                            _sqlCommand.CommandText = _sqlQuery;

                                            int _result = _sqlCommand.ExecuteNonQuery();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    oDB.Disconnect();

                    //UB CLAIM
                    //UBClaimSave(oTransaction,oTransaction.TransactionMasterID,oTransaction.TransactionID, nClinicID,null);
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                if (oTransaction.UseExtSqlConnection == false)
                {
                    ex.ERROR_Log(ex.ToString());
                    TransactionID = 0;
                }
                else
                {
                    //if called in sql transaction for era posting throw exception to outer
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                    oTransaction.ExtTransactionErrorValue = true;
                    oTransaction.ExtTransactionErrorMsg = ex.ToString();
                    throw ex;
                }

            }
            catch (Exception ex)
            {
                if (oTransaction.UseExtSqlConnection == false)
                {
                    MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    TransactionID = 0;
                }
                else
                {
                    oTransaction.ExtTransactionErrorValue = true;
                    oTransaction.ExtTransactionErrorMsg = ex.ToString();
                    throw ex;
                }
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }

            return TransactionID;

        }

        #region " Need to Delete - Used only in frmPaymentInsuranceEOB which is not in use"
        public bool SplitTransactionClaim(Int64 MasterTransactionID, Int64 nClinicID)
        {

            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            String _sqlQuery = "";
            DataTable dtNextAction = new DataTable();
        //    object _retVal = null;
            try
            {
                oDB.Connect(false);



                #region "Create Claim Batch"

                //_sqlQuery = " select Top 1  nTransactionID from dbo.BL_Transaction_Claim_MST " +
                //                " where nTransactionMasterID =  " + MasterTransactionID +
                //                " and nClaimStatus = " + ClaimStatus.Open.GetHashCode() + " order by nTransactionID desc ";

                //_retVal = oDB.ExecuteScalar_Query(_sqlQuery);

                //if (_retVal != null && Convert.ToInt64(_retVal) > 0)
                //{
                //    Int64 _nTransactionID = Convert.ToInt64(_retVal);
                //    Transaction _oTransaction= null;
                //    _oTransaction = GetChargesClaimDetails(_nTransactionID, nClinicID);
                //    CreateClaimBatch(_oTransaction);
                //}

                #endregion "Create Claim Batch"

                //Select Party which are changed
                _sqlQuery = "select nNextActionPartyNumber from BL_EOB_NextAction WITH (NOLOCK) where nBillingTransactionID = " + MasterTransactionID + " and sNextActionCode in ('T','B','R') group by nNextActionPartyNumber ";
                    oDB.Retrive_Query(_sqlQuery, out dtNextAction);                        

                if (dtNextAction != null)
                {
                    //Close old Claim and Change Transaction Status to Insurance Paid
                    _sqlQuery = "Update BL_Transaction_Claim_MST WITH (READPAST) set nStatus=" + TransactionStatus.InsurancePaid.GetHashCode() + ", nClaimStatus = " + ClaimStatus.Close.GetHashCode() + " where nTransactionMasterID = " + MasterTransactionID + " and nStatus<>" + TransactionStatus.Rejected.GetHashCode();
                    oDB.Execute_Query(_sqlQuery);

                    Int16 _NextAction = 0;


                    //Split Claims (Create New Claims)
                    for (int i = 0; i < dtNextAction.Rows.Count; i++)
                    {

                        _NextAction = Convert.ToInt16(dtNextAction.Rows[i]["nNextActionPartyNumber"]);


                        Transaction oTransactionMaster = null;
                        //oTransactionMaster = GetChargesDetails(MasterTransactionID, nClinicID);
                        oTransactionMaster = GetChargesClaimDetails(MasterTransactionID, nClinicID);
                        oTransactionMaster.TransactionID = 0;
                        oTransactionMaster.TransactionMasterID = MasterTransactionID;
                        oTransactionMaster.SubClaimNo = Convert.ToString(i + 1);


                            DataTable dtTrnDetails = new DataTable();
                            _sqlQuery = "select * from BL_EOB_NextAction WITH (NOLOCK) where nNextActionPartyNumber = " + _NextAction + " and nBillingTransactionID = " + MasterTransactionID + " order by nNextActionPartyNumber,sNextActionCode ";                                
                            oDB.Retrive_Query(_sqlQuery, out dtTrnDetails);

                        if (dtTrnDetails != null && dtTrnDetails.Rows.Count > 0)
                        {
                            oTransactionMaster.InsuranceID = Convert.ToInt64(dtTrnDetails.Rows[0]["nNextActionPatientInsID"]);
                            oTransactionMaster.ContactID = Convert.ToInt64(dtTrnDetails.Rows[0]["nNextActionContactID"]);
                            oTransactionMaster.ResponsibilityNo = Convert.ToInt16(dtTrnDetails.Rows[0]["nNextActionPartyNumber"]);
                            if (oTransactionMaster.InsuranceID == 0)
                            { oTransactionMaster.ResponsibilityType = PayerMode.Self; }
                            else
                            { oTransactionMaster.ResponsibilityType = PayerMode.Insurance; }
                            oTransactionMaster.ClaimStatus = ClaimStatus.Open;
                            oTransactionMaster.Transaction_Status = TransactionStatus.Queue;


                            for (int j = oTransactionMaster.Lines.Count - 1; j >= 0; j--)
                            {
                                DataRow[] dr = dtTrnDetails.Select("nBillingTransactionDetailID = " + oTransactionMaster.Lines[j].TransactionDetailID);
                                if (dr.Length == 0)
                                {
                                    oTransactionMaster.Lines.RemoveAt(j);
                                }
                                else
                                {
                                    oTransactionMaster.Lines[j].TransactionMasterDetailID = oTransactionMaster.Lines[j].TransactionDetailID;
                                    oTransactionMaster.Lines[j].TransactionDetailID = 0;
                                }

                            }
                        }
                        #region " Add records to transaction tracking tables"

                        AddTransactionClaim(oTransactionMaster, _ClinicID);

                        #endregion " Add records to transaction tracking tables"
                    }
                }
                oDB.Disconnect();
                _result = true;

            }
            catch
            {
                _result = false;
            }
            return _result;
        }
        #endregion
        
        //UB CLAIM
        public bool UBClaimSave(Common.Transaction oTransaction, Int64 _MasterTransactionID, Int64 _TransactionID, Int64 nClinicID,string _sTypeofBill,string _sAdmissionType ,string _sAdmitDate,string _sAdmitHour,string _sDischargeHour,string _sDischargeStatus)
        {
            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@nTransactionMasterID", _MasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", _TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClaimNo", oTransaction.ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nSubClaimNo", oTransaction.SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nPatientID", oTransaction.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactID", oTransaction.ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sDischargeStatusCode", _sDischargeStatus, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sAdmissionSourceCode", null, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sAdmissionTypeCode",_sAdmissionType , ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sTypeOfbill", _sTypeofBill, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sAdmitHour",_sAdmitHour , ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@sDischargeHour",_sDischargeHour, ParameterDirection.Input, SqlDbType.VarChar);
                if (_sAdmitDate!="")
                oDBParameters.Add("@dtAdmitDate",_sAdmitDate , ParameterDirection.Input, SqlDbType.Date);
                else
                    oDBParameters.Add("@dtAdmitDate", DBNull.Value, ParameterDirection.Input, SqlDbType.Date);
                


                if (oTransaction.UseExtSqlConnection == false)
                {
                    oDB.Execute("BL_INUP_UB_Claim_MST", oDBParameters);
                }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                        _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                        _sqlCommand.CommandText = "BL_INUP_UB_Claim_MST";
                        int _obj = _sqlCommand.ExecuteNonQuery();
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }

                //Transaction Lines
                if (oTransaction.Lines != null)
                {
                    for (int i = 0; i < oTransaction.Lines.Count; i++)
                    {
                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionMasterID", _MasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionMasterDetailID", oTransaction.Lines[i].TransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionID", _TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionLineNo", oTransaction.Lines[i].TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", oTransaction.Lines[i].TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@sCPTCode", oTransaction.Lines[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@sRevenueCode", null, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nClinicID", oTransaction.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        if (oTransaction.UseExtSqlConnection == false)
                        {
                            oDB.Execute("BL_INUP_UB_Claim_Lines", oDBParameters);
                        }
                        else
                        {
                            using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                            {
                                _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                                _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                                _sqlCommand.CommandType = CommandType.StoredProcedure;
                                _sqlCommand.CommandText = "BL_INUP_UB_Claim_Lines";
                                int _obj = _sqlCommand.ExecuteNonQuery();
                                if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                            }
                        }
                    }
                }


                String _sqlQuery = " DELETE FROM BL_UB_Claim_Lines WITH(READPAST) " +
                    " where nTransactionMasterID = " + oTransaction.TransactionMasterID + " and nTransactionMasterDetailID =0";
                if (oTransaction.UseExtSqlConnection == false)
                {
                    oDB.Execute_Query(_sqlQuery);
                }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = oTransaction.ExtSqlConnection;
                        _sqlCommand.Transaction = oTransaction.ExtSqlTransaction;
                        _sqlCommand.CommandType = CommandType.Text;
                        _sqlCommand.CommandText = _sqlQuery;
                        int _obj = _sqlCommand.ExecuteNonQuery();
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
            return _result;
        }


        //EXPANDED LOGIC STARTS
        public void GetExpandedClaimLimits(Int64 nContactID, int nSettingType, Int64 nClinicID, out bool bAllowExpandedClaims, out int nClaimLines, out int nDiagnosis)
        {
          //  bool _result = false;
          //  bool _IsExpandedClaim = false;
          //  Object _objResult = null;
            //gloSettings.GeneralSettings oSettings = null;

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtLimits = null;
            nClaimLines = 6;
            nDiagnosis = 4;
            bAllowExpandedClaims = false;

            try
            {
                //oSettings=new gloSettings.GeneralSettings(gloSettings.AppSettings.ConnectionStringPM);
                //oSettings.GetSetting("ALLOWEXPANDEDELECTRONICCLAIMS", out _objResult);
                //_IsExpandedClaim = Convert.ToBoolean(_objResult);
                //bAllowExpandedClaims = _IsExpandedClaim;

                oDB.Connect(false);
                oDBParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nSettingType", nSettingType, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Retrive("BL_Get_Expanded_Claim_Setting", oDBParameters, out dtLimits);
                oDB.Disconnect();

                bAllowExpandedClaims = Convert.ToBoolean(dtLimits.Rows[0]["bISALLOWEXPANDEDCLAIMS"]);
                if (dtLimits != null && dtLimits.Rows.Count > 0)//&& Convert.ToBoolean(dtLimits.Rows[0]["bISALLOWEXPANDEDCLAIMS"]) == true 
                {
                    nClaimLines = Convert.ToInt32(dtLimits.Rows[0]["ServiceLineNo"]);
                    nDiagnosis = Convert.ToInt32(dtLimits.Rows[0]["DiagnosisNo"]);

                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
        }

        public void UpdateClaimAccount(Int64 nMasterTransactionID, Int64 nPAccountID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@nMasterTransactionID", nMasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPAccountID", nPAccountID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Execute("BL_UpdateTransactionAccount", oDBParameters);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
        }

        public bool GetDefaultOccuranceDateAsDOSSetting(Int64 ContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _Result;                      
            bool _IsDefault = false;
            try
            {
                oDB.Connect(false);
                _sqlQuery = "select isnull(bDefaultOccuranceDOS,0) from Contacts_Insurance_DTL where ncontactid= " + ContactID + " ";
                _Result = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();
                if (_Result != null)
                {
                    if (Convert.ToString(_Result) != "")
                    {
                        _IsDefault = Convert.ToBoolean(_Result);
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);               
            }
            finally
            {             
                if (oDB != null)
                { oDB.Dispose(); }
            }

            return _IsDefault;
        }

        public bool GetbIsSkipZeroBillingClaimSettingIPP()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _Result;
            bool _IsDefault = false;
            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT ISNULL(sSettingsValue,0) AS  bIsSkipZeroBillingClaimIPP FROM dbo.settings WHERE sSettingsName = 'bIsSkipZeroBillingClaimIPP'";
                _Result = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();
                if (_Result != null)
                {
                    if (Convert.ToString(_Result) != "")
                    {
                        _IsDefault = Convert.ToBoolean(_Result);
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null)
                { oDB.Dispose(); }
            }

            return _IsDefault;
        }


        public string GetDefaultBox19Note(Int64 ContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _Result;
            string _DefaultBox19Note ="";
            try
            {
                oDB.Connect(false);
                _sqlQuery = "select isnull(sBox19DefaultNote,'') from Contacts_Insurance_DTL where ncontactid= " + ContactID + " ";
                _Result = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();
                if (_Result != null)
                {
                    _DefaultBox19Note = Convert.ToString(_Result);
                    
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null)
                { oDB.Dispose(); }
            }

            return _DefaultBox19Note;
        }



        public void GetExpandedClaimSetting(Int64 nContactID, Int64 nClinicID, out int nClaimLines, out int nDiagnosis)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloPMGlobal.DatabaseConnectionString);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtLimits = null;
            nClaimLines = 6;
            nDiagnosis = 4;
          
            try
            {        
                oDBParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", gloGlobal.gloPMGlobal.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                oDB.Retrive("BL_Get_Expanded_Claim_Setting_Charges", oDBParameters, out dtLimits);
                oDB.Disconnect();
              
                if (dtLimits != null && dtLimits.Rows.Count > 0)
                {
                    nClaimLines = Convert.ToInt32(dtLimits.Rows[0]["ServiceLineNo"]);
                    nDiagnosis = Convert.ToInt32(dtLimits.Rows[0]["DiagnosisNo"]);
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null)
                {
                    oDBParameters.Clear();
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
            }
        }

        public bool ValidateExpandedClaimLimits(Int64 _MastTrans, Int64 _SelectedTrans, int nSettingType, Int64 nClinicID, bool _IsDefault, out string InvalidType)
        {
            // _IsDefault flag is used to determine the method is used for sending the claim or Viewing the claim. 
            bool bAllowExpandedClaims = false;
            int nClaimLines;
            int nDiagnosis;
            //gloBilling ogloBilling = new gloCMSEDI.Transaction gloBilling(gloSettings.AppSettings.ConnectionStringPM, "");
            Transaction oTransaction = null;
            //gloClaimManager objClaimManager = new gloClaimManager(gloSettings.AppSettings.ConnectionStringPM, "");
            DataTable dtDxCount = null;
            bool _result = true;
            string _Message = String.Empty;
            InvalidType = "";

            try
            {
                //if (_SelectedTrans != null && _SelectedTrans.Count > 0)
                //{
                    //for (int _Count = 0; _Count < _SelectedTrans.Count; _Count++)
                    //{

                        oTransaction = null;
                        oTransaction = GetChargesClaimDetails(Convert.ToInt64(_SelectedTrans), nClinicID);
                        GetExpandedClaimLimits(oTransaction.ContactID, nSettingType, nClinicID, out bAllowExpandedClaims, out nClaimLines, out nDiagnosis);
                        InvalidType = "";
                        if (nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.Paper.GetHashCode()))
                        {
                            dtDxCount = GetTransaction_DX_Professional(Convert.ToInt64(_MastTrans), Convert.ToInt64(_SelectedTrans));
                        }
                        else if (nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.CMS1500New.GetHashCode()))
                        {
                            dtDxCount = GetTransaction_DX_Professional(Convert.ToInt64(_MastTrans), Convert.ToInt64(_SelectedTrans));
                        }
                        else if (nSettingType == Convert.ToInt16(gloSettings.TypeOfBilling.UB04Paper.GetHashCode()))
                        {
                            dtDxCount = GetTransaction_DX(Convert.ToInt64(_MastTrans), Convert.ToInt64(_SelectedTrans));
                        }
                        if (oTransaction.Lines != null && oTransaction.Lines.Count > 0 && oTransaction.Lines.Count > nClaimLines)
                        {
                            _result = false;
                            InvalidType = "Some service lines";
                            if (_Message != "")
                            {
                               _Message.Replace("diagnosis.","diagnosis and charges.");
                            }
                            else
                            {
                                _Message = "Claim exceeds the limit of # of charges. ";
                            }
                            //break;
                        }
                        if (dtDxCount != null && dtDxCount.Rows.Count > nDiagnosis)
                        {
                            _result = false;
                            if (InvalidType != "")
                            {
                                InvalidType = InvalidType + " and some diagnoses";
                            }
                            else
                            {
                                InvalidType =  "Some diagnoses";
                            }
                            _Message = "Claim exceeds the limit of # of diagnosis. ";
                            //break;
                        }
                        
                    //}
                //}
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }

            finally
            {
                //if (ogloBilling != null) { ogloBilling.Dispose(); }
                //if (objClaimManager != null) { objClaimManager.Dispose(); }
                if (dtDxCount != null)
                {
                    dtDxCount.Dispose();
                    dtDxCount = null;
                }
                if (oTransaction != null) { oTransaction.Dispose(); }
            }
            return _result;
        }

        public DataTable GetTransaction_DX(Int64 MasterTransactionID, Int64 TransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
          //  string strSQL = "";
            DataTable dtDX = new DataTable();
            try
            {
                oDB.Connect(false);
                oParameters.Add("@nMasterTransactionid", MasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionid", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_Select_Transaction_DX", oParameters, out dtDX);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (oParameters != null)
                {
                    oParameters.Clear();
                    oParameters.Dispose();
                    oParameters = null;
                }
            }

            return dtDX;
        }

        public DataTable GetTransaction_DX_Professional(Int64 MasterTransactionID, Int64 TransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
         //   string strSQL = "";
            DataTable dtDX = null;
            try
            {
                //oDB.Connect(false);
                //oParameters.Add("@nMasterTransactionid", MasterTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //oParameters.Add("@nTransactionid", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDB.Retrive("EDI837_GetDistinctDiagnosis", oParameters, out dtDX);
                dtDX = GetDistinctDiagnosis(TransactionID, _ClinicID, 0);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }

            return dtDX;
        }

        public static DataTable getPatientDetails(Int64 _TransactionID)
        {
            #region " Retrive Database Connection String for appSettings "

            System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;


            if (appSettings["DataBaseConnectionString"] != null)
            {
                if (appSettings["DataBaseConnectionString"] != "")
                {
                    _databaseconnectionstring = Convert.ToString(appSettings["DataBaseConnectionString"]);
                }
                else
                {
                    _databaseconnectionstring = "";
                }
            }
            else
            {
                _databaseconnectionstring = "";
            }

            appSettings = null;

            #endregion

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            String _strSQL = "";
            DataTable dtPatients = new DataTable();
          //  bool _result = false;

            try
            {
                oDB.Connect(false);
                _strSQL = " SELECT     BL_Transaction_Claim_MST.nTransactionID, ISNULL(Patient.sPatientCode,'') as sPatientCode,  " +
                          " ISNULL(Patient.sFirstName,'') +' '+ ISNULL(Patient.sMiddleName,'') + ' '+ ISNUll(Patient.sLastName,'') as sPatientName, " +
                          " dbo.getSubClaimNumber(BL_Transaction_Claim_MST.nClaimNo,BL_Transaction_Claim_MST.nSubClaimNo, BL_Transaction_Claim_MST.sMainClaimNo,5) as sClaimNumber " +
                          " FROM       BL_Transaction_Claim_MST WITH (NOLOCK)   Left Outer JOIN " +
                          " Patient WITH (NOLOCK)  ON Patient.nPatientID = BL_Transaction_Claim_MST.nPatientID " +
                          " WHERE     (BL_Transaction_Claim_MST.nTransactionID = " + _TransactionID + ") ";
                oDB.Retrive_Query(_strSQL, out dtPatients);
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Dispose();
                }
            }
            return dtPatients;
        }
        //EXPANDED LOGIC ENDS

        #region " Void Payment Code "

        public Int64 GetBillingTransactionID(Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object _retBillingTranId = null;
            string _sqlQuery = "";
            Int64 _TransactionMstID = 0;

            try
            {
                if (ClaimNo > 0)
                {
                    _sqlQuery = " SELECT DISTINCT BL_Transaction_MST.nTransactionID FROM BL_Transaction_MST (NOLOCK)" +
                               " WHERE " +
                               " BL_Transaction_MST.nTransactionID IS NOT NULL AND BL_Transaction_MST.nTransactionID > 0 " +
                               " AND BL_Transaction_MST.nClaimNo = " + ClaimNo + " " +
                               " AND ISNULL(BL_Transaction_MST.bIsVoid,0) = 0 " +
                               " AND BL_Transaction_MST.nClinicID = " + _ClinicID + " ";

                    oDB.Connect(false);
                    _retBillingTranId = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retBillingTranId != null && Convert.ToString(_retBillingTranId).Trim() != "")
                    { _TransactionMstID = Convert.ToInt64(_retBillingTranId); }
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log(ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retBillingTranId != null) { _retBillingTranId = null; }
            }

            return _TransactionMstID;
        }

        public Int64 GetBillingTransactionID(Int64 ClaimNo, bool IsVoidClaim)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object _retBillingTranId = null;
            string _sqlQuery = "";
            Int64 _TransactionMstID = 0;

            try
            {
                if (ClaimNo > 0)
                {
                    if (IsVoidClaim == false)
                    {
                        _sqlQuery = " SELECT DISTINCT BL_Transaction_MST.nTransactionID FROM BL_Transaction_MST (NOLOCK)" +
                                   " WHERE " +
                                   " BL_Transaction_MST.nTransactionID IS NOT NULL AND BL_Transaction_MST.nTransactionID > 0 " +
                                   " AND BL_Transaction_MST.nClaimNo = " + ClaimNo + " " +
                                   " AND ISNULL(BL_Transaction_MST.bIsVoid,0) = 0 " +
                                   " AND BL_Transaction_MST.nClinicID = " + _ClinicID + " ";
                    }
                    else
                    {
                        _sqlQuery = " SELECT DISTINCT BL_Transaction_MST.nTransactionID FROM BL_Transaction_MST (NOLOCK)" +
                                   " WHERE " +
                                   " BL_Transaction_MST.nTransactionID IS NOT NULL AND BL_Transaction_MST.nTransactionID > 0 " +
                                   " AND BL_Transaction_MST.nClaimNo = " + ClaimNo + " " +
                                   " AND BL_Transaction_MST.nClinicID = " + _ClinicID + " ";
                    }

                    oDB.Connect(false);
                    _retBillingTranId = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retBillingTranId != null && Convert.ToString(_retBillingTranId).Trim() != "")
                    { _TransactionMstID = Convert.ToInt64(_retBillingTranId); }
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log(ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retBillingTranId != null) { _retBillingTranId = null; }
            }

            return _TransactionMstID;
        }

        public Int64 GetBillingTransactionID(Int64 ClaimNo, Int64 SubClaimNo, bool IsVoidClaim)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object _retBillingTranId = null;
            string _sqlQuery = "";
            Int64 _TransactionMstID = 0;

            try
            {
                if (ClaimNo > 0)
                {
                    if (IsVoidClaim == false)
                    {
                        _sqlQuery = " SELECT DISTINCT BL_Transaction_Claim_MST.nTransactionID FROM BL_Transaction_Claim_MST WITH (NOLOCK)  " +
                                    " WHERE BL_Transaction_Claim_MST.nTransactionID IS NOT NULL " +
                                    " AND BL_Transaction_Claim_MST.nTransactionID > 0  " +
                                    " AND BL_Transaction_Claim_MST.nClaimNo = " + ClaimNo + " " +
                                    " AND BL_Transaction_Claim_MST.nSubClaimNo = '" + SubClaimNo + "' " +
                                    " AND ISNULL(BL_Transaction_Claim_MST.bIsVoid,0) = 0  " +
                                    " AND BL_Transaction_Claim_MST.nClinicID = " + _ClinicID + " ";
                    }
                    else
                    {
                        _sqlQuery = " SELECT DISTINCT BL_Transaction_Claim_MST.nTransactionID FROM BL_Transaction_Claim_MST WITH (NOLOCK) " +
                                    " WHERE  BL_Transaction_Claim_MST.nTransactionID IS NOT NULL " + 
                                    " AND BL_Transaction_Claim_MST.nTransactionID > 0  " +
                                    " AND BL_Transaction_Claim_MST.nClaimNo = " + ClaimNo + " " +
                                    " AND BL_Transaction_Claim_MST.nSubClaimNo = '" + SubClaimNo + "' " +
                                    " AND BL_Transaction_Claim_MST.nClinicID = " + _ClinicID + " ";
                    }

                    oDB.Connect(false);
                    _retBillingTranId = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retBillingTranId != null && Convert.ToString(_retBillingTranId).Trim() != "")
                    { _TransactionMstID = Convert.ToInt64(_retBillingTranId); }
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log(ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retBillingTranId != null) { _retBillingTranId = null; }
            }

            return _TransactionMstID;
        }

        public Int64 GetBillingTransactionTrackingID(Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            DataTable _dt = null;
            //Object _retBillingTranId = null;
           // string _sqlQuery = "";
            Int64 _TransactionMstID = 0;

            try
            {
                if (ClaimNo > 0)
                {
                    //_sqlQuery = " select TOP 1 ISNULL(nTransactionID,0) AS nTransactionID FROM BL_Transaction_Claim_MST where nClaimNo = " + ClaimNo + " AND nClinicID = " + _ClinicID + " ";
                    //_sqlQuery = " select TOP 1 ISNULL(nTransactionID,0) AS nTransactionID FROM BL_Transaction_Claim_MST where nClaimNo = " + ClaimNo + " AND nClinicID = " + _ClinicID + " AND ISNULL(nClaimStatus,0) = 1 ";
                    oParameters.Add("@nClaimno", ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),  
                    oParameters.Add("@sSubClaimno", "", ParameterDirection.Input, SqlDbType.VarChar, 50);// Varchar(50) 

                    oDB.Connect(false);
                    oDB.Retrive("BL_Select_SplitClaims", oParameters, out _dt);
                    //_retBillingTranId = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_dt != null && _dt.Rows.Count > 0)
                    { _TransactionMstID = Convert.ToInt64(_dt.Rows[0]["nTransactionID"]); }

                    //if (_retBillingTranId != null && Convert.ToString(_retBillingTranId).Trim() != "")
                    //{ _TransactionMstID = Convert.ToInt64(_retBillingTranId); }

                }

            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log(ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                //if (_retBillingTranId != null) { _retBillingTranId = null; }
                if (oParameters != null) { oParameters.Clear(); oParameters.Dispose(); oParameters = null; }
                if (_dt != null) { _dt.Dispose(); }
            }

            return _TransactionMstID;
        }

        public Int64 GetBillingTransactionTrackingID(Int64 ClaimNo, Int64 SubClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            //Object _retBillingTranId = null;
           // string _sqlQuery = "";
            Int64 _TransactionMstID = 0;
            DataTable _dt = null;

            try
            {
                if (ClaimNo > 0)
                {


                    //_sqlQuery = " select TOP 1 ISNULL(nTransactionID,0) AS nTransactionID FROM BL_Transaction_Claim_MST where nClaimNo = " + ClaimNo + " AND nSubClaimNo = "+ SubClaimNo +" AND nClinicID = " + _ClinicID + " ";
                    //_sqlQuery = " select TOP 1 ISNULL(nTransactionID,0) AS nTransactionID FROM BL_Transaction_Claim_MST where nClaimNo = " + ClaimNo + " AND nSubClaimNo = " + SubClaimNo + " AND nClinicID = " + _ClinicID + " AND ISNULL(nClaimStatus,0) = 1 ";

                    oParameters.Add("@nClaimno", ClaimNo, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),  
                    oParameters.Add("@sSubClaimno", SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar, 50);// Varchar(50) 

                    oDB.Connect(false);
                    //_retBillingTranId = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Retrive("BL_Select_SplitClaims", oParameters, out _dt);
                    oDB.Disconnect();

                    if (_dt != null && _dt.Rows.Count > 0)
                    { _TransactionMstID = Convert.ToInt64(_dt.Rows[0]["nTransactionID"]); }

                    //if (_retBillingTranId != null && Convert.ToString(_retBillingTranId).Trim() != "")
                    //{ _TransactionMstID = Convert.ToInt64(_retBillingTranId); }
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log(ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                //if (_retBillingTranId != null) { _retBillingTranId = null; }
                if (oParameters != null) { oParameters.Clear(); oParameters.Dispose(); oParameters = null; }
                if (_dt != null) { _dt.Dispose(); }

            }

            return _TransactionMstID;
        }

        public string GetFormattedClaimPaymentNumber(string NumberSize)
        {
            int _length = 0;
            _length = NumberSize.Length;
            if (_length == 1)
            {
                NumberSize = "0000" + NumberSize;
            }
            else if (_length == 2)
            {
                NumberSize = "000" + NumberSize;
            }
            else if (_length == 3)
            {
                NumberSize = "00" + NumberSize;
            }
            else if (_length == 4)
            {
                NumberSize = "0" + NumberSize;
            }
            else if (_length == 5)
            {
               // NumberSize = NumberSize;
            }
            return NumberSize;
        }

        public EOBPayment.Common.PaymentPatientClaims GetBillingForVoidTransaction(Int64 TransactionId, Int64 PatientId, bool IsClaimSearch, bool LoadZeroBalance)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            DataTable dtBillingTransaction = new DataTable();
            DataTable dtBillingTransactionLines = new DataTable();
            EOBPayment.Common.PaymentPatientClaim oPaymentClaim = null;
            EOBPayment.Common.PaymentPatientLine oPaymentLine = null;
            Int64 _claimTranId = 0;
            ArrayList _claimTranIds = new ArrayList();
            EOBPayment.Common.PaymentPatientClaims oPaymentClaims = new global::gloBilling.EOBPayment.Common.PaymentPatientClaims();

            try
            {
                //if (IsClaimSearch == true)
                //{
                //    _claimTranId = GetBillingTransactionID(ClaimNo);
                //    _claimTranIds.Add(_claimTranId);
                //}
                if (TransactionId > 0)
                {
                    _claimTranIds.Add(TransactionId);
                }


                if (_claimTranIds != null && _claimTranIds.Count > 0)
                {
                    for (int x = 0; x < _claimTranIds.Count; x++)
                    {
                        _claimTranId = 0;
                        _claimTranId = Convert.ToInt64(_claimTranIds[x]);

                        if (_claimTranId > 0)
                        {
                            #region "Retrive Billing Master Transaction"

                            oParameters.Clear();
                            oParameters.Add("@nTransactionID", _claimTranId, ParameterDirection.Input, SqlDbType.BigInt);
                            oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDB.Connect(false);
                            oDB.Retrive("BL_SELECT_PaymentTransaction_MST", oParameters, out dtBillingTransaction);
                            oDB.Disconnect();
                            oParameters.Clear();

                            #endregion

                            #region " Set Transaction Master Data "

                            if (dtBillingTransaction != null && dtBillingTransaction.Rows.Count > 0)
                            {
                                int nTrnCntr = 0;

                                oPaymentClaim = new global::gloBilling.EOBPayment.Common.PaymentPatientClaim();
                                oPaymentClaim.ClaimNo = Convert.ToInt64(dtBillingTransaction.Rows[nTrnCntr]["nClaimNo"]);
                                oPaymentClaim.DisplayClaimNo = GetFormattedClaimPaymentNumber(dtBillingTransaction.Rows[nTrnCntr]["nClaimNo"].ToString());
                                oPaymentClaim.ClaimNoPrefix = Convert.ToString(dtBillingTransaction.Rows[nTrnCntr]["sCaseNoPrefix"]);
                                oPaymentClaim.BillingTransactionID = Convert.ToInt64(dtBillingTransaction.Rows[nTrnCntr]["nTransactionID"]);
                                oPaymentClaim.BillingTransactionDate = Convert.ToInt64(dtBillingTransaction.Rows[nTrnCntr]["nTransactionDate"]);
                                oPaymentClaim.PatientID = Convert.ToInt64(dtBillingTransaction.Rows[nTrnCntr]["nPatientID"]);
                                oPaymentClaim.PatientName = Convert.ToString(dtBillingTransaction.Rows[nTrnCntr]["PatientName"]);

                                #region "Retrive Billing Transaction Lines Data "

                                oParameters.Clear();
                                oParameters.Add("@nTransactionID", oPaymentClaim.BillingTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@nTransactionDetailID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@nPatientID", oPaymentClaim.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                                oDB.Connect(false);
                                oDB.Retrive("BL_SELECT_PaymentTransaction_Lines_PatPayment_VOID", oParameters, out dtBillingTransactionLines);
                                oDB.Disconnect();
                                oParameters.Clear();

                                if (dtBillingTransactionLines != null && dtBillingTransactionLines.Rows.Count > 0)
                                {
                                    for (int nTrnLineCntr = 0; nTrnLineCntr < dtBillingTransactionLines.Rows.Count; nTrnLineCntr++)
                                    {

                                        oPaymentLine = new global::gloBilling.EOBPayment.Common.PaymentPatientLine();

                                        oPaymentLine.PatientID = oPaymentClaim.PatientID;
                                        oPaymentLine.BLTransactionID = oPaymentClaim.BillingTransactionID;
                                        oPaymentLine.BLTransactionDetailID = Convert.ToInt64(dtBillingTransactionLines.Rows[nTrnLineCntr]["nTransactionDetailID"].ToString());
                                        oPaymentLine.BLTransactionLineNo = Convert.ToInt64(dtBillingTransactionLines.Rows[nTrnLineCntr]["nTransactionLineNo"].ToString());
                                        oPaymentLine.ClaimNumber = Convert.ToInt64(dtBillingTransactionLines.Rows[nTrnLineCntr]["ClaimNumber"].ToString());
                                        oPaymentLine.DOSFrom = Convert.ToInt64(dtBillingTransactionLines.Rows[nTrnLineCntr]["nFromDate"].ToString());
                                        oPaymentLine.DOSTo = Convert.ToInt64(dtBillingTransactionLines.Rows[nTrnLineCntr]["nToDate"].ToString());
                                        oPaymentLine.CPTCode = Convert.ToString(dtBillingTransactionLines.Rows[nTrnLineCntr]["sCPTCode"].ToString());
                                        oPaymentLine.CPTDescription = Convert.ToString(dtBillingTransactionLines.Rows[nTrnLineCntr]["sCPTDescription"].ToString());

                                        oPaymentLine.BLInsuranceID = Convert.ToInt64(dtBillingTransactionLines.Rows[nTrnLineCntr]["LineInsuranceID"].ToString());
                                        oPaymentLine.BLInsuranceName = Convert.ToString(dtBillingTransactionLines.Rows[nTrnLineCntr]["LineInsuranceName"].ToString());
                                        oPaymentLine.BLInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt32(dtBillingTransactionLines.Rows[nTrnLineCntr]["LineInsuranceFlag"]));

                                        oPaymentLine.Charges = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["dCharges"]);
                                        oPaymentLine.Unit = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["dUnit"]);
                                        oPaymentLine.TotalCharges = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["dTotal"]);
                                        oPaymentLine.Allowed = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["dAllowed"]);
                                        oPaymentLine.WriteOff = 0;
                                        oPaymentLine.NonCovered = 0;
                                        oPaymentLine.InsuranceAmount = 0;
                                        oPaymentLine.Copay = 0;
                                        oPaymentLine.Deductible = 0;
                                        oPaymentLine.CoInsurance = 0;
                                        oPaymentLine.Withhold = 0;


                                        oPaymentLine.LinePreviousPaid = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["PreviousPaid"]);
                                        oPaymentLine.LinePreviousAdjuestment = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["PreviousAdjuestment"]);
                                        oPaymentLine.LineBalance = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["TotalBalanceAmount"]);
                                        oPaymentLine.LinePatientDue = Convert.ToDecimal(dtBillingTransactionLines.Rows[nTrnLineCntr]["PatientDue"]);

                                        oPaymentClaim.CliamLines.Add(oPaymentLine);
                                        oPaymentLine.Dispose();
                                        oPaymentLine = null;
                                    }
                                }

                                #endregion

                                if (oPaymentClaim.CliamLines.Count > 0)
                                {
                                    oPaymentClaims.Add(oPaymentClaim);
                                }
                                oPaymentClaim.Dispose();
                                oPaymentClaim = null;
                                if (dtBillingTransactionLines != null)
                                {
                                    dtBillingTransactionLines.Dispose();
                                    dtBillingTransactionLines = null;
                                }
                            }
                            if (dtBillingTransaction != null)
                            {
                                dtBillingTransaction.Dispose();
                                dtBillingTransaction = null;
                            }
                            #endregion " Set Transaction Master Data "
                        }
                    }
                }
                if (_claimTranIds != null)
                {
                    _claimTranIds.Clear();
                    _claimTranIds = null;
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            { ex.ERROR_Log(ex.ToString()); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true); }
            finally
            {
                if (oParameters != null) { oParameters.Clear(); oParameters.Dispose(); oParameters = null; }
                if (oDB != null) { oDB.Dispose(); }
                if (dtBillingTransaction != null) { dtBillingTransaction.Dispose(); }
                if (dtBillingTransactionLines != null) { dtBillingTransactionLines.Dispose(); }
            }

            return oPaymentClaims;
        }

        public void VoidClaim(Int64 TransactionId, bool IsVoid, Int64 UserId, string UserName)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oParameters.Add("@nTransactionID", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);// NUMERIC(18,0),
                if (IsVoid)
                { oParameters.Add("@bIsVoid", 1, ParameterDirection.Input, SqlDbType.Bit); }
                else
                { oParameters.Add("@bIsVoid", 0, ParameterDirection.Input, SqlDbType.Bit); }
                oParameters.Add("@nUserID", UserId, ParameterDirection.Input, SqlDbType.BigInt);//  NUMERIC(18,0),
                oParameters.Add("@sUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar); //VARCHAR(255)
                oParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Connect(false);
                int val = oDB.Execute("BL_Void_Claim", oParameters);
                oDB.Disconnect();


            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Clear(); oParameters.Dispose(); oParameters = null; }
            }
        }


        public Int64 VoidPatientPayment(Int64 TransactionId, Int64 PatientId, string PatientName, string CloseDate, string VoidNote, Int64 VoidCloseDate, Int64 VoidTrayID, string VoidTrayCode, string VoidTrayName)
        {
            Int64 _retPayId = 0;
            EOBPayment.Common.EOBPatientPaymentDetails EOBPatientPaymentMasterLines = new EOBPayment.Common.EOBPatientPaymentDetails();
            EOBPayment.gloEOBPaymentPatient ogloEOBPaymentPatient = null; // new EOBPayment.gloEOBPaymentPatient(_databaseconnectionstring);
            EOBPayment.Common.PaymentPatient oPaymentPatient = new EOBPayment.Common.PaymentPatient();
            EOBPayment.Common.PaymentPatientClaims oPaymentBillingPatientClaims = null;
            EOBPayment.Common.PaymentPatientClaim oPaymentPatientClaim = null;
            EOBPayment.Common.EOBPatientPaymentDetail oEOBPatientPaymentDetail = null;
            EOBPayment.Common.EOBPatientPaymentDetail oEOBPatientPaymentCreditDetail = new global::gloBilling.EOBPayment.Common.EOBPatientPaymentDetail();
            gloGeneralItem.gloItems oCrItems = new gloGeneralItem.gloItems();
            gloDatabaseLayer.DBLayer oDB = null;
            string _sqlQuery = "";
            Int64 _EOBPaymentID = 0;
         //   Object _retVal = null;


            try
            {
                Int64 _CloseDayTrayID = 0;
                string _CloseDayTrayCode = "";
                string _CloseDayTrayName = "";
                EOBPaymentMode _EOBPaymentMode = EOBPaymentMode.None;

                //.... Get Patient Previous Paid
                oPaymentBillingPatientClaims = GetBillingForVoidTransaction(TransactionId, PatientId, true, true);

                if (oPaymentBillingPatientClaims != null && oPaymentBillingPatientClaims.Count > 0)
                {

                    #region "Payment Tray"


                    _CloseDayTrayID = VoidTrayID;
                    _CloseDayTrayCode = VoidTrayCode;
                    _CloseDayTrayName = VoidTrayName;

                    //gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
                    //Object _retSettingValue = null;
                    //oSettings.GetSetting("PAYMENT_LASTCLOSETRAYID", _UserId, _ClinicID, out _retSettingValue);
                    //oSettings.Dispose();

                    //if (_retSettingValue != null && Convert.ToString(_retSettingValue).Trim() != "")
                    //{
                    //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    //    oDB.Connect(false);
                    //    _retVal = new object();
                    //    _retVal = oDB.ExecuteScalar_Query("SELECT sDescription FROM BL_CloseDayTray WHERE nCloseDayTrayID = " + Convert.ToInt64(_retSettingValue) + " AND nClinicID = " + _ClinicID + "");
                    //    if (_retVal != null && _retVal.ToString().Trim().Length > 0)
                    //    {
                    //        _CloseDayTrayName = _retVal.ToString(); ;
                    //        _CloseDayTrayID = Convert.ToInt64(_retSettingValue);
                    //        _retVal = null;
                    //    }
                    //    oDB.Disconnect();
                    //}
                    //else
                    //{  //... select the default payment tray
                    //    DataTable _dt = null ;
                    //    _sqlQuery = " SELECT ISNULL(nCloseDayTrayID,0) As nCloseDayTrayID,ISNULL(sDescription,'') AS sDescription FROM BL_CloseDayTray " +
                    //    " WHERE nCloseDayTrayID IS NOT NULL AND sDescription IS NOT NULL AND nCloseDayTrayID > 0 " +
                    //    " AND sDescription <> ''  AND ISNULL(bIsClosed,0) = 0 AND bIsDefault = 'true' AND nUserID = " + _UserId + " AND nClinicID = " + _ClinicID + "";
                    //    oDB.Connect(false);
                    //    oDB.Retrive_Query(_sqlQuery, out _dt);
                    //    oDB.Disconnect();
                    //    if (_dt != null && _dt.Rows.Count > 0)
                    //    {
                    //        _CloseDayTrayID = Convert.ToInt64(_dt.Rows[0]["nCloseDayTrayID"]);
                    //        _CloseDayTrayName = Convert.ToString(_dt.Rows[0]["sDescription"]);
                    //        _dt.Dispose();
                    //    }
                    //}

                    #endregion

                    #region "Payment Mode"
                    _EOBPaymentMode = EOBPaymentMode.None;
                    #endregion

                    #region " Master Data "

                    ogloEOBPaymentPatient = new EOBPayment.gloEOBPaymentPatient(_databaseconnectionstring);
                    oPaymentPatient.PaymentNumber = ogloEOBPaymentPatient.GetPaymentPrefixNumber(_paymentPrefix).Trim();
                    ogloEOBPaymentPatient.Dispose();

                    oPaymentPatient.PaymentNumberPefix = _paymentPrefix;
                    oPaymentPatient.EOBPaymentID = _EOBPaymentID;
                    oPaymentPatient.EOBRefNO = "";

                    oPaymentPatient.PayerName = PatientName;

                    oPaymentPatient.PayerID = PatientId;
                    oPaymentPatient.PayerType = EOBPaymentAccountType.Patient;
                    oPaymentPatient.PaymentMode = _EOBPaymentMode;
                    oPaymentPatient.CheckNumber = "";
                    oPaymentPatient.CheckAmount = 0;
                    oPaymentPatient.CheckDate = 0;

                    oPaymentPatient.MSTAccountID = PatientId;
                    oPaymentPatient.MSTAccountType = EOBPaymentAccountType.Patient;
                    oPaymentPatient.ClinicID = _ClinicID;
                    oPaymentPatient.CreatedDateTime = DateTime.Now;
                    oPaymentPatient.ModifiedDateTime = DateTime.Now;

                    oPaymentPatient.PaymentTrayID = _CloseDayTrayID;
                    oPaymentPatient.PaymentTrayCode = _CloseDayTrayCode;
                    oPaymentPatient.PaymentTrayDesc = _CloseDayTrayName;

                    oPaymentPatient.CloseDate = VoidCloseDate;

                    oPaymentPatient.CardType = "";
                    oPaymentPatient.CardSecurityNo = "";
                    oPaymentPatient.CardID = 0;

                    oPaymentPatient.UserID = _UserId;
                    oPaymentPatient.UserName = _UserName;

                    #region "Payment Master Note"
                    //Notes if any to main payment to all claim OR main payment to reserve account
                    /*
                    if (false)
                    {
                        EOBPayment.Common.PaymentPatientLineNote oPaymentPatientLineNote = new global::gloBilling.EOBPayment.Common.PaymentPatientLineNote();

                        oPaymentPatientLineNote.ClaimNo = 0;
                        oPaymentPatientLineNote.EOBPaymentID = 0;
                        oPaymentPatientLineNote.EOBID = 0;
                        oPaymentPatientLineNote.EOBPaymentDetailID = 0;
                        oPaymentPatientLineNote.BillingTransactionID = 0;
                        oPaymentPatientLineNote.BillingTransactionDetailID = 0;
                        oPaymentPatientLineNote.Code = "";
                        oPaymentPatientLineNote.Description = "";
                        oPaymentPatientLineNote.Amount = 0;
                        oPaymentPatientLineNote.IncludeOnPrint = false;
                        oPaymentPatientLineNote.ClinicID = _ClinicID;
                        oPaymentPatientLineNote.PaymentNoteType = EOBPaymentType.PatientPayment;
                        oPaymentPatientLineNote.PaymentNoteSubType = EOBPaymentSubType.Other;
                        oPaymentPatientLineNote.HasData = true;


                        oPaymentPatient.Notes.Add(oPaymentPatientLineNote);
                        oPaymentPatientLineNote.Dispose();
                    }
                    */
                    #endregion

                    #endregion

                    #region "Credit Service Line Entry applicable to all claims, so it goes to master level not line level"

                    #region "Main Credit Line entry will be zero for reserve payment, when check and reserve in same entry then we will use this one, till that point its 0 payment entry"

                    //now its one time entry, but for partial payement implement like insurace payment
                    oEOBPatientPaymentCreditDetail.EOBPaymentID = _EOBPaymentID;
                    oEOBPatientPaymentCreditDetail.EOBID = 0;
                    oEOBPatientPaymentCreditDetail.EOBDtlID = 0;
                    oEOBPatientPaymentCreditDetail.EOBPaymentDetailID = 0;
                    oEOBPatientPaymentCreditDetail.RefEOBPaymentID = 0;
                    oEOBPatientPaymentCreditDetail.RefEOBPaymentDetailID = 0;
                    oEOBPatientPaymentCreditDetail.ReserveEOBPaymentID = 0;
                    oEOBPatientPaymentCreditDetail.ReserveEOBPaymentDetailID = 0;


                    oEOBPatientPaymentCreditDetail.BillingTransactionID = 0;
                    oEOBPatientPaymentCreditDetail.BillingTransactionDetailID = 0;
                    oEOBPatientPaymentCreditDetail.BillingTransactionLineNo = 0;


                    oEOBPatientPaymentCreditDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(CloseDate);
                    oEOBPatientPaymentCreditDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(CloseDate);

                    oEOBPatientPaymentCreditDetail.CPTCode = "";
                    oEOBPatientPaymentCreditDetail.CPTDescription = "";

                    oEOBPatientPaymentCreditDetail.Amount = 0;
                    oEOBPatientPaymentCreditDetail.IsNullAmount = false;

                    oEOBPatientPaymentCreditDetail.PaymentType = EOBPaymentType.PatientPayment;
                    oEOBPatientPaymentCreditDetail.PaymentSubType = EOBPaymentSubType.Patient;
                    oEOBPatientPaymentCreditDetail.PaySign = EOBPaymentSign.Payment_Credit;
                    oEOBPatientPaymentCreditDetail.PayMode = _EOBPaymentMode;

                    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                    oEOBPatientPaymentCreditDetail.AccountID = PatientId;
                    oEOBPatientPaymentCreditDetail.AccountType = EOBPaymentAccountType.Patient;
                    oEOBPatientPaymentCreditDetail.MSTAccountID = PatientId;
                    oEOBPatientPaymentCreditDetail.MSTAccountType = EOBPaymentAccountType.Patient;
                    oEOBPatientPaymentCreditDetail.ContactInsID = 0;

                    oEOBPatientPaymentCreditDetail.PatientID = PatientId;
                    oEOBPatientPaymentCreditDetail.PaymentTrayID = _CloseDayTrayID;
                    oEOBPatientPaymentCreditDetail.PaymentTrayCode = _CloseDayTrayCode;
                    oEOBPatientPaymentCreditDetail.PaymentTrayDescription = _CloseDayTrayName;
                    oEOBPatientPaymentCreditDetail.UserID = _UserId;
                    oEOBPatientPaymentCreditDetail.UserName = _UserName;
                    oEOBPatientPaymentCreditDetail.ClinicID = _ClinicID;

                    oEOBPatientPaymentCreditDetail.FinanceLieNo = 1;
                    oEOBPatientPaymentCreditDetail.MainCreditLineID = EOBPaymentCreditLineType.CorrectionAsCreditLine.GetHashCode();
                    oEOBPatientPaymentCreditDetail.IsMainCreditLine = true;
                    oEOBPatientPaymentCreditDetail.IsReserveCreditLine = false;
                    oEOBPatientPaymentCreditDetail.IsCorrectionCreditLine = false;
                    oEOBPatientPaymentCreditDetail.RefFinanceLieNo = 0;
                    oEOBPatientPaymentCreditDetail.UseRefFinanceLieNo = false;

                    oEOBPatientPaymentCreditDetail.CloseDate = VoidCloseDate;

                    oPaymentPatient.EOBPatientPaymentLineDetails.Add(oEOBPatientPaymentCreditDetail);

                    #endregion

                    #region "Negative Amount Credit Entries - Fetch from database and set to object"

                    if (oPaymentBillingPatientClaims != null && oPaymentBillingPatientClaims.Count > 0
                        && oPaymentBillingPatientClaims[0].CliamLines.Count > 0)
                    {
                        for (int nCrIndex = 0; nCrIndex <= oPaymentBillingPatientClaims[0].CliamLines.Count - 1; nCrIndex++)
                        {
                            if (oPaymentBillingPatientClaims[0].CliamLines[nCrIndex] != null && oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionID > 0)
                            {
                                if (oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].LinePreviousPaid > 0)
                                {
                                    //if (Convert.ToDecimal(c1SinglePayment.GetData(nCrIndex, COL_CUR_PAYMENT)) < 0)
                                    {
                                        decimal _crPayAmt = 0;


                                        //... Set the current correction amount as the last patient payment amount
                                        _crPayAmt = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].LinePreviousPaid;


                                        int _crResPayMode = 0;

                                        Int64 _crBillTrnId = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionID;
                                        Int64 _crBillTrnDtlId = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionDetailID;
                                        Int64 _crBillTrnDtlLineId = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionLineNo;
                                        Int64 _crPatientId = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].PatientID;
                                        string _crCptCode = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].CPTCode;

                                        gloDatabaseLayer.DBLayer _nCrDBLayer = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                                        gloDatabaseLayer.DBParameters _nCrDBParameters = new gloDatabaseLayer.DBParameters();
                                        DataTable _nCrDataTable = new DataTable();

                                        _nCrDBParameters.Add("@CorrectionAmount", _crPayAmt, ParameterDirection.Input, SqlDbType.Decimal);// numeric(18,2),
                                        _nCrDBParameters.Add("@nPatientID", _crPatientId, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                                        _nCrDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                                        _nCrDBParameters.Add("@nBillingTransactionID", _crBillTrnId, ParameterDirection.Input, SqlDbType.BigInt);//   numeric(18,0),
                                        _nCrDBParameters.Add("@nBillingTransactionDetailID", _crBillTrnDtlId, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0)
                                        _nCrDBLayer.Connect(false);
                                        _nCrDBLayer.Retrive("BL_SELECT_EOBCorrectionAmountList", _nCrDBParameters, out _nCrDataTable);
                                        _nCrDBLayer.Disconnect();
                                        _nCrDBLayer.Dispose();

                                        if (_nCrDataTable != null && _nCrDataTable.Rows.Count > 0)
                                        {
                                            for (int nCrDTIndex = 0; nCrDTIndex <= _nCrDataTable.Rows.Count - 1; nCrDTIndex++)
                                            {
                                                //Store Cr Amt list for apply to debit lines
                                                gloGeneralItem.gloItem ogloItem = new gloGeneralItem.gloItem(Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nResEOBPaymentID"]), Convert.ToString(_nCrDataTable.Rows[nCrDTIndex]["nResEOBPaymentDetailID"]), Convert.ToString(_nCrDataTable.Rows[nCrDTIndex]["nSelAmt"]));
                                                ogloItem.SubItems.Add(Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nRefEOBPaymentID"]), Convert.ToString(_nCrDataTable.Rows[nCrDTIndex]["nPayMode"]), Convert.ToString(_nCrDataTable.Rows[nCrDTIndex]["nRefEOBPaymentDetailID"]));
                                                oCrItems.Add(ogloItem);
                                               // ogloItem.Dispose(); //SLR: this will dispose subitems.

                                                EOBPayment.Common.EOBPatientPaymentDetail oEOBPatientPaymentResAsCreditDetail = new global::gloBilling.EOBPayment.Common.EOBPatientPaymentDetail();

                                                #region "Set Object"

                                                oEOBPatientPaymentResAsCreditDetail.EOBPaymentID = _EOBPaymentID;
                                                oEOBPatientPaymentResAsCreditDetail.EOBID = 0;
                                                oEOBPatientPaymentResAsCreditDetail.EOBDtlID = 0;
                                                oEOBPatientPaymentResAsCreditDetail.EOBPaymentDetailID = 0;

                                                oEOBPatientPaymentResAsCreditDetail.RefEOBPaymentID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nRefEOBPaymentID"]);
                                                oEOBPatientPaymentResAsCreditDetail.RefEOBPaymentDetailID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nRefEOBPaymentDetailID"]);
                                                oEOBPatientPaymentResAsCreditDetail.ReserveEOBPaymentID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nResEOBPaymentID"]);
                                                oEOBPatientPaymentResAsCreditDetail.ReserveEOBPaymentDetailID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nResEOBPaymentDetailID"]);

                                                oEOBPatientPaymentResAsCreditDetail.BillingTransactionID = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionID;
                                                oEOBPatientPaymentResAsCreditDetail.BillingTransactionDetailID = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionDetailID;
                                                oEOBPatientPaymentResAsCreditDetail.BillingTransactionLineNo = Convert.ToInt32(oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].BLTransactionLineNo);

                                                oEOBPatientPaymentResAsCreditDetail.DOSFrom = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].DOSFrom;
                                                oEOBPatientPaymentResAsCreditDetail.DOSTo = oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].DOSTo;

                                                oEOBPatientPaymentResAsCreditDetail.CPTCode = Convert.ToString(oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].CPTCode);
                                                oEOBPatientPaymentResAsCreditDetail.CPTDescription = Convert.ToString(oPaymentBillingPatientClaims[0].CliamLines[nCrIndex].CPTDescription);

                                                oEOBPatientPaymentResAsCreditDetail.Amount = Convert.ToDecimal(_nCrDataTable.Rows[nCrDTIndex]["nSelAmt"]) - (Convert.ToDecimal(_nCrDataTable.Rows[nCrDTIndex]["nSelAmt"]) * 2);
                                                oEOBPatientPaymentResAsCreditDetail.IsNullAmount = false;

                                                oEOBPatientPaymentResAsCreditDetail.PaymentType = EOBPaymentType.PatientPayment;
                                                oEOBPatientPaymentResAsCreditDetail.PaymentSubType = EOBPaymentSubType.Correction;
                                                oEOBPatientPaymentResAsCreditDetail.PaySign = EOBPaymentSign.Payment_Credit;
                                                oEOBPatientPaymentResAsCreditDetail.PayMode = (EOBPaymentMode)_crResPayMode;

                                                //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                                                oEOBPatientPaymentResAsCreditDetail.AccountID = PatientId;
                                                oEOBPatientPaymentResAsCreditDetail.AccountType = EOBPaymentAccountType.Patient;
                                                oEOBPatientPaymentResAsCreditDetail.MSTAccountID = PatientId;
                                                oEOBPatientPaymentResAsCreditDetail.MSTAccountType = EOBPaymentAccountType.Patient;
                                                oEOBPatientPaymentResAsCreditDetail.PatientID = PatientId;
                                                oEOBPatientPaymentResAsCreditDetail.PaymentTrayID = _CloseDayTrayID;
                                                oEOBPatientPaymentResAsCreditDetail.PaymentTrayCode = _CloseDayTrayCode;
                                                oEOBPatientPaymentResAsCreditDetail.PaymentTrayDescription = _CloseDayTrayName;
                                                oEOBPatientPaymentResAsCreditDetail.UserID = _UserId;
                                                oEOBPatientPaymentResAsCreditDetail.UserName = _UserName;
                                                oEOBPatientPaymentResAsCreditDetail.ClinicID = _ClinicID;

                                                oEOBPatientPaymentResAsCreditDetail.FinanceLieNo = oPaymentPatient.EOBPatientPaymentLineDetails.Count + 1;
                                                oEOBPatientPaymentResAsCreditDetail.MainCreditLineID = 0;
                                                oEOBPatientPaymentResAsCreditDetail.IsMainCreditLine = false;
                                                oEOBPatientPaymentResAsCreditDetail.IsReserveCreditLine = false;
                                                oEOBPatientPaymentResAsCreditDetail.IsCorrectionCreditLine = true;
                                                oEOBPatientPaymentResAsCreditDetail.RefFinanceLieNo = 0;
                                                oEOBPatientPaymentResAsCreditDetail.UseRefFinanceLieNo = false;

                                                oEOBPatientPaymentResAsCreditDetail.CloseDate = VoidCloseDate;

                                                oPaymentPatient.EOBPatientPaymentLineDetails.Add(oEOBPatientPaymentResAsCreditDetail);

                                                #endregion

                                                oEOBPatientPaymentResAsCreditDetail.Dispose();
                                            }
                                        }
                                        //_nCrDBLayer.Dispose();
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #endregion

                    if (oPaymentBillingPatientClaims != null && oPaymentBillingPatientClaims.Count > 0)
                    {
                        for (int rowIndex = 0; rowIndex <= oPaymentBillingPatientClaims.Count - 1; rowIndex++)
                        {
                            if (oPaymentBillingPatientClaims[0] != null)
                            {
                                #region  "..Need to check if payment or adjustment is made against any of the claim line then skip claim "

                                bool _hasDataToSave = false;
                                for (int index = 0; index < oPaymentBillingPatientClaims[0].CliamLines.Count; index++)
                                {
                                    if (oPaymentBillingPatientClaims[0].CliamLines[index].LinePreviousPaid > 0
                                        || oPaymentBillingPatientClaims[0].CliamLines[index].LinePreviousAdjuestment > 0)
                                    {
                                        _hasDataToSave = true;
                                        break;
                                    }

                                }

                                if (_hasDataToSave == false) { continue; }

                                #endregion

                                oPaymentPatientClaim = new global::gloBilling.EOBPayment.Common.PaymentPatientClaim();

                                oPaymentPatientClaim.ClaimNo = oPaymentBillingPatientClaims[rowIndex].ClaimNo;
                                oPaymentPatientClaim.ClaimNoPrefix = "";
                                oPaymentPatientClaim.ClinicID = _ClinicID;
                                oPaymentPatientClaim.DisplayClaimNo = "";
                                oPaymentPatientClaim.PatientID = oPaymentBillingPatientClaims[rowIndex].PatientID;
                                oPaymentPatientClaim.PatientName = oPaymentBillingPatientClaims[rowIndex].PatientName;
                                oPaymentPatientClaim.BillingTransactionID = oPaymentBillingPatientClaims[rowIndex].BillingTransactionID;


                                for (int i = 0; i < oPaymentBillingPatientClaims[0].CliamLines.Count; i++)
                                {

                                    //if (c1SinglePayment.GetData(i, COL_SERVICELINE_TYPE) != null && (ColServiceLineType)c1SinglePayment.GetData(i, COL_SERVICELINE_TYPE) == ColServiceLineType.ServiceLine)
                                    {
                                        if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousPaid > 0
                                        || oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                        {
                                            #region "EOB Service Lines"

                                            EOBPayment.Common.PaymentPatientLine oPaymentPatientLine = new EOBPayment.Common.PaymentPatientLine();

                                            #region "EOB Line"

                                            oPaymentPatientLine.PatientID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].PatientID;
                                            oPaymentPatientLine.PatInsuranceID = 0;// Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1));
                                            oPaymentPatientLine.InsContactID = 0;// Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));
                                            oPaymentPatientLine.BLTransactionID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionID;
                                            oPaymentPatientLine.BLTransactionDetailID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionDetailID;
                                            oPaymentPatientLine.BLTransactionLineNo = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionLineNo;
                                            oPaymentPatientLine.ClaimNumber = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].ClaimNumber;

                                            oPaymentPatientLine.DOSFrom = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].DOSFrom;
                                            oPaymentPatientLine.DOSTo = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].DOSTo;

                                            oPaymentPatientLine.CPTCode = Convert.ToString(oPaymentBillingPatientClaims[rowIndex].CliamLines[i].CPTCode);
                                            oPaymentPatientLine.CPTDescription = Convert.ToString(oPaymentBillingPatientClaims[rowIndex].CliamLines[i].CPTDescription);

                                            oPaymentPatientLine.BLInsuranceID = 0;
                                            oPaymentPatientLine.BLInsuranceName = "";
                                            oPaymentPatientLine.BLInsuranceFlag = InsuranceTypeFlag.None;


                                            oPaymentPatientLine.Charges = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].Charges;
                                            oPaymentPatientLine.IsNullCharges = false;


                                            oPaymentPatientLine.Unit = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].Unit;
                                            oPaymentPatientLine.IsNullUnit = false;


                                            oPaymentPatientLine.TotalCharges = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].TotalCharges;
                                            oPaymentPatientLine.IsNullTotalCharges = false;

                                            oPaymentPatientLine.Allowed = 0;

                                            if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                            { oPaymentPatientLine.WriteOff = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment; oPaymentPatientLine.IsNullWriteOff = false; }

                                            oPaymentPatientLine.NonCovered = 0;
                                            if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousPaid > 0)
                                            { oPaymentPatientLine.InsuranceAmount = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousPaid; oPaymentPatientLine.IsNullInsurance = false; }

                                            oPaymentPatientLine.Copay = 0;//Convert.ToDecimal(c1SinglePayment.GetData(i, COL_COPAY)); }
                                            oPaymentPatientLine.Deductible = 0;//Convert.ToDecimal(c1SinglePayment.GetData(i, COL_DEDUCTIBLE)); }
                                            oPaymentPatientLine.CoInsurance = 0;//Convert.ToDecimal(c1SinglePayment.GetData(i, COL_COINSURANCE)); }
                                            oPaymentPatientLine.Withhold = 0;//Convert.ToDecimal(c1SinglePayment.GetData(i, COL_WITHHOLD)); }

                                            oPaymentPatientLine.PaymentTrayID = _CloseDayTrayID;
                                            oPaymentPatientLine.PaymentTrayCode = _CloseDayTrayCode;
                                            oPaymentPatientLine.PaymentTrayDesc = _CloseDayTrayName;


                                            oPaymentPatientLine.UserID = _UserId;
                                            oPaymentPatientLine.UserName = _UserName;
                                            oPaymentPatientLine.ClinicID = _ClinicID;
                                            oPaymentPatientLine.EOBType = EOBPaymentType.PatientPayment;

                                            oPaymentPatientLine.CloseDate = VoidCloseDate;

                                            //Adjestment Information
                                            if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                            {
                                                if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                                {
                                                    EOBPayment.Common.PaymentPatientLineAdjustmentCode oPaymentPatientLineAdjustmentCode = new EOBPayment.Common.PaymentPatientLineAdjustmentCode();

                                                    oPaymentPatientLineAdjustmentCode.ClaimNo = oPaymentBillingPatientClaims[rowIndex].ClaimNo;
                                                    oPaymentPatientLineAdjustmentCode.EOBPaymentID = 0;
                                                    oPaymentPatientLineAdjustmentCode.EOBID = 0;
                                                    oPaymentPatientLineAdjustmentCode.EOBPaymentDetailID = 0;

                                                    oPaymentPatientLineAdjustmentCode.BillingTransactionID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionID;
                                                    oPaymentPatientLineAdjustmentCode.BillingTransactionDetailID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionDetailID;


                                                    oPaymentPatientLineAdjustmentCode.Code = "";

                                                    oPaymentPatientLineAdjustmentCode.Description = "Void Adjustment";


                                                    if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                                    {
                                                        oPaymentPatientLineAdjustmentCode.Amount = (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment - (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment * 2));
                                                        oPaymentPatientLineAdjustmentCode.IsNullAmount = false;
                                                    }

                                                    oPaymentPatientLineAdjustmentCode.ClinicID = _ClinicID;

                                                    oPaymentPatientLine.LineAdjestmentCodes.Add(oPaymentPatientLineAdjustmentCode);
                                                    oPaymentPatientLineAdjustmentCode.Dispose();
                                                }
                                            }

                                            #endregion

                                            #region "Debit Service Line - Patient"

                                            #region " Commented "
                                            //if (Convert.ToDecimal(c1SinglePayment.GetData(i, COL_CUR_PAYMENT)) > 0)
                                            //{
                                            //    #region "Debit Service Line - patient "

                                            //    decimal _fillPayAmt = 0; decimal _fillAdjAmt = 0; decimal _fillResAmt = 0;
                                            //    Int64 _fillResPayID = 0; Int64 _fillResPayDtlID = 0;
                                            //    Int64 _fillRefPayID = 0; Int64 _fillRefPayDtlID = 0;
                                            //    int _fillrPayIndx = -1;
                                            //    int _fillRefFinanceLieNo = 0;
                                            //    bool _fillUseRefFinanceLieNo = false;
                                            //    bool _isNullfillPayAmt = false;
                                            //    bool _isNullfillAdjAmt = false;

                                            //    if (c1SinglePayment.GetData(i, COL_CUR_PAYMENT) != null && Convert.ToString(c1SinglePayment.GetData(i, COL_CUR_PAYMENT)).Trim() != "")
                                            //    { _fillPayAmt = Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_CUR_PAYMENT))); _isNullfillPayAmt = false; }

                                            //    _fillPayAmt = _fillPayAmt - (_fillPayAmt * 2);

                                            //    if (c1SinglePayment.GetData(i, COL_CUR_ADJ_AMOUNT) != null && Convert.ToString(c1SinglePayment.GetData(i, COL_CUR_ADJ_AMOUNT)).Trim() != "")
                                            //    { _fillAdjAmt = Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_CUR_ADJ_AMOUNT))); _isNullfillAdjAmt = false; }

                                            //    _fillAdjAmt = _fillAdjAmt - (_fillAdjAmt * 2);

                                            //    for (int rPay = 0; rPay <= oCrItems.Count - 1; rPay++)
                                            //    {
                                            //        if (Convert.ToDecimal(oCrItems[rPay].Description) > 0)
                                            //        {
                                            //            _fillResAmt = Convert.ToDecimal(oCrItems[rPay].Description);
                                            //            _fillResPayID = Convert.ToInt64(oCrItems[rPay].ID);
                                            //            _fillResPayDtlID = Convert.ToInt64(oCrItems[rPay].Code);

                                            //            if (oCrItems[rPay].SubItems != null && oCrItems[rPay].SubItems.Count > 0)
                                            //            {
                                            //                _fillRefPayID = Convert.ToInt64(oCrItems[rPay].SubItems[0].ID);
                                            //                _fillRefPayDtlID = Convert.ToInt64(oCrItems[rPay].SubItems[0].Description);
                                            //            }

                                            //            //This logic is temporary depend upon the gloItems
                                            //            //when we implement partial payment it should be depend upon the "EOBInsurancePaymentMasterAllocationLines" this object
                                            //            if (_fillRefPayID == 0 && _fillRefPayDtlID == 0)
                                            //            {
                                            //                _fillUseRefFinanceLieNo = true;
                                            //                _fillRefFinanceLieNo = rPay + 2;
                                            //            }

                                            //            _fillrPayIndx = rPay;
                                            //            break;
                                            //        }
                                            //    }

                                            //    if (_fillPayAmt <= _fillResAmt)
                                            //    {
                                            //        #region "Set Less Amount Single object"
                                            //        oEOBPatientPaymentDetail = new global::gloBilling.EOBPayment.Common.EOBPatientPaymentDetail();
                                            //        oEOBPatientPaymentDetail.EOBPaymentID = 0;
                                            //        oEOBPatientPaymentDetail.EOBID = 0;
                                            //        oEOBPatientPaymentDetail.EOBDtlID = 0;
                                            //        oEOBPatientPaymentDetail.EOBPaymentDetailID = 0;

                                            //        oEOBPatientPaymentDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_ID));
                                            //        oEOBPatientPaymentDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_DETAILID));
                                            //        oEOBPatientPaymentDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_LINENO));
                                            //        oEOBPatientPaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_FROM)));
                                            //        oEOBPatientPaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_TO)));
                                            //        oEOBPatientPaymentDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_CODE));
                                            //        oEOBPatientPaymentDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_DESCRIPTON));

                                            //        oEOBPatientPaymentDetail.Amount = _fillPayAmt - (_fillPayAmt * 2);
                                            //        oEOBPatientPaymentDetail.IsNullAmount = _isNullfillPayAmt;

                                            //        oEOBPatientPaymentDetail.PaymentType = EOBPaymentType.PatientPayment;
                                            //        oEOBPatientPaymentDetail.PaymentSubType = EOBPaymentSubType.Patient;
                                            //        oEOBPatientPaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                                            //        oEOBPatientPaymentDetail.PayMode = _EOBPaymentMode;

                                            //        oEOBPatientPaymentDetail.RefEOBPaymentID = _fillRefPayID;
                                            //        oEOBPatientPaymentDetail.RefEOBPaymentDetailID = _fillRefPayDtlID;
                                            //        oEOBPatientPaymentDetail.ReserveEOBPaymentID = _fillResPayID;
                                            //        oEOBPatientPaymentDetail.ReserveEOBPaymentDetailID = _fillResPayDtlID;

                                            //        //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                                            //        oEOBPatientPaymentDetail.AccountID = _PatientID;
                                            //        oEOBPatientPaymentDetail.AccountType = EOBPaymentAccountType.Patient;
                                            //        oEOBPatientPaymentDetail.MSTAccountID = _PatientID;
                                            //        oEOBPatientPaymentDetail.MSTAccountType = EOBPaymentAccountType.Patient;
                                            //        oEOBPatientPaymentDetail.PatientID = _PatientID;
                                            //        oEOBPatientPaymentDetail.PaymentTrayID = _CloseDayTrayID;
                                            //        oEOBPatientPaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                                            //        oEOBPatientPaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                                            //        oEOBPatientPaymentDetail.UserID = _UserId;
                                            //        oEOBPatientPaymentDetail.UserName = _UserName;
                                            //        oEOBPatientPaymentDetail.ClinicID = _ClinicID;

                                            //        oEOBPatientPaymentDetail.FinanceLieNo = 0;
                                            //        oEOBPatientPaymentDetail.MainCreditLineID = 0;
                                            //        oEOBPatientPaymentDetail.IsMainCreditLine = false;
                                            //        oEOBPatientPaymentDetail.IsReserveCreditLine = false;
                                            //        oEOBPatientPaymentDetail.IsCorrectionCreditLine = false;
                                            //        oEOBPatientPaymentDetail.RefFinanceLieNo = _fillRefFinanceLieNo;
                                            //        oEOBPatientPaymentDetail.UseRefFinanceLieNo = _fillUseRefFinanceLieNo;

                                            //        oPaymentPatientLine.EOBPatientPaymentLineDetails.Add(oEOBPatientPaymentDetail);
                                            //        oEOBPatientPaymentDetail.Dispose();

                                            //        if (_fillrPayIndx != -1)
                                            //        {
                                            //            oCrItems[_fillrPayIndx].Description = Convert.ToString(_fillResAmt - _fillPayAmt);
                                            //        }
                                            //        #endregion
                                            //    }
                                            //    else
                                            //    {
                                            //        #region "Set More Amount Multiple object"

                                            //        decimal _fillPayMulAmt = _fillPayAmt;

                                            //        do
                                            //        {
                                            //            if (Convert.ToDecimal(oCrItems[_fillrPayIndx].Description) > 0)
                                            //            {
                                            //                _fillResAmt = Convert.ToDecimal(oCrItems[_fillrPayIndx].Description);
                                            //                _fillResPayID = Convert.ToInt64(oCrItems[_fillrPayIndx].ID);
                                            //                _fillResPayDtlID = Convert.ToInt64(oCrItems[_fillrPayIndx].Code);
                                            //                _fillRefFinanceLieNo = 0;
                                            //                _fillUseRefFinanceLieNo = false;
                                            //                _isNullfillPayAmt = false;

                                            //                if (oCrItems[_fillrPayIndx].SubItems != null && oCrItems[_fillrPayIndx].SubItems.Count > 0)
                                            //                {
                                            //                    _fillRefPayID = Convert.ToInt64(oCrItems[_fillrPayIndx].SubItems[0].ID);
                                            //                    _fillRefPayDtlID = Convert.ToInt64(oCrItems[_fillrPayIndx].SubItems[0].Description);
                                            //                }

                                            //                if (_fillPayMulAmt >= _fillResAmt)
                                            //                { _fillPayAmt = _fillResAmt; _fillPayMulAmt = _fillPayMulAmt - _fillPayAmt; }
                                            //                else
                                            //                { _fillPayAmt = _fillPayMulAmt; _fillPayMulAmt = _fillPayMulAmt - _fillPayMulAmt; }

                                            //                //This logic is temporary depend upon the gloItems
                                            //                //when we implement partial payment it should be depend upon the "EOBInsurancePaymentMasterAllocationLines" this object
                                            //                if (_fillRefPayID == 0 && _fillRefPayDtlID == 0)
                                            //                {
                                            //                    _fillUseRefFinanceLieNo = true;
                                            //                    _fillRefFinanceLieNo = _fillrPayIndx + 2;
                                            //                }
                                            //            }

                                            //            #region "Set object"

                                            //            oEOBPatientPaymentDetail = new global::gloBilling.EOBPayment.Common.EOBPatientPaymentDetail();
                                            //            oEOBPatientPaymentDetail.EOBPaymentID = 0;
                                            //            oEOBPatientPaymentDetail.EOBID = 0;
                                            //            oEOBPatientPaymentDetail.EOBDtlID = 0;
                                            //            oEOBPatientPaymentDetail.EOBPaymentDetailID = 0;

                                            //            oEOBPatientPaymentDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_ID));
                                            //            oEOBPatientPaymentDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_DETAILID));
                                            //            oEOBPatientPaymentDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_LINENO));
                                            //            oEOBPatientPaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_FROM)));
                                            //            oEOBPatientPaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_TO)));
                                            //            oEOBPatientPaymentDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_CODE));
                                            //            oEOBPatientPaymentDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_DESCRIPTON));

                                            //            oEOBPatientPaymentDetail.Amount = _fillPayAmt - (_fillPayAmt * 2);
                                            //            oEOBPatientPaymentDetail.IsNullAmount = _isNullfillPayAmt;

                                            //            oEOBPatientPaymentDetail.PaymentType = EOBPaymentType.PatientPayment;
                                            //            oEOBPatientPaymentDetail.PaymentSubType = EOBPaymentSubType.Patient;
                                            //            oEOBPatientPaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                                            //            oEOBPatientPaymentDetail.PayMode = _EOBPaymentMode;

                                            //            oEOBPatientPaymentDetail.RefEOBPaymentID = _fillRefPayID;
                                            //            oEOBPatientPaymentDetail.RefEOBPaymentDetailID = _fillRefPayDtlID;
                                            //            oEOBPatientPaymentDetail.ReserveEOBPaymentID = _fillResPayID;
                                            //            oEOBPatientPaymentDetail.ReserveEOBPaymentDetailID = _fillResPayDtlID;

                                            //            //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                                            //            oEOBPatientPaymentDetail.AccountID = _PatientID;
                                            //            oEOBPatientPaymentDetail.AccountType = EOBPaymentAccountType.Patient;
                                            //            oEOBPatientPaymentDetail.MSTAccountID = _PatientID;
                                            //            oEOBPatientPaymentDetail.MSTAccountType = EOBPaymentAccountType.Patient;
                                            //            oEOBPatientPaymentDetail.PatientID = _PatientID;
                                            //            oEOBPatientPaymentDetail.PaymentTrayID = _CloseDayTrayID;
                                            //            oEOBPatientPaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                                            //            oEOBPatientPaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                                            //            oEOBPatientPaymentDetail.UserID = _UserId;
                                            //            oEOBPatientPaymentDetail.UserName = _UserName;
                                            //            oEOBPatientPaymentDetail.ClinicID = _ClinicID;

                                            //            oEOBPatientPaymentDetail.FinanceLieNo = 0;
                                            //            oEOBPatientPaymentDetail.MainCreditLineID = 0;
                                            //            oEOBPatientPaymentDetail.IsMainCreditLine = false;
                                            //            oEOBPatientPaymentDetail.IsReserveCreditLine = false;
                                            //            oEOBPatientPaymentDetail.IsCorrectionCreditLine = false;
                                            //            oEOBPatientPaymentDetail.RefFinanceLieNo = _fillRefFinanceLieNo;
                                            //            oEOBPatientPaymentDetail.UseRefFinanceLieNo = _fillUseRefFinanceLieNo;

                                            //            oPaymentPatientLine.EOBPatientPaymentLineDetails.Add(oEOBPatientPaymentDetail);
                                            //            oEOBPatientPaymentDetail.Dispose();

                                            //            #endregion

                                            //            if (_fillrPayIndx != -1)
                                            //            {
                                            //                oCrItems[_fillrPayIndx].Description = Convert.ToString(_fillResAmt - _fillPayAmt);
                                            //                _fillrPayIndx = _fillrPayIndx + 1;
                                            //                if (_fillrPayIndx >= oCrItems.Count) { break; }
                                            //            }

                                            //        }
                                            //        while (_fillPayMulAmt > 0);

                                            //        #endregion
                                            //    }

                                            //    #endregion
                                            //}
                                            #endregion " Commented "

                                            if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                            {
                                                #region "Debit Service Line - patient adjuestment if any"

                                                if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                                {
                                                    //if (Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_CUR_ADJ_AMOUNT))) < 0)
                                                    {
                                                        oEOBPatientPaymentDetail = new EOBPayment.Common.EOBPatientPaymentDetail();
                                                        oEOBPatientPaymentDetail.EOBPaymentID = 0;
                                                        oEOBPatientPaymentDetail.EOBID = 0;
                                                        oEOBPatientPaymentDetail.EOBDtlID = 0;
                                                        oEOBPatientPaymentDetail.EOBPaymentDetailID = 0;

                                                        oEOBPatientPaymentDetail.BillingTransactionID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionID;
                                                        oEOBPatientPaymentDetail.BillingTransactionDetailID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionDetailID;
                                                        oEOBPatientPaymentDetail.BillingTransactionLineNo = Convert.ToInt32(oPaymentBillingPatientClaims[rowIndex].CliamLines[i].BLTransactionLineNo);

                                                        oEOBPatientPaymentDetail.DOSFrom = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].DOSFrom;
                                                        oEOBPatientPaymentDetail.DOSTo = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].DOSTo;
                                                        oEOBPatientPaymentDetail.CPTCode = Convert.ToString(oPaymentBillingPatientClaims[rowIndex].CliamLines[i].CPTCode);
                                                        oEOBPatientPaymentDetail.CPTDescription = Convert.ToString(oPaymentBillingPatientClaims[rowIndex].CliamLines[i].CPTDescription);

                                                        if (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment > 0)
                                                        {
                                                            oEOBPatientPaymentDetail.Amount = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment - (oPaymentBillingPatientClaims[rowIndex].CliamLines[i].LinePreviousAdjuestment * 2);
                                                            oEOBPatientPaymentDetail.IsNullAmount = false;
                                                        }


                                                        oEOBPatientPaymentDetail.PaymentType = EOBPaymentType.PatientPayment;
                                                        oEOBPatientPaymentDetail.PaymentSubType = EOBPaymentSubType.Adjuestment;
                                                        oEOBPatientPaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                                                        oEOBPatientPaymentDetail.PayMode = _EOBPaymentMode;

                                                        oEOBPatientPaymentDetail.RefEOBPaymentID = 0;
                                                        oEOBPatientPaymentDetail.RefEOBPaymentDetailID = 0;
                                                        oEOBPatientPaymentDetail.ReserveEOBPaymentID = 0;
                                                        oEOBPatientPaymentDetail.ReserveEOBPaymentDetailID = 0;

                                                        //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                                                        oEOBPatientPaymentDetail.AccountID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].PatientID;
                                                        oEOBPatientPaymentDetail.AccountType = EOBPaymentAccountType.Patient;
                                                        oEOBPatientPaymentDetail.MSTAccountID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].PatientID;
                                                        oEOBPatientPaymentDetail.MSTAccountType = EOBPaymentAccountType.Patient;
                                                        oEOBPatientPaymentDetail.PatientID = oPaymentBillingPatientClaims[rowIndex].CliamLines[i].PatientID;
                                                        oEOBPatientPaymentDetail.PaymentTrayID = _CloseDayTrayID;
                                                        oEOBPatientPaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                                                        oEOBPatientPaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                                                        oEOBPatientPaymentDetail.UserID = _UserId;
                                                        oEOBPatientPaymentDetail.UserName = _UserName;
                                                        oEOBPatientPaymentDetail.ClinicID = _ClinicID;

                                                        oEOBPatientPaymentDetail.FinanceLieNo = 0;
                                                        oEOBPatientPaymentDetail.MainCreditLineID = 0;
                                                        oEOBPatientPaymentDetail.IsMainCreditLine = false;
                                                        oEOBPatientPaymentDetail.IsReserveCreditLine = false;
                                                        oEOBPatientPaymentDetail.IsCorrectionCreditLine = false;
                                                        oEOBPatientPaymentDetail.RefFinanceLieNo = 0;
                                                        oEOBPatientPaymentDetail.UseRefFinanceLieNo = false;

                                                        oEOBPatientPaymentDetail.CloseDate = VoidCloseDate;

                                                        oPaymentPatientLine.EOBPatientPaymentLineDetails.Add(oEOBPatientPaymentDetail);
                                                        oEOBPatientPaymentDetail.Dispose();
                                                    }
                                                }
                                                #endregion
                                            }
                                            //}
                                            #endregion

                                            oPaymentPatientClaim.CliamLines.Add(oPaymentPatientLine);

                                            oPaymentPatientLine.Dispose();

                                            if (oEOBPatientPaymentDetail != null) { oEOBPatientPaymentDetail.Dispose(); }

                                            #endregion
                                        }
                                    }
                                }

                                oPaymentPatient.PatientClaims.Add(oPaymentPatientClaim);
                                oPaymentPatientClaim.Dispose();
                            }
                        }
                    }

                    #region "Reserve Debit Entry if any and it will goes directlly to payment object with credit line"

                    //...Sum of all previous patient payment for all claim lines will directly go into 
                    //... reserve
                    decimal _totalReserveAmount = 0;
                    if (oPaymentBillingPatientClaims != null && oPaymentBillingPatientClaims.Count > 0
                        && oPaymentBillingPatientClaims[0] != null && oPaymentBillingPatientClaims[0].CliamLines != null
                        && oPaymentBillingPatientClaims[0].CliamLines.Count > 0)
                    {
                        for (int clmLnInd = 0; clmLnInd < oPaymentBillingPatientClaims[0].CliamLines.Count; clmLnInd++)
                        {
                            if (oPaymentBillingPatientClaims[0].CliamLines[clmLnInd].LinePreviousPaid > 0)
                            {
                                _totalReserveAmount += oPaymentBillingPatientClaims[0].CliamLines[clmLnInd].LinePreviousPaid;
                            }
                        }
                    }

                    if (_totalReserveAmount > 0)
                    {

                        //0 ReserveAmount 
                        //1 ReserveNote 
                        //2 ReserveSubType 
                        //3 ReserveNoteOnPrint 

                        //if (oList != null && oList.Length == 6)
                        {
                            //if (oList[0] != null && Convert.ToString(oList[0]).Trim() != "")
                            {
                                //if (Convert.ToDecimal(Convert.ToString(oList[0]).Trim()) > 0)
                                {
                                    #region "Put Amount into reserve, but according to remaining amount which is collected from negative payment"
                                  //  decimal _fillCorrPayAmt = 0; decimal _fillCorrAdjAmt = 0; 
                                    decimal _fillCorrResAmt = 0;
                                    Int64 _fillCorrResPayID = 0; Int64 _fillCorrResPayDtlID = 0;
                                    Int64 _fillCorrRefPayID = 0; Int64 _fillCorrRefPayDtlID = 0;
                                  //  int _fillCorrPayIndx = -1;

                                    for (int rPay = 0; rPay <= oCrItems.Count - 1; rPay++)
                                    {
                                        if (Convert.ToDecimal(oCrItems[rPay].Description) > 0)
                                        {
                                            #region "First Sum of same check or reserve entries into single"
                                            _fillCorrResAmt = Convert.ToDecimal(oCrItems[rPay].Description);
                                            _fillCorrResPayID = Convert.ToInt64(oCrItems[rPay].ID);
                                            _fillCorrResPayDtlID = Convert.ToInt64(oCrItems[rPay].Code);

                                            if (oCrItems[rPay].SubItems != null && oCrItems[rPay].SubItems.Count > 0)
                                            {
                                                _fillCorrRefPayID = Convert.ToInt64(oCrItems[rPay].SubItems[0].ID);
                                                _fillCorrRefPayDtlID = Convert.ToInt64(oCrItems[rPay].SubItems[0].Description);
                                            }

                                            for (int rSrchPay = rPay + 1; rSrchPay <= oCrItems.Count - 1; rSrchPay++)
                                            {
                                                decimal _fillSrchResAmt = Convert.ToDecimal(oCrItems[rSrchPay].Description);
                                                Int64 _fillSrchResPayID = Convert.ToInt64(oCrItems[rSrchPay].ID);
                                                Int64 _fillSrchResPayDtlID = Convert.ToInt64(oCrItems[rSrchPay].Code);
                                                Int64 _fillSrchRefPayID = 0;
                                                Int64 _fillSrchRefPayDtlID = 0;
                                                if (oCrItems[rSrchPay].SubItems != null && oCrItems[rSrchPay].SubItems.Count > 0)
                                                {
                                                    _fillSrchRefPayID = Convert.ToInt64(oCrItems[rSrchPay].SubItems[0].ID);
                                                    _fillSrchRefPayDtlID = Convert.ToInt64(oCrItems[rSrchPay].SubItems[0].Description);
                                                }

                                                if (_fillCorrResPayID == _fillSrchResPayID && _fillCorrResPayDtlID == _fillSrchResPayDtlID &&
                                                    _fillCorrRefPayID == _fillSrchRefPayID && _fillCorrRefPayDtlID == _fillSrchRefPayDtlID)
                                                {
                                                    _fillCorrResAmt = _fillCorrResAmt + _fillSrchResAmt;
                                                    oCrItems[rSrchPay].Description = "0";
                                                }
                                            }
                                            #endregion

                                            #region "Set Amount object"
                                            oEOBPatientPaymentDetail = new EOBPayment.Common.EOBPatientPaymentDetail();
                                            oEOBPatientPaymentDetail.EOBPaymentID = 0;
                                            oEOBPatientPaymentDetail.EOBID = 0;
                                            oEOBPatientPaymentDetail.EOBDtlID = 0;
                                            oEOBPatientPaymentDetail.EOBPaymentDetailID = 0;

                                            oEOBPatientPaymentDetail.BillingTransactionID = 0;
                                            oEOBPatientPaymentDetail.BillingTransactionDetailID = 0;
                                            oEOBPatientPaymentDetail.BillingTransactionLineNo = 0;


                                            oEOBPatientPaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(CloseDate);
                                            oEOBPatientPaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(CloseDate);

                                            oEOBPatientPaymentDetail.CPTCode = "";
                                            oEOBPatientPaymentDetail.CPTDescription = "";

                                            oEOBPatientPaymentDetail.Amount = _fillCorrResAmt;
                                            oEOBPatientPaymentDetail.IsNullAmount = false;

                                            oEOBPatientPaymentDetail.PaymentType = EOBPaymentType.PatientReserved;
                                            oEOBPatientPaymentDetail.PaymentSubType = EOBPaymentSubType.Reserved;
                                            oEOBPatientPaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                                            oEOBPatientPaymentDetail.PayMode = _EOBPaymentMode;

                                            oEOBPatientPaymentDetail.RefEOBPaymentID = _fillCorrRefPayID;
                                            oEOBPatientPaymentDetail.RefEOBPaymentDetailID = _fillCorrRefPayDtlID;

                                            oEOBPatientPaymentDetail.ReserveEOBPaymentID = 0;
                                            oEOBPatientPaymentDetail.ReserveEOBPaymentDetailID = 0;

                                            //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                                            oEOBPatientPaymentDetail.AccountID = EOBPaymentTypeAccountNo.PatientReserved.GetHashCode();
                                            oEOBPatientPaymentDetail.AccountType = EOBPaymentAccountType.Reserved;
                                            oEOBPatientPaymentDetail.MSTAccountID = EOBPaymentTypeAccountNo.PatientReserved.GetHashCode();
                                            oEOBPatientPaymentDetail.MSTAccountType = EOBPaymentAccountType.Reserved;
                                            oEOBPatientPaymentDetail.PatientID = PatientId;
                                            oEOBPatientPaymentDetail.PaymentTrayID = _CloseDayTrayID;
                                            oEOBPatientPaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                                            oEOBPatientPaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                                            oEOBPatientPaymentDetail.UserID = _UserId;
                                            oEOBPatientPaymentDetail.UserName = _UserName;
                                            oEOBPatientPaymentDetail.ClinicID = _ClinicID;

                                            oEOBPatientPaymentDetail.CloseDate = VoidCloseDate;

                                            if (true)
                                            {
                                                EOBPayment.Common.PaymentPatientLineNote oPaymentPatientLineNote = new EOBPayment.Common.PaymentPatientLineNote();

                                                oPaymentPatientLineNote.ClaimNo = 0;
                                                oPaymentPatientLineNote.EOBPaymentID = 0;
                                                oPaymentPatientLineNote.EOBID = 0;
                                                oPaymentPatientLineNote.EOBPaymentDetailID = 0;
                                                oPaymentPatientLineNote.BillingTransactionID = 0;
                                                oPaymentPatientLineNote.BillingTransactionDetailID = 0;
                                                oPaymentPatientLineNote.Code = "";
                                                oPaymentPatientLineNote.Description = VoidNote;
                                                oPaymentPatientLineNote.Amount = _totalReserveAmount;
                                                oPaymentPatientLineNote.IncludeOnPrint = false;

                                                oPaymentPatientLineNote.ClinicID = _ClinicID;
                                                oPaymentPatientLineNote.PaymentNoteType = EOBPaymentType.PatientReserved;

                                                oPaymentPatientLineNote.PaymentNoteSubType = EOBPaymentSubType.Other;

                                                oPaymentPatientLineNote.HasData = true;

                                                oEOBPatientPaymentDetail.LineNotes.Add(oPaymentPatientLineNote);
                                                oPaymentPatientLineNote.Dispose();
                                            }

                                            oPaymentPatient.EOBPatientPaymentReserveLineDetail.Add(oEOBPatientPaymentDetail);
                                            oEOBPatientPaymentDetail.Dispose();
                                            #endregion

                                            oCrItems[rPay].Description = "0";
                                        }
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                    #endregion

                    //_EOBPaymentID = ogloEOBPaymentPatient.SavePatientCorrectionPayment(oPaymentPatient, false, out EOBPatientPaymentMasterLines);
                    _EOBPaymentID = ogloEOBPaymentPatient.SavePatientCorrectionPayment(oPaymentPatient, true, out EOBPatientPaymentMasterLines);

                    //... **** Set the the payment void "

                    if (_EOBPaymentID > 0)
                    {
                        oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                        oDB.Connect(false);
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_EOBPayment_MST WITH (READPAST) SET bIsVoid = 'true' WHERE nEOBPaymentID = " + _EOBPaymentID + " ";
                        oDB.Execute_Query(_sqlQuery);
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_EOBPayment_EOB WITH (READPAST) SET bIsVoid = 'true' WHERE nEOBPaymentID = " + _EOBPaymentID + " ";
                        oDB.Execute_Query(_sqlQuery);
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_EOBPayment_DTL WITH (READPAST) SET bIsVoid = 'true' WHERE nEOBPaymentID = " + _EOBPaymentID + " ";
                        oDB.Execute_Query(_sqlQuery);
                        oDB.Disconnect();
                        oDB.Dispose();

                    }
                    //... **** Set the the payment void "
                    if (EOBPatientPaymentMasterLines != null) { EOBPatientPaymentMasterLines.Dispose(); EOBPatientPaymentMasterLines = null; }
                    _retPayId = _EOBPaymentID;
                    _EOBPaymentID = 0;
                }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ogloEOBPaymentPatient != null) { ogloEOBPaymentPatient.Dispose(); };
                if (oPaymentPatient != null) { oPaymentPatient.Dispose(); };
                if (oPaymentPatientClaim != null) { oPaymentPatientClaim.Dispose(); };
                if (oEOBPatientPaymentDetail != null) { oEOBPatientPaymentDetail.Dispose(); };
                if (oEOBPatientPaymentCreditDetail != null) { oEOBPatientPaymentCreditDetail.Dispose(); };
                if (EOBPatientPaymentMasterLines != null) { EOBPatientPaymentMasterLines.Dispose(); }
            }
            return _retPayId;
        }

        public void VoidInsurancePayment(Int64 TransactionId, Int64 PatientId, string Closedate, string VoidNote, Int64 VoidCloseDate, Int64 VoidTrayID, string VoidTrayCode, string VoidTrayName)
        {
            try
            {
                gloDatabaseLayer.DBLayer oDB = null;

                EOBPayment.gloEOBPaymentInsurance ogloEOBPaymentInsurance = new EOBPayment.gloEOBPaymentInsurance(_databaseconnectionstring);
                EOBPayment.Common.PaymentInsurance oPaymentInsurace = new EOBPayment.Common.PaymentInsurance();
                EOBPayment.Common.PaymentInsuranceClaim oPaymentInsuranceClaim = null;
                EOBPayment.Common.EOBInsurancePaymentDetail oEOBInsPaymentCreditDetail = null;
                EOBPayment.Common.EOBInsuranceReserveDetail oEOBInsReserveDetail = null;

                Int64 _CloseDayTrayID = 0;
                string _CloseDayTrayCode = "";
                string _CloseDayTrayName = "";

                _CloseDayTrayID = VoidTrayID;
                _CloseDayTrayCode = VoidTrayCode;
                _CloseDayTrayName = VoidTrayName;

                EOBPaymentMode _EOBPaymentMode = EOBPaymentMode.None;

             //   decimal _crPayAmt = 0;
              //  Int64 _crResPayID = 0; Int64 _crResPayDtlID = 0;
              //  Int64 _crRefPayID = 0; Int64 _crRefPayDtlID = 0;
              //  int _crResPayMode = 0;

              //  bool _IsClaimTobeSplit = false;

                Int64 _EOBPaymentID = 0;
                 //Int64 _nMstEOBPaymentID = 0;
                 //Int64 _nMstAccountID = 0;
                 //Int64 _nMstEobpaymentDtlID = 0;
                string _sqlQuery = "";

                //Object _retVal = null;
                Int64 CliamNo = 0;
                Int64 CloseDate = 0;

                #region "Validation"

                #endregion

                if (TransactionId > 0)
                {
                    CloseDate = gloDateMaster.gloDate.DateAsNumber(Closedate.Trim());

                    _sqlQuery = "SELECT ISNULL(nClaimNo,0) AS ClaimNo FROM BL_Transaction_MST (NOLOCK)" +
                    " WHERE nTransactionID = "+TransactionId+" AND nPatientID = "+PatientId+" AND nClinicID = "+_ClinicID+" ";

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    Object _ClaimNo = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_ClaimNo != null && Convert.ToString(_ClaimNo).Trim() != "")
                    {
                        CliamNo = Convert.ToInt64(_ClaimNo);
                    }


                    #region "Payment Tray"

                    //gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
                    //Object _retSettingValue = null;
                    //oSettings.GetSetting("PAYMENT_LASTCLOSETRAYID", _UserId, _ClinicID, out _retSettingValue);
                    //oSettings.Dispose();

                    //if (_retSettingValue != null && Convert.ToString(_retSettingValue).Trim() != "")
                    //{
                    //    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    //    oDB.Connect(false);
                    //    _retVal = new object();
                    //    _retVal = oDB.ExecuteScalar_Query("SELECT sDescription FROM BL_CloseDayTray WHERE nCloseDayTrayID = " + Convert.ToInt64(_retSettingValue) + " AND nClinicID = " + _ClinicID + "");
                    //    if (_retVal != null && _retVal.ToString().Trim().Length > 0)
                    //    {
                    //        _CloseDayTrayName = _retVal.ToString(); ;
                    //        _CloseDayTrayID = Convert.ToInt64(_retSettingValue);
                    //        _retVal = null;
                    //    }
                    //    oDB.Disconnect();
                    //}
                    //else
                    //{  //... select the default payment tray
                    //    DataTable _dt = null;
                    //    _sqlQuery = " SELECT ISNULL(nCloseDayTrayID,0) As nCloseDayTrayID,ISNULL(sDescription,'') AS sDescription FROM BL_CloseDayTray " +
                    //    " WHERE nCloseDayTrayID IS NOT NULL AND sDescription IS NOT NULL AND nCloseDayTrayID > 0 " +
                    //    " AND sDescription <> ''  AND ISNULL(bIsClosed,0) = 0 AND bIsDefault = 'true' AND nUserID = " + _UserId + " AND nClinicID = " + _ClinicID + "";
                    //    oDB.Connect(false);
                    //    oDB.Retrive_Query(_sqlQuery, out _dt);
                    //    oDB.Disconnect();
                    //    if (_dt != null && _dt.Rows.Count > 0)
                    //    {
                    //        _CloseDayTrayID = Convert.ToInt64(_dt.Rows[0]["nCloseDayTrayID"]);
                    //        _CloseDayTrayName = Convert.ToString(_dt.Rows[0]["sDescription"]);
                    //        _dt.Dispose();
                    //    }
                    //}

                    #endregion

                    #region "Payment Mode"
                    _EOBPaymentMode = EOBPaymentMode.None;
                    #endregion

                    #region " Master Data "

                    ogloEOBPaymentInsurance = new EOBPayment.gloEOBPaymentInsurance(_databaseconnectionstring);
                    oPaymentInsurace.PaymentNumber = ogloEOBPaymentInsurance.GetPaymentPrefixNumber(_paymentPrefix).Trim();
                    ogloEOBPaymentInsurance.Dispose();
                    oPaymentInsurace.PaymentNumberPefix = _paymentPrefix;

                    oPaymentInsurace.EOBPaymentID = _EOBPaymentID;
                    oPaymentInsurace.EOBRefNO = "";
                   
                    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                    oPaymentInsurace.PayerID = EOBPaymentTypeAccountNo.InsuranceVoidPayerID.GetHashCode();
                    oPaymentInsurace.PayerName = EOBPaymentTypeAccountNo.InsuranceVoidPayerID.ToString();
                    oPaymentInsurace.PayerType = EOBPaymentAccountType.InsuranceCompany;

                    oPaymentInsurace.PaymentMode = _EOBPaymentMode;
                    oPaymentInsurace.CheckNumber = "VOIDCHECK" + CliamNo.ToString();
                    oPaymentInsurace.CheckAmount = 0;
                    oPaymentInsurace.CheckDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString("MM/dd/yyyy"));

                    oPaymentInsurace.MSTAccountID = EOBPaymentTypeAccountNo.InsuranceVoidPayerID.GetHashCode();
                    oPaymentInsurace.MSTAccountType = EOBPaymentAccountType.InsuranceCompany;

                    oPaymentInsurace.ClinicID = _ClinicID;
                    oPaymentInsurace.CreatedDateTime = DateTime.Now;
                    oPaymentInsurace.ModifiedDateTime = DateTime.Now;

                    oPaymentInsurace.PaymentTrayID = _CloseDayTrayID;
                    oPaymentInsurace.PaymentTrayCode = _CloseDayTrayCode;
                    oPaymentInsurace.PaymentTrayDesc = _CloseDayTrayName;
                    //oPaymentInsurace.CloseDate = CloseDate;
                    oPaymentInsurace.CloseDate = VoidCloseDate;

                    oPaymentInsurace.UserID = _UserId;
                    oPaymentInsurace.UserName = _UserName;

                    oPaymentInsurace.sClaimVoidNote = Convert.ToString(VoidNote);
                    //oPaymentInsurace.nMstEobpaymentID = _nMstEOBPaymentID;
                    //oPaymentInsurace.nMstAccountID= _nMstAccountID;
                    //oPaymentInsurace.nMstEobpaymentDtlID = _nMstEobpaymentDtlID;
                    #region "Payment Master Note"
                    //Notes if any to main payment to all claim OR main payment to reserve account
                    /*
                    if (false)
                    {
                        EOBPayment.Common.PaymentInsuranceLineNote oPaymentInsuranceLineNote = new EOBPayment.Common.PaymentInsuranceLineNote();

                        oPaymentInsuranceLineNote.ClaimNo = 0;
                        oPaymentInsuranceLineNote.EOBPaymentID = _EOBPaymentID;
                        oPaymentInsuranceLineNote.EOBID = 0;
                        oPaymentInsuranceLineNote.EOBPaymentDetailID = 0;
                        oPaymentInsuranceLineNote.BillingTransactionID = 0;
                        oPaymentInsuranceLineNote.BillingTransactionDetailID = 0;
                        oPaymentInsuranceLineNote.Code = "";
                        oPaymentInsuranceLineNote.Description = "";
                        oPaymentInsuranceLineNote.Amount = 0;
                        oPaymentInsuranceLineNote.IncludeOnPrint = false;
                        oPaymentInsuranceLineNote.ClinicID = _ClinicID;
                        oPaymentInsuranceLineNote.PaymentNoteType = EOBPaymentType.InsuracePayment;
                        oPaymentInsuranceLineNote.PaymentNoteSubType = EOBPaymentSubType.Other;
                        oPaymentInsuranceLineNote.HasData = true;

                        oPaymentInsurace.Notes.Add(oPaymentInsuranceLineNote);
                        oPaymentInsuranceLineNote.Dispose();
                    }
                    */
                    #endregion

                    #endregion

                    #region " Credit Service Line Entry applicable to all claims, so it goes to master level not line level "

                    #region " Check/Cash/etc txtCheckAmount - Main Credit Line Entry "

                    oEOBInsPaymentCreditDetail = new global::gloBilling.EOBPayment.Common.EOBInsurancePaymentDetail();

                    oEOBInsPaymentCreditDetail.EOBPaymentID = _EOBPaymentID;
                    oEOBInsPaymentCreditDetail.EOBID = 0;
                    oEOBInsPaymentCreditDetail.EOBDtlID = 0;
                    oEOBInsPaymentCreditDetail.EOBPaymentDetailID = 0;
                    oEOBInsPaymentCreditDetail.RefEOBPaymentID = 0;
                    oEOBInsPaymentCreditDetail.RefEOBPaymentDetailID = 0;
                    oEOBInsPaymentCreditDetail.ReserveEOBPaymentID = 0;
                    oEOBInsPaymentCreditDetail.ReserveEOBPaymentDetailID = 0;

                    oEOBInsPaymentCreditDetail.BillingTransactionID = 0;
                    oEOBInsPaymentCreditDetail.BillingTransactionDetailID = 0;
                    oEOBInsPaymentCreditDetail.BillingTransactionLineNo = 0;

                    oEOBInsPaymentCreditDetail.DOSFrom = CloseDate;
                    oEOBInsPaymentCreditDetail.DOSTo = CloseDate;
                    oEOBInsPaymentCreditDetail.CPTCode = "";
                    oEOBInsPaymentCreditDetail.CPTDescription = "";

                    oEOBInsPaymentCreditDetail.Amount = 0;
                    oEOBInsPaymentCreditDetail.IsNullAmount = false;

                    oEOBInsPaymentCreditDetail.PaymentType = EOBPaymentType.InsuracePayment;
                    oEOBInsPaymentCreditDetail.PaymentSubType = EOBPaymentSubType.Insurace;
                    oEOBInsPaymentCreditDetail.PaySign = EOBPaymentSign.Payment_Credit;
                    oEOBInsPaymentCreditDetail.PayMode = _EOBPaymentMode;

                    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                    oEOBInsPaymentCreditDetail.AccountID = EOBPaymentTypeAccountNo.InsuranceVoidPayerID.GetHashCode();
                    oEOBInsPaymentCreditDetail.AccountType = EOBPaymentAccountType.InsuranceCompany;
                    oEOBInsPaymentCreditDetail.MSTAccountID = EOBPaymentTypeAccountNo.InsuranceVoidPayerID.GetHashCode();
                    oEOBInsPaymentCreditDetail.MSTAccountType = EOBPaymentAccountType.PatientInsurace;
                    oEOBInsPaymentCreditDetail.ContactInsID = 0;

                    oEOBInsPaymentCreditDetail.PatientID = PatientId;
                    oEOBInsPaymentCreditDetail.PaymentTrayID = _CloseDayTrayID;
                    oEOBInsPaymentCreditDetail.PaymentTrayCode = _CloseDayTrayCode;
                    oEOBInsPaymentCreditDetail.PaymentTrayDescription = _CloseDayTrayName;

                    oEOBInsPaymentCreditDetail.CloseDate = VoidCloseDate;

                    oEOBInsPaymentCreditDetail.UserID = _UserId;
                    oEOBInsPaymentCreditDetail.UserName = _UserName;
                    oEOBInsPaymentCreditDetail.ClinicID = _ClinicID;

                    oEOBInsPaymentCreditDetail.FinanceLieNo = oPaymentInsurace.EOBInsurancePaymentLineDetails.Count + 1;
                    oEOBInsPaymentCreditDetail.MainCreditLineID = 0;
                    oEOBInsPaymentCreditDetail.IsMainCreditLine = true;
                    oEOBInsPaymentCreditDetail.IsReserveCreditLine = false;
                    oEOBInsPaymentCreditDetail.IsCorrectionCreditLine = false;
                    oEOBInsPaymentCreditDetail.RefFinanceLieNo = 0;
                    oEOBInsPaymentCreditDetail.UseRefFinanceLieNo = false;

                    oPaymentInsurace.EOBInsurancePaymentLineDetails.Add(oEOBInsPaymentCreditDetail);
                    oEOBInsPaymentCreditDetail.Dispose();
                    #endregion

                    #region "Correction Line Credit Line Entry, ***1.2 not used, may in 1.3 it will used***"

                    //if (c1SinglePayment != null && c1SinglePayment.Rows.Count > 0)
                    //{
                    //    for (int nCrIndex = 1; nCrIndex <= c1SinglePayment.Rows.Count - 1; nCrIndex++)
                    //    {
                    //        if (c1SinglePayment.GetData(nCrIndex, COL_SERVICELINE_TYPE) != null && (ColServiceLineType)c1SinglePayment.GetData(nCrIndex, COL_SERVICELINE_TYPE) == ColServiceLineType.ServiceLine)
                    //        {
                    //            if (c1SinglePayment.GetData(nCrIndex, COL_ISCORRECTION) != null && Convert.ToBoolean(c1SinglePayment.GetData(nCrIndex, COL_ISCORRECTION)) == true)
                    //            {
                    //                if (c1SinglePayment.GetData(nCrIndex, COL_PAYMENT) != null && c1SinglePayment.GetData(nCrIndex, COL_PAYMENT).ToString().Trim() != "")
                    //                {
                    //                    _crPayAmt = Convert.ToDecimal(c1SinglePayment.GetData(nCrIndex, COL_PAYMENT)) - Convert.ToDecimal(c1SinglePayment.GetData(nCrIndex, COL_LAST_PAYMENT));

                    //                    if (_crPayAmt < 0)
                    //                    {
                    //                        _crPayAmt = _crPayAmt - (_crPayAmt * 2);
                    //                        _crResPayMode = 0;

                    //                        Int64 _crBillTrnId = Convert.ToInt64(c1SinglePayment.GetData(nCrIndex, COL_BILLING_TRANSACTON_ID));
                    //                        Int64 _crBillTrnDtlId = Convert.ToInt64(c1SinglePayment.GetData(nCrIndex, COL_BILLING_TRANSACTON_DETAILID));
                    //                        Int64 _crBillTrnDtlLineId = Convert.ToInt64(c1SinglePayment.GetData(nCrIndex, COL_BILLING_TRANSACTON_LINENO));

                    //                        Int64 _crPatientId = Convert.ToInt64(c1SinglePayment.GetData(nCrIndex, COL_PATIENTID));
                    //                        string _crCptCode = Convert.ToString(c1SinglePayment.GetData(nCrIndex, COL_CPT_CODE)).Trim();

                    //                        //...Code added on 20091201 by Sagar Ghodke 
                    //                        //... Code added to implement insurance payment as per plan and insurance company
                    //                        Int64 _crInsurancePlanId = 0;
                    //                        Int64 _crContactId = 0;
                    //                        Int64 _crInsuranceCompanyId = 0;

                    //                        _crInsuranceCompanyId = Convert.ToInt64(cmbInsCompany.SelectedValue); //Insurance Company
                    //                        _crInsurancePlanId = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1)); //Plan 
                    //                        _crContactId = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));//Contact ID

                    //                        //...end code add

                    //                        gloDatabaseLayer.DBLayer _nCrDBLayer = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    //                        gloDatabaseLayer.DBParameters _nCrDBParameters = new gloDatabaseLayer.DBParameters();
                    //                        DataTable _nCrDataTable = new DataTable();

                    //                        _nCrDBParameters.Add("@CorrectionAmount", _crPayAmt, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,2),
                    //                        _nCrDBParameters.Add("@nPatientID", _crPatientId, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                    //                        _nCrDBParameters.Add("@nClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                    //                        _nCrDBParameters.Add("@nBillingTransactionID", _crBillTrnId, ParameterDirection.Input, SqlDbType.BigInt);//   numeric(18,0),
                    //                        _nCrDBParameters.Add("@nBillingTransactionDetailID", _crBillTrnDtlId, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0)
                    //                        _nCrDBParameters.Add("@nInsuranceID", _crInsurancePlanId, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0),
                    //                        _nCrDBParameters.Add("@nContactID", _crContactId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                    //                        _nCrDBParameters.Add("@nInsuranceCompanyID", _crInsuranceCompanyId, ParameterDirection.Input, SqlDbType.BigInt);//  numeric(18,0)
                    //                        _nCrDBLayer.Connect(false);
                    //                        _nCrDBLayer.Retrive("BL_SELECT_EOBInsCorrectionAmountList", _nCrDBParameters, out _nCrDataTable);
                    //                        _nCrDBLayer.Disconnect();
                    //                        _nCrDBLayer.Dispose();

                    //                        if (_nCrDataTable != null && _nCrDataTable.Rows.Count > 0)
                    //                        {
                    //                            for (int nCrDTIndex = 0; nCrDTIndex <= _nCrDataTable.Rows.Count - 1; nCrDTIndex++)
                    //                            {
                    //                                EOBPayment.Common.EOBInsurancePaymentDetail oEOBInsPaymentCorrAsCreditDetail = new global::gloBilling.EOBPayment.Common.EOBInsurancePaymentDetail();

                    //                                #region "Set Object"
                    //                                oEOBInsPaymentCorrAsCreditDetail.EOBPaymentID = _EOBPaymentID;
                    //                                oEOBInsPaymentCorrAsCreditDetail.EOBID = 0;
                    //                                oEOBInsPaymentCorrAsCreditDetail.EOBDtlID = 0;
                    //                                oEOBInsPaymentCorrAsCreditDetail.EOBPaymentDetailID = 0;

                    //                                oEOBInsPaymentCorrAsCreditDetail.RefEOBPaymentID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nRefEOBPaymentID"]);
                    //                                oEOBInsPaymentCorrAsCreditDetail.RefEOBPaymentDetailID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nRefEOBPaymentDetailID"]);
                    //                                oEOBInsPaymentCorrAsCreditDetail.ReserveEOBPaymentID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nResEOBPaymentID"]);
                    //                                oEOBInsPaymentCorrAsCreditDetail.ReserveEOBPaymentDetailID = Convert.ToInt64(_nCrDataTable.Rows[nCrDTIndex]["nResEOBPaymentDetailID"]);

                    //                                oEOBInsPaymentCorrAsCreditDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(nCrIndex, COL_BILLING_TRANSACTON_ID));
                    //                                oEOBInsPaymentCorrAsCreditDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(nCrIndex, COL_BILLING_TRANSACTON_DETAILID));
                    //                                oEOBInsPaymentCorrAsCreditDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(nCrIndex, COL_BILLING_TRANSACTON_LINENO));

                    //                                oEOBInsPaymentCorrAsCreditDetail.DOSFrom = Convert.ToInt64(gloDateMaster.gloDate.DateAsNumber(c1SinglePayment.GetData(nCrIndex, COL_DOS_FROM).ToString()));
                    //                                oEOBInsPaymentCorrAsCreditDetail.DOSTo = Convert.ToInt64(gloDateMaster.gloDate.DateAsNumber(c1SinglePayment.GetData(nCrIndex, COL_DOS_TO).ToString()));

                    //                                oEOBInsPaymentCorrAsCreditDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(nCrIndex, COL_CPT_CODE));
                    //                                oEOBInsPaymentCorrAsCreditDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(nCrIndex, COL_CPT_DESCRIPTON));
                    //                                oEOBInsPaymentCorrAsCreditDetail.Amount = Convert.ToDecimal(_nCrDataTable.Rows[nCrDTIndex]["nSelAmt"]) - (Convert.ToDecimal(_nCrDataTable.Rows[nCrDTIndex]["nSelAmt"]) * 2);
                    //                                oEOBInsPaymentCorrAsCreditDetail.IsNullAmount = false;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PaymentType = EOBPaymentType.InsuracePayment;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PaymentSubType = EOBPaymentSubType.Correction;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PaySign = EOBPaymentSign.Payment_Credit;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PayMode = (EOBPaymentMode)_crResPayMode;

                    //                                //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                    //                                oEOBInsPaymentCorrAsCreditDetail.AccountID = Convert.ToInt64(cmbInsCompany.SelectedValue);
                    //                                oEOBInsPaymentCorrAsCreditDetail.AccountType = EOBPaymentAccountType.InsuranceCompany;
                    //                                oEOBInsPaymentCorrAsCreditDetail.MSTAccountID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1));
                    //                                oEOBInsPaymentCorrAsCreditDetail.MSTAccountType = EOBPaymentAccountType.PatientInsurace;
                    //                                oEOBInsPaymentCorrAsCreditDetail.ContactInsID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));

                    //                                oEOBInsPaymentCorrAsCreditDetail.PatientID = _PatientID;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PaymentTrayID = _CloseDayTrayID;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PaymentTrayCode = _CloseDayTrayCode;
                    //                                oEOBInsPaymentCorrAsCreditDetail.PaymentTrayDescription = _CloseDayTrayName;
                    //                                oEOBInsPaymentCorrAsCreditDetail.UserID = _UserId;
                    //                                oEOBInsPaymentCorrAsCreditDetail.UserName = _UserName;
                    //                                oEOBInsPaymentCorrAsCreditDetail.ClinicID = _ClinicID;

                    //                                oEOBInsPaymentCorrAsCreditDetail.FinanceLieNo = oPaymentInsurace.EOBInsurancePaymentLineDetails.Count + 1;
                    //                                oEOBInsPaymentCorrAsCreditDetail.MainCreditLineID = 0;
                    //                                oEOBInsPaymentCorrAsCreditDetail.IsMainCreditLine = false;
                    //                                oEOBInsPaymentCorrAsCreditDetail.IsReserveCreditLine = false;
                    //                                oEOBInsPaymentCorrAsCreditDetail.IsCorrectionCreditLine = true;
                    //                                oEOBInsPaymentCorrAsCreditDetail.RefFinanceLieNo = 0;
                    //                                oEOBInsPaymentCorrAsCreditDetail.UseRefFinanceLieNo = false;

                    //                                oPaymentInsurace.EOBInsurancePaymentLineDetails.Add(oEOBInsPaymentCorrAsCreditDetail);

                    //                                #endregion

                    //                                oEOBInsPaymentCorrAsCreditDetail.Dispose();
                    //                            }
                    //                        }
                    //                        _nCrDBLayer.Dispose();
                    //                    }
                    //                }
                    //            }

                    //        }
                    //    }
                    //}
                    #endregion

                    #region "Use Reserved Credit Line Entry, , ***1.2 not used, may in 1.3 it will used***"

                    //if (btnUseReserve.Tag != null && btnUseReserve.Tag.ToString().Trim().Length > 0)
                    //{
                    //    _crPayAmt = 0;
                    //    _crResPayID = 0; _crResPayDtlID = 0;
                    //    _crRefPayID = 0; _crRefPayDtlID = 0;
                    //    _crResPayMode = 0;

                    //    gloGeneralItem.gloItems ocrItems = new gloGeneralItem.gloItems();
                    //    if (btnUseReserve.Tag != null)
                    //    {
                    //        ocrItems = (gloGeneralItem.gloItems)btnUseReserve.Tag;
                    //    }

                    //    for (int crPay = 0; crPay <= ocrItems.Count - 1; crPay++)
                    //    {
                    //        _crPayAmt = 0; _crResPayID = 0; _crResPayDtlID = 0; _crRefPayID = 0; _crRefPayDtlID = 0;
                    //        EOBPayment.Common.EOBInsurancePaymentDetail oEOBInsPaymentResAsCreditDetail = new global::gloBilling.EOBPayment.Common.EOBInsurancePaymentDetail();

                    //        if (Convert.ToDecimal(ocrItems[crPay].Description) > 0)
                    //        {
                    //            _crPayAmt = Convert.ToDecimal(ocrItems[crPay].Description);
                    //            _crResPayID = Convert.ToInt64(ocrItems[crPay].ID);
                    //            _crResPayDtlID = Convert.ToInt64(ocrItems[crPay].Code);

                    //            if (ocrItems[crPay].SubItems != null && ocrItems[crPay].SubItems.Count > 0)
                    //            {
                    //                _crRefPayID = Convert.ToInt64(ocrItems[crPay].SubItems[0].ID);
                    //                _crRefPayDtlID = Convert.ToInt64(ocrItems[crPay].SubItems[0].Description);
                    //                _crResPayMode = Convert.ToInt32(ocrItems[crPay].SubItems[0].Code);
                    //            }

                    //            #region "Set Object"

                    //            oEOBInsPaymentResAsCreditDetail.EOBPaymentID = _EOBPaymentID;
                    //            oEOBInsPaymentResAsCreditDetail.EOBID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.EOBDtlID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.EOBPaymentDetailID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.RefEOBPaymentID = _crRefPayID;
                    //            oEOBInsPaymentResAsCreditDetail.RefEOBPaymentDetailID = _crRefPayDtlID;
                    //            oEOBInsPaymentResAsCreditDetail.ReserveEOBPaymentID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.ReserveEOBPaymentDetailID = 0;


                    //            oEOBInsPaymentResAsCreditDetail.BillingTransactionID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.BillingTransactionDetailID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.BillingTransactionLineNo = 0;
                    //            if (mskCloseDate.MaskCompleted == true)
                    //            {
                    //                mskCloseDate.TextMaskFormat = MaskFormat.IncludePromptAndLiterals;
                    //                oEOBInsPaymentResAsCreditDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(mskCloseDate.Text);
                    //                oEOBInsPaymentResAsCreditDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(mskCloseDate.Text);
                    //            }
                    //            oEOBInsPaymentResAsCreditDetail.CPTCode = "";
                    //            oEOBInsPaymentResAsCreditDetail.CPTDescription = "";
                    //            oEOBInsPaymentResAsCreditDetail.Amount = _crPayAmt;

                    //            //Pending - idenify is patient reserve or insurace reserve
                    //            EOBPaymentType _ResIsPatOrIns = EOBPaymentType.InsuraceReserverd;
                    //            oEOBInsPaymentResAsCreditDetail.PaymentType = _ResIsPatOrIns;
                    //            oEOBInsPaymentResAsCreditDetail.PaymentSubType = EOBPaymentSubType.Reserved;
                    //            oEOBInsPaymentResAsCreditDetail.PaySign = EOBPaymentSign.Payment_Credit;
                    //            oEOBInsPaymentResAsCreditDetail.PayMode = (EOBPaymentMode)_crResPayMode;

                    //            //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID

                    //            //Pending - idenify is patient reserve or insurace reserve
                    //            Int64 _ResIDIsPatOrIns = EOBPaymentTypeAccountNo.InsuraceReserverd.GetHashCode();
                    //            Int64 _MstResIDIsPatOrIns = EOBPaymentTypeAccountNo.InsuraceReserverd.GetHashCode();
                    //            oEOBInsPaymentResAsCreditDetail.AccountID = _ResIDIsPatOrIns;
                    //            oEOBInsPaymentResAsCreditDetail.AccountType = EOBPaymentAccountType.Reserved;
                    //            oEOBInsPaymentResAsCreditDetail.MSTAccountID = _MstResIDIsPatOrIns;
                    //            oEOBInsPaymentResAsCreditDetail.MSTAccountType = EOBPaymentAccountType.Reserved;

                    //            oEOBInsPaymentResAsCreditDetail.PatientID = _PatientID;
                    //            oEOBInsPaymentResAsCreditDetail.PaymentTrayID = _CloseDayTrayID;
                    //            oEOBInsPaymentResAsCreditDetail.PaymentTrayCode = _CloseDayTrayCode;
                    //            oEOBInsPaymentResAsCreditDetail.PaymentTrayDescription = _CloseDayTrayName;
                    //            oEOBInsPaymentResAsCreditDetail.UserID = _UserId;
                    //            oEOBInsPaymentResAsCreditDetail.UserName = _UserName;
                    //            oEOBInsPaymentResAsCreditDetail.ClinicID = _ClinicID;

                    //            oEOBInsPaymentResAsCreditDetail.FinanceLieNo = oPaymentInsurace.EOBInsurancePaymentLineDetails.Count + 1;
                    //            oEOBInsPaymentResAsCreditDetail.MainCreditLineID = 0;
                    //            oEOBInsPaymentResAsCreditDetail.IsMainCreditLine = false;
                    //            oEOBInsPaymentResAsCreditDetail.IsReserveCreditLine = true;
                    //            oEOBInsPaymentResAsCreditDetail.IsCorrectionCreditLine = false;
                    //            oEOBInsPaymentResAsCreditDetail.RefFinanceLieNo = 0;
                    //            oEOBInsPaymentResAsCreditDetail.UseRefFinanceLieNo = false;

                    //            oPaymentInsurace.EOBInsurancePaymentLineDetails.Add(oEOBInsPaymentResAsCreditDetail);

                    //            #endregion

                    //        }
                    //        oEOBInsPaymentResAsCreditDetail.Dispose();
                    //    }
                    //    ocrItems.Dispose();

                    //}
                    #endregion

                    #endregion

                    #region "Not in 1.2 may we need in 1.3"
                    ////Allocation Amount - Start
                    ////Assign collected credit lines to masterallocationlines,
                    ////Purpose is we are going to allocate money to debit line from this object
                    ////and the same time we have to reduce to amount from object to allocate remaining
                    ////in this case while saveing we have to send actual amount
                    ////thats why we take one object seprate to allocation

                    //if (oPaymentInsurace != null && oPaymentInsurace.EOBInsurancePaymentLineDetails != null)
                    //{
                    //    for (int i = 0; i <= oPaymentInsurace.EOBInsurancePaymentLineDetails.Count - 1; i++)
                    //    {
                    //        EOBPayment.Common.EOBInsurancePaymentMasterAllocationLine oEOBInsPaymentAllDtl = new global::gloBilling.EOBPayment.Common.EOBInsurancePaymentMasterAllocationLine();

                    //        #region " Set Object "

                    //        oEOBInsPaymentAllDtl.EOBPaymentID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].EOBPaymentID;
                    //        oEOBInsPaymentAllDtl.EOBID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].EOBID;
                    //        oEOBInsPaymentAllDtl.EOBDtlID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].EOBDtlID;
                    //        oEOBInsPaymentAllDtl.EOBPaymentDetailID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].EOBPaymentDetailID;
                    //        oEOBInsPaymentAllDtl.BillingTransactionID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].BillingTransactionID;
                    //        oEOBInsPaymentAllDtl.BillingTransactionDetailID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].BillingTransactionDetailID;
                    //        oEOBInsPaymentAllDtl.BillingTransactionLineNo = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].BillingTransactionLineNo;
                    //        oEOBInsPaymentAllDtl.PatientID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PatientID;
                    //        oEOBInsPaymentAllDtl.DOSFrom = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].DOSFrom;
                    //        oEOBInsPaymentAllDtl.DOSTo = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].DOSTo;
                    //        oEOBInsPaymentAllDtl.CPTCode = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].CPTCode;
                    //        oEOBInsPaymentAllDtl.CPTDescription = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].CPTDescription;
                    //        oEOBInsPaymentAllDtl.Amount = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].Amount;
                    //        oEOBInsPaymentAllDtl.IsNullAmount = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].IsNullAmount;
                    //        oEOBInsPaymentAllDtl.PaymentType = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PaymentType;
                    //        oEOBInsPaymentAllDtl.PaymentSubType = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PaymentSubType;
                    //        oEOBInsPaymentAllDtl.PaySign = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PaySign;
                    //        oEOBInsPaymentAllDtl.PayMode = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PayMode;
                    //        oEOBInsPaymentAllDtl.RefEOBPaymentID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].RefEOBPaymentID;
                    //        oEOBInsPaymentAllDtl.RefEOBPaymentDetailID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].RefEOBPaymentDetailID;
                    //        oEOBInsPaymentAllDtl.AccountID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].AccountID;
                    //        oEOBInsPaymentAllDtl.AccountType = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].AccountType;
                    //        oEOBInsPaymentAllDtl.MSTAccountID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].MSTAccountID;
                    //        oEOBInsPaymentAllDtl.MSTAccountType = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].MSTAccountType;
                    //        oEOBInsPaymentAllDtl.PaymentTrayID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PaymentTrayID;
                    //        oEOBInsPaymentAllDtl.PaymentTrayCode = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PaymentTrayCode;
                    //        oEOBInsPaymentAllDtl.PaymentTrayDescription = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].PaymentTrayDescription;
                    //        oEOBInsPaymentAllDtl.UserID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].UserID;
                    //        oEOBInsPaymentAllDtl.UserName = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].UserName;
                    //        oEOBInsPaymentAllDtl.CreatedDateTime = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].CreatedDateTime;
                    //        oEOBInsPaymentAllDtl.ModifiedDateTime = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].ModifiedDateTime;
                    //        oEOBInsPaymentAllDtl.ClinicID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].ClinicID;
                    //        oEOBInsPaymentAllDtl.ReserveEOBPaymentID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].ReserveEOBPaymentID;
                    //        oEOBInsPaymentAllDtl.ReserveEOBPaymentDetailID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].ReserveEOBPaymentDetailID;
                    //        oEOBInsPaymentAllDtl.FinanceLieNo = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].FinanceLieNo;
                    //        oEOBInsPaymentAllDtl.MainCreditLineID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].MainCreditLineID;
                    //        oEOBInsPaymentAllDtl.IsMainCreditLine = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].IsMainCreditLine;
                    //        oEOBInsPaymentAllDtl.IsReserveCreditLine = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].IsReserveCreditLine;
                    //        oEOBInsPaymentAllDtl.IsCorrectionCreditLine = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].IsCorrectionCreditLine;
                    //        oEOBInsPaymentAllDtl.RefFinanceLieNo = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].RefFinanceLieNo;
                    //        oEOBInsPaymentAllDtl.UseRefFinanceLieNo = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].UseRefFinanceLieNo;
                    //        oEOBInsPaymentAllDtl.ContactInsID = oPaymentInsurace.EOBInsurancePaymentLineDetails[i].ContactInsID;

                    //        #endregion " Set Object "

                    //        EOBInsurancePaymentMasterAllocationLines.Add(oEOBInsPaymentAllDtl);
                    //        oEOBInsPaymentAllDtl.Dispose();
                    //    }
                    //}


                    ////while assigning this object for collection amount object, there are -ve amount of correction
                    ////we have to make it postive for debit line allocation
                    ////so using for loop we will make it postive
                    //for (int nAlctn = 0; nAlctn <= EOBInsurancePaymentMasterAllocationLines.Count - 1; nAlctn++)
                    //{
                    //    if (EOBInsurancePaymentMasterAllocationLines[nAlctn].Amount < 0)
                    //    {
                    //        EOBInsurancePaymentMasterAllocationLines[nAlctn].Amount = EOBInsurancePaymentMasterAllocationLines[nAlctn].Amount - (EOBInsurancePaymentMasterAllocationLines[nAlctn].Amount * 2);
                    //    }
                    //}
                    #endregion
                    //Allocation Amount - Finish

                    oPaymentInsuranceClaim = new EOBPayment.Common.PaymentInsuranceClaim();
                    oPaymentInsuranceClaim.BillingTransactionID = TransactionId;

                    //#region "EOB Service Lines"

                    EOBPayment.Common.EOBInsurancePaymentDetail oEOBInsurancePaymentDetail = null;
                    DataView dv_Unique = null;
                    DataTable dtUniqueAccounID = new DataTable();

                    DataTable oInsReversePay = new DataTable();
                    decimal _CreditLineTotalAmount = 0;
                    decimal _fillPayAmt = 0;
                    #region "Retirve all insurace payment against that claim to void, including payment, write off, with hold and correction"

                    _sqlQuery = "";
                    _sqlQuery = " SELECT " +
                   " ISNULL(neobpaymentID,0) AS neobpaymentID,ISNULL(nBillingTransactionID,0) AS nBillingTransactionID,ISNULL(nBillingTransactionDetailID,0) AS nBillingTransactionDetailID,  " +
                   " ISNULL(nBillingTransactionLineNo,0) AS nBillingTransactionLineNo,ISNULL(nPatientID,0) AS nPatientID,  " +
                   " ISNULL(nDOSFrom,0) AS nDOSFrom,ISNULL(nDOSTo,0) AS nDOSTo,  " +
                   " ISNULL(sCPTCode,'') AS sCPTCode,ISNULL(sCPTDescription,'') AS sCPTDescription,  " +
                   " ISNULL(nPaymentType,0) AS nPaymentType,ISNULL(nPaymentSubType,0) AS nPaymentSubType,  " +
                   " ISNULL(nPaySign,0) AS nPaySign,ISNULL(nPayMode,0) AS nPayMode,  " +
                   " ISNULL(nRefEOBPaymentID,0) AS nRefEOBPaymentID, ISNULL(nRefEOBPaymentDetailID,0) AS nRefEOBPaymentDetailID,  " +
                   " ISNULL(nAccountID,0) AS nAccountID,ISNULL(nAccountType,0) AS nAccountType,  " +
                   " ISNULL(nMSTAccountID,0) AS nMSTAccountID,  " +
                   " ISNULL(nMSTAccountType,0) AS nMSTAccountType,ISNULL(nPaymentTrayID,0) AS nPaymentTrayID,  " +
                   " ISNULL(sPaymentTrayCode,'') AS sPaymentTrayCode,ISNULL(sPaymentTrayDescription,'') AS sPaymentTrayDescription,  " +
                   " ISNULL(nUserID,0) AS nUserID,ISNULL(sUserName,'') AS sUserName,  " +
                   " ISNULL(nClinicID,0) AS nClinicID,ISNULL(nResEOBPaymentID,0) AS nResEOBPaymentID, " +
                   " ISNULL(nResEOBPaymentDetailID,0) AS nResEOBPaymentDetailID,  " +
                   " ISNULL(bIsPaymentVoid,0) AS bIsPaymentVoid,  " +
                   " ISNULL(nCreditLineID,0) AS nCreditLineID,ISNULL(nContactInsID,0) AS nContactInsID,ISNULL(nTrackTrnID,0) AS nTrackTrnID, " +
                   " 'Amount' = " +
                   " CASE  " +
                   " WHEN nAmount = 0 THEN 0 " +
                   " WHEN nAmount < 0  THEN (nAmount - (nAmount * 2)) " +
                   " WHEN nAmount > 0 THEN (nAmount - (nAmount * 2)) " +
                   " ELSE NULL " +
                   " END, ISNULL(nOldRefEobPaymentID,0) AS nOldRefEobPaymentID " +
                   " FROM BL_EOBPayment_DTL WITH (NOLOCK) " +
                   " WHERE nBillingTransactionID IS NOT NULL AND (nBillingTransactionID = " + TransactionId + ") AND (nPaymentType = 4) ";

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    oDB.Retrive_Query(_sqlQuery, out oInsReversePay);
                    oDB.Disconnect();
                    int rowNum_Reserve = -1;
                    Decimal rowNum_Reserve_Amount = 0;
                    EOBPayment.Common.EOBInsuranceReserveDetails oPaymentReserveDtls = new global::gloBilling.EOBPayment.Common.EOBInsuranceReserveDetails();
                    if (oInsReversePay != null && oInsReversePay.Rows.Count > 0)
                    {
                        for (int irp = 0; irp <= oInsReversePay.Rows.Count - 1; irp++)
                        {
                        


                            EOBPayment.Common.PaymentInsuranceLine oPaymentInsuranceLine = new EOBPayment.Common.PaymentInsuranceLine();
                         //   bool _Add_WO_WH = false;

                            #region "EOB Line"

                            oPaymentInsuranceLine.PatientID = PatientId;
                            oPaymentInsuranceLine.PatInsuranceID = Convert.ToInt64(oInsReversePay.Rows[irp]["nMSTAccountID"]);
                            oPaymentInsuranceLine.InsContactID = Convert.ToInt64(oInsReversePay.Rows[irp]["nContactInsID"]);
                            oPaymentInsuranceLine.BLTransactionID = Convert.ToInt64(oInsReversePay.Rows[irp]["nBillingTransactionID"]);
                            oPaymentInsuranceLine.BLTransactionDetailID = Convert.ToInt64(oInsReversePay.Rows[irp]["nBillingTransactionDetailID"]);
                            oPaymentInsuranceLine.BLTransactionLineNo = Convert.ToInt64(oInsReversePay.Rows[irp]["nBillingTransactionLineNo"]);
                            oPaymentInsuranceLine.ClaimNumber = CliamNo;
                            oPaymentInsuranceLine.DOSFrom = Convert.ToInt64(oInsReversePay.Rows[irp]["nDOSFrom"]);
                            oPaymentInsuranceLine.DOSTo = Convert.ToInt64(oInsReversePay.Rows[irp]["nDOSTo"]);
                            oPaymentInsuranceLine.CPTCode = Convert.ToString(oInsReversePay.Rows[irp]["sCPTCode"]);
                            oPaymentInsuranceLine.CPTDescription = Convert.ToString(oInsReversePay.Rows[irp]["sCPTDescription"]);

                            oPaymentInsuranceLine.BLInsuranceID = 0;
                            oPaymentInsuranceLine.BLInsuranceName = "";
                            oPaymentInsuranceLine.BLInsuranceFlag = InsuranceTypeFlag.None;


                            oPaymentInsuranceLine.Charges = 0;
                            oPaymentInsuranceLine.Unit = 0;
                            oPaymentInsuranceLine.TotalCharges = 0;
                            oPaymentInsuranceLine.Allowed = 0;
                            oPaymentInsuranceLine.WriteOff = 0;
                            oPaymentInsuranceLine.NonCovered = 0;
                            oPaymentInsuranceLine.InsuranceAmount = 0;
                            oPaymentInsuranceLine.Copay = 0;
                            oPaymentInsuranceLine.Deductible = 0;
                            oPaymentInsuranceLine.CoInsurance = 0;
                            oPaymentInsuranceLine.Withhold = 0;

                            oPaymentInsuranceLine.PaymentTrayID = _CloseDayTrayID;
                            oPaymentInsuranceLine.PaymentTrayCode = _CloseDayTrayCode;
                            oPaymentInsuranceLine.PaymentTrayDesc = _CloseDayTrayName;

                            oPaymentInsurace.CloseDate = VoidCloseDate;

                            oPaymentInsuranceLine.UserID = _UserId;
                            oPaymentInsuranceLine.UserName = _UserName;
                            oPaymentInsuranceLine.ClinicID = _ClinicID;

                            oPaymentInsuranceLine.InsCompanyID = Convert.ToInt64(oInsReversePay.Rows[irp]["nAccountID"]);

                            #endregion

                            #region "Debit Service Line - Insurace - Alocation from Current Check, Correction/Takeback, Use Reserved"

                            oEOBInsurancePaymentDetail = new EOBPayment.Common.EOBInsurancePaymentDetail();
                            _fillPayAmt = 0;
                            oEOBInsurancePaymentDetail.EOBPaymentID = 0;
                            oEOBInsurancePaymentDetail.EOBID = 0;
                            oEOBInsurancePaymentDetail.EOBDtlID = 0;
                            oEOBInsurancePaymentDetail.EOBPaymentDetailID = 0;

                            oEOBInsurancePaymentDetail.BillingTransactionID = Convert.ToInt64(oInsReversePay.Rows[irp]["nBillingTransactionID"]);
                            oEOBInsurancePaymentDetail.BillingTransactionDetailID = Convert.ToInt64(oInsReversePay.Rows[irp]["nBillingTransactionDetailID"]);
                            oEOBInsurancePaymentDetail.BillingTransactionLineNo = Convert.ToInt32(oInsReversePay.Rows[irp]["nBillingTransactionLineNo"]);
                            oEOBInsurancePaymentDetail.DOSFrom = Convert.ToInt64(oInsReversePay.Rows[irp]["nDOSFrom"]);
                            oEOBInsurancePaymentDetail.DOSTo = Convert.ToInt64(oInsReversePay.Rows[irp]["nDOSTo"]);
                            oEOBInsurancePaymentDetail.CPTCode = Convert.ToString(oInsReversePay.Rows[irp]["sCPTCode"]);
                            oEOBInsurancePaymentDetail.CPTDescription = Convert.ToString(oInsReversePay.Rows[irp]["sCPTDescription"]);


                            oEOBInsurancePaymentDetail.PaymentType = ((EOBPaymentType)Convert.ToInt32(oInsReversePay.Rows[irp]["nPaymentType"]));
                            oEOBInsurancePaymentDetail.PaymentSubType = ((EOBPaymentSubType)Convert.ToInt32(oInsReversePay.Rows[irp]["nPaymentSubType"]));

                            if (oInsReversePay.Rows[irp]["Amount"] != DBNull.Value)
                            {
                                _fillPayAmt = Convert.ToDecimal(oInsReversePay.Rows[irp]["Amount"]);
                                oEOBInsurancePaymentDetail.Amount = _fillPayAmt;
                                oEOBInsurancePaymentDetail.IsNullAmount = false;

                                if ((oEOBInsurancePaymentDetail.PaymentType == EOBPaymentType.InsuracePayment
                                && oEOBInsurancePaymentDetail.PaymentSubType == EOBPaymentSubType.Insurace)
                                    || (oEOBInsurancePaymentDetail.PaymentType == EOBPaymentType.InsuracePayment
                                && oEOBInsurancePaymentDetail.PaymentSubType == EOBPaymentSubType.Correction))
                                {
                                    _CreditLineTotalAmount = _CreditLineTotalAmount + _fillPayAmt;
                                }
                            }
                            else
                            {
                                oEOBInsurancePaymentDetail.IsNullAmount = true;
                            }


                            oEOBInsurancePaymentDetail.PaySign = ((EOBPaymentSign)Convert.ToInt32(oInsReversePay.Rows[irp]["nPaySign"]));
                            oEOBInsurancePaymentDetail.PayMode = _EOBPaymentMode;
                            oEOBInsurancePaymentDetail.RefEOBPaymentID = Convert.ToInt64(oInsReversePay.Rows[irp]["nRefEOBPaymentID"]);
                            oEOBInsurancePaymentDetail.RefEOBPaymentDetailID = Convert.ToInt64(oInsReversePay.Rows[irp]["nRefEOBPaymentDetailID"]);
                            oEOBInsurancePaymentDetail.ReserveEOBPaymentID = Convert.ToInt64(oInsReversePay.Rows[irp]["nResEOBPaymentID"]);
                            oEOBInsurancePaymentDetail.ReserveEOBPaymentDetailID = Convert.ToInt64(oInsReversePay.Rows[irp]["nResEOBPaymentDetailID"]);

                            //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                            oEOBInsurancePaymentDetail.AccountID = Convert.ToInt64(oInsReversePay.Rows[irp]["nAccountID"]);
                            oEOBInsurancePaymentDetail.AccountType = ((EOBPaymentAccountType)Convert.ToInt32(oInsReversePay.Rows[irp]["nAccountType"]));
                            oEOBInsurancePaymentDetail.MSTAccountID = Convert.ToInt64(oInsReversePay.Rows[irp]["nMSTAccountID"]);
                            oEOBInsurancePaymentDetail.MSTAccountType = ((EOBPaymentAccountType)Convert.ToInt32(oInsReversePay.Rows[irp]["nMSTAccountType"]));
                            oEOBInsurancePaymentDetail.ContactInsID = Convert.ToInt64(oInsReversePay.Rows[irp]["nContactInsID"]);

                            oEOBInsurancePaymentDetail.PatientID = PatientId;
                            oEOBInsurancePaymentDetail.PaymentTrayID = _CloseDayTrayID;
                            oEOBInsurancePaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                            oEOBInsurancePaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                            oEOBInsurancePaymentDetail.UserID = _UserId;
                            oEOBInsurancePaymentDetail.UserName = _UserName;
                            oEOBInsurancePaymentDetail.ClinicID = _ClinicID;

                            oEOBInsurancePaymentDetail.FinanceLieNo = 0;
                            oEOBInsurancePaymentDetail.MainCreditLineID = 0;
                            oEOBInsurancePaymentDetail.IsMainCreditLine = false;
                            oEOBInsurancePaymentDetail.IsReserveCreditLine = false;
                            oEOBInsurancePaymentDetail.IsCorrectionCreditLine = false;
                            oEOBInsurancePaymentDetail.RefFinanceLieNo = 0;
                            oEOBInsurancePaymentDetail.UseRefFinanceLieNo = false;
                            
                            oEOBInsurancePaymentDetail.CloseDate = VoidCloseDate;

                            oPaymentInsuranceLine.EOBInsurancePaymentLineDetails.Add(oEOBInsurancePaymentDetail);

                            oEOBInsurancePaymentDetail.Dispose();

                            #endregion

                            #region "As per current logic we dont requite seprate w/o and w/h to revert, it is going to cover in single debit line"

                            //#region "Debit Service Line - Insurace - Alocation from Current Check, Correction/Takeback, Use Reserved"

                            //if (c1SinglePayment.GetData(i, COL_PAYMENT) != null && Convert.ToString(c1SinglePayment.GetData(i, COL_PAYMENT)).Trim() != "")
                            //{
                            //    if (c1SinglePayment.GetData(i, COL_LAST_PAYMENT) != null && Convert.ToString(c1SinglePayment.GetData(i, COL_LAST_PAYMENT)).Trim() != "")
                            //    {
                            //        if ((Convert.ToDecimal(c1SinglePayment.GetData(i, COL_PAYMENT)) - Convert.ToDecimal(c1SinglePayment.GetData(i, COL_LAST_PAYMENT))) > 0)
                            //        {
                            //            decimal _fillPayAmt = 0; decimal _fillResAmt = 0;
                            //            Int64 _fillResPayID = 0; Int64 _fillResPayDtlID = 0;
                            //            Int64 _fillRefPayID = 0; Int64 _fillRefPayDtlID = 0;
                            //            int _fillrPayIndx = -1;
                            //            int _fillRefFinanceLieNo = 0;
                            //            bool _fillUseRefFinanceLieNo = false;
                            //            bool _isNullfillPayAmt = false;


                            //            //if no correction then direct current new amount
                            //            //if negative correction then it will not come in this loop
                            //            //if positive correction then only correction amount, but in grid user will enter total amount not correction amount
                            //            //thats why below we have to calculate amount = last amount - current payment

                            //            if (c1SinglePayment.GetData(i, COL_PAYMENT) != null && c1SinglePayment.GetData(i, COL_LAST_PAYMENT) != null)
                            //            { _fillPayAmt = (Convert.ToDecimal(c1SinglePayment.GetData(i, COL_PAYMENT)) - Convert.ToDecimal(c1SinglePayment.GetData(i, COL_LAST_PAYMENT))); }
                            //            else if (c1SinglePayment.GetData(i, COL_PAYMENT) != null)
                            //            { _fillPayAmt = (Convert.ToDecimal(c1SinglePayment.GetData(i, COL_PAYMENT))); }
                            //            else if (c1SinglePayment.GetData(i, COL_LAST_PAYMENT) != null)
                            //            { _fillPayAmt = 0 - (Convert.ToDecimal(c1SinglePayment.GetData(i, COL_LAST_PAYMENT))); }
                            //            else
                            //            { _isNullfillPayAmt = true; }


                            //            for (int rPay = 0; rPay <= EOBInsurancePaymentMasterAllocationLines.Count - 1; rPay++)
                            //            {
                            //                if (EOBInsurancePaymentMasterAllocationLines[rPay].Amount > 0)
                            //                {
                            //                    _fillResAmt = EOBInsurancePaymentMasterAllocationLines[rPay].Amount;
                            //                    _fillResPayID = EOBInsurancePaymentMasterAllocationLines[rPay].EOBPaymentID;
                            //                    _fillResPayDtlID = EOBInsurancePaymentMasterAllocationLines[rPay].EOBPaymentDetailID;
                            //                    _fillRefPayID = EOBInsurancePaymentMasterAllocationLines[rPay].RefEOBPaymentID;
                            //                    _fillRefPayDtlID = EOBInsurancePaymentMasterAllocationLines[rPay].RefEOBPaymentDetailID;

                            //                    _fillRefFinanceLieNo = EOBInsurancePaymentMasterAllocationLines[rPay].FinanceLieNo;
                            //                    if (_fillRefPayID == 0 && _fillRefPayDtlID == 0)
                            //                    {
                            //                        _fillUseRefFinanceLieNo = true;
                            //                    }

                            //                    _fillrPayIndx = rPay;
                            //                    break;
                            //                }
                            //            }

                            //            if (_fillPayAmt <= _fillResAmt)
                            //            {
                            //                #region "Set Less Amount Single object"
                            //                oEOBInsurancePaymentDetail = new EOBPayment.Common.EOBInsurancePaymentDetail();
                            //                oEOBInsurancePaymentDetail.EOBPaymentID = 0;
                            //                oEOBInsurancePaymentDetail.EOBID = 0;
                            //                oEOBInsurancePaymentDetail.EOBDtlID = 0;
                            //                oEOBInsurancePaymentDetail.EOBPaymentDetailID = 0;

                            //                oEOBInsurancePaymentDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_ID));
                            //                oEOBInsurancePaymentDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_DETAILID));
                            //                oEOBInsurancePaymentDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_LINENO));
                            //                oEOBInsurancePaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_FROM)));
                            //                oEOBInsurancePaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_TO)));
                            //                oEOBInsurancePaymentDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_CODE));
                            //                oEOBInsurancePaymentDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_DESCRIPTON));

                            //                oEOBInsurancePaymentDetail.Amount = _fillPayAmt;
                            //                oEOBInsurancePaymentDetail.IsNullAmount = _isNullfillPayAmt;

                            //                oEOBInsurancePaymentDetail.PaymentType = EOBPaymentType.InsuracePayment;
                            //                oEOBInsurancePaymentDetail.PaymentSubType = EOBPaymentSubType.Insurace;
                            //                oEOBInsurancePaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                            //                oEOBInsurancePaymentDetail.PayMode = _EOBPaymentMode;
                            //                oEOBInsurancePaymentDetail.RefEOBPaymentID = _fillRefPayID;
                            //                oEOBInsurancePaymentDetail.RefEOBPaymentDetailID = _fillRefPayDtlID;
                            //                oEOBInsurancePaymentDetail.ReserveEOBPaymentID = _fillResPayID;
                            //                oEOBInsurancePaymentDetail.ReserveEOBPaymentDetailID = _fillResPayDtlID;

                            //                //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                            //                oEOBInsurancePaymentDetail.AccountID = Convert.ToInt64(cmbInsCompany.SelectedValue);
                            //                oEOBInsurancePaymentDetail.AccountType = EOBPaymentAccountType.InsuranceCompany;
                            //                oEOBInsurancePaymentDetail.MSTAccountID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1));
                            //                oEOBInsurancePaymentDetail.MSTAccountType = EOBPaymentAccountType.PatientInsurace;
                            //                oEOBInsurancePaymentDetail.ContactInsID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));

                            //                oEOBInsurancePaymentDetail.PatientID = _PatientID;
                            //                oEOBInsurancePaymentDetail.PaymentTrayID = _CloseDayTrayID;
                            //                oEOBInsurancePaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                            //                oEOBInsurancePaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                            //                oEOBInsurancePaymentDetail.UserID = _UserId;
                            //                oEOBInsurancePaymentDetail.UserName = _UserName;
                            //                oEOBInsurancePaymentDetail.ClinicID = _ClinicID;

                            //                oEOBInsurancePaymentDetail.FinanceLieNo = 0;
                            //                oEOBInsurancePaymentDetail.MainCreditLineID = 0;
                            //                oEOBInsurancePaymentDetail.IsMainCreditLine = false;
                            //                oEOBInsurancePaymentDetail.IsReserveCreditLine = false;
                            //                oEOBInsurancePaymentDetail.IsCorrectionCreditLine = false;
                            //                oEOBInsurancePaymentDetail.RefFinanceLieNo = _fillRefFinanceLieNo;
                            //                oEOBInsurancePaymentDetail.UseRefFinanceLieNo = _fillUseRefFinanceLieNo;

                            //                oPaymentInsuranceLine.EOBInsurancePaymentLineDetails.Add(oEOBInsurancePaymentDetail);
                            //                oEOBInsurancePaymentDetail.Dispose();
                            //                //

                            //                if (_fillrPayIndx != -1)
                            //                {
                            //                    EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].Amount = _fillResAmt - _fillPayAmt;
                            //                }
                            //                #endregion
                            //            }
                            //            else
                            //            {
                            //                #region "Set More Amount Multiple object"
                            //                decimal _fillPayMulAmt = _fillPayAmt;
                            //                do
                            //                {
                            //                    if (EOBInsurancePaymentMasterAllocationLines.Count > 0)
                            //                    {
                            //                        _fillResAmt = EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].Amount;
                            //                        _fillResPayID = EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].EOBPaymentID;
                            //                        _fillResPayDtlID = EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].EOBPaymentDetailID;
                            //                        _fillRefPayID = EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].RefEOBPaymentID;
                            //                        _fillRefPayDtlID = EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].RefEOBPaymentDetailID;

                            //                        _fillRefFinanceLieNo = EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].FinanceLieNo;
                            //                        if (_fillRefPayID == 0 && _fillRefPayDtlID == 0)
                            //                        {
                            //                            _fillUseRefFinanceLieNo = true;
                            //                        }

                            //                        if (_fillPayMulAmt >= _fillResAmt)
                            //                        { _fillPayAmt = _fillResAmt; _fillPayMulAmt = _fillPayMulAmt - _fillPayAmt; }
                            //                        else
                            //                        { _fillPayAmt = _fillPayMulAmt; _fillPayMulAmt = _fillPayMulAmt - _fillPayMulAmt; }

                            //                    }

                            //                    #region "Set object"
                            //                    oEOBInsurancePaymentDetail = new EOBPayment.Common.EOBInsurancePaymentDetail();
                            //                    oEOBInsurancePaymentDetail.EOBPaymentID = 0;
                            //                    oEOBInsurancePaymentDetail.EOBID = 0;
                            //                    oEOBInsurancePaymentDetail.EOBDtlID = 0;
                            //                    oEOBInsurancePaymentDetail.EOBPaymentDetailID = 0;

                            //                    oEOBInsurancePaymentDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_ID));
                            //                    oEOBInsurancePaymentDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_DETAILID));
                            //                    oEOBInsurancePaymentDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_LINENO));
                            //                    oEOBInsurancePaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_FROM)));
                            //                    oEOBInsurancePaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_TO)));
                            //                    oEOBInsurancePaymentDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_CODE));
                            //                    oEOBInsurancePaymentDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_DESCRIPTON));

                            //                    oEOBInsurancePaymentDetail.Amount = _fillPayAmt;
                            //                    oEOBInsurancePaymentDetail.IsNullAmount = _isNullfillPayAmt;

                            //                    oEOBInsurancePaymentDetail.PaymentType = EOBPaymentType.InsuracePayment;
                            //                    oEOBInsurancePaymentDetail.PaymentSubType = EOBPaymentSubType.Insurace;
                            //                    oEOBInsurancePaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                            //                    oEOBInsurancePaymentDetail.PayMode = _EOBPaymentMode;
                            //                    oEOBInsurancePaymentDetail.RefEOBPaymentID = _fillRefPayID;
                            //                    oEOBInsurancePaymentDetail.RefEOBPaymentDetailID = _fillRefPayDtlID;
                            //                    oEOBInsurancePaymentDetail.ReserveEOBPaymentID = _fillResPayID;
                            //                    oEOBInsurancePaymentDetail.ReserveEOBPaymentDetailID = _fillResPayDtlID;

                            //                    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                            //                    oEOBInsurancePaymentDetail.AccountID = Convert.ToInt64(cmbInsCompany.SelectedValue);
                            //                    oEOBInsurancePaymentDetail.AccountType = EOBPaymentAccountType.InsuranceCompany;
                            //                    oEOBInsurancePaymentDetail.MSTAccountID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1));
                            //                    oEOBInsurancePaymentDetail.MSTAccountType = EOBPaymentAccountType.PatientInsurace;
                            //                    oEOBInsurancePaymentDetail.ContactInsID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));

                            //                    oEOBInsurancePaymentDetail.PatientID = _PatientID;
                            //                    oEOBInsurancePaymentDetail.PaymentTrayID = _CloseDayTrayID;
                            //                    oEOBInsurancePaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                            //                    oEOBInsurancePaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                            //                    oEOBInsurancePaymentDetail.UserID = _UserId;
                            //                    oEOBInsurancePaymentDetail.UserName = _UserName;
                            //                    oEOBInsurancePaymentDetail.ClinicID = _ClinicID;

                            //                    oEOBInsurancePaymentDetail.FinanceLieNo = 0;
                            //                    oEOBInsurancePaymentDetail.MainCreditLineID = 0;
                            //                    oEOBInsurancePaymentDetail.IsMainCreditLine = false;
                            //                    oEOBInsurancePaymentDetail.IsReserveCreditLine = false;
                            //                    oEOBInsurancePaymentDetail.IsCorrectionCreditLine = false;
                            //                    oEOBInsurancePaymentDetail.RefFinanceLieNo = _fillRefFinanceLieNo;
                            //                    oEOBInsurancePaymentDetail.UseRefFinanceLieNo = _fillUseRefFinanceLieNo;

                            //                    oPaymentInsuranceLine.EOBInsurancePaymentLineDetails.Add(oEOBInsurancePaymentDetail);
                            //                    oEOBInsurancePaymentDetail.Dispose();
                            //                    //



                            //                    #endregion

                            //                    if (_fillrPayIndx != -1)
                            //                    {
                            //                        EOBInsurancePaymentMasterAllocationLines[_fillrPayIndx].Amount = _fillResAmt - _fillPayAmt;
                            //                        _fillrPayIndx = _fillrPayIndx + 1;
                            //                        if (_fillrPayIndx >= EOBInsurancePaymentMasterAllocationLines.Count) { break; }
                            //                    }

                            //                }
                            //                while (_fillPayMulAmt > 0);
                            //                #endregion
                            //            }
                            //        }
                            //    }
                            //}
                            //#endregion

                            //_Add_WO_WH = false;

                            //#region "Debit Service Line - WriteOff"
                            //if (c1SinglePayment.GetData(i, COL_WRITEOFF) != null)
                            //{
                            //    oEOBInsurancePaymentDetail = new EOBPayment.Common.EOBInsurancePaymentDetail();
                            //    oEOBInsurancePaymentDetail.EOBPaymentID = 0;
                            //    oEOBInsurancePaymentDetail.EOBID = 0;
                            //    oEOBInsurancePaymentDetail.EOBDtlID = 0;
                            //    oEOBInsurancePaymentDetail.EOBPaymentDetailID = 0;

                            //    oEOBInsurancePaymentDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_ID));
                            //    oEOBInsurancePaymentDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_DETAILID));
                            //    oEOBInsurancePaymentDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_LINENO));
                            //    oEOBInsurancePaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_FROM)));
                            //    oEOBInsurancePaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_TO)));
                            //    oEOBInsurancePaymentDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_CODE));
                            //    oEOBInsurancePaymentDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_DESCRIPTON));

                            //    if (c1SinglePayment.GetData(i, COL_WRITEOFF) != null && c1SinglePayment.GetData(i, COL_WRITEOFF).ToString().Trim() != "")
                            //    {
                            //        if (c1SinglePayment.GetData(i, COL_ISCORRECTION) != null && Convert.ToBoolean(c1SinglePayment.GetData(i, COL_ISCORRECTION)) == true)
                            //        {
                            //            oEOBInsurancePaymentDetail.Amount = Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_WRITEOFF))) - Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_LAST_WRITEOFF)));
                            //            if (Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_WRITEOFF))) != Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_LAST_WRITEOFF))))
                            //            {
                            //                _Add_WO_WH = true;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            oEOBInsurancePaymentDetail.Amount = Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_WRITEOFF)));
                            //            _Add_WO_WH = true;
                            //        }
                            //    }

                            //    oEOBInsurancePaymentDetail.PaymentType = EOBPaymentType.InsuracePayment;
                            //    oEOBInsurancePaymentDetail.PaymentSubType = EOBPaymentSubType.WriteOff;
                            //    oEOBInsurancePaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                            //    oEOBInsurancePaymentDetail.PayMode = _EOBPaymentMode;
                            //    oEOBInsurancePaymentDetail.RefEOBPaymentID = 0;
                            //    oEOBInsurancePaymentDetail.RefEOBPaymentDetailID = 0;

                            //    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                            //    oEOBInsurancePaymentDetail.AccountID = Convert.ToInt64(cmbInsCompany.SelectedValue);
                            //    oEOBInsurancePaymentDetail.AccountType = EOBPaymentAccountType.InsuranceCompany;
                            //    oEOBInsurancePaymentDetail.MSTAccountID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1));
                            //    oEOBInsurancePaymentDetail.MSTAccountType = EOBPaymentAccountType.PatientInsurace;
                            //    oEOBInsurancePaymentDetail.ContactInsID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));

                            //    oEOBInsurancePaymentDetail.PatientID = _PatientID;
                            //    oEOBInsurancePaymentDetail.PaymentTrayID = _CloseDayTrayID;
                            //    oEOBInsurancePaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                            //    oEOBInsurancePaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                            //    oEOBInsurancePaymentDetail.UserID = _UserId;
                            //    oEOBInsurancePaymentDetail.UserName = _UserName;
                            //    oEOBInsurancePaymentDetail.ClinicID = _ClinicID;

                            //    oEOBInsurancePaymentDetail.FinanceLieNo = 0;
                            //    oEOBInsurancePaymentDetail.MainCreditLineID = 0;
                            //    oEOBInsurancePaymentDetail.IsMainCreditLine = false;
                            //    oEOBInsurancePaymentDetail.IsReserveCreditLine = false;
                            //    oEOBInsurancePaymentDetail.IsCorrectionCreditLine = false;
                            //    oEOBInsurancePaymentDetail.RefFinanceLieNo = 0;
                            //    oEOBInsurancePaymentDetail.UseRefFinanceLieNo = false;

                            //    if (_Add_WO_WH = true)
                            //    {
                            //        oPaymentInsuranceLine.EOBInsurancePaymentLineDetails.Add(oEOBInsurancePaymentDetail);
                            //    }
                            //    oEOBInsurancePaymentDetail.Dispose();
                            //}
                            //#endregion

                            //_Add_WO_WH = false;

                            //#region "Debit Service Line - WithHold"
                            //if (c1SinglePayment.GetData(i, COL_WITHHOLD) != null)
                            //{
                            //    oEOBInsurancePaymentDetail = new EOBPayment.Common.EOBInsurancePaymentDetail();
                            //    oEOBInsurancePaymentDetail.EOBPaymentID = 0;
                            //    oEOBInsurancePaymentDetail.EOBID = 0;
                            //    oEOBInsurancePaymentDetail.EOBDtlID = 0;
                            //    oEOBInsurancePaymentDetail.EOBPaymentDetailID = 0;

                            //    oEOBInsurancePaymentDetail.BillingTransactionID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_ID));
                            //    oEOBInsurancePaymentDetail.BillingTransactionDetailID = Convert.ToInt64(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_DETAILID));
                            //    oEOBInsurancePaymentDetail.BillingTransactionLineNo = Convert.ToInt32(c1SinglePayment.GetData(i, COL_BILLING_TRANSACTON_LINENO));
                            //    oEOBInsurancePaymentDetail.DOSFrom = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_FROM)));
                            //    oEOBInsurancePaymentDetail.DOSTo = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(c1SinglePayment.GetData(i, COL_DOS_TO)));
                            //    oEOBInsurancePaymentDetail.CPTCode = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_CODE));
                            //    oEOBInsurancePaymentDetail.CPTDescription = Convert.ToString(c1SinglePayment.GetData(i, COL_CPT_DESCRIPTON));

                            //    if (c1SinglePayment.GetData(i, COL_WITHHOLD) != null && c1SinglePayment.GetData(i, COL_WITHHOLD).ToString().Trim() != "")
                            //    {
                            //        if (c1SinglePayment.GetData(i, COL_ISCORRECTION) != null && Convert.ToBoolean(c1SinglePayment.GetData(i, COL_ISCORRECTION)) == true)
                            //        {
                            //            oEOBInsurancePaymentDetail.Amount = Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_WITHHOLD))) - Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_LAST_WITHHOLD)));
                            //            if (Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_WITHHOLD))) != Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_LAST_WITHHOLD))))
                            //            {
                            //                _Add_WO_WH = true;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            oEOBInsurancePaymentDetail.Amount = Convert.ToDecimal(Convert.ToString(c1SinglePayment.GetData(i, COL_WITHHOLD)));
                            //            _Add_WO_WH = true;
                            //        }
                            //    }

                            //    oEOBInsurancePaymentDetail.PaymentType = EOBPaymentType.InsuracePayment;
                            //    oEOBInsurancePaymentDetail.PaymentSubType = EOBPaymentSubType.WithHold;
                            //    oEOBInsurancePaymentDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                            //    oEOBInsurancePaymentDetail.PayMode = _EOBPaymentMode;
                            //    oEOBInsurancePaymentDetail.RefEOBPaymentID = 0;
                            //    oEOBInsurancePaymentDetail.RefEOBPaymentDetailID = 0;

                            //    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                            //    oEOBInsurancePaymentDetail.AccountID = Convert.ToInt64(cmbInsCompany.SelectedValue);
                            //    oEOBInsurancePaymentDetail.AccountType = EOBPaymentAccountType.InsuranceCompany;
                            //    oEOBInsurancePaymentDetail.MSTAccountID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 1));
                            //    oEOBInsurancePaymentDetail.MSTAccountType = EOBPaymentAccountType.PatientInsurace;
                            //    oEOBInsurancePaymentDetail.ContactInsID = Convert.ToInt64(GetTagElement(lblPayer.Tag.ToString(), '~', 4));

                            //    oEOBInsurancePaymentDetail.PatientID = _PatientID;
                            //    oEOBInsurancePaymentDetail.PaymentTrayID = _CloseDayTrayID;
                            //    oEOBInsurancePaymentDetail.PaymentTrayCode = _CloseDayTrayCode;
                            //    oEOBInsurancePaymentDetail.PaymentTrayDescription = _CloseDayTrayName;
                            //    oEOBInsurancePaymentDetail.UserID = _UserId;
                            //    oEOBInsurancePaymentDetail.UserName = _UserName;
                            //    oEOBInsurancePaymentDetail.ClinicID = _ClinicID;

                            //    oEOBInsurancePaymentDetail.FinanceLieNo = 0;
                            //    oEOBInsurancePaymentDetail.MainCreditLineID = 0;
                            //    oEOBInsurancePaymentDetail.IsMainCreditLine = false;
                            //    oEOBInsurancePaymentDetail.IsReserveCreditLine = false;
                            //    oEOBInsurancePaymentDetail.IsCorrectionCreditLine = false;
                            //    oEOBInsurancePaymentDetail.RefFinanceLieNo = 0;
                            //    oEOBInsurancePaymentDetail.UseRefFinanceLieNo = false;

                            //    if (_Add_WO_WH = true)
                            //    {
                            //        oPaymentInsuranceLine.EOBInsurancePaymentLineDetails.Add(oEOBInsurancePaymentDetail);
                            //    }
                            //    oEOBInsurancePaymentDetail.Dispose();
                            //}
                            //#endregion

                            #endregion


                            oPaymentInsuranceClaim.CliamLines.Add(oPaymentInsuranceLine);

                            oPaymentInsuranceLine.Dispose();
                            
                        }

                        

                    }

                    #region Reserve line Entry


                    if (oInsReversePay != null && oInsReversePay.Rows.Count > 0)
                    {
                        dv_Unique = oInsReversePay.DefaultView;
                        dtUniqueAccounID = dv_Unique.ToTable(true, "neobpaymentID");
                        int row_num = -1;

                    if (dtUniqueAccounID.Rows.Count > 0)
                    {
                        for (int cntrUnique = 0; cntrUnique <= dtUniqueAccounID.Rows.Count - 1; cntrUnique++)
                        {
                            rowNum_Reserve = -1;
                            row_num = -1;
                            rowNum_Reserve_Amount = 0;
                            for (int cntr = 0; cntr <= oInsReversePay.Rows.Count - 1; cntr++)
                            {
                                if ((Convert.ToInt64(dtUniqueAccounID.Rows[cntrUnique]["neobpaymentID"]) == Convert.ToInt64(oInsReversePay.Rows[cntr]["neobpaymentID"])) && (Convert.ToInt64(dtUniqueAccounID.Rows[cntrUnique]["neobpaymentID"]) == Convert.ToInt64(oInsReversePay.Rows[cntr]["nOldRefEobPaymentID"])))
                                {
                                    if (Convert.ToBoolean(oInsReversePay.Rows[cntr]["bIsPaymentVoid"]) == false)
                                    {
                                        if (((((EOBPaymentType)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaymentType"])) == EOBPaymentType.InsuracePayment) && (((EOBPaymentSubType)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaymentSubType"])) == EOBPaymentSubType.Insurace) && (((EOBPaymentSign)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaySign"])) == EOBPaymentSign.Receipt_Debit)) || ((((EOBPaymentType)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaymentType"])) == EOBPaymentType.InsuracePayment) && (((EOBPaymentSubType)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaymentSubType"])) == EOBPaymentSubType.Correction) && (((EOBPaymentSign)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaySign"])) == EOBPaymentSign.Payment_Credit)))
                                        {
                                            if (rowNum_Reserve == -1)
                                            {
                                                rowNum_Reserve = cntr;
                                            }
                                            if (oInsReversePay.Rows[cntr]["Amount"] != DBNull.Value)
                                            {
                                                rowNum_Reserve_Amount = (rowNum_Reserve_Amount + (Convert.ToDecimal(oInsReversePay.Rows[cntr]["Amount"])));
                                            }
                                        }
                                    }
                                }
                                if ((Convert.ToInt64(dtUniqueAccounID.Rows[cntrUnique]["neobpaymentID"]) == Convert.ToInt64(oInsReversePay.Rows[cntr]["nOldRefEobPaymentID"])) && (Convert.ToInt64(dtUniqueAccounID.Rows[cntrUnique]["neobpaymentID"]) != Convert.ToInt64(oInsReversePay.Rows[cntr]["nEobPaymentID"])))
                                {
                                    if (Convert.ToBoolean(oInsReversePay.Rows[cntr]["bIsPaymentVoid"]) == false)
                                    {
                                        if ((((EOBPaymentType)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaymentType"])) == EOBPaymentType.InsuracePayment) && (((EOBPaymentSubType)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaymentSubType"])) == EOBPaymentSubType.Correction) && (((EOBPaymentSign)Convert.ToInt32(oInsReversePay.Rows[cntr]["nPaySign"])) == EOBPaymentSign.Payment_Credit))
                                        {
                                            row_num = cntr;
                                            if (oInsReversePay.Rows[cntr]["Amount"] != DBNull.Value)
                                            {
                                                rowNum_Reserve_Amount = (rowNum_Reserve_Amount + (Convert.ToDecimal(oInsReversePay.Rows[cntr]["Amount"])));
                                            }
                                        }
                                    }
                                }
                            }

                                if (rowNum_Reserve_Amount != 0)
                                {
                                    if (rowNum_Reserve == -1)
                                    {
                                        rowNum_Reserve = row_num;
                                    }
                                   
                                    oEOBInsReserveDetail = new global::gloBilling.EOBPayment.Common.EOBInsuranceReserveDetail();

                                    oEOBInsReserveDetail.EOBPaymentID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nOldRefEOBPaymentID"]);
                                    oEOBInsReserveDetail.EOBID = 0;
                                    oEOBInsReserveDetail.EOBDtlID = 0;
                                    oEOBInsReserveDetail.EOBPaymentDetailID = 0;


                                    oEOBInsReserveDetail.BillingTransactionID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nBillingTransactionID"]); ;
                                    oEOBInsReserveDetail.BillingTransactionDetailID = 0;
                                    oEOBInsReserveDetail.BillingTransactionLineNo = 0;

                                    oEOBInsReserveDetail.DOSFrom = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nDOSFrom"]);
                                    oEOBInsReserveDetail.DOSTo = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nDOSTo"]);
                                    oEOBInsReserveDetail.CPTCode = "";
                                    oEOBInsReserveDetail.CPTDescription = "";   


                                    //if (oInsReversePay.Rows[rowNum_Reserve]["Amount"] != DBNull.Value)
                                    //{
                                    //    _fillPayAmt = Convert.ToDecimal(oInsReversePay.Rows[rowNum_Reserve]["Amount"]);
                                    //    oEOBInsReserveDetail.Amount = _fillPayAmt * (-1);
                                    //    oEOBInsReserveDetail.IsNullAmount = false;

                                    //    if ((oEOBInsReserveDetail.PaymentType == EOBPaymentType.InsuracePayment
                                    //    && oEOBInsReserveDetail.PaymentSubType == EOBPaymentSubType.Insurace)
                                    //        || (oEOBInsReserveDetail.PaymentType == EOBPaymentType.InsuracePayment
                                    //    && oEOBInsReserveDetail.PaymentSubType == EOBPaymentSubType.Correction))
                                    //    {
                                    //        _CreditLineTotalAmount = _CreditLineTotalAmount + _fillPayAmt;
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    oEOBInsReserveDetail.IsNullAmount = true;
                                    //}
                                    if(rowNum_Reserve_Amount<0)
                                    oEOBInsReserveDetail.Amount = rowNum_Reserve_Amount * (-1);
                                    else
                                        oEOBInsReserveDetail.Amount = rowNum_Reserve_Amount;

                                    if (rowNum_Reserve_Amount != 0)
                                    {
                                        oEOBInsReserveDetail.IsNullAmount = false;
                                    }

                                    oEOBInsReserveDetail.PaymentType = EOBPaymentType.InsuraceReserverd;
                                    oEOBInsReserveDetail.PaymentSubType = EOBPaymentSubType.Reserved;
                                    oEOBInsReserveDetail.PaySign = EOBPaymentSign.Receipt_Debit;
                                    oEOBInsReserveDetail.PayMode = (EOBPaymentMode)(oInsReversePay.Rows[rowNum_Reserve]["nPayMode"]);

                                    oEOBInsReserveDetail.RefEOBPaymentID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nRefEOBPaymentID"]);
                                    oEOBInsReserveDetail.RefEOBPaymentDetailID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nRefEOBPaymentDetailID"]);
                                    oEOBInsReserveDetail.ReserveEOBPaymentID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nResEOBPaymentID"]);
                                    oEOBInsReserveDetail.ReserveEOBPaymentDetailID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nResEOBPaymentDetailID"]);

                                    //1. InsuranceID //2. InsuranceName //3 InsuraceSelfMode //4. ContactID
                                    oEOBInsReserveDetail.AccountID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nAccountID"]);
                                    oEOBInsReserveDetail.AccountType = ((EOBPaymentAccountType)Convert.ToInt32(oInsReversePay.Rows[rowNum_Reserve]["nAccountType"]));
                                    oEOBInsReserveDetail.MSTAccountID = -1;
                                    oEOBInsReserveDetail.MSTAccountType = EOBPaymentAccountType.Reserved;
                                    oEOBInsReserveDetail.ContactInsID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nContactInsID"]);

                                    oEOBInsReserveDetail.PatientID = PatientId;
                                    oEOBInsReserveDetail.PaymentTrayID = _CloseDayTrayID;
                                    oEOBInsReserveDetail.PaymentTrayCode = _CloseDayTrayCode;
                                    oEOBInsReserveDetail.PaymentTrayDescription = _CloseDayTrayName;
                                    oEOBInsReserveDetail.UserID = _UserId;
                                    oEOBInsReserveDetail.UserName = _UserName;
                                    oEOBInsReserveDetail.ClinicID = _ClinicID;

                                    oEOBInsReserveDetail.FinanceLieNo = 0;
                                    oEOBInsReserveDetail.MainCreditLineID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nRefEOBPaymentDetailID"]);
                                    oEOBInsReserveDetail.IsMainCreditLine = false;
                                    oEOBInsReserveDetail.IsReserveCreditLine = false;
                                    oEOBInsReserveDetail.IsCorrectionCreditLine = false;
                                    oEOBInsReserveDetail.RefFinanceLieNo = 0;
                                    oEOBInsReserveDetail.UseRefFinanceLieNo = false;
                                    oEOBInsReserveDetail.OldRefEOBPaymentDetailID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nRefEOBPaymentDetailID"]);
                                    oEOBInsReserveDetail.OldRefEOBPaymentID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nRefEOBPaymentID"]);
                                    oEOBInsReserveDetail.ContactInsID = 0;
                                    oEOBInsReserveDetail.CloseDate = VoidCloseDate;
                                    oEOBInsReserveDetail.TrackBillingTransactionID = Convert.ToInt64(oInsReversePay.Rows[rowNum_Reserve]["nTrackTrnID"]);

                                    oPaymentReserveDtls.Add(oEOBInsReserveDetail);
                                    oEOBInsReserveDetail.Dispose();
                                }

                            }


                        }

                    }


                    

                    #endregion Reswerve line Entry


                    if (oEOBInsurancePaymentDetail != null) { oEOBInsurancePaymentDetail.Dispose(); }

                    oPaymentInsurace.EOBInsurancePaymentLineDetails[0].Amount = _CreditLineTotalAmount;

                    #endregion

                    oPaymentInsurace.InsuranceClaims.Add(oPaymentInsuranceClaim);
                    oPaymentInsuranceClaim.Dispose();
                    oPaymentInsurace.EOBInsuranceReserveDetails = oPaymentReserveDtls;

                    _EOBPaymentID = ogloEOBPaymentInsurance.SaveEOB(oPaymentInsurace, true);

                    //... **** Set the the payment void "

                    if (_EOBPaymentID > 0)
                    {
                        oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                        oDB.Connect(false);
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_EOBPayment_MST WITH (READPAST) SET bIsVoid = 'true' WHERE nEOBPaymentID = " + _EOBPaymentID + " ";
                        oDB.Execute_Query(_sqlQuery);
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_EOBPayment_EOB WITH (READPAST) SET bIsVoid = 'true' WHERE nEOBPaymentID = " + _EOBPaymentID + " ";
                        oDB.Execute_Query(_sqlQuery);
                        _sqlQuery = "";
                        _sqlQuery = " UPDATE BL_EOBPayment_DTL WITH (READPAST) SET bIsVoid = 'true' WHERE nEOBPaymentID = " + _EOBPaymentID + " ";
                        oDB.Execute_Query(_sqlQuery);
                        oDB.Disconnect();
                        oDB.Dispose();

                    }
                    //... **** Set the the payment void "
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
            }
        }

        #endregion " Void Payment Code "

        #region " Chech Insurance Plan is On Hold or Not "



        #endregion

        #region "Code to Operate on Batch against status of Transaction"

        public DataTable GetAllPatientPartyStatus(Int64 nMstTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            string _sQuery = String.Empty;
            DataTable dtPartyStatus = new DataTable();
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                _sQuery = " SELECT nTransactionID, nPatientID, nClaimNo, nInsuranceID, nContactID, nResponsibilityNo, nResponsibilityType,"
                        +" dbo.GET_ClaimPartyStatus(nTransactionID,nInsuranceID,nContactID)  as PartyStatus "
                        +" FROM dbo.BL_Transaction_InsPlan WITH (NOLOCK)"
                        +" WHERE nTransactionID = " + nMstTransactionID;

                oDB.Retrive_Query(_sQuery, out dtPartyStatus);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oDB.Disconnect();
                if (oDB != null) { oDB.Dispose(); }
                if (dtPartyStatus != null) { dtPartyStatus.Dispose(); }

            }

            return dtPartyStatus;
        }

        public DataTable GetAllPatientPartyStatus(Int64 nMstTransactionID, Int64 nTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            string _sQuery = String.Empty;
            DataTable dtPartyStatus = new DataTable();
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                //_sQuery = " SELECT nTransactionID, nPatientID, nClaimNo, nInsuranceID, nContactID, nResponsibilityNo, nResponsibilityType,"
                //        + " dbo.GET_ClaimPartyStatus_Revised(" + nTransactionID + ",nTransactionID,nInsuranceID,nContactID)  as PartyStatus "
                //        + " FROM dbo.BL_Transaction_InsPlan WITH (NOLOCK)"
                //        + " WHERE nTransactionID = " + nMstTransactionID;

                _sQuery = "SELECT nTransactionID, nPatientID, nClaimNo, nInsuranceID, nContactID, nResponsibilityNo, nResponsibilityType, "
                        + "dbo.GET_ClaimPartyStatus_Revised(nTransactionID," + nMstTransactionID + ",nInsuranceID,nContactID)  as PartyStatus "
                        + "FROM dbo.BL_Claim_Insurance bci WHERE bci.nTransactionMasterID=" + nMstTransactionID + ""
                        + "AND bci.nTransactionID=" + nTransactionID + "";

                oDB.Retrive_Query(_sQuery, out dtPartyStatus);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                oDB.Disconnect();
                if (oDB != null) { oDB.Dispose(); }
                if (dtPartyStatus != null) { dtPartyStatus.Dispose(); }

            }

            return dtPartyStatus;
        }

        #endregion

        //#endregion " Void Payment Code "

        public bool UpdateNewLine(Int64 TransactionMasterID, Int64 TransactionID)
        {
            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            String _sqlQuery = "";
            try
            {
                oDB.Connect(false);
                _sqlQuery = @"update BL_Transaction_Claim_Lines WITH(READPAST) set nTransactionMasterDetailID = a.nTransactionDetailID
                                                from BL_Transaction_Claim_Lines b  WITH (NOLOCK) , BL_Transaction_Lines a  WITH (NOLOCK) 
                                                where b.nTransactionMasterId=a.nTransactionId
                                                and b.nTransactionLineNo=a.nTransactionLineNo
                                                and b.sCPTCode=a.sCPTCode
                                                and b.nTransactionMasterDetailID = 0
                                                and b.nTransactionMasterId =" + TransactionMasterID + "";
                oDB.Execute_Query(_sqlQuery);

                _sqlQuery = @"update BL_Transaction_Anesthesia WITH(READPAST) set nTransactionMasterDetailID = a.nTransactionMasterDetailID
                                                from BL_Transaction_Anesthesia b  WITH (NOLOCK) , BL_Transaction_Claim_Lines a  WITH (NOLOCK) 
                                                where b.nTransactionMasterId=a.nTransactionMasterId
                                                and b.nTransactionID=a.nTransactionID
                                                and b.nTransactionDetailID=a.nTransactionDetailID           
                                                and b.nTransactionMasterDetailID = 0
                                                and b.nTransactionMasterId =" + TransactionMasterID + "";
                oDB.Execute_Query(_sqlQuery);

                _sqlQuery = @"update BL_EOB_NextAction  WITH(READPAST) set nBillingTransactionDetailID = a.nTransactionMasterDetailID
                                                from BL_EOB_NextAction b  WITH (NOLOCK) , BL_Transaction_Claim_Lines a  WITH (NOLOCK) 
                                                where b.nBillingTransactionID = a.nTransactionMasterId
                                                AND b.nTrackMstTrnID = a.nTransactionID
                                                AND b.nTrackMstTrnDetailID = a.nTransactionDetailID
                                                AND b.nBillingTransactionDetailID = 0
                                                AND b.nBillingTransactionID =" + TransactionMasterID + "";

                oDB.Execute_Query(_sqlQuery);


                _sqlQuery = @"update BL_EOB_NextAction_HST  WITH(READPAST) set nBillingTransactionDetailID = a.nTransactionMasterDetailID
                                                from BL_EOB_NextAction_HST b  WITH (NOLOCK) , BL_Transaction_Claim_Lines a  WITH (NOLOCK) 
                                                where b.nBillingTransactionID = a.nTransactionMasterId
                                                AND b.nTrackMstTrnID = a.nTransactionID
                                                AND b.nTrackMstTrnDetailID = a.nTransactionDetailID
                                                AND b.nBillingTransactionDetailID = 0
                                                AND b.nBillingTransactionID =" + TransactionMasterID + "";

                oDB.Execute_Query(_sqlQuery);


                oDBParameters.Add("@TransactionMasterID", TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@TransactionID", TransactionID, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nUserId", gloGlobal.gloPMGlobal.UserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sMachineName", Environment.MachineName, ParameterDirection.Input, SqlDbType.VarChar);

                oDB.Execute("BL_Delete_Transaction_Claim_Lines", oDBParameters);



                //_sqlQuery = " DELETE FROM BL_Transaction_Claim_Lines WITH(READPAST) " +
                //     " where nTransactionMasterID = " + TransactionMasterID + " AND nTransactionID = " + TransactionID + " " +
                //     " AND nTransactionMasterDetailID NOT IN " +
                //     " (SELECT nTransactionDetailID from BL_Transaction_Lines  WITH (NOLOCK) where nTransactionID = " + TransactionMasterID + ") ";

                //oDB.Execute_Query(_sqlQuery);

                //_sqlQuery = " DELETE FROM BL_Transaction_Anesthesia WITH(READPAST) " +
                //    " where nTransactionMasterID = " + TransactionMasterID + " AND nTransactionID = " + TransactionID + " " +
                //    " AND nTransactionMasterDetailID NOT IN " +
                //    " (SELECT nTransactionDetailID from BL_Transaction_Lines  WITH (NOLOCK) where nTransactionID = " + TransactionMasterID + ") ";

                //oDB.Execute_Query(_sqlQuery);

                ////_sqlQuery = " DELETE FROM BL_UB_Claim_MST WITH(READPAST) " +
                ////     " where nTransactionMasterID = " + TransactionMasterID + " AND nTransactionID = " + TransactionID + " ";

                ////oDB.Execute_Query(_sqlQuery);

                //_sqlQuery = " DELETE FROM BL_UB_Claim_Lines WITH(READPAST) " +
                //     " where nTransactionMasterID = " + TransactionMasterID + 
                //       " AND nTransactionMasterDetailID NOT IN " +
                //     " (SELECT nTransactionDetailID from BL_Transaction_Lines  WITH (NOLOCK) where nTransactionID = " + TransactionMasterID + ") ";

                ////" AND nTransactionMasterDetailID NOT IN " +
                //// " (SELECT nTransactionDetailID from BL_Transaction_Lines where nTransactionID = " + TransactionMasterID + ") ";

                //oDB.Execute_Query(_sqlQuery);


                //_sqlQuery = " DELETE FROM BL_EOB_NextAction WITH(READPAST) " +
                //     " where nBillingTransactionID = " + TransactionMasterID + " " +
                //     " AND nBillingTransactionDetailID NOT IN " +
                //     " (SELECT nTransactionDetailID from BL_Transaction_Lines  WITH (NOLOCK) where nTransactionID = " + TransactionMasterID + ") ";


                //oDB.Execute_Query(_sqlQuery);

                ////Added By Debasish Das to resolve the 

                //_sqlQuery = " DELETE FROM BL_EOB_NextAction_HST WITH(READPAST) " +
                //    " where nBillingTransactionID = " + TransactionMasterID + " " +
                //    " AND nBillingTransactionDetailID NOT IN " +
                //    " (SELECT nTransactionDetailID from BL_Transaction_Lines  WITH (NOLOCK) where nTransactionID = " + TransactionMasterID + ") ";


                //oDB.Execute_Query(_sqlQuery);

                //_sqlQuery = " delete from BL_Transaction_Lines_Notes WITH(READPAST) where nTransactionDetailId not in " +
                //            " (SELECT nTransactionDetailID from BL_Transaction_Lines  WITH (NOLOCK) where nTransactionID = " + TransactionMasterID + ") " +
                //             " and nTransactionID=" + TransactionMasterID + " AND  nNoteType <> 12";

                //oDB.Execute_Query(_sqlQuery);


                oDB.Disconnect();
                _result = true;

            }
            catch
            {
                _result = false;
            }
            finally
            {

                if (oDBParameters != null)
                {
                    oDBParameters.Dispose();
                    oDBParameters = null;
                }
                if (oDB != null)
                {
                    oDB.Dispose();
                    oDB = null;
                }
               
            }
            return _result;
        }

        #region "Need to Delete - Not in Use"
        public bool RejectTransactionClaim(Int64 MasterTransactionID, Int64 TransactionID, Int64 nClinicID)
        {

            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            String _sqlQuery = "";
            DataTable dtNextAction = new DataTable();
            try
            {




                oDB.Connect(false);
                _sqlQuery = "select nNextActionPartyNumber from BL_EOB_NextAction WITH (NOLOCK) where nBillingTransactionID = " + MasterTransactionID + " group by nNextActionPartyNumber ";
                oDB.Retrive_Query(_sqlQuery, out dtNextAction);

                if (dtNextAction != null)
                {
                    _sqlQuery = "Update BL_Transaction_Claim_MST WITH (READPAST) set nClaimStatus = " + ClaimStatus.Close.GetHashCode() + " where nTransactionMasterID = " + MasterTransactionID + " and nTransactionID=" + TransactionID + " ";
                    oDB.Execute_Query(_sqlQuery);

                    _sqlQuery = "update BL_Transaction_Claim_Lines WITH (READPAST) set bIsSplitted = 1 " +
                                     " where nTransactionMasterID=" + MasterTransactionID + " and nTransactionID =" + TransactionID + " ";
                    oDB.Execute_Query(_sqlQuery);

                    Int16 _NextAction = 0;
                    for (int i = 0; i < dtNextAction.Rows.Count; i++)
                    {

                        _NextAction = Convert.ToInt16(dtNextAction.Rows[i]["nNextActionPartyNumber"]);


                        Transaction oTransactionMaster = null;


                        //oTransactionMaster = GetChargesDetails(MasterTransactionID, nClinicID);

                        oTransactionMaster = GetChargesClaimDetails(TransactionID, nClinicID);



                        //Set Parent Claim No

                        //oTransactionMaster.ParentClaimNo = oTransactionMaster.ClaimNo.ToString();

                        if (oTransactionMaster.SubClaimNo.Trim() != String.Empty)
                        { oTransactionMaster.ParentClaimNo = oTransactionMaster.ClaimNo.ToString() + "-" + oTransactionMaster.SubClaimNo; }
                        else
                        { oTransactionMaster.ParentClaimNo = oTransactionMaster.ClaimNo.ToString(); }

                        //New Sub-Claim No
                        oTransactionMaster.SubClaimNo = GetSubClaimNo(oTransactionMaster.TransactionMasterID);
                        //oTransactionMaster.SubClaimNo = Convert.ToString(i + 1);





                        oTransactionMaster.ParentTransactionID = oTransactionMaster.TransactionID;


                        oTransactionMaster.TransactionID = 0;
                        oTransactionMaster.TransactionMasterID = MasterTransactionID;



                        DataTable dtTrnDetails = new DataTable();
                        _sqlQuery = "select * from BL_EOB_NextAction WITH (NOLOCK) where nNextActionPartyNumber = " + _NextAction + " and nBillingTransactionID = " + MasterTransactionID + " order by nNextActionPartyNumber,sNextActionCode ";
                        oDB.Retrive_Query(_sqlQuery, out dtTrnDetails);

                        if (dtTrnDetails != null && dtTrnDetails.Rows.Count > 0)
                        {
                            oTransactionMaster.InsuranceID = Convert.ToInt64(dtTrnDetails.Rows[0]["nNextActionPatientInsID"]);
                            oTransactionMaster.ContactID = Convert.ToInt64(dtTrnDetails.Rows[0]["nNextActionContactID"]);
                            oTransactionMaster.ResponsibilityNo = Convert.ToInt16(dtTrnDetails.Rows[0]["nNextActionPartyNumber"]);



                            if (oTransactionMaster.InsuranceID == 0)
                            { oTransactionMaster.ResponsibilityType = PayerMode.Self; }
                            else
                            { oTransactionMaster.ResponsibilityType = PayerMode.Insurance; }
                            oTransactionMaster.ClaimStatus = ClaimStatus.Open;
                            oTransactionMaster.Transaction_Status = TransactionStatus.Queue;


                            for (int j = oTransactionMaster.Lines.Count - 1; j >= 0; j--)
                            {
                                DataRow[] dr = dtTrnDetails.Select("nBillingTransactionDetailID = " + oTransactionMaster.Lines[j].TransactionMasterDetailID);
                                if (dr.Length == 0)
                                {
                                    oTransactionMaster.Lines.RemoveAt(j);
                                }
                                else
                                {
                                    //oTransactionMaster.Lines[j].TransactionMasterDetailID = oTransactionMaster.Lines[j].TransactionMasterDetailID;

                                    oTransactionMaster.Lines[j].ParentTransactionID = oTransactionMaster.ParentTransactionID;
                                    oTransactionMaster.Lines[j].ParentTransactionDetailID = oTransactionMaster.Lines[j].TransactionDetailID;
                                    oTransactionMaster.Lines[j].IsLineSplitted = false;
                                    oTransactionMaster.Lines[j].TransactionDetailID = 0;
                                }

                            }
                        }
                        #region " Add records to transaction tracking tables"

                        AddTransactionClaim(oTransactionMaster, _ClinicID);

                        #endregion " Add records to transaction tracking tables"
                    }
                }
                oDB.Disconnect();
                _result = true;

            }
            catch
            {
                _result = false;
            }
            return _result;
        }
        #endregion

        // 20100315 For Undo
        public bool UndoTransactionClaim(Int64 MasterTransactionID, Int64 TransactionID, Int64 nClinicID)
        {

            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            String _sqlQuery = "";

            try
            {

                oDB.Connect(false);
                _sqlQuery = "Update BL_Transaction_Claim_MST WITH (READPAST) set nStatus = " + TransactionStatus.Queue.GetHashCode() + " where nTransactionMasterID = " + MasterTransactionID + " and nTransactionID=" + TransactionID + " and  nClinicID=" + ClinicID + "";
                oDB.Execute_Query(_sqlQuery);
                oDB.Disconnect();
                _result = true;

            }
            catch
            {
                _result = false;
            }
            return _result;
        }

        public void SaveUserWiseCloseDay(string nCloseDayDate, CloseDayType eType, Int64 nClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oDB.Connect(false);
                oDBParameters.Clear();
                oDBParameters.Add("@nCloseDayID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oDBParameters.Add("@nCloseDayDate", gloDateMaster.gloDate.DateAsNumber(nCloseDayDate), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@nCloseDayType", (int)eType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDBParameters.Add("@dtCloseDateTime", DateTime.Now, ParameterDirection.Input, SqlDbType.DateTime);
                oDBParameters.Add("@nUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@sUserName", _UserName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@bIsActive", true, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Execute("BL_INUP_ChargePayment_CloseDays", oDBParameters);

            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
        }

        public static string GetUserWiseCloseDay(Int64 nUserID, CloseDayType eType)
        {
            
            #region " Retrive Database Connection String for appSettings "

            System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;


            if (appSettings["DataBaseConnectionString"] != null)
            {
                if (appSettings["DataBaseConnectionString"] != "")
                {
                    _databaseconnectionstring = Convert.ToString(appSettings["DataBaseConnectionString"]);
                }
                else
                {
                    _databaseconnectionstring = "";
                }
            }
            else
            {
                _databaseconnectionstring = "";
            }

            appSettings = null; 

            #endregion

            DataTable dtCloseDay = new DataTable();
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            String _sqlQuery = "";
            String _result = String.Empty;


            try
            {
                _sqlQuery = "SELECT nCloseDayDate FROM BL_ChargePayment_CloseDays WITH (NOLOCK) where nUserID = " + nUserID
                               + " AND CONVERT(VARCHAR(8),dtCloseDateTime,112) = CONVERT(VARCHAR(8),dbo.gloGetDate(),112)"
                               + " AND	nCloseDayType = " + eType.GetHashCode()
                               + " AND bIsActive = 1";

                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out dtCloseDay);
                oDB.Disconnect();

                if (dtCloseDay != null && dtCloseDay.Rows.Count > 0)
                {
                    _result = Convert.ToString(dtCloseDay.Rows[0][0]);
                }

                if (_result != null && Convert.ToString(_result).Trim() != "")
                {
                    try
                    {
                        _result = gloDateMaster.gloDate.DateAsDateString(Convert.ToInt64(_result)); //Convert.ToDateTime(Convert.ToString(_result).Trim()).ToString("MM/dd/yyyy"); 
                    }
                    catch //(Exception ex)
                    {
                        _result = "";
                    }
                }
                else
                { _result = ""; }

                if (_result.Trim() != "")
                {
                    if (ogloBilling.IsDayClosed(Convert.ToDateTime(_result.Trim())) == true)
                    { _result = ""; }
                }

            }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (ogloBilling != null) { ogloBilling.Dispose(); }
            }
            return _result;
        }

        public String GetSubClaimNo(Int64 TransactionMasterID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //String _sqlQuery = "Select isnull(MAX(Convert(Numeric(18,0),(case when ISNULL(nSubClaimNo,'')='' then '0' else nSubClaimNo end))),0)+1 from BL_Transaction_Claim_MST where nTransactionMasterId=" + TransactionMasterID + "";
            String _sqlQuery = "Select isnull(MIN(Convert(Numeric(18,0),(case when ISNULL(nSubClaimNo,'')='' then '0' else nSubClaimNo end))),0)-1 from BL_Transaction_Claim_MST WITH (NOLOCK) where nTransactionMasterId=" + TransactionMasterID + "";
            Object _val = null;
            String _result = String.Empty;
            try
            {
                oDB.Connect(false);

                _val = oDB.ExecuteScalar_Query(_sqlQuery);

                if (_val != null && Convert.ToString(_val).Trim() != "")
                {
                    _result = Convert.ToString(_val);
                }
                oDB.Disconnect();
            }
            catch
            {
                _result = String.Empty;
            }
            finally
            {
                oDB.Dispose();
            }
            return _result;
        }

        #region "Need to Delete -Not Used"
        public bool RebillTransactionClaim(Int64 MasterTransactionID, Int64 nClinicID)
        {

            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            String _sqlQuery = "";
            DataTable dtNextAction = new DataTable();
            try
            {




                oDB.Connect(false);
                _sqlQuery = "select nNextActionPartyNumber from BL_EOB_NextAction WITH (NOLOCK) where nBillingTransactionID = " + MasterTransactionID + " group by nNextActionPartyNumber ";
                oDB.Retrive_Query(_sqlQuery, out dtNextAction);

                if (dtNextAction != null)
                {
                    _sqlQuery = "Update BL_Transaction_Claim_MST WITH (READPAST) set nClaimStatus = " + ClaimStatus.Close.GetHashCode() + " where nTransactionMasterID = " + MasterTransactionID + "";
                    oDB.Execute_Query(_sqlQuery);

                    Int16 _NextAction = 0;
                    for (int i = 0; i < dtNextAction.Rows.Count; i++)
                    {

                        _NextAction = Convert.ToInt16(dtNextAction.Rows[i]["nNextActionPartyNumber"]);


                        Transaction oTransactionMaster = null;
                        oTransactionMaster = GetChargesDetails(MasterTransactionID, nClinicID);
                        oTransactionMaster.TransactionID = 0;
                        oTransactionMaster.TransactionMasterID = MasterTransactionID;
                        oTransactionMaster.SubClaimNo = Convert.ToString(i + 1);


                        DataTable dtTrnDetails = new DataTable();
                        _sqlQuery = "select * from BL_EOB_NextAction WITH (NOLOCK) where nNextActionPartyNumber = " + _NextAction + " and nBillingTransactionID = " + MasterTransactionID + " order by nNextActionPartyNumber,sNextActionCode ";
                        oDB.Retrive_Query(_sqlQuery, out dtTrnDetails);

                        if (dtTrnDetails != null && dtTrnDetails.Rows.Count > 0)
                        {
                            oTransactionMaster.InsuranceID = Convert.ToInt64(dtTrnDetails.Rows[0]["nNextActionPatientInsID"]);
                            oTransactionMaster.ContactID = Convert.ToInt64(dtTrnDetails.Rows[0]["nNextActionContactID"]);
                            oTransactionMaster.ResponsibilityNo = Convert.ToInt16(dtTrnDetails.Rows[0]["nNextActionPartyNumber"]);
                            if (oTransactionMaster.InsuranceID == 0)
                            { oTransactionMaster.ResponsibilityType = PayerMode.Self; }
                            else
                            { oTransactionMaster.ResponsibilityType = PayerMode.Insurance; }
                            oTransactionMaster.ClaimStatus = ClaimStatus.Open;
                            oTransactionMaster.Transaction_Status = TransactionStatus.Queue;


                            for (int j = oTransactionMaster.Lines.Count - 1; j >= 0; j--)
                            {
                                DataRow[] dr = dtTrnDetails.Select("nBillingTransactionDetailID = " + oTransactionMaster.Lines[j].TransactionDetailID);
                                if (dr.Length == 0)
                                {
                                    oTransactionMaster.Lines.RemoveAt(j);
                                }
                                else
                                {
                                    oTransactionMaster.Lines[j].TransactionMasterDetailID = oTransactionMaster.Lines[j].TransactionDetailID;
                                    oTransactionMaster.Lines[j].TransactionDetailID = 0;
                                }

                            }
                        }

                        _sqlQuery = "Update BL_EOB_NextAction WITH (READPAST) set sNextActionCode='R' , sNextActionDescription='REBILL' where nBillingTransactionID = " + MasterTransactionID + " and nClinicID='" + _ClinicID + "'";
                        oDB.Execute_Query(_sqlQuery);

                        #region " Add records to transaction tracking tables"

                        AddTransactionClaim(oTransactionMaster, _ClinicID);

                        #endregion " Add records to transaction tracking tables"
                    }
                }
                oDB.Disconnect();
                _result = true;

            }
            catch
            {
                _result = false;
            }
            return _result;
        }
        #endregion

        public Int64 SaveTransactionHistory(Int64 TransactionId, Int64 UserId, string UserName)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            object retVal = null;
            Int64 _trnHSTId = 0;

            try
            {
                //@nTrnHSTID numeric(18,0) output,@nTransactionID numeric(18,0),@nTrnHSTDate numeric(18,0),@nTrnHSTTime numeric(18,0),
                //@nTrnHSTUserID numeric(18,0),@nTrnHSTUserName varchar(255),@MachineID numeric(18,0)
                oDBParameters.Add("@nTrnHSTID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);//  numeric(18,0) output,
                oDBParameters.Add("@nTransactionID", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTDate", gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTTime", gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString()), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTUserID", UserId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar, 255);// varchar(255),
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0)

                oDB.Connect(false);
                //oDB.Execute("BL_IN_TRN_HISTORY", oDBParameters, out retVal);
                Console.WriteLine(gloDatabaseLayer.CUtility.getProcedureExeCode("BL_IN_CHARGE_HISTORY", oDBParameters));
                //Code changes Made by  Subashish in the DB Sp's to store the PAF related data
                oDB.Execute("BL_IN_CHARGE_HISTORY", oDBParameters, out retVal);

                oDB.Disconnect();
                if (retVal != null)
                { _trnHSTId = Convert.ToInt64(retVal); }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.Message); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }

            return _trnHSTId;
        }



        //gloPM5060 MaheshB For tracking Purpose.
        public void SaveTransactionTrackHistory(Int64 TransactionMasterID, Int64 TransactionId, Int64 UserId, string UserName)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            object retVal = null;
           // object retValtrack = null;
            Int64 _trnHSTId = 0;

            try
            {
                //@nTrnHSTID numeric(18,0) output,@nTransactionID numeric(18,0),@nTrnHSTDate numeric(18,0),@nTrnHSTTime numeric(18,0),
                //@nTrnHSTUserID numeric(18,0),@nTrnHSTUserName varchar(255),@MachineID numeric(18,0)
                oDBParameters.Add("@nTrnHSTID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);//  numeric(18,0) output,
                oDBParameters.Add("@TransactionMasterID", TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTransactionID", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTDate", gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTTime", gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString()), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTUserID", UserId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar, 255);// varchar(255),
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0)


                oDB.Connect(false);
                //oDB.Execute("BL_IN_TRN_HISTORY", oDBParameters, out retVal);
                //Console.WriteLine(gloDatabaseLayer.CUtility.getProcedureExeCode("BL_IN_CHARGE_TRACK_HISTORY", oDBParameters));
                //Code changes Made by  Subashish in the DB Sp's to store the PAF related data
                oDB.Execute("BL_IN_CHARGE_TRACK_HISTORY", oDBParameters, out retVal);

                oDB.Disconnect();
                if (retVal != null)
                { _trnHSTId = Convert.ToInt64(retVal); }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { dbEx.ERROR_Log(dbEx.Message); }
            catch (Exception ex)
            { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false); }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }

            //return _trnHSTId;
        }

        public void SaveTransactionTrackHistory(Int64 TransactionMasterID, Int64 TransactionId, Int64 UserId, string UserName, SqlConnection sqlConn, SqlTransaction sqlTran, bool UseExtConnection, out bool ErrorFlag)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            object retVal = null;
         //   object retValtrack = null;
            Int64 _trnHSTId = 0;

            try
            {
                ErrorFlag = false;

                //@nTrnHSTID numeric(18,0) output,@nTransactionID numeric(18,0),@nTrnHSTDate numeric(18,0),@nTrnHSTTime numeric(18,0),
                //@nTrnHSTUserID numeric(18,0),@nTrnHSTUserName varchar(255),@MachineID numeric(18,0)
                oDBParameters.Add("@nTrnHSTID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);//  numeric(18,0) output,
                oDBParameters.Add("@TransactionMasterID", TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTransactionID", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTDate", gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString()), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTTime", gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString()), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTUserID", UserId, ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0),
                oDBParameters.Add("@nTrnHSTUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar, 255);// varchar(255),
                oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);// numeric(18,0)


                if (UseExtConnection == false)
                {
                    oDB.Connect(false);
                    //oDB.Execute("BL_IN_TRN_HISTORY", oDBParameters, out retVal);
                    //Console.WriteLine(gloDatabaseLayer.CUtility.getProcedureExeCode("BL_IN_CHARGE_TRACK_HISTORY", oDBParameters));
                    // Code changes Made by  Subashish in the DB Sp's to store the PAF related data
                    oDB.Execute("BL_IN_CHARGE_TRACK_HISTORY", oDBParameters, out retVal);
                    oDB.Disconnect();
                }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = sqlConn;
                        _sqlCommand.Transaction = sqlTran;
                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                        _sqlCommand.CommandText = "BL_IN_CHARGE_TRACK_HISTORY";
                        _sqlCommand.ExecuteNonQuery();

                        if ((_sqlCommand.Parameters["@nTrnHSTID"] != null) && (_sqlCommand.Parameters["@nTrnHSTID"].Value != null) && (_sqlCommand.Parameters["@nTrnHSTID"].Value != DBNull.Value))
                        { retVal = Convert.ToInt64(_sqlCommand.Parameters["@nTrnHSTID"].Value); }
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }


                if (retVal != null)
                { _trnHSTId = Convert.ToInt64(retVal); }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                ErrorFlag = true;
                throw dbEx;
            }
            catch (Exception ex)
            {
                ErrorFlag = true;
                throw ex;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oDBParameters != null) { oDBParameters.Dispose(); }
            }

            //return _trnHSTId;
        }


        #region  " Commented Code "

        //public bool DeleteTransaction(Int64 TransactionId, Int64 ClinicId)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string _sqlQuery = "";
        //    Object _Value = null;
        //    bool _IsDeleted = false;

        //    try
        //    {
        //        //**Note - Need to Implement SQL Transaction 
        //        //**Work not completed yet

        //        if (TransactionId > 0 && ClinicId > 0)
        //        {
        //            oDB.Connect(false);

        //            //1.Check if any Payment is made against the Transaction
        //            _sqlQuery = " SELECT ISNULL(COUNT(nBillingTransactionID),0) FROM BL_TRANSACTION_PAYMENT_DTL " +
        //            " WHERE nBillingTransactionID = " + TransactionId + " AND nClinicID  = " + ClinicId + "";
        //            _Value = oDB.ExecuteScalar_Query(_sqlQuery);

        //            if (Convert.ToInt64(_Value) > 0)
        //            {
        //                if (MessageBox.Show("Payment made against Transaction will be cleared.Do want to continue ?", _messageBoxCaption, MessageBoxButtons.OKCancel, MessageBoxIcon.Warning) == DialogResult.Cancel)
        //                {
        //                    return _IsDeleted;
        //                }
        //            }

        //            //2.Delete the Master entry
        //            _sqlQuery = "";
        //            _sqlQuery = " delete from BL_Transaction_MST where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //3.Delete the Transaction Lines 
        //            _sqlQuery = "";
        //            _sqlQuery = " delete from BL_Transaction_Lines where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //4.Delete the Transaction Lines Notes if any
        //            _sqlQuery = "";
        //            _sqlQuery = " delete from BL_Transaction_Lines_Notes where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //5.Delete the Insurance associated with the Lines
        //            _sqlQuery = "";
        //            _sqlQuery = " delete from BL_Transaction_MST_Ins where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //6.Delete the Transaction entry from Status Table
        //            _sqlQuery = "";
        //            _sqlQuery = " delete from BL_Transaction_Status where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //Retrive the Master PaymentID for the Transaction
        //            string _PaymentTransactionIds = "";
        //            DataTable dtPaymentTransactionIds = null;
        //            _sqlQuery = "";
        //            _sqlQuery = " SELECT DISTINCT ISNULL((nPaymentTransactionID),0) AS nPaymentTransactionID " +
        //                        " FROM BL_Transaction_Payment_DTL where nBillingTransactionID = " + TransactionId + " AND nClinicId = "+ClinicId+" ";
        //            oDB.Retrive_Query(_sqlQuery, out dtPaymentTransactionIds);

        //            //Payment Notes
        //            _sqlQuery = "";
        //            _sqlQuery = " delete from BL_Transaction_Payment_Notes where nPaymentTransactionDetailID IN " +
        //                       " (select DISTINCT nPaymentTransactionDetailID from BL_Transaction_Payment_DTL where nBillingTransactionID = " + TransactionId + ") ";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //7.Delete the Payment Details entry for the Transaction if any
        //            _sqlQuery = "";
        //            _sqlQuery = "delete from BL_Transaction_Payment_DTL where nBillingTransactionID = " + TransactionId + " AND nClinicID = " + ClinicId + "";
        //            _Value = oDB.Execute_Query(_sqlQuery);

        //            //_sqlQuery = "";
        //            //_sqlQuery = "delete from BL_Transaction_Payment_CoPay_DTL where nTransactionID = "+TransactionId+" AND nClinicID = "+ClinicId+" ";
        //            //_Value = oDB.Execute_Query(_sqlQuery);


        //            //**Check if the Master PaymentID is present in the BL_Transaction_Payment_DTL Table
        //            //for any other Transaction ( i.e other than the TransactionId to delete )
        //            //if present then dont delete master entry
        //            //else delete master payment entry

        //            if (dtPaymentTransactionIds != null)
        //            {
        //                if (dtPaymentTransactionIds.Rows.Count > 0)
        //                {
        //                    for (int i = 0; i < dtPaymentTransactionIds.Rows.Count; i++)
        //                    {
        //                        _sqlQuery = "";
        //                        _sqlQuery = " SELECT ISNULL(COUNT(nPaymentTransactionID),0) AS nPaymentTransactionID FROM " +
        //                                    " BL_Transaction_Payment_DTL where nBillingTransactionID <> " + TransactionId + " " +
        //                                    " AND nPaymentTransactionID = " + Convert.ToInt64(dtPaymentTransactionIds.Rows[i]["nPaymentTransactionID"]) + " ";
        //                        _Value = oDB.ExecuteScalar_Query(_sqlQuery);
        //                        if (Convert.ToInt64(_Value) == 0)
        //                        {
        //                            _sqlQuery = "";
        //                            _sqlQuery = "DELETE FROM BL_Transaction_Payment_MST WHERE nPaymentTransactionID = " + Convert.ToInt64(dtPaymentTransactionIds.Rows[i]["nPaymentTransactionID"]) + " ";
        //                            int retVal = oDB.Execute_Query(_sqlQuery);
        //                        }
        //                    }
        //                }
        //            }

        //            oDB.Disconnect();
        //            _IsDeleted = true;

        //        }
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    {
        //        dbEx.ERROR_Log(dbEx.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
        //    }
        //    finally
        //    {
        //        if (oDB != null) { oDB.Dispose(); }
        //        if (_Value != null) { _Value = null; }
        //    }

        //    return _IsDeleted;
        //}

        #endregion  " Commented Code "

        public bool DeleteTransaction(Int64 TransactionId, Int64 ClinicId)
        {
            System.Data.SqlClient.SqlConnection _sqlConnection = null;
            System.Data.SqlClient.SqlTransaction _sqlTransaction = null;
            System.Data.SqlClient.SqlCommand _sqlCommand = new System.Data.SqlClient.SqlCommand();
            string _sqlQuery = "";
            bool _isRecordDeleted = false;

            try
            {
                if (TransactionId > 0)
                {
                    _sqlConnection = new System.Data.SqlClient.SqlConnection(_databaseconnectionstring);
                    _sqlConnection.Open();
                    _sqlTransaction = _sqlConnection.BeginTransaction();

                    #region " 1. Delete the Master entry "

                    _sqlQuery = "";
                    _sqlQuery = " delete from BL_Transaction_MST where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 1. Delete the Master entry "

                    #region " 2. Delete the Transaction Lines "

                    _sqlQuery = "";
                    _sqlQuery = " delete from BL_Transaction_Lines where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 2. Delete the Transaction Lines "

                    #region " 4. Delete the Transaction Lines Notes if any "

                    _sqlQuery = "";
                    _sqlQuery = " delete from BL_Transaction_Lines_Notes where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 4. Delete the Transaction Lines Notes if any "

                    #region " 5. Delete the Insurance associated with the Lines "

                    _sqlQuery = "";
                    _sqlQuery = " delete from BL_Transaction_MST_Ins where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 5. Delete the Insurance associated with the Lines "

                    #region " 6. Delete the Transaction entry from Status Table "

                    _sqlQuery = "";
                    _sqlQuery = " delete from BL_Transaction_Status where nTransactionID = " + TransactionId + " AND nClinicId = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 6. Delete the Transaction entry from Status Table "

                    #region " 7. Delete the Transaction Diagnosis "

                    _sqlQuery = "";
                    _sqlQuery = " DELETE FROM BL_Transaction_Diagnosis WHERE nTransactionID = " + TransactionId + " AND nClinicID = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 7. Delete the Transaction Lines "

                    #region " 8. Delete Insurance Plans "

                    _sqlQuery = "";
                    _sqlQuery = " DELETE FROM BL_Transaction_InsPlan WHERE nTransactionID = " + TransactionId + " AND nClinicID = " + ClinicId + "";
                    _sqlCommand = new System.Data.SqlClient.SqlCommand();
                    _sqlCommand.Connection = _sqlConnection;
                    _sqlCommand.Transaction = _sqlTransaction;
                    _sqlCommand.CommandType = CommandType.Text;
                    _sqlCommand.CommandText = _sqlQuery;
                    _sqlCommand.ExecuteNonQuery();
                    if (_sqlCommand != null) { _sqlCommand.Dispose(); _sqlCommand = null; }

                    #endregion " 8. Delete Insurance Plans "

                    _sqlTransaction.Commit();
                    _isRecordDeleted = true;

                }
            }
            catch (System.Data.SqlClient.SqlException sqlEx)
            { _sqlTransaction.Rollback(); MessageBox.Show("Error deleting records", _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information); gloAuditTrail.gloAuditTrail.ExceptionLog(sqlEx.Message, true); }
            catch (Exception ex)
            { _sqlTransaction.Rollback(); gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }
            finally
            {
                if (_sqlCommand != null) 
                {
                    // _sqlCommand.Parameters.Clear(); // Commented because Parameters not used in command
                    _sqlCommand.Dispose();
                    _sqlCommand = null;
                }
                if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
                if (_sqlConnection != null) { _sqlConnection.Close(); _sqlConnection.Dispose(); }
            }
            return _isRecordDeleted;
        }

        public bool DeleteTransactionPayment(Int64 TransactionId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Boolean _result = false;
            try
            {

                oDB.Connect(false);
                oParameters.Add("@TransactionID", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@ClinicID", ClinicId, ParameterDirection.Input, SqlDbType.BigInt);
                int Val = oDB.Execute("BL_DELETE_Transaction_Payment", oParameters);
                _result = true;
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;
        }

        public bool AddEMRTransaction(Int64 BillingTransactionID, Int64 EMRExamID, Int64 EMRVisitID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
             gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            bool _result = false;

            try
            {
                oDB.Connect(false);
                oParameters.Add("@EMRExamID", EMRExamID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nEMRVisitID", EMRVisitID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@EMRTreatmentType", ExternalChargesType.gloEMRTreatment.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                
                int Val = oDB.Execute("gsp_VoidExternalEMRTreatmentCharges", oParameters);
                _result = true;
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;
        }

        #region " Commented Code "

        //public Int64 AddModifyBatch(Int64 Batchid, string Batchname, Int64 Batchdate, Int64 Batchno, BatchType Batchtype, int Batchsend, Int64 Claimcounter, Int64 Prefix, Int64 Clinicid)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
        //    Object retVal = null;
        //    Int64 _BatchId = 0;

        //    try
        //    {
        //        //Passs Batchid = 0 to Add new Record
        //        oDB.Connect(false);

        //        oParameters.Add("@nBatchID",Batchid,ParameterDirection.InputOutput,SqlDbType.BigInt);
        //        oParameters.Add("@sBatchName",Batchname,ParameterDirection.Input,SqlDbType.VarChar);
        //        oParameters.Add("@nBatchDate", Batchdate, ParameterDirection.Input, SqlDbType.BigInt);
        //        oParameters.Add("@nBatchNo", Batchno, ParameterDirection.Input, SqlDbType.BigInt);
        //        oParameters.Add("@nBatchType", Batchtype.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
        //        oParameters.Add("@nBatchSend", Batchsend, ParameterDirection.Input, SqlDbType.Int);
        //        oParameters.Add("@nClaimCounter", Claimcounter, ParameterDirection.Input, SqlDbType.BigInt);
        //        oParameters.Add("@PrefixID", Prefix, ParameterDirection.Input, SqlDbType.BigInt);
        //        oParameters.Add("@nClinicID", Clinicid, ParameterDirection.Input, SqlDbType.BigInt);

        //        int Val = oDB.Execute("BL_INUP_TransactionBatch", oParameters, out retVal);
        //        _BatchId = Convert.ToInt64(retVal);
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    {
        //        dbEx.ERROR_Log(dbEx.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
        //    }
        //    finally
        //    {
        //        if (oDB != null) { oDB.Dispose(); }
        //        if (oParameters != null) { oParameters.Dispose(); }
        //    }
        //    return _BatchId;
        //}

        #endregion " Commented Code "

        public Int64 AddModifyBatch(Int64 Batchid, string Batchname, Int64 Batchdate, Int64 Batchno, BatchType Batchtype, int Batchsend, Int64 Claimcounter, Int64 Prefix, Int64 ClearingHouseId, string ClearingHouseCode, string ClearingHouseName, Int64 UserId, string UserName, Int64 Clinicid, Int16 BillingType, Int64 BillingMethodID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object retVal = null;
            Int64 _BatchId = 0;

            try
            {
                //Passs Batchid = 0 to Add new Record
                oDB.Connect(false);

                oParameters.Add("@nBatchID", Batchid, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oParameters.Add("@sBatchName", Batchname, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nBatchDate", Batchdate, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nBatchNo", Batchno, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nBatchType", Batchtype.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@nBatchSend", Batchsend, ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@nClaimCounter", Claimcounter, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@PrefixID", Prefix, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClinicID", Clinicid, ParameterDirection.Input, SqlDbType.BigInt);

                oParameters.Add("@nClearingHouseID", ClearingHouseId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sClearingHouseCode", ClearingHouseCode, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sClearingHouseName", ClearingHouseName, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nUserID", UserId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nClaimType", BillingType, ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@nBillingMethodID", BillingMethodID, ParameterDirection.Input, SqlDbType.BigInt);

                int Val = oDB.Execute("BL_INUP_TransactionBatch", oParameters, out retVal);
                _BatchId = Convert.ToInt64(retVal);

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _BatchId;
        }

        //MaheshB
        public Int64 AddModifyBatchSelfBatch(Int64 Batchid, string Batchname, Int64 Batchdate, Int64 Batchno, BatchType Batchtype, int Batchsend, Int64 Claimcounter, Int64 Prefix, Int64 ClearingHouseId, string ClearingHouseCode, string ClearingHouseName, Int64 UserId, string UserName, Int64 Clinicid)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object retVal = null;
            Int64 _BatchId = 0;

            try
            {
                //Passs Batchid = 0 to Add new Record
                oDB.Connect(false);

                oParameters.Add("@nBatchID", Batchid, ParameterDirection.InputOutput, SqlDbType.BigInt);
                oParameters.Add("@sBatchName", Batchname, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nBatchDate", Batchdate, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nBatchNo", Batchno, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nBatchType", Batchtype.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@nBatchSend", Batchsend, ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@nClaimCounter", Claimcounter, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@PrefixID", Prefix, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClinicID", Clinicid, ParameterDirection.Input, SqlDbType.BigInt);

                oParameters.Add("@nClearingHouseID", ClearingHouseId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sClearingHouseCode", ClearingHouseCode, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sClearingHouseName", ClearingHouseName, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@nUserID", UserId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sUserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);

                int Val = oDB.Execute("BL_INUP_SelfBatch", oParameters, out retVal);
                _BatchId = Convert.ToInt64(retVal);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _BatchId;
        }


        public bool AddNextParty(Int64 ClaimNO, Int64 TransactionID, Int64 TransactionDetailID, Int64 InsuranceID, String InsuranceName, int NextActionPartyNumber, PayerMode NextPartyType, Int64 ContactID, Decimal Amount, Int64 ClinicID, string NextActionCode, Int64 nCloseDate)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object _nextActRetVal = null;
            bool _result = false;

            try
            {
                object _res = null;
                Int64 nID = 0;
                string _strquery = " Select nID from BL_EOB_NextAction WITH (NOLOCK) where nClaimNo=" + ClaimNO.ToString() + " and nBillingTransactionID = " + TransactionID.ToString() + " and nBillingTransactionDetailID = " + TransactionDetailID.ToString() + " and nClinicID=" + ClinicID.ToString() + " and nEOBPaymentID=0 and nEOBID=0 and nEOBPaymentDetailID=0";

                oDB.Connect(false);

                _res = oDB.ExecuteScalar_Query(_strquery);
                if (_res != null && _res.ToString() != "")
                {
                    if (Convert.ToInt64(_res) > 0)
                    {
                        nID = Convert.ToInt64(_res);
                    }
                }


                oParameters.Clear();

                oParameters.Add("@nID", nID, ParameterDirection.InputOutput, SqlDbType.BigInt);//numeric(18, 0) OUTPUT,
                oParameters.Add("@nClaimNo", ClaimNO, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentDetailID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nBillingTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),	
                oParameters.Add("@nBillingTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                if (NextPartyType == PayerMode.Insurance)
                {
                    oParameters.Add("@nNextActionPatientInsID", InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                else
                {
                    oParameters.Add("@nNextActionPatientInsID", 0, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                oParameters.Add("@nNextActionPatientInsName", InsuranceName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nNextActionPartyNumber", NextActionPartyNumber, ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextPartyType", NextPartyType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextActionContactID", ContactID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sNextActionCode", NextActionCode, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(5),
                oParameters.Add("@sNextActionDescription", "Transacted", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@dNextActionAmount", Amount, ParameterDirection.Input, SqlDbType.Decimal);//	decimal(18, 2),

                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0) 

                oParameters.Add("@nCloseDate", nCloseDate, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sUserName", _UserName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),

                oDB.Execute("BL_INUP_EOBNextActionParty", oParameters, out _nextActRetVal);
                oDB.Disconnect();
                if (_nextActRetVal != null)
                {
                    _result = true;
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;
        }

        public bool AddNextParty(Int64 ClaimNO, String SubClaimNo, Int64 TransactionID, Int64 TransactionDetailID, Int64 TrackingTrnID, Int64 TrackingTrnDetailID, Int64 InsuranceID, String InsuranceName, int NextActionPartyNumber, PayerMode NextPartyType, Int64 ContactID, Decimal Amount, Int64 ClinicID, string NextActionCode, Int64 nCloseDate)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object _nextActRetVal = null;
            bool _result = false;

            try
            {
                object _res = null;
                Int64 nID = 0;
                string _strquery = " Select nID from BL_EOB_NextAction WITH (NOLOCK) where nClaimNo=" + ClaimNO.ToString() + " and nBillingTransactionID = " + TransactionID.ToString() + " and nBillingTransactionDetailID = " + TransactionDetailID.ToString() + " and nClinicID=" + ClinicID.ToString() + " and nEOBPaymentID=0 and nEOBID=0 and nEOBPaymentDetailID=0";

                oDB.Connect(false);

                _res = oDB.ExecuteScalar_Query(_strquery);
                if (_res != null && _res.ToString() != "")
                {
                    if (Convert.ToInt64(_res) > 0)
                    {
                        nID = Convert.ToInt64(_res);
                    }
                }


                oParameters.Clear();

                oParameters.Add("@nID", nID, ParameterDirection.InputOutput, SqlDbType.BigInt);//numeric(18, 0) OUTPUT,
                oParameters.Add("@nClaimNo", ClaimNO, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentDetailID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nBillingTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),	
                oParameters.Add("@nBillingTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                if (NextPartyType == PayerMode.Insurance)
                {
                    oParameters.Add("@nNextActionPatientInsID", InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                else
                {
                    oParameters.Add("@nNextActionPatientInsID", 0, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                oParameters.Add("@nNextActionPatientInsName", InsuranceName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nNextActionPartyNumber", NextActionPartyNumber, ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextPartyType", NextPartyType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextActionContactID", ContactID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sNextActionCode", NextActionCode, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(5),
                oParameters.Add("@sNextActionDescription", "Transacted", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@dNextActionAmount", Amount, ParameterDirection.Input, SqlDbType.Decimal);//	decimal(18, 2),

                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0) 

                oParameters.Add("@nCloseDate", nCloseDate, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sUserName", _UserName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),

                oParameters.Add("@sSubClaimNo", SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nTrackMstTrnID", TrackingTrnID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTrackMstTrnDetailID", TrackingTrnDetailID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_INUP_EOBNextActionParty", oParameters, out _nextActRetVal);
                oDB.Disconnect();
                if (_nextActRetVal != null)
                {
                    _result = true;
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;
        }

        //Added By Pramod Nair 20091223 For Updating only the Reponsibiility No,Ins.ID and ContactID  
        public bool UpdateNextParty(Int64 ClaimNO, Int64 TransactionID, Int64 TransactionDetailID, Int64 InsuranceID, String InsuranceName, int NextActionPartyNumber, PayerMode NextPartyType, Int64 ContactID, Decimal Amount, Int64 ClinicID, string NextActionCode, Int64 nCloseDate)
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object _nextActRetVal = null;
            bool _result = false;

            try
            {
                object _res = null;
                Int64 nID = 0;
                string _strquery = " Select nID from BL_EOB_NextAction WITH (NOLOCK) where nClaimNo=" + ClaimNO.ToString() + " and nBillingTransactionID = " + TransactionID.ToString() + " and nBillingTransactionDetailID = " + TransactionDetailID.ToString() + " and nClinicID=" + ClinicID.ToString() + " and nEOBPaymentID=0 and nEOBID=0 and nEOBPaymentDetailID=0";

                oDB.Connect(false);

                _res = oDB.ExecuteScalar_Query(_strquery);
                if (_res != null && _res.ToString() != "")
                {
                    if (Convert.ToInt64(_res) > 0)
                    {
                        nID = Convert.ToInt64(_res);
                    }
                }


                oParameters.Clear();

                oParameters.Add("@nID", nID, ParameterDirection.InputOutput, SqlDbType.BigInt);//numeric(18, 0) OUTPUT,
                oParameters.Add("@nClaimNo", ClaimNO, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentDetailID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nBillingTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),	
                oParameters.Add("@nBillingTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                if (NextPartyType == PayerMode.Insurance)
                {
                    oParameters.Add("@nNextActionPatientInsID", InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                else
                {
                    oParameters.Add("@nNextActionPatientInsID", 0, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                oParameters.Add("@nNextActionPatientInsName", InsuranceName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nNextActionPartyNumber", NextActionPartyNumber, ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextPartyType", NextPartyType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextActionContactID", ContactID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sNextActionCode", NextActionCode, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(5),
                oParameters.Add("@sNextActionDescription", "", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@dNextActionAmount", Amount, ParameterDirection.Input, SqlDbType.Decimal);//	decimal(18, 2),

                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0) 

                oParameters.Add("@nCloseDate", nCloseDate, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sUserName", _UserName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),

                oDB.Execute("BL_UP_EOBParty", oParameters, out _nextActRetVal);
                oDB.Disconnect();
                if (_nextActRetVal != null)
                {
                    _result = true;
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;

        }


        //Added By Pramod Nair 20091223 For Updating only the Reponsibiility No,Ins.ID and ContactID  
        public bool UpdateNextParty(Int64 ClaimNO, String SubClaimNo, Int64 TransactionID, Int64 TransactionDetailID, Int64 TrackingTrnID, Int64 TrackingTrnDetailID, Int64 InsuranceID, String InsuranceName, int NextActionPartyNumber, PayerMode NextPartyType, Int64 ContactID, Decimal Amount, Int64 ClinicID, string NextActionCode, string NextActionDescription, Int64 nCloseDate)
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object _nextActRetVal = null;
            bool _result = false;

            try
            {
                object _res = null;
                Int64 nID = 0;
                string _strquery = " Select nID from BL_EOB_NextAction WITH (NOLOCK) where nClaimNo=" + ClaimNO.ToString() + " and nBillingTransactionID = " + TransactionID.ToString() + " and nBillingTransactionDetailID = " + TransactionDetailID.ToString() + " and nClinicID=" + ClinicID.ToString() + " and nEOBPaymentID=0 and nEOBID=0 and nEOBPaymentDetailID=0";

                oDB.Connect(false);

                _res = oDB.ExecuteScalar_Query(_strquery);
                if (_res != null && _res.ToString() != "")
                {
                    if (Convert.ToInt64(_res) > 0)
                    {
                        nID = Convert.ToInt64(_res);
                    }
                }


                oParameters.Clear();

                oParameters.Add("@nID", nID, ParameterDirection.InputOutput, SqlDbType.BigInt);//numeric(18, 0) OUTPUT,
                oParameters.Add("@nClaimNo", ClaimNO, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nEOBPaymentDetailID", 0, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nBillingTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),	
                oParameters.Add("@nBillingTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                if (NextPartyType == PayerMode.Insurance)
                {
                    oParameters.Add("@nNextActionPatientInsID", InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                else
                {
                    oParameters.Add("@nNextActionPatientInsID", 0, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                oParameters.Add("@nNextActionPatientInsName", InsuranceName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nNextActionPartyNumber", NextActionPartyNumber, ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextPartyType", NextPartyType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nNextActionContactID", ContactID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sNextActionCode", NextActionCode, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(5),
                //**********************************************************************************************************************
                //Added Aad Commented By Debasish Das on 6th Sep 2010(5061)
                //**********************************************************************************************************************
                //if (nID > 0)
                //{

                //    oParameters.Add("@sNextActionDescription", NextActionDescription, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                //}
                //else
                //{
                //    oParameters.Add("@sNextActionDescription", "Transacted", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                //}

                if (NextActionCode == "B")
                {
                    oParameters.Add("@sNextActionDescription", "BILL", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                }
                else if (NextActionCode == "R")
                {
                    oParameters.Add("@sNextActionDescription", "REBILL", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                }
                else if (NextActionCode == "P")
                {
                    oParameters.Add("@sNextActionDescription", "PENDING, NO BILL", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                }
                else if (NextActionCode == "N")
                {
                    oParameters.Add("@sNextActionDescription", "NONE", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                }
                else
                {
                    oParameters.Add("@sNextActionDescription", "Transacted", ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                }
                //********************************************************************************************************************

                oParameters.Add("@dNextActionAmount", Amount, ParameterDirection.Input, SqlDbType.Decimal);//	decimal(18, 2),

                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0) 

                oParameters.Add("@nCloseDate", nCloseDate, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sUserName", _UserName, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),

                oParameters.Add("@sSubClaimNo", SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nTrackMstTrnID", TrackingTrnID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTrackMstTrnDetailID", TrackingTrnDetailID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_UP_EOBParty", oParameters, out _nextActRetVal);
                oDB.Disconnect();
                if (_nextActRetVal != null)
                {
                    _result = true;
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;

        }

        //public bool InsertNextActionHistory(String SubClaimNo, Int64 TransactionID, Int64 TransactionDetailID, Int64 TrackingTrnID, Int64 TrackingTrnDetailID, Int64 InsuranceID, int NextActionPartyNumber, PayerMode NextPartyType, Int64 ContactID, Int64 ClinicID, string NextActionCode, Int64 nCloseDate)
        public bool InsertNextActionHistory(Int64 ClaimNO, String SubClaimNo, Int64 TransactionID, Int64 TransactionDetailID, Int64 TrackingTrnID, Int64 TrackingTrnDetailID, Int64 InsuranceID, String InsuranceName, int NextActionPartyNumber, PayerMode NextPartyType, Int64 ContactID, Decimal Amount, Int64 ClinicID, string NextActionCode, string NextActionDescription, Int64 nCloseDate)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
            Object _nextActRetVal = null;
            bool _result = false;

            try
            {
                oDB.Connect(false);
                oParameters.Clear();

                oParameters.Add("@nBillingTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),	
                oParameters.Add("@nBillingTransactionDetailID", TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                if (NextPartyType == PayerMode.Insurance)
                {
                    oParameters.Add("@nNextActionPatientInsID", InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }
                else
                {
                    oParameters.Add("@nNextActionPatientInsID", 0, ParameterDirection.Input, SqlDbType.BigInt);//numeric(18, 0),
                }

                oParameters.Add("@nNextActionPartyNumber", NextActionPartyNumber, ParameterDirection.Input, SqlDbType.Int);//	int,

                oParameters.Add("@nNextActionContactID", ContactID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@sNextActionCode", NextActionCode, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(5),

                oParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nNextPartyType", NextPartyType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);//	int,
                oParameters.Add("@nCloseDate", nCloseDate, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),
                oParameters.Add("@nUserID", _UserId, ParameterDirection.Input, SqlDbType.BigInt);//	numeric(18, 0),

                oParameters.Add("@sSubClaimNo", SubClaimNo, ParameterDirection.Input, SqlDbType.VarChar);//	varchar(255),
                oParameters.Add("@nTrackMstTrnID", TrackingTrnID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTrackMstTrnDetailID", TrackingTrnDetailID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("BL_EOB_NextAction_Add_History", oParameters, out _nextActRetVal);

                oDB.Disconnect();
                if (_nextActRetVal != null)
                {
                    _result = true;
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                _result = false;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }
            return _result;

        }


        
        public bool IsSelfInsurance(Int64 _TransID)
        {
            gloDatabaseLayer.DBLayer ODB = null;
            DataTable dt;
            bool _result = false;
            try
            {
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                ODB.Connect(false);
                dt = new DataTable();
                //string _strquery = "Select * from BL_Transaction_InsPlan where nTransactionID='" + _TransID + "' order by nResponsibilityNo";
                string _strquery = " Select top 1 nResponsibilityType from BL_Transaction_InsPlan WITH (NOLOCK) where nTRansactionID=" + _TransID + " " +
                                   " order by nResponsibilityNo ";
                ODB.Retrive_Query(_strquery, out dt);
                ODB.Disconnect();
                if (dt != null && dt.Rows.Count == 1)
                {
                    if (Convert.ToString(dt.Rows[0]["nResponsibilityType"]) == PayerMode.Self.GetHashCode().ToString()) //1-Self ,2-Insurance
                    {
                        _result = true;
                    }
                    else
                    {
                        _result = false;
                    }
                }
                else if (dt.Rows.Count > 1)
                {
                    _result = true;
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
            }
            finally
            {
                if (ODB != null)
                {
                    ODB.Disconnect();
                    ODB.Dispose();
                }
            }
            return _result;
        }

        ////MaheshB 20091113
        //public bool CreateSelfBatch()
        //{

        //}

        public Int32 GetClaimInsuranceCount(Int64 nMasterTransactionID)
        {
            Int32 _Result = 0;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            try
            {
                string _Query = "SELECT COUNT(*) FROM BL_Transaction_InsPlan WITH (NOLOCK) WHERE nTransactionID = " + nMasterTransactionID + " AND nResponsibilityType = 2";
                Object oResult;
                oDB.Connect(false);
                oResult = oDB.ExecuteScalar_Query(_Query);
                oDB.Disconnect();
                if (oResult != null && Convert.ToString(oResult) != "")
                    _Result = Convert.ToInt32(oResult);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null)
                { oDB.Dispose(); oDB = null; }
            }
            return _Result;

        }

        public DataTable GetBatch(Int64 Batchid)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtBatch = null;
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                //_sqlQuery = "select nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID " +
                //" from BL_Transaction_Batch WITH (NOLOCK) where nBatchID = " + Batchid + " AND nBatchType = " + BatchType.Batch.GetHashCode() + " AND nClinicID = " + this._ClinicID + " ";
                _sqlQuery = "select nBatchID,ISNULL(sBatchName,'') AS sBatchName,nBatchDate,nBatchNo,nBatchType,nBatchSend,nClaimCounter,nClinicID ,isnull(nBillingMethodID,0) as BillingMethodID,isnull(nClaimType,1) as nClaimType" +
              " from BL_Transaction_Batch WITH (NOLOCK) where nBatchID = " + Batchid + " AND nBatchType = " + BatchType.Batch.GetHashCode() + " AND nClinicID = " + this._ClinicID + " ";
                oDB.Retrive_Query(_sqlQuery, out dtBatch);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return dtBatch;
        }

        public DataTable Get_RemitanceBalance(StringBuilder  sTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataTable _dtRemitance = null;
            try
            {
                if (oDB != null)
                {
                    string strTransactionID = Convert.ToString(sTransactionID).TrimEnd(',');
                    oDB.Connect(false);
                    oDBParameters.Add("@TransactionIDs", strTransactionID, ParameterDirection.Input, SqlDbType.NVarChar);
                    ////oDBParameters.Add("@ClinicID", this._ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                    oDB.Retrive("BL_Check_Claim_Balancing", oDBParameters, out _dtRemitance);
                    oDB.Disconnect();
                }
            }
           
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);  
            }
            finally
            {              
                if (oDBParameters != null) { oDBParameters.Dispose(); oDBParameters = null; }
                if (oDB != null) { oDB.Dispose(); oDB = null; }              
            }

            return _dtRemitance;
        }


        public Transaction GetTransactionDetails(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;
            try
            {
                oDB.Connect(false);
                // For BL_Transaction_MST Table.
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST", oDBParameters, out dtTrans);

                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        //nTransactionID, nMasterAppointmentID, nAppointmentID, nVisitID, nOnsiteDate, nInjuryDate, 
                        //nUnableToWorkFromDate, nUnableToWorkTillDate, nTransactionDate, sCaseNoPrefix, nClaimNo, 
                        //nPatientID, nTransactionProviderID, sMaritalStatus, sFacilityCode, sFacilityDescription, 
                        //nTransactionType, nClinicID, nTransactionStatusID, sState, nHopitalizationDateFrom, nHopitalizationDateTo,
                        //bOutSideLab, dOutSideLabCharges, bAutoClaim, nAccidentDate, bWorkersComp
                        oTransaction.TransactionMasterID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionMasterID"]);
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);

                        //Vinayak-Sagar for batch no, but we have to implement it in line class, - Remark - Pending
                        oTransaction.BatchNoPrefix = "Batch";
                        oTransaction.BatchNo = 0;

                        //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  getting the PAF values 
                        oTransaction.PAccountID = Convert.ToInt64(dtTrans.Rows[0]["nPAccountID"]);
                        oTransaction.GuarantorID = Convert.ToInt64(dtTrans.Rows[0]["nGuarantorID"]);
                        oTransaction.AccountPatientID = Convert.ToInt64(dtTrans.Rows[0]["nAccountPatientID"]);
                        //End

                        #region "Retrive Batch No"

                        DataTable dtBatchNo = new DataTable();
                        string _strSQLBatchNo = "";
                        _strSQLBatchNo = "SELECT  TOP 1   BL_Batch_MST.sBatchNoPrefix, BL_Batch_MST.nBatchNo " +
                        " FROM BL_Batch_DTL WITH (NOLOCK) INNER JOIN BL_Batch_MST WITH (NOLOCK) ON BL_Batch_DTL.nBatchID = BL_Batch_MST.nBatchID " +
                        " WHERE (BL_Batch_DTL.nTransactionID = " + TransactionID + ")";
                        oDB.Retrive_Query(_strSQLBatchNo, out dtBatchNo);
                        if (dtBatchNo != null)
                        {
                            if (dtBatchNo.Rows.Count > 0)
                            {
                                for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                {
                                    if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                    }
                                    if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                    }
                                }
                            }
                            dtBatchNo.Dispose();
                        }
                        #endregion

                        PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.PatientID = PatientID;
                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);

                        string sProviderName = "";
                        DataTable _dtProvider = gloGlobal.gloPMMasters.GetProviders();
                        if(_dtProvider != null && _dtProvider.Rows.Count >0)
                        {
                            DataRow[] dr = null;
                            dr = _dtProvider.Select(" nProviderID = " + Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]) + "");
                            if (dr != null && dr.Length > 0)
                            {
                                sProviderName = Convert.ToString(dr[0]["sProviderName"]);
                            }
                        }
                        if (_dtProvider != null)
                        {
                            _dtProvider.Dispose();
                            _dtProvider = null;
                        }
                        //oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                        oTransaction.ProviderName = sProviderName;
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0; ////This ID is use to generate a unique TransactionID in Stored Procedure.
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);

                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);

                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                        oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);

                        //Code added on 20081125 , Sagar Ghodke
                        oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                        oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                        //End 20081125

                        //Code added on 20081201 , Sagar Ghodke
                        oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                        oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                        //End 20081201

                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);

                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);

                        //Code added on 20090505 - Sagar Ghodke

                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);

                        //End Code add 20090505,Sagar Ghodke

                        //Code Added on 20090710 - Vinayak Gadekar
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);

                        //...*** Code added on 20090730 by - Sagar Ghodke
                        //...
                        oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                        //...
                        //...*** End code add 20090730 ,Sagar Ghodke

                        //Added By Debasish on 10th Jun 2010
                        oTransaction.IsSameAsBillingProvider = Convert.ToBoolean(dtTrans.Rows[0]["bSameAsBillingProvider"]);
                        //**
                        oTransaction.bIsRefprovAsSupervisor = Convert.ToBoolean(dtTrans.Rows[0]["bIsRefProvAsSupervisor"]);
                    }
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                

                //BL_Transaction_MST_Ins
                DataTable dtInsurance = new DataTable();
                oTransaction.Insurances = new TransactionInsurances();

                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST_Ins", oDBParameters, out dtInsurance);

                //if (dtInsurance != null)
                //{
                //    if (dtInsurance.Rows.Count > 0)
                //    {
                //        //Addded by Anil 20080912 
                //        //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                //        for (int j = 0; j < dtInsurance.Rows.Count; j++)
                //        {
                //            TransactionInsurance oInsurance = new TransactionInsurance();
                //            oInsurance.ClinicID = ClinicID;
                //            oInsurance.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                //            oInsurance.TransactionDetailID = Convert.ToInt64(dtInsurance.Rows[j]["nTransactionDetailID"]);
                //            oInsurance.TransactionLineNo = Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]);
                //            oInsurance.TransactionID = TransactionID;
                //            oTransaction.Insurances.Add(oInsurance);
                //            oInsurance.Dispose();
                //        }
                //    }
                //}

                //BL_Transaction_Lines
                DataTable dtLines = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineNo", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_Lines", oDBParameters, out dtLines);

                if (dtLines != null)
                {
                    if (dtLines.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtLines.Rows.Count; i++)
                        {
                            //nTransactionID
                            //nTransactionLineNo nFromDate nToDate sPOSCode sPOSDescription sTOSCode sTOSDescription sCPTCode sCPTDescription sDx1Code 
                            //sDx1Description sDx2Code sDx2Description sDx3Code sDx3Description sDx4Code sDx4Description sDx5Code sDx5Description sDx6Code 
                            //sDx6Description sDx7Code sDx7Description sDx8Code sDx8Description nDx1Pointer nDx2Pointer nDx3Pointer nDx4Pointer 
                            //nDx5Pointer nDx6Pointer nDx7Pointer nDx8Pointer sMod1Code sMod1Description sMod2Code sMod2Description sMod3Code
                            //sMod3Description sMod4Code sMod4Description dCharges dUnit dTotal dAllowed nProvider nClinicID

                            oLine = new TransactionLine();
                            oLine.TransactionId = TransactionID;
                            oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                            oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);
                            oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));

                            if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                            {
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                            }
                            else
                            {
                                oLine.DateServiceTillIsNull = true;
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            }

                            
                            oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                            oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                            oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                            oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                            oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                            oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                            oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                            oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                            oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                            oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                            oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                            oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                            oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                            oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                            oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                            oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                            oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                            oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                            oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                            oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                            oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                            oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                            oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                            oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                            oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                            oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                            oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                            oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                            oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                            oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                            oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                            oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                            oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                            oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                            oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                            oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                            oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                            oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                            oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                            oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                            oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                            oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                            oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                            oLine.ClinicID = ClinicID;
                            oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                            oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);



                            //Code added on 20090511 by - Sagar Ghodke

                            oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                            oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                            oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);

                            //End code add 20090511,Sagar Ghodke

                            oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                            oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);


                            oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                            oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                            oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                            oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                            oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                            oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                            oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                            oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                            oLine.Prescription = Convert.ToString(dtLines.Rows[i]["sPrescription"]);

                            if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                            { oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]); }

                            //BL_Transaction_Lines_Notes
                            DataTable dtNotes = new DataTable();
                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDB.Retrive("BL_SELECT_Transaction_Lines_Notes", oDBParameters, out dtNotes);

                            if (dtNotes != null)
                            {
                                Common.GeneralNote oLineNote = null;
                                for (int j = 0; j < dtNotes.Rows.Count; j++)
                                {
                                    //nTransactionID nLineNo nNoteType nNoteId nNoteDateTime nUserID sNoteDescription nClinicID
                                    //oLine.LineNotes[j].TransactionID = TransactionID;
                                    //oLine.LineNotes[j].TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    //oLine.LineNotes[j].NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    //oLine.LineNotes[j].NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    //oLine.LineNotes[j].UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    //oLine.LineNotes[j].NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    //oLine.LineNotes[j].ClinicID = ClinicID;
                                    oLineNote = new GeneralNote();
                                    oLineNote.TransactionID = TransactionID;
                                    oLineNote.TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    oLineNote.TransactionDetailID = Convert.ToInt64(dtNotes.Rows[j]["nTransactionDetailID"]);
                                    oLineNote.NoteID = Convert.ToInt64(dtNotes.Rows[j]["nNoteId"]);
                                    oLineNote.NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    oLineNote.NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    oLineNote.UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    oLineNote.NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    if (dtNotes.Rows[j]["dtCreatedDateTime"] != DBNull.Value)
                                    {
                                        oLineNote.dtCreatedDatetime = Convert.ToDateTime(dtNotes.Rows[j]["dtCreatedDateTime"]);
                                    }
                                    oLineNote.ClinicID = ClinicID;
                                    oLine.LineNotes.Add(oLineNote);
                                    if (oLineNote != null)
                                    { oLineNote.Dispose(); }
                                }
                                dtNotes.Dispose();
                                dtNotes = null;
                            }

                            if (dtInsurance != null)
                            {
                                if (dtInsurance.Rows.Count > 0)
                                {
                                    //Addded by Anil 20080912 

                                    //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                                    for (int j = 0; j < dtInsurance.Rows.Count; j++)
                                    {
                                        if (Convert.ToString(dtInsurance.Rows[j]["nTransactionLineNo"]) != "")
                                        {
                                            if (Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]) == oLine.TransactionLineId)
                                            {
                                                oLine.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                                                oLine.InsuranceSelfMode = (PayerMode)Convert.ToInt32(dtInsurance.Rows[j]["nPaymentMode"]);

                                                gloPatient.gloInsurance ogloInsurance = new gloPatient.gloInsurance(_databaseconnectionstring);
                                                DataTable dtTempInsurance = new DataTable();
                                                //dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID);
                                                dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID, PatientID);
                                                if (dtTempInsurance != null && dtTempInsurance.Rows.Count > 0)
                                                {
                                                    //Contact
                                                    oLine.InsuranceName = Convert.ToString(dtTempInsurance.Rows[0]["Name"]);
                                                    //Vinayak - Is Primary/secondary/tertiary
                                                    if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Primary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Secondary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Tertiary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                                                    }
                                                    else
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = "";
                                                    }

                                                }
                                                if (dtTempInsurance != null) { dtTempInsurance.Dispose(); }
                                                if (ogloInsurance != null) { ogloInsurance.Dispose(); }

                                            }
                                        }
                                    }
                                }
                            }

                            //Transaction line is added in the Transaction
                            oTransaction.Lines.Add(oLine);
                        }
                    }
                    dtLines.Dispose();
                    dtLines = null;
                }
                if (dtInsurance != null)
                {
                    dtInsurance.Dispose();
                    dtInsurance = null;
                }
                DataTable dtInsurancePlan = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_InsPlan", oDBParameters, out dtInsurancePlan);

                if (dtInsurancePlan != null)
                {
                    for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                    {
                        TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                        _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                        _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                        _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                        _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                        _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                        _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                        _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                        _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                        _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                        _TransactionInsurancePlan.CopayAmount = 0;
                        _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                        oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                    }
                    dtInsurancePlan.Dispose();
                    dtInsurancePlan = null;
                }




            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (dtTrans != null)
                {
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                oDBParameters.Dispose();


            }
            return oTransaction;
        }

        public Transaction GetChargesDetails(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;
            try
            {
                oDB.Connect(false);
                // For BL_Transaction_MST Table.
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST", oDBParameters, out dtTrans);

                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        //nTransactionID, nMasterAppointmentID, nAppointmentID, nVisitID, nOnsiteDate, nInjuryDate, 
                        //nUnableToWorkFromDate, nUnableToWorkTillDate, nTransactionDate, sCaseNoPrefix, nClaimNo, 
                        //nPatientID, nTransactionProviderID, sMaritalStatus, sFacilityCode, sFacilityDescription, 
                        //nTransactionType, nClinicID, nTransactionStatusID, sState, nHopitalizationDateFrom, nHopitalizationDateTo,
                        //bOutSideLab, dOutSideLabCharges, bAutoClaim, nAccidentDate, bWorkersComp
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);
                        oTransaction.CloseDayTrayID = Convert.ToInt64(dtTrans.Rows[0]["nChargesDayTrayID"]);
                        oTransaction.CloseDayTrayCode = Convert.ToString(dtTrans.Rows[0]["sChargesTrayCode"]);
                        oTransaction.CloseDayTrayName = Convert.ToString(dtTrans.Rows[0]["sChargesTrayDescription"]);


                        //Vinayak-Sagar for batch no, but we have to implement it in line class, - Remark - Pending
                        oTransaction.BatchNoPrefix = "Batch";
                        oTransaction.BatchNo = 0;

                        #region "Retrive Batch No"

                        DataTable dtBatchNo = new DataTable();
                        string _strSQLBatchNo = "";
                        _strSQLBatchNo = "SELECT  TOP 1   BL_Batch_MST.sBatchNoPrefix, BL_Batch_MST.nBatchNo " +
                        " FROM BL_Batch_DTL WITH (NOLOCK) INNER JOIN BL_Batch_MST WITH (NOLOCK) ON BL_Batch_DTL.nBatchID = BL_Batch_MST.nBatchID " +
                        " WHERE (BL_Batch_DTL.nTransactionID = " + TransactionID + ")";
                        oDB.Retrive_Query(_strSQLBatchNo, out dtBatchNo);
                        if (dtBatchNo != null)
                        {
                            if (dtBatchNo.Rows.Count > 0)
                            {
                                for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                {
                                    if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                    }
                                    if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                    }
                                }
                            }
                            dtBatchNo.Dispose();
                            dtBatchNo = null;
                        }
                        #endregion

                        PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.PatientID = PatientID;

                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                        oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0; ////This ID is use to generate a unique TransactionID in Stored Procedure.
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);

                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);

                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                        oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);

                        //Code added on 20081125 , Sagar Ghodke
                        oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                        oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                        //End 20081125

                        //Code added on 20081201 , Sagar Ghodke
                        oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                        oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                        //End 20081201

                        //Code added on 20100616 , Debasish Das
                        oTransaction.ReferalProviderID_New = Convert.ToInt64(dtTrans.Rows[0]["nReferralProviderID"]);
                        //**

                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);

                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);

                        //Code added on 20090505 - Sagar Ghodke

                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);

                        //End Code add 20090505,Sagar Ghodke

                        //Code Added on 20090710 - Vinayak Gadekar
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);

                        //...*** Code added on 20090730 by - Sagar Ghodke
                        //...
                        oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                        //...
                        //...*** End code add 20090730 ,Sagar Ghodke

                        //Added By mukesh on 12 Nov 2010
                        oTransaction.IllnessDate = Convert.ToInt64(dtTrans.Rows[0]["nIllnessDate"]);
                        //**

                        oTransaction.LastSeenDate = Convert.ToInt64(dtTrans.Rows[0]["nLastSeenDate"]);
                        oTransaction.ProviderQualifierCode = Convert.ToString(dtTrans.Rows[0]["sProviderQualifier"]);
                        oTransaction.ClaimBox15QualifierCode = Convert.ToString(dtTrans.Rows[0]["sBox15DateQualifier"]);
                        oTransaction.ClaimBox15Date = Convert.ToDateTime(dtTrans.Rows[0]["dtBox15Date"]);


                        //add on 20110630 by Mahesh Nawal for 6031
                        oTransaction.DelayReasonCodeID = Convert.ToString(dtTrans.Rows[0]["sDelayReasonCodeID"]).Trim();
                        oTransaction.ServiceAuthExceCode = Convert.ToString(dtTrans.Rows[0]["sServiceAuthExceCode"]).Trim();

                        oTransaction.bIsRefprovAsSupervisor = Convert.ToBoolean(dtTrans.Rows[0]["bIsRefProvAsSupervisor"]);
                    }
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                

                //BL_Transaction_MST_Ins
                DataTable dtInsurance = new DataTable();
                oTransaction.Insurances = new TransactionInsurances();

                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST_Ins", oDBParameters, out dtInsurance);

                //if (dtInsurance != null)
                //{
                //    if (dtInsurance.Rows.Count > 0)
                //    {
                //        //Addded by Anil 20080912 
                //        //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                //        for (int j = 0; j < dtInsurance.Rows.Count; j++)
                //        {
                //            TransactionInsurance oInsurance = new TransactionInsurance();
                //            oInsurance.ClinicID = ClinicID;
                //            oInsurance.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                //            oInsurance.TransactionDetailID = Convert.ToInt64(dtInsurance.Rows[j]["nTransactionDetailID"]);
                //            oInsurance.TransactionLineNo = Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]);
                //            oInsurance.TransactionID = TransactionID;
                //            oTransaction.Insurances.Add(oInsurance);
                //            oInsurance.Dispose();
                //        }
                //    }
                //}

                //BL_Transaction_Lines
                DataTable dtLines = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineNo", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Charges_Lines", oDBParameters, out dtLines);

                if (dtLines != null)
                {
                    if (dtLines.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtLines.Rows.Count; i++)
                        {
                            //nTransactionID
                            //nTransactionLineNo nFromDate nToDate sPOSCode sPOSDescription sTOSCode sTOSDescription sCPTCode sCPTDescription sDx1Code 
                            //sDx1Description sDx2Code sDx2Description sDx3Code sDx3Description sDx4Code sDx4Description sDx5Code sDx5Description sDx6Code 
                            //sDx6Description sDx7Code sDx7Description sDx8Code sDx8Description nDx1Pointer nDx2Pointer nDx3Pointer nDx4Pointer 
                            //nDx5Pointer nDx6Pointer nDx7Pointer nDx8Pointer sMod1Code sMod1Description sMod2Code sMod2Description sMod3Code
                            //sMod3Description sMod4Code sMod4Description dCharges dUnit dTotal dAllowed nProvider nClinicID

                            oLine = new TransactionLine();
                            oLine.TransactionId = TransactionID;
                            oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                            oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);
                            oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));

                            if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                            {
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                            }
                            else
                            {
                                oLine.DateServiceTillIsNull = true;
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            }

                            oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                            oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                            oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                            oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                            oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                            oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                            oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                            oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                            oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                            oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                            oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                            oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                            oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                            oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                            oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                            oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                            oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                            oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                            oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                            oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                            oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                            oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                            oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                            oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                            oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                            oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                            oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                            oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                            oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                            oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                            oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                            oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                            oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                            oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                            oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                            oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                            oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                            oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                            oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                            oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                            oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                            oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                            oLine.PatientResponsibility = Convert.ToDecimal(dtLines.Rows[i]["dPatientResponsibility"]);
                            oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                            oLine.ClinicID = ClinicID;
                            oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                            oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);


                            //Code added on 20090511 by - Sagar Ghodke

                            oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                            oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                            oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);

                            //End code add 20090511,Sagar Ghodke

                            oLine.IsHold = Convert.ToBoolean(dtLines.Rows[i]["bIsHold"]);
                            oLine.HoldReason = Convert.ToString(dtLines.Rows[i]["sHoldReason"]);

                            oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                            oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);


                            //Added By mukesh on 12 Nov 2010
                            oLine.EMG = Convert.ToBoolean(dtLines.Rows[i]["bEMG"]);
                            //**	

                            oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                            oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                            oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                            oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                            oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                            oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                            oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                            oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                            oLine.Prescription = Convert.ToString(dtLines.Rows[i]["Prescription"]);
                            if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                            { oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]); }

                            //BL_Transaction_Lines_Notes
                            DataTable dtNotes = new DataTable();
                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDB.Retrive("BL_SELECT_Transaction_Lines_Notes", oDBParameters, out dtNotes);

                            if (dtNotes != null)
                            {
                                Common.GeneralNote oLineNote = null;
                                for (int j = 0; j < dtNotes.Rows.Count; j++)
                                {
                                    //nTransactionID nLineNo nNoteType nNoteId nNoteDateTime nUserID sNoteDescription nClinicID
                                    //oLine.LineNotes[j].TransactionID = TransactionID;
                                    //oLine.LineNotes[j].TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    //oLine.LineNotes[j].NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    //oLine.LineNotes[j].NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    //oLine.LineNotes[j].UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    //oLine.LineNotes[j].NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    //oLine.LineNotes[j].ClinicID = ClinicID;
                                    oLineNote = new GeneralNote();
                                    oLineNote.TransactionID = TransactionID;
                                    oLineNote.TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    oLineNote.TransactionDetailID = Convert.ToInt64(dtNotes.Rows[j]["nTransactionDetailID"]);
                                    oLineNote.NoteID = Convert.ToInt64(dtNotes.Rows[j]["nNoteId"]);
                                    oLineNote.NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    oLineNote.NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    oLineNote.UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    oLineNote.NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    if (dtNotes.Rows[j]["dtCreatedDateTime"] != DBNull.Value)
                                    {
                                        oLineNote.dtCreatedDatetime = Convert.ToDateTime(dtNotes.Rows[j]["dtCreatedDateTime"]);
                                    }
                                    oLineNote.ClinicID = ClinicID;
                                    oLine.LineNotes.Add(oLineNote);
                                    if (oLineNote != null)
                                    { oLineNote.Dispose(); }
                                }
                                dtNotes.Dispose();
                                dtNotes = null;
                            }

                            if (dtInsurance != null)
                            {
                                if (dtInsurance.Rows.Count > 0)
                                {
                                    //Addded by Anil 20080912 

                                    //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                                    for (int j = 0; j < dtInsurance.Rows.Count; j++)
                                    {
                                        if (Convert.ToString(dtInsurance.Rows[j]["nTransactionLineNo"]) != "")
                                        {
                                            if (Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]) == oLine.TransactionLineId)
                                            {
                                                oLine.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                                                oLine.InsuranceSelfMode = (PayerMode)Convert.ToInt32(dtInsurance.Rows[j]["nPaymentMode"]);

                                                gloPatient.gloInsurance ogloInsurance = new gloPatient.gloInsurance(_databaseconnectionstring);
                                                DataTable dtTempInsurance = new DataTable();
                                                //dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID);
                                                dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID, PatientID);
                                                if (dtTempInsurance != null && dtTempInsurance.Rows.Count > 0)
                                                {
                                                    //Contact
                                                    oLine.InsuranceName = Convert.ToString(dtTempInsurance.Rows[0]["Name"]);
                                                    //Vinayak - Is Primary/secondary/tertiary
                                                    if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Primary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Secondary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Tertiary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                                                    }
                                                    else
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = "";
                                                    }

                                                }
                                                if (dtTempInsurance != null) { dtTempInsurance.Dispose(); }
                                                if (ogloInsurance != null) { ogloInsurance.Dispose(); }

                                            }
                                        }
                                    }
                                }
                            }

                            //Transaction line is added in the Transaction
                            oTransaction.Lines.Add(oLine);
                        }
                    }
                    dtLines.Dispose();
                    dtLines = null;
                }
                if (dtInsurance != null)
                {
                    dtInsurance.Dispose();
                    dtInsurance = null;
                }

                DataTable dtInsurancePlan = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_InsPlan", oDBParameters, out dtInsurancePlan);

                if (dtInsurancePlan != null)
                {
                    for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                    {
                        TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                        _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                        _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                        _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                        _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                        _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                        _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                        _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                        _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                        _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                        _TransactionInsurancePlan.CopayAmount = 0;
                        _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                        oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                    }
                    dtInsurancePlan.Dispose();
                    dtInsurancePlan = null;
                }


            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dtTrans != null)
                {
                    dtTrans.Dispose();
                    dtTrans = null;
                }

                oDBParameters.Dispose();

                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }

            }
            return oTransaction;
        }

        //MaheshB 20091201 Not Used.
        public Transaction GetTransactionClaimDetails(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;
            try
            {
                oDB.Connect(false);
                // For BL_Transaction_MST Table.
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_Claim_MST", oDBParameters, out dtTrans);

                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        //nTransactionID, nMasterAppointmentID, nAppointmentID, nVisitID, nOnsiteDate, nInjuryDate, 
                        //nUnableToWorkFromDate, nUnableToWorkTillDate, nTransactionDate, sCaseNoPrefix, nClaimNo, 
                        //nPatientID, nTransactionProviderID, sMaritalStatus, sFacilityCode, sFacilityDescription, 
                        //nTransactionType, nClinicID, nTransactionStatusID, sState, nHopitalizationDateFrom, nHopitalizationDateTo,
                        //bOutSideLab, dOutSideLabCharges, bAutoClaim, nAccidentDate, bWorkersComp
                        //oTransaction.TransactionMasterID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionMasterID"]);
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);

                        //Vinayak-Sagar for batch no, but we have to implement it in line class, - Remark - Pending
                        oTransaction.BatchNoPrefix = "Batch";
                        oTransaction.BatchNo = 0;

                        /*   #region "Retrive Batch No"

                           DataTable dtBatchNo = new DataTable();
                           string _strSQLBatchNo = "";
                           _strSQLBatchNo = "SELECT  TOP 1   BL_Batch_MST.sBatchNoPrefix, BL_Batch_MST.nBatchNo " +
                           " FROM BL_Batch_DTL INNER JOIN BL_Batch_MST ON BL_Batch_DTL.nBatchID = BL_Batch_MST.nBatchID " +
                           " WHERE (BL_Batch_DTL.nTransactionID = " + TransactionID + ")";
                           oDB.Retrive_Query(_strSQLBatchNo, out dtBatchNo);
                           if (dtBatchNo != null)
                           {
                               if (dtBatchNo.Rows.Count > 0)
                               {
                                   for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                   {
                                       if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                       {
                                           oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                       }
                                       if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                       {
                                           oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                       }
                                   }
                               }
                           }
                           #endregion */

                        PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.PatientID = PatientID;
                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                        oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0; ////This ID is use to generate a unique TransactionID in Stored Procedure.
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);

                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);

                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                        oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);

                        //Code added on 20081125 , Sagar Ghodke
                        oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                        oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                        //End 20081125

                        //Code added on 20081201 , Sagar Ghodke
                        oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                        oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                        //End 20081201

                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);

                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);

                        //Code added on 20090505 - Sagar Ghodke

                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);

                        //End Code add 20090505,Sagar Ghodke

                        //Code Added on 20090710 - Vinayak Gadekar
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);

                        //...*** Code added on 20090730 by - Sagar Ghodke
                        //...
                        oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                        //...
                        //...*** End code add 20090730 ,Sagar Ghodke
                        oTransaction.bIsRefprovAsSupervisor = Convert.ToBoolean(dtTrans.Rows[0]["bIsRefProvAsSupervisor"]);
                    }
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                

                //BL_Transaction_MST_Ins
                DataTable dtInsurance = new DataTable();
                oTransaction.Insurances = new TransactionInsurances();

                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST_Ins", oDBParameters, out dtInsurance);

                //if (dtInsurance != null)
                //{
                //    if (dtInsurance.Rows.Count > 0)
                //    {
                //        //Addded by Anil 20080912 
                //        //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                //        for (int j = 0; j < dtInsurance.Rows.Count; j++)
                //        {
                //            TransactionInsurance oInsurance = new TransactionInsurance();
                //            oInsurance.ClinicID = ClinicID;
                //            oInsurance.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                //            oInsurance.TransactionDetailID = Convert.ToInt64(dtInsurance.Rows[j]["nTransactionDetailID"]);
                //            oInsurance.TransactionLineNo = Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]);
                //            oInsurance.TransactionID = TransactionID;
                //            oTransaction.Insurances.Add(oInsurance);
                //            oInsurance.Dispose();
                //        }
                //    }
                //}

                //BL_Transaction_Lines
                DataTable dtLines = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineNo", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("[BL_SELECT_Transaction_Claim_Lines]", oDBParameters, out dtLines);

                if (dtLines != null)
                {
                    if (dtLines.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtLines.Rows.Count; i++)
                        {
                            //nTransactionID
                            //nTransactionLineNo nFromDate nToDate sPOSCode sPOSDescription sTOSCode sTOSDescription sCPTCode sCPTDescription sDx1Code 
                            //sDx1Description sDx2Code sDx2Description sDx3Code sDx3Description sDx4Code sDx4Description sDx5Code sDx5Description sDx6Code 
                            //sDx6Description sDx7Code sDx7Description sDx8Code sDx8Description nDx1Pointer nDx2Pointer nDx3Pointer nDx4Pointer 
                            //nDx5Pointer nDx6Pointer nDx7Pointer nDx8Pointer sMod1Code sMod1Description sMod2Code sMod2Description sMod3Code
                            //sMod3Description sMod4Code sMod4Description dCharges dUnit dTotal dAllowed nProvider nClinicID

                            oLine = new TransactionLine();
                            oLine.TransactionId = TransactionID;
                            oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                            oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);
                            oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));

                            if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                            {
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                            }
                            else
                            {
                                oLine.DateServiceTillIsNull = true;
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            }

                            oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                            oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                            oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                            oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                            oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                            oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                            oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                            oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                            oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                            oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                            oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                            oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                            oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                            oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                            oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                            oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                            oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                            oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                            oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                            oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                            oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                            oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                            oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                            oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                            oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                            oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                            oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                            oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                            oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                            oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                            oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                            oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                            oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                            oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                            oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                            oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                            oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                            oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                            oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                            oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                            oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                            oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                            oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                            oLine.ClinicID = ClinicID;
                            oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                            oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);


                            //Code added on 20090511 by - Sagar Ghodke

                            oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                            oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                            oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);

                            //End code add 20090511,Sagar Ghodke

                            oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                            oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);

                            //BL_Transaction_Lines_Notes
                            DataTable dtNotes = new DataTable();
                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDB.Retrive("BL_SELECT_Transaction_Lines_Notes", oDBParameters, out dtNotes);

                            if (dtNotes != null)
                            {
                                Common.GeneralNote oLineNote = null;
                                for (int j = 0; j < dtNotes.Rows.Count; j++)
                                {
                                    //nTransactionID nLineNo nNoteType nNoteId nNoteDateTime nUserID sNoteDescription nClinicID
                                    //oLine.LineNotes[j].TransactionID = TransactionID;
                                    //oLine.LineNotes[j].TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    //oLine.LineNotes[j].NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    //oLine.LineNotes[j].NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    //oLine.LineNotes[j].UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    //oLine.LineNotes[j].NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    //oLine.LineNotes[j].ClinicID = ClinicID;
                                    oLineNote = new GeneralNote();
                                    oLineNote.TransactionID = TransactionID;
                                    oLineNote.TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    oLineNote.TransactionDetailID = Convert.ToInt64(dtNotes.Rows[j]["nTransactionDetailID"]);
                                    oLineNote.NoteID = Convert.ToInt64(dtNotes.Rows[j]["nNoteId"]);
                                    oLineNote.NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    oLineNote.NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    oLineNote.UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    oLineNote.NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    if (dtNotes.Rows[j]["dtCreatedDateTime"] != DBNull.Value)
                                    {
                                        oLineNote.dtCreatedDatetime = Convert.ToDateTime(dtNotes.Rows[j]["dtCreatedDateTime"]);
                                    }
                                    oLineNote.ClinicID = ClinicID;
                                    oLine.LineNotes.Add(oLineNote);
                                    if (oLineNote != null)
                                    { oLineNote.Dispose(); }
                                }
                                dtNotes.Dispose();
                                dtNotes = null;
                            }

                            if (dtInsurance != null)
                            {
                                if (dtInsurance.Rows.Count > 0)
                                {
                                    //Addded by Anil 20080912 

                                    //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                                    for (int j = 0; j < dtInsurance.Rows.Count; j++)
                                    {
                                        if (Convert.ToString(dtInsurance.Rows[j]["nTransactionLineNo"]) != "")
                                        {
                                            if (Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]) == oLine.TransactionLineId)
                                            {
                                                oLine.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                                                oLine.InsuranceSelfMode = (PayerMode)Convert.ToInt32(dtInsurance.Rows[j]["nPaymentMode"]);

                                                gloPatient.gloInsurance ogloInsurance = new gloPatient.gloInsurance(_databaseconnectionstring);
                                                DataTable dtTempInsurance = new DataTable();
                                                //dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID);
                                                dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID, PatientID);
                                                if (dtTempInsurance != null && dtTempInsurance.Rows.Count > 0)
                                                {
                                                    //Contact
                                                    oLine.InsuranceName = Convert.ToString(dtTempInsurance.Rows[0]["Name"]);
                                                    //Vinayak - Is Primary/secondary/tertiary
                                                    if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Primary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Secondary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Tertiary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                                                    }
                                                    else
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = "";
                                                    }

                                                }
                                                if (dtTempInsurance != null) { dtTempInsurance.Dispose(); }
                                                if (ogloInsurance != null) { ogloInsurance.Dispose(); }

                                            }
                                        }
                                    }
                                }
                            }

                            //Transaction line is added in the Transaction
                            oTransaction.Lines.Add(oLine);
                        }
                    }
                    dtLines.Dispose();
                    dtLines = null;
                }
                if (dtInsurance != null)
                {
                    dtInsurance.Dispose();
                    dtInsurance = null;
                }
                DataTable dtInsurancePlan = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_InsPlan", oDBParameters, out dtInsurancePlan);

                if (dtInsurancePlan != null)
                {
                    for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                    {
                        TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                        _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                        _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                        _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                        _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                        _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                        _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                        _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                        _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                        _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                        _TransactionInsurancePlan.CopayAmount = 0;
                        _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                        oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                    }
                    dtInsurancePlan.Dispose();
                    dtInsurancePlan = null;
                }




            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (dtTrans != null)
                {
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                oDBParameters.Dispose();


            }
            return oTransaction;
        }
        /// <summary>
        /// Added By Pramod Nair To Modify the Charges 
        /// </summary>
        /// <param name="TransactionID"></param>
        /// <param name="ClinicID"></param>
        /// <returns>Transaction</returns>
        /// 

        //20100529 Mahesh Nawal Code Optimization
        public Int64 GetProviderID(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            try
            {
                oDB.Connect(false);
                _strSQL = "SELECT nTransactionProviderID FROM BL_Transaction_Claim_MST WITH (NOLOCK) WHERE nTransactionID=" + TransactionID + " AND nClinicID=" + ClinicID;
                Object _objres = oDB.ExecuteScalar_Query(_strSQL);
                if (_objres != null)
                {
                    return Convert.ToInt64(_objres);
                }
                else
                {
                    return 0;
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
                return 0;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
        }

        public Transaction GetChargesClaimDetails_Old(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;
            try
            {
                oDB.Connect(false);
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_Claim_MST", oDBParameters, out dtTrans);

                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.TransactionMasterID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionMasterID"]);
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);

                        oTransaction.BatchNoPrefix = "Batch";
                        oTransaction.BatchNo = 0;

                        #region "Retrive Batch No"

                        DataTable dtBatchNo = new DataTable();
                        string _strSQLBatchNo = "";
                        _strSQLBatchNo = "SELECT  TOP 1   BL_Batch_MST.sBatchNoPrefix, BL_Batch_MST.nBatchNo " +
                        " FROM BL_Batch_DTL WITH (NOLOCK) INNER JOIN BL_Batch_MST WITH (NOLOCK) ON BL_Batch_DTL.nBatchID = BL_Batch_MST.nBatchID " +
                        " WHERE (BL_Batch_DTL.nTransactionID = " + TransactionID + ")";
                        oDB.Retrive_Query(_strSQLBatchNo, out dtBatchNo);
                        if (dtBatchNo != null)
                        {
                            if (dtBatchNo.Rows.Count > 0)
                            {
                                for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                {
                                    if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                    }
                                    if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                    }
                                }
                            }
                        }
                        #endregion

                        PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.PatientID = PatientID;
                        oTransaction.PatientCode = Convert.ToString(dtTrans.Rows[0]["sPatientCode"]);
                        oTransaction.PatientName = Convert.ToString(dtTrans.Rows[0]["sPatientName"]); 
                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                        oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0;
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);
                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);
                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                        oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);
                        oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                        oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                        oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                        oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);
                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);
                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);
                        oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                        oTransaction.InsuranceID = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceID"]);
                        oTransaction.InsuranceName = Convert.ToString(dtTrans.Rows[0]["sInsuranceName"]);
                        oTransaction.InsuranceFlag = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceFlag"]);
                        oTransaction.ContactID = Convert.ToInt64(dtTrans.Rows[0]["nContactID"]);
                        oTransaction.ResponsibilityNo = Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityNo"]);
                        oTransaction.ResponsibilityType = ((PayerMode)Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityType"]));
                        oTransaction.SubClaimNo = Convert.ToString(dtTrans.Rows[0]["nSubClaimNo"]);
                        oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);

                        oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);
                        oTransaction.CloseDayTrayID = Convert.ToInt64(dtTrans.Rows[0]["nChargesDayTrayID"]);
                        oTransaction.CloseDayTrayCode = Convert.ToString(dtTrans.Rows[0]["sChargesTrayCode"]);
                        oTransaction.CloseDayTrayName = Convert.ToString(dtTrans.Rows[0]["sChargesTrayDescription"]);

                        //Parent Claim No and Parent Transaction Id if Claim is splitted
                        oTransaction.ParentTransactionID = Convert.ToInt64(dtTrans.Rows[0]["nParentTransactionID"]);
                        oTransaction.ParentClaimNo = Convert.ToString(dtTrans.Rows[0]["nParentClaimNo"]);


                        //Hold Fee-Schedule
                        oTransaction.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtTrans.Rows[0]["nFeeScheduleType"]);
                        oTransaction.FeeScheduleID = Convert.ToInt64(dtTrans.Rows[0]["nFeeScheduleID"]);
                        oTransaction.FacilityType = (FacilityType)Convert.ToInt16(dtTrans.Rows[0]["nFacilityType"]);

                        oTransaction.MainClaimNo = Convert.ToString(dtTrans.Rows[0]["sMainClaimNo"]);

                        //MaheshB 20100426 gloPM5040
                        oTransaction.IsRebill = Convert.ToBoolean(dtTrans.Rows[0]["bIsRebilled"]);

                        //Debasish Das 20100508 gloPM5040
                        if (Convert.ToInt16(dtTrans.Rows[0]["ParentClaimStatus"]) == (Int16)TransactionStatus.Resent)
                        {
                            oTransaction.IsResend = true;
                        }
                        else
                        {
                            oTransaction.IsResend = false; 
                        }
                        //**
                        //Debasish Das 20100514 gloPM5040
                        if (Convert.ToString(dtTrans.Rows[0]["bIsVoid"]).ToLower() == Boolean.TrueString.ToLower())
                        {
                            oTransaction.IsVoid = true;
                            oTransaction.VoidedDate = Convert.ToDateTime(dtTrans.Rows[0]["dtVoidDate"]);
                            oTransaction.VoidByID = Convert.ToInt64(dtTrans.Rows[0]["nVoidUserID"]);
                            oTransaction.VoidByName = Convert.ToString(dtTrans.Rows[0]["sVoidUserName"]);
                            oTransaction.nVoidedDate = Convert.ToInt64(dtTrans.Rows[0]["nVoidCloseDate"]);
                            oTransaction.VoidedTrayID = Convert.ToInt64(dtTrans.Rows[0]["nVoidTrayID"]);
                        }
                        else
                        {
                            oTransaction.IsVoid = false;
                        }

                        //**
                        //Debasish Das 20100514 gloPM5040
                        oTransaction.IsSameAsBillingProvider = Convert.ToBoolean(dtTrans.Rows[0]["bSameAsBillingProvider"]);
                        //**

                        //Debasish Das 20100616 gloPM5040
                        oTransaction.ReferalProviderID_New = Convert.ToInt64(dtTrans.Rows[0]["nReferralProviderID"]);
                        //**


                        oTransaction.IsReplacementClaim = Convert.ToBoolean(dtTrans.Rows[0]["bIsReplacementClaim"]);

                        #region "Retreive Claim Ref. No."

                        DataTable dtClaimRefNo = new DataTable();
                        string _strClaimRefNoQuery = "";
                        string _strClaimRefNo = "";
                        _strClaimRefNoQuery = "SELECT  isnull(sClaimRemittanceRefNo,'') as sClaimRemittanceRefNo " +
                    " FROM BL_Transaction_ClaimRemittanceRef WITH (NOLOCK) " +
                    " WHERE (nTransactionID = " + oTransaction.TransactionMasterID + " and nContactID = " + oTransaction.ContactID + " and nInsuranceID = " + oTransaction.InsuranceID + " and nclinicid= " + oTransaction.ClinicID + ")";
                        oDB.Retrive_Query(_strClaimRefNoQuery, out dtClaimRefNo);
                        if (dtClaimRefNo != null)
                        {
                            if (dtClaimRefNo.Rows.Count > 0)
                            {
                                _strClaimRefNo = Convert.ToString(dtClaimRefNo.Rows[0]["sClaimRemittanceRefNo"]); ;

                            }
                        }
                        dtClaimRefNo.Dispose();
                        oTransaction.sClaimRefNo = _strClaimRefNo;
                        #endregion

                        #region "Retreive Box19 Message- Resubmission Note"

                        DataTable dtBox19Notes = new DataTable();
                        string _strBox19Notes = "";
                        _strBox19Notes = "SELECT  isnull(nNoteId,0) as nNoteId,isnull(sNoteDescription,'') as sNoteDescription , nNotetype,nBillingNoteType,nNoteDateTime,nUserID" +
                        " FROM bl_transaction_lines_notes WITH (NOLOCK)" +
                        " WHERE (nTransactionID = " + oTransaction.TransactionMasterID + " AND nNoteType=11 and nbillingNoteType=20)";
                        //" WHERE (nTransactionID = " + TransactionID + " AND nNoteType=11 and nbillingNoteType=20)";
                        oDB.Retrive_Query(_strBox19Notes, out dtBox19Notes);
                        if (dtBox19Notes != null)
                        {
                            if (dtBox19Notes.Rows.Count > 0)
                            {
                                oTransaction.ClaimBox19Notes = new ClaimBox19Notes();
                                for (int j = 0; j < dtBox19Notes.Rows.Count; j++)
                                {
                                    oTransaction.ClaimBox19Note = new ClaimBox19Note();
                                    oTransaction.ClaimBox19Note.TransactionID = TransactionID;
                                    oTransaction.ClaimBox19Note.NoteID = Convert.ToInt64(dtBox19Notes.Rows[j]["nNoteId"]);
                                    oTransaction.ClaimBox19Note.NoteType = (NoteType)(dtBox19Notes.Rows[j]["nNoteType"]);
                                    oTransaction.ClaimBox19Note.BillingNoteType = (EOBPaymentSubType)(dtBox19Notes.Rows[j]["nBillingNoteType"]);
                                    oTransaction.ClaimBox19Note.NoteDate = Convert.ToInt64(dtBox19Notes.Rows[j]["nNoteDateTime"]);
                                    oTransaction.ClaimBox19Note.UserID = Convert.ToInt64(dtBox19Notes.Rows[j]["nUserID"]);
                                    oTransaction.ClaimBox19Note.Box19NoteDescription = Convert.ToString(dtBox19Notes.Rows[j]["sNoteDescription"]);
                                    oTransaction.ClaimBox19Note.ClinicID = ClinicID;
                                    oTransaction.ClaimBox19Note.IsReplacementClaim = oTransaction.IsReplacementClaim;
                                    oTransaction.ClaimBox19Note.sClaimRemittRefNo = _strClaimRefNo;
                                    oTransaction.ClaimBox19Notes.Add(oTransaction.ClaimBox19Note);
                                }
                            }
                            else if (_strClaimRefNo != "")
                            {
                                oTransaction.ClaimBox19Notes = new ClaimBox19Notes();
                                //for (int j = 0; j < dtBox19Notes.Rows.Count; j++)
                                //{
                                oTransaction.ClaimBox19Note = new ClaimBox19Note();
                                oTransaction.ClaimBox19Note.TransactionID = TransactionID;
                                oTransaction.ClaimBox19Note.sClaimRemittRefNo = _strClaimRefNo;
                                oTransaction.ClaimBox19Notes.Add(oTransaction.ClaimBox19Note);
                                //}
                            }
                        }
                        dtBox19Notes.Dispose();

                        #endregion


                        //Added By mukesh on 12 Nov 2010
                        oTransaction.IllnessDate = Convert.ToInt64(dtTrans.Rows[0]["nIllnessDate"]);
                        //**

                        //add on 20110630 by Mahesh Nawal for 6031
                        oTransaction.DelayReasonCodeID = Convert.ToString(dtTrans.Rows[0]["sDelayReasonCodeID"]).Trim();
                        oTransaction.ServiceAuthExceCode = Convert.ToString(dtTrans.Rows[0]["sServiceAuthExceCode"]).Trim(); 



                        //Added by Subashish_b on 16/May/2011  for  assigning the PAF values to object while saving.
                        oTransaction.PAccountID = Convert.ToInt64(dtTrans.Rows[0]["nPAccountID"]);
                        oTransaction.AccountPatientID = Convert.ToInt64(dtTrans.Rows[0]["nAccountPatientID"]);
                        oTransaction.GuarantorID = Convert.ToInt64(dtTrans.Rows[0]["nGuarantorID"]);
                        //End

                    }
                }
                dtTrans.Dispose();

                #region " Commented Insurance"

                ////BL_Transaction_MST_Ins
                //DataTable dtInsurance = new DataTable();
                //oTransaction.Insurances = new TransactionInsurances();

                //oDBParameters.Clear();
                //oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDB.Retrive("BL_SELECT_Transaction_MST_Ins", oDBParameters, out dtInsurance);

                #endregion

                //BL_Transaction_Lines
                DataTable dtLines = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineNo", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactID", oTransaction.ContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Charges_Claim_Lines", oDBParameters, out dtLines);

                if (dtLines != null)
                {
                    if (dtLines.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtLines.Rows.Count; i++)
                        {

                            oLine = new TransactionLine();
                            oLine.TransactionId = TransactionID;
                            oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                            oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);

                            oLine.TransactionMasterID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterID"]);
                            oLine.TransactionMasterDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterDetailID"]);

                            oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));

                            if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                            {
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                            }
                            else
                            {
                                oLine.DateServiceTillIsNull = true;
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            }

                            oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                            oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                            oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                            oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                            oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                            oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                            oLine.CrosswalkCPTCode = dtLines.Rows[i]["sCrossWalkCPTCode"].ToString();
                            oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                            oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                            oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                            oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                            oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                            oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                            oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                            oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                            oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                            oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                            oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                            oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                            oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                            oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                            oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                            oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                            oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                            oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                            oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                            oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                            oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                            oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                            oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                            oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                            oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                            oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                            oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                            oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                            oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                            oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                            oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                            oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                            oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                            oLine.BilledAmount = Convert.ToDecimal(dtLines.Rows[i]["dBilliedAmount"]);
                            oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                            oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                            oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                            oLine.PatientResponsibility = Convert.ToDecimal(dtLines.Rows[i]["dPatientResponsibility"]);
                            oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                            oLine.ClinicID = ClinicID;
                            oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                            oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);


                            //Code added on 20090511 by - Sagar Ghodke
                            oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                            oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                            oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);
                            //End code add 20090511,Sagar Ghodke

                            oLine.IsHold = Convert.ToBoolean(dtLines.Rows[i]["bIsHold"]);
                            oLine.HoldReason = Convert.ToString(dtLines.Rows[i]["sHoldReason"]);

                            oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                            oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);


                            //Parent Parent Transaction Id and Parent Transaction Detail ID if Claim is splitted
                            oLine.ParentTransactionID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionID"]);
                            oLine.ParentTransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionDetailID"]);
                            oLine.IsLineSplitted = Convert.ToBoolean(dtLines.Rows[i]["bIsSplitted"]);

                            //Hold Fee-Schedule
                            oLine.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtLines.Rows[0]["nFeeScheduleType"]);
                            oLine.FeeScheduleID = Convert.ToInt64(dtLines.Rows[0]["nFeeScheduleID"]);
                            oLine.FacilityType = (FacilityType)Convert.ToInt16(dtLines.Rows[0]["nFacilityType"]);

                            //Code added on 20100819 by Sagar Ghodke 


                            //Added By mukesh on 12 Nov 2010
                            oLine.EMG = Convert.ToBoolean(dtLines.Rows[i]["bEMG"]);
                            //**



                            //Code added for NDC code fields
                            oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                            oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                            oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                            oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                            oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                            oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                            oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                            oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                            oLine.Prescription = Convert.ToString(dtLines.Rows[i]["Prescription"]);

                            if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                            { oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]); }
                            //End code added on 20100819 by Sagar Ghodke

                            oLine.RevenueCode = Convert.ToString(dtLines.Rows[i]["sRevenueCode"]);

                            //BL_Transaction_Lines_Notes
                            DataTable dtNotes = new DataTable();
                            oDBParameters.Clear();
                            //oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            //oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            //oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionID", Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDB.Retrive("BL_SELECT_Transaction_Lines_Notes", oDBParameters, out dtNotes);
                            //oDB.Retrive("BL_SELECT_Notes", oDBParameters, out dtNotes);

                            if (dtNotes != null)
                            {
                                Common.GeneralNote oLineNote = null;
                                for (int j = 0; j < dtNotes.Rows.Count; j++)
                                {
                                    oLineNote = new GeneralNote();
                                    oLineNote.TransactionID = TransactionID;
                                    oLineNote.TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    oLineNote.TransactionDetailID = Convert.ToInt64(dtNotes.Rows[j]["nTransactionDetailID"]);
                                    oLineNote.NoteID = Convert.ToInt64(dtNotes.Rows[j]["nNoteId"]);
                                    oLineNote.NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    oLineNote.BillingNoteType = (EOBPaymentSubType)(dtNotes.Rows[j]["nBillingNoteType"]);
                                    oLineNote.NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    oLineNote.UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    oLineNote.NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    oLineNote.ClinicID = ClinicID;
                                    oLineNote.StatementNoteDate = Convert.ToInt64(dtNotes.Rows[j]["nStatementNoteDate"]);
                                    if (dtNotes.Rows[j]["dtCreatedDateTime"] != DBNull.Value)
                                    {
                                        oLineNote.dtCreatedDatetime = Convert.ToDateTime(dtNotes.Rows[j]["dtCreatedDateTime"]);
                                    }
                                    oLine.LineNotes.Add(oLineNote);
                                    if (oLineNote != null)
                                    { oLineNote.Dispose(); }
                                }
                            }

                            // Added By Pramod Nair - To Set the Insurance From Master Object For Each Transaction Line 
                            oLine.InsuranceName = Convert.ToString(oTransaction.InsuranceName);
                            if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Primary.GetHashCode())
                            {
                                oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                            }
                            else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Secondary.GetHashCode())
                            {
                                oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                            }
                            else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Tertiary.GetHashCode())
                            {
                                oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                            }
                            else
                            {
                                oLine.InsurancePrimarySecondaryTertiary = "";
                            }

                            #region " Commented Insurance"

                            //if (dtInsurance != null)
                            //{
                            //    if (dtInsurance.Rows.Count > 0)
                            //    {
                            //        //Addded by Anil 20080912 

                            //        //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                            //        for (int j = 0; j < dtInsurance.Rows.Count; j++)
                            //        {
                            //            if (Convert.ToString(dtInsurance.Rows[j]["nTransactionLineNo"]) != "")
                            //            {
                            //                if (Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]) == oLine.TransactionLineId)
                            //                {
                            //                    oLine.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                            //                    oLine.InsuranceSelfMode = (PayerMode)Convert.ToInt32(dtInsurance.Rows[j]["nPaymentMode"]);

                            //                    gloPatient.gloInsurance ogloInsurance = new gloPatient.gloInsurance(_databaseconnectionstring);
                            //                    DataTable dtTempInsurance = new DataTable();
                            //                    //dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID);
                            //                    dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID, PatientID);
                            //                    if (dtTempInsurance != null && dtTempInsurance.Rows.Count > 0)
                            //                    {
                            //                        //Contact
                            //                        oLine.InsuranceName = Convert.ToString(dtTempInsurance.Rows[0]["Name"]);
                            //                        //Vinayak - Is Primary/secondary/tertiary
                            //                        if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Primary.GetHashCode())
                            //                        {
                            //                            oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                            //                        }
                            //                        else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Secondary.GetHashCode())
                            //                        {
                            //                            oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                            //                        }
                            //                        else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Tertiary.GetHashCode())
                            //                        {
                            //                            oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                            //                        }
                            //                        else
                            //                        {
                            //                            oLine.InsurancePrimarySecondaryTertiary = "";
                            //                        }

                            //                    }
                            //                    if (dtTempInsurance != null) { dtTempInsurance.Dispose(); }
                            //                    if (ogloInsurance != null) { ogloInsurance.Dispose(); }

                            //                }
                            //            }
                            //        }
                            //    }
                            //}

                            #endregion

                            //Transaction line is added in the Transaction
                            oTransaction.Lines.Add(oLine);
                        }
                    }
                }


                DataTable dtInsurancePlan = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_InsPlan", oDBParameters, out dtInsurancePlan);

                if (dtInsurancePlan != null)
                {
                    for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                    {
                        TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                        _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                        _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                        _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                        _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                        _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                        _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                        _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                        _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                        _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                        _TransactionInsurancePlan.CopayAmount = 0;
                        _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                        oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                    }
                }


                #region "HOLD Information"
                DataTable dtHold = null;
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionMasterID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_Select_HoldDetails", oDBParameters, out dtHold);
                if (dtHold != null && dtHold.Rows.Count > 0)
                {
                    oTransaction.Hold = new ClaimHold();
                    if (dtHold.Rows[0]["bIsHold"] != DBNull.Value && Convert.ToString(dtHold.Rows[0]["bIsHold"]).Trim() != "" && Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]))
                    {

                        oTransaction.Hold.HoldDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldDate"]);
                        oTransaction.Hold.HoldModDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldModifyDateTime"]);
                        oTransaction.Hold.HoldReason = Convert.ToString(dtHold.Rows[0]["sHoldReason"]);
                        oTransaction.Hold.HoldUserID = Convert.ToInt64(dtHold.Rows[0]["nHoldUserID"]);
                        oTransaction.Hold.IsHold = Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]);
                        oTransaction.Hold.HoldModUserID = Convert.ToInt64(dtHold.Rows[0]["ModifiedUserID"]);

                    }

                }
                dtHold = null;
                #endregion "HOLD Information"

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                dtTrans.Dispose();

                oDBParameters.Dispose();

                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }

            }
            return oTransaction;
        }
        public int CheckDxStatus(string sDxCode, int nICDRevision)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            object _result = null;
            int _nDX = 0;
            try
            {
                oDB.Connect(false);
                if (sDxCode.Contains("'"))
                {
                    sDxCode = sDxCode.Replace("'", "''");
                }
               
                   //_strSQL = "SELECT 1 as ICDType FROM dbo.ICD9 WHERE sICD9Code ='" + sDxCode + "'";
                   //_result = oDB.ExecuteScalar_Query(_strSQL);
                   //if (_result != null && Convert.ToString(_result) != "")
                   //{
                   //    _result = null;
                       if (nICDRevision == gloGlobal.gloICD.CodeRevision.ICD10.GetHashCode())
                       {
                           _strSQL = "SELECT 1 as ICDType FROM dbo.ICD9 WHERE sICD9Code ='" + sDxCode + "' AND isnull(nICDRevision,9)=" + gloGlobal.gloICD.CodeRevision.ICD10.GetHashCode();
                       }
                       else
                       {
                           _strSQL = "SELECT 1 as ICDType   FROM dbo.ICD9 WHERE sICD9Code ='" + sDxCode + "' AND isnull(nICDRevision,9)=" + gloGlobal.gloICD.CodeRevision.ICD9.GetHashCode();
                       }
                       _result = oDB.ExecuteScalar_Query(_strSQL);
                       if (_result != null && Convert.ToString(_result) != "")
                       {
                           _nDX = Convert.ToInt16(_result);
                       }
                   //}
                   //else
                   //{
                   //    _nDX = 1;
                   //}
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return _nDX;
        }
        public Transaction GetChargesClaimDetails(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataSet _dsClaimDetails = null;
            
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;

            try
            {
                oDBParameters.Add("@nTrackingTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Connect(false);
                oDB.Retrive("BL_GET_ModifyChargesData", oDBParameters, out _dsClaimDetails);
                oDB.Disconnect();

                if (_dsClaimDetails != null && _dsClaimDetails.Tables.Count > 0)
                {
                    DataTable dtTrans = null;
                    dtTrans = _dsClaimDetails.Tables[0];

                    DataTable dtBatchNo = null;
                    dtBatchNo = _dsClaimDetails.Tables[1];

                    DataTable dtClaimRefNo = null;
                    dtClaimRefNo = _dsClaimDetails.Tables[2];

                    DataTable dtBox19Notes = null;
                    dtBox19Notes = _dsClaimDetails.Tables[3];

                    DataTable dtClaim10dNotes = null;
                    dtClaim10dNotes = _dsClaimDetails.Tables[9];

                    #region " Set Claim Master Data "

                    if (dtTrans != null)
                    {
                        if (dtTrans.Rows.Count > 0)
                        {
                            oTransaction.TransactionID = TransactionID;
                            oTransaction.TransactionMasterID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionMasterID"]);
                            oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                            oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                            oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                            oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                            oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                            oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                            oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                            oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                            oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                            oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);

                            oTransaction.BatchNoPrefix = "Batch";
                            oTransaction.BatchNo = 0;

                            #region "Retrive Batch No"

                            if (dtBatchNo != null)
                            {
                                if (dtBatchNo.Rows.Count > 0)
                                {
                                    for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                    {
                                        if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                        {
                                            oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                        }
                                        if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                        {
                                            oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                        }
                                    }
                                }
                            }

                            #endregion

                            PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                            oTransaction.PatientID = PatientID;
                            oTransaction.PatientCode = Convert.ToString(dtTrans.Rows[0]["sPatientCode"]);
                            oTransaction.PatientName = Convert.ToString(dtTrans.Rows[0]["sPatientName"]);
                            oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                            string sProviderName = "";
                            DataTable _dtProvider = gloGlobal.gloPMMasters.GetProviders();
                            if (_dtProvider != null && _dtProvider.Rows.Count > 0)
                            {
                                DataRow[] dr = null;
                                dr = _dtProvider.Select(" nProviderID = " + Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]) + "");
                                if (dr != null && dr.Length > 0)
                                {
                                    sProviderName = Convert.ToString(dr[0]["sProviderName"]);
                                }
                            }

                            //oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                            oTransaction.ProviderName = sProviderName;
                            oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                            oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                            oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                            oTransaction.PrefixID = 0;
                            oTransaction.ClinicID = ClinicID;
                            oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);
                            oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                            oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                            oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                            oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                            oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                            oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);
                            oTransaction.CLIANumber = Convert.ToString(dtTrans.Rows[0]["sCLIANumber"]);
                            oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                            oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                            oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                            oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                            oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);
                            oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                            oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                            oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                            oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                            oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                            oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);
                            oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);
                            oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                            oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);
                            oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                            oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);
                            oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                            oTransaction.InsuranceID = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceID"]);
                            oTransaction.InsuranceName = Convert.ToString(dtTrans.Rows[0]["sInsuranceName"]);
                            oTransaction.InsuranceFlag = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceFlag"]);
                            oTransaction.ContactID = Convert.ToInt64(dtTrans.Rows[0]["nContactID"]);
                            oTransaction.ResponsibilityNo = Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityNo"]);
                            oTransaction.ResponsibilityType = ((PayerMode)Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityType"]));
                            oTransaction.SubClaimNo = Convert.ToString(dtTrans.Rows[0]["nSubClaimNo"]);
                            oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                            oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);

                            oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                            oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);
                            oTransaction.CloseDayTrayID = Convert.ToInt64(dtTrans.Rows[0]["nChargesDayTrayID"]);
                            oTransaction.CloseDayTrayCode = Convert.ToString(dtTrans.Rows[0]["sChargesTrayCode"]);
                            oTransaction.CloseDayTrayName = Convert.ToString(dtTrans.Rows[0]["sChargesTrayDescription"]);

                            //Parent Claim No and Parent Transaction Id if Claim is splitted
                            oTransaction.ParentTransactionID = Convert.ToInt64(dtTrans.Rows[0]["nParentTransactionID"]);
                            oTransaction.ParentClaimNo = Convert.ToString(dtTrans.Rows[0]["nParentClaimNo"]);


                            //Hold Fee-Schedule
                            oTransaction.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtTrans.Rows[0]["nFeeScheduleType"]);
                            oTransaction.FeeScheduleID = Convert.ToInt64(dtTrans.Rows[0]["nFeeScheduleID"]);
                            oTransaction.FacilityType = (FacilityType)Convert.ToInt16(dtTrans.Rows[0]["nFacilityType"]);

                            oTransaction.MainClaimNo = Convert.ToString(dtTrans.Rows[0]["sMainClaimNo"]);

                            //MaheshB 20100426 gloPM5040
                            oTransaction.IsRebill = Convert.ToBoolean(dtTrans.Rows[0]["bIsRebilled"]);

                            oTransaction.nICDRevision = Convert.ToInt16(dtTrans.Rows[0]["nICDRevision"]);

                            //Debasish Das 20100508 gloPM5040
                            if (Convert.ToInt16(dtTrans.Rows[0]["ParentClaimStatus"]) == (Int16)TransactionStatus.Resent)
                            {
                                oTransaction.IsResend = true;
                            }
                            else
                            {
                                oTransaction.IsResend = false;
                            }
                            //**
                            //Debasish Das 20100514 gloPM5040
                            if (Convert.ToString(dtTrans.Rows[0]["bIsVoid"]).ToLower() == Boolean.TrueString.ToLower())
                            {
                                oTransaction.IsVoid = true;
                                oTransaction.VoidedDate = Convert.ToDateTime(dtTrans.Rows[0]["dtVoidDate"]);
                                oTransaction.VoidByID = Convert.ToInt64(dtTrans.Rows[0]["nVoidUserID"]);
                                oTransaction.VoidByName = Convert.ToString(dtTrans.Rows[0]["sVoidUserName"]);
                                oTransaction.nVoidedDate = Convert.ToInt64(dtTrans.Rows[0]["nVoidCloseDate"]);
                                oTransaction.VoidedTrayID = Convert.ToInt64(dtTrans.Rows[0]["nVoidTrayID"]);
                            }
                            else
                            {
                                oTransaction.IsVoid = false;
                            }
                            if (Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityType"])==PayerMode.BadDebt.GetHashCode())
                            {
                                oTransaction.IsBadDebt = true;
                            }
                            else
                            {
                                oTransaction.IsBadDebt = false;
                            }

                            //**
                            //Debasish Das 20100514 gloPM5040
                            oTransaction.IsSameAsBillingProvider = Convert.ToBoolean(dtTrans.Rows[0]["bSameAsBillingProvider"]);
                            //**

                            //Debasish Das 20100616 gloPM5040
                            oTransaction.ReferalProviderID_New = Convert.ToInt64(dtTrans.Rows[0]["nReferralProviderID"]);
                            //**


                            oTransaction.IsReplacementClaim = Convert.ToBoolean(dtTrans.Rows[0]["bIsReplacementClaim"]);

                            #region "Retreive Claim Ref. No."
                                                      
                            string _strClaimRefNo = "";
                            if (dtClaimRefNo != null)
                            {
                                if (dtClaimRefNo.Rows.Count > 0)
                                {
                                    _strClaimRefNo = Convert.ToString(dtClaimRefNo.Rows[0]["sClaimRemittanceRefNo"]); ;

                                }
                            }
                            dtClaimRefNo.Dispose();
                            oTransaction.sClaimRefNo = _strClaimRefNo;
                            #endregion

                            #region "Retreive Box19 Message- Resubmission Note"
                            
                            if (dtBox19Notes != null)
                            {
                                if (dtBox19Notes.Rows.Count > 0)
                                {
                                    oTransaction.ClaimBox19Notes = new ClaimBox19Notes();
                                    for (int j = 0; j < dtBox19Notes.Rows.Count; j++)
                                    {
                                        oTransaction.ClaimBox19Note = new ClaimBox19Note();
                                        oTransaction.ClaimBox19Note.TransactionID = TransactionID;
                                        oTransaction.ClaimBox19Note.NoteID = Convert.ToInt64(dtBox19Notes.Rows[j]["nNoteId"]);
                                        oTransaction.ClaimBox19Note.NoteType = (NoteType)(dtBox19Notes.Rows[j]["nNoteType"]);
                                        oTransaction.ClaimBox19Note.BillingNoteType = (EOBPaymentSubType)(dtBox19Notes.Rows[j]["nBillingNoteType"]);
                                        oTransaction.ClaimBox19Note.NoteDate = Convert.ToInt64(dtBox19Notes.Rows[j]["nNoteDateTime"]);
                                        oTransaction.ClaimBox19Note.UserID = Convert.ToInt64(dtBox19Notes.Rows[j]["nUserID"]);
                                        oTransaction.ClaimBox19Note.Box19NoteDescription = Convert.ToString(dtBox19Notes.Rows[j]["sNoteDescription"]);
                                        oTransaction.ClaimBox19Note.ClinicID = ClinicID;
                                        oTransaction.ClaimBox19Note.IsReplacementClaim = oTransaction.IsReplacementClaim;
                                        oTransaction.ClaimBox19Note.sClaimRemittRefNo = _strClaimRefNo;
                                        oTransaction.ClaimBox19Notes.Add(oTransaction.ClaimBox19Note);
                                    }
                                }
                                else if (_strClaimRefNo != "")
                                {
                                    oTransaction.ClaimBox19Notes = new ClaimBox19Notes();
                                    oTransaction.ClaimBox19Note = new ClaimBox19Note();
                                    oTransaction.ClaimBox19Note.TransactionID = TransactionID;
                                    oTransaction.ClaimBox19Note.sClaimRemittRefNo = _strClaimRefNo;
                                    oTransaction.ClaimBox19Notes.Add(oTransaction.ClaimBox19Note);
                                }
                            }
                            dtBox19Notes.Dispose();

                            #endregion

                            #region "Retrieve Claim10d Note"

                            if (dtClaim10dNotes != null)
                            {
                                if (dtClaim10dNotes.Rows.Count > 0)
                                {
                                       oTransaction.ClaimBox10dNote = Convert.ToString(dtClaim10dNotes.Rows[0]["sNoteDescription"]);
                                }
                            }
                            dtClaim10dNotes.Dispose();

                            #endregion "Retrieve Claim10d Note"


                            //Added By mukesh on 12 Nov 2010
                            oTransaction.IllnessDate = Convert.ToInt64(dtTrans.Rows[0]["nIllnessDate"]);
                            //**
                            oTransaction.LastSeenDate = Convert.ToInt64(dtTrans.Rows[0]["nLastSeenDate"]);

                            if (dtTrans.Rows[0]["sProviderQualifier"] != null && Convert.ToString(dtTrans.Rows[0]["sProviderQualifier"]).Trim() != "")
                            { oTransaction.ProviderQualifierCode = Convert.ToString(dtTrans.Rows[0]["sProviderQualifier"]); }

                            if (dtTrans.Rows[0]["sBox14DateQualifier"] != null && Convert.ToString(dtTrans.Rows[0]["sBox14DateQualifier"]).Trim() != "")
                            { oTransaction.ClaimBox14QualifierCode = Convert.ToString(dtTrans.Rows[0]["sBox14DateQualifier"]); }


                            if (dtTrans.Rows[0]["sBox15DateQualifier"] != null && Convert.ToString(dtTrans.Rows[0]["sBox15DateQualifier"]).Trim() != "")
                            { oTransaction.ClaimBox15QualifierCode = Convert.ToString(dtTrans.Rows[0]["sBox15DateQualifier"]); }

                            if (dtTrans.Rows[0]["dtBox15Date"] != null && dtTrans.Rows[0]["dtBox15Date"] != DBNull.Value && Convert.ToDateTime(dtTrans.Rows[0]["dtBox15Date"]) != DateTime.MinValue)
                            { oTransaction.ClaimBox15Date = Convert.ToDateTime(dtTrans.Rows[0]["dtBox15Date"]); }

                            //add on 20110630 by Mahesh Nawal for 6031
                            oTransaction.DelayReasonCodeID = Convert.ToString(dtTrans.Rows[0]["sDelayReasonCodeID"]).Trim();
                            oTransaction.ServiceAuthExceCode = Convert.ToString(dtTrans.Rows[0]["sServiceAuthExceCode"]).Trim();
                            oTransaction.MedicaidResubmissioncode = Convert.ToString(dtTrans.Rows[0]["sMedicaidResubmissionCode"]).Trim();


                            //Added by Subashish_b on 16/May/2011  for  assigning the PAF values to object while saving.
                            oTransaction.PAccountID = Convert.ToInt64(dtTrans.Rows[0]["nPAccountID"]);
                            oTransaction.AccountPatientID = Convert.ToInt64(dtTrans.Rows[0]["nAccountPatientID"]);
                            oTransaction.GuarantorID = Convert.ToInt64(dtTrans.Rows[0]["nGuarantorID"]);
                            //End

                            oTransaction.CaseID = Convert.ToInt64(dtTrans.Rows[0]["nCaseID"]);
                            oTransaction.CaseName = Convert.ToString(dtTrans.Rows[0]["sCaseName"]);

                            oTransaction.bIsRefprovAsSupervisor = Convert.ToBoolean(dtTrans.Rows[0]["bIsRefProvAsSupervisor"]);

                            if (dtTrans.Rows[0]["dtInitTreatmentDate"] != DBNull.Value)
                            {
                                oTransaction.dtInitTreatmentDate = Convert.ToDateTime(dtTrans.Rows[0]["dtInitTreatmentDate"]);
                            }

                            oTransaction.ClaimEPSDT = new EPSDTFamilyPlanningClaim
                            {
                                ClaimIncludeEPSDTScreening = Convert.ToBoolean(dtTrans.Rows[0]["bIsEPSDTScreening"]),
                                PatientGivenEPSDTReferral = Convert.ToBoolean(dtTrans.Rows[0]["bIsEPSDTReferral"]),
                                ReferralType = Convert.ToString(dtTrans.Rows[0]["sReferralType"]),
                                ReferralCode = Convert.ToString(dtTrans.Rows[0]["sReferralCode"])

                            };
                            if (dtTrans.Rows[0]["sPWKReportTypeCode"] != null && Convert.ToString(dtTrans.Rows[0]["sPWKReportTypeCode"]).Trim() != "")
                            { oTransaction.PWKReportTypeCode = Convert.ToString(dtTrans.Rows[0]["sPWKReportTypeCode"]); }

                            if (dtTrans.Rows[0]["sPWKReportTransmissionCode"] != null && Convert.ToString(dtTrans.Rows[0]["sPWKReportTransmissionCode"]).Trim() != "")
                            { oTransaction.PWKReportTransmissionCode = Convert.ToString(dtTrans.Rows[0]["sPWKReportTransmissionCode"]); }

                            if (dtTrans.Rows[0]["sPWKAttachmentControlNumber"] != null && Convert.ToString(dtTrans.Rows[0]["sPWKAttachmentControlNumber"]).Trim() != "")
                            { oTransaction.PWKAttachmentControlNumber = Convert.ToString(dtTrans.Rows[0]["sPWKAttachmentControlNumber"]); }

                            if (dtTrans.Rows[0]["sMammogramCertNumber"] != null && Convert.ToString(dtTrans.Rows[0]["sMammogramCertNumber"]).Trim() != "")
                            { oTransaction.MammogramCertNumber = Convert.ToString(dtTrans.Rows[0]["sMammogramCertNumber"]); }
                            if (dtTrans.Rows[0]["sIDENo"] != null && Convert.ToString(dtTrans.Rows[0]["sIDENo"]).Trim() != "")
                            { oTransaction.IDENo = Convert.ToString(dtTrans.Rows[0]["sIDENo"]); }

                        }
                    }
                    dtTrans.Dispose();

                    #endregion " Set Claim Master Data "

                    DataTable dtLines = null;
                    dtLines = _dsClaimDetails.Tables[4];

                    DataTable dtNotes = null;
                    dtNotes = _dsClaimDetails.Tables[5];

                    #region " Set Claim Lines Data "

                    if (dtLines != null)
                    {
                        if (dtLines.Rows.Count > 0)
                        {
                            for (int i = 0; i < dtLines.Rows.Count; i++)
                            {

                                oLine = new TransactionLine();
                                oLine.TransactionId = TransactionID;
                                oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                                oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);
                                oLine.TransactionMasterID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterID"]);
                                oLine.TransactionMasterDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterDetailID"]);
                                oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                                if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                                {
                                    oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                                }
                                else
                                {
                                    oLine.DateServiceTillIsNull = true;
                                    oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                                }

                                oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                                oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                                oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                                oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                                oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                                oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                                oLine.CrosswalkCPTCode = dtLines.Rows[i]["sCrossWalkCPTCode"].ToString();
                                oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                                oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                                oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                                oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                                oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                                oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                                oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                                oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                                oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                                oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                                oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                                oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                                oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                                oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                                oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                                oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                                oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                                oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                                oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                                oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                                oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                                oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                                oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                                oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                                oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                                oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                                oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                                oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                                oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                                oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                                oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                                oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                                oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                                oLine.BilledAmount = Convert.ToDecimal(dtLines.Rows[i]["dBilliedAmount"]);
                                oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                                oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                                oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                                oLine.PatientResponsibility = Convert.ToDecimal(dtLines.Rows[i]["dPatientResponsibility"]);
                                oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                                oLine.ClinicID = ClinicID;
                                oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                                oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);
                                oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                                oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                                oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);
                                oLine.IsHold = Convert.ToBoolean(dtLines.Rows[i]["bIsHold"]);
                                oLine.HoldReason = Convert.ToString(dtLines.Rows[i]["sHoldReason"]);
                                oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                                oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);
                                oLine.ParentTransactionID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionID"]);
                                oLine.ParentTransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionDetailID"]);
                                oLine.IsLineSplitted = Convert.ToBoolean(dtLines.Rows[i]["bIsSplitted"]);
                                oLine.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtLines.Rows[0]["nFeeScheduleType"]);
                                oLine.FeeScheduleID = Convert.ToInt64(dtLines.Rows[0]["nFeeScheduleID"]);
                                oLine.FacilityType = (FacilityType)Convert.ToInt16(dtLines.Rows[0]["nFacilityType"]);
                                oLine.EMG = Convert.ToBoolean(dtLines.Rows[i]["bEMG"]);
                                oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                                oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                                oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                                oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                                oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                                oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                                oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                                oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                                oLine.Prescription = Convert.ToString(dtLines.Rows[i]["Prescription"]);
                                oLine.PrescriptionDescription = Convert.ToString(dtLines.Rows[i]["sPrescriptionDesc"]);

                                if (Convert.ToInt64(dtLines.Rows[i]["nAnesthesiaID"]) != 0)
                                    oLine.bIsAneshtesia = true;
                                else
                                    oLine.bIsAneshtesia = false;

                                oLine.AnesthesiaID = Convert.ToInt64(dtLines.Rows[i]["nAnesthesiaID"]);
                                oLine.AnesthesiaStartTime = Convert.ToDateTime(dtLines.Rows[i]["dtStartDateTime"]);
                                oLine.AnesthesiaEndTime = Convert.ToDateTime(dtLines.Rows[i]["dtEndDateTime"]);
                                oLine.AnesthesiaTotalMinutes = Convert.ToInt64(dtLines.Rows[i]["nTotalMinutes"]);
                                oLine.AnesthesiaMinPerUnit = Convert.ToInt64(dtLines.Rows[i]["dMinPerUnit"]);
                                oLine.AnesthesiaTimeUnits =FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dTimeUnits"]));
                                oLine.AnesthesiaBaseUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dBaseUnits"]));
                                oLine.AnesthesiaOtherUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dOtherUnits"]));
                                oLine.AnesthesiaTotalUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dTotalUnits"]));
                                oLine.bIsAutoCalculateAnesthesia = Convert.ToBoolean(dtLines.Rows[i]["bIsAutoCalculate"]);

                                if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                                { oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]); }
                                oLine.RevenueCode = Convert.ToString(dtLines.Rows[i]["sRevenueCode"]);
                                
                                

                                if (dtNotes != null && dtNotes.Rows.Count > 0)
                                {
                                    DataRow[] _drNotes = null;
                                    Common.GeneralNote oLineNote = null;

                                    //...Notes data table has notes for all the lines, so need to filter line wise
                                    string _notesFilter = " nTransactionID = "+oLine.TransactionMasterID+" AND "+
                                                          " nTransactionDetailID = " + oLine.TransactionMasterDetailID + " ";
                                    _drNotes = dtNotes.Select(_notesFilter);

                                    if (_drNotes != null && _drNotes.Length > 0)
                                    {
                                        foreach (DataRow drNote in _drNotes)
                                        {
                                            oLineNote = new GeneralNote();
                                            oLineNote.TransactionID = TransactionID;
                                            oLineNote.TransactionLineId = Convert.ToInt64(drNote["nLineNo"]);
                                            oLineNote.TransactionDetailID = Convert.ToInt64(drNote["nTransactionDetailID"]);
                                            oLineNote.NoteID = Convert.ToInt64(drNote["nNoteId"]);
                                            oLineNote.NoteType = (NoteType)(drNote["nNoteType"]);
                                            oLineNote.BillingNoteType = (EOBPaymentSubType)(drNote["nBillingNoteType"]);
                                            oLineNote.NoteDate = Convert.ToInt64(drNote["nNoteDateTime"]);
                                            oLineNote.UserID = Convert.ToInt64(drNote["nUserID"]);
                                            oLineNote.NoteDescription = Convert.ToString(drNote["sNoteDescription"]);
                                            oLineNote.ClinicID = ClinicID;
                                            oLineNote.StatementNoteDate = Convert.ToInt64(drNote["nStatementNoteDate"]);
                                            if (drNote["dtCreatedDateTime"] != DBNull.Value)
                                            {
                                                oLineNote.dtCreatedDatetime = Convert.ToDateTime(drNote["dtCreatedDateTime"]);
                                            }
                                          
                                            oLine.LineNotes.Add(oLineNote);
                                            if (oLineNote != null)
                                            { oLineNote.Dispose(); }
                                        }

                                        _drNotes = null;
                                    }
                                }

                                // Added By Pramod Nair - To Set the Insurance From Master Object For Each Transaction Line 
                                oLine.InsuranceName = Convert.ToString(oTransaction.InsuranceName);
                                if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Primary.GetHashCode())
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                                }
                                else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Secondary.GetHashCode())
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                                }
                                else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Tertiary.GetHashCode())
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                                }
                                else
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = "";
                                }

                                oLine.ServiceIsTheScreening = Convert.ToBoolean(dtLines.Rows[i]["bIsServiceScreening"]);
                                oLine.ServiceIsTheResultOfScreening = Convert.ToBoolean(dtLines.Rows[i]["bIsServiceResultofScreening"]);
                                oLine.ServiceFamilyPlanningIndicator = Convert.ToBoolean(dtLines.Rows[i]["bIsFamilyPlanningIndicator"]);

                                oTransaction.Lines.Add(oLine);
                            }
                        }
                    }

                    #endregion " Set Claim Lines Data "

                    DataTable dtInsurancePlan = null;
                    dtInsurancePlan = _dsClaimDetails.Tables[6];

                    #region " Set claim insurance plans "

                    if (dtInsurancePlan != null)
                    {
                        for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                        {
                            TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                            _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                            _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                            _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                            _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                            _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                            _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                            _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                            _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                            _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                            _TransactionInsurancePlan.CopayAmount = 0;
                            _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                            _TransactionInsurancePlan.IsInstitutional = Convert.ToBoolean(dtInsurancePlan.Rows[i]["IsInstitutionalBilling"]);
                            oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                        }
                    }

                    #endregion " Set claim insurance plans "

                    DataTable dtHold = null;
                    dtHold = _dsClaimDetails.Tables[7];

                    #region "Set Hold Information"
                    
                    if (dtHold != null && dtHold.Rows.Count > 0)
                    {
                        oTransaction.Hold = new ClaimHold();
                        if (dtHold.Rows[0]["bIsHold"] != DBNull.Value && Convert.ToString(dtHold.Rows[0]["bIsHold"]).Trim() != "" && Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]))
                        {

                            oTransaction.Hold.HoldDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldDate"]);
                            oTransaction.Hold.HoldModDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldModifyDateTime"]);
                            oTransaction.Hold.HoldReason = Convert.ToString(dtHold.Rows[0]["sHoldReason"]);
                            oTransaction.Hold.HoldUserID = Convert.ToInt64(dtHold.Rows[0]["nHoldUserID"]);
                            oTransaction.Hold.IsHold = Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]);
                            oTransaction.Hold.HoldModUserID = Convert.ToInt64(dtHold.Rows[0]["ModifiedUserID"]);
                            oTransaction.Hold.HoldID = Convert.ToInt64(dtHold.Rows[0]["nHoldBillingID"]);

                        }

                    }
                    dtHold = null;

                    #endregion "Set Hold Information"

                    #region "Check Is claim Splitted "

                    oTransaction.IsClaimSplitted = false;

                    DataTable dtIsSplitClaim = null;
                    dtIsSplitClaim = _dsClaimDetails.Tables[8];
                    if (dtIsSplitClaim != null && dtIsSplitClaim.Rows.Count > 0)
                    {
                        if (Convert.ToInt64(dtIsSplitClaim.Rows[0]["NoofSplitClaims"]) > 0)
                        {
                            oTransaction.IsClaimSplitted = true;
                        }
                    }

                    #endregion

                    DataTable dtClaimReportingCategory = _dsClaimDetails.Tables[10];
                    if (dtClaimReportingCategory != null && dtClaimReportingCategory.Rows.Count > 0)
                    {
                        oTransaction.nClaimCategoryID = Convert.ToInt64(dtClaimReportingCategory.Rows[0]["nClaimReportingCategoryID"]);
                    }

                    //..Dispose data table variables
                    if (dtHold != null) { dtHold.Dispose(); }
                    if (dtInsurancePlan != null) { dtInsurancePlan.Dispose(); }
                    if (dtNotes != null) { dtNotes.Dispose(); }
                    if (dtLines != null) { dtLines.Dispose(); }
                    if (dtBox19Notes != null) { dtBox19Notes.Dispose(); }
                    if (dtClaimRefNo != null) { dtClaimRefNo.Dispose(); }
                    if (dtBatchNo != null) { dtBatchNo.Dispose(); }
                    if (dtTrans != null) { dtTrans.Dispose(); }
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (_dsClaimDetails != null) { _dsClaimDetails.Dispose(); }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                oDBParameters.Dispose();
            }
            return oTransaction;
        }

        public Transaction GetChargesClaimDetails(ref SplitClaimDetails oSpiltClaimDetails)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;
            Int64 TransactionID = 0;
            Int64 ClinicID = 0;

            try
            {
                TransactionID = oSpiltClaimDetails.TransactionID;
                ClinicID = oSpiltClaimDetails.ClinicID;

                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                if (oSpiltClaimDetails.UseExtSqlConnection == false)
                {
                    oDB.Connect(false);
                    oDB.Retrive("BL_SELECT_Transaction_Claim_MST", oDBParameters, out dtTrans);
                }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = oSpiltClaimDetails.ExtSqlConnection;
                        _sqlCommand.Transaction = oSpiltClaimDetails.ExtSqlTransaction;
                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                        _sqlCommand.CommandText = "BL_SELECT_Transaction_Claim_MST";

                        SqlDataAdapter _dataAdapter = new SqlDataAdapter(_sqlCommand);
                        DataSet _dataset = new DataSet();
                        _dataAdapter.Fill(_dataset);
                        if (_dataset.Tables[0] != null)
                        { dtTrans = _dataset.Tables[0].Copy(); }
                        if (_dataAdapter != null) { _dataAdapter.Dispose(); }
                        if (_dataset != null) { _dataset.Dispose(); }
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }

                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.TransactionMasterID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionMasterID"]);
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);

                        oTransaction.BatchNoPrefix = "Batch";
                        oTransaction.BatchNo = 0;

                        #region "Retrive Batch No"

                        DataTable dtBatchNo = new DataTable();
                        string _strSQLBatchNo = "";
                        _strSQLBatchNo = "SELECT  TOP 1   BL_Batch_MST.sBatchNoPrefix, BL_Batch_MST.nBatchNo " +
                        " FROM BL_Batch_DTL WITH (NOLOCK) INNER JOIN BL_Batch_MST  WITH (NOLOCK) ON BL_Batch_DTL.nBatchID = BL_Batch_MST.nBatchID " +
                        " WHERE (BL_Batch_DTL.nTransactionID = " + TransactionID + ") ";

                        if (oSpiltClaimDetails.UseExtSqlConnection == false)
                        {
                            oDB.Retrive_Query(_strSQLBatchNo, out dtBatchNo);
                        }
                        else
                        {
                            using (SqlCommand _sqlCommand = new SqlCommand())
                            {
                                _sqlCommand.Connection = oSpiltClaimDetails.ExtSqlConnection;
                                _sqlCommand.Transaction = oSpiltClaimDetails.ExtSqlTransaction;
                                _sqlCommand.CommandType = CommandType.Text;
                                _sqlCommand.CommandText = _strSQLBatchNo;

                                SqlDataAdapter _dataAdapter = new SqlDataAdapter(_sqlCommand);
                                DataSet _dataset = new DataSet();
                                _dataAdapter.Fill(_dataset);
                                if (_dataset.Tables[0] != null)
                                { dtBatchNo = _dataset.Tables[0].Copy(); }
                                if (_dataAdapter != null) { _dataAdapter.Dispose(); }
                                if (_dataset != null) { _dataset.Dispose(); }
                            }
                        }

                        if (dtBatchNo != null)
                        {
                            if (dtBatchNo.Rows.Count > 0)
                            {
                                for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                {
                                    if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                    }
                                    if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                    {
                                        oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                    }
                                }
                            }
                            dtBatchNo.Dispose();
                            dtBatchNo = null;
                        }
                        #endregion

                        PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.PatientID = PatientID;
                        oTransaction.PatientCode = Convert.ToString(dtTrans.Rows[0]["sPatientCode"]);
                        oTransaction.PatientName = Convert.ToString(dtTrans.Rows[0]["sPatientName"]); 
                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                        oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0;
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);
                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);
                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                        oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);
                        oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                        oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                        oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                        oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);
                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);
                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);
                        oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                        oTransaction.InsuranceID = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceID"]);
                        oTransaction.InsuranceName = Convert.ToString(dtTrans.Rows[0]["sInsuranceName"]);
                        oTransaction.InsuranceFlag = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceFlag"]);
                        oTransaction.ContactID = Convert.ToInt64(dtTrans.Rows[0]["nContactID"]);
                        oTransaction.ResponsibilityNo = Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityNo"]);
                        oTransaction.ResponsibilityType = ((PayerMode)Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityType"]));
                        oTransaction.SubClaimNo = Convert.ToString(dtTrans.Rows[0]["nSubClaimNo"]);
                        oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);

                        oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);
                        oTransaction.CloseDayTrayID = Convert.ToInt64(dtTrans.Rows[0]["nChargesDayTrayID"]);
                        oTransaction.CloseDayTrayCode = Convert.ToString(dtTrans.Rows[0]["sChargesTrayCode"]);
                        oTransaction.CloseDayTrayName = Convert.ToString(dtTrans.Rows[0]["sChargesTrayDescription"]);

                        //Parent Claim No and Parent Transaction Id if Claim is splitted
                        oTransaction.ParentTransactionID = Convert.ToInt64(dtTrans.Rows[0]["nParentTransactionID"]);
                        oTransaction.ParentClaimNo = Convert.ToString(dtTrans.Rows[0]["nParentClaimNo"]);


                        //Hold Fee-Schedule
                        oTransaction.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtTrans.Rows[0]["nFeeScheduleType"]);
                        oTransaction.FeeScheduleID = Convert.ToInt64(dtTrans.Rows[0]["nFeeScheduleID"]);
                        oTransaction.FacilityType = (FacilityType)Convert.ToInt16(dtTrans.Rows[0]["nFacilityType"]);

                        oTransaction.MainClaimNo = Convert.ToString(dtTrans.Rows[0]["sMainClaimNo"]);

                        //MaheshB 20100426 gloPM5040
                        oTransaction.IsRebill = Convert.ToBoolean(dtTrans.Rows[0]["bIsRebilled"]);

                        //Debasish Das 20100508 gloPM5040
                        if (Convert.ToInt16(dtTrans.Rows[0]["ParentClaimStatus"]) == (Int16)TransactionStatus.Resent)
                        {
                            oTransaction.IsResend = true;
                        }
                        else
                        {
                            oTransaction.IsResend = false;
                        }
                        //**
                        //Debasish Das 20100514 gloPM5040
                        if (Convert.ToString(dtTrans.Rows[0]["bIsVoid"]).ToLower() == Boolean.TrueString.ToLower())
                        {
                            oTransaction.IsVoid = true;
                        }
                        else
                        {
                            oTransaction.IsVoid = false;
                        }

                        //**
                        //Debasish Das 20100514 gloPM5040
                        oTransaction.IsSameAsBillingProvider = Convert.ToBoolean(dtTrans.Rows[0]["bSameAsBillingProvider"]);
                        //**

                        //Debasish Das 20100616 gloPM5040
                        oTransaction.ReferalProviderID_New = Convert.ToInt64(dtTrans.Rows[0]["nReferralProviderID"]);
                        //**
                        oTransaction.IsReplacementClaim = Convert.ToBoolean(dtTrans.Rows[0]["bIsReplacementClaim"]);


                        //Added By mukesh on 12 Nov 2010
                        oTransaction.IllnessDate = Convert.ToInt64(dtTrans.Rows[0]["nIllnessDate"]);
                        //**

                        oTransaction.LastSeenDate = Convert.ToInt64(dtTrans.Rows[0]["nLastSeenDate"]);
                        oTransaction.ProviderQualifierCode = Convert.ToString(dtTrans.Rows[0]["sProviderQualifier"]);
                        oTransaction.ClaimBox15QualifierCode = Convert.ToString(dtTrans.Rows[0]["sBox15DateQualifier"]);
                        oTransaction.ClaimBox15Date = Convert.ToDateTime(dtTrans.Rows[0]["dtBox15Date"]);

                        //add on 20110630 by Mahesh Nawal for 6031
                        oTransaction.DelayReasonCodeID = Convert.ToString(dtTrans.Rows[0]["sDelayReasonCodeID"]).Trim();

                        oTransaction.ServiceAuthExceCode = Convert.ToString(dtTrans.Rows[0]["sServiceAuthExceCode"]).Trim();

                        oTransaction.bIsRefprovAsSupervisor = Convert.ToBoolean(dtTrans.Rows[0]["bIsRefProvAsSupervisor"]);

                        //Added by Subashish_b on 16/May/2011  for  assigning the PAF values to object while saving.
                        oTransaction.PAccountID = Convert.ToInt64(dtTrans.Rows[0]["nPAccountID"]);
                        oTransaction.AccountPatientID = Convert.ToInt64(dtTrans.Rows[0]["nAccountPatientID"]);
                        oTransaction.GuarantorID = Convert.ToInt64(dtTrans.Rows[0]["nGuarantorID"]);
                        //End
                    }
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                

                #region " Commented Insurance"

                ////BL_Transaction_MST_Ins
                //DataTable dtInsurance = new DataTable();
                //oTransaction.Insurances = new TransactionInsurances();

                //oDBParameters.Clear();
                //oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                //oDB.Retrive("BL_SELECT_Transaction_MST_Ins", oDBParameters, out dtInsurance);

                #endregion

                //BL_Transaction_Lines
                DataTable dtLines = new DataTable();

                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineNo", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nContactID", oTransaction.ContactID, ParameterDirection.Input, SqlDbType.BigInt);

                if (oSpiltClaimDetails.UseExtSqlConnection == false)
                { oDB.Retrive("BL_SELECT_Charges_Claim_Lines", oDBParameters, out dtLines); }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = oSpiltClaimDetails.ExtSqlConnection;
                        _sqlCommand.Transaction = oSpiltClaimDetails.ExtSqlTransaction;
                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                        _sqlCommand.CommandText = "BL_SELECT_Charges_Claim_Lines";

                        SqlDataAdapter _dataAdapter = new SqlDataAdapter(_sqlCommand);
                        DataSet _dataset = new DataSet();
                        _dataAdapter.Fill(_dataset);
                        if (_dataset.Tables[0] != null)
                        { dtLines = _dataset.Tables[0].Copy(); }
                        if (_dataAdapter != null) { _dataAdapter.Dispose(); }
                        if (_dataset != null) { _dataset.Dispose(); }
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }

                if (dtLines != null)
                {
                    if (dtLines.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtLines.Rows.Count; i++)
                        {

                            oLine = new TransactionLine();
                            oLine.TransactionId = TransactionID;
                            oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                            oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);

                            oLine.TransactionMasterID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterID"]);
                            oLine.TransactionMasterDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterDetailID"]);

                            oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            
                            if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                            {
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                            }
                            else
                            {
                                oLine.DateServiceTillIsNull = true;
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            }

                            oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                            oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                            oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                            oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                            oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                            oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                            oLine.CrosswalkCPTCode = dtLines.Rows[i]["sCrossWalkCPTCode"].ToString();
                            oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                            oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                            oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                            oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                            oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                            oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                            oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                            oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                            oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                            oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                            oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                            oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                            oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                            oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                            oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                            oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                            oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                            oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                            oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                            oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                            oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                            oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                            oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                            oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                            oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                            oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                            oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                            oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                            oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                            oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                            oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                            oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                            oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                            oLine.BilledAmount = Convert.ToDecimal(dtLines.Rows[i]["dBilliedAmount"]);
                            oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                            oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                            oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                            oLine.PatientResponsibility = Convert.ToDecimal(dtLines.Rows[i]["dPatientResponsibility"]);
                            oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                            oLine.ClinicID = ClinicID;
                            oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                            oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);


                            //Code added on 20090511 by - Sagar Ghodke
                            oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                            oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                            oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);
                            //End code add 20090511,Sagar Ghodke

                            oLine.IsHold = Convert.ToBoolean(dtLines.Rows[i]["bIsHold"]);
                            oLine.HoldReason = Convert.ToString(dtLines.Rows[i]["sHoldReason"]);

                            oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                            oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);


                            //Parent Parent Transaction Id and Parent Transaction Detail ID if Claim is splitted
                            oLine.ParentTransactionID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionID"]);
                            oLine.ParentTransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionDetailID"]);
                            oLine.IsLineSplitted = Convert.ToBoolean(dtLines.Rows[i]["bIsSplitted"]);

                            //Hold Fee-Schedule
                            oLine.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtLines.Rows[0]["nFeeScheduleType"]);
                            oLine.FeeScheduleID = Convert.ToInt64(dtLines.Rows[0]["nFeeScheduleID"]);
                            oLine.FacilityType = (FacilityType)Convert.ToInt16(dtLines.Rows[0]["nFacilityType"]);

                            //Added By mukesh on 12 Nov 2010
                            oLine.EMG = Convert.ToBoolean(dtLines.Rows[i]["bEMG"]);
                            //**


                            //Code added on 20100819 by Sagar Ghodke 
                            //Code added for NDC code fields
                            oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                            oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                            oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                            oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                            oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                            oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                            oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                            oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                            oLine.Prescription = Convert.ToString(dtLines.Rows[i]["Prescription"]);

                            if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                            {
                                oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]);
                            }
                            //End code added on 20100819 by Sagar Ghodke

                            //BL_Transaction_Lines_Notes
                            DataTable dtNotes = new DataTable();

                            oDBParameters.Clear();
                            oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionID", Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                            if (oSpiltClaimDetails.UseExtSqlConnection == false)
                            { oDB.Retrive("BL_SELECT_Transaction_Lines_Notes", oDBParameters, out dtNotes); }
                            else
                            {
                                using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                                {
                                    _sqlCommand.Connection = oSpiltClaimDetails.ExtSqlConnection;
                                    _sqlCommand.Transaction = oSpiltClaimDetails.ExtSqlTransaction;
                                    _sqlCommand.CommandType = CommandType.StoredProcedure;
                                    _sqlCommand.CommandText = "BL_SELECT_Transaction_Lines_Notes";

                                    SqlDataAdapter _dataAdapter = new SqlDataAdapter(_sqlCommand);
                                    DataSet _dataset = new DataSet();
                                    _dataAdapter.Fill(_dataset);
                                    if (_dataset.Tables[0] != null)
                                    { dtNotes = _dataset.Tables[0]; }
                                    if (_dataAdapter != null) { _dataAdapter.Dispose(); }
                                    if (_dataset != null) { _dataset.Dispose(); }
                                    if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                                }
                            }


                            if (dtNotes != null)
                            {
                                Common.GeneralNote oLineNote = null;
                                for (int j = 0; j < dtNotes.Rows.Count; j++)
                                {
                                    oLineNote = new GeneralNote();
                                    oLineNote.TransactionID = TransactionID;
                                    oLineNote.TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    oLineNote.TransactionDetailID = Convert.ToInt64(dtNotes.Rows[j]["nTransactionDetailID"]);
                                    oLineNote.NoteID = Convert.ToInt64(dtNotes.Rows[j]["nNoteId"]);
                                    oLineNote.NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    oLineNote.BillingNoteType = (EOBPaymentSubType)(dtNotes.Rows[j]["nBillingNoteType"]);
                                    oLineNote.NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    oLineNote.UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    oLineNote.NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    if (dtNotes.Rows[j]["dtCreatedDateTime"] != DBNull.Value)
                                    {
                                        oLineNote.dtCreatedDatetime = Convert.ToDateTime(dtNotes.Rows[j]["dtCreatedDateTime"]);
                                    }
                                    oLineNote.ClinicID = ClinicID;
                                    oLine.LineNotes.Add(oLineNote);
                                    if (oLineNote != null)
                                    { oLineNote.Dispose(); }
                                }
                            }

                            // Added By Pramod Nair - To Set the Insurance From Master Object For Each Transaction Line 
                            oLine.InsuranceName = Convert.ToString(oTransaction.InsuranceName);
                            if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Primary.GetHashCode())
                            {
                                oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                            }
                            else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Secondary.GetHashCode())
                            {
                                oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                            }
                            else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Tertiary.GetHashCode())
                            {
                                oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                            }
                            else
                            {
                                oLine.InsurancePrimarySecondaryTertiary = "";
                            }

                            //Transaction line is added in the Transaction
                            oTransaction.Lines.Add(oLine);
                        }
                    }
                    dtLines.Dispose();
                    dtLines = null;
                }


                DataTable dtInsurancePlan = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                if (oSpiltClaimDetails.UseExtSqlConnection == false)
                {
                    oDB.Retrive("BL_SELECT_Transaction_InsPlan", oDBParameters, out dtInsurancePlan);
                }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = oSpiltClaimDetails.ExtSqlConnection;
                        _sqlCommand.Transaction = oSpiltClaimDetails.ExtSqlTransaction;
                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                        _sqlCommand.CommandText = "BL_SELECT_Transaction_InsPlan";

                        SqlDataAdapter _dataAdapter = new SqlDataAdapter(_sqlCommand);
                        DataSet _dataset = new DataSet();
                        _dataAdapter.Fill(_dataset);
                        if (_dataset.Tables[0] != null)
                        { dtInsurancePlan = _dataset.Tables[0].Copy(); }
                        if (_dataAdapter != null) { _dataAdapter.Dispose(); }
                        if (_dataset != null) { _dataset.Dispose(); }
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }

                if (dtInsurancePlan != null)
                {
                    for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                    {
                        TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                        _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                        _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                        _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                        _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                        _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                        _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                        _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                        _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                        _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                        _TransactionInsurancePlan.CopayAmount = 0;
                        _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                        oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                    }
                    dtInsurancePlan.Dispose();
                    dtInsurancePlan = null;
                }


                #region "HOLD Information"
                DataTable dtHold = null;
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionMasterID", oTransaction.TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", oTransaction.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);

                if (oSpiltClaimDetails.UseExtSqlConnection == false)
                {
                    oDB.Retrive("BL_Select_HoldDetails", oDBParameters, out dtHold);
                }
                else
                {
                    using (SqlCommand _sqlCommand = oDB.GetCmdParameters(oDBParameters))
                    {
                        _sqlCommand.Connection = oSpiltClaimDetails.ExtSqlConnection;
                        _sqlCommand.Transaction = oSpiltClaimDetails.ExtSqlTransaction;
                        _sqlCommand.CommandType = CommandType.StoredProcedure;
                        _sqlCommand.CommandText = "BL_Select_HoldDetails";

                        SqlDataAdapter _dataAdapter = new SqlDataAdapter(_sqlCommand);
                        DataSet _dataset = new DataSet();
                        _dataAdapter.Fill(_dataset);
                        if (_dataset.Tables[0] != null)
                        { dtHold = _dataset.Tables[0].Copy(); }
                        if (_dataAdapter != null) { _dataAdapter.Dispose(); }
                        if (_dataset != null) { _dataset.Dispose(); }
                        if (_sqlCommand.Parameters != null) { _sqlCommand.Parameters.Clear(); }
                    }
                }

                if (dtHold != null && dtHold.Rows.Count > 0)
                {
                    oTransaction.Hold = new ClaimHold();
                    if (dtHold.Rows[0]["bIsHold"] != DBNull.Value && Convert.ToString(dtHold.Rows[0]["bIsHold"]).Trim() != "" && Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]))
                    {

                        oTransaction.Hold.HoldDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldDate"]);
                        oTransaction.Hold.HoldModDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldModifyDateTime"]);
                        oTransaction.Hold.HoldReason = Convert.ToString(dtHold.Rows[0]["sHoldReason"]);
                        oTransaction.Hold.HoldUserID = Convert.ToInt64(dtHold.Rows[0]["nHoldUserID"]);
                        oTransaction.Hold.IsHold = Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]);
                        oTransaction.Hold.HoldModUserID = Convert.ToInt64(dtHold.Rows[0]["ModifiedUserID"]);

                    }

                }
                if (dtHold != null)
                {
                    dtHold.Dispose();
                    dtHold = null;
                }
                #endregion "HOLD Information"

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                //ex.ERROR_Log(ex.ToString());
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                oSpiltClaimDetails.ExtTransactionErrorValue = true;
                oSpiltClaimDetails.ExtTransactionErrorMsg = ex.ToString();
                throw ex;
            }
            catch (Exception ex)
            {
                //MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                oSpiltClaimDetails.ExtTransactionErrorValue = true;
                oSpiltClaimDetails.ExtTransactionErrorMsg = ex.ToString();
                throw ex;
            }
            finally
            {
                if (dtTrans != null)
                {
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                oDBParameters.Dispose();

                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }

            }
            return oTransaction;
        }

        public Transaction GetChargesClaimDetailsForCopyClaim(Int64 TransactionMasterID,Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            DataSet _dsClaimDetails = null;

            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            Int64 PatientID = 0;

            try
            {
                oDBParameters.Add("@nTransactionMasterID", TransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                oDB.Retrive("BL_Get_CopyClaimDetails", oDBParameters, out _dsClaimDetails);
                oDB.Disconnect();

                if (_dsClaimDetails != null && _dsClaimDetails.Tables.Count > 0)
                {
                    DataTable dtTrans = null;
                    dtTrans = _dsClaimDetails.Tables[0];

                    DataTable dtBatchNo = null;
                    dtBatchNo = _dsClaimDetails.Tables[1];

                    DataTable dtClaimRefNo = null;
                    dtClaimRefNo = _dsClaimDetails.Tables[2];

                    DataTable dtBox19Notes = null;
                    dtBox19Notes = _dsClaimDetails.Tables[3];

                    DataTable dtClaim10dNotes = null;
                    dtClaim10dNotes = _dsClaimDetails.Tables[9];

                    #region " Set Claim Master Data "

                    if (dtTrans != null)
                    {
                        if (dtTrans.Rows.Count > 0)
                        {
                            oTransaction.TransactionID = TransactionMasterID;
                            oTransaction.TransactionMasterID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionID"]);
                            oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                            oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                            oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                            oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                            oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                            oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                            oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                            oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                            oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                            oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);

                            oTransaction.BatchNoPrefix = "Batch";
                            oTransaction.BatchNo = 0;

                            #region "Retrive Batch No"

                            if (dtBatchNo != null)
                            {
                                if (dtBatchNo.Rows.Count > 0)
                                {
                                    for (int i = 0; i <= dtBatchNo.Rows.Count - 1; i++)
                                    {
                                        if (dtBatchNo.Rows[0]["sBatchNoPrefix"].GetType() != typeof(System.DBNull))
                                        {
                                            oTransaction.BatchNoPrefix = dtBatchNo.Rows[0]["sBatchNoPrefix"].ToString();
                                        }
                                        if (dtBatchNo.Rows[0]["nBatchNo"].GetType() != typeof(System.DBNull))
                                        {
                                            oTransaction.BatchNo = Convert.ToInt64(dtBatchNo.Rows[0]["nBatchNo"].ToString());
                                        }
                                    }
                                }
                            }

                            #endregion

                            PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                            oTransaction.PatientID = PatientID;
                            oTransaction.PatientCode = Convert.ToString(dtTrans.Rows[0]["sPatientCode"]);
                            oTransaction.PatientName = Convert.ToString(dtTrans.Rows[0]["sPatientName"]);
                            oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                            string sProviderName = "";
                            DataTable _dtProvider = gloGlobal.gloPMMasters.GetProviders();
                            if (_dtProvider != null && _dtProvider.Rows.Count > 0)
                            {
                                DataRow[] dr = null;
                                dr = _dtProvider.Select(" nProviderID = " + Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]) + "");
                                if (dr != null && dr.Length > 0)
                                {
                                    sProviderName = Convert.ToString(dr[0]["sProviderName"]);
                                }
                            }

                            //oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                            oTransaction.ProviderName = sProviderName;
                            oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                            oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                            oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                            oTransaction.PrefixID = 0;
                            oTransaction.ClinicID = ClinicID;
                            oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);
                            oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                            oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                            oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                            oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                            oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                            oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);
                            oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                            oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                            oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                            oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                            oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);
                            oTransaction.PriorAuthorizationID = Convert.ToInt64(dtTrans.Rows[0]["nAuthorizationID"]);
                            oTransaction.PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["sAuthorizationNumber"]);
                            oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                            oTransaction.ReferralProviderName = Convert.ToString(dtTrans.Rows[0]["ReferralName"]);
                            oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                            oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);
                            oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);
                            oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                            oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);
                            oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                            oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);
                            oTransaction.SendToInsuranceFlag = ((InsuranceTypeFlag)Convert.ToInt16(dtTrans.Rows[0]["nSendToInsFlag"]));
                            oTransaction.InsuranceID = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceID"]);
                            oTransaction.InsuranceName = Convert.ToString(dtTrans.Rows[0]["sInsuranceName"]);
                            oTransaction.InsuranceFlag = Convert.ToInt64(dtTrans.Rows[0]["nInsuranceFlag"]);
                            oTransaction.ContactID = Convert.ToInt64(dtTrans.Rows[0]["nContactID"]);
                            oTransaction.ResponsibilityNo = Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityNo"]);
                            oTransaction.ResponsibilityType = ((PayerMode)Convert.ToInt16(dtTrans.Rows[0]["nResponsibilityType"]));
                            oTransaction.SubClaimNo = Convert.ToString(dtTrans.Rows[0]["nSubClaimNo"]);
                            oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                            oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);

                            oTransaction.ClaimStatus = (ClaimStatus)Convert.ToInt16(dtTrans.Rows[0]["nClaimStatus"]);
                            oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt16(dtTrans.Rows[0]["nStatus"]);
                            oTransaction.CloseDayTrayID = Convert.ToInt64(dtTrans.Rows[0]["nChargesDayTrayID"]);
                            oTransaction.CloseDayTrayCode = Convert.ToString(dtTrans.Rows[0]["sChargesTrayCode"]);
                            oTransaction.CloseDayTrayName = Convert.ToString(dtTrans.Rows[0]["sChargesTrayDescription"]);

                            //Parent Claim No and Parent Transaction Id if Claim is splitted
                            oTransaction.ParentTransactionID = 0;
                            oTransaction.ParentClaimNo ="";


                            //Hold Fee-Schedule
                            oTransaction.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtTrans.Rows[0]["nFeeScheduleType"]);
                            oTransaction.FeeScheduleID = Convert.ToInt64(dtTrans.Rows[0]["nFeeScheduleID"]);
                            oTransaction.FacilityType = (FacilityType)Convert.ToInt16(dtTrans.Rows[0]["nFacilityType"]);

                            oTransaction.MainClaimNo = "";

                            //MaheshB 20100426 gloPM5040
                            oTransaction.IsRebill = false;

                          
                                oTransaction.IsResend = false;
                            //**
                            //Debasish Das 20100514 gloPM5040
                            if (Convert.ToString(dtTrans.Rows[0]["bIsVoid"]).ToLower() == Boolean.TrueString.ToLower())
                            {
                                oTransaction.IsVoid = true;
                                oTransaction.VoidedDate = Convert.ToDateTime(dtTrans.Rows[0]["dtVoidDate"]);
                                oTransaction.VoidByID = Convert.ToInt64(dtTrans.Rows[0]["nVoidUserID"]);
                                oTransaction.VoidByName = Convert.ToString(dtTrans.Rows[0]["sVoidUserName"]);
                                oTransaction.nVoidedDate = Convert.ToInt64(dtTrans.Rows[0]["nVoidCloseDate"]);
                                oTransaction.VoidedTrayID = Convert.ToInt64(dtTrans.Rows[0]["nVoidTrayID"]);
                            }
                            else
                            {
                                oTransaction.IsVoid = false;
                            }

                            //**
                            //Debasish Das 20100514 gloPM5040
                            oTransaction.IsSameAsBillingProvider = Convert.ToBoolean(dtTrans.Rows[0]["bSameAsBillingProvider"]);
                            //**

                            //Debasish Das 20100616 gloPM5040
                            oTransaction.ReferalProviderID_New = Convert.ToInt64(dtTrans.Rows[0]["nReferralProviderID"]);
                            //**


                            oTransaction.IsReplacementClaim = Convert.ToBoolean(dtTrans.Rows[0]["bIsReplacementClaim"]);

                            #region "Retreive Claim Ref. No."

                            string _strClaimRefNo = "";
                            if (dtClaimRefNo != null)
                            {
                                if (dtClaimRefNo.Rows.Count > 0)
                                {
                                    _strClaimRefNo = Convert.ToString(dtClaimRefNo.Rows[0]["sClaimRemittanceRefNo"]); ;

                                }
                            }
                            dtClaimRefNo.Dispose();
                            oTransaction.sClaimRefNo = _strClaimRefNo;
                            #endregion

                            #region "Retreive Box19 Message- Resubmission Note"

                            if (dtBox19Notes != null)
                            {
                                if (dtBox19Notes.Rows.Count > 0)
                                {
                                    oTransaction.ClaimBox19Notes = new ClaimBox19Notes();
                                    for (int j = 0; j < dtBox19Notes.Rows.Count; j++)
                                    {
                                        oTransaction.ClaimBox19Note = new ClaimBox19Note();
                                        oTransaction.ClaimBox19Note.TransactionID = TransactionMasterID;
                                        oTransaction.ClaimBox19Note.NoteID = Convert.ToInt64(dtBox19Notes.Rows[j]["nNoteId"]);
                                        oTransaction.ClaimBox19Note.NoteType = (NoteType)(dtBox19Notes.Rows[j]["nNoteType"]);
                                        oTransaction.ClaimBox19Note.BillingNoteType = (EOBPaymentSubType)(dtBox19Notes.Rows[j]["nBillingNoteType"]);
                                        oTransaction.ClaimBox19Note.NoteDate = Convert.ToInt64(dtBox19Notes.Rows[j]["nNoteDateTime"]);
                                        oTransaction.ClaimBox19Note.UserID = Convert.ToInt64(dtBox19Notes.Rows[j]["nUserID"]);
                                        oTransaction.ClaimBox19Note.Box19NoteDescription = Convert.ToString(dtBox19Notes.Rows[j]["sNoteDescription"]);
                                        oTransaction.ClaimBox19Note.ClinicID = ClinicID;
                                        oTransaction.ClaimBox19Note.IsReplacementClaim = oTransaction.IsReplacementClaim;
                                        oTransaction.ClaimBox19Note.sClaimRemittRefNo = _strClaimRefNo;
                                        oTransaction.ClaimBox19Notes.Add(oTransaction.ClaimBox19Note);
                                    }
                                }
                                else if (_strClaimRefNo != "")
                                {
                                    oTransaction.ClaimBox19Notes = new ClaimBox19Notes();
                                    oTransaction.ClaimBox19Note = new ClaimBox19Note();
                                    oTransaction.ClaimBox19Note.TransactionID = TransactionMasterID;
                                    oTransaction.ClaimBox19Note.sClaimRemittRefNo = _strClaimRefNo;
                                    oTransaction.ClaimBox19Notes.Add(oTransaction.ClaimBox19Note);
                                }
                            }
                            dtBox19Notes.Dispose();

                            #endregion

                            #region "Retrieve Claim10d Note"

                            if (dtClaim10dNotes != null)
                            {
                                if (dtClaim10dNotes.Rows.Count > 0)
                                {
                                    oTransaction.ClaimBox10dNote = Convert.ToString(dtClaim10dNotes.Rows[0]["sNoteDescription"]);
                                }
                            }
                            dtClaim10dNotes.Dispose();

                            #endregion "Retrieve Claim10d Note"


                            //Added By mukesh on 12 Nov 2010
                            oTransaction.IllnessDate = Convert.ToInt64(dtTrans.Rows[0]["nIllnessDate"]);
                            //**

                            oTransaction.LastSeenDate = Convert.ToInt64(dtTrans.Rows[0]["nLastSeenDate"]);
                            oTransaction.ProviderQualifierCode = Convert.ToString(dtTrans.Rows[0]["sProviderQualifier"]);
                            oTransaction.ClaimBox15QualifierCode = Convert.ToString(dtTrans.Rows[0]["sBox15DateQualifier"]);
                            oTransaction.ClaimBox14QualifierCode = Convert.ToString(dtTrans.Rows[0]["sBox14DateQualifier"]);
                            oTransaction.nICDRevision = Convert.ToInt16(dtTrans.Rows[0]["nICDRevision"]);
                            if (dtTrans.Rows[0]["dtBox15Date"].GetType() != typeof(System.DBNull))
                            {
                                oTransaction.ClaimBox15Date = Convert.ToDateTime(dtTrans.Rows[0]["dtBox15Date"]);
                            }

                            //add on 20110630 by Mahesh Nawal for 6031
                            oTransaction.DelayReasonCodeID = Convert.ToString(dtTrans.Rows[0]["sDelayReasonCodeID"]).Trim();
                            oTransaction.ServiceAuthExceCode = Convert.ToString(dtTrans.Rows[0]["sServiceAuthExceCode"]).Trim();
                            oTransaction.MedicaidResubmissioncode = Convert.ToString(dtTrans.Rows[0]["sMedicaidResubmissionCode"]).Trim();


                            //Added by Subashish_b on 16/May/2011  for  assigning the PAF values to object while saving.
                            oTransaction.PAccountID = Convert.ToInt64(dtTrans.Rows[0]["nPAccountID"]);
                            oTransaction.AccountPatientID = Convert.ToInt64(dtTrans.Rows[0]["nAccountPatientID"]);
                            oTransaction.GuarantorID = Convert.ToInt64(dtTrans.Rows[0]["nGuarantorID"]);
                            //End

                            oTransaction.CaseID = Convert.ToInt64(dtTrans.Rows[0]["nCaseID"]);
                            oTransaction.CaseName = Convert.ToString(dtTrans.Rows[0]["sCaseName"]);

                            oTransaction.bIsRefprovAsSupervisor = Convert.ToBoolean(dtTrans.Rows[0]["bIsRefProvAsSupervisor"]);

                            oTransaction.nClaimCategoryID = Convert.ToInt64(dtTrans.Rows[0]["nClaimReportingCategoryID"]);

                            oTransaction.CLIANumber = Convert.ToString(dtTrans.Rows[0]["sCLIANumber"]);
                            oTransaction.MammogramCertNumber=Convert.ToString(dtTrans.Rows[0]["sMammogramCertNumber"]);
                            oTransaction.IDENo = Convert.ToString(dtTrans.Rows[0]["sIDENo"]);
                            if (dtTrans.Rows[0]["dtInitTreatmentDate"] != DBNull.Value)
                            {
                                oTransaction.dtInitTreatmentDate = Convert.ToDateTime(dtTrans.Rows[0]["dtInitTreatmentDate"]);
                            }

                            oTransaction.ClaimEPSDT = new EPSDTFamilyPlanningClaim
                            {
                                ClaimIncludeEPSDTScreening = Convert.ToBoolean(dtTrans.Rows[0]["bIsEPSDTScreening"]),
                                PatientGivenEPSDTReferral = Convert.ToBoolean(dtTrans.Rows[0]["bIsEPSDTReferral"]),
                                ReferralType = Convert.ToString(dtTrans.Rows[0]["sReferralType"]),
                                ReferralCode = Convert.ToString(dtTrans.Rows[0]["sReferralCode"])

                            };

                        }
                    }
                    dtTrans.Dispose();

                    #endregion " Set Claim Master Data "

                    DataTable dtLines = null;
                    dtLines = _dsClaimDetails.Tables[4];

                    DataTable dtNotes = null;
                    dtNotes = _dsClaimDetails.Tables[5];

                    #region " Set Claim Lines Data "

                    if (dtLines != null)
                    {
                        if (dtLines.Rows.Count > 0)
                        {
                            for (int i = 0; i < dtLines.Rows.Count; i++)
                            {

                                oLine = new TransactionLine();
                                oLine.TransactionId = TransactionMasterID;
                                oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                                oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);
                                oLine.TransactionMasterID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterID"]); ;
                                oLine.TransactionMasterDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionMasterDetailID"]);
                                oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                                if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                                {
                                    oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                                }
                                else
                                {
                                    oLine.DateServiceTillIsNull = true;
                                    oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                                }

                                oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                                oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                                oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                                oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                                oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                                oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                                //oLine.CrosswalkCPTCode = dtLines.Rows[i]["sCrossWalkCPTCode"].ToString();
                                oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                                oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                                oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                                oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                                oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                                oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                                oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                                oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                                oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                                oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                                oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                                oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                                oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                                oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                                oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                                oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                                oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                                oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                                oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                                oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                                oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                                oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                                oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                                oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                                oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                                oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                                oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                                oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                                oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                                oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                                oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                                oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                                oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                                //oLine.BilledAmount = Convert.ToDecimal(dtLines.Rows[i]["dBilliedAmount"]);
                                oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                                oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                                oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                                //oLine.PatientResponsibility = Convert.ToDecimal(dtLines.Rows[i]["dPatientResponsibility"]);
                                oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                                oLine.ClinicID = ClinicID;
                                oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                                oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);
                                oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                                oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                                oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);
                                oLine.IsHold = Convert.ToBoolean(dtLines.Rows[i]["bIsHold"]);
                                oLine.HoldReason = Convert.ToString(dtLines.Rows[i]["sHoldReason"]);
                                oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                                oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);
                                //oLine.ParentTransactionID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionID"]);
                                //oLine.ParentTransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nParentTransactionDetailID"]);
                                //oLine.IsLineSplitted = Convert.ToBoolean(dtLines.Rows[i]["bIsSplitted"]);
                                oLine.FeeScheduleType = (FeeScheduleType)Convert.ToInt16(dtLines.Rows[0]["nFeeScheduleType"]);
                                oLine.FeeScheduleID = Convert.ToInt64(dtLines.Rows[0]["nFeeScheduleID"]);
                                oLine.FacilityType = (FacilityType)Convert.ToInt16(dtLines.Rows[0]["nFacilityType"]);
                                oLine.EMG = Convert.ToBoolean(dtLines.Rows[i]["bEMG"]);
                                oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                                oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                                oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                                oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                                oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                                oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                                oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                                oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                                oLine.Prescription = Convert.ToString(dtLines.Rows[i]["Prescription"]);
                                oLine.PrescriptionDescription = Convert.ToString(dtLines.Rows[i]["sPrescriptionDesc"]);

                                if (Convert.ToInt64(dtLines.Rows[i]["nAnesthesiaID"]) != 0)
                                    oLine.bIsAneshtesia = true;
                                else
                                    oLine.bIsAneshtesia = false;

                                oLine.AnesthesiaID = Convert.ToInt64(dtLines.Rows[i]["nAnesthesiaID"]);
                                oLine.AnesthesiaStartTime = Convert.ToDateTime(dtLines.Rows[i]["dtStartDateTime"]);
                                oLine.AnesthesiaEndTime = Convert.ToDateTime(dtLines.Rows[i]["dtEndDateTime"]);
                                oLine.AnesthesiaTotalMinutes = Convert.ToInt64(dtLines.Rows[i]["nTotalMinutes"]);
                                oLine.AnesthesiaMinPerUnit = Convert.ToInt64(dtLines.Rows[i]["dMinPerUnit"]);
                                oLine.AnesthesiaTimeUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dTimeUnits"]));
                                oLine.AnesthesiaBaseUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dBaseUnits"]));
                                oLine.AnesthesiaOtherUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dOtherUnits"]));
                                oLine.AnesthesiaTotalUnits = FormatNumber(Convert.ToDecimal(dtLines.Rows[i]["dTotalUnits"]));
                                oLine.bIsAutoCalculateAnesthesia = Convert.ToBoolean(dtLines.Rows[i]["bIsAutoCalculate"]);

                                if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                                { oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]); }
                                oLine.RevenueCode = Convert.ToString(dtLines.Rows[i]["sRevenueCode"]);



                                if (dtNotes != null && dtNotes.Rows.Count > 0)
                                {
                                    DataRow[] _drNotes = null;
                                    Common.GeneralNote oLineNote = null;

                                    //...Notes data table has notes for all the lines, so need to filter line wise
                                    string _notesFilter = " nTransactionID = " + oLine.TransactionMasterID + " AND " +
                                                          " nTransactionDetailID = " + oLine.TransactionMasterDetailID + " ";
                                    _drNotes = dtNotes.Select(_notesFilter);

                                    if (_drNotes != null && _drNotes.Length > 0)
                                    {
                                        foreach (DataRow drNote in _drNotes)
                                        {
                                            oLineNote = new GeneralNote();
                                            oLineNote.TransactionID = TransactionMasterID;
                                            oLineNote.TransactionLineId = Convert.ToInt64(drNote["nLineNo"]);
                                            oLineNote.TransactionDetailID = Convert.ToInt64(drNote["nTransactionDetailID"]);
                                            oLineNote.NoteID = Convert.ToInt64(drNote["nNoteId"]);
                                            oLineNote.NoteType = (NoteType)(drNote["nNoteType"]);
                                            oLineNote.BillingNoteType = (EOBPaymentSubType)(drNote["nBillingNoteType"]);
                                            oLineNote.NoteDate = Convert.ToInt64(drNote["nNoteDateTime"]);
                                            oLineNote.UserID = Convert.ToInt64(drNote["nUserID"]);
                                            oLineNote.NoteDescription = Convert.ToString(drNote["sNoteDescription"]);
                                            oLineNote.ClinicID = ClinicID;
                                            oLineNote.StatementNoteDate = Convert.ToInt64(drNote["nStatementNoteDate"]);
                                            if (drNote["dtCreatedDateTime"] != DBNull.Value)
                                            {
                                                oLineNote.dtCreatedDatetime = Convert.ToDateTime(drNote["dtCreatedDateTime"]);
                                            }

                                            oLine.LineNotes.Add(oLineNote);
                                            if (oLineNote != null)
                                            { oLineNote.Dispose(); }
                                        }

                                        _drNotes = null;
                                    }
                                }

                                // Added By Pramod Nair - To Set the Insurance From Master Object For Each Transaction Line 
                                oLine.InsuranceName = Convert.ToString(oTransaction.InsuranceName);
                                if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Primary.GetHashCode())
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                                }
                                else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Secondary.GetHashCode())
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                                }
                                else if (Convert.ToInt64(oTransaction.InsuranceFlag) == InsuranceTypeFlag.Tertiary.GetHashCode())
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                                }
                                else
                                {
                                    oLine.InsurancePrimarySecondaryTertiary = "";
                                }

                                oLine.ServiceIsTheScreening = Convert.ToBoolean(dtLines.Rows[i]["bIsServiceScreening"]);
                                oLine.ServiceIsTheResultOfScreening = Convert.ToBoolean(dtLines.Rows[i]["bIsServiceResultofScreening"]);
                                oLine.ServiceFamilyPlanningIndicator = Convert.ToBoolean(dtLines.Rows[i]["bIsFamilyPlanningIndicator"]);

                                oTransaction.Lines.Add(oLine);
                            }
                        }
                    }

                    #endregion " Set Claim Lines Data "

                    DataTable dtInsurancePlan = null;
                    dtInsurancePlan = _dsClaimDetails.Tables[6];

                    #region " Set claim insurance plans "

                    if (dtInsurancePlan != null)
                    {
                        for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                        {
                            TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                            _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                            _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                            _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                            _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                            _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                            _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                            _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                            _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                            _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                            _TransactionInsurancePlan.CopayAmount = 0;
                            _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                            _TransactionInsurancePlan.IsInstitutional = Convert.ToBoolean(dtInsurancePlan.Rows[i]["IsInstitutionalBilling"]);
                            oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                        }
                    }

                    #endregion " Set claim insurance plans "

                    DataTable dtHold = null;
                    dtHold = _dsClaimDetails.Tables[7];

                    #region "Set Hold Information"

                    if (dtHold != null && dtHold.Rows.Count > 0)
                    {
                        oTransaction.Hold = new ClaimHold();
                        if (dtHold.Rows[0]["bIsHold"] != DBNull.Value && Convert.ToString(dtHold.Rows[0]["bIsHold"]).Trim() != "" && Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]))
                        {

                            oTransaction.Hold.HoldDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldDate"]);
                            oTransaction.Hold.HoldModDateTime = Convert.ToDateTime(dtHold.Rows[0]["dtHoldModifyDateTime"]);
                            oTransaction.Hold.HoldReason = Convert.ToString(dtHold.Rows[0]["sHoldReason"]);
                            oTransaction.Hold.HoldUserID = Convert.ToInt64(dtHold.Rows[0]["nHoldUserID"]);
                            oTransaction.Hold.IsHold = Convert.ToBoolean(dtHold.Rows[0]["bIsHold"]);
                            oTransaction.Hold.HoldModUserID = Convert.ToInt64(dtHold.Rows[0]["ModifiedUserID"]);

                        }

                    }
                    dtHold = null;

                    #endregion "Set Hold Information"

                    #region "Check Is claim Splitted "

                    oTransaction.IsClaimSplitted = false;

                    //DataTable dtIsSplitClaim = null;
                    //dtIsSplitClaim = _dsClaimDetails.Tables[8];
                    //if (dtIsSplitClaim != null && dtIsSplitClaim.Rows.Count > 0)
                    //{
                    //    if (Convert.ToInt64(dtIsSplitClaim.Rows[0]["NoofSplitClaims"]) > 0)
                    //    {
                    //        oTransaction.IsClaimSplitted = true;
                    //    }
                    //}

                    #endregion

                    //..Dispose data table variables
                    if (dtHold != null) { dtHold.Dispose(); }
                    if (dtInsurancePlan != null) { dtInsurancePlan.Dispose(); }
                    if (dtNotes != null) { dtNotes.Dispose(); }
                    if (dtLines != null) { dtLines.Dispose(); }
                    if (dtBox19Notes != null) { dtBox19Notes.Dispose(); }
                    if (dtClaimRefNo != null) { dtClaimRefNo.Dispose(); }
                    if (dtBatchNo != null) { dtBatchNo.Dispose(); }
                    if (dtTrans != null) { dtTrans.Dispose(); }
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (_dsClaimDetails != null) { _dsClaimDetails.Dispose(); }
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                oDBParameters.Dispose();
            }
            return oTransaction;
        }

        public Boolean IsClaimSplitted(Transaction Transaction)
        {
            Boolean _IsSplitted = false;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string strQuery = String.Empty;
               // DataTable _dtIsSplitted = null;

                //strQuery = " select nTransactionID,nclaimno from bl_transaction_claim_MSt where nTransactionMasterID= " + Transaction.TransactionMasterID + " and (nSubClaimNo<>'-1' and nSubClaimNo <> '') ";
                strQuery = " select count(nTransactionID) from dbo.BL_Transaction_Claim_MST WITH (NOLOCK) " +
                            " where substring(nSubClaimno,1,1) <> '-' and nParentTransactionID=" + Transaction.TransactionID + " " +
                            " and nTransactionMasterid = " + Transaction.TransactionMasterID + "";

                object retVal = oDB.ExecuteScalar_Query(strQuery);

                if (retVal != null)
                {
                    _IsSplitted = Convert.ToBoolean(retVal);
                }
                oDB.Disconnect();
                oDB.Dispose();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
            }
            return _IsSplitted;
        }

        public Boolean IsClaimSplitted(Int64 nTransactionMstID,Int64 nTransactionID)
        {
            Boolean _IsSplitted = false;
            try
            {
                gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string strQuery = String.Empty;
                              
                strQuery = " select count(nTransactionID) from dbo.BL_Transaction_Claim_MST WITH (NOLOCK) " +
                            " where substring(nSubClaimno,1,1) <> '-' and nParentTransactionID=" + nTransactionID +
                            " and nTransactionMasterid = " + nTransactionMstID;

                object retVal = oDB.ExecuteScalar_Query(strQuery);

                if (retVal != null)
                {
                    _IsSplitted = Convert.ToBoolean(retVal);
                }
                oDB.Disconnect();
                oDB.Dispose();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
            }
            return _IsSplitted;
        }

        public Transaction GetHCFATransactionDetails(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            Transaction oTransaction = new Transaction();
            TransactionLine oLine = null;
            try
            {
                oDB.Connect(false);
                // For BL_Transaction_MST Table.
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_HCFA_Transaction", oDBParameters, out dtTrans);

                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        //nTransactionID, nMasterAppointmentID, nAppointmentID, nVisitID, nOnsiteDate, nInjuryDate, 
                        //nUnableToWorkFromDate, nUnableToWorkTillDate, nTransactionDate, sCaseNoPrefix, nClaimNo, 
                        //nPatientID, nTransactionProviderID, sMaritalStatus, sFacilityCode, sFacilityDescription, 
                        //nTransactionType, nClinicID, nTransactionStatusID, sState, nHopitalizationDateFrom, nHopitalizationDateTo,
                        //bOutSideLab, dOutSideLabCharges, bAutoClaim, nAccidentDate, bWorkersComp
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);
                        oTransaction.ReferralProviderID = Convert.ToInt64(dtTrans.Rows[0]["nReferralID"]);
                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);
                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        //Code added on 20090505 By - Sagar Ghodke

                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);

                        //End code add 20090505,Sagar Ghodke



                        //
                        oTransaction.Transaction_Details.HCFA_PatientFName = Convert.ToString(dtTrans.Rows[0]["PatientFName"]);
                        oTransaction.Transaction_Details.HCFA_PatientMName = Convert.ToString(dtTrans.Rows[0]["PatientMName"]);
                        oTransaction.Transaction_Details.HCFA_PatientLName = Convert.ToString(dtTrans.Rows[0]["PatientLName"]);
                        oTransaction.Transaction_Details.HCFA_PatientCode = Convert.ToString(dtTrans.Rows[0]["PatientCode"]);
                        oTransaction.Transaction_Details.HCFA_PatientSSN = Convert.ToString(dtTrans.Rows[0]["PatientSSN"]);
                        if (dtTrans.Rows[0]["PatientDOB"] != DBNull.Value)
                        {
                            oTransaction.Transaction_Details.HCFA_PatientDOB = gloDateMaster.gloDate.DateAsNumber(Convert.ToString(dtTrans.Rows[0]["PatientDOB"]));
                        }
                        oTransaction.Transaction_Details.HCFA_PatientGender = Convert.ToString(dtTrans.Rows[0]["PatientGender"]);

                        oTransaction.Transaction_Details.HCFA_PatientAddress1 = Convert.ToString(dtTrans.Rows[0]["PatientAddr1"]);
                        oTransaction.Transaction_Details.HCFA_PatientAddress2 = Convert.ToString(dtTrans.Rows[0]["PatientAddr2"]);
                        oTransaction.Transaction_Details.HCFA_PatientCity = Convert.ToString(dtTrans.Rows[0]["PatientCity"]);
                        oTransaction.Transaction_Details.HCFA_PatientState = Convert.ToString(dtTrans.Rows[0]["PatientState"]);
                        oTransaction.Transaction_Details.HCFA_PatientZip = Convert.ToString(dtTrans.Rows[0]["PatientZip"]);
                        oTransaction.Transaction_Details.HCFA_PatientPhone = Convert.ToString(dtTrans.Rows[0]["PatientPhone"]);
                        oTransaction.Transaction_Details.HCFA_PatientEmploymentStatus = Convert.ToString(dtTrans.Rows[0]["PatientEmploymentStatus"]);
                        oTransaction.Transaction_Details.HCFA_PatientEmploymentType = Convert.ToString(dtTrans.Rows[0]["sEmploymentType"]);

                        //Employment Status with refrence to occupation control in gloPatient
                        //1.Employed,//2.UnEmployed,//3.Retired,//4.Self-Employed,//5.Student

                        //Employement type with refrence to occupation control in gloPatient
                        //1.Full Time//2.Part Time

                        switch (oTransaction.Transaction_Details.HCFA_PatientEmploymentStatus.Trim().ToUpper())
                        {
                            case "EMPLOYED":
                                { oTransaction.Transaction_Details.HCFA_IsEmployed = true; }
                                break;
                            case "UNEMPLOYED":
                                break;
                            case "SELF-EMPLOYED":
                                break;
                            case "STUDENT":
                                {
                                    switch (oTransaction.Transaction_Details.HCFA_PatientEmploymentType.Trim().ToUpper())
                                    {
                                        case "FULL TIME":
                                            oTransaction.Transaction_Details.HCFA_IsFullTimeStudent = true;
                                            break;
                                        case "PART TIME":
                                            oTransaction.Transaction_Details.HCFA_IsPartTimeStudent = true;
                                            break;
                                    }
                                }
                                break;
                        }

                        //Patient.sEmployerName,Patient.sOccupation,Patient.sPlaceofEmployment,
                        //Patient.sWorkAddressLine1,Patient.sWorkAddressLine2,
                        //Patient.sWorkCity,Patient.sWorkState,Patient.sWorkState,
                        //Patient.sWorkZIP,Patient.sWorkPhone,Patient.sWorkFAX,Patient.sWorkCounty,Patient.sWorkMobile,
                        //Patient.sWorkEmail,Patient.dtRetirementDate,

                        oTransaction.Transaction_Details.HCFA_PatientEmployer_School_Name = Convert.ToString(dtTrans.Rows[0]["sEmployerName"]);
                        oTransaction.Transaction_Details.HCFA_PriorAuthorizationNo = Convert.ToString(dtTrans.Rows[0]["PriorAuthorizationNo"]);

                        oTransaction.Transaction_Details.HCFA_FacilityCode = Convert.ToString(dtTrans.Rows[0]["FacilityCode"]);
                        oTransaction.Transaction_Details.HCFA_FacilityName = Convert.ToString(dtTrans.Rows[0]["FacilityDescription"]);
                        oTransaction.Transaction_Details.HCFA_FacilityNPI = Convert.ToString(dtTrans.Rows[0]["FacilityNPI"]);
                        oTransaction.Transaction_Details.HCFA_FacilityAddress1 = Convert.ToString(dtTrans.Rows[0]["FacilityAddr1"]);
                        oTransaction.Transaction_Details.HCFA_FacilityAddress2 = Convert.ToString(dtTrans.Rows[0]["FacilityAddr2"]);
                        oTransaction.Transaction_Details.HCFA_FacilityZip = Convert.ToString(dtTrans.Rows[0]["FacilityZip"]);
                        oTransaction.Transaction_Details.HCFA_FacilityCity = Convert.ToString(dtTrans.Rows[0]["FacilityCity"]);
                        oTransaction.Transaction_Details.HCFA_FacilityState = Convert.ToString(dtTrans.Rows[0]["FacilityState"]);
                        oTransaction.Transaction_Details.HCFA_FacilityID = Convert.ToString(dtTrans.Rows[0]["FacilityID"]);
                        oTransaction.Transaction_Details.HCFA_FacilityPhone = Convert.ToString(dtTrans.Rows[0]["FacilityPhone"]);

                        oTransaction.Transaction_Details.HCFA_ProviderFName = Convert.ToString(dtTrans.Rows[0]["ProviderFName"]);
                        oTransaction.Transaction_Details.HCFA_ProviderMName = Convert.ToString(dtTrans.Rows[0]["ProviderMName"]);
                        oTransaction.Transaction_Details.HCFA_ProviderLName = Convert.ToString(dtTrans.Rows[0]["ProviderLName"]);

                        oTransaction.Transaction_Details.HCFA_ProviderAddress1 = Convert.ToString(dtTrans.Rows[0]["ProviderBusAddr1"]);
                        oTransaction.Transaction_Details.HCFA_ProviderAddress2 = Convert.ToString(dtTrans.Rows[0]["ProviderBusAddr2"]);
                        oTransaction.Transaction_Details.HCFA_ProviderCity = Convert.ToString(dtTrans.Rows[0]["ProviderBusCity"]);
                        oTransaction.Transaction_Details.HCFA_ProviderState = Convert.ToString(dtTrans.Rows[0]["ProviderBusState"]);
                        oTransaction.Transaction_Details.HCFA_ProviderZip = Convert.ToString(dtTrans.Rows[0]["ProviderBusZip"]);
                        oTransaction.Transaction_Details.HCFA_ProviderPhone = Convert.ToString(dtTrans.Rows[0]["ProviderBusPhone"]);
                        oTransaction.Transaction_Details.HCFA_ProviderNPI = Convert.ToString(dtTrans.Rows[0]["ProviderNPI"]);
                        oTransaction.Transaction_Details.HCFA_ProviderUPIN = Convert.ToString(dtTrans.Rows[0]["ProviderUPIN"]);
                        oTransaction.Transaction_Details.HCFA_ProviderStateMedicalNo = Convert.ToString(dtTrans.Rows[0]["ProviderStateMedicalNo"]);

                        oTransaction.Transaction_Details.HCFA_ProviderTaxonomy = Convert.ToString(dtTrans.Rows[0]["ProviderTaxonomyCode"]);
                        //oTransaction.Transaction_Details.HCFA_Provider = Convert.ToString(dtTrans.Rows[0]["ProviderTaxonomyDesc"]);
                        oTransaction.Transaction_Details.HCFA_ProviderSSN = Convert.ToString(dtTrans.Rows[0]["ProviderSSN"]);
                        oTransaction.Transaction_Details.HCFA_ProviderEIN = Convert.ToString(dtTrans.Rows[0]["ProviderEmployerID"]);

                        oTransaction.PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                        oTransaction.ProviderName = GetProvider(Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]));
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0; ////This ID is use to generate a unique TransactionID in Stored Procedure.
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);

                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);

                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);

                    }
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                

                //BL_Transaction_MST_Ins
                DataTable dtInsurance = new DataTable();
                oTransaction.Insurances = new TransactionInsurances();

                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST_Ins", oDBParameters, out dtInsurance);


                //BL_Transaction_Lines
                DataTable dtLines = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionLineNo", 0, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_HCFA_TransactionLine", oDBParameters, out dtLines);

                if (dtLines != null)
                {
                    if (dtLines.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtLines.Rows.Count; i++)
                        {
                            //nTransactionID
                            //nTransactionLineNo nFromDate nToDate sPOSCode sPOSDescription sTOSCode sTOSDescription sCPTCode sCPTDescription sDx1Code 
                            //sDx1Description sDx2Code sDx2Description sDx3Code sDx3Description sDx4Code sDx4Description sDx5Code sDx5Description sDx6Code 
                            //sDx6Description sDx7Code sDx7Description sDx8Code sDx8Description nDx1Pointer nDx2Pointer nDx3Pointer nDx4Pointer 
                            //nDx5Pointer nDx6Pointer nDx7Pointer nDx8Pointer sMod1Code sMod1Description sMod2Code sMod2Description sMod3Code
                            //sMod3Description sMod4Code sMod4Description dCharges dUnit dTotal dAllowed nProvider nClinicID

                            oLine = new TransactionLine();
                            oLine.TransactionId = TransactionID;
                            oLine.TransactionLineId = Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]);
                            oLine.TransactionDetailID = Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]);
                            oLine.DateServiceFrom = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            
                            if (dtLines.Rows[i]["nToDate"] != null && Convert.ToInt64(dtLines.Rows[i]["nToDate"]) > 0)
                            {
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nToDate"]));
                            }
                            else
                            {
                                oLine.DateServiceTillIsNull = true;
                                oLine.DateServiceTill = gloDateMaster.gloDate.DateAsDate(Convert.ToInt64(dtLines.Rows[i]["nFromDate"]));
                            }

                            oLine.POSCode = dtLines.Rows[i]["sPOSCode"].ToString();
                            oLine.POSDescription = dtLines.Rows[i]["sPOSDescription"].ToString();
                            oLine.TOSCode = dtLines.Rows[i]["sTOSCode"].ToString();
                            oLine.TOSDescription = dtLines.Rows[i]["sTOSDescription"].ToString();
                            oLine.CPTCode = dtLines.Rows[i]["sCPTCode"].ToString();
                            oLine.CPTDescription = dtLines.Rows[i]["sCPTDescription"].ToString();
                            oLine.Dx1Code = dtLines.Rows[i]["sDx1Code"].ToString();
                            oLine.Dx1Description = dtLines.Rows[i]["sDx1Description"].ToString();
                            oLine.Dx2Code = dtLines.Rows[i]["sDx2Code"].ToString();
                            oLine.Dx2Description = dtLines.Rows[i]["sDx2Description"].ToString();
                            oLine.Dx3Code = dtLines.Rows[i]["sDx3Code"].ToString();
                            oLine.Dx3Description = dtLines.Rows[i]["sDx3Description"].ToString();
                            oLine.Dx4Code = dtLines.Rows[i]["sDx4Code"].ToString();
                            oLine.Dx4Description = dtLines.Rows[i]["sDx4Description"].ToString();
                            oLine.Dx5Code = dtLines.Rows[i]["sDx5Code"].ToString();
                            oLine.Dx5Description = dtLines.Rows[i]["sDx5Description"].ToString();
                            oLine.Dx6Code = dtLines.Rows[i]["sDx6Code"].ToString();
                            oLine.Dx6Description = dtLines.Rows[i]["sDx6Description"].ToString();
                            oLine.Dx7Code = dtLines.Rows[i]["sDx7Code"].ToString();
                            oLine.Dx7Description = dtLines.Rows[i]["sDx7Description"].ToString();
                            oLine.Dx8Code = dtLines.Rows[i]["sDx8Code"].ToString();
                            oLine.Dx8Description = dtLines.Rows[i]["sDx8Description"].ToString();
                            oLine.Dx1Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx1Pointer"]);
                            oLine.Dx2Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx2Pointer"]);
                            oLine.Dx3Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx3Pointer"]);
                            oLine.Dx4Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx4Pointer"]);
                            oLine.Dx5Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx5Pointer"]);
                            oLine.Dx6Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx6Pointer"]);
                            oLine.Dx7Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx7Pointer"]);
                            oLine.Dx8Ptr = Convert.ToBoolean(dtLines.Rows[i]["nDx8Pointer"]);
                            oLine.Mod1Code = dtLines.Rows[i]["sMod1Code"].ToString();
                            oLine.Mod1Description = dtLines.Rows[i]["sMod1Description"].ToString();
                            oLine.Mod2Code = dtLines.Rows[i]["sMod2Code"].ToString();
                            oLine.Mod2Description = dtLines.Rows[i]["sMod2Description"].ToString();
                            oLine.Mod3Code = dtLines.Rows[i]["sMod3Code"].ToString();
                            oLine.Mod3Description = dtLines.Rows[i]["sMod3Description"].ToString();
                            oLine.Mod4Code = dtLines.Rows[i]["sMod4Code"].ToString();
                            oLine.Mod4Description = dtLines.Rows[i]["sMod4Description"].ToString();
                            oLine.Charges = Convert.ToDecimal(dtLines.Rows[i]["dCharges"]);
                            oLine.Unit = Convert.ToDecimal(dtLines.Rows[i]["dUnit"]);
                            oLine.Total = Convert.ToDecimal(dtLines.Rows[i]["dTotal"]);
                            oLine.AllowedCharges = Convert.ToDecimal(dtLines.Rows[i]["dAllowed"]);
                            oLine.RefferingProviderId = Convert.ToInt64(dtLines.Rows[i]["nProvider"]);
                            oLine.ClinicID = ClinicID;
                            oLine.ClaimNumber = Convert.ToInt64(dtLines.Rows[i]["nClaimNumber"]);
                            oLine.LineStatus = (TransactionStatus)Convert.ToInt32(dtLines.Rows[i]["nTransactionLineStatus"]);

                            //.. Code added on 20090511 by - Sagar Ghodke

                            oLine.IsLabCPT = Convert.ToBoolean(dtLines.Rows[i]["bIsLabCPT"]);
                            oLine.AuthorizationNo = Convert.ToString(dtLines.Rows[i]["sAuthorizationNo"]);
                            oLine.SendToClaim = Convert.ToBoolean(dtLines.Rows[i]["bSentToClaim"]);

                            //..End Code add 20090511,Sagar Ghodke

                            oLine.LinePrimaryDxCode = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxCode"]);
                            oLine.LinePrimaryDxDesc = Convert.ToString(dtLines.Rows[i]["sLinePrimaryDxDesc"]);

                            oLine.HCFA_RenderingFName = Convert.ToString(dtLines.Rows[i]["RenderingProviderFName"]);
                            oLine.HCFA_RenderingMName = Convert.ToString(dtLines.Rows[i]["RenderingProviderMName"]);
                            oLine.HCFA_RenderingLName = Convert.ToString(dtLines.Rows[i]["RenderingProviderLName"]);
                            oLine.HCFA_RenderingProviderAddress1 = Convert.ToString(dtLines.Rows[i]["RenderringProviderBusAddr1"]);
                            oLine.HCFA_RenderingProviderAddress2 = Convert.ToString(dtLines.Rows[i]["RenderringProviderBusAddr2"]);
                            oLine.HCFA_RenderingProviderCity = Convert.ToString(dtLines.Rows[i]["RenderringProviderCity"]);
                            oLine.HCFA_RenderingProviderState = Convert.ToString(dtLines.Rows[i]["RenderringProviderState"]);
                            oLine.HCFA_RenderingProviderZip = Convert.ToString(dtLines.Rows[i]["RenderringProviderZip"]);
                            oLine.HCFA_RenderingProviderPhone = Convert.ToString(dtLines.Rows[i]["RenderringProviderPhone"]);
                            oLine.HCFA_RenderingProviderMedicalLicenceNo = Convert.ToString(dtLines.Rows[i]["RenderringProviderMedicalLicenceNo"]);
                            oLine.HCFA_RenderingProviderUPIN = Convert.ToString(dtLines.Rows[i]["RenderringProviderUPIN"]);
                            oLine.HCFA_RenderingProviderNPI = Convert.ToString(dtLines.Rows[i]["RenderringProviderNPI"]);
                            oLine.HCFA_RenderingProviderTaxonomy = Convert.ToString(dtLines.Rows[i]["RenderringProviderTaxonomy"]);
                            oLine.HCFA_RenderingProviderSSN = Convert.ToString(dtLines.Rows[i]["RenderringProviderSSN"]);
                            oLine.HCFA_RenderingProviderEIN = Convert.ToString(dtLines.Rows[i]["RenderringProviderEmployerID"]);

                            oLine.NDCID = Convert.ToInt64(dtLines.Rows[i]["nNDCID"]);
                            oLine.NDCCodeQualifier = Convert.ToString(dtLines.Rows[i]["sNDCCodeQualifier"]);
                            oLine.NDCCode = Convert.ToString(dtLines.Rows[i]["sNDCCode"]);
                            oLine.NDCDescription = Convert.ToString(dtLines.Rows[i]["sNDCDescription"]);
                            oLine.NDCUnitCode = Convert.ToString(dtLines.Rows[i]["sNDCUnitCode"]);
                            oLine.NDCUnitDescription = Convert.ToString(dtLines.Rows[i]["sNDCUnitDescription"]);
                            oLine.NDCUnit = Convert.ToString(dtLines.Rows[i]["sNDCUnit"]);
                            oLine.NDCUnitPricing = Convert.ToString(dtLines.Rows[i]["sNDCUnitPricing"]);
                            oLine.Prescription = Convert.ToString(dtLines.Rows[i]["Prescription"]);

                            if (dtLines.Rows[i]["HCFA_NDCCode"] != null && dtLines.Rows[i]["HCFA_NDCCode"] != DBNull.Value)
                            { oLine.DisplayNDCCode_HCFA = Convert.ToString(dtLines.Rows[i]["HCFA_NDCCode"]); }

                            //BL_Transaction_Lines_Notes
                            DataTable dtNotes = new DataTable();
                            oDBParameters.Clear();
                            oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nLineNo", Convert.ToInt64(dtLines.Rows[i]["nTransactionLineNo"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nTransactionDetailID", Convert.ToInt64(dtLines.Rows[i]["nTransactionDetailID"]), ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nNoteId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                            oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                            oDB.Retrive("BL_SELECT_Transaction_Lines_Notes", oDBParameters, out dtNotes);

                            if (dtNotes != null)
                            {
                                Common.GeneralNote oLineNote = null;
                                for (int j = 0; j < dtNotes.Rows.Count; j++)
                                {
                                    //nTransactionID nLineNo nNoteType nNoteId nNoteDateTime nUserID sNoteDescription nClinicID
                                    //oLine.LineNotes[j].TransactionID = TransactionID;
                                    //oLine.LineNotes[j].TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    //oLine.LineNotes[j].NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    //oLine.LineNotes[j].NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    //oLine.LineNotes[j].UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    //oLine.LineNotes[j].NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    //oLine.LineNotes[j].ClinicID = ClinicID;
                                    oLineNote = new GeneralNote();
                                    oLineNote.TransactionID = TransactionID;
                                    oLineNote.TransactionLineId = Convert.ToInt64(dtNotes.Rows[j]["nLineNo"]);
                                    oLineNote.TransactionDetailID = Convert.ToInt64(dtNotes.Rows[j]["nTransactionDetailID"]);
                                    oLineNote.NoteID = Convert.ToInt64(dtNotes.Rows[j]["nNoteId"]);
                                    oLineNote.NoteType = (NoteType)(dtNotes.Rows[j]["nNoteType"]);
                                    oLineNote.NoteDate = Convert.ToInt64(dtNotes.Rows[j]["nNoteDateTime"]);
                                    oLineNote.UserID = Convert.ToInt64(dtNotes.Rows[j]["nUserID"]);
                                    oLineNote.NoteDescription = Convert.ToString(dtNotes.Rows[j]["sNoteDescription"]);
                                    if (dtNotes.Rows[j]["dtCreatedDateTime"] != DBNull.Value)
                                    {
                                        oLineNote.dtCreatedDatetime = Convert.ToDateTime(dtNotes.Rows[j]["dtCreatedDateTime"]);
                                    }
                                    oLineNote.ClinicID = ClinicID;
                                    oLine.LineNotes.Add(oLineNote);
                                    if (oLineNote != null)
                                    { oLineNote.Dispose(); }
                                }
                                dtNotes.Dispose();
                                dtNotes = null;
                            }

                            if (dtInsurance != null)
                            {
                                if (dtInsurance.Rows.Count > 0)
                                {
                                    //Addded by Anil 20080912 

                                    //nTransactionID,nInsuranceID,nClinicID nTransactionDetailID =1,nTransactionLineNo
                                    for (int j = 0; j < dtInsurance.Rows.Count; j++)
                                    {
                                        if (Convert.ToString(dtInsurance.Rows[j]["nTransactionLineNo"]) != "")
                                        {
                                            if (Convert.ToInt64(dtInsurance.Rows[j]["nTransactionLineNo"]) == oLine.TransactionLineId)
                                            {
                                                oLine.InsuranceID = Convert.ToInt64(dtInsurance.Rows[j]["nInsuranceID"]);
                                                oLine.InsuranceSelfMode = (PayerMode)Convert.ToInt32(dtInsurance.Rows[j]["nPaymentMode"]);

                                                gloPatient.gloInsurance ogloInsurance = new gloPatient.gloInsurance(_databaseconnectionstring);
                                                DataTable dtTempInsurance = new DataTable();
                                                dtTempInsurance = ogloInsurance.GetInsurance(oLine.InsuranceID);
                                                if (dtTempInsurance != null && dtTempInsurance.Rows.Count > 0)
                                                {
                                                    //Contact
                                                    oLine.InsuranceName = Convert.ToString(dtTempInsurance.Rows[0]["Name"]);
                                                    //Vinayak - Is Primary/secondary/tertiary
                                                    if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Primary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Primary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Secondary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Secondary.ToString();
                                                    }
                                                    else if (Convert.ToInt32(dtInsurance.Rows[j]["nInsuranceFlag"]) == InsuranceTypeFlag.Tertiary.GetHashCode())
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = InsuranceTypeFlag.Tertiary.ToString();
                                                    }
                                                    else
                                                    {
                                                        oLine.InsurancePrimarySecondaryTertiary = "";
                                                    }

                                                }
                                                if (dtTempInsurance != null) { dtTempInsurance.Dispose(); }
                                                if (ogloInsurance != null) { ogloInsurance.Dispose(); }

                                            }
                                        }
                                    }
                                }
                            }

                            //Transaction line is added in the Transaction
                            oTransaction.Lines.Add(oLine);
                        }
                    }
                    dtLines.Dispose();
                    dtLines = null;
                }
                if (dtInsurance != null)
                {
                    dtInsurance.Dispose();
                    dtInsurance = null;
                }
                DataTable dtInsurancePlan = new DataTable();
                oDBParameters.Clear();
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_InsPlan", oDBParameters, out dtInsurancePlan);

                if (dtInsurancePlan != null)
                {
                    for (int i = 0; i < dtInsurancePlan.Rows.Count; i++)
                    {
                        TransactionInsurancePlan _TransactionInsurancePlan = new TransactionInsurancePlan();
                        _TransactionInsurancePlan.TransactionId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nTransactionID"]);
                        _TransactionInsurancePlan.PatientId = Convert.ToInt64(dtInsurancePlan.Rows[i]["nPatientID"]);
                        _TransactionInsurancePlan.ClaimNo = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClaimNo"]);
                        _TransactionInsurancePlan.InsuranceID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nInsuranceID"]);
                        _TransactionInsurancePlan.ContactID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nContactID"]);
                        _TransactionInsurancePlan.ResponsibilityNo = Convert.ToInt16(dtInsurancePlan.Rows[i]["nResponsibilityNo"]);
                        _TransactionInsurancePlan.ResponsibilityType = Convert.ToInt32(dtInsurancePlan.Rows[i]["nResponsibilityType"]);
                        _TransactionInsurancePlan.IsWorkerComp = Convert.ToBoolean(dtInsurancePlan.Rows[i]["bworkerscomp"]);
                        _TransactionInsurancePlan.InsuranceName = Convert.ToString(dtInsurancePlan.Rows[i]["sInsuranceName"]);
                        _TransactionInsurancePlan.CopayAmount = 0;
                        _TransactionInsurancePlan.ClinicID = Convert.ToInt64(dtInsurancePlan.Rows[i]["nClinicId"]);
                        oTransaction.InsurancePlans.Add(_TransactionInsurancePlan);
                    }
                    dtInsurancePlan.Dispose();
                    dtInsurancePlan = null;
                }

            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (dtTrans != null)
                {
                    dtTrans.Dispose();
                    dtTrans = null;
                }
                oDBParameters.Dispose();

                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }

            }
            return oTransaction;
        }

        #region "Need to Delete - Not In Use"
        public static DataTable GetEOBPayments(Int64 nMasterTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string strQuery = "";
            DataTable dtEOBPayments = null;
            try
            {
                oDB.Connect(false);

                strQuery = "SELECT * FROM BL_EOBPayment_DTL  WITH (NOLOCK) WHERE nBillingTransactionID = " + nMasterTransactionID;
                oDB.Retrive_Query(strQuery, out dtEOBPayments);

            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }

            return dtEOBPayments;

        }
        #endregion

        public static DataTable GetEOBPaymentsV2(Int64 nMasterTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string strQuery = "";
            DataTable dtEOBPayments = null;
            try
            {
                strQuery = "SELECT nContactID,nPatientInsuranceID,bIsPaymentVoid,CONVERT(VARCHAR,dtCloseDate,101) AS dtCloseDate,ISNULL(dPaymentAmount,0) AS dPaymentAmount FROM EOB WHERE nBillingTransactionID = " + nMasterTransactionID + " AND nEntryType NOT IN (" + (int)gloAccountsV2.PaymentEntryTypeV2.PatientPayment + "," + (int)gloAccountsV2.PaymentEntryTypeV2.PatientCorrection + ") ";
                oDB.Connect(false);
                oDB.Retrive_Query(strQuery, out dtEOBPayments);
                oDB.Disconnect();
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

            return dtEOBPayments;

        }

        public static DataTable LoadClaimReprtingCategory(Int64 nMasterTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string strQuery = "";
            DataTable dtClaimReportingCategory = null;
            try
            {
                strQuery = "SELECT Isnull(nClaimReportingCategoryID,0) nClaimReportingCategoryID FROM BL_Transaction_MST WHERE nTransactionID = " + nMasterTransactionID;
                oDB.Connect(false);
                oDB.Retrive_Query(strQuery, out dtClaimReportingCategory);
                oDB.Disconnect();
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

            return dtClaimReportingCategory;

        }

        public static DataTable GetAllClaimReportingCategory(Int64 nTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string strQuery = "";
            DataTable dtClaimReportingCategory = null;
            try
            {
                strQuery = "SELECT  nClaimReportingCategoryID ,"
                                                                + " sCode AS sDescription "
                                                                + "  FROM    BL_ClaimReportingCategory_MST "
                                                                + "  WHERE   bIsActive = 1 " 
                                                                + " UNION "
                                                                + "  SELECT  BL_ClaimReportingCategory_MST.nClaimReportingCategoryID ,"
                                                                + " sCode AS sDescription"
                                                                + " FROM    BL_ClaimReportingCategory_MST"
                                                                + " INNER JOIN bl_transaction_mst ON dbo.BL_ClaimReportingCategory_MST.nClaimReportingCategoryID = dbo.BL_Transaction_MST.nClaimReportingCategoryID"
                                                                + " INNER JOIN dbo.BL_Transaction_Claim_MST ON BL_Transaction_Claim_MST.nTransactionMasterID=bl_transaction_mst.nTransactionID"
                                                                + " WHERE BL_Transaction_Claim_MST.nTransactionID=" + nTransactionID
                                                                + " ORDER BY sDescription ";
                oDB.Connect(false);
                oDB.Retrive_Query(strQuery, out dtClaimReportingCategory);
                oDB.Disconnect();
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

            return dtClaimReportingCategory;

        }

        public static Boolean CheckForPaymentAgaistClaim(Int64 nMasterTransactionID)
        {

            Boolean bIsPaymentMade = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string strQuery = "";
            DataTable dtCheckForPayments = null;
            try
            {
                strQuery = "SELECT ISNULL(dPaymentAmount,0) AS dPaymentAmount FROM EOB WHERE nBillingTransactionID =" + nMasterTransactionID + " AND ISNULL(bIsPaymentVoid,0)=0";
                oDB.Connect(false);
                oDB.Retrive_Query(strQuery, out dtCheckForPayments);
                oDB.Disconnect();
                if (dtCheckForPayments != null && dtCheckForPayments.Rows.Count > 0)
                {
                    bIsPaymentMade = true;
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

            return bIsPaymentMade;

        }

        #region "To be Deleted"
        //public static bool IsInsPaymentExist(Int64 nMasterTransactionID)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string strQuery = "";
        //    DataTable dtEOBPayments = null;
        //    bool bReturn = false;
        //    try
        //    {
        //        oDB.Connect(false);

        //        strQuery = "SELECT * FROM BL_EOBPayment_DTL  WITH (NOLOCK) WHERE nBillingTransactionID = " + nMasterTransactionID + "AND ISNULL(bIsPaymentVoid,0) = 0 AND nPaymentType NOT IN(" + (int)EOBPaymentType.PatientCorrection + "," + (int)EOBPaymentType.PatientPayment + "," + (int)EOBPaymentType.PatientRefund + "," + (int)EOBPaymentType.PatientReserved + ")";
        //        oDB.Retrive_Query(strQuery, out dtEOBPayments);

        //        if (dtEOBPayments.Rows.Count > 0)
        //        {
        //            bReturn = true;
        //        }
        //        else
        //        {
        //            bReturn = false;
        //        }

        //    }
        //    catch (Exception Ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
        //        bReturn = false;
        //    }
        //    finally
        //    {
        //        oDB.Disconnect();
        //        oDB.Dispose();
        //    }

        //    return bReturn;

        //}
        #endregion

        public static DataTable GetEOBNextAction(Int64 nMasterTransactionID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string strQuery = "";
            DataTable dtEOBNextAction = null;
            try
            {
                strQuery = "SELECT nBillingTransactionID,nNextActionContactID,nNextActionPatientInsID,nTrackMstTrnID FROM BL_EOB_NextAction  WITH (NOLOCK) WHERE nBillingTransactionID = " + nMasterTransactionID;
                oDB.Connect(false);
                oDB.Retrive_Query(strQuery, out dtEOBNextAction);
                oDB.Disconnect();
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

            return dtEOBNextAction;

        }

        public static bool ChkPaymentAgainstIns(DataTable _dt, Int64 nContactID, Int64 nInsuranceID)
        {
            Boolean _bReturn = false;
            DataTable dtPayments = _dt.Clone();
            DataRow[] drPayments;
            try
            {
                drPayments = _dt.Select("nContactInsID = " + nContactID + " and ISNULL(nMSTAccountID,0) = " + nInsuranceID + " and ISNULL(bIsPaymentVoid,0) = 0 ");

                foreach (DataRow dr in drPayments)
                {
                    dtPayments.ImportRow(dr);
                }

                if (dtPayments.Rows.Count > 0)
                {
                    Int64 nTotalAmt = Convert.ToInt64(dtPayments.Compute("SUM(nAmount)", String.Empty));

                    if (nTotalAmt > 0)
                    {
                        _bReturn = true;
                    }
                    else
                    {
                        _bReturn = false;
                    }
                }
                else
                {
                    _bReturn = false;
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }


            return _bReturn;

        }


        public static bool ChkPaymentAgainstInsV2(DataTable _dt, Int64 nContactID, Int64 nInsuranceID)
        {
            Boolean _bReturn = false;
            DataTable dtPayments = _dt.Clone();
            DataRow[] drPayments;
            try
            {
                drPayments = _dt.Select("nContactID = " + nContactID + " and ISNULL(nPatientInsuranceID,0) = " + nInsuranceID + " and ISNULL(bIsPaymentVoid,0) = 0 ");

                foreach (DataRow dr in drPayments)
                {
                    dtPayments.ImportRow(dr);
                }

                if (dtPayments.Rows.Count > 0)
                {
                    Int64 nTotalAmt = Convert.ToInt64(dtPayments.Compute("SUM(dPaymentAmount)", String.Empty));

                    if (nTotalAmt > 0)
                    {
                        _bReturn = true;
                    }
                    else
                    {
                        _bReturn = false;
                    }
                }
                else
                {
                    _bReturn = false;
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }


            return _bReturn;

        }
        public static bool ChkPaymentAgainstInsV3(DataTable _dt, Int64 nContactID, Int64 nInsuranceID)
        {
            Boolean _bReturn = false;           
            try
            {
                var sum = (from payment in _dt.AsEnumerable()
                           where payment.Field<System.Int64>("nContactID") == nContactID
                           && payment.Field<System.Int64>("nPatientInsuranceID") == nInsuranceID
                           && payment.Field<System.Boolean>("bIsPaymentVoid") == false                         
                           select payment).Sum(x => x.Field<System.Decimal>("dPaymentAmount"));

                //oResult.CopyToDataTable(dtPayments, LoadOption.OverwriteChanges);
                //var sum = dtPayments.AsEnumerable().Sum(x => x.Field<System.Decimal>("dPaymentAmount"));

                if (sum > 0)
                {
                    _bReturn = true;
                }
                else
                {
                    _bReturn = false;
                }
            }
            catch (Exception Ex)
            {
                _bReturn = false;
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }
            return _bReturn;
        }
        public static bool IsExistInNextaction(DataTable _dt, Int64 nContactID, Int64 nInsuranceID, Int64 nTransactionID)
        {
            Boolean _bReturn = false;
            DataTable dtNextAction = _dt.Clone();
            DataRow[] drNextAction;
            try
            {
                drNextAction = _dt.Select("nNextActionContactID = " + nContactID + " and ISNULL(nNextActionPatientInsID,0) = " + nInsuranceID + " and nTrackMstTrnID <> " + nTransactionID);

                if (drNextAction.Length > 0)
                {
                    _bReturn = true;
                }
                else
                {
                    _bReturn = false;
                }
            }
            catch (Exception Ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(Ex.ToString(), true);
            }

            return _bReturn;
        }

        public DataTable GetTransactionIDs(Int64 PatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();
            try
            {
                oDB.Connect(false);
                string sqlQuery = "SELECT DISTINCT BL_Transaction_MST.nTransactionID FROM BL_Transaction_MST WITH (NOLOCK) " +
                                  "WHERE BL_Transaction_MST.nPatientID = " + PatientID + " " +
                                  "ORDER BY BL_Transaction_MST.nTransactionID";
                oDB.Retrive_Query(sqlQuery, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return dt;
        }

        public DataTable GetBatchIDs()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();

            try
            {
                oDB.Connect(false);
                string sqlQuery = "SELECT DISTINCT nBatchID, nBatchDate, nBatchNo, sBatchNoPrefix, nBatchType, nClinicID FROM BL_Batch_MST WITH (NOLOCK) ORDER BY nBatchDate desc";
                oDB.Retrive_Query(sqlQuery, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return dt;
        }

        public DataTable GetTransactionsDetailIDs(Int64 TransactionID, Int64 ClinicID)
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();
            try
            {
                oDB.Connect(false);
                string sqlQuery = " SELECT nTransactionDetailID,nTransactionLineNo FROM " +
                                  " BL_Transaction_Lines WITH (NOLOCK) WHERE nTransactionID = " + TransactionID + " AND nClinicID = " + ClinicID + " ";
                oDB.Retrive_Query(sqlQuery, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return dt;
        }

        //public DataTable GetTransactionIDs(Int64 PatientID)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    DataTable dt = new DataTable();
        //    try
        //    {
        //        oDB.Connect(false);
        //        string sqlQuery = " SELECT BL_Transaction_MST.nTransactionID,BL_Batch_DTL.nBatchID " +
        //                          " FROM BL_Batch_DTL INNER JOIN BL_Batch_MST " +
        //                          " ON BL_Batch_DTL.nBatchID = BL_Batch_MST.nBatchID INNER JOIN BL_Transaction_MST " +
        //                          " ON BL_Batch_DTL.nTransactionID = BL_Transaction_MST.nTransactionID " +
        //                          " WHERE BL_Transaction_MST.nPatientID = "+PatientID+" ";
        //        oDB.Retrive_Query(sqlQuery, out dt);
        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    finally
        //    {
        //        oDB.Dispose();
        //    }
        //    return dt;
        //}

        public string GetPatient(Int64 PatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();
            string strPatientName = "";
            try
            {
                oDB.Connect(false);
                string sqlQuery = "SELECT (ISNULL(Patient.sFirstName, '') + SPACE(1) +ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '')) AS PatientName FROM Patient WITH (NOLOCK)  " +
                                  "WHERE nPatientID = " + PatientID;

                oDB.Retrive_Query(sqlQuery, out dt);
                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        strPatientName = Convert.ToString(dt.Rows[0][0]);
                    }
                    else
                    {
                        strPatientName = "";
                    }
                }
                else
                {
                    strPatientName = "";
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return strPatientName;
        }

        public Int64 GetPatientByClaim(Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            object _retVal = null;
            Int64 _patientid = 0;

            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT nPatientID from BL_Transaction_MST WITH (NOLOCK) WHERE nClaimNo = " + ClaimNo + "";
                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();
                if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                { _patientid = Convert.ToInt64(_retVal); }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }

            return _patientid;
        }

        public Int64 GetTransactionsPatientID(Int64 TransactionId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object retValue = new object();
            Int64 _TransactionPatientId = 0;

            try
            {

                if (TransactionId > 0)
                {
                    oDB.Connect(false);
                    _sqlQuery = "select  nPatientID  from BL_Transaction_MST WITH (NOLOCK)  where nTransactionID = " + TransactionId + " AND nClinicID = " + ClinicId + " ";
                    retValue = oDB.ExecuteScalar_Query(_sqlQuery);
                    if (retValue != null)
                    {
                        if (retValue != DBNull.Value && Convert.ToInt64(retValue) > 0)
                        {
                            _TransactionPatientId = Convert.ToInt64(retValue);
                        }
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (retValue != null) { retValue = null; }
            }
            return _TransactionPatientId;
        }


        public Int64 GetClaimPatientID(Int64 ClaimTransactionId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object retValue = new object();
            Int64 _TransactionPatientId = 0;

            try
            {

                if (ClaimTransactionId > 0)
                {
                    oDB.Connect(false);
                    _sqlQuery = "select  nPatientID  from BL_Transaction_Claim_MST WITH (NOLOCK) where nTransactionID = " + ClaimTransactionId + " AND nClinicID = " + ClinicId + " ";
                    retValue = oDB.ExecuteScalar_Query(_sqlQuery);
                    if (retValue != null)
                    {
                        if (retValue != DBNull.Value && Convert.ToInt64(retValue) > 0)
                        {
                            _TransactionPatientId = Convert.ToInt64(retValue);
                        }
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (retValue != null) { retValue = null; }
            }
            return _TransactionPatientId;
        }

        //Added by Subashish_b on 06/Jan /2011 (integration made on date-10/May/2011) for  adding 3 more parameter for adding PAF values while saving
        public Int64 GetPatientAccountID(Int64 ClaimTransactionId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(AppSettings.ConnectionStringPM);

            string _sqlQuery = string.Empty;
            Int64 _nPAccountID = 0;
            Object _retVal = null;

            try
            {
                _sqlQuery = " SELECT nPAccountID FROM BL_Transaction_Claim_MST where nTransactionID = " + ClaimTransactionId + " AND nClinicID = " + ClinicId;

                oDB.Connect(false);
                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();

                if (_retVal != null && Convert.ToString(_retVal).Trim() != "" && Convert.ToInt64(_retVal) > 0)
                { _nPAccountID = Convert.ToInt64(_retVal); }

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }
            return _nPAccountID;
        }
        //End

        public string GetProvider(Int64 ProviderID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();
            string strProviderName = "";
            try
            {
                oDB.Connect(false);
                string sqlQuery = "SELECT   CASE ISNULL(PROVIDER_MST.sMiddleName,'') WHEN '' "+ 
                                    "THEN  PROVIDER_MST.sFirstName + SPACE(1) +  PROVIDER_MST.sLastName "+
                                    "ELSE PROVIDER_MST.sFirstName + SPACE(1) + PROVIDER_MST.sMiddleName + SPACE(1) + PROVIDER_MST.sLastName "+
                                    "END AS ProviderName FROM Provider_MST WITH (NOLOCK)  " +
                                  "WHERE nProviderID = " + ProviderID;

                oDB.Retrive_Query(sqlQuery, out dt);
                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        strProviderName = Convert.ToString(dt.Rows[0][0]);
                    }
                    else
                    {
                        strProviderName = "";
                    }
                }
                else
                {
                    strProviderName = "";
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return strProviderName;
        }

        public string GetCollectionAgencyname(Int64 nContactID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();
            string strCollectionAgency = "";
            try
            {
                oDB.Connect(false);
                string sqlQuery = "SELECT ISNULL(sName,'') AS collectionagency FROM dbo.Contacts_MST WHERE nContactID=" + nContactID;

                oDB.Retrive_Query(sqlQuery, out dt);
                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        strCollectionAgency = Convert.ToString(dt.Rows[0][0]);
                    }
                    else
                    {
                        strCollectionAgency = "";
                    }
                }
                else
                {
                    strCollectionAgency = "";
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return strCollectionAgency;
        }

        public DataTable GetTransaction(Int64 TransactionID, Int64 ClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            DataTable dtTrans = new DataTable();
            //Transaction oTransaction = new Transaction();
            try
            {
                oDB.Connect(false);
                // For BL_Transaction_MST Table.
                oDBParameters.Add("@nTransactionID", TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@nClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Retrive("BL_SELECT_Transaction_MST", oDBParameters, out dtTrans);
                /*
                if (dtTrans != null)
                {
                    if (dtTrans.Rows.Count > 0)
                    {
                        // nTransactionID,nMasterAppointmentID,nAppointmentID,nVisitID,nTransactionDate,sCaseNoPrefix,nCaseNo,nPatientID
                        // nTransactionProviderID,sMaritalStatus,sFacilityCode,sFacilityDescription, nTransactionType, nClinicID
                        // Added Later by Anil on 20080912
                        //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
                        oTransaction.TransactionID = TransactionID;
                        oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
                        oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
                        oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
                        oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
                        oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
                        oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
                        oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
                        oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
                        oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
                        oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);
                        oTransaction.PatientID = Convert.ToInt64(dtTrans.Rows[0]["nPatientID"]);
                        oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
                        oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
                        oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
                        oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
                        oTransaction.PrefixID = 0; ////This ID is use to generate a unique TransactionID in Stored Procedure.
                        oTransaction.ClinicID = ClinicID;
                        oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);

                        oTransaction.Transaction_Status = (TransactionStatus)Convert.ToInt32(dtTrans.Rows[0]["nTransactionStatusID"]);
                        oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
                        oTransaction.HospitalizationDateFrom = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateFrom"]);
                        oTransaction.HospitalizationDateTo = Convert.ToInt64(dtTrans.Rows[0]["nHopitalizationDateTo"]);
                        oTransaction.OutSideLab = Convert.ToBoolean(dtTrans.Rows[0]["bOutSideLab"]);
                        oTransaction.OutSideLabCharges = Convert.ToDecimal(dtTrans.Rows[0]["dOutSideLabCharges"]);

                        oTransaction.AutoClaim = Convert.ToBoolean(dtTrans.Rows[0]["bAutoClaim"]);
                        oTransaction.AccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nAccidentDate"]);
                        oTransaction.WorkersComp = Convert.ToBoolean(dtTrans.Rows[0]["bWorkersComp"]);
                        oTransaction.WorkersCompNo = Convert.ToString(dtTrans.Rows[0]["sWorkersCompNo"]);
                        oTransaction.WorkersCompPrintonCMS1500 = Convert.ToBoolean(dtTrans.Rows[0]["bIsWorkersCompOnCMS1500"]);
                        oTransaction.SendCounter = Convert.ToInt32(dtTrans.Rows[0]["nSendCounter"]);
                        oTransaction.SendToRejection = Convert.ToInt32(dtTrans.Rows[0]["nSendToRejection"]);
                        oTransaction.LastStatusId = Convert.ToInt64(dtTrans.Rows[0]["nLastStatusId"]);

                        oTransaction.TransactionUserID = Convert.ToInt64(dtTrans.Rows[0]["nUserID"]);
                        oTransaction.TransactionUserName = Convert.ToString(dtTrans.Rows[0]["sUserName"]);

                        //Code Added on 20090710 - Vinayak Gadekar
                        oTransaction.OtherAccident = Convert.ToBoolean(dtTrans.Rows[0]["bOtherAccident"]);
                        oTransaction.OtherAccidentDate = Convert.ToInt64(dtTrans.Rows[0]["nOtherAccidentDate"]);
                    }
                }
                */
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return dtTrans;
        }

        #region " Code moved to ClaimManager"


        //public DataTable GetTransaction(Int64 BatchId)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
        //    string _sqlQuery = "";
        //    DataTable dtTrans = new DataTable();
        //    Transaction oTransaction = new Transaction();
        //    try
        //    {
        //        oDB.Connect(false);
        //        _sqlQuery = " SELECT DISTINCT BL_Batch_DTL.nBatchID, BL_Transaction_MST.nTransactionID, BL_Transaction_MST.nMasterAppointmentID, " +
        //                    " BL_Transaction_MST.nAppointmentID, BL_Transaction_MST.nVisitID, BL_Transaction_MST.nOnsiteDate, " +
        //                    " BL_Transaction_MST.nInjuryDate, BL_Transaction_MST.nUnableToWorkFromDate, " +
        //                    " BL_Transaction_MST.nUnableToWorkTillDate, BL_Transaction_MST.nTransactionDate, " +
        //                    " BL_Transaction_MST.sCaseNoPrefix,BL_Transaction_MST.nClaimNo, BL_Transaction_MST.nPatientID AS PatientID, " +
        //                    " (ISNULL(Patient.sFirstName,'') + SPACE(1) + ISNULL(Patient.sMiddleName,'') + SPACE(1) + ISNULL(Patient.sLastName,'')) AS PatientName, " +
        //                    " BL_Transaction_MST.nTransactionProviderID, " +
        //                    " (ISNULL(Provider_MST.sFirstName,'')+ SPACE(1) + ISNULL(Provider_MST.sMiddleName,'') + SPACE(1) + ISNULL(Provider_MST.sLastName,'')) AS TransactionProviderName , " +
        //                    " BL_Transaction_MST.sFacilityCode, BL_Transaction_MST.sFacilityDescription, " +
        //                    " BL_Transaction_MST.nTransactionType, BL_Transaction_MST.nClinicID, " +
        //                    " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS nTransactionStatusID, "+
        //                    " ISNULL(BL_Transaction_MST.sState,'') AS sState, " +
        //                    " ISNULL(BL_Transaction_MST.nHopitalizationDateFrom,0) AS nHopitalizationDateFrom, " +
        //                    " ISNULL(BL_Transaction_MST.nHopitalizationDateTo,0) AS nHopitalizationDateTo, " +
        //                    " ISNULL(BL_Transaction_MST.bOutSideLab,0) AS bOutSideLab, " +
        //                    " ISNULL(BL_Transaction_MST.dOutSideLabCharges,0) AS dOutSideLabCharges, " +
        //                    " ISNULL(bAutoClaim,0) AS bAutoClaim, " +
        //                    " ISNULL(nAccidentDate,0) AS nAccidentDate, " +
        //                    " ISNULL(bWorkersComp,0) AS bWorkersComp, "+
        //                    " ISNULL(BL_Transaction_MST.nSendCounter,0) AS nSendCounter, "+
        //                    " ISNULL(BL_Transaction_MST.nSendToRejection,0) AS nSendToRejection , "+
        //                    " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId " +
        //                    " FROM BL_Batch_DTL LEFT OUTER JOIN BL_Transaction_MST " +
        //                    " ON BL_Batch_DTL.nTransactionID = BL_Transaction_MST.nTransactionID LEFT OUTER JOIN " +
        //                    " Provider_MST ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
        //                    " Patient ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
        //                    " WHERE BL_Batch_DTL.nBatchID = " + BatchId + " ";

        //        oDB.Retrive_Query(_sqlQuery, out dtTrans);

        //        if (dtTrans != null)
        //        {
        //            if (dtTrans.Rows.Count > 0)
        //            {
        //                // nTransactionID,nMasterAppointmentID,nAppointmentID,nVisitID,nTransactionDate,sCaseNoPrefix,nCaseNo,nPatientID
        //                // nTransactionProviderID,sMaritalStatus,sFacilityCode,sFacilityDescription, nTransactionType, nClinicID
        //                // Added Later by Anil on 20080912
        //                //nOnsiteDate, nInjuryDate, nUnableToWorkFromDate, nUnableToWorkTillDate
        //                oTransaction.TransactionID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionID"]);
        //                oTransaction.MasterAppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nMasterAppointmentID"]);
        //                oTransaction.AppointmentID = Convert.ToInt64(dtTrans.Rows[0]["nAppointmentID"]);
        //                oTransaction.VisitID = Convert.ToInt64(dtTrans.Rows[0]["nVisitID"]);
        //                oTransaction.OnsiteDate = Convert.ToInt64(dtTrans.Rows[0]["nOnsiteDate"]);
        //                oTransaction.InjuryDate = Convert.ToInt64(dtTrans.Rows[0]["nInjuryDate"]);
        //                oTransaction.UnableToWorkFromDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkFromDate"]);
        //                oTransaction.UnableToWorkTillDate = Convert.ToInt64(dtTrans.Rows[0]["nUnableToWorkTillDate"]);
        //                oTransaction.TransactionDate = Convert.ToInt64(dtTrans.Rows[0]["nTransactionDate"]);
        //                oTransaction.CaseNoPrefix = dtTrans.Rows[0]["sCaseNoPrefix"].ToString();
        //                oTransaction.ClaimNo = Convert.ToInt64(dtTrans.Rows[0]["nClaimNo"]);
        //                oTransaction.PatientID = Convert.ToInt64(dtTrans.Rows[0]["PatientID"]);
        //                oTransaction.ProviderID = Convert.ToInt64(dtTrans.Rows[0]["nTransactionProviderID"]);
        //                //oTransaction.MaritalStatus = dtTrans.Rows[0]["sMaritalStatus"].ToString();
        //                oTransaction.FacilityCode = dtTrans.Rows[0]["sFacilityCode"].ToString();
        //                oTransaction.FacilityDescription = dtTrans.Rows[0]["sFacilityDescription"].ToString();
        //                oTransaction.PrefixID = 0; ////This ID is use to generate a unique TransactionID in Stored Procedure.
        //                oTransaction.ClinicID = ClinicID;
        //                oTransaction.TransactionMode = (TransactionType)Convert.ToInt64(dtTrans.Rows[0]["nTransactionType"]);
        //                oTransaction.State = Convert.ToString(dtTrans.Rows[0]["sState"]);
        //            }
        //        }

        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    finally
        //    {
        //        oDB.Dispose();
        //    }
        //    return dtTrans;
        //}

        //public DataTable GetTransactions()
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    DataTable dtCharges = null;
        //    string _sqlQuery = "";
        //    string _selCol = "Select";
        //    string _StatusIcon = "StsIcon";
        //    try
        //    {
        //        oDB.Connect(false);
        //        _sqlQuery = " SELECT  DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = ''," +
        //        " case len(BL_Transaction_MST.nClaimNo) "+
        //        " when 5 then convert(varchar, BL_Transaction_MST.nClaimNo) "+
        //        " when 4 then '0' + convert(varchar,BL_Transaction_MST.nClaimNo)  "+
        //        " when 3 then '00' + convert(varchar,BL_Transaction_MST.nClaimNo)  "+
        //        " when 2 then '000' + convert(varchar,BL_Transaction_MST.nClaimNo)  "+
        //        " when 1 then convert(varchar, '0000' + convert(varchar,BL_Transaction_MST.nClaimNo)) "+
        //        " end AS Claim , " +
        //        " BL_Transaction_MST.nClaimNo AS ClaimNo ,"+
        //        " BL_Transaction_MST.nTransactionID,BL_Transaction_MST.nTransactionDate, " +
        //        " CONVERT(VARCHAR,CONVERT(DateTime,CONVERT(VARCHAR,BL_Transaction_MST.nTransactionDate),101),101) AS Date, "+
        //        " BL_Transaction_MST.nPatientID,Patient.sPatientCode as Code, "+
        //        " ISNULL(Patient.sFirstName,'')+SPACE(1)+ISNULL(Patient.sMiddleName,'')+SPACE(1)+ISNULL(Patient.sLastName,'') AS PatientName, " +
        //        " ISNULL(Patient.sFirstName,'') AS FirstName, " +
        //        " ISNULL(Patient.sMiddleName,'') AS MI,ISNULL(Patient.sLastName,'') AS LastName, " +
        //        " ISNULL(Patient.nSSN,'') AS nPatientSSN, " +
        //        " BL_Transaction_MST.nTransactionProviderID, "+
        //        " ISNULL(Provider_MST.sFirstName,'')+SPACE(1)+ISNULL(Provider_MST.sMiddleName,'')+SPACE(1)+ISNULL(Provider_MST.sLastName,'') AS ProviderName, " +
        //        " ISNULL(Provider_MST.sFirstName,'') AS ProviderFName, " +
        //        " ISNULL(Provider_MST.sMiddleName,'') AS ProviderMName,ISNULL(Provider_MST.sLastName,'') AS ProviderLName, " +
        //        " ISNULL(BL_Transaction_MST.sFacilityCode,'') AS sFacilityCode, " +
        //        " ISNULL(BL_Transaction_MST.sFacilityDescription,'') AS Facility, " +
        //        " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, "+
        //        " ISNULL(BL_Transaction_MST.nSendCounter,0) AS nSendCounter, "+
        //        " ISNULL(BL_Transaction_MST.nSendToRejection,0) AS nSendToRejection, "+
        //        " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId " +
        //        " FROM BL_Transaction_MST LEFT OUTER JOIN " +
        //        " Provider_MST ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
        //        " Patient ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
        //        " WHERE " +
        //        " BL_Transaction_MST.nClinicID = " + this.ClinicID + " ORDER BY BL_Transaction_MST.nTransactionDate desc";
        //        oDB.Retrive_Query(_sqlQuery, out dtCharges);
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    {
        //        dbEx.ERROR_Log(dbEx.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }

        //    return dtCharges;
        //}

        //public DataTable GetTransactions(TransactionStatus oTrnStatus)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    DataTable dtCharges = null;
        //    string _sqlQuery = "";
        //    string _selCol = "Select";
        //    string _StatusIcon = "StsIcon";
        //    try
        //    {
        //        oDB.Connect(false);
        //        _sqlQuery = " SELECT  DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = ''," +
        //        " case len(BL_Transaction_MST.nClaimNo) " +
        //        " when 5 then convert(varchar, BL_Transaction_MST.nClaimNo) " +
        //        " when 4 then '0' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
        //        " when 3 then '00' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
        //        " when 2 then '000' + convert(varchar,BL_Transaction_MST.nClaimNo)  " +
        //        " when 1 then convert(varchar, '0000' + convert(varchar,BL_Transaction_MST.nClaimNo)) " +
        //        " end AS Claim , " +
        //        " BL_Transaction_MST.nClaimNo AS ClaimNo ," +
        //        " BL_Transaction_MST.nTransactionID,BL_Transaction_MST.nTransactionDate, " +
        //        " CONVERT(VARCHAR,CONVERT(DateTime,CONVERT(VARCHAR,BL_Transaction_MST.nTransactionDate),101),101) AS Date, " +
        //        " BL_Transaction_MST.nPatientID,Patient.sPatientCode as Code, " +
        //        " ISNULL(Patient.sFirstName,'')+SPACE(1)+ISNULL(Patient.sMiddleName,'')+SPACE(1)+ISNULL(Patient.sLastName,'') AS PatientName, " +
        //        " ISNULL(Patient.sFirstName,'') AS FirstName, " +
        //        " ISNULL(Patient.sMiddleName,'') AS MI,ISNULL(Patient.sLastName,'') AS LastName, " +
        //        " ISNULL(Patient.nSSN,'') AS nPatientSSN, " +
        //        " BL_Transaction_MST.nTransactionProviderID, " +
        //        " ISNULL(Provider_MST.sFirstName,'')+SPACE(1)+ISNULL(Provider_MST.sMiddleName,'')+SPACE(1)+ISNULL(Provider_MST.sLastName,'') AS ProviderName, " +
        //        " ISNULL(Provider_MST.sFirstName,'') AS ProviderFName, " +
        //        " ISNULL(Provider_MST.sMiddleName,'') AS ProviderMName,ISNULL(Provider_MST.sLastName,'') AS ProviderLName, " +
        //        " ISNULL(BL_Transaction_MST.sFacilityCode,'') AS sFacilityCode, " +
        //        " ISNULL(BL_Transaction_MST.sFacilityDescription,'') AS Facility, " +
        //        " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatusId, " +
        //        " ISNULL(BL_Transaction_MST.nSendCounter,0) AS nSendCounter, " +
        //        " ISNULL(BL_Transaction_MST.nSendToRejection,0) AS nSendToRejection, " +
        //        " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
        //        " ISNULL(BL_Transaction_Status.nSendToInsuranceID,0) AS nSendToInsuranceID, " +
        //        " ISNULL(BL_Transaction_Status.nClaimSendType,0) AS nClaimSendType " +
        //        " FROM BL_Transaction_MST INNER JOIN " +
        //        " BL_Transaction_Status ON BL_Transaction_MST.nLastStatusId = BL_Transaction_Status.nStatusID LEFT OUTER JOIN " +
        //        " Provider_MST ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
        //        " Patient ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
        //        " WHERE " +
        //        " BL_Transaction_MST.nTransactionStatusID = " + oTrnStatus.GetHashCode() + "" +
        //        " AND BL_Transaction_MST.nClinicID = " + this.ClinicID + " ";


        //        oDB.Retrive_Query(_sqlQuery, out dtCharges);
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    {
        //        dbEx.ERROR_Log(dbEx.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }

        //    return dtCharges;
        //}

        //public DataTable GetTransactions(Int64 Batchid,TransactionStatus oStatus)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    DataTable dtCharges = null;
        //    string _sqlQuery = "";
        //    string _selCol = "Select";
        //    string _StatusIcon = "StsIcon";
        //    try
        //    {
        //        oDB.Connect(false);


        //        _sqlQuery = " SELECT DISTINCT '" + _selCol + "' = 0 ,'" + _StatusIcon + "' = '', " +
        //        " CASE len(BL_Transaction_MST.nClaimNo) " +
        //        " WHEN 5 THEN CONVERT(varchar, BL_Transaction_MST.nClaimNo) " +
        //        " WHEN 4 THEN '0' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
        //        " WHEN 3 THEN '00' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
        //        " WHEN 2 THEN '000' + CONVERT(varchar, BL_Transaction_MST.nClaimNo)  " +
        //        " WHEN 1 THEN CONVERT(varchar, '0000' + CONVERT(varchar,BL_Transaction_MST.nClaimNo)) END AS Claim, " +
        //        " BL_Transaction_MST.nClaimNo AS ClaimNo, BL_Transaction_MST.nTransactionID,  " +
        //        " BL_Transaction_MST.nTransactionDate, CONVERT(VARCHAR, CONVERT(DateTime, CONVERT(VARCHAR, BL_Transaction_MST.nTransactionDate),101), 101) AS Date,  " +
        //        " BL_Transaction_MST.nPatientID, Patient.sPatientCode AS Code, ISNULL(Patient.sFirstName, '') + SPACE(1)  " +
        //        " + ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '') AS PatientName, ISNULL(Patient.sFirstName, '') AS FirstName,  " +
        //        " ISNULL(Patient.sMiddleName, '') AS MI, ISNULL(Patient.sLastName, '') AS LastName, ISNULL(Patient.nSSN, '') AS nPatientSSN,  " +
        //        " BL_Transaction_MST.nTransactionProviderID, ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1)  " +
        //        " + ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,  " +
        //        " ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName,  " +
        //        " ISNULL(BL_Transaction_MST.sFacilityCode, '') AS sFacilityCode, ISNULL(BL_Transaction_MST.sFacilityDescription, '') AS Facility,  " +
        //        " ISNULL(BL_Transaction_MST.nTransactionStatusID, 0) AS TransactionStatusId, ISNULL(BL_Transaction_MST.nSendCounter, 0) AS nSendCounter,  " +
        //        " ISNULL(BL_Transaction_MST.nSendToRejection, 0) AS nSendToRejection , " +
        //        " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
        //        " ISNULL(BL_Transaction_Status.nSendToInsuranceID,0) AS nSendToInsuranceID, " +
        //        " ISNULL(BL_Transaction_Status.nClaimSendType,0) AS nClaimSendType " +
        //        " FROM BL_Transaction_MST INNER JOIN " +
        //        " BL_Transaction_Status ON BL_Transaction_MST.nLastStatusId = BL_Transaction_Status.nStatusID LEFT OUTER JOIN " +
        //        " Provider_MST ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
        //        " Patient ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
        //        " WHERE     (BL_Transaction_MST.nClinicID = " + this.ClinicID + ")  " +
        //        " AND (BL_Transaction_Status.nBatchID = " + Batchid + ")  " +
        //        " AND (BL_Transaction_Status.nStatus = " + oStatus.GetHashCode() + ")  " +
        //        " AND (BL_Transaction_MST.nTransactionStatusID = " + oStatus.GetHashCode() + ") " +
        //        " ORDER BY BL_Transaction_MST.nTransactionDate DESC ";

        //        oDB.Retrive_Query(_sqlQuery, out dtCharges);
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    {
        //        dbEx.ERROR_Log(dbEx.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
        //    }

        //    return dtCharges;
        //}

        #endregion " Code moved to ClaimManager"

        public DataTable GetTransaction(DateTime ClaimDate)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            string _sqlQuery = "";
            DataTable dtTrans = new DataTable();
    //        Transaction oTransaction = new Transaction();
            Int64 _ClaimDate = 0;
            try
            {
                oDB.Connect(false);
                _ClaimDate = gloDateMaster.gloDate.DateAsNumber(ClaimDate.ToShortDateString());

                if (_ClaimDate != 0)
                {
                    //_sqlQuery = " SELECT DISTINCT " +
                    //        " BL_Transaction_MST.nTransactionID, BL_Transaction_MST.nMasterAppointmentID, BL_Transaction_MST.nAppointmentID,  " +
                    //        " BL_Transaction_MST.nVisitID, BL_Transaction_MST.nOnsiteDate, BL_Transaction_MST.nInjuryDate, BL_Transaction_MST.nUnableToWorkFromDate,  " +
                    //        " BL_Transaction_MST.nUnableToWorkTillDate, BL_Transaction_MST.nTransactionDate, BL_Transaction_MST.sCaseNoPrefix,  " +
                    //        " BL_Transaction_MST.nClaimNo, BL_Transaction_MST.nPatientID AS PatientID, ISNULL(Patient.sFirstName, '') + SPACE(1)  " +
                    //        " + ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '') AS PatientName, BL_Transaction_MST.nTransactionProviderID,  " +
                    //        " ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1) + ISNULL(Provider_MST.sLastName, '')  " +
                    //        " AS TransactionProviderName, BL_Transaction_MST.sFacilityCode, BL_Transaction_MST.sFacilityDescription, BL_Transaction_MST.nTransactionType,  " +
                    //        " BL_Transaction_MST.nClinicID, ISNULL(BL_Transaction_MST.nTransactionStatusID, 0) AS nTransactionStatusID, ISNULL(BL_Transaction_MST.sState,  " +
                    //        " '') AS sState, ISNULL(BL_Transaction_MST.nHopitalizationDateFrom, 0) AS nHopitalizationDateFrom,  " +
                    //        " ISNULL(BL_Transaction_MST.nHopitalizationDateTo, 0) AS nHopitalizationDateTo, ISNULL(BL_Transaction_MST.bOutSideLab, 0) AS bOutSideLab,  " +
                    //        " ISNULL(BL_Transaction_MST.dOutSideLabCharges, 0) AS dOutSideLabCharges, ISNULL(BL_Transaction_MST.bAutoClaim, 0) AS bAutoClaim,  " +
                    //        " ISNULL(BL_Transaction_MST.nAccidentDate, 0) AS nAccidentDate, ISNULL(BL_Transaction_MST.bWorkersComp, 0) AS bWorkersComp,  " +
                    //        " BL_Transaction_MST.nTransactionStatusID AS nTransactionStatusID " +
                    //        " FROM         BL_Transaction_MST LEFT OUTER JOIN " +
                    //        " Provider_MST ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID LEFT OUTER JOIN " +
                    //        " Patient ON BL_Transaction_MST.nPatientID = Patient.nPatientID " +
                    //        " WHERE     (BL_Transaction_MST.nTransactionDate = " + _ClaimDate + ") ";


                    _sqlQuery = " SELECT DISTINCT " +
                    " BL_Transaction_MST.nTransactionID, BL_Transaction_MST.nMasterAppointmentID, BL_Transaction_MST.nAppointmentID,  " +
                    " BL_Transaction_MST.nVisitID, BL_Transaction_MST.nOnsiteDate, BL_Transaction_MST.nInjuryDate, BL_Transaction_MST.nUnableToWorkFromDate,  " +
                    " BL_Transaction_MST.nUnableToWorkTillDate, BL_Transaction_MST.nTransactionDate, BL_Transaction_MST.sCaseNoPrefix,  " +
                    " BL_Transaction_MST.nClaimNo, BL_Transaction_MST.nPatientID AS PatientID, ISNULL(Patient.sFirstName, '') + SPACE(1)  " +
                    " + ISNULL(Patient.sMiddleName, '') + SPACE(1) + ISNULL(Patient.sLastName, '') AS PatientName, BL_Transaction_MST.nTransactionProviderID,  " +
                    " ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1) + ISNULL(Provider_MST.sLastName, '')  " +
                    " AS TransactionProviderName, BL_Transaction_MST.sFacilityCode, BL_Transaction_MST.sFacilityDescription, BL_Transaction_MST.nTransactionType,  " +
                    " BL_Transaction_MST.nClinicID, ISNULL(BL_Transaction_MST.nTransactionStatusID, 0) AS nTransactionStatusID, ISNULL(BL_Transaction_MST.sState,'') AS sState,  " +
                    " ISNULL(BL_Transaction_MST.nHopitalizationDateFrom, 0) AS nHopitalizationDateFrom,  " +
                    " ISNULL(BL_Transaction_MST.nHopitalizationDateTo, 0) AS nHopitalizationDateTo, ISNULL(BL_Transaction_MST.bOutSideLab, 0) AS bOutSideLab,  " +
                    " ISNULL(BL_Transaction_MST.dOutSideLabCharges, 0) AS dOutSideLabCharges, ISNULL(BL_Transaction_MST.bAutoClaim, 0) AS bAutoClaim,  " +
                    " ISNULL(BL_Transaction_MST.nAccidentDate, 0) AS nAccidentDate, ISNULL(BL_Transaction_MST.bWorkersComp, 0) AS bWorkersComp,  " +
                    " ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS TransactionStatus, ISNULL(PatientInsurance_DTL.nInsuranceID, 0) AS nInsuranceID,  " +
                    " ISNULL(PatientInsurance_DTL.nTypeOBilling,0) AS TypeOfBilling, " +
                    " ISNULL(BL_Transaction_MST.nSendCounter,0) AS nSendCounter, " +
                    " ISNULL(BL_Transaction_MST.nSendToRejection,0) AS nSendToRejection , " +
                    " ISNULL(BL_Transaction_MST.nLastStatusId,0) AS nLastStatusId, " +
                    " ISNULL(BL_Transaction_MST.nUserID,0) AS nUserID, " +
                    " ISNULL(BL_Transaction_MST.sUserName,'') AS sUserName, " +
                    " ISNULL(BL_Transaction_MST.bOtherAccident, 0) AS bOtherAccident," +
                    " ISNULL(BL_Transaction_MST.nOtherAccidentDate, 0) AS nOtherAccidentDate " +
                    " FROM Patient WITH (NOLOCK) LEFT OUTER JOIN  " +
                    " PatientInsurance_DTL WITH (NOLOCK) ON Patient.nPatientID = PatientInsurance_DTL.nPatientID RIGHT OUTER JOIN " +
                    " BL_Transaction_MST WITH (NOLOCK) LEFT OUTER JOIN " +
                    " Provider_MST WITH (NOLOCK) ON BL_Transaction_MST.nTransactionProviderID = Provider_MST.nProviderID ON  " +
                    " Patient.nPatientID = BL_Transaction_MST.nPatientID " +
                    " WHERE     (BL_Transaction_MST.nTransactionDate = " + _ClaimDate + ") AND (PatientInsurance_DTL.nInsuranceFlag = 1)";

                    oDB.Retrive_Query(_sqlQuery, out dtTrans);
                }


            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return dtTrans;
        }

        private Int64 GetPrefixTransactionID(Int64 PatientID)
        {
            Int64 _Result = 0;
            string _result = "";
            DateTime _PatientDOB = DateTime.Now;
            DateTime _CurrentDate = DateTime.Now;
            DateTime _BaseDate = Convert.ToDateTime("1/1/1900");

            string strID1 = "";
            string strID2 = "";
            string strID3 = "";

            TimeSpan oTS;

            object _internalresult = null;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            try
            {
                oDB.Connect(false);
                _strSQL = "SELECT dtDOB FROM Patient WITH (NOLOCK) WHERE nPatientID = " + PatientID + "";
                _internalresult = oDB.ExecuteScalar_Query(_strSQL);
                if (_internalresult != null)
                {
                    if (_internalresult.ToString() != null)
                    {
                        if (_internalresult.GetType() != typeof(System.DBNull))
                        {
                            if (_internalresult.ToString() != "")
                            {
                                _PatientDOB = Convert.ToDateTime(_internalresult);
                            }
                        }
                    }
                }
                oDB.Disconnect();

                _result = "";

                oTS = new TimeSpan();
                oTS = _CurrentDate.Subtract(_BaseDate);
                strID1 = oTS.Days.ToString().Replace("-", "");

                oTS = new TimeSpan();
                oTS = _CurrentDate.Subtract(_CurrentDate.Date);
                strID2 = Convert.ToInt32(oTS.TotalSeconds).ToString().Replace("-", "");

                oTS = new TimeSpan();
                oTS = _PatientDOB.Subtract(_BaseDate);
                strID3 = oTS.Days.ToString().Replace("-", "");

                _result = strID1 + strID2 + strID3;

                _Result = Convert.ToInt64(_result);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                return 0;
            }
            finally
            {
                _internalresult = null;
                oDB.Disconnect();
                oDB.Dispose();
            }
            return _Result;
        }

        private void AddNote(Common.GeneralNotes oNotes)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            Common.GeneralNote oNote = null;

            try
            {
                oDB.Connect(false);

                if (oNote != null)
                {
                    for (int i = 0; i < oNotes.Count; i++)
                    {
                        oNote = oNotes[i];

                        oDBParameters.Clear();
                        oDBParameters.Add("@nTransactionID", oNote.TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nLineNo", oNote.TransactionLineId, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nTransactionDetailID", oNote.TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nNoteType", oNote.NoteType, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@nNoteId", oNote.NoteID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                        oDBParameters.Add("@nNoteDateTime", oNote.NoteDate, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nUserID", oNote.UserID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@sNoteDescription", oNote.NoteDescription, ParameterDirection.Input, SqlDbType.VarChar);
                        oDBParameters.Add("@nClinicID", oNote.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@MachineID", oDB.GetPrefixTransactionID(0), ParameterDirection.Input, SqlDbType.BigInt);
                        oDBParameters.Add("@nStatementNoteDate", oNote.StatementNoteDate, ParameterDirection.Input, SqlDbType.Int);
                        oDBParameters.Add("@dtCreatedDateTime", oNote.dtCreatedDatetime, ParameterDirection.Input, SqlDbType.DateTime);
                        oDB.Execute("BL_INUP_Transaction_Lines_Notes", oDBParameters);

                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB.Connect(false))
                { oDB.Disconnect(); }
                if (oDB != null)
                { oDB.Dispose(); }
            }
        }

        public DataTable GetPatientInsurances(Int64 PatientID)
        {
            System.Data.DataTable _result = new System.Data.DataTable();

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            oDB.Connect(false);
            try
            {
                string _sqlQuery = "SELECT Contacts_MST.nContactID, Isnull(Contacts_MST.sName,'') as InsuranceName, Isnull(Contacts_MST.sContact,'') as Contact, Isnull(Contacts_MST.sStreet,'') as Street, Contacts_MST.nSpecialtyID as nSpecialtyID, Contacts_MST.nInsuranceID as nInsuranceID, Isnull(Contacts_MST.sHospitalAffiliation,'') as HospitalAffiliation, Isnull(Contacts_MST.sContactType,'') as ContactType, Isnull(Contacts_MST.sExternalCode,'') as ExternalCode, Isnull(Contacts_MST.sDegree,'') as Degree, Contacts_MST.nClinicID, Contacts_MST.bIsBlocked, Isnull(Contacts_MST.sCity,'') as City, Isnull(Contacts_MST.sState,'') as State, Isnull(Contacts_MST.sZIP,'') as Zip, Isnull(Contacts_MST.sPhone,'') as Phone, Isnull(Contacts_MST.sFax,'') as Fax, Isnull(Contacts_MST.sMobile,'') as Mobile, Isnull(Contacts_MST.sPager,'') as Pager, Isnull(Contacts_MST.sEmail,'')as Email, Isnull(Contacts_MST.sURL,'')as URL, Isnull(Contacts_MST.sNotes,'') as Notes FROM PatientInsurance_DTL WITH (NOLOCK) INNER JOIN Contacts_MST WITH (NOLOCK) ON PatientInsurance_DTL.nInsuranceID = Contacts_MST.nContactID where bIsBlocked= 0 and sContactType='Insurance' And PatientInsurance_DTL.nPatientID='" + PatientID + "'";
                oDB.Retrive_Query(_sqlQuery, out _result);
            }
            catch //(gloDatabaseLayer.DBException DBErr)
            {
            }
            //catch (Exception ex)
            //{
            //}
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return _result;
        }

        public DataTable GetEMRTreatment(Int64 PatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            string strSQL = "";
            DataTable dt = new DataTable();
            try
            {
                dt = new DataTable();
                strSQL = "SELECT ExamICD9CPT.nPatientID, ExamICD9CPT.nExamID, ExamICD9CPT.nVisitID, ExamICD9CPT.sICD9Code, ExamICD9CPT.sICD9Description, " +
                         "ExamICD9CPT.sCPTcode, ExamICD9CPT.sCPTDescription, ExamICD9CPT.sModCode, ExamICD9CPT.sModDescription, ExamICD9CPT.nUnit, " +
                         "PatientExams.bIsFinished " +
                         "FROM  ExamICD9CPT WITH (NOLOCK) INNER JOIN " +
                         "PatientExams WITH (NOLOCK) ON ExamICD9CPT.nExamID = PatientExams.nExamID AND ExamICD9CPT.nVisitID = PatientExams.nVisitID " +
                         "WHERE (ExamICD9CPT.nPatientID = " + PatientID + ") AND (PatientExams.bIsFinished = 1)";

                oDB.Connect(false);
                oDB.Retrive_Query(strSQL, out dt);
                oDB.Disconnect();

            }
            catch (Exception)
            {

            }
            finally
            {
                oDB.Dispose();
            }
            return dt;
        }

        public DataTable GetEMRTreatment(Int64 PatientID, Int64 ExamID, Int64 VisitID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            string strSQL = "";
            DataTable dt = new DataTable();
            try
            {
                dt = new DataTable();
                strSQL = "SELECT ExamICD9CPT.nPatientID, ExamICD9CPT.nExamID, ExamICD9CPT.nVisitID, ExamICD9CPT.sICD9Code, ExamICD9CPT.sICD9Description, " +
                         "ExamICD9CPT.sCPTcode, ExamICD9CPT.sCPTDescription, ExamICD9CPT.sModCode, ExamICD9CPT.sModDescription, ExamICD9CPT.nUnit " +
                         "FROM  ExamICD9CPT WITH (NOLOCK) " +
                         "WHERE (ExamICD9CPT.nPatientID = " + PatientID + ") AND (ExamICD9CPT.nExamID = " + ExamID + ") AND (ExamICD9CPT.nVisitID = " + VisitID + ")";

                oDB.Connect(false);
                oDB.Retrive_Query(strSQL, out dt);
                oDB.Disconnect();

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dt;
        }

        public DataTable GetPostedCPTs(Int64 ExamId, ExternalChargesType ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            DataTable dtExam = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nExamID", ExamId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nActionType", ClaimActionType.Paid.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);// 0 [No POST]
                oParameters.Add("@nTreatmentType", ExternalChargesType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDB.Connect(false);
                oDB.Retrive("RetreiveUnPostedCPTS", oParameters, out dtExam);
                oDB.Disconnect();
                
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtExam;
        }


        public DataTable Get_NOPOST_CPTs(Int64 ExamId, ExternalChargesType ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            DataTable dtExam = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nExamID", ExamId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nActionType", ClaimActionType.NoPost.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);// 0 [No POST]
                oParameters.Add("@nTreatmentType", ExternalChargesType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDB.Connect(false);
                oDB.Retrive("RetreiveUnPostedCPTS", oParameters, out dtExam);
                oDB.Disconnect();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtExam;
        }


        public DataTable GetOCPDX(Int64 nPortalClaimId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtOCPDX = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nPortalClaimID", nPortalClaimId, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                oDB.Retrive("gsp_GetOCPDXCode", oParameters, out dtOCPDX);
                oDB.Disconnect();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dtOCPDX;
        }
        public TransactionLines GetEMRTreatment(Int64 ExamId, Int64 VisitId,Int32 nLineCount, gloSettings.ExternalChargesType nEMRTreatmentType, ref bool ISCPTEXIST,out int nICDRevision )
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            TransactionLines oLines = new TransactionLines();
            TransactionLine oLine = null;
            DataSet dsExam = null;
            nICDRevision = 0;
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nExamID", ExamId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nVisitID", VisitId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTreatmentType", nEMRTreatmentType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDB.Connect(false);
                oDB.Retrive("BL_GetEMRTreatment", oParameters, out dsExam);
                oDB.Disconnect();
 
                if (dsExam != null && dsExam.Tables[0].Rows.Count > 0)
                {
                    nICDRevision = Convert.ToInt32(dsExam.Tables[0].Rows[0]["nICDRevision"]);

                    if (EMRExam.IsExamICDDriven() && nEMRTreatmentType==ExternalChargesType.gloEMRTreatment)
                    {
                        List<string> cptsAdded = new List<string>();

                        #region "Pass 1 Primary Dx and CPT"

                        //Primary Diagnosis

                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            if (Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != "")
                            {
                                oLine = new TransactionLine();
                                oLine.TransactionLineId = 0;

                                oLine.EMRTreatmentLineNo = Convert.ToInt32(dsExam.Tables[0].Rows[i]["nLineNo"]);
                                oLine.Dx1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                oLine.Dx1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                oLine.Dx1Ptr = true;
                                oLine.LinePrimaryDxCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                oLine.LinePrimaryDxDesc = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);

                                oLine.CPTCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]);
                                oLine.CPTDescription = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTDescription"]);
                                oLine.RenderingProviderID = Convert.ToInt64(dsExam.Tables[0].Rows[i]["nRenderingProviderID"]);
                                oLine.RenderingProviderName = Convert.ToString(dsExam.Tables[0].Rows[i]["RenderingProviderName"]);                                
                                //oLine.Unit = Convert.ToInt16(dtExam.Rows[i]["nUnit"]); AND 

                                DataRow[] dr = dsExam.Tables[0].Select("sCPTcode = '" + Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]).Replace("'","''") + "'");
                                DataTable dt = dsExam.Tables[0].Clone();
                                foreach (DataRow odr in dr)
                                {
                                    dt.ImportRow(odr);
                                }
                                if (dt.Compute("MAX(nUnit)", string.Empty) == DBNull.Value)
                                {
                                    oLine.Unit = 1;
                                }
                                else
                                {
                                    oLine.Unit = Convert.ToDecimal(dt.Compute("MAX(nUnit)", String.Empty));
                                }

                                if (oLine.Unit.Equals(0))
                                { oLine.Unit = 1; }

                                cptsAdded.Add(oLine.CPTCode);
                                oLines.Add(oLine);
                                oLine = null;
                                break;
                            }
                        }

                        //Primary Diagnosis
                        #endregion "Pass 1 Primary Dx and CPT"

                        #region "Pass 2 All CPT's in the Exam"
                        //All CPTs 
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            //if (oLines.Count < 6) //Less Than 6 CPTs
                            if (oLines.Count < nLineCount)
                            {
                                //Do not add one CPT multiple times
                                if (cptsAdded.Contains(Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"])) == false)
                                {
                                    oLine = new TransactionLine();
                                    oLine.TransactionLineId = oLines.Count - 1;

                                    oLine.EMRTreatmentLineNo = Convert.ToInt32(dsExam.Tables[0].Rows[i]["nLineNo"]);

                                    oLine.CPTCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]);
                                    oLine.CPTDescription = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTDescription"]);
                                    //oLine.Unit = Convert.ToInt16(dtExam.Rows[i]["nUnit"]);
                                    oLine.RenderingProviderID = Convert.ToInt64(dsExam.Tables[0].Rows[i]["nRenderingProviderID"]);
                                    oLine.RenderingProviderName = Convert.ToString(dsExam.Tables[0].Rows[i]["RenderingProviderName"]);

                                    DataRow[] dr = dsExam.Tables[0].Select("sCPTcode = '" + Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]).Replace("'", "''") + "'");
                                    DataTable dt = dsExam.Tables[0].Clone();
                                    foreach (DataRow odr in dr)
                                    {
                                        dt.ImportRow(odr);
                                    }
                                    if (oLine.CPTCode != string.Empty)
                                    {
                                        if (dt.Compute("MAX(nUnit)", string.Empty) == DBNull.Value)
                                        {
                                            oLine.Unit = 1;
                                        }
                                        else
                                        {
                                            oLine.Unit = Convert.ToDecimal(dt.Compute("MAX(nUnit)", String.Empty));
                                        }
                                    }
                                    else
                                    {
                                        oLine.Unit = 0;
                                    }

                                    if (oLine.Unit.Equals(0))
                                    { oLine.Unit = 1; }

                                    cptsAdded.Add(oLine.CPTCode);
                                    oLines.Add(oLine);
                                    oLine = null;
                                }
                            }
                        }//All CPTs

                        #endregion"Pass 2 All CPT's in the Exam"

                        #region "Pass 3 All Dx's in the Exam"
                        //All Dx
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            for (int k = 0; k < oLines.Count; k++)
                            {
                                //If Line CPT is mapped with Exam CPT then Add Exam Dx to line 
                                if (Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]) == oLines[k].CPTCode)
                                {
                                    //Add one Dx only once to one line
                                    if (Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx1Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx2Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx3Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx4Code)
                                    {
                                        if (oLines[k].Dx1Ptr == false)
                                        {
                                            oLines[k].Dx1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx1Ptr = true;
                                            oLines[k].LinePrimaryDxCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].LinePrimaryDxDesc = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                        }
                                        else if (oLines[k].Dx2Ptr == false)
                                        {
                                            oLines[k].Dx2Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx2Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx2Ptr = true;
                                        }
                                        else if (oLines[k].Dx3Ptr == false)
                                        {
                                            oLines[k].Dx3Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx3Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx3Ptr = true;
                                        }
                                        else if (oLines[k].Dx4Ptr == false)
                                        {
                                            oLines[k].Dx4Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx4Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx4Ptr = true;
                                        }

                                        break;
                                    }
                                }
                            }//oLines For(k
                        }//dtExam For(i

                        //All Dx
                        #endregion "Pass 3 All Dx's in the Exam"

                        #region "Pass 4 All Mod in the Exam"
                        //All Dx
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            for (int k = 0; k < oLines.Count; k++)
                            {
                                //If Line CPT is mapped with Exam CPT then Add Exam mod to line 
                                if (Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]) == oLines[k].CPTCode)
                                {
                                    //Add one Mod only once to one line
                                    if (Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]) != oLines[k].Mod1Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]) != oLines[k].Mod2Code)
                                    {
                                        if (oLines[k].Mod1Code == "")
                                        {
                                            oLines[k].Mod1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod2Code == "")
                                        {
                                            oLines[k].Mod2Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod2Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod3Code == "")
                                        {
                                            oLines[k].Mod3Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod3Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod4Code == "")
                                        {
                                            oLines[k].Mod4Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod4Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                    }
                                    break;
                                }
                            }//oLines For(k
                        }//dtExam For(i

                        //All Dx
                        #endregion "Pass 4 All Mod in the Exam"

                        #region "Pass 4 DOS"

                        DateTime _DOS = DateTime.Today;
                        DataTable dtDOS = null;
                        //_sqlQuery = "select dtDOS from PatientExams where (nExamID = " + ExamId + ") AND (nVisitID = " + VisitId + ")";
                        //oDB.Retrive_Query(_sqlQuery, out dtDOS);
                        dtDOS = dsExam.Tables[1];
                        if (dtDOS != null && dtDOS.Rows.Count > 0 && dtDOS.Rows[0] != null)
                        {
                            if (dtDOS.Rows[0]["dtDOS"] != DBNull.Value)
                            {
                                _DOS = Convert.ToDateTime(dtDOS.Rows[0]["dtDOS"]);
                            }
                            else
                            {
                                _DOS = System.DateTime.Now;
                            }
                        }
                        else
                        {
                            _DOS = System.DateTime.Now;
                        }
                        dtDOS = null;

                        //DOS 
                        for (int k = 0; k < oLines.Count; k++)
                        {
                            oLines[k].DateServiceFrom = _DOS;
                        }



                        #endregion "Pass 4 All Mod in the Exam"
                    }
                    else
                    {
                        int iRowCount = Convert.ToInt16(dsExam.Tables[0].Compute("MAX(nLineNo)", String.Empty));

                        for (int iLoopCount = 1; iLoopCount <= iRowCount; iLoopCount++)
                        {
                            //if (oLines.Count < 6) //Less Than 6 CPTs
                            //if (oLines.Count < 30) 
                            if (oLines.Count < nLineCount)
                            {
                                oLine = new TransactionLine();
                                oLine.TransactionLineId = 0;

                                DataRow[] dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount);
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["nLineNo"]) != "" && oDr["nLineNo"] != null)
                                    {
                                        oLine.CPTCode = Convert.ToString(oDr["sCPTcode"]);
                                        oLine.CPTDescription = Convert.ToString(oDr["sCPTDescription"]);
                                        oLine.Unit = Convert.ToDecimal(oDr["nUnit"]);
                                        oLine.RenderingProviderID = Convert.ToInt64(oDr["nRenderingProviderID"]);
                                        oLine.RenderingProviderName = Convert.ToString(oDr["RenderingProviderName"]);
                                        oLine.TransactionLineId = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.EMRTreatmentLineNo = Convert.ToInt32(oDr["nLineNo"]);

                                        if (oLine.Unit.Equals(0))
                                        {
                                            oLine.Unit = 1; 
                                        }
                                        dr = null;
                                        break;
                                    }
                                }

                                dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount + " AND sICD9Code <> ''");
                                int iDxCount = 0;
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["sICD9Code"]) != "" && oDr["sICD9Code"] != null)
                                    {
                                        iDxCount += 1;

                                        switch (iDxCount)
                                        {
                                            case 1:
                                                oLine.Dx1Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx1Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx1Ptr = true;
                                                oLine.LinePrimaryDxCode = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.LinePrimaryDxDesc = Convert.ToString(oDr["sICD9Description"]);
                                                break;
                                            case 2:
                                                oLine.Dx2Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx2Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx2Ptr = true;
                                                break;
                                            case 3:
                                                oLine.Dx3Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx3Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx3Ptr = true;
                                                break;
                                            case 4:
                                                oLine.Dx4Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx4Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx4Ptr = true;
                                                break;

                                        }


                                    }
                                }

                                dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount + " AND sModCode <> ''");
                                int iModCount = 0;
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["sModCode"]) != "" && oDr["sModCode"] != null)
                                    {
                                        iModCount += 1;

                                        switch (iModCount)
                                        {
                                            case 1:
                                                oLine.Mod1Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod1Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 2:
                                                oLine.Mod2Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod2Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 3:
                                                oLine.Mod3Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod3Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 4:
                                                oLine.Mod4Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod4Description = Convert.ToString(oDr["sModDescription"]);
                                                break;


                                        }


                                    }
                                }

                                oLines.Add(oLine);
                                oLine = null;
                            }
                        }

                        #region "Filling DOS"

                        DateTime _DOS = DateTime.Today;
                        DataTable dtDOS = null;
                        //_sqlQuery = "select dtDOS from PatientExams WITH (NOLOCK) where (nExamID = " + ExamId + ") AND (nVisitID = " + VisitId + ")";
                        //oDB.Retrive_Query(_sqlQuery, out dtDOS);
                        dtDOS = dsExam.Tables[1];
                        if (dtDOS != null && dtDOS.Rows.Count > 0 && dtDOS.Rows[0] != null)
                        {
                            if (dtDOS.Rows[0]["dtDOS"] != DBNull.Value)
                            {
                                _DOS = Convert.ToDateTime(dtDOS.Rows[0]["dtDOS"]);
                            }
                            else
                            {
                                _DOS = System.DateTime.Now;
                            }
                        }
                        else
                        {
                            _DOS = System.DateTime.Now;
                        }
                        dtDOS = null;

                        //DOS 
                        for (int k = 0; k < oLines.Count; k++)
                        {
                            oLines[k].DateServiceFrom = _DOS;
                            if (Convert.ToString(oLines[k]).Trim() != "")
                            {
                                ISCPTEXIST = true;
                            }
                        }



                        #endregion "Filling DOS"

                    }
                }
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oLine != null) { oLine.Dispose(); }
                if (dsExam != null)
                {
                    dsExam.Tables.Clear();
                    dsExam.Dispose();
                    dsExam = null;
                }
            }
            return oLines;
        }


        public TransactionLines GetEMRTreatment(Int64 ExamId, Int64 VisitId, Int32 nLineCount, gloSettings.ExternalChargesType nEMRTreatmentType, String strUsedCodes, string sUsedLineNos, Boolean bLoadedFrom, ref bool ISCPTEXIST, out int nICDRevision)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            TransactionLines oLines = new TransactionLines();
            TransactionLine oLine = null;
            DataSet dsExam = null;
            nICDRevision = 0;    
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nExamID", ExamId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nVisitID", VisitId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTreatmentType", nEMRTreatmentType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@sBilledCPTS", strUsedCodes, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sUsedLineNos", sUsedLineNos, ParameterDirection.Input, SqlDbType.VarChar);


                oParameters.Add("@bIsNormal", bLoadedFrom, ParameterDirection.Input, SqlDbType.Bit);
                oDB.Connect(false);
                oDB.Retrive("BL_GetEMRTreatment", oParameters, out dsExam);
                oDB.Disconnect();

                if (dsExam != null && dsExam.Tables[0].Rows.Count > 0)
                {
                    nICDRevision = Convert.ToInt32(dsExam.Tables[0].Rows[0]["nICDRevision"]);

                    if (EMRExam.IsExamICDDriven() && nEMRTreatmentType == ExternalChargesType.gloEMRTreatment)
                    {
                        List<string> cptsAdded = new List<string>();

                        #region "Pass 1 Primary Dx and CPT"

                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            if (Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != "")
                            {
                                oLine = new TransactionLine();
                                oLine.TransactionLineId = 0;

                                oLine.EMRTreatmentLineNo = Convert.ToInt32(dsExam.Tables[0].Rows[i]["nLineNo"]);

                                oLine.Dx1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                oLine.Dx1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                oLine.Dx1Ptr = true;
                                oLine.LinePrimaryDxCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                oLine.LinePrimaryDxDesc = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);

                                oLine.CPTCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]);
                                oLine.CPTDescription = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTDescription"]);
                                oLine.RenderingProviderID = Convert.ToInt64(dsExam.Tables[0].Rows[i]["nRenderingProviderID"]);
                                oLine.RenderingProviderName = Convert.ToString(dsExam.Tables[0].Rows[i]["RenderingProviderName"]);
                                //oLine.Unit = Convert.ToInt16(dtExam.Rows[i]["nUnit"]); AND 

                                DataRow[] dr = dsExam.Tables[0].Select("sCPTcode = '" + Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]).Replace("'", "''") + "'");
                                DataTable dt = dsExam.Tables[0].Clone();
                                foreach (DataRow odr in dr)
                                {
                                    dt.ImportRow(odr);
                                }
                                if (dt.Compute("MAX(nUnit)", string.Empty) == DBNull.Value)
                                {
                                    oLine.Unit = 1;
                                }
                                else
                                {
                                    oLine.Unit = Convert.ToDecimal(dt.Compute("MAX(nUnit)", String.Empty));
                                }

                                if (oLine.Unit.Equals(0))
                                { oLine.Unit = 1; }

                                cptsAdded.Add(oLine.CPTCode);
                                oLines.Add(oLine);
                                oLine = null;
                                break;
                            }
                        }

                        //Primary Diagnosis
                        #endregion "Pass 1 Primary Dx and CPT"

                        #region "Pass 2 All CPT's in the Exam"
                        //All CPTs 
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            //if (oLines.Count < 6) //Less Than 6 CPTs
                            if (oLines.Count < nLineCount)
                            {
                                //Do not add one CPT multiple times
                                if (cptsAdded.Contains(Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"])) == false)
                                {
                                    oLine = new TransactionLine();
                                    oLine.TransactionLineId = oLines.Count - 1;

                                    oLine.EMRTreatmentLineNo = Convert.ToInt32(dsExam.Tables[0].Rows[i]["nLineNo"]);
                                    oLine.CPTCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]);
                                    oLine.CPTDescription = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTDescription"]);
                                    //oLine.Unit = Convert.ToInt16(dtExam.Rows[i]["nUnit"]);
                                    oLine.RenderingProviderID = Convert.ToInt64(dsExam.Tables[0].Rows[i]["nRenderingProviderID"]);
                                    oLine.RenderingProviderName = Convert.ToString(dsExam.Tables[0].Rows[i]["RenderingProviderName"]);

                                    DataRow[] dr = dsExam.Tables[0].Select("sCPTcode = '" + Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]).Replace("'", "''") + "'");
                                    DataTable dt = dsExam.Tables[0].Clone();
                                    foreach (DataRow odr in dr)
                                    {
                                        dt.ImportRow(odr);
                                    }
                                    if (oLine.CPTCode != string.Empty)
                                    {
                                        if (dt.Compute("MAX(nUnit)", string.Empty) == DBNull.Value)
                                        {
                                            oLine.Unit = 1;
                                        }
                                        else
                                        {
                                            oLine.Unit = Convert.ToDecimal(dt.Compute("MAX(nUnit)", String.Empty));
                                        }
                                    }
                                    else
                                    {
                                        oLine.Unit = 0;
                                    }

                                    if (oLine.Unit.Equals(0))
                                    { oLine.Unit = 1; }

                                    cptsAdded.Add(oLine.CPTCode);
                                    oLines.Add(oLine);
                                    oLine = null;
                                }
                            }
                        }//All CPTs

                        #endregion"Pass 2 All CPT's in the Exam"

                        #region "Pass 3 All Dx's in the Exam"
                        //All Dx
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            for (int k = 0; k < oLines.Count; k++)
                            {
                                //If Line CPT is mapped with Exam CPT then Add Exam Dx to line 
                                if (Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]) == oLines[k].CPTCode)
                                {
                                    //Add one Dx only once to one line
                                    if (Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx1Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx2Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx3Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx4Code)
                                    {
                                        if (oLines[k].Dx1Ptr == false)
                                        {
                                            oLines[k].Dx1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx1Ptr = true;
                                            oLines[k].LinePrimaryDxCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].LinePrimaryDxDesc = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                        }
                                        else if (oLines[k].Dx2Ptr == false)
                                        {
                                            oLines[k].Dx2Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx2Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx2Ptr = true;
                                        }
                                        else if (oLines[k].Dx3Ptr == false)
                                        {
                                            oLines[k].Dx3Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx3Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx3Ptr = true;
                                        }
                                        else if (oLines[k].Dx4Ptr == false)
                                        {
                                            oLines[k].Dx4Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx4Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx4Ptr = true;
                                        }

                                        break;
                                    }
                                }
                            }//oLines For(k
                        }//dtExam For(i

                        //All Dx
                        #endregion "Pass 3 All Dx's in the Exam"

                        #region "Pass 4 All Mod in the Exam"
                        //All Dx
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            for (int k = 0; k < oLines.Count; k++)
                            {
                                //If Line CPT is mapped with Exam CPT then Add Exam mod to line 
                                if (Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]) == oLines[k].CPTCode)
                                {
                                    //Add one Mod only once to one line
                                    if (Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]) != oLines[k].Mod1Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]) != oLines[k].Mod2Code)
                                    {
                                        if (oLines[k].Mod1Code == "")
                                        {
                                            oLines[k].Mod1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod2Code == "")
                                        {
                                            oLines[k].Mod2Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod2Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod3Code == "")
                                        {
                                            oLines[k].Mod3Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod3Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod4Code == "")
                                        {
                                            oLines[k].Mod4Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod4Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                    }
                                    break;
                                }
                            }//oLines For(k
                        }//dtExam For(i

                        //All Dx
                        #endregion "Pass 4 All Mod in the Exam"

                        #region "Pass 4 DOS"

                        DateTime _DOS = DateTime.Today;
                        DataTable dtDOS = null;
                        //_sqlQuery = "select dtDOS from PatientExams where (nExamID = " + ExamId + ") AND (nVisitID = " + VisitId + ")";
                        //oDB.Retrive_Query(_sqlQuery, out dtDOS);
                        dtDOS = dsExam.Tables[1];
                        if (dtDOS != null && dtDOS.Rows.Count > 0 && dtDOS.Rows[0] != null)
                        {
                            if (dtDOS.Rows[0]["dtDOS"] != DBNull.Value)
                            {
                                _DOS = Convert.ToDateTime(dtDOS.Rows[0]["dtDOS"]);
                            }
                            else
                            {
                                _DOS = System.DateTime.Now;
                            }
                        }
                        else
                        {
                            _DOS = System.DateTime.Now;
                        }
                        dtDOS = null;

                        //DOS 
                        for (int k = 0; k < oLines.Count; k++)
                        {
                            oLines[k].DateServiceFrom = _DOS;
                        }



                        #endregion "Pass 4 All Mod in the Exam"
                    }
                    else
                    {
                        int iRowCount = Convert.ToInt16(dsExam.Tables[0].Compute("MAX(nLineNo)", String.Empty));
                      
                        for (int iLoopCount = 1; iLoopCount <= iRowCount; iLoopCount++)
                        {
                            //if (oLines.Count < 6) //Less Than 6 CPTs
                            //if (oLines.Count < 30) 
                            if (oLines.Count < nLineCount)
                            {
                                //oLine = new TransactionLine();
                                //oLine.TransactionLineId = 0;

                                DataRow[] dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount);
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["nLineNo"]) != "" && oDr["nLineNo"] != null)
                                    {
                                        oLine = new TransactionLine();
                                        oLine.TransactionLineId = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.EMRTreatmentLineNo = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.CPTCode = Convert.ToString(oDr["sCPTcode"]);
                                        oLine.CPTDescription = Convert.ToString(oDr["sCPTDescription"]);
                                        oLine.Unit = Convert.ToDecimal(oDr["nUnit"]);
                                        oLine.RenderingProviderID = Convert.ToInt64(oDr["nRenderingProviderID"]);
                                        oLine.RenderingProviderName = Convert.ToString(oDr["RenderingProviderName"]);

                                        if (oLine.Unit.Equals(0))
                                        {
                                            oLine.Unit = 1;
                                        }
                                        dr = null;
                                        break;
                                    }
                                }

                                dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount + " AND sICD9Code <> ''");
                                int iDxCount = 0;
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["sICD9Code"]) != "" && oDr["sICD9Code"] != null)
                                    {
                                        if (oLine == null)
                                        {
                                            oLine = new TransactionLine();
                                        }

                                        iDxCount += 1;

                                        switch (iDxCount)
                                        {
                                            case 1:
                                                oLine.Dx1Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx1Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx1Ptr = true;
                                                oLine.LinePrimaryDxCode = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.LinePrimaryDxDesc = Convert.ToString(oDr["sICD9Description"]);
                                                break;
                                            case 2:
                                                oLine.Dx2Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx2Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx2Ptr = true;
                                                break;
                                            case 3:
                                                oLine.Dx3Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx3Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx3Ptr = true;
                                                break;
                                            case 4:
                                                oLine.Dx4Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx4Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx4Ptr = true;
                                                break;

                                        }


                                    }
                                }

                                dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount + " AND sModCode <> ''");
                                int iModCount = 0;
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["sModCode"]) != "" && oDr["sModCode"] != null)
                                    {
                                        iModCount += 1;

                                        switch (iModCount)
                                        {
                                            case 1:
                                                oLine.Mod1Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod1Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 2:
                                                oLine.Mod2Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod2Description = Convert.ToString(oDr["sModDescription"]);
                                                break;

                                            case 3:
                                                oLine.Mod3Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod3Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 4:
                                                oLine.Mod4Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod4Description = Convert.ToString(oDr["sModDescription"]);
                                                break;

                                        }


                                    }
                                }

                                if (oLine!=null)
                                {
                                    oLines.Add(oLine);
                                    oLine = null;
                                }
                            } // If Lines Count
                        }

                        #region "Filling DOS"

                        DateTime _DOS = DateTime.Today;
                        DataTable dtDOS = null;
                        //_sqlQuery = "select dtDOS from PatientExams WITH (NOLOCK) where (nExamID = " + ExamId + ") AND (nVisitID = " + VisitId + ")";
                        //oDB.Retrive_Query(_sqlQuery, out dtDOS);
                        dtDOS = dsExam.Tables[1];
                        if (dtDOS != null && dtDOS.Rows.Count > 0 && dtDOS.Rows[0] != null)
                        {
                            if (dtDOS.Rows[0]["dtDOS"] != DBNull.Value)
                            {
                                _DOS = Convert.ToDateTime(dtDOS.Rows[0]["dtDOS"]);
                            }
                            else
                            {
                                _DOS = System.DateTime.Now;
                            }
                        }
                        else
                        {
                            _DOS = System.DateTime.Now;
                        }
                        dtDOS = null;

                        //DOS 
                        for (int k = 0; k < oLines.Count; k++)
                        {
                            oLines[k].DateServiceFrom = _DOS;
                            if (Convert.ToString(oLines[k]).Trim() != "")
                            {
                                ISCPTEXIST = true;
                            }
                        }



                        #endregion "Filling DOS"

                    }
                }
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oLine != null) { oLine.Dispose(); }
                if (dsExam != null)
                {
                    dsExam.Tables.Clear();
                    dsExam.Dispose();
                    dsExam = null;
                }
            }
            return oLines;
        }


        public TransactionLines GetEMRTreatment(Int64 ExamId, Int64 VisitId, Int32 nLineCount, gloSettings.ExternalChargesType nEMRTreatmentType, String strUsedCodes, string sUsedLineNos, String sLoadedCodes, string sLoadedLineNos, ref bool ISCPTEXIST, out int nICDRevision)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            TransactionLines oLines = new TransactionLines();
            TransactionLine oLine = null;
            DataSet dsExam = null;
            nICDRevision = 0;
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nExamID", ExamId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nVisitID", VisitId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTreatmentType", nEMRTreatmentType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oParameters.Add("@sBilledCPTS", strUsedCodes, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sUsedLineNos", sUsedLineNos, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sLoadedCPTS", sLoadedCodes, ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sLoadedLineNos", sLoadedLineNos, ParameterDirection.Input, SqlDbType.VarChar);


                oDB.Connect(false);
                oDB.Retrive("BL_GetEMRTreatment", oParameters, out dsExam);
                oDB.Disconnect();

                if (dsExam != null && dsExam.Tables[0].Rows.Count > 0)
                {
                    nICDRevision = Convert.ToInt32(dsExam.Tables[0].Rows[0]["nICDRevision"]);
                    if (EMRExam.IsExamICDDriven() && nEMRTreatmentType == ExternalChargesType.gloEMRTreatment)
                    {
                        List<string> cptsAdded = new List<string>();

                        #region "Pass 1 Primary Dx and CPT"

                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            if (Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != "")
                            {
                                oLine = new TransactionLine();
                                oLine.TransactionLineId = 0;

                                oLine.EMRTreatmentLineNo = Convert.ToInt32(dsExam.Tables[0].Rows[i]["nLineNo"]);

                                oLine.Dx1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                oLine.Dx1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                oLine.Dx1Ptr = true;
                                oLine.LinePrimaryDxCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                oLine.LinePrimaryDxDesc = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);

                                oLine.CPTCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]);
                                oLine.CPTDescription = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTDescription"]);
                                oLine.RenderingProviderID = Convert.ToInt64(dsExam.Tables[0].Rows[i]["nRenderingProviderID"]);
                                oLine.RenderingProviderName = Convert.ToString(dsExam.Tables[0].Rows[i]["RenderingProviderName"]);
                                //oLine.Unit = Convert.ToInt16(dtExam.Rows[i]["nUnit"]); AND 

                                DataRow[] dr = dsExam.Tables[0].Select("sCPTcode = '" + Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]).Replace("'", "''") + "'");
                                DataTable dt = dsExam.Tables[0].Clone();
                                foreach (DataRow odr in dr)
                                {
                                    dt.ImportRow(odr);
                                }
                                if (dt.Compute("MAX(nUnit)", string.Empty) == DBNull.Value)
                                {
                                    oLine.Unit = 1;
                                }
                                else
                                {
                                    oLine.Unit = Convert.ToDecimal(dt.Compute("MAX(nUnit)", String.Empty));
                                }

                                if (oLine.Unit.Equals(0))
                                { oLine.Unit = 1; }

                                cptsAdded.Add(oLine.CPTCode);
                                oLines.Add(oLine);
                                oLine = null;
                                break;
                            }
                        }

                        //Primary Diagnosis
                        #endregion "Pass 1 Primary Dx and CPT"

                        #region "Pass 2 All CPT's in the Exam"
                        //All CPTs 
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            //if (oLines.Count < 6) //Less Than 6 CPTs
                            if (oLines.Count < nLineCount)
                            {
                                //Do not add one CPT multiple times
                                if (cptsAdded.Contains(Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"])) == false)
                                {
                                    oLine = new TransactionLine();
                                    oLine.TransactionLineId = oLines.Count - 1;

                                    oLine.EMRTreatmentLineNo = Convert.ToInt32(dsExam.Tables[0].Rows[i]["nLineNo"]);
                                    oLine.CPTCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]);
                                    oLine.CPTDescription = Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTDescription"]);
                                    //oLine.Unit = Convert.ToInt16(dtExam.Rows[i]["nUnit"]);
                                    oLine.RenderingProviderID = Convert.ToInt64(dsExam.Tables[0].Rows[i]["nRenderingProviderID"]);
                                    oLine.RenderingProviderName = Convert.ToString(dsExam.Tables[0].Rows[i]["RenderingProviderName"]);

                                    DataRow[] dr = dsExam.Tables[0].Select("sCPTcode = '" + Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]).Replace("'", "''") + "'");
                                    DataTable dt = dsExam.Tables[0].Clone();
                                    foreach (DataRow odr in dr)
                                    {
                                        dt.ImportRow(odr);
                                    }
                                    if (oLine.CPTCode != string.Empty)
                                    {
                                        if (dt.Compute("MAX(nUnit)", string.Empty) == DBNull.Value)
                                        {
                                            oLine.Unit = 1;
                                        }
                                        else
                                        {
                                            oLine.Unit = Convert.ToDecimal(dt.Compute("MAX(nUnit)", String.Empty));
                                        }
                                    }
                                    else
                                    {
                                        oLine.Unit = 0;
                                    }

                                    if (oLine.Unit.Equals(0))
                                    { oLine.Unit = 1; }

                                    cptsAdded.Add(oLine.CPTCode);
                                    oLines.Add(oLine);
                                    oLine = null;
                                }
                            }
                        }//All CPTs

                        #endregion"Pass 2 All CPT's in the Exam"

                        #region "Pass 3 All Dx's in the Exam"
                        //All Dx
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            for (int k = 0; k < oLines.Count; k++)
                            {
                                //If Line CPT is mapped with Exam CPT then Add Exam Dx to line 
                                if (Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]) == oLines[k].CPTCode)
                                {
                                    //Add one Dx only once to one line
                                    if (Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx1Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx2Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx3Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]) != oLines[k].Dx4Code)
                                    {
                                        if (oLines[k].Dx1Ptr == false)
                                        {
                                            oLines[k].Dx1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx1Ptr = true;
                                            oLines[k].LinePrimaryDxCode = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].LinePrimaryDxDesc = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                        }
                                        else if (oLines[k].Dx2Ptr == false)
                                        {
                                            oLines[k].Dx2Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx2Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx2Ptr = true;
                                        }
                                        else if (oLines[k].Dx3Ptr == false)
                                        {
                                            oLines[k].Dx3Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx3Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx3Ptr = true;
                                        }
                                        else if (oLines[k].Dx4Ptr == false)
                                        {
                                            oLines[k].Dx4Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Code"]);
                                            oLines[k].Dx4Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sICD9Description"]);
                                            oLines[k].Dx4Ptr = true;
                                        }

                                        break;
                                    }
                                }
                            }//oLines For(k
                        }//dtExam For(i

                        //All Dx
                        #endregion "Pass 3 All Dx's in the Exam"

                        #region "Pass 4 All Mod in the Exam"
                        //All Dx
                        for (int i = 0; i < dsExam.Tables[0].Rows.Count; i++)
                        {
                            for (int k = 0; k < oLines.Count; k++)
                            {
                                //If Line CPT is mapped with Exam CPT then Add Exam mod to line 
                                if (Convert.ToString(dsExam.Tables[0].Rows[i]["sCPTcode"]) == oLines[k].CPTCode)
                                {
                                    //Add one Mod only once to one line
                                    if (Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]) != oLines[k].Mod1Code
                                        && Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]) != oLines[k].Mod2Code)
                                    {
                                        if (oLines[k].Mod1Code == "")
                                        {
                                            oLines[k].Mod1Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod1Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod2Code == "")
                                        {
                                            oLines[k].Mod2Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod2Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod3Code == "")
                                        {
                                            oLines[k].Mod3Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod3Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                        else if (oLines[k].Mod4Code == "")
                                        {
                                            oLines[k].Mod4Code = Convert.ToString(dsExam.Tables[0].Rows[i]["sModCode"]);
                                            oLines[k].Mod4Description = Convert.ToString(dsExam.Tables[0].Rows[i]["sModDescription"]);
                                        }
                                    }
                                    break;
                                }
                            }//oLines For(k
                        }//dtExam For(i

                        //All Dx
                        #endregion "Pass 4 All Mod in the Exam"

                        #region "Pass 4 DOS"

                        DateTime _DOS = DateTime.Today;
                        DataTable dtDOS = null;
                        
                        dtDOS = dsExam.Tables[1];
                        if (dtDOS != null && dtDOS.Rows.Count > 0 && dtDOS.Rows[0] != null)
                        {
                            if (dtDOS.Rows[0]["dtDOS"] != DBNull.Value)
                            {
                                _DOS = Convert.ToDateTime(dtDOS.Rows[0]["dtDOS"]);
                            }
                            else
                            {
                                _DOS = System.DateTime.Now;
                            }
                        }
                        else
                        {
                            _DOS = System.DateTime.Now;
                        }
                        dtDOS = null;

                        //DOS 
                        for (int k = 0; k < oLines.Count; k++)
                        {
                            oLines[k].DateServiceFrom = _DOS;
                        }



                        #endregion "Pass 4 All Mod in the Exam"
                    }
                    else
                    {
                        int iRowCount = Convert.ToInt16(dsExam.Tables[0].Compute("MAX(nLineNo)", String.Empty));

                        for (int iLoopCount = 1; iLoopCount <= iRowCount; iLoopCount++)
                        {
                            
                            if (oLines.Count < nLineCount)
                            {
                               

                                DataRow[] dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount);
                                foreach (DataRow oDr in dr)
                                {
                                    oLine = new TransactionLine();

                                    if (Convert.ToString(oDr["sCPTcode"]) != "" && oDr["sCPTcode"] != null)
                                    {
                                        oLine.TransactionLineId = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.EMRTreatmentLineNo = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.CPTCode = Convert.ToString(oDr["sCPTcode"]);
                                        oLine.CPTDescription = Convert.ToString(oDr["sCPTDescription"]);
                                        oLine.Unit = Convert.ToDecimal(oDr["nUnit"]);
                                        oLine.RenderingProviderID = Convert.ToInt64(oDr["nRenderingProviderID"]);
                                        oLine.RenderingProviderName = Convert.ToString(oDr["RenderingProviderName"]);

                                        if (oLine.Unit.Equals(0))
                                        {
                                            oLine.Unit = 1;
                                        }
                                        dr = null;
                                        break;
                                    }
                                    else
                                    {
                                        oLine.TransactionLineId = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.EMRTreatmentLineNo = Convert.ToInt32(oDr["nLineNo"]);
                                        oLine.Unit = Convert.ToDecimal(oDr["nUnit"]);
                                        oLine.RenderingProviderID = Convert.ToInt64(oDr["nRenderingProviderID"]);
                                        oLine.RenderingProviderName = Convert.ToString(oDr["RenderingProviderName"]);

                                        if (oLine.Unit.Equals(0))
                                        {
                                            oLine.Unit = 1;
                                        }
                                        dr = null;
                                        break;
                                    }
                                }

                                dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount + " AND sICD9Code <> ''");
                                int iDxCount = 0;
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["sICD9Code"]) != "" && oDr["sICD9Code"] != null)
                                    {
                                        if (oLine == null)
                                        {
                                            oLine = new TransactionLine();
                                        }

                                        iDxCount += 1;

                                        switch (iDxCount)
                                        {
                                            case 1:
                                                oLine.Dx1Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx1Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx1Ptr = true;
                                                oLine.LinePrimaryDxCode = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.LinePrimaryDxDesc = Convert.ToString(oDr["sICD9Description"]);
                                                break;
                                            case 2:
                                                oLine.Dx2Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx2Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx2Ptr = true;
                                                break;
                                            case 3:
                                                oLine.Dx3Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx3Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx3Ptr = true;
                                                break;
                                            case 4:
                                                oLine.Dx4Code = Convert.ToString(oDr["sICD9Code"]);
                                                oLine.Dx4Description = Convert.ToString(oDr["sICD9Description"]);
                                                oLine.Dx4Ptr = true;
                                                break;

                                        }


                                    }
                                }

                                dr = dsExam.Tables[0].Select("nLineNo = " + iLoopCount + " AND sModCode <> ''");
                                int iModCount = 0;
                                foreach (DataRow oDr in dr)
                                {
                                    if (Convert.ToString(oDr["sModCode"]) != "" && oDr["sModCode"] != null)
                                    {
                                        iModCount += 1;

                                        switch (iModCount)
                                        {
                                            case 1:
                                                oLine.Mod1Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod1Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 2:
                                                oLine.Mod2Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod2Description = Convert.ToString(oDr["sModDescription"]);
                                                break;

                                            case 3:
                                                oLine.Mod3Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod3Description = Convert.ToString(oDr["sModDescription"]);
                                                break;
                                            case 4:
                                                oLine.Mod4Code = Convert.ToString(oDr["sModCode"]);
                                                oLine.Mod4Description = Convert.ToString(oDr["sModDescription"]);
                                                break;

                                        }


                                    }
                                }

                                if (oLine != null)
                                {
                                    oLines.Add(oLine);
                                    oLine = null;
                                }
                            } // If Lines Count
                        }

                        #region "Filling DOS"

                        DateTime _DOS = DateTime.Today;
                        DataTable dtDOS = null;
                       
                        dtDOS = dsExam.Tables[1];
                        if (dtDOS != null && dtDOS.Rows.Count > 0 && dtDOS.Rows[0] != null)
                        {
                            if (dtDOS.Rows[0]["dtDOS"] != DBNull.Value)
                            {
                                _DOS = Convert.ToDateTime(dtDOS.Rows[0]["dtDOS"]);
                            }
                            else
                            {
                                _DOS = System.DateTime.Now;
                            }
                        }
                        else
                        {
                            _DOS = System.DateTime.Now;
                        }
                        dtDOS = null;

                        //DOS 
                        for (int k = 0; k < oLines.Count; k++)
                        {
                            oLines[k].DateServiceFrom = _DOS;
                            if (Convert.ToString(oLines[k]).Trim() != "")
                            {
                                ISCPTEXIST = true;
                            }
                        }



                        #endregion "Filling DOS"

                    }
                }
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oLine != null) { oLine.Dispose(); }
                if (dsExam != null)
                {
                    dsExam.Tables.Clear();
                    dsExam.Dispose();
                    dsExam = null;
                }

            }
            return oLines;
        }


        public DataTable GetEMRExams_Old()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            DataTable dtExams = null;
            string _sqlQuery = "";

            try
            {
                if (oDB.CheckConnection() == true)
                {
                    oDB.Connect(false);
                    _sqlQuery = " SELECT DISTINCT " +
                                " ISNULL(PatientExams.nExamID,0) AS nExamID,  " +
                                " ISNULL(PatientExams.sExamName,'') AS sExamName, " +
                                " CONVERT(VARCHAR,PatientExams.dtDOS,101) AS dtDOS, " +
                                " ISNULL(PatientExams.nPatientID,0) AS nPatientID, " +
                                " ISNULL(Patient.sPatientCode,'') AS sPatientCode, " +
                                " ISNULL(Patient.sFirstName,'') AS sPatientFName, " +
                                " ISNULL(Patient.sMiddleName,'') AS sPatientMName, " +
                                " ISNULL(Patient.sLastName,'') AS sPatientLName, " +
                                " ISNULL(PatientExams.nProviderID,0) AS nProviderID, " +
                                " ISNULL(Provider_MST.sFirstName,'') AS sProviderFName, " +
                                " ISNULL(Provider_MST.sMiddleName,'') AS sProviderMName,  " +
                                " ISNULL(Provider_MST.sLastName,'') AS sProviderLName, " +
                                " ISNULL(PatientExams.sUserName,'') AS sUserName, " +
                                " ISNULL(PatientExams.nVisitID,0) AS nVisitID " +
                                " FROM Provider_MST WITH (NOLOCK) INNER JOIN " +
                                " PatientExams WITH (NOLOCK) ON Provider_MST.nProviderID = PatientExams.nProviderID INNER JOIN " +
                                " Patient WITH (NOLOCK) ON PatientExams.nPatientID = Patient.nPatientID ";

                    oDB.Retrive_Query(_sqlQuery, out dtExams);
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); }
            }
            return dtExams;
        }

        public DataTable GetEMRExams(Int64 EMRPatientId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBLayer oDBPM = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtExams = null;
         //   DataTable dtExamsIds = null;
            string _sqlQuery = "";
         //   string _strEMRIDs = "";
            try
            {
                if (oDB.CheckConnection() == true)
                {
                    //Get the list of ExamID's used in gloPM to apply filter


                    String _PMDB = string.Empty;

                    if (appSettings["DatabaseName"] != null)
                    {
                        if (appSettings["DatabaseName"] != "")
                        { _PMDB = Convert.ToString(appSettings["DatabaseName"]); }
                        else { _PMDB = ""; }
                    }
                    else
                    { _PMDB = ""; }

                    if (EMRPatientId > 0)
                    {
                        _sqlQuery = " SELECT  ISNULL(PatientExams.nPatientID, 0) AS EMRPatientId, ISNULL(PatientExams.nExamID, 0) AS nExamID,  " +
                                          "  ISNULL(PatientExams.nVisitID, 0) AS nVisitID, CONVERT(VARCHAR, PatientExams.dtDOS, 101) AS DOS,     " +
                                          "   ISNULL(PatientExams.sExamName, '') AS ExamName,    " +
                                           "  ISNULL(Patient.sPatientCode,'') AS Code, ISNULL(Patient.sFirstName,'') AS FirstName,     " +
                                           "  ISNULL(Patient.sMiddleName,'') AS MN,ISNULL(Patient.sLastName,'') AS LastName,     " +
                                           "  ISNULL(Patient.nSSN,'') AS EMRPatientSSN,CONVERT(VARCHAR,Patient.dtDOB,101) AS DOB,    " +
                                           "  ISNULL(PatientExams.nProviderID,0) AS nProviderID,     " +
                                           "  ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1) +    " +
                                           "  ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,     " +
                                           "  ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName    " +
                                           "  FROM  (PatientExams WITH (NOLOCK) INNER JOIN    " +
                                           "  Patient WITH (NOLOCK) ON PatientExams.nPatientID = Patient.nPatientID LEFT OUTER JOIN    " +
                                           "  Provider_MST WITH (NOLOCK) ON PatientExams.nProviderID = Provider_MST.nProviderID )   " +
                                           "  Left outer JOIN [" + _PMDB + "].[dbo].[BL_Transaction_EMR_DTL] PMTable  WITH (NOLOCK) ON  " +
                                           "  PatientExams.nExamID = PMTable.nEMRExamID  " +
                                           "  WHERE  (PatientExams.bIsOpen = 'false')    AND (PatientExams.bIsFinished = 'true') AND PMTable.nEMRExamID IS NULL  " +
                                           "  ORDER BY PatientExams.dtDOS desc";
                    }
                    else
                    {
                        _sqlQuery = " SELECT  ISNULL(PatientExams.nPatientID, 0) AS EMRPatientId, ISNULL(PatientExams.nExamID, 0) AS nExamID,  " +
                                         "  ISNULL(PatientExams.nVisitID, 0) AS nVisitID, CONVERT(VARCHAR, PatientExams.dtDOS, 101) AS DOS,     " +
                                         "   ISNULL(PatientExams.sExamName, '') AS ExamName,    " +
                                          "  ISNULL(Patient.sPatientCode,'') AS Code, ISNULL(Patient.sFirstName,'') AS FirstName,     " +
                                          "  ISNULL(Patient.sMiddleName,'') AS MN,ISNULL(Patient.sLastName,'') AS LastName,     " +
                                          "  ISNULL(Patient.nSSN,'') AS EMRPatientSSN,CONVERT(VARCHAR,Patient.dtDOB,101) AS DOB,    " +
                                          "  ISNULL(PatientExams.nProviderID,0) AS nProviderID,     " +
                                          "  ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1) +    " +
                                          "  ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,     " +
                                          "  ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName    " +
                                          "  FROM  (PatientExams WITH (NOLOCK) INNER JOIN    " +
                                          "  Patient WITH (NOLOCK) ON PatientExams.nPatientID = Patient.nPatientID LEFT OUTER JOIN    " +
                                          "  Provider_MST WITH (NOLOCK) ON PatientExams.nProviderID = Provider_MST.nProviderID )   " +
                                          "  Left outer JOIN [" + _PMDB + "].[dbo].[BL_Transaction_EMR_DTL] PMTable WITH (NOLOCK) ON  " +
                                          "  PatientExams.nExamID = PMTable.nEMRExamID  " +
                                          "  WHERE  (PatientExams.bIsOpen = 'false')    AND (PatientExams.bIsFinished = 'true') AND PMTable.nEMRExamID IS NULL  " +
                                          "  ORDER BY PatientExams.dtDOS desc";
                        //EMRPatientId,nExamID,nVisitID,DOS,ExamName,EMRPatientCode,EMRPatientFN,EMRPatientMN,
                        //EMRPatientLN,EMRPatientSSN,EMRPatientDOB,nProviderID,ProviderName,ProviderFName,ProviderMName,
                        //ProviderLName

                    }

                    oDB.Retrive_Query(_sqlQuery, out dtExams);
                    //dtExams.ad
                    //DataView dv = dtExams.DefaultView;
                    //dv.RowFilter = "";

                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); }
            }
            return dtExams;
        }

        public DataTable GetEMRExams()
        {
            DataTable _dtPatientExams = new DataTable();

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(AppSettings.ConnectionStringEMR);
            //gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oDB.Connect(false);
                oDB.Retrive("BL_SELECT_PatientExams", out _dtPatientExams);
                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                //if (oParameters != null) { oParameters.Dispose(); }
            }
            return _dtPatientExams;
        }

        public DataTable GetEMRExams_5060()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBLayer oDBPM = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtExams = null;
            DataTable dtPMExamsIds = null;
            //DataView _dvEmrExam = null; 
            string _sqlQuery = "";
            //string _strEMRIDs = "";
            try
            {
                if (oDB.CheckConnection() == true)
                {
                    //Get the list of ExamID's used in gloPM to apply filter

                    String _PMDB = string.Empty;

                    if (appSettings["DatabaseName"] != null)
                    {
                        if (appSettings["DatabaseName"] != "")
                        { _PMDB = Convert.ToString(appSettings["DatabaseName"]); }
                        else { _PMDB = ""; }
                    }
                    else
                    { _PMDB = ""; }

                    _sqlQuery = " SELECT  ISNULL(PatientExams.nPatientID, 0) AS EMRPatientId, ISNULL(PatientExams.nExamID, 0) AS nExamID, " +
                    " ISNULL(PatientExams.nVisitID, 0) AS nVisitID, CONVERT(VARCHAR, PatientExams.dtDOS, 101) AS DOS,      " +
                    " ISNULL(PatientExams.sExamName, '') AS ExamName, " +
                    " ISNULL(Patient.sPatientCode,'') AS Code, ISNULL(Patient.sFirstName,'') AS FirstName,  " +
                    " ISNULL(Patient.sMiddleName,'') AS MN,ISNULL(Patient.sLastName,'') AS LastName, " +
                    " ISNULL(Patient.nSSN,'') AS EMRPatientSSN,CONVERT(VARCHAR,Patient.dtDOB,101) AS DOB, " +
                    " ISNULL(PatientExams.nProviderID,0) AS nProviderID, " +
                    " ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1) + " +
                    " ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,      " +
                    " ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName    " +
                    " FROM  (PatientExams WITH (NOLOCK) INNER JOIN     " +
                    " Patient WITH (NOLOCK) ON PatientExams.nPatientID = Patient.nPatientID LEFT OUTER JOIN     " +
                    " Provider_MST WITH (NOLOCK) ON PatientExams.nProviderID = Provider_MST.nProviderID )  " +
                    " WHERE   " +
                    " (PatientExams.bIsOpen = 'false')     " +
                    " AND (PatientExams.bIsFinished = 'true') " +
                    " ORDER BY PatientExams.dtDOS desc ";

                    _sqlQuery = " SELECT DISTINCT nEMRExamID FROM BL_Transaction_EMR_DTL WITH (NOLOCK) ";
                    oDBPM.Connect(false);
                    oDBPM.Retrive_Query(_sqlQuery, out dtPMExamsIds);
                    oDBPM.Disconnect();

                    if (dtPMExamsIds != null && dtPMExamsIds.Rows.Count > 0)
                    {
                        DataRow[] dr = null;
                        for (int i = 0; i < dtPMExamsIds.Rows.Count; i++)
                        {
                            dr = dtExams.Select(" nExamID = " + dtPMExamsIds.Rows[i]["nEMRExamID"] + "");
                            if (dr != null && dr.Length > 0)
                            {
                                dtExams.Rows.Remove(dr[0]);
                                dtExams.AcceptChanges();
                            }
                        }
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return dtExams;
        }

        public DataTable GetEMRExams_Old(Int64 EMRPatientId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBLayer oDBPM = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtExams = null;
            DataTable dtExamsIds = null;
            string _sqlQuery = "";
            string _strEMRIDs = "";
            try
            {
                if (oDB.CheckConnection() == true)
                {
                    //Get the list of ExamID's used in gloPM to apply filter
                    oDBPM.Connect(false);
                    oDBPM.Retrive("gsp_GetExamIDString", out dtExamsIds);
                    if (dtExamsIds != null && dtExamsIds.Rows.Count > 0)
                    {
                        _strEMRIDs = Convert.ToString(dtExamsIds.Rows[0][0]);
                        if (_strEMRIDs.Length > 0)
                        {
                            //Remove the first "," from the string
                            if (_strEMRIDs.StartsWith(",") == true)
                            {
                                _strEMRIDs = _strEMRIDs.Substring(1, _strEMRIDs.Length - 1);
                            }
                        }
                    }


                    oDBPM.Disconnect();

                    oDB.Connect(false);

                    if (EMRPatientId > 0)
                    {
                        _sqlQuery = " SELECT ISNULL(PatientExams.nPatientID,0) AS EMRPatientId, " +
                        " ISNULL(PatientExams.nExamID,0) AS nExamID, " +
                        " ISNULL(PatientExams.nVisitID,0) AS nVisitID, " +
                        " CONVERT(VARCHAR, PatientExams.dtDOS,101) AS dtDOS,  " +
                        " ISNULL(PatientExams.sExamName,'') AS sExamName, " +
                        " ISNULL(PatientExams.nProviderID,0) AS nProviderID, ISNULL(Provider_MST.sFirstName,'')+SPACE(1)+ISNULL(Provider_MST.sMiddleName,'')+SPACE(1)+ISNULL(Provider_MST.sLastName,'') AS ProviderName, " +
                        " ISNULL(Provider_MST.sFirstName,'') AS ProviderFName,  " +
                        " ISNULL(Provider_MST.sMiddleName,'') AS ProviderMName,ISNULL(Provider_MST.sLastName,'') AS ProviderLName " +
                        " FROM   PatientExams WITH (NOLOCK) LEFT OUTER JOIN " +
                        " Provider_MST WITH (NOLOCK) ON PatientExams.nProviderID = Provider_MST.nProviderID " +
                        " WHERE  " +
                        " (PatientExams.nPatientID = " + EMRPatientId + ")  " +
                        " AND (PatientExams.bIsOpen = '" + false + "')  " +
                        " AND (PatientExams.bIsFinished = '" + true + "') ";

                        if (_strEMRIDs.Trim() != "")
                        {
                            _sqlQuery += "AND ( nExamID NOT IN ( " + _strEMRIDs + " )) ";
                        }

                        _sqlQuery += " ORDER BY PatientExams.dtDOS desc";
                    }
                    else
                    {
                        _sqlQuery = " SELECT " +
                        " ISNULL(PatientExams.nPatientID, 0) AS EMRPatientId, ISNULL(PatientExams.nExamID, 0) AS nExamID,  " +
                        " ISNULL(PatientExams.nVisitID, 0) AS nVisitID, CONVERT(VARCHAR, PatientExams.dtDOS, 101) AS DOS,  " +
                        " ISNULL(PatientExams.sExamName, '') AS ExamName, " +
                        " ISNULL(Patient.sPatientCode,'') AS Code, ISNULL(Patient.sFirstName,'') AS FirstName,  " +
                        " ISNULL(Patient.sMiddleName,'') AS MN,ISNULL(Patient.sLastName,'') AS LastName,  " +
                        " ISNULL(Patient.nSSN,'') AS EMRPatientSSN,CONVERT(VARCHAR,Patient.dtDOB,101) AS DOB, " +
                        " ISNULL(PatientExams.nProviderID,0) AS nProviderID,  " +
                        " ISNULL(Provider_MST.sFirstName, '') + SPACE(1) + ISNULL(Provider_MST.sMiddleName, '') + SPACE(1) + " +
                        " ISNULL(Provider_MST.sLastName, '') AS ProviderName, ISNULL(Provider_MST.sFirstName, '') AS ProviderFName,  " +
                        " ISNULL(Provider_MST.sMiddleName, '') AS ProviderMName, ISNULL(Provider_MST.sLastName, '') AS ProviderLName " +
                        " FROM  PatientExams WITH (NOLOCK) INNER JOIN " +
                        " Patient WITH (NOLOCK) ON PatientExams.nPatientID = Patient.nPatientID LEFT OUTER JOIN " +
                        " Provider_MST WITH (NOLOCK) ON PatientExams.nProviderID = Provider_MST.nProviderID " +
                        " WHERE  " +
                        " (PatientExams.bIsOpen = '" + false + "')  " +
                        " AND (PatientExams.bIsFinished = '" + true + "') ";

                        if (_strEMRIDs.Trim() != "")
                        {
                            _sqlQuery += "AND ( nExamID NOT IN ( " + _strEMRIDs + " )) ";
                        }

                        _sqlQuery += " ORDER BY PatientExams.dtDOS desc";

                        //EMRPatientId,nExamID,nVisitID,DOS,ExamName,EMRPatientCode,EMRPatientFN,EMRPatientMN,
                        //EMRPatientLN,EMRPatientSSN,EMRPatientDOB,nProviderID,ProviderName,ProviderFName,ProviderMName,
                        //ProviderLName

                    }

                    oDB.Retrive_Query(_sqlQuery, out dtExams);

                    oDB.Disconnect();
                    //dtExams.ad
                    //DataView dv = dtExams.DefaultView;
                    //dv.RowFilter = "";

                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); }
            }
            return dtExams;
        }

        public DataTable GetEMRExams(DateTime dtClaimDate)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_emrdatabaseconnectionstring);
            gloDatabaseLayer.DBLayer oDBPM = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtExams = null;
            DataTable dtID = null;
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                oDBPM.Connect(false);

                if (oDBPM.CheckConnection() == true)
                {

                    _sqlQuery = " SELECT nEMRExamID,nEMRVisitID FROM BL_Transaction_EMR_DTL WITH (NOLOCK) " +
                                " WHERE nClinicID  = " + _ClinicID + "";
                    oDBPM.Retrive_Query(_sqlQuery, out dtID);

                    string _VisitIds = "";
                    string _ExamIds = "";

                    if (dtID != null && dtID.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtID.Rows.Count; i++)
                        {
                            _VisitIds += Convert.ToString(dtID.Rows[i]["nEMRVisitID"]) + ",";
                            _ExamIds += Convert.ToString(dtID.Rows[i]["nEMRExamID"]) + ",";

                        }

                        if (_VisitIds.Trim().Length > 0)
                        { _VisitIds = _VisitIds.TrimEnd(','); }
                        if (_ExamIds.Trim().Length > 0)
                        { _ExamIds = _ExamIds.TrimEnd(','); }

                    }

                    _sqlQuery = " SELECT DISTINCT " +
                                " ISNULL(PatientExams.nExamID,0) AS nExamID,  " +
                                " ISNULL(PatientExams.sExamName,'') AS sExamName, " +
                                " CONVERT(VARCHAR,PatientExams.dtDOS,101) AS dtDOS, " +
                                " ISNULL(PatientExams.nPatientID,0) AS nPatientID, " +
                                " ISNULL(Patient.sPatientCode,'') AS sPatientCode, " +
                                " ISNULL(Patient.sFirstName,'') AS sPatientFName, " +
                                " ISNULL(Patient.sMiddleName,'') AS sPatientMName, " +
                                " ISNULL(Patient.sLastName,'') AS sPatientLName, " +
                                " ISNULL(PatientExams.nProviderID,0) AS nProviderID, " +
                                " ISNULL(Provider_MST.sFirstName,'') AS sProviderFName, " +
                                " ISNULL(Provider_MST.sMiddleName,'') AS sProviderMName,  " +
                                " ISNULL(Provider_MST.sLastName,'') AS sProviderLName, " +
                                " ISNULL(PatientExams.sUserName,'') AS sUserName, " +
                                " ISNULL(PatientExams.nVisitID,0) AS nVisitID " +
                                " FROM Provider_MST WITH (NOLOCK) INNER JOIN " +
                                " PatientExams WITH (NOLOCK) ON Provider_MST.nProviderID = PatientExams.nProviderID INNER JOIN " +
                                " Patient WITH (NOLOCK) ON PatientExams.nPatientID = Patient.nPatientID " +
                                " WHERE CONVERT(VARCHAR,PatientExams.dtDOS,101) = '" + dtClaimDate.ToString("MM/dd/yyyy") + "'";
                    if (_VisitIds != "" && _VisitIds.Length > 0)
                    {
                        _sqlQuery += " AND PatientExams.nVisitID NOT IN(" + _VisitIds + ") ";
                    }
                    if (_ExamIds != "" && _ExamIds.Length > 0)
                    {
                        _sqlQuery += " AND PatientExams.nExamID NOT IN(" + _ExamIds + ") ";
                    }
                    _sqlQuery += " ORDER BY PatientExams.dtDOS desc";

                    oDB.Retrive_Query(_sqlQuery, out dtExams);
                }
                oDB.Disconnect();
                oDBPM.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); }
                if (oDBPM != null) { oDBPM.Dispose(); }
                if (dtID != null) { dtID.Dispose(); }
            }
            return dtExams;
        }

        public bool GetPatientExternalCode(Int64 PatientID, out string PatientExternalCode)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _Result;
            string _ExternalCode = "";
            bool _HasExternalCode = false;
            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT ISNULL(sExternalCode,'') FROM Patient WITH (NOLOCK) WHERE nPatientID = " + PatientID + " ";
                _Result = oDB.ExecuteScalar_Query(_sqlQuery);
                if (_Result != null)
                {
                    if (Convert.ToString(_Result) != "")
                    {
                        _ExternalCode = Convert.ToString(_Result);
                        _HasExternalCode = true;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                _ExternalCode = "";
            }
            finally
            {
                if (oDB.Connect(false))
                { oDB.Disconnect(); }

                if (oDB != null)
                { oDB.Dispose(); }
            }
            PatientExternalCode = _ExternalCode;
            return _HasExternalCode;
        }

        public DataTable GetPOS()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtPOS = new DataTable();
            string strQuery = "";
            try
            {
                oDB.Connect(false);


                //strQuery = "select nPOSID,sPOSCode,sPOSName,sPOSDescription from BL_POS_MST where nClinicID="+_nClinicID+" ";
                if (_ClinicID == 0)
                    strQuery = "select nPOSID,sPOSCode + '-' + sPOSName AS sPOSCode,sPOSDescription from BL_POS_MST WITH (NOLOCK) where bIsBlocked='" + false + "' ORDER BY sPOSCode";
                else
                    strQuery = "select nPOSID,sPOSCode + '-' + sPOSName AS sPOSCode,sPOSDescription from BL_POS_MST WITH (NOLOCK) where bIsBlocked='" + false + "' AND nClinicID=" + _ClinicID + " ORDER BY sPOSCode";

                oDB.Retrive_Query(strQuery, out dtPOS);
                return dtPOS;

            }
            catch (gloDatabaseLayer.DBException dbex)
            {
                dbex.ERROR_Log(dbex.ToString());
                return null;
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.ToString(), _messageBoxCaption);
                return null;
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
                dtPOS.Dispose();

            }
        }

        public DataTable GetTOS()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dtTOS = new DataTable();
            string strQuery = "";
            try
            {
                oDB.Connect(false);

                if (_ClinicID == 0)
                    strQuery = "select nTOSID,sDescription,sTOSCode from BL_TOS_MST WITH (NOLOCK) where bIsBlocked = '" + false + "' ORDER BY sDescription";
                else
                    strQuery = "select nTOSID,sDescription,sTOSCode from BL_TOS_MST WITH (NOLOCK) where bIsBlocked = '" + false + "' AND nClinicID = " + _ClinicID + " ORDER BY sDescription";

                oDB.Retrive_Query(strQuery, out dtTOS);
                return dtTOS;

            }
            catch (gloDatabaseLayer.DBException dbex)
            {
                dbex.ERROR_Log(dbex.ToString());
                return null;
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.ToString(), _messageBoxCaption);
                return null;
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
                dtTOS.Dispose();

            }
        }

        public DataTable GetProviderSettings(long ProviderID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable dt = new DataTable();
            string strQuery = "";
            try
            {
                oDB.Connect(false);

                strQuery = "SELECT  sName, sValue, nProviderID FROM ProviderSettings WITH (NOLOCK) WHERE  nProviderID = " + ProviderID + " AND nClinicID = " + _ClinicID;

                oDB.Retrive_Query(strQuery, out dt);
                return dt;

            }
            catch (gloDatabaseLayer.DBException dbex)
            {
                dbex.ERROR_Log(dbex.ToString());
                return null;
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.ToString(), _messageBoxCaption);
                return null;
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
                dt.Dispose();

            }
        }

        public void AddSettings(long ProviderID, string SettingName, string SettingValue, long UserID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oDB.Connect(false);

                oDBParameters.Add("@SettingName", SettingName, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@SettingValue", SettingValue, ParameterDirection.Input, SqlDbType.VarChar);
                oDBParameters.Add("@SettingFlag", false, ParameterDirection.Input, SqlDbType.Bit);
                oDBParameters.Add("@ProviderID", ProviderID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@UserID", UserID, ParameterDirection.Input, SqlDbType.BigInt);
                oDBParameters.Add("@ClinicID", _ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                oDB.Execute("gsp_InUpProviderSettings", oDBParameters);

            }
            catch (gloDatabaseLayer.DBException dbex)
            {
                dbex.ERROR_Log(dbex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                oDB.Disconnect();
                oDBParameters.Dispose();
                oDB.Dispose();
            }
        }

        public bool AssociatePatient(Int64 gloPMPatientID, Int64 gloEMRPatientID, string gloEMRPatientCode)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            int _result = 0;
            bool _Return = false;
            try
            {
                if (gloPMPatientID > 0 && gloEMRPatientCode != "" && gloEMRPatientID > 0)
                {
                    oDB.Connect(false);
                    _sqlQuery = "UPDATE Patient WITH (READPAST) SET sExternalCode = '" + gloEMRPatientCode + "' WHERE nPatientID = " + gloPMPatientID + " ";
                    _result = oDB.Execute_Query(_sqlQuery);
                    if (_result > 0)
                    {
                        _Return = true;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _Return = false;
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return _Return;
        }

        public Int64 GetEMRPatientID(string EMRPatientCode, string EMRDatabaseConnectionString)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(EMRDatabaseConnectionString);
            Object _Result;
            string _sqlQuery = "";

            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT ISNULL(Patient.nPatientID,0) AS PatientID FROM Patient WITH (NOLOCK) WHERE UPPER(sPatientCode) = '" + EMRPatientCode.ToUpper() + "'";
                _Result = oDB.ExecuteScalar_Query(_sqlQuery);
                return Convert.ToInt64(_Result);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                return 0;
            }
            finally
            {
                if (oDB.Connect(false))
                { oDB.Disconnect(); }

                if (oDB != null)
                { oDB.Dispose(); }
            }
        }

        public Int64 GetEMRPatientID(Int64 gloPMPatientId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object retVal = null;
            Int64 _emrPatientId = 0;

            try
            {
                oDB.Connect(false);
                _sqlQuery = "SELECT nEMRPatientID FROM Patient WITH (NOLOCK) WHERE nPatientID = " + gloPMPatientId + " AND nClinicID = " + this.ClinicID + " ";
                retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (retVal != null && retVal != DBNull.Value && Convert.ToString(retVal) != "") { _emrPatientId = Convert.ToInt64(retVal); }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return _emrPatientId;
        }

        public DataTable GetSubmitterInfo(Int64 ClinicID, Int64 _providerID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloSettings.GeneralSettings oSettings = new gloSettings.GeneralSettings(_databaseconnectionstring);
            string _strSQL = "";
            Object _objResult = null;
            DataTable dt = null;
            string strSetting = "";
            bool _IsColumnPresent = false;
            try
            {
                oDB.Connect(false);
                oSettings.GetSetting("SubmitterSetting", _providerID, ClinicID, out _objResult);
                if (_objResult != null)
                {
                    // |Company|Practice|Business|Clinic"
                    strSetting = Convert.ToString(_objResult);
                }

                switch (strSetting)
                {
                    case "Company":
                        {
                            _strSQL = " SELECT  sCompanyName AS SubmitterName, sCompanyAddressline1 AS SubmitterAddress1, sCompanyAddressline2 AS SubmitterAddress2, sCompanyCity AS SubmitterCity, sCompanyState AS SubmitterState, " +
                                      " sCompanyZIP AS SubmitterZip,ISNULL(sCompanyAreaCode,'') AS SubmitterAreaCode, sCompanyPhone AS SubmitterPhone,sCompanyPhone AS sPhoneNo,sCompanyContactName AS SubmitterContactName, sCompanyFax AS SubmitterFax " +
                                      " FROM  Provider_MST WITH (NOLOCK)  " +
                                      " WHERE (nProviderID = " + _providerID + ") AND (nClinicID =" + ClinicID + ") ";
                        }
                        break;
                    case "Practice":
                        {
                            _strSQL = " SELECT  (ISNULL(sLastName,'')) AS SubmitterName, sPracticeAddressline1 AS SubmitterAddress1, sPracticeAddressline2 AS SubmitterAddress2, " + //+' '+ ISNULL(sFirstName,'')+ ' '+ ISNULL(sMiddleName,'')
                                       "  sPracticeCity AS SubmitterCity, sPracticeState AS SubmitterState, sPracticeZIP AS SubmitterZip,ISNULL(sPracticeAreaCode,'') AS SubmitterAreaCode, sPracPhoneNo AS SubmitterPhone,sPracPhoneNo AS sPhoneNo,sPracFAX AS SubmitterFAX, " +
                                       " sPracContactName AS SubmitterContactName" +
                                       " FROM  Provider_MST WITH (NOLOCK)  " +
                                       " WHERE (nProviderID = " + _providerID + ") AND (nClinicID =" + ClinicID + ") ";
                        }
                        break;
                    case "Business":
                        {
                            _strSQL = " SELECT  (ISNULL(sLastName ,'')+' '+ ISNULL(sFirstName,'')+ ' '+ ISNULL(sMiddleName,'') )AS SubmitterName,  sBusinessAddressline1 AS SubmitterAddress1, sBusinessAddressline2 AS SubmitterAddress2, sBusinessCity AS SubmitterCity, sBusinessState AS SubmitterState, sBusinessZIP AS SubmitterZip,ISNULL(sBusinessAreaCode,'') AS SubmitterAreaCode, " +
                                        " sBusPhoneNo AS SubmitterPhone,sBusPhoneNo AS sPhoneNo,sBusFAX AS SubmitterFAX, " +
                                        " sBusinessContactName AS SubmitterContactName " +
                                        " FROM  Provider_MST WITH (NOLOCK)  " +
                                        " WHERE (nProviderID = " + _providerID + ") AND (nClinicID =" + ClinicID + ") ";
                        }
                        break;
                    case "Clinic":
                        {
                            dt = new DataTable();
                            _strSQL = " select column_name, data_type, character_maximum_length from information_schema.columns where table_name = 'Clinic_MST'";

                            oDB.Retrive_Query(_strSQL, out dt);

                            if (dt != null && dt.Rows.Count > 0)
                            {
                                for (int _rowIndex = 0; _rowIndex < dt.Rows.Count; _rowIndex++)
                                {
                                    if (dt.Rows[_rowIndex][0].ToString() == "sAddress1")
                                    {
                                        _IsColumnPresent = true;
                                        break;
                                    }
                                }
                                _strSQL = "";
                                if (_IsColumnPresent)
                                {
                                    _strSQL = " SELECT sClinicName AS SubmitterName,sAddress1 AS SubmitterAddress1,sAddress2 AS SubmitterAddress2,sStreet AS SubmitterStreet,sCity AS SubmitterCity,sState AS SubmitterState,sZIP AS SubmitterZIP,ISNULL(sAreaCode,'') AS SubmitterAreaCode,sPhoneNo ,sMobileNo AS SubmitterMobile, " +
                                              " sFAX ,sTAXID AS SubmitterTAXID,sClinicName AS SubmitterContactName, sContactPersonAddress1,sContactPersonAddress2,sContactPersonPhone AS SubmitterPhone, " +
                                              " sContactPersonFAX AS SubmitterFAX,sContactPersonMobile FROM Clinic_MST WITH (NOLOCK) WHERE nClinicID =" + ClinicID + " ";
                                }
                                else
                                {
                                    _strSQL = " SELECT  sClinicName AS SubmitterName, sAddress AS SubmitterAddress1, sStreet AS SubmitterAddress2, sCity AS SubmitterCity, sState AS SubmitterState, sZIP AS SubmitterZIP,ISNULL(sAreaCode,'') AS SubmitterAreaCode, sPhoneNo, sMobileNo, sFAX, sEmail, sURL, sTAXID, imgClinicLogo, "
                                            + " sClinicName AS SubmitterContactName, sContactPersonAddress, sContactPersonPhone AS SubmitterPhone, sContactPersonFAX AS SubmitterFAX, sContactPersonEmail, sContactPersonMobile AS SubmitterMobile, "
                                            + " sExternalcode FROM Clinic_MST WITH (NOLOCK) WHERE nClinicID =" + ClinicID + " ";
                                }
                            }

                        }
                        break;
                    default:
                        dt = new DataTable();
                        _strSQL = " SELECT column_name, data_type, character_maximum_length FROM information_schema.columns WHERE table_name = 'Clinic_MST'";

                        oDB.Retrive_Query(_strSQL, out dt);
                        if (dt.Rows.Count > 0)
                        {
                            for (int _rowIndex = 0; _rowIndex < dt.Rows.Count; _rowIndex++)
                            {
                                if (dt.Rows[_rowIndex][0].ToString() == "sAddress1")
                                {
                                    _IsColumnPresent = true;
                                }
                            }
                            _strSQL = "";
                            if (_IsColumnPresent)
                            {
                                _strSQL = " SELECT sClinicName AS SubmitterName,sAddress1 AS SubmitterAddress1,sAddress2 AS SubmitterAddress2,sStreet AS SubmitterStreet,sCity AS SubmitterCity,sState AS SubmitterState,sZIP AS SubmitterZIP,ISNULL(sAreaCode,'') AS SubmitterAreaCode,sPhoneNo ,sMobileNo AS SubmitterMobile, " +
                                          " sFAX ,sTAXID AS SubmitterTAXID,sClinicName AS SubmitterContactName, sContactPersonAddress1,sContactPersonAddress2,sContactPersonPhone AS SubmitterPhone, " +
                                          " sContactPersonFAX AS SubmitterFAX,sContactPersonMobile FROM Clinic_MST WITH (NOLOCK) WHERE nClinicID =" + ClinicID + " ";
                            }
                            else
                            {
                                _strSQL = " SELECT sClinicName AS SubmitterName, sAddress AS SubmitterAddress1, sStreet AS SubmitterAddress2, sCity AS SubmitterCity, sState AS SubmitterState, sZIP AS SubmitterZIP,ISNULL(sAreaCode,'') AS SubmitterAreaCode, sPhoneNo, sMobileNo, sFAX, sEmail, sURL, sTAXID, imgClinicLogo, "
                                        + " sClinicName AS SubmitterContactName, sContactPersonAddress, sContactPersonPhone AS SubmitterPhone, sContactPersonFAX AS SubmitterFAX, sContactPersonEmail, sContactPersonMobile AS SubmitterMobile, "
                                        + " sExternalcode FROM Clinic_MST WITH (NOLOCK) WHERE nClinicID =" + ClinicID + " ";
                            }
                        }
                        break;
                }
                if (_strSQL != "")
                {
                    dt = new DataTable();
                    oDB.Retrive_Query(_strSQL, out dt);
                }
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
                if (oSettings != null)
                {
                    oSettings.Dispose();
                    oSettings = null;
                }
            }
            return dt;
        }

        public DataTable GetFacilityInfo(Int64 FacilityID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            DataTable dt = new DataTable();
            try
            {
                _strSQL = "SELECT nFacilityID AS FacilityID, sFacilityCode AS FacilityCode, sFacilityName AS FacilityName, sNPI AS FacilityNPI, sMedicadID AS FacilityMedicaidID,  " +
                           " sBlueShieldID AS FacilityBlueShieldID, sMedicareID AS FacilityMedicareID, nPOSID AS FacilityPOSID, sAddress1 AS FacilityAddress1,  " +
                           " sAddress2 AS FacilityAddress2, sZip AS FacilityZip, sCity AS FacilityCity, sState AS FacilityState, sPhone AS FacilityPhone, sFax AS FacilityFax,  " +
                           " nClinicID, bIsBlocked " +
                           " FROM   BL_Facility_MST WITH (NOLOCK) WHERE nFacilityID=" + FacilityID + "";
                oDB.Connect(false);
                oDB.Retrive_Query(_strSQL, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return dt;
        }

        public DataTable GetClearingHouseSettings()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            DataTable dt = new DataTable();
            try
            {
                //7022Items: ISA Segment change Lymphedema Clearing house claim Changes(ISA)
                _strSQL = " SELECT nClearingHouseID, sClearingHouseCode, sReceiverID, sReceiverName, sSubmitterID, bIsOneJQulifier, sOneJQulifier, bIsSenderCode, sSenderCode,  " +
                          " bIsVenderIDCode, sVenderIDCode, bIsLoop1000BNM109, sLoop1000BNM109, nTypeOfData, bIsISA, nClinicID,sReceiverIDQualifier,sSenderIDQualifier,bIsDefault " +
                          " FROM BL_ClearingHouse_MST WITH (NOLOCK) WHERE nClinicID=" + ClinicID + "";
                oDB.Connect(false);
                oDB.Retrive_Query(_strSQL, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return dt;
        }

        //20100601 Mahesh Nawal Code Optimization
        public bool GetSettings(string SettingName)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            object _result = null;
            bool _IsSettingPresent = false;
            try
            {
                oDB.Connect(false);
                _strSQL = "SELECT  ISNULL(sSettingsValue,'') AS sSettingsValue FROM Settings WITH (NOLOCK) WHERE sSettingsName='" + SettingName + "' AND nClinicID = " + _ClinicID + " ";
                _result = oDB.ExecuteScalar_Query(_strSQL);
                if (_result != null && Convert.ToString(_result) != "")
                {
                    _IsSettingPresent = Convert.ToBoolean(_result);
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
            }
            return _IsSettingPresent;
        }

        //20110224 Mahesh Nawal Taxonomy Setting Check of Plan
        public bool IsTaxonomy(Int64 ContactID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            try
            {
               oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                string strSQL = "SELECT ISNULL(bIncludeTaxonomyForElectronic,0) FROM Contacts_Insurance_DTL WITH (NOLOCK) WHERE nContactID =" + ContactID;
                object Taxonomy = new object();
                Taxonomy = oDB.ExecuteScalar(strSQL);
                return Convert.ToBoolean(Taxonomy);
              
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return false;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
        }

        public gloAppointmentBook.Books.Provider GetRendering(Int64 ContactID, Int64 ProviderID)
        {
            gloAppointmentBook.Books.Provider _Provider = null;
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oDBParameters = null;
            DataTable dtTaxonomy = null;
            try
            {
                _Provider = new gloAppointmentBook.Books.Provider();
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDBParameters = new gloDatabaseLayer.DBParameters();
                oDB.Connect(false);
                oDBParameters.Add("@ContactId", ContactID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt );
                oDBParameters.Add("@ProviderId", ProviderID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);                
                dtTaxonomy = new DataTable();
                oDB.Retrive("GetRenderingProvider", oDBParameters, out dtTaxonomy);

                if (dtTaxonomy != null)
                {
                    if (dtTaxonomy.Rows[0]["sFirstName"] != null)
                        _Provider.FirstName = dtTaxonomy.Rows[0]["sFirstName"].ToString();

                    if (dtTaxonomy.Rows[0]["sMiddleName"] != null)
                        _Provider.MiddleName = dtTaxonomy.Rows[0]["sMiddleName"].ToString();

                    if (dtTaxonomy.Rows[0]["sLastName"] != null)
                        _Provider.LastName = dtTaxonomy.Rows[0]["sLastName"].ToString();

                    if (dtTaxonomy.Rows[0]["Qulifier"] != null)
                        _Provider.Qualifier = dtTaxonomy.Rows[0]["Qulifier"].ToString();

                    if (dtTaxonomy.Rows[0]["Taxonomy"] != null)
                        _Provider.Taxonomy = dtTaxonomy.Rows[0]["Taxonomy"].ToString();

                }


                return _Provider;

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (oDBParameters != null)
                {

                    oDBParameters.Dispose();
                }
                if (dtTaxonomy != null)
                {
                    dtTaxonomy = null;
                }                                      
            }
        }

        public DataTable GetFacilityInfo(string FacilityCode, Int64 _ProviderID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            DataTable dt = new DataTable();
            try
            {
                if (FacilityCode == "11")
                {
                    _strSQL = " SELECT  ISNULL(sLastName ,'')+' '+ ISNULL(sFirstName,'')+ ' '+ ISNULL(sMiddleName) AS FacilityName,  sBusinessAddressline1 AS FacilityAddress1, sBusinessAddressline2 AS FacilityAddress2, sBusinessCity AS FacilityCity, sBusinessState AS FacilityState, sBusinessZIP AS FacilityZip,ISNULL(sBusinessAreaCode,'') AS FacilityAreaCode, " +
                                        " sBusPhoneNo AS FacilityPhone, sBusFAX AS FacilityFAX, sNPI AS FacilityNPI " +
                                        " FROM  Provider_MST WITH (NOLOCK)  " +
                                        " WHERE (nProviderID = " + _ProviderID + ") AND (nClinicID =" + ClinicID + ") ";
                }
                else
                {
                    _strSQL = " SELECT nFacilityID, sFacilityName AS FacilityName, sNPI AS FacilityNPI, sMedicadID, sBlueShieldID, sMedicareID, nPOSID, sAddress1 AS FacilityAddress1,sAddress2 AS FacilityAddress2, sZip FacilityZIP,ISNULL(sAreaCode,'') AS FacilityAreaCode, sCity AS FacilityCity, sState AS FacilityState, sPhone AS FacilityPhone, sFax AS FacilityFax, " +
                              " nClinicID , bIsBlocked " +
                              " FROM BL_Facility_MST WITH (NOLOCK) WHERE UPPER(sFacilityCode)='" + FacilityCode.ToUpper() + "'";
                }

                oDB.Connect(false);
                oDB.Retrive_Query(_strSQL, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return dt;
        }


        #region "Need to Delete- not in use"
        //public DataTable GetFacilities()
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string _strSQL = "";
        //    DataTable dt = new DataTable();
        //    try
        //    {
        //        _strSQL = "Select * FROM BL_Facility_MST WITH (NOLOCK)";
        //        oDB.Connect(false);
        //        oDB.Retrive_Query(_strSQL, out dt);
        //    }
        //    catch (gloDatabaseLayer.DBException ex)
        //    {
        //        ex.ERROR_Log(ex.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    finally
        //    {
        //        oDB.Disconnect();
        //        oDB.Dispose();
        //    }
        //    return dt;
        //}
        #endregion


        //20100529 Mahesh Nawal Code Optimization
        //public DataTable GetDistinctDiagnosis(Int64 TransactionID, Int64 ClinicID, Int64 ClaimNo)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string strSQL = "";
        //    DataTable dtDX = new DataTable();
        //    try
        //    {
        //        oDB.Connect(false);


        //        strSQL = " Select sDx1Code AS DX,nFromDate AS DateService from BL_Transaction_claim_Lines WITH (NOLOCK) " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx1Code IS NOT NULL AND sDx1Code <> '' " +
        //                 " Union " +
        //                 " Select sDx2Code AS DX,nFromDate AS DateService from BL_Transaction_claim_Lines WITH (NOLOCK)  " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx2Code IS NOT NULL AND sDx2Code <> '' " +
        //                 " Union  " +
        //                 " Select sDx3Code AS DX,nFromDate AS DateService from BL_Transaction_claim_Lines WITH (NOLOCK) " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx3Code IS NOT NULL AND sDx3Code <> '' " +
        //                 " Union  " +
        //                 " Select sDx4Code AS DX,nFromDate AS DateService from BL_Transaction_claim_Lines WITH (NOLOCK)  " +
        //                 " WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
        //                 " AND sDx4Code IS NOT NULL AND sDx4Code <> '' ";

        //        oDB.Retrive_Query(strSQL, out dtDX);
        //        if (dtDX != null)
        //        {
        //            return dtDX;
        //        }
        //        return null;
        //    }
        //    catch (Exception ex)
        //    {
        //        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
        //        return null;
        //    }
        //    finally
        //    {
        //        if (oDB != null)
        //        {
        //            oDB.Disconnect();
        //            oDB.Dispose();
        //        }
        //    }
        //}

        public DataTable GetDistinctDiagnosis(Int64 TransactionID, Int64 ClinicID, Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string strSQL = "";
            DataTable dtAllDx = new DataTable();
            DataTable dtClaimDx = new DataTable();
            dtClaimDx.Columns.Add("DX");
            dtClaimDx.Columns.Add("DateService");

            try
            {
                oDB.Connect(false);

                strSQL = "Select ISNULL(sDx1Code,'') AS sDx1Code,ISNULL(sDx2Code,'') AS sDx2Code, " +
                " ISNULL(sDx3Code,'') AS sDx3Code,ISNULL(sDx4Code,'') AS sDx4Code,ISNULL(sLinePrimaryDxCode,'') AS sLinePrimaryDxCode, " +
                " ISNULL(ntransactionlineno,0) AS ntransactionlineno,ISNULL(nFromDate,0) AS DateService " +
                " from BL_Transaction_Claim_Lines WITH(NOLOCK)  WHERE (nTransactionID = " + TransactionID + ") AND (nClinicID = " + ClinicID + ") " +
                " order by ntransactionlineno";

                oDB.Retrive_Query(strSQL, out dtAllDx);
                DataRow dr;
                ArrayList _claimDx = new ArrayList();
                ArrayList _DxDate = new ArrayList();
                string _tempDxCode = "";
                string _tempDxDate = "";

                if (dtAllDx != null && dtAllDx.Rows.Count > 0)
                {
                    for (int i = 0; i < dtAllDx.Rows.Count; i++)
                    {

                        //...Line 1 Primary Diagnosis
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sLinePrimaryDxCode"]).Trim().ToUpper();

                        _tempDxDate = "";
                        _tempDxDate = Convert.ToString(dtAllDx.Rows[i]["DateService"]).Trim().ToUpper();

                        if (Convert.ToInt32(dtAllDx.Rows[i]["ntransactionlineno"]) == 1 && _tempDxCode != "")
                        { _claimDx.Add(_tempDxCode); _DxDate.Add(_tempDxDate); }

                        //..... Line Dx1
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx1Code"]).Trim().ToUpper();


                        _tempDxDate = "";
                        _tempDxDate = Convert.ToString(dtAllDx.Rows[i]["DateService"]).Trim().ToUpper();

                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); _DxDate.Add(_tempDxDate); }

                        //..... Line Dx2
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx2Code"]).Trim().ToUpper();


                        _tempDxDate = "";
                        _tempDxDate = Convert.ToString(dtAllDx.Rows[i]["DateService"]).Trim().ToUpper();

                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); _DxDate.Add(_tempDxDate); }

                        //..... Line Dx3
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx3Code"]).Trim().ToUpper();


                        _tempDxDate = "";
                        _tempDxDate = Convert.ToString(dtAllDx.Rows[i]["DateService"]).Trim().ToUpper();

                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); _DxDate.Add(_tempDxDate); }

                        //..... Line Dx4
                        _tempDxCode = "";
                        _tempDxCode = Convert.ToString(dtAllDx.Rows[i]["sDx4Code"]).Trim().ToUpper();


                        _tempDxDate = "";
                        _tempDxDate = Convert.ToString(dtAllDx.Rows[i]["DateService"]).Trim().ToUpper();

                        if (_tempDxCode != "" && _claimDx.Contains(_tempDxCode) == false)
                        { _claimDx.Add(_tempDxCode); _DxDate.Add(_tempDxDate); }

                    }

                    if (_claimDx != null && _claimDx.Count > 0)
                    {
                        for (int DxIndex = 0; DxIndex < _claimDx.Count; DxIndex++)
                        {
                            dr = dtClaimDx.NewRow();
                            dr["DX"] = _claimDx[DxIndex].ToString();
                            dr["DateService"] = _DxDate[DxIndex].ToString();
                            dtClaimDx.Rows.Add(dr);
                            dr = null;
                        }

                        if (dtClaimDx != null)
                        { return dtClaimDx; }
                    }
                }
                return null;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                return null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
        }

        public DataTable GetPatientBalance(Int64 PatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string strSQL = "";
            DataTable dtBalance = new DataTable();
            try
            {
                oDB.Connect(false);

                strSQL = "SELECT BL_Transaction_Lines.nTransactionID, BL_Transaction_Lines.nTransactionDetailID, BL_Transaction_Lines.nTransactionLineNo, "
                        + " BL_Transaction_Lines.nFromDate, BL_Transaction_Lines.nToDate, BL_Transaction_Lines.sPOSCode, BL_Transaction_Lines.sPOSDescription, "
                        + " BL_Transaction_Lines.sTOSCode, BL_Transaction_Lines.sTOSDescription, BL_Transaction_Lines.sCPTCode, BL_Transaction_Lines.sCPTDescription, "
                        + " BL_Transaction_Lines.sDx1Code, BL_Transaction_Lines.sDx1Description, BL_Transaction_Lines.sDx2Code, BL_Transaction_Lines.sDx2Description, "
                        + " BL_Transaction_Lines.sDx3Code, BL_Transaction_Lines.sDx3Description, BL_Transaction_Lines.sDx4Code, BL_Transaction_Lines.sDx4Description, "
                        + " BL_Transaction_Lines.sDx5Code, BL_Transaction_Lines.sDx5Description, BL_Transaction_Lines.sDx6Code, BL_Transaction_Lines.sDx6Description, "
                        + " BL_Transaction_Lines.sDx7Code, BL_Transaction_Lines.sDx7Description, BL_Transaction_Lines.sDx8Code, BL_Transaction_Lines.sDx8Description, "
                        + " BL_Transaction_Lines.sMod1Code, BL_Transaction_Lines.sMod1Description, BL_Transaction_Lines.sMod2Code,   BL_Transaction_Lines.sMod2Description, "
                        + " BL_Transaction_Lines.sMod3Code, BL_Transaction_Lines.sMod3Description,  BL_Transaction_Lines.sMod4Code, BL_Transaction_Lines.sMod4Description, "
                        + " BL_Transaction_Lines.dCharges, BL_Transaction_Lines.dTotal, BL_Transaction_Lines.dAllowed, BL_Transaction_Lines.nClinicID, BL_Transaction_MST.nPatientID, "
                        + " BL_Transaction_MST.nClaimNo, BL_Transaction_Lines.dAllowed - (SELECT SUM(dPaymentAmt) AS PaymentAmount FROM   BL_Transaction_Payment_DTL WITH (NOLOCK) "
                        + " WHERE  (nClinicID = BL_Transaction_Lines.nClinicID) AND (nPatientID = BL_Transaction_MST.nPatientID) AND (nTransactionID = BL_Transaction_Lines.nTransactionID) "
                        + " AND (nTransactionDetailID = BL_Transaction_Lines.nTransactionDetailID)) AS BalanceAmount "
                        + " FROM BL_Transaction_Lines WITH (NOLOCK) INNER JOIN  BL_Transaction_MST WITH (NOLOCK) ON BL_Transaction_Lines.nTransactionID = BL_Transaction_MST.nTransactionID  "
                        + " WHERE (BL_Transaction_Lines.dAllowed - (SELECT SUM(dPaymentAmt) AS PaymentAmount  FROM  BL_Transaction_Payment_DTL AS BL_Transaction_Payment_DTL_1 WITH (NOLOCK)  "
                        + " WHERE (nClinicID = BL_Transaction_Lines.nClinicID) AND (nPatientID = BL_Transaction_MST.nPatientID) AND (nTransactionID = BL_Transaction_Lines.nTransactionID) "
                        + " AND (nTransactionDetailID = BL_Transaction_Lines.nTransactionDetailID)) > 0) AND (BL_Transaction_MST.nPatientID = " + PatientID + ") AND (BL_Transaction_Lines.nClinicID = " + _ClinicID + ") "
                        + " UNION "
                        + " SELECT BL_Transaction_Lines.nTransactionID, BL_Transaction_Lines.nTransactionDetailID, BL_Transaction_Lines.nTransactionLineNo, "
                        + " BL_Transaction_Lines.nFromDate, BL_Transaction_Lines.nToDate, BL_Transaction_Lines.sPOSCode, BL_Transaction_Lines.sPOSDescription, "
                        + " BL_Transaction_Lines.sTOSCode, BL_Transaction_Lines.sTOSDescription, BL_Transaction_Lines.sCPTCode, BL_Transaction_Lines.sCPTDescription,   "
                        + " BL_Transaction_Lines.sDx1Code, BL_Transaction_Lines.sDx1Description, BL_Transaction_Lines.sDx2Code, BL_Transaction_Lines.sDx2Description,   "
                        + " BL_Transaction_Lines.sDx3Code, BL_Transaction_Lines.sDx3Description, BL_Transaction_Lines.sDx4Code, BL_Transaction_Lines.sDx4Description,   "
                        + " BL_Transaction_Lines.sDx5Code, BL_Transaction_Lines.sDx5Description, BL_Transaction_Lines.sDx6Code, BL_Transaction_Lines.sDx6Description,   "
                        + " BL_Transaction_Lines.sDx7Code, BL_Transaction_Lines.sDx7Description, BL_Transaction_Lines.sDx8Code, BL_Transaction_Lines.sDx8Description,   "
                        + " BL_Transaction_Lines.sMod1Code, BL_Transaction_Lines.sMod1Description, BL_Transaction_Lines.sMod2Code,   BL_Transaction_Lines.sMod2Description, "
                        + " BL_Transaction_Lines.sMod3Code, BL_Transaction_Lines.sMod3Description,  BL_Transaction_Lines.sMod4Code, BL_Transaction_Lines.sMod4Description, "
                        + " BL_Transaction_Lines.dCharges, BL_Transaction_Lines.dTotal, BL_Transaction_Lines.dAllowed, BL_Transaction_Lines.nClinicID, BL_Transaction_MST.nPatientID, "
                        + " BL_Transaction_MST.nClaimNo, BL_Transaction_Lines.dAllowed AS BalanceAmount  "
                        + " FROM BL_Transaction_Lines WITH (NOLOCK)  INNER JOIN  BL_Transaction_MST WITH (NOLOCK) ON BL_Transaction_Lines.nTransactionID = BL_Transaction_MST.nTransactionID  "
                        + " WHERE (BL_Transaction_MST.nTransactionID  NOT IN (SELECT nTransactionID FROM BL_Transaction_Payment_DTL WITH (NOLOCK) WHERE nPatientID = " + PatientID + " AND BL_Transaction_Lines.nClinicID = " + _ClinicID + ") "
                        + " AND BL_Transaction_MST.nPatientID = " + PatientID + " AND BL_Transaction_Lines.nClinicID = " + _ClinicID + ") "
                        + " ORDER BY BL_Transaction_Lines.nFromDate DESC ";

                oDB.Retrive_Query(strSQL, out dtBalance);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                return null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return dtBalance;
        }

        public Decimal GetPatientTotalBalance(Int64 PatientID)
        {
            DataTable dtBalance = new DataTable();
            Decimal _dBalance = 0;
            try
            {
                dtBalance = GetPatientBalance(PatientID);

                if (dtBalance != null)
                {
                    for (int i = 0; i < dtBalance.Rows.Count; i++)
                    {
                        _dBalance += Convert.ToDecimal(dtBalance.Rows[i]["BalanceAmount"]);
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
            }
            return _dBalance;
        }

        public DataTable GetPatientLager(Int64 PatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string strSQL = "";
            DataTable dtBalance = new DataTable();
            try
            {
                oDB.Connect(false);

                strSQL = "SELECT BL_Transaction_Lines.nTransactionID, BL_Transaction_Lines.nTransactionDetailID, BL_Transaction_Lines.nTransactionLineNo, "
                        + " BL_Transaction_Lines.nFromDate, BL_Transaction_Lines.nToDate, BL_Transaction_Lines.sPOSCode, BL_Transaction_Lines.sPOSDescription, "
                        + " BL_Transaction_Lines.sTOSCode, BL_Transaction_Lines.sTOSDescription, BL_Transaction_Lines.sCPTCode, BL_Transaction_Lines.sCPTDescription, "
                        + " BL_Transaction_Lines.sDx1Code, BL_Transaction_Lines.sDx1Description, BL_Transaction_Lines.sDx2Code, BL_Transaction_Lines.sDx2Description, "
                        + " BL_Transaction_Lines.sDx3Code, BL_Transaction_Lines.sDx3Description, BL_Transaction_Lines.sDx4Code, BL_Transaction_Lines.sDx4Description, "
                        + " BL_Transaction_Lines.sDx5Code, BL_Transaction_Lines.sDx5Description, BL_Transaction_Lines.sDx6Code, BL_Transaction_Lines.sDx6Description, "
                        + " BL_Transaction_Lines.sDx7Code, BL_Transaction_Lines.sDx7Description, BL_Transaction_Lines.sDx8Code, BL_Transaction_Lines.sDx8Description, "
                        + " BL_Transaction_Lines.sMod1Code, BL_Transaction_Lines.sMod1Description, BL_Transaction_Lines.sMod2Code,   BL_Transaction_Lines.sMod2Description, "
                        + " BL_Transaction_Lines.sMod3Code, BL_Transaction_Lines.sMod3Description,  BL_Transaction_Lines.sMod4Code, BL_Transaction_Lines.sMod4Description, "
                        + " BL_Transaction_Lines.dCharges, BL_Transaction_Lines.dTotal, BL_Transaction_Lines.dAllowed, BL_Transaction_Lines.nClinicID, BL_Transaction_MST.nPatientID, "
                        + " BL_Transaction_MST.nClaimNo, BL_Transaction_Lines.dAllowed - (SELECT SUM(dPaymentAmt) AS PaymentAmount FROM   BL_Transaction_Payment_DTL WITH (NOLOCK) "
                        + " WHERE  (nClinicID = BL_Transaction_Lines.nClinicID) AND (nPatientID = BL_Transaction_MST.nPatientID) AND (nTransactionID = BL_Transaction_Lines.nTransactionID) "
                        + " AND (nTransactionDetailID = BL_Transaction_Lines.nTransactionDetailID)) AS BalanceAmount "
                        + " FROM BL_Transaction_Lines WITH (NOLOCK) INNER JOIN  BL_Transaction_MST WITH (NOLOCK) ON BL_Transaction_Lines.nTransactionID = BL_Transaction_MST.nTransactionID  "
                        + " WHERE (BL_Transaction_Lines.dAllowed - (SELECT SUM(dPaymentAmt) AS PaymentAmount  FROM  BL_Transaction_Payment_DTL AS BL_Transaction_Payment_DTL_1 WITH (NOLOCK)  "
                        + " WHERE (nClinicID = BL_Transaction_Lines.nClinicID) AND (nPatientID = BL_Transaction_MST.nPatientID) AND (nTransactionID = BL_Transaction_Lines.nTransactionID) "
                        + " AND (nTransactionDetailID = BL_Transaction_Lines.nTransactionDetailID)) >= 0) AND (BL_Transaction_MST.nPatientID = " + PatientID + ") AND (BL_Transaction_Lines.nClinicID = " + _ClinicID + ") "
                        + " UNION "
                        + " SELECT BL_Transaction_Lines.nTransactionID, BL_Transaction_Lines.nTransactionDetailID, BL_Transaction_Lines.nTransactionLineNo, "
                        + " BL_Transaction_Lines.nFromDate, BL_Transaction_Lines.nToDate, BL_Transaction_Lines.sPOSCode, BL_Transaction_Lines.sPOSDescription, "
                        + " BL_Transaction_Lines.sTOSCode, BL_Transaction_Lines.sTOSDescription, BL_Transaction_Lines.sCPTCode, BL_Transaction_Lines.sCPTDescription,   "
                        + " BL_Transaction_Lines.sDx1Code, BL_Transaction_Lines.sDx1Description, BL_Transaction_Lines.sDx2Code, BL_Transaction_Lines.sDx2Description,   "
                        + " BL_Transaction_Lines.sDx3Code, BL_Transaction_Lines.sDx3Description, BL_Transaction_Lines.sDx4Code, BL_Transaction_Lines.sDx4Description,   "
                        + " BL_Transaction_Lines.sDx5Code, BL_Transaction_Lines.sDx5Description, BL_Transaction_Lines.sDx6Code, BL_Transaction_Lines.sDx6Description,   "
                        + " BL_Transaction_Lines.sDx7Code, BL_Transaction_Lines.sDx7Description, BL_Transaction_Lines.sDx8Code, BL_Transaction_Lines.sDx8Description,   "
                        + " BL_Transaction_Lines.sMod1Code, BL_Transaction_Lines.sMod1Description, BL_Transaction_Lines.sMod2Code,   BL_Transaction_Lines.sMod2Description, "
                        + " BL_Transaction_Lines.sMod3Code, BL_Transaction_Lines.sMod3Description,  BL_Transaction_Lines.sMod4Code, BL_Transaction_Lines.sMod4Description, "
                        + " BL_Transaction_Lines.dCharges, BL_Transaction_Lines.dTotal, BL_Transaction_Lines.dAllowed, BL_Transaction_Lines.nClinicID, BL_Transaction_MST.nPatientID, "
                        + " BL_Transaction_MST.nClaimNo, BL_Transaction_Lines.dAllowed AS BalanceAmount  "
                        + " FROM BL_Transaction_Lines WITH (NOLOCK) INNER JOIN  BL_Transaction_MST WITH (NOLOCK) ON BL_Transaction_Lines.nTransactionID = BL_Transaction_MST.nTransactionID  "
                        + " WHERE (BL_Transaction_MST.nTransactionID  NOT IN (SELECT nTransactionID FROM BL_Transaction_Payment_DTL WITH (NOLOCK) WHERE nPatientID = " + PatientID + " AND BL_Transaction_Lines.nClinicID = " + _ClinicID + ") "
                        + " AND BL_Transaction_MST.nPatientID = " + PatientID + " AND BL_Transaction_Lines.nClinicID = " + _ClinicID + ") "
                        + " ORDER BY BL_Transaction_Lines.nFromDate DESC ";

                oDB.Retrive_Query(strSQL, out dtBalance);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                return null;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return dtBalance;
        }

        //To Display Transactions On Dashboard
        public DataTable GetPatientTransactions(Int64 PatientId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _strSQL = "";
            DataTable dt = new DataTable();
            try
            {
                _strSQL = "SELECT ISNULL(BL_Transaction_MST.nClaimNo,0) AS nClaimNo, ISNULL(BL_Transaction_Lines.sCPTCode,'') AS sCPTCode, ISNULL(BL_Transaction_Lines.sCPTDescription,'') AS sCPTDescription, ISNULL(BL_Transaction_Lines.sDx1Code,'') AS sDx1Code, "
                        + " ISNULL(BL_Transaction_Lines.sDx1Description,'') AS sDx1Description, ISNULL(BL_Transaction_Lines.sDx2Code,'') AS sDx2Code, ISNULL(BL_Transaction_Lines.sDx2Description,'') AS sDx2Description, ISNULL(BL_Transaction_Lines.sDx3Code,'') AS sDx3Code, "
                        + " ISNULL(BL_Transaction_Lines.sDx3Description,'') AS sDx3Description, ISNULL(BL_Transaction_Lines.sDx4Code,'') AS sDx4Code, ISNULL(BL_Transaction_Lines.sDx4Description,'') AS sDx4Description, ISNULL(BL_Transaction_Lines.sMod1Code,'') AS sMod1Code,"
                        + " ISNULL(BL_Transaction_Lines.sMod1Description,'') AS sMod1Description, ISNULL(BL_Transaction_Lines.sMod2Code,'') AS sMod2Code, ISNULL(BL_Transaction_Lines.sMod2Description,'') AS sMod2Description, ISNULL(BL_Transaction_Lines.dCharges,0) AS dCharges, "
                        + " ISNULL(BL_Transaction_Lines.dTotal,0) AS dTotal, ISNULL(BL_Transaction_Lines.dUnit,0) AS dUnit,ISNULL(BL_Transaction_Lines.nFromDate,0) AS nFromDate, "
                        + " ISNULL(BL_Transaction_Lines.nTransactionLineStatus,'') AS nTransactionLineStatus,ISNULL(BL_Transaction_MST.nTransactionStatusID,0) AS nTransactionStatusID, "
                        + " ISNULL(BL_Transaction_MST.sState,'') AS sState, "
                        + " ISNULL(BL_Transaction_MST.nHopitalizationDateFrom,0) AS nHopitalizationDateFrom, "
                        + " ISNULL(BL_Transaction_MST.nHopitalizationDateTo,0) AS nHopitalizationDateTo, "
                        + " ISNULL(BL_Transaction_MST.bOutSideLab,0) AS bOutSideLab, "
                        + " ISNULL(BL_Transaction_MST.dOutSideLabCharges,0) AS dOutSideLabCharges, "
                        + " ISNULL(bAutoClaim,0) AS bAutoClaim, "
                        + " ISNULL(nAccidentDate,0) AS nAccidentDate, "
                        + " ISNULL(bWorkersComp,0) AS bWorkersComp "
                        + " FROM BL_Transaction_MST WITH (NOLOCK) INNER JOIN BL_Transaction_Lines WITH (NOLOCK) ON BL_Transaction_MST.nTransactionID = BL_Transaction_Lines.nTransactionID"
                        
                        //Code Commented and added by Debasish on 9th Jun 2010
                    //+ " WHERE (BL_Transaction_MST.nPatientID = " + PatientId + ") AND (BL_Transaction_MST.nClinicID = " + _ClinicID + ")"
                            + " WHERE (BL_Transaction_MST.nPatientID = " + PatientId + ") AND (BL_Transaction_MST.nClinicID = " + _ClinicID + ") AND  ISNULL(BL_Transaction_MST.bIsVoid,0) <> 1"
                    //***

                        + " ORDER BY BL_Transaction_Lines.nFromDate Desc";
                oDB.Connect(false);
                oDB.Retrive_Query(_strSQL, out dt);
            }
            catch (gloDatabaseLayer.DBException ex)
            {
                ex.ERROR_Log(ex.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                oDB.Disconnect();
                oDB.Dispose();
            }
            return dt;
        }

        public bool IsServiceDatePresent(Int64 PatientId, string ServiceDate)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object oResult = new object();
            bool _IsPresent = false;
            try
            {
                oDB.Connect(false);
                _sqlQuery = "select ISNULL(Count(dtDate),0) AS IsPresent from PatientTracking WITH (NOLOCK) where nPatientID = " + PatientId + " and dtDate = '" + ServiceDate + "'";
                oResult = oDB.ExecuteScalar_Query(_sqlQuery);
                if (oResult != null && Convert.ToInt64(oResult) > 0)
                {
                    _IsPresent = true;
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oResult != null) { oResult = null; }
            }
            return _IsPresent;
        }

        public Int64 GetPMPatientID(Int64 EMRPatientId, Int64 ClinicId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object _ReturnValue = null;
            string _sqlQuery = "";
            Int64 _PMPatientId = 0;

            try
            {
                oDB.Connect(false);
                _sqlQuery = " SELECT ISNULL(nPatientID,0) AS nPatientID " +
                            " FROM Patient WITH (NOLOCK) " +
                            " WHERE nEMRPatientID = " + EMRPatientId + " AND nClinicID = " + ClinicId + "";
                _ReturnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                if (_ReturnValue != null && _ReturnValue != DBNull.Value && Convert.ToString(_ReturnValue) != "")
                {
                    _PMPatientId = Convert.ToInt64(_ReturnValue);
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB.CheckConnection() == true) { oDB.Disconnect(); }
                if (oDB != null) { oDB.Dispose(); }
                if (_ReturnValue != null) { _ReturnValue = null; }
            }
            return _PMPatientId;
        }

        public bool AssociateEMRPatient(Int64 gloPMPatientID, Int64 gloEMRPatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            int _result = 0;
            bool _Return = false;
            try
            {
                if (gloPMPatientID > 0 && gloEMRPatientID > 0)
                {
                    oDB.Connect(false);
                    _sqlQuery = "UPDATE Patient WITH (READPAST) SET nEMRPatientID = '" + gloEMRPatientID + "' WHERE nPatientID = " + gloPMPatientID + " ";
                    _result = oDB.Execute_Query(_sqlQuery);
                    if (_result > 0)
                    {
                        _Return = true;
                    }
                    oDB.Disconnect();
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _Return = false;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Dispose();
                }
            }
            return _Return;
        }

        public void UpdateRecordStatus(Int64 TransactionMSTId, Int64 nClaimNo, bool LockStatus)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            try
            {
                #region "Old Logic"
                //if (OpenTrue_CloseFalse)
                //{
                //    //_sqlQuery = " UPDATE BL_Transaction_MST SET bIsOpened = '" + OpenTrue_CloseFalse + "' , sMachineID = '" + _MachineId + "', " +
                //    //" nUserID = " + UserId + " where " +
                //    //" nTransactionID = " + TransactionId + " AND nClinicID = " + this.ClinicID + " ";
                //    _sqlQuery = " UPDATE BL_Transaction_MST SET bIsOpened = '" + OpenTrue_CloseFalse + "' , sMachineID = '" + _MachineId + "' " +
                //    " where " +
                //    " nTransactionID = " + TransactionId + " AND nClinicID = " + this.ClinicID + " ";
                //}
                //else
                //{
                //    //_sqlQuery = " UPDATE BL_Transaction_MST SET bIsOpened = '" + OpenTrue_CloseFalse + "',sMachineID = '', " +
                //    //    " nUserID = " + UserId + " where " +
                //    //    " nTransactionID = " + TransactionId + " AND UPPER(sMachineID) =  '"+_MachineId.ToUpper()+"'  AND nClinicID = " + this.ClinicID + " ";
                //    _sqlQuery = " UPDATE BL_Transaction_MST SET bIsOpened = '" + OpenTrue_CloseFalse + "',sMachineID = '' " +
                //        " where " +
                //        " nTransactionID = " + TransactionId + " AND UPPER(sMachineID) =  '" + _MachineId.ToUpper() + "'  AND nClinicID = " + this.ClinicID + " ";
                //}
              #endregion
                //oDBParameters.Add("@nID", nLockStatusID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@nTransactionMasterID", TransactionMSTId, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDBParameters.Add("@nClaimNo", nClaimNo, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                //oDBParameters.Add("@bIsLocked", LockStatus, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                oDBParameters.Add("@sMachineName",Environment.MachineName, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                oDBParameters.Add("@sUserName", gloSettings.AppSettings.UserName, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                oDBParameters.Add("@nUserID", Convert.ToInt64(gloSettings.AppSettings.UserID), System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                oDB.Connect(false);
                oDB.Execute("BL_LockClaims", oDBParameters);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { 
                dbEx.ERROR_Log(dbEx.ToString()); 
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); 
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Dispose();
                }
                if (oDBParameters != null)
                {
                    oDBParameters.Dispose();
                }
            }
        }
       
        public bool IsRecordOpen(Int64 TransactionId, out string MachineName, out Int64 UserId)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string _sqlQuery = "";
            DataTable _dt = null;
            bool _isRecordOpen = false;
            string _MachineId = "";
            string _RecordMachineId = "";
            Int64 _RecordUserId = 0;

            try
            {
              
                _MachineId = Environment.MachineName;
                _sqlQuery = "SELECT ISNULL(bIsLocked,0) AS bIsOpened , ISNULL(sMachineName,'') AS sMachineID,ISNULL(nUserID,0) AS nUserID " +
                            " FROM BL_Transaction_MST_Locks WITH (NOLOCK) " +
                            " WHERE nTransactionMasterID = " + TransactionId + " AND sMachineName <> '" + _MachineId + "' ";

                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dt);
                oDB.Disconnect();


                if (_dt != null && _dt.Rows.Count > 0)
                {
                    _isRecordOpen = Convert.ToBoolean(_dt.Rows[0]["bIsOpened"]);
                    _RecordMachineId = Convert.ToString(_dt.Rows[0]["sMachineID"]);
                    _RecordUserId = Convert.ToInt64(_dt.Rows[0]["nUserID"]);
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            { 
                dbEx.ERROR_Log(dbEx.ToString()); 
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); 
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_dt != null) { _dt.Dispose(); }
            }

            MachineName = _RecordMachineId;
            UserId = _RecordUserId;
            return _isRecordOpen;
        }


      

        public bool IsDayClosed(DateTime CloseDate)
        {
            bool _result = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            object value = new object();
            string _strSQL = "";
            try
            {
                oDB.Connect(false);
                _strSQL = "select count(nCloseDayID) as nCloseDayID from BL_CloseDays WITH (NOLOCK) where nCloseDayDate>=" + gloDateMaster.gloDate.DateAsNumber(CloseDate.ToString()) + " and nClinicID=" + _ClinicID + "";
                value = oDB.ExecuteScalar_Query(_strSQL);
                if (value != null)
                {
                    if (Convert.ToInt64(value) > 0)
                    {
                        _result = true;
                    }
                }
                oDB.Disconnect();

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                _result = false;
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                value = null;
            }
            return _result;
        }

        public bool IsClaimVoided(Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            bool _isVoidedClaim = false;
            Object _retVal = null;

            try
            {
                if (ClaimNo > 0)
                {
                    _sqlQuery = "SELECT ISNULL(bIsVoid,0) AS IsVoid FROM BL_Transaction_MST WITH (NOLOCK) WHERE nClaimNo = " + ClaimNo + " AND nClinicID = " + _ClinicID + "";
                    oDB.Connect(false);
                    _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                    {
                        _isVoidedClaim = Convert.ToBoolean(_retVal);
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }

            return _isVoidedClaim;

        }

        /// <author>
        /// Pankaj Bedse on 17-Mar-2010
        /// </author>
        /// <summary>
        /// Check whether given SubClaim is Voided or not.
        /// </summary>
        /// <param name="SubClaimNo"></param>
        /// <returns></returns>
        public bool IsSubClaimVoided(string SubClaimNo)
        {
            string _claimNo = string.Empty;
            string _subClaimNo = string.Empty;

            string[] _claim = SubClaimNo.Split('-');
            if (_claim.Length.Equals(2))
            {
                _claimNo = Convert.ToString(_claim[0]);
                _subClaimNo = Convert.ToString(_claim[1]);
            }

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            bool _isVoidedClaim = false;
            Object _retVal = null;

            try
            {
                if (!_claimNo.Equals(string.Empty) && (!_subClaimNo.Equals(string.Empty)))
                {
                    _sqlQuery = "SELECT ISNULL(bIsVoid,0) FROM dbo.BL_Transaction_Claim_MST WITH (NOLOCK) WHERE nClaimNo = " + _claimNo + " AND nSubClaimNo='" + _subClaimNo + "' AND nClinicID = " + _ClinicID + "";
                    oDB.Connect(false);
                    _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                    {
                        _isVoidedClaim = Convert.ToBoolean(_retVal);
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }

            return _isVoidedClaim;

        }

        public bool IsClaimInBatch(Int64 ClaimNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            bool _IsClaimInBatch = false;
            Object _retVal = null;
            Int64 _MstTransactionId = 0;

            try
            {
                if (ClaimNo > 0)
                {
                    _MstTransactionId = GetBillingTransactionID(ClaimNo);

                    _sqlQuery = " SELECT ISNULL(COUNT(B.nTransactionMasterID),0) " +
                    " FROM BL_Transaction_Batch AS A WITH (NOLOCK) INNER JOIN BL_Transaction_Batch_DTL AS B WITH (NOLOCK) " +
                    " ON A.nBatchID = B.nBatchID WHERE B.nTransactionMasterID = " + _MstTransactionId + " ";

                    oDB.Connect(false);
                    _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                    {
                        _IsClaimInBatch = Convert.ToBoolean(_retVal);
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }

            return _IsClaimInBatch;

        }

        /// <author>
        /// Pankaj Bedse on 17-Mar-2010
        /// </author>
        /// <summary>
        /// Chech whether given SubClaim is Batched or not.
        /// </summary>
        /// <param name="SubClaimNo"></param>
        /// <returns></returns>
        public bool IsSubClaimInBatch(string SubClaimNo)
        {
            string _claimNo = string.Empty;
            string _subClaimNo = string.Empty;

            string[] _claim = SubClaimNo.Split('-');
            if (_claim.Length.Equals(2))
            {
                _claimNo = Convert.ToString(_claim[0]);
                _subClaimNo = Convert.ToString(_claim[1]);
            }

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            bool _IsSubClaimInBatch = false;
            Object _retVal = null;
            try
            {
                if (!_claimNo.Equals(string.Empty) && (!_subClaimNo.Equals(string.Empty)))
                {
                    _sqlQuery = " SELECT ISNULL(COUNT(BL_Transaction_Batch_DTL.nTransactionMasterID),0) FROM dbo.BL_Transaction_Batch_DTL WITH (NOLOCK) " +
                                " INNER JOIN BL_Transaction_Claim_MST WITH (NOLOCK)" +
                                " ON BL_Transaction_Batch_DTL.nTransactionID = BL_Transaction_Claim_MST.nTransactionID " + 
                                " AND BL_Transaction_Batch_DTL.nTransactionMasterID = BL_Transaction_Claim_MST.nTransactionMasterID " +
                                " WHERE BL_Transaction_Claim_MST.nClaimNo=" + _claimNo + " AND BL_Transaction_Claim_MST.nSubClaimNo ='" + _subClaimNo + "'";

                    oDB.Connect(false);
                    _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                    {
                        _IsSubClaimInBatch = Convert.ToBoolean(_retVal);
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }

            return _IsSubClaimInBatch;
        }

        public PayerMode ClaimResposiblility(Int64 ClaimNo)
        {
            PayerMode _result = PayerMode.None;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _retVal = null;

            try
            {
                if (ClaimNo > 0)
                {
                    _sqlQuery = "SELECT isnull(nNextPartyType,0) as nNextPartyType from BL_EOB_NextAction WITH (NOLOCK) WHERE nClaimNo = " + ClaimNo + "";
                    oDB.Connect(false);
                    _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                    {
                        if (PayerMode.Self.GetHashCode() == Convert.ToInt16(_retVal))
                        {
                            _result = PayerMode.Self;
                        }
                        else if (PayerMode.Insurance.GetHashCode() == Convert.ToInt16(_retVal))
                        {
                            _result = PayerMode.Insurance;
                        }
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }

            return _result;
        }

        #region "Create Claim Batch"
        //Mukesh
        public Int64 CreateClaimBatch(Transaction oTransaction)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            //gloBilling ogloBilling = new gloBilling(_databaseconnectionstring, "");
            String _BatchName = "";
            string _BatchPrefix = String.Empty;
            Int64 _claimNo = 0;
            Int64 _tranId = 0;
            Int64 _patientId = 0;
            Int64 _BatchId = 0;
         //   Int64 _BatchNo = 0;
         //   Int64 _Prefix = 0;
         //   Int64 _ClearingHouseId = 0;
            Int64 _BatchDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
            object _retVal = null;
            String _sqlQuery = "";
            try
            {
                oDB.Connect(false);

                _sqlQuery = " SELECT nBatchID FROM BL_Transaction_Batch_DTL WITH (NOLOCK) " +
                                  "  WHERE nTransactionMasterID= " + oTransaction.TransactionMasterID +
                                  "  and nTransactionID= " + oTransaction.TransactionID;

                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);

                if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                {
                    if (Convert.ToInt64(_retVal) > 0)
                    {
                        _BatchId = Convert.ToInt64(_retVal);
                    }
                }

                oDB.Disconnect();


                if (_BatchId == 0)
                {
                    //_BatchId = ogloBilling.AddModifyBatch(_BatchId, _BatchName, _BatchDate, _BatchNo, BatchType.Batch, 0, 0, _Prefix, this.ClinicID);
                    _BatchPrefix = "Batch-" + DateTime.Now.ToString("yyyyMMMdd") + "_";
                    _BatchName = GetBatchName(_BatchPrefix);
                    //_BatchId = AddModifyBatch(_BatchId, _BatchName, _BatchDate, _BatchNo, BatchType.Batch, 0, 0, _Prefix, _ClearingHouseId, "", "", _UserId, _UserName, this.ClinicID);


                    if (_BatchId > 0)
                    {


                        _tranId = oTransaction.TransactionID;
                        _patientId = oTransaction.PatientID;
                        _claimNo = oTransaction.ClaimNo;
                        //_statusdate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                        //_statustime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

                        //_tranIds += _tranId.ToString() + ",";
                        //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Batch);



                        //_statusId = ogloBilling.UpdateTransactionStatus(_patientId, 0, _BatchId, _BatchName, _BatchDate, BatchType.Batch.GetHashCode(), _BatchNo, _tranId, _claimNo, 0, 0, TransactionStatus.Batch, _statusdate, _statustime, "", this.ClinicID, 0, gloPatient.TypeOfBilling.None);
                        //ogloBilling.UpdateCurrentStatus(_tranId, TransactionStatus.Batch, _statusId);
                        UpdateBatchCounter(_BatchId, 1, this.ClinicID);

                        //MaheshB 20091201 Move this to Billing Class.
                        Int64 _nTransactionMasterID = 0;

                        Int64 _nTransactionID = 0;
                      //  Int64 _nTransactionDetailID = 0;
                      //  Int64 _nTransactionLineNo = 0;
                        //Int64 nClinicID;

                        _nTransactionMasterID = oTransaction.TransactionMasterID;
                        _nTransactionID = oTransaction.TransactionID;
                        AddModifyBatchDetail(_BatchId, _claimNo, _nTransactionMasterID, _nTransactionID, _ClinicID);
                        UpdateTransactionStatus(_tranId, TransactionStatus.Batch);

                        _tranId = 0;
                        _patientId = 0;
                        _claimNo = 0;
                        //_statusdate = 0;
                        //_statustime = 0;
                        //_statusId = 0;

                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _BatchId = 0;
            }
            finally
            {
                //ogloBilling.Dispose();
            }
            return _BatchId;

        }

        private string GetBatchName(string BatchPrefix)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _retVal = null;
            string _batchName = "";
          //  int _batchCount = 0;

            try
            {
                oDB.Connect(false);

                _sqlQuery = " SELECT ISNULL(MAX(convert(numeric,substring(sBatchName," + Convert.ToInt32(BatchPrefix.Length + 1) + ",len(sBatchName)- " + BatchPrefix.Length + "))),0) + 1   AS BatchName " +
                " FROM BL_Transaction_Batch WITH (NOLOCK) " +
                " WHERE  " +
                " substring(sBatchName,1," + BatchPrefix.Length + ") = '" + BatchPrefix + "'  " +
                " AND  isnumeric(substring(sBatchName, " + Convert.ToInt32(BatchPrefix.Length + 1) + ",len(sBatchName)- " + BatchPrefix.Length + ")) > 0 ";

                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);

                if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                {
                    _batchName = BatchPrefix + Convert.ToInt32(_retVal);
                }

                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }
            return _batchName;
        }
        public static string GetAutogeneratedClaimNo(string sServerName, string sDatabaseName)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            Object _retVal = new Object();

            try
            {
                oDB.Connect(false);
                _sqlQuery = " SELECT [dbo].[GET_AUTO_CLAIMNO]('" + sServerName + "','" + sDatabaseName + "')";

                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);

                oDB.Disconnect();
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.Message, _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
            }

            return Convert.ToString(_retVal);
        }
        private void AddModifyBatchDetail(Int64 _nBatchID, Int64 _claimNo, Int64 nTransactionMasterID, Int64 nTransactionID, Int64 nClinicID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();
         //   Object retVal = null;
         //   Int64 _BatchId = 0;

            try
            {

                oDB.Connect(false);

                oParameters.Add("@nBatchID", _nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nclaimNo", _claimNo, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionMasterID", nTransactionMasterID, ParameterDirection.Input, SqlDbType.BigInt);
                //oParameters.Add("@nTransactionMasterDetailID", nTransactionMasterDetailID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTransactionID", nTransactionID, ParameterDirection.Input, SqlDbType.BigInt);
                // oParameters.Add("@nStatus", TransactionStatus.Batch.GetHashCode(), ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClinicID", nClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                int Val = oDB.Execute("BL_INUP_TransactionBatch_DTL", oParameters);

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }



        }

        public void UpdateTransactionStatus(Int64 _nTransactionID, TransactionStatus _oStatus)
        {
            gloDatabaseLayer.DBLayer ODB = null;
            try
            {
                ODB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                ODB.Connect(false);
                string _strquery = "Update BL_Transaction_Claim_MST WITH (READPAST) set nStatus='" + _oStatus.GetHashCode() + "' where nTransactionID='" + _nTransactionID + "'";
                ODB.Execute_Query(_strquery);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (ODB != null)
                {
                    ODB.Disconnect();
                    ODB.Dispose();
                }
            }
        }
        #endregion


        //public bool IsRecordOpen(Int64 TransactionId)
        //{
        //    gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
        //    string _sqlQuery = "";
        //    Object retVal = null;
        //    bool _isRecordOpen = false;
        //    string _MachineId = "";

        //    try
        //    {
        //        oDB.Connect(false);
        //        _MachineId = Environment.MachineName;
        //        _sqlQuery = "SELECT ISNULL(bIsOpened,'false') AS bIsOpened FROM BL_Transaction_MST " +
        //        " WHERE nTransactionID = " + TransactionId + " AND UPPER(sMachineID) <> '" + _MachineId.ToUpper() + "' AND nClinicID = " + this.ClinicID + " ";
        //        retVal = oDB.ExecuteScalar_Query(_sqlQuery);
        //        oDB.Disconnect();
        //        if (retVal != null && Convert.ToString(retVal).Trim() != "") { _isRecordOpen = Convert.ToBoolean(retVal); }
        //    }
        //    catch (gloDatabaseLayer.DBException dbEx)
        //    { dbEx.ERROR_Log(dbEx.ToString()); }
        //    catch (Exception ex)
        //    { gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true); }
        //    finally
        //    { if (oDB != null) { oDB.Dispose(); } }

        //    return _isRecordOpen;
        //}


        #region "UB04 "
        public bool IsenableUB04(Int64 ClinicID)
        {
            bool _Isenable = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
            object oUB04Enable = new object();

            try
            {
                oDB.Connect(false);

                //nTransactionID, nTransactionDetailID, nTransactionLineNo, nStatusDate, nStatusTime, sStatusNote, nClinicID, nStatusID
                if (ClinicID > 0)
                {
                    _sqlQuery = " select sSettingsValue from Settings WITH (NOLOCK) where  sSettingsName='UB04_EnableBilling' and nClinicID=" + ClinicID + "";

                    oUB04Enable = oDB.ExecuteScalar_Query(_sqlQuery);
                    if (oUB04Enable != null && Convert.ToString(oUB04Enable) != "")
                    {
                        if (Convert.ToString(oUB04Enable).ToUpper() == "TRUE")
                            _Isenable = true;
                        else
                            _Isenable = false;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _Isenable = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }

            }
            return _Isenable;

        }
        #endregion

        public bool IsMultipleClearingHouse(Int64 ClinicID)
        {
            bool _Isenable = false;
            gloDatabaseLayer.DBLayer oDB = null;
            string _sqlQuery = "";
            object oMultipleClearingHouse = new object();

            try
            {
                oDB=new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                _sqlQuery = " select sSettingsValue from Settings WITH (NOLOCK) where  sSettingsName='ISMULTIPLECLEARINGHOUSE' and nClinicID=" + ClinicID + "";

                oMultipleClearingHouse = oDB.ExecuteScalar_Query(_sqlQuery);
                if (oMultipleClearingHouse != null && Convert.ToString(oMultipleClearingHouse) != "")
                {
                    if (Convert.ToString(oMultipleClearingHouse).ToUpper() == "1")
                        _Isenable = true;
                    else
                        _Isenable = false;
                }
                
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _Isenable = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }

            }
            return _Isenable;

        }

        internal void GetExpandedClaimLimits()
        {
            throw new NotImplementedException();
        }


        public void SetClaimNumbers()
        {
            MainClaimNumber = 0;
            SubClaimNumber = string.Empty;


            string[] _claim = ClaimNumber.Split('-');

            if (_claim.Length.Equals(2))
            {
                MainClaimNumber = Convert.ToInt64(_claim[0]);
                SubClaimNumber = Convert.ToString(_claim[1]);
            }
            else if (_claim.Length.Equals(1) && _claim[0] != "")
            { MainClaimNumber = Convert.ToInt64(_claim[0]); }
        }

        private bool IsValidClaim()
        {
            bool _isValidClaim = true;

            //if (ClaimDetails.IsClaimExist)
            //{                
                MessageBox.Show("Claim selected is invalid or does not exist", AppSettings.MessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                _isValidClaim = false;
           // }
            return _isValidClaim;
        }

        public DataTable GetServiceAuthExceptionCodes()
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataTable _dtServiceAuthExceptionCodes = new DataTable();
            string strQuery = "";

            try
            {
                oDB.Connect(false);
                strQuery = "SELECT nServiceAuthExcepID,sServiceAuthExceCode,sServiceAuthExceCode + ' - ' + sServiceAuthExcepDesc as sServiceAuthExcepDesc ,bIsActive "
                           + " FROM BL_ServiceAuthExceptionCodes_Mst WITH (NOLOCK) WHERE bIsActive = 1 AND nClinicID = " + _ClinicID + " order by sServiceAuthExceCode asc";

                oDB.Retrive_Query(strQuery, out _dtServiceAuthExceptionCodes);

                if (_dtServiceAuthExceptionCodes != null && _dtServiceAuthExceptionCodes.Rows.Count > 0)
                {
                    return _dtServiceAuthExceptionCodes;
                }
                oDB.Disconnect();
                return null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;

            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

        }

        #region " Auto batching printed claims - 31Dec2013 Sagar G"

        public Int64 AutoBatchPrintedClaims(Int64 ClaimNo, Int64 TransactionMasterId, Int64 TransactionId, BatchBillingMethod BillingMethod,Int64 ContactId,string BusinessCenterCode)
        {
            Int64 _generatedBatchId = 0;
            TransactionStatus _transactionStatus = TransactionStatus.None;
            ClaimStatus _claimStatus = ClaimStatus.None;
            BatchDetails _newBatchDetails = null;
            gloCMSEDI.HCFA1500 oHCFA1500 = new gloCMSEDI.HCFA1500(_databaseconnectionstring);
            bool _IsClaimGenerated = false;
            try
            {
                if (TransactionMasterId > 0 && TransactionId > 0)
                {
                    _transactionStatus = GetTransactionStatus(TransactionMasterId, TransactionId);
                    _claimStatus = GetClaimStatus(TransactionMasterId, TransactionId);
                    if (_claimStatus != ClaimStatus.Close)
                    {
                        switch (_transactionStatus)
                        {
                            case TransactionStatus.Queue:
                                {

                                    _newBatchDetails = GeneratedBatchDetails(TransactionMasterId, TransactionId, BusinessCenterCode);
                                    if (_newBatchDetails != null && _newBatchDetails.BatchName.Trim() != "")
                                    {
                                        _generatedBatchId = AddModifyBatch(_generatedBatchId, _newBatchDetails.BatchName, _newBatchDetails.BatchDate, _newBatchDetails.BatchNo, BatchType.Batch, 0, 0, _newBatchDetails.Prefix, _newBatchDetails.ClearingHouseId, _newBatchDetails.ClearingHouseCode, _newBatchDetails.ClearingHouseName, _newBatchDetails.UserId, _newBatchDetails.UserName, _newBatchDetails.ClinicId, _newBatchDetails.Billingtype, Convert.ToInt64(BillingMethod.GetHashCode()));

                                        if (_generatedBatchId > 0)
                                        {
                                            UpdateBatchCounter(_generatedBatchId, 1, this.ClinicID);
                                            AddModifyBatchDetail(_generatedBatchId, ClaimNo, TransactionMasterId, TransactionId, this.ClinicID);
                                            UpdateTransactionStatus(TransactionId, TransactionStatus.Batch);
                                            CreateFollowupScheduleForAutoBatch(TransactionMasterId, TransactionId, ContactId);

                                            _IsClaimGenerated = oHCFA1500.SendPaperClaim(_generatedBatchId, Convert.ToInt64(gloPMContacts.TypeOfBilling.Paper), Convert.ToInt64(TransactionStatus.SendToClearingHouse));

                                            if (_IsClaimGenerated == true && _generatedBatchId != 0)
                                            {
                                                AddBacthCrossWalk(_generatedBatchId);
                                                UpdateTransactionStatus(TransactionId, TransactionStatus.SendToClaimManager);
                                                UpdateBatchTotal(_generatedBatchId, "Send");
                                            }
                                        }
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }

                }

            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                _generatedBatchId = 0;
                dbEx.ERROR_Log(dbEx.ToString()); 
            }
            catch (Exception ex)
            {
                _generatedBatchId = 0;
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error); 
            }
            finally
            { 
            
            }

            return _generatedBatchId;
        }

        private void UpdateBatchTotal(Int64 _nBatchID, String strSend)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = new gloDatabaseLayer.DBParameters();

            try
            {
                oDB.Connect(false);
                oParameters.Add("@nBatchID", _nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sendUserID", this._UserId, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@sendUserName",this._UserName , ParameterDirection.Input, SqlDbType.VarChar);
                oParameters.Add("@sendstr", strSend, ParameterDirection.Input, SqlDbType.VarChar);
                oDB.Execute("BL_UPDATE_Batch_SendCLAIM", oParameters);

                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (oParameters != null) { oParameters.Dispose(); }
            }

        }
        private void AddBacthCrossWalk(Int64 nBatchID)
        {
            gloDatabaseLayer.DBParameters oDBParameters = new gloDatabaseLayer.DBParameters();
            gloDatabaseLayer.DBLayer oDB = null;
            try
            {
                //gloPM5070
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                oDBParameters.Clear();
                oDBParameters.Add("@BatchID", nBatchID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Execute("BL_IN_Transaction_Batch_CPTMapping", oDBParameters);

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                if (oDBParameters != null) oDBParameters.Dispose();
            }
        }
        public TransactionStatus GetTransactionStatus(Int64 TransactionMasterId, Int64 TransactionId)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            TransactionStatus _claimTransactionStatus = TransactionStatus.None;
            string _sqlQuery = "";
            Object _returnValue = null;

            try
            {
                if (TransactionMasterId > 0 && TransactionId > 0)
                {
                    _sqlQuery = "SELECT ISNULL(nStatus,0) FROM BL_Transaction_Claim_MST WITH(NOLOCK) WHERE nTransactionMasterID = " + TransactionMasterId + " AND nTransactionID = " + TransactionId + "";
                    
                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _returnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                     Int16 _parseValue = 0;
                     if (Int16.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                     {
                         _claimTransactionStatus = ((TransactionStatus)_parseValue);
                     }
                    
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                _claimTransactionStatus = TransactionStatus.None;
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                _claimTransactionStatus = TransactionStatus.None;
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _claimTransactionStatus;
        }

        public gloGlobal.gloICD.CodeRevision GetTransactionICDVersion(Int64 TransactionMasterId, Int64 TransactionId)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloGlobal.gloICD.CodeRevision _claimTransactionICDVersion = gloGlobal.gloICD.CodeRevision.ICD9;
            string _sqlQuery = "";
            Object _returnValue = null;

            try
            {
                if (TransactionMasterId > 0 && TransactionId > 0)
                {
                    _sqlQuery = "SELECT ISNULL(nICDRevision,9) FROM BL_Transaction_Claim_MST WITH(NOLOCK) WHERE nTransactionMasterID = " + TransactionMasterId + " AND nTransactionID = " + TransactionId + "";

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _returnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    Int16 _parseValue = 0;
                    if (Int16.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                    {
                        _claimTransactionICDVersion = ((gloGlobal.gloICD.CodeRevision)_parseValue);
                    }

                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                _claimTransactionICDVersion = gloGlobal.gloICD.CodeRevision.ICD9;
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                _claimTransactionICDVersion = gloGlobal.gloICD.CodeRevision.ICD9;
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _claimTransactionICDVersion;
        }

        public DateTime GetClaimMinimumDOS(Int64 TransactionMasterId, Int64 TransactionId)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            DateTime _ClaimMinimumDOS = DateTime.MinValue; 
            string _sqlQuery = "";
            Object _returnValue = null;

            try
            {
                if (TransactionMasterId > 0 && TransactionId > 0)
                {
                    _sqlQuery = "select dbo.Get_MinimumDOS("+TransactionId+","+TransactionMasterId+")";

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _returnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    DateTime _parseValue = DateTime.MinValue;
                    if (DateTime.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                    {
                        _ClaimMinimumDOS = ((DateTime)_parseValue);
                    }

                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                _ClaimMinimumDOS = DateTime.MinValue;
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                _ClaimMinimumDOS = DateTime.MinValue;
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _ClaimMinimumDOS;
        }

        public Boolean IsClaimorinsuranceonHold(Int64 TransactionId, Int64 MstTransactionId, Int64 nContactID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            object _returnValue = null;
            Boolean _IsClaimorinsuranceonHold = false;

            try
            {
                if (TransactionId > 0 && MstTransactionId > 0)
                {

                    oParameters = new gloDatabaseLayer.DBParameters();
                    oParameters.Add("@nTransactionID", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@nTransactionMasterID", MstTransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@ContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@bIsHold", false, ParameterDirection.InputOutput, SqlDbType.Bit);

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    oDB.Execute("BL_IsClaimHold", oParameters, out _returnValue);
                    oDB.Disconnect();

                    Boolean _parseValue = false;
                    if (Boolean.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                    {
                        _IsClaimorinsuranceonHold = _parseValue;
                    }
                }
            }
            catch (Exception ex)
            {
                _IsClaimorinsuranceonHold = false;
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _IsClaimorinsuranceonHold;
        }
        public ClaimStatus GetClaimStatus(Int64 TransactionMasterId, Int64 TransactionId)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            ClaimStatus _claimTransactionStatus = ClaimStatus.None;
            string _sqlQuery = "";
            Object _returnValue = null;

            try
            {
                if (TransactionMasterId > 0 && TransactionId > 0)
                {
                    _sqlQuery = "SELECT ISNULL(nClaimStatus,0) FROM BL_Transaction_Claim_MST WITH(NOLOCK) WHERE nTransactionMasterID = " + TransactionMasterId + " AND nTransactionID = " + TransactionId + "";

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _returnValue = oDB.ExecuteScalar_Query(_sqlQuery);
                    oDB.Disconnect();

                    Int16 _parseValue = 0;
                    if (Int16.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                    {
                        _claimTransactionStatus = ((ClaimStatus)_parseValue);
                    }

                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                _claimTransactionStatus = ClaimStatus.None;
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                _claimTransactionStatus = ClaimStatus.None;
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _claimTransactionStatus;
        }

        private Int16 GetBillingType(Int64 TransactionId, Int64 MstTransactionId)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            object _returnValue=null;
            Int16 _billingType = 0;

            try
            {
                if (TransactionId > 0 && MstTransactionId > 0)
                {

                    oParameters = new gloDatabaseLayer.DBParameters();
                    oParameters.Add("@nTransactionId", TransactionId, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@nTransactionMstId", MstTransactionId, ParameterDirection.Input, SqlDbType.BigInt);

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _returnValue = oDB.ExecuteScalar("BL_Get_BillingType", oParameters);
                    oDB.Disconnect();

                    Int16 _parseValue = 0;
                    if (Int16.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                    {
                        _billingType = _parseValue;
                    }
                }
            }
            catch (Exception ex)
            {
                _billingType = 0;
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _billingType;
        }
        
        public Int16 GetInsuranceBillingMethod(Int64 nContactID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            object _returnValue = null;
            Int16 _billingMethod = 0;

            try
            {
                if (nContactID > 0)
                {
                    oParameters = new gloDatabaseLayer.DBParameters();
                    oParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);

                    oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                    oDB.Connect(false);
                    _returnValue = oDB.ExecuteScalar("BL_Get_InsuranceBillingMethod", oParameters);
                    oDB.Disconnect();

                    Int16 _parseValue = 0;
                    if (Int16.TryParse(Convert.ToString(_returnValue), out _parseValue) == true)
                    {
                        _billingMethod = _parseValue;
                    }
                }
            }
            catch (Exception ex)
            {
                _billingMethod = 0;
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); oDB = null; }
                if (_returnValue != null) { _returnValue = null; }
            }

            return _billingMethod;
        }
        private BatchDetails GeneratedBatchDetails(Int64 TransactionMasterId, Int64 TransactionId,string BusinessCenterCode="")
        {
            BatchDetails _batchDetails = null;

            try
            {
                _batchDetails = new BatchDetails();

                _batchDetails.Prefix = Convert.ToInt64(DateTime.Now.ToString("MMddyyyyhhmmss"));
                _batchDetails.BusinessCenterCode = BusinessCenterCode;
                //if (_batchDetails.BusinessCenterCode != "")
                //{ _batchDetails.BatchPrefix = "Batch-" + _batchDetails.BusinessCenterCode + "-" + DateTime.Now.ToString("yyyyMMMdd") + "_"; }
                //else
                //{ _batchDetails.BatchPrefix = "Batch-" + DateTime.Now.ToString("yyyyMMMdd") + "_"; }
                if (_batchDetails.BusinessCenterCode != "")
                {
                    _batchDetails.BatchPrefix = gloGlobal.gloPMGlobal.IsUseBatchClaimPrefix == true && gloGlobal.gloPMGlobal.sClaimPrefix != "" ? gloGlobal.gloPMGlobal.sClaimPrefix + "Batch-" + _batchDetails.BusinessCenterCode + "-" + DateTime.Now.ToString("yyyyMMMdd") + "_"
                                                        : "Batch-" + _batchDetails.BusinessCenterCode + "-" + DateTime.Now.ToString("yyyyMMMdd") + "_";
                }
                else
                {
                    _batchDetails.BatchPrefix = gloGlobal.gloPMGlobal.IsUseBatchClaimPrefix == true && gloGlobal.gloPMGlobal.sClaimPrefix != "" ? gloGlobal.gloPMGlobal.sClaimPrefix + "Batch-" + DateTime.Now.ToString("yyyyMMMdd") + "_"
                                                        : "Batch-" + DateTime.Now.ToString("yyyyMMMdd") + "_";
                }

                _batchDetails.BatchName = GetBatchName(_batchDetails.BatchPrefix);
                _batchDetails.BatchDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToString());
                _batchDetails.BillingMethodId = GetBillingType(TransactionId, TransactionMasterId);
                _batchDetails.ClearingHouseId = 0;
                _batchDetails.ClearingHouseCode = "";
                _batchDetails.ClearingHouseName = "";
                _batchDetails.UserId = this._UserId;
                _batchDetails.UserName = this._UserName;
                _batchDetails.ClinicId = this.ClinicID;
                _batchDetails.Billingtype = GetBillingType(TransactionId, TransactionMasterId);
            }
            catch (Exception ex)
            {
                _batchDetails = null;
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
            }
            finally
            { }


            return _batchDetails;
        }

        private void CreateFollowupScheduleForAutoBatch(Int64 TransactionMasterId, Int64 TransactionId, Int64 ContactId)
        {
            GeneralSettings oSettings = null;
            Collections.CL_FollowUpCode oCollection = null;
            DateTime dtCurrentDate = DateTime.Now;
            object oValue = null;

            try
            {

                bool SettingsValue = Collections.CL_FollowUpCode.IsFollowUpFeatureON();
                if (SettingsValue)
                {
                    dtCurrentDate = Collections.CL_FollowUpCode.GetServerDate();
                    oCollection = new Collections.CL_FollowUpCode();
                    oSettings = new GeneralSettings(gloPMGlobal.DatabaseConnectionString);
                }

                #region "Region for Auto Schedule Setup"

                #region " Account Log Feature Enable Disable according to settings."

                if (SettingsValue)
                {

                    if (ContactId > 0 && TransactionMasterId > 0 && TransactionId > 0)
                    {
                        string sStatus = Collections.CL_FollowUpCode.GetClaimFollowUpStatus(TransactionMasterId, TransactionId, ContactId);
                        string sAction = string.Empty;
                        string sActionDesc = string.Empty;
                        Int32 nDays = 0;
                        bool bHasWorked = false;
                        switch (sStatus)
                        {
                            case "NewBatch":
                                if (sStatus == "NewBatch")
                                {
                                    oCollection.DeleteFollowUpSchedule(TransactionId);
                                }

                                oSettings.GetSetting("CL_INSCLM_START_DEFFUACTION", 0, gloPMGlobal.ClinicID, out oValue);
                                sAction = Convert.ToString(oValue);
                                sActionDesc = Collections.CL_FollowUpCode.GetActionDesc(sAction, Collections.CollectionEnums.FollowUpType.Claim);

                                oSettings.GetSetting("CL_INSCLM_START_DEFFUACTIONDAYS", 0, gloPMGlobal.ClinicID, out oValue);
                                Int32.TryParse(Convert.ToString(oValue), out nDays);

                                oCollection.SaveFollowUpScedule(Collections.CollectionEnums.FollowUpType.Claim, TransactionId, dtCurrentDate.AddDays(nDays), sAction, sActionDesc, gloPMGlobal.UserID, gloPMGlobal.UserName, Collections.CollectionEnums.ScheduleType.System, DateTime.MinValue, ref bHasWorked);
                                break;
                            case "Rebill":
                            case "Resend":
                                oSettings.GetSetting("CL_INSCLM_REBILL_DEFFUACTION", 0, gloPMGlobal.ClinicID, out oValue);
                                sAction = Convert.ToString(oValue);
                                sActionDesc = Collections.CL_FollowUpCode.GetActionDesc(sAction, Collections.CollectionEnums.FollowUpType.Claim);

                                oSettings.GetSetting("CL_INSCLM_REBILL_DEFFUACTIONDAYS", 0, gloPMGlobal.ClinicID, out oValue);
                                Int32.TryParse(Convert.ToString(oValue), out nDays);

                                oCollection.SaveFollowUpScedule(Collections.CollectionEnums.FollowUpType.Claim, TransactionId, dtCurrentDate.AddDays(nDays), sAction, sActionDesc, gloPMGlobal.UserID, gloPMGlobal.UserName, Collections.CollectionEnums.ScheduleType.System, DateTime.MinValue, ref bHasWorked);
                                break;
                        }
                    }
                }

                #endregion

                #endregion
            }
            catch //(Exception ex)
            {
                throw;
            }
            finally
            {
                if (oSettings != null)
                {
                    oSettings.Dispose();
                    oSettings = null;
                }
                if (oCollection != null)
                {
                    oCollection.Dispose();
                    oCollection = null;
                }
            }
        }

        #endregion " Auto batching printed claims - 31Dec2013 Sagar G"

        public DateTime  getICD10DOS(Int64 _ContactID)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            object _returnValue = null;
            DateTime _ICDDOS = default(DateTime);
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nContactID", _ContactID, ParameterDirection.Input, SqlDbType.BigInt);
               
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oDB.Connect(false);
                _returnValue = oDB.ExecuteScalar("BL_SELECT_ICD10Transaction_DOS", oParameters);
                oDB.Disconnect();

                if (_returnValue != null)
                    DateTime.TryParse(_returnValue.ToString(), out _ICDDOS);

                return _ICDDOS;

            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
                return _ICDDOS;
            }
            finally
            {
                if (oDB != null)
                {
                    oDB.Disconnect();
                    oDB.Dispose();
                }
                oParameters = null;
                _returnValue = null;
            }
        }

        public gloGlobal.gloICD.CodeRevision GetICDCodeType(Int64 nContactID, Int64 nFromDOS)
        {
            gloDatabaseLayer.DBLayer oDB = null;
            gloDatabaseLayer.DBParameters oParameters = null;
            object BillingType = null;
            try
            {
                oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nContactID", nContactID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nFromDOS", nFromDOS, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nClinicID", _ClinicID , ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                BillingType = oDB.ExecuteScalar("BL_GetICDCodeType", oParameters);
                oDB.Disconnect();
                if (Convert.ToInt16(BillingType) == 10)
                    return gloGlobal.gloICD.CodeRevision.ICD10;
                else if (Convert.ToInt16(BillingType) == 9)
                    return gloGlobal.gloICD.CodeRevision.ICD9;
                return gloGlobal.gloICD.CodeRevision.ICD9;
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, true);
                return 0;
            }

            finally
            {
                if (oParameters != null)
                {
                    oParameters.Dispose();
                    oParameters = null;
                }

                if (oDB != null)
                {
                    oDB.Dispose();
                    oDB = null;
                }

                if (BillingType != null)
                {
                    BillingType = null;
                }
                
            }

        }

        public DataTable Fill_PastExams(Int64 nPatientID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            gloDatabaseLayer.DBParameters oParameters = null;
            DataTable _dtPastExams = null;
            try
            {

                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@PatientID", nPatientID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                oDB.Retrive("gsp_GetPastExams", oParameters, out _dtPastExams);
                oDB.Disconnect();
                               
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                throw dbEx;
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); }
                if (oDB != null) { oDB.Dispose(); }
            }

            return _dtPastExams;


            
        }

        public DataSet GetPWKReportType_TransmissionCodes()
        {

            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            DataSet _dsReportTypeAndTransmissionCodes = new DataSet();
            //string strQuery = "";

            try
            {
                oDB.Connect(false);
                oDB.Retrive("BL_GetPWKReportTypeTransmissionCodes", out _dsReportTypeAndTransmissionCodes);
                oDB.Disconnect();


                if (_dsReportTypeAndTransmissionCodes != null && _dsReportTypeAndTransmissionCodes.Tables.Count > 0)
                {
                    return _dsReportTypeAndTransmissionCodes;
                }
                oDB.Disconnect();
                return null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;

            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }

        }
    

      public TransactionLines GetOnlineCharge(Int64 nPortalClaimID)
        {
            DataSet dsOnlineCharge = null;
            DataTable dtTransactionLines = null;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            gloDatabaseLayer.DBParameters oParameters = null;
            TransactionLines oLines = new TransactionLines();
            TransactionLine oLine = null;
            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nPortalClaimID", nPortalClaimID, ParameterDirection.Input, SqlDbType.BigInt);
                oDB.Connect(false);
                oDB.Retrive("gsp_GetOCPClaimData", oParameters, out dsOnlineCharge);
                oDB.Disconnect();

                if (dsOnlineCharge != null)
                {
                    dtTransactionLines = dsOnlineCharge.Tables[1];
                }

                if (dtTransactionLines != null && dtTransactionLines.Rows.Count > 0)
                {
                    for (int lineCount = 0; lineCount < dtTransactionLines.Rows.Count; lineCount++)
                    {
                        if (oLines.Count < 30)
                        {
                            oLine = new TransactionLine();
                            oLine.TransactionLineId = 0;

                            oLine.CPTCode = Convert.ToString(dtTransactionLines.Rows[lineCount]["sCPTCode"]);
                            oLine.CPTDescription = Convert.ToString(dtTransactionLines.Rows[lineCount]["sCPTDescription"]);
                            oLine.Unit = Convert.ToDecimal(dtTransactionLines.Rows[lineCount]["dUnit"]);
                            oLine.RenderingProviderID = Convert.ToInt64(dtTransactionLines.Rows[lineCount]["nRenderingProviderID"]);
                            oLine.RenderingProviderName = Convert.ToString(dtTransactionLines.Rows[lineCount]["sRenderingProviderName"]);
                            oLine.TransactionLineId = Convert.ToInt32(dtTransactionLines.Rows[lineCount]["nChargeLineNo"]);
                            oLine.EMRTreatmentLineNo = Convert.ToInt32(dtTransactionLines.Rows[lineCount]["nChargeLineNo"]);
                            //oLine.POSCode = Convert.ToString(dtTransactionLines.Rows[lineCount]["sPOSCode"]);

                            if (oLine.Unit.Equals(0))
                            {
                                oLine.Unit = 1;
                            }

                            if (Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx1Code"]) != "" && dtTransactionLines.Rows[lineCount]["sDx1Code"] != null)
                            {
                                oLine.Dx1Code = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx1Code"]);
                                oLine.Dx1Description = Convert.ToString(dtTransactionLines.Rows[lineCount]["Dx1Description"]);
                                oLine.Dx1Ptr = true;
                                oLine.LinePrimaryDxCode = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx1Code"]);
                                oLine.LinePrimaryDxDesc = Convert.ToString(dtTransactionLines.Rows[lineCount]["Dx1Description"]);
                            }
                            if (Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx2Code"]) != "" && dtTransactionLines.Rows[lineCount]["sDx2Code"] != null)
                            {
                                oLine.Dx2Code = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx2Code"]);
                                oLine.Dx2Description = Convert.ToString(dtTransactionLines.Rows[lineCount]["Dx2Description"]);
                                oLine.Dx2Ptr = true;
                            }
                            if (Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx3Code"]) != "" && dtTransactionLines.Rows[lineCount]["sDx3Code"] != null)
                            {
                                oLine.Dx3Code = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx3Code"]);
                                oLine.Dx3Description = Convert.ToString(dtTransactionLines.Rows[lineCount]["Dx3Description"]);
                                oLine.Dx3Ptr = true;
                            }
                            if (Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx4Code"]) != "" && dtTransactionLines.Rows[lineCount]["sDx4Code"] != null)
                            {
                                oLine.Dx4Code = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDx4Code"]);
                                oLine.Dx4Description = Convert.ToString(dtTransactionLines.Rows[lineCount]["Dx4Description"]);
                                oLine.Dx4Ptr = true;
                            }

                            if (Convert.ToString(dtTransactionLines.Rows[lineCount]["sMod1Code"]) != "" && dtTransactionLines.Rows[lineCount]["sMod1Code"] != null)
                            {
                                oLine.Mod1Code = Convert.ToString(dtTransactionLines.Rows[lineCount]["sMod1Code"]);
                                oLine.Mod1Description = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDescription"]);
                            }
                            if (Convert.ToString(dtTransactionLines.Rows[lineCount]["sMod2Code"]) != "" && dtTransactionLines.Rows[lineCount]["sMod2Code"] != null)
                            {
                                oLine.Mod2Code = Convert.ToString(dtTransactionLines.Rows[lineCount]["sMod2Code"]);
                                oLine.Mod2Description = Convert.ToString(dtTransactionLines.Rows[lineCount]["sDescription"]);
                            }

                            oLine.DateServiceFrom = Convert.ToDateTime(dtTransactionLines.Rows[lineCount]["dtFromDOS"]);
                            oLines.Add(oLine);
                            oLine = null;
                        }
                    }
                }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
                throw dbEx;
            }
            finally
            {
                if (oParameters != null) { oParameters.Dispose(); }
                if (oDB != null) { oDB.Dispose(); }
            }
            return oLines;
        }
      public Int64 GetOnlineChargePatient(Int64 nPortalClaimID)
      {
          DataSet dsOnlineCharge = null;
          DataTable dtTransactionPatient = null;
          gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
          gloDatabaseLayer.DBParameters oParameters = null;
          gloPatient.Patient oPatient = null;
          gloPatient.PatientOtherContact oGuarantor = null;
          gloPatient.PatientOtherContacts oPatientGuarantors = null;
          gloPatient.Account oAccount = null;
          gloPatient.PatientAccount patAccount = null;
          Int64 PatientID = 0;
          try
          {
              oParameters = new gloDatabaseLayer.DBParameters();
              oParameters.Add("@nPortalClaimID", nPortalClaimID, ParameterDirection.Input, SqlDbType.BigInt);
              oDB.Connect(false);
              oDB.Retrive("gsp_GetOCPClaimData", oParameters, out dsOnlineCharge);
              oDB.Disconnect();

              if (dsOnlineCharge != null)
              {
                  dtTransactionPatient = dsOnlineCharge.Tables[0];
              }

              if (dtTransactionPatient != null && dtTransactionPatient.Rows.Count > 0)
              {

                  //if ((Convert.ToInt64(dtTransactionPatient.Rows[0]["nPatientID"]) == 0 || dtTransactionPatient.Rows[0]["nPatientID"] == null) && (Convert.ToInt64(dtTransactionPatient.Rows[0]["nRegisteredAsPatientID"]) == 0 || dtTransactionPatient.Rows[0]["nRegisteredAsPatientID"] == null))
                  if (dtTransactionPatient.Rows[0]["nPatientID"] == DBNull.Value && dtTransactionPatient.Rows[0]["nRegisteredAsPatientID"] == DBNull.Value)
                  {
                      //register New Patient
                      oPatient = new gloPatient.Patient();
                      oPatient.DemographicsDetail.PatientFirstName = Convert.ToString(dtTransactionPatient.Rows[0]["PatientFName"]);
                      oPatient.DemographicsDetail.PatientMiddleName = Convert.ToString(dtTransactionPatient.Rows[0]["PatientMName"]);
                      oPatient.DemographicsDetail.PatientLastName = Convert.ToString(dtTransactionPatient.Rows[0]["PatientLName"]);
                      oPatient.DemographicsDetail.PatientDOB = Convert.ToDateTime(dtTransactionPatient.Rows[0]["PatientDOB"]);
                      oPatient.DemographicsDetail.PatientSSN = Convert.ToString(dtTransactionPatient.Rows[0]["PatientSSN"]);
                      oPatient.DemographicsDetail.PatientGender = Convert.ToString(dtTransactionPatient.Rows[0]["PatientGender"]);
                      oPatient.DemographicsDetail.PatientAddress1 = Convert.ToString(dtTransactionPatient.Rows[0]["sAddressLine1"]);
                      oPatient.DemographicsDetail.PatientAddress2 = Convert.ToString(dtTransactionPatient.Rows[0]["sAddressLine2"]);
                      oPatient.DemographicsDetail.PatientCity = Convert.ToString(dtTransactionPatient.Rows[0]["sCity"]);
                      oPatient.DemographicsDetail.PatientState = Convert.ToString(dtTransactionPatient.Rows[0]["sState"]);
                      oPatient.DemographicsDetail.PatientZip = Convert.ToString(dtTransactionPatient.Rows[0]["sZIP"]);
                      oPatient.DemographicsDetail.PatientCounty = Convert.ToString(dtTransactionPatient.Rows[0]["sCounty"]);
                      oPatient.DemographicsDetail.PatientCountry = Convert.ToString(dtTransactionPatient.Rows[0]["sCountry"]);
                      oPatient.DemographicsDetail.PatientPhone = Convert.ToString(dtTransactionPatient.Rows[0]["sPhone"]);
                      oPatient.DemographicsDetail.PatientMobile = Convert.ToString(dtTransactionPatient.Rows[0]["sMobile"]);
                      oPatient.DemographicsDetail.PatientEmail = Convert.ToString(dtTransactionPatient.Rows[0]["sEmail"]);
                      oPatient.DemographicsDetail.PatientFax = Convert.ToString(dtTransactionPatient.Rows[0]["sFAX"]);
                      oPatient.DemographicsDetail.PatientProviderID = Convert.ToInt64(dtTransactionPatient.Rows[0]["nProviderID"]);
                      gloPatient.gloPatient gloRegisterPatient = new gloPatient.gloPatient(_databaseconnectionstring);
                      oPatient.DemographicsDetail.PatientCode = gloRegisterPatient.GeneratePatientCode();

                      oGuarantor = new gloPatient.PatientOtherContact();
                      oPatientGuarantors = new gloPatient.PatientOtherContacts();
                      gloPatient.PatientOtherContact.GuarantorTypeFlag _GuarantorTypeFlag = gloPatient.PatientOtherContact.GuarantorTypeFlag.Primary;
                      oGuarantor.PatientContactID = 0;
                      oGuarantor.GuarantorAsPatientID = 0;
                      oGuarantor.IsActive = true;
                      oGuarantor.FirstName = oPatient.DemographicsDetail.PatientFirstName;
                      oGuarantor.MiddleName = oPatient.DemographicsDetail.PatientMiddleName;
                      oGuarantor.LastName = oPatient.DemographicsDetail.PatientLastName;
                      oGuarantor.DOB = oPatient.DemographicsDetail.PatientDOB;
                      oGuarantor.SSN = oPatient.DemographicsDetail.PatientSSN;
                      oGuarantor.Gender = oPatient.DemographicsDetail.PatientGender;
                      oGuarantor.AddressLine1 = oPatient.DemographicsDetail.PatientAddress1;
                      oGuarantor.AddressLine2 = oPatient.DemographicsDetail.PatientAddress2;
                      oGuarantor.City = oPatient.DemographicsDetail.PatientCity;
                      oGuarantor.State = oPatient.DemographicsDetail.PatientState;
                      oGuarantor.Zip = oPatient.DemographicsDetail.PatientZip;
                      oGuarantor.County = oPatient.DemographicsDetail.PatientCounty;
                      oGuarantor.Country = oPatient.DemographicsDetail.PatientCountry;
                      oGuarantor.Relation = "Self";
                      oGuarantor.Phone = oPatient.DemographicsDetail.PatientPhone;
                      oGuarantor.Mobile = oPatient.DemographicsDetail.PatientMobile;
                      oGuarantor.Email = oPatient.DemographicsDetail.PatientEmail;
                      oGuarantor.Fax = oPatient.DemographicsDetail.PatientFax;
                      oGuarantor.OtherConatctType = gloPatient.PatientOtherContactType.SameAsPatient;
                      oGuarantor.GurantorType = gloPatient.GuarantorType.Personal;
                      oGuarantor.nGuarantorTypeFlag = _GuarantorTypeFlag.GetHashCode();
                      oGuarantor.IsAccountGuarantor = true;
                      oPatientGuarantors.Add(oGuarantor);

                      oPatient.PatientGuarantors = oPatientGuarantors;

                      oAccount = new gloPatient.Account();
                      patAccount = new gloPatient.PatientAccount();

                      oAccount.PAccountID = 0;
                      oAccount.IsExistingAccount = false;
                      oAccount.AccountNo = oPatient.DemographicsDetail.PatientCode;
                      oAccount.AccountDesc = "";
                      oAccount.SentToCollection = false;
                      oAccount.ExcludeStatement = false;
                      oAccount.AccountClosedDate = DateTime.MinValue;
                      oAccount.RecordDate = DateTime.Now;
                      oAccount.IsAccountFeatureEnabled = false;
                      oAccount.FirstName = oPatient.DemographicsDetail.PatientFirstName;
                      oAccount.MiddleName = oPatient.DemographicsDetail.PatientMiddleName;
                      oAccount.LastName = oPatient.DemographicsDetail.PatientLastName;
                      oAccount.AddressLine1 = oPatient.DemographicsDetail.PatientAddress1;
                      oAccount.AddressLine2 = oPatient.DemographicsDetail.PatientAddress2;
                      oAccount.City = oPatient.DemographicsDetail.PatientCity;
                      oAccount.State = oPatient.DemographicsDetail.PatientState;
                      oAccount.Zip = oPatient.DemographicsDetail.PatientZip;
                      oAccount.AreaCode = "";
                      oAccount.County = oPatient.DemographicsDetail.PatientCounty;
                      oAccount.Country = oPatient.DemographicsDetail.PatientCountry;
                      oAccount.ClinicID = ClinicID;
                      oAccount.MachineName = System.Environment.MachineName;
                      oAccount.GuarantorCode = "";
                      oAccount.UserID = _UserId;
                      oAccount.EntityType = gloPatient.GuarantorType.Personal.GetHashCode();
                      oAccount.Active = true;
                      oAccount.SiteID = 1;

                      oPatient.Account = oAccount;

                      patAccount.AccountPatientID = 0;
                      patAccount.PatientID = 0;
                      patAccount.AccountNo = oPatient.DemographicsDetail.PatientCode;
                      patAccount.PatientCode = oPatient.DemographicsDetail.PatientCode;
                      patAccount.AccountClosedDate = DateTime.MinValue;
                      patAccount.ClinicID = ClinicID;
                      patAccount.SiteID = 1;
                      patAccount.UserID = _UserId;
                      patAccount.MachineName = System.Environment.MachineName;
                      patAccount.RecordDate = DateTime.Now;
                      patAccount.Active = true;
                      patAccount.OwnAccount = true;

                      oPatient.PatientAccount = patAccount;

                      PatientID = gloRegisterPatient.Add(oPatient);

                      oPatient.DemographicsDetail.PatientID = PatientID;
                      bool bIsUpdated = gloCharges.UpdateOCPClaimDetails(nPortalClaimID, PatientID, 1);
                      if (bIsUpdated == true)
                      {
                          gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.SetupPatient, gloAuditTrail.ActivityType.Add, "Patient registered for Online Charge with PortalCalimID:" + nPortalClaimID.ToString(), PatientID, PatientID, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, true);
                      }
                      else
                      {
                          gloAuditTrail.gloAuditTrail.CreateAuditLog(gloAuditTrail.ActivityModule.Billing, gloAuditTrail.ActivityCategory.SetupPatient, gloAuditTrail.ActivityType.Add, "Patient not registered for Online Charge with PortalCalimID:" + nPortalClaimID.ToString(), PatientID, PatientID, 0, gloAuditTrail.ActivityOutCome.Success, gloAuditTrail.SoftwareComponent.gloPM, false);
                      }

                  }
                  else
                  {
                      PatientID = Convert.ToInt64(dtTransactionPatient.Rows[0]["nPatientID"]);
                  }
              }
          }
          catch (gloDatabaseLayer.DBException dbEx)
          {
              dbEx.ERROR_Log(dbEx.ToString());
              throw dbEx;
          }
          finally
          {
              if (oParameters != null) { oParameters.Dispose(); }
              if (oDB != null) { oDB.Dispose(); }
              if (oPatient != null)
              {
                  oPatient.Dispose();
                  oPatient = null;
              }
              if (oPatientGuarantors != null)
              {
                  oPatientGuarantors.Dispose();
                  oPatientGuarantors = null;
              }
              if (oAccount != null)
              {
                  oAccount.Dispose();
                  oAccount = null;
              }
              if (oGuarantor != null)
              {
                  oGuarantor.Dispose();
                  oGuarantor = null;
              }
              if (patAccount != null)
              {
                  patAccount.Dispose();
                  patAccount = null;
              }
          }
          return PatientID;
      }
    }


    #region " Auto batching printed claims - 31Dec2013 Sagar G"

    public class BatchDetails
    {
        public Int64 BatchId { get; set; }
        public string BatchPrefix { get; set; }
        public string BatchName { get; set; }
        public Int64 Prefix { get; set; }
        public Int64 BatchDate { get; set; }
        public Int64 BatchNo { get; set; }
        public Int64 BillingMethodId { get; set; }
        public Int64 ClearingHouseId { get; set; }
        public string ClearingHouseCode { get; set; }
        public string ClearingHouseName { get; set; }
        public bool IsBatchDetailsGenerated { get; set; }
        public Int64 UserId { get; set; }
        public string UserName { get; set; }
        public Int64 ClinicId { get; set; }
        public Int16 Billingtype { get; set; }
        public string BusinessCenterCode { get; set; }
    }

    #endregion " Auto batching printed claims - 31Dec2013 Sagar G"

    public static class gloBillingStatus

    {
        internal static string _databaseconnectionstring = "";

        public static bool UpdateTransactionStatus(Int64 TransactionID, Int64 TransactionDetailID, Int64 TransactionLineNo, TransactionStatus Status, string StatusNote, Int64 ClinicID)
        {
            bool _IsUpdated = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object retVal = new object();
            string _sqlQuery = "";
        //    int retValue = 0;
            Int64 _statusDate = 0;
            Int64 _statusTime = 0;

            try
            {
                oDB.Connect(false);
                _statusDate = gloDateMaster.gloDate.DateAsNumber(DateTime.Now.ToShortDateString());
                _statusTime = gloDateMaster.gloTime.TimeAsNumber(DateTime.Now.ToShortTimeString());

                //nTransactionID, nTransactionDetailID, nTransactionLineNo, nStatusDate, nStatusTime, sStatusNote, nClinicID, nStatusID
                if (( TransactionID > 0) && ( TransactionDetailID > 0))
                {
                    _sqlQuery = "INSERT INTO BL_Transaction_Status " +
                    " (nTransactionID, nTransactionDetailID, nTransactionLineNo, nStatusDate, nStatusTime, sStatusNote, nClinicID, nStatusID) " +
                    " VALUES " +
                    " (" + TransactionID + "," + TransactionDetailID + "," + TransactionLineNo + "," + _statusDate + "," + _statusTime + ",'" + StatusNote + "'," + ClinicID + "," + Status.GetHashCode() + ")";

                    int Val = oDB.Execute_Query(_sqlQuery);
                    if (Val > 0)
                    {
                        _IsUpdated = true;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _IsUpdated = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (retVal != null) { retVal = null; }
            }
            return _IsUpdated;

        }

        public static TransactionStatus GetTransactionStatus(Int64 TransactionID, Int64 TransactionDetailID, Int64 TransactionLineNo, Int64 ClinicID)
        {
        //    bool _IsUpdated = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            Object retVal = new object();
            string _sqlQuery = "";
         //   int retValue = 0;
            TransactionStatus oTransactionStatus = TransactionStatus.None;
            try
            {
                oDB.Connect(false);

                //nTransactionID, nTransactionDetailID, nTransactionLineNo, nStatusDate, nStatusTime, sStatusNote, nClinicID, nStatusID
                if (TransactionID > 0 && TransactionDetailID > 0)
                {
                    _sqlQuery = " SELECT nStatusID FROM BL_Transaction_Status WITH (NOLOCK) " +
                                " WHERE nTransactionID = " + TransactionID + " AND nTransactionDetailID = " + TransactionDetailID + " " +
                                " AND nTransactionLineNo = " + TransactionLineNo + " AND nClinicID = " + ClinicID + " " +
                                " AND nStatusDate = (select ISNULL(MAX(nStatusDate),0) FROM BL_Transaction_Status WHERE nTransactionID = " + TransactionID + " AND nTransactionDetailID = " + TransactionDetailID + " AND nTransactionLineNo = " + TransactionLineNo + " AND nClinicID = " + ClinicID + " ) " +
                                " AND nStatusTime = (select ISNULL(MAX(nStatusTime),0) FROM BL_Transaction_Status WHERE nTransactionID = " + TransactionID + " AND nTransactionDetailID = " + TransactionDetailID + " AND nTransactionLineNo = " + TransactionLineNo + " AND nClinicID = " + ClinicID + " ) ";

                    retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                    if (retVal != null && Convert.ToInt64(retVal) > 0)
                    {
                        oTransactionStatus = (TransactionStatus)Convert.ToInt32(retVal);
                    }
                }
            }
            catch //(Exception ex)
            {
                //_IsUpdated = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }
                if (retVal != null) { retVal = null; }
            }
            return oTransactionStatus;
        }

        public static bool HasTransactionStatus(Int64 TransactionID, Int64 ClinicID)
        {
            bool _IsUpdated = false;
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
            string _sqlQuery = "";
          //  int retValue = 0;
            object oTransactionId = new object();

            try
            {
                oDB.Connect(false);

                //nTransactionID, nTransactionDetailID, nTransactionLineNo, nStatusDate, nStatusTime, sStatusNote, nClinicID, nStatusID
                if (TransactionID > 0)
                {
                    _sqlQuery = " SELECT DISTINCT nTransactionID FROM BL_Transaction_Status WITH (NOLOCK) " +
                                " WHERE nTransactionID = " + TransactionID + " " +
                                " AND nClinicID = " + ClinicID + " ";

                    oTransactionId = oDB.ExecuteScalar_Query(_sqlQuery);
                    if (oTransactionId != null && Convert.ToString(oTransactionId) != "")
                    {
                        _IsUpdated = true;
                    }
                }
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
                ex = null;
                _IsUpdated = false;
            }
            finally
            {
                if (oDB != null) { oDB.Disconnect(); oDB.Dispose(); }

            }
            return _IsUpdated;
        }

    }


    //public class gloBillingPayment
    //{
    //    #region "Constructor & Distructor"

    //    private string _databaseconnectionstring = "";
    //    private string _messageBoxCaption = "gloPMS";

    //    //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
    //    System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
    //    private Int64 _ClinicID = 0;
    //    public Int64 ClinicID
    //    {
    //        get { return _ClinicID; }
    //        set { _ClinicID = value; }
    //    }


    //    public gloBillingPayment(string DatabaseConnectionString)
    //    {
    //        _databaseconnectionstring = DatabaseConnectionString;
    //        //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
    //        if (appSettings["ClinicID"] != null)
    //        {
    //            if (appSettings["ClinicID"] != "")
    //            { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
    //            else { _ClinicID = 0; }
    //        }
    //        else
    //        { _ClinicID = 0; }

    //    }

    //    private bool disposed = false;

    //    public void Dispose()
    //    {
    //        Dispose(true);
    //        GC.SuppressFinalize(this);
    //    }
    //    protected virtual void Dispose(bool disposing)
    //    {
    //        if (!this.disposed)
    //        {
    //            if (disposing)
    //            {

    //            }
    //        }
    //        disposed = true;
    //    }

    //    ~gloBillingPayment()
    //    {
    //        Dispose(false);
    //    }

    //    #endregion

    //    public Int64 AddPayment(TransactionPayment oTransactionPayment)
    //    {
    //        Int64 _result = 0;
    //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
    //        gloDatabaseLayer.DBParameters oParameters = null;
    //        Object oTranPaymentID = new object();
    //        Int64 _TransactionPaymentID = 0;

    //        try
    //        {

    //            if (oTransactionPayment != null)
    //            {
    //                oDB.Connect(false);
    //                oParameters = new gloDatabaseLayer.DBParameters();

    //                oParameters.Add("@nTransactionPaymentID", oTransactionPayment.TransactionPaymentID, ParameterDirection.InputOutput, SqlDbType.BigInt);
    //                oParameters.Add("@sBatchNumber", oTransactionPayment.BatchNumber, ParameterDirection.Input, SqlDbType.VarChar);
    //                //oParameters.Add("@nReceiptEntryType", oTransactionPayment.ReceiptEntryTypeValue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
    //                oParameters.Add("@nTypeOfPayment", oTransactionPayment.TypeOfPaymentValue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
    //                oParameters.Add("@nPayer", oTransactionPayment.PayerTypeValue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
    //                oParameters.Add("@sCheckNumber", oTransactionPayment.CheckNumber, ParameterDirection.Input, SqlDbType.VarChar);
    //                oParameters.Add("@dPayerAmount", oTransactionPayment.PayerAmount, ParameterDirection.Input, SqlDbType.Decimal);
    //                oParameters.Add("@nClinicID", oTransactionPayment.ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

    //                int Val = oDB.Execute("BL_INSERT_Transaction_Payment_MST", oParameters, out oTranPaymentID);

    //                if (oTranPaymentID != null && Convert.ToInt64(oTranPaymentID) != 0)
    //                {
    //                    _TransactionPaymentID = Convert.ToInt64(oTranPaymentID);
    //                    _result = _TransactionPaymentID;
    //                    if (oTransactionPayment.TransactionPayments != null)
    //                    {
    //                        for (int i = 0; i < oTransactionPayment.TransactionPayments.Count; i++)
    //                        {
    //                            oParameters = new gloDatabaseLayer.DBParameters();

    //                            oParameters.Add("@nTransactionPaymentID", _TransactionPaymentID, ParameterDirection.InputOutput, SqlDbType.BigInt);
    //                            oParameters.Add("@nTransactionPaymentDetailID", oTransactionPayment.TransactionPayments[i].TransactionPaymentDetailID, ParameterDirection.Input, SqlDbType.BigInt);
    //                            oParameters.Add("@nPatientID", oTransactionPayment.TransactionPayments[i].PatientID, ParameterDirection.Input, SqlDbType.BigInt);
    //                            //oParameters.Add("@nReceiptEntryType", oTransactionPayment.TransactionPayments[i].ReceiptEntryTypeValue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
    //                            oParameters.Add("@nTypeOfPayment", oTransactionPayment.TransactionPayments[i].TypeOfPaymentValue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
    //                            oParameters.Add("@nPayer", oTransactionPayment.TransactionPayments[i].PayerTypeValue.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
    //                            //oParameters.Add("@sCheckNumber", oTransactionPayment.TransactionPayments[i].CheckNumber, ParameterDirection.Input, SqlDbType.VarChar);
    //                            oParameters.Add("@nTransactionID", oTransactionPayment.TransactionPayments[i].TransactionID, ParameterDirection.Input, SqlDbType.BigInt);
    //                            oParameters.Add("@nTransactionDetailID", oTransactionPayment.TransactionPayments[i].TransactionDetailID, ParameterDirection.Input, SqlDbType.BigInt);
    //                            oParameters.Add("@nTransactionLineNo", oTransactionPayment.TransactionPayments[i].TransactionLineNo, ParameterDirection.Input, SqlDbType.BigInt);
    //                            oParameters.Add("@sCPTCode", oTransactionPayment.TransactionPayments[i].CPTCode, ParameterDirection.Input, SqlDbType.VarChar);
    //                            oParameters.Add("@sCPTDescription", oTransactionPayment.TransactionPayments[i].CPTDescription, ParameterDirection.Input, SqlDbType.VarChar);
    //                            oParameters.Add("@dClinicAmt", oTransactionPayment.TransactionPayments[i].ClinicAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dChargesAmt", oTransactionPayment.TransactionPayments[i].ChargesAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dAllowedAmt", oTransactionPayment.TransactionPayments[i].AllowedAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dPaymentAmt", oTransactionPayment.TransactionPayments[i].PaymentAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dAdjustmentAmt", oTransactionPayment.TransactionPayments[i].AdjustmentAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dWriteOffAmt", oTransactionPayment.TransactionPayments[i].WriteOffAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dCoPayAmt", oTransactionPayment.TransactionPayments[i].CoPayAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@dDeductibleAmt", oTransactionPayment.TransactionPayments[i].DeductibleAmt, ParameterDirection.Input, SqlDbType.Decimal);
    //                            oParameters.Add("@nClinicID", oTransactionPayment.TransactionPayments[i].ClinicID, ParameterDirection.Input, SqlDbType.BigInt);

    //                            Val = oDB.Execute("BL_INUP_Transaction_Payment_DTL", oParameters, out oTranPaymentID);
    //                        }
    //                    }

    //                }

    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
    //        }
    //        finally
    //        {
    //            if (oDB != null) { oDB.Dispose(); }
    //            if (oParameters != null) { oParameters.Dispose(); }
    //        }
    //        return _result;
    //    }

    //    public decimal GetPaidAmount(string BatchNumber, Int64 ClinicID)
    //    {
    //        gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
    //        object _intresult = new object();
    //        decimal _result = 0;
    //        string _strSQL = "";
    //        decimal _BatchTotAmount = 0;

    //        try
    //        {
    //            oDB.Connect(false);

    //            if (BatchNumber.Trim() != "")
    //            {
    //                //Actual Amount
    //                _strSQL = "SELECT dPayerAmount FROM BL_Transaction_Payment_MST WHERE sBatchNumber = '" + BatchNumber + "' AND nClinicID = " + ClinicID + "";

    //                _intresult = oDB.ExecuteScalar_Query(_strSQL);
    //                if (_intresult != null)
    //                {
    //                    if (_intresult.ToString() != null)
    //                    {
    //                        if (_intresult.ToString().Trim() != "")
    //                        {
    //                            _BatchTotAmount = Convert.ToDecimal(_intresult.ToString());
    //                        }
    //                    }
    //                }

    //                //Paid Amount
    //                _strSQL = "SELECT SUM(BL_Transaction_Payment_DTL.dPaymentAmt) AS dPaymentAmt " +
    //                " FROM BL_Transaction_Payment_MST INNER JOIN BL_Transaction_Payment_DTL ON BL_Transaction_Payment_MST.nTransactionPaymentID = BL_Transaction_Payment_DTL.nTransactionPaymentID AND BL_Transaction_Payment_MST.nClinicID = BL_Transaction_Payment_DTL.nClinicID " +
    //                " WHERE (BL_Transaction_Payment_MST.sBatchNumber = '" + BatchNumber + "' AND BL_Transaction_Payment_MST.nClinicID = " + ClinicID + ")";

    //                _intresult = oDB.ExecuteScalar_Query(_strSQL);
    //                if (_intresult != null)
    //                {
    //                    if (_intresult.ToString() != null)
    //                    {
    //                        if (_intresult.ToString().Trim() != "")
    //                        {
    //                            _result = Convert.ToDecimal(_intresult.ToString());
    //                        }
    //                    }
    //                }

    //            }

    //        }
    //        catch (Exception ex)
    //        {
    //            MessageBox.Show(ex.Message, "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Error);
    //        }
    //        finally
    //        {
    //            if (oDB.Connect(false))
    //            { oDB.Disconnect(); }
    //            if (oDB != null)
    //            { oDB.Dispose(); }
    //        }
    //        return _BatchTotAmount - _result;
    //    }
    //}

    //public class gloBillingCoPayment
    //{
    //    #region "Constructor & Distructor"

    //    private string _databaseconnectionstring = "";
    //    private string _messageBoxCaption = "gloPMS";

    //    //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
    //    System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
    //    private Int64 _ClinicID = 0;
    //    public Int64 ClinicID
    //    {
    //        get { return _ClinicID; }
    //        set { _ClinicID = value; }
    //    }


    //    public gloBillingCoPayment(string DatabaseConnectionString)
    //    {
    //        _databaseconnectionstring = DatabaseConnectionString;
    //        //Code added on 9/04/2008 -by Sagar Ghodke for implementing ClinicID;
    //        if (appSettings["ClinicID"] != null)
    //        {
    //            if (appSettings["ClinicID"] != "")
    //            { _ClinicID = Convert.ToInt64(appSettings["ClinicID"]); }
    //            else { _ClinicID = 0; }
    //        }
    //        else
    //        { _ClinicID = 0; }

    //    }

    //    private bool disposed = false;

    //    public void Dispose()
    //    {
    //        Dispose(true);
    //        GC.SuppressFinalize(this);
    //    }

    //    protected virtual void Dispose(bool disposing)
    //    {
    //        if (!this.disposed)
    //        {
    //            if (disposing)
    //            {

    //            }
    //        }
    //        disposed = true;
    //    }

    //    ~gloBillingCoPayment()
    //    {
    //        Dispose(false);
    //    }

    //    #endregion

    //    #region "Variables Declarations"
    //    //Variables Declarations
    //    //nPatientID, nInsuranceID, nAppointmentID, nTransactionDate, 
    //    //nAppointmentDate, nCoPayAmount, bIsApplied, nPaymentMode,
    //    //nMoneyOrderDate, sMoneyOrderCheckNo, sCheckNumber, nCheckDate, 
    //    //sCreditCardNo, sCreditSecurityNo, sCardType, nCardExpiryDate

    //    Int64 _coPayID = 0;
    //    Int64 _patientID = 0;
    //    Int64 _insuranceID = 0;
    //    Int64 _appointmentID = 0;
    //    Int64 _transactionDate = 0;
    //    Int64 _appointmentDate = 0;
    //    Decimal _coPayAmount = 0;
    //    Boolean _IsApplied = false;
    //    Int64 _paymentMode = 0;
    //    Int64 _moneyOrderDate = 0;
    //    String _moneyOrderCheckNo = "";
    //    String _checkNumber = "";
    //    Int64 _checkDate = 0;
    //    String _creditCardNo = "";
    //    String _creditSecurityNo = "";
    //    String _cardType = "";
    //    Int64 _cardExpiryDate = 0;

    //    #endregion"Variables Declarations"

    //    #region "Property Procedures"
    //    //Property procedures

    //    //nCoPayID
    //    public Int64 CoPayID { get { return _coPayID; } set { _coPayID = value; } }
    //    //nPatientID, nInsuranceID, nAppointmentID, nTransactionDate,
    //    public Int64 PatientID { get { return _patientID; } set { _patientID = value; } }
    //    public Int64 InsuranceID { get { return _insuranceID; } set { _insuranceID = value; } }
    //    public Int64 AppointmentID { get { return _appointmentID; } set { _appointmentID = value; } }
    //    public Int64 TransactionDate { get { return _transactionDate; } set { _transactionDate = value; } }
    //    //nAppointmentDate, nCoPayAmount, bIsApplied, nPaymentMode,
    //    public Int64 AppointmentDate { get { return _appointmentDate; } set { _appointmentDate = value; } }
    //    public Decimal CoPayAmount { get { return _coPayAmount; } set { _coPayAmount = value; } }
    //    public Boolean IsApplied { get { return _IsApplied; } set { _IsApplied = value; } }
    //    public Int64 PaymentMode { get { return _paymentMode; } set { _paymentMode = value; } }
    //    //nMoneyOrderDate, sMoneyOrderCheckNo, sCheckNumber, nCheckDate,
    //    public Int64 MoneyOrderDate { get { return _moneyOrderDate; } set { _moneyOrderDate = value; } }
    //    public String MoneyOrderCheckNo { get { return _moneyOrderCheckNo; } set { _moneyOrderCheckNo = value; } }
    //    public String CheckNumber { get { return _checkNumber; } set { _checkNumber = value; } }
    //    public Int64 CheckDate { get { return _checkDate; } set { _checkDate = value; } }
    //    //sCreditCardNo, sCreditSecurityNo, sCardType, nCardExpiryDate
    //    public String CreditCardNo { get { return _creditCardNo; } set { _creditCardNo = value; } }
    //    public String CreditSecurityNo { get { return _creditSecurityNo; } set { _creditSecurityNo = value; } }
    //    public String CardType { get { return _cardType; } set { _cardType = value; } }
    //    public Int64 CardExpiryDate { get { return _cardExpiryDate; } set { _cardExpiryDate = value; } }



    //    #endregion"Property Procedures"


    //    #region "Supporting Methods"

    //        public Int64 AddCoPayment(gloBillingCoPayment ogloBillingCoPayment)
    //        {
    //            Int64 _result = 0;
    //            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
    //            gloDatabaseLayer.DBParameters oParameters = null;
    //            Object oTranCoPaymentID = new object();
    //            Int64 _TransactionCoPaymentID = 0;

    //            try
    //            {

    //                if (ogloBillingCoPayment != null)
    //                {
    //                    oDB.Connect(false);
    //                    oParameters = new gloDatabaseLayer.DBParameters();
    //                    //@nCoPayID, @nPatientID, @nInsuranceID, @nAppointmentID, @nTransactionDate, 
    //                    //@nAppointmentDate, @nCoPayAmount, @bIsApplied, @nPaymentMode, 
    //                    //@nMoneyOrderDate, @sMoneyOrderCheckNo, @sCheckNumber, @nCheckDate, @sCreditCardNo,
    //                    //@sCreditSecurityNo, @sCardType, @nCardExpiryDate
    //                    oParameters.Add("@nCoPayID", ogloBillingCoPayment.CoPayID, ParameterDirection.InputOutput, SqlDbType.BigInt);
    //                    oParameters.Add("@nPatientID", ogloBillingCoPayment.PatientID, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@nInsuranceID", ogloBillingCoPayment.InsuranceID, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@nAppointmentID", ogloBillingCoPayment.AppointmentID, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@nTransactionDate", ogloBillingCoPayment.TransactionDate, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@nAppointmentDate", ogloBillingCoPayment.AppointmentDate, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@dCoPayAmount", ogloBillingCoPayment.CoPayAmount, ParameterDirection.Input, SqlDbType.Decimal);
    //                    oParameters.Add("@bIsApplied", ogloBillingCoPayment.IsApplied, ParameterDirection.Input, SqlDbType.Bit);
    //                    oParameters.Add("@nPaymentMode", ogloBillingCoPayment.PaymentMode, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@nMoneyOrderDate", ogloBillingCoPayment.MoneyOrderDate, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@sMoneyOrderCheckNo", ogloBillingCoPayment.MoneyOrderCheckNo, ParameterDirection.Input, SqlDbType.VarChar);
    //                    oParameters.Add("@sCheckNumber", ogloBillingCoPayment.TransactionDate, ParameterDirection.Input, SqlDbType.VarChar);
    //                    oParameters.Add("@nCheckDate", ogloBillingCoPayment.CheckDate, ParameterDirection.Input, SqlDbType.BigInt);
    //                    oParameters.Add("@sCreditCardNo", ogloBillingCoPayment.CreditCardNo, ParameterDirection.Input, SqlDbType.VarChar);
    //                    oParameters.Add("@sCreditSecurityNo", ogloBillingCoPayment.CreditSecurityNo, ParameterDirection.Input, SqlDbType.VarChar);
    //                    oParameters.Add("@sCardType", ogloBillingCoPayment.CardType, ParameterDirection.Input, SqlDbType.VarChar);
    //                    oParameters.Add("@nCardExpiryDate", ogloBillingCoPayment.CardExpiryDate, ParameterDirection.Input, SqlDbType.BigInt);



    //                    int Val = oDB.Execute("BL_INUP_Transaction_Payment_CoPay", oParameters, out oTranCoPaymentID);

    //                    if (oTranCoPaymentID != null && Convert.ToInt64(oTranCoPaymentID) != 0)
    //                    {
    //                        _TransactionCoPaymentID = Convert.ToInt64(oTranCoPaymentID);
    //                        _result = _TransactionCoPaymentID;
    //                    }

    //                }
    //            }
    //            catch (Exception ex)
    //            {
    //                MessageBox.Show("ERROR : " + ex.ToString(), _messageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
    //            }
    //            finally
    //            {
    //                if (oDB != null) { oDB.Dispose(); }
    //                if (oParameters != null) { oParameters.Dispose(); }
    //            }
    //            return _result;
    //        }

    //        public decimal GetCoPayment(string BatchNumber, Int64 ClinicID)
    //        {
    //            //gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(_databaseconnectionstring);
    //            //object _intresult = new object();
    //            //decimal _result = 0;
    //            //string _strSQL = "";
    //            //decimal _BatchTotAmount = 0;

    //            //try
    //            //{
    //            //    oDB.Connect(false);

    //            //    if (BatchNumber.Trim() != "")
    //            //    {
    //            //        //Actual Amount
    //            //        _strSQL = "SELECT dPayerAmount FROM BL_Transaction_Payment_MST WHERE sBatchNumber = '" + BatchNumber + "' AND nClinicID = " + ClinicID + "";

    //            //        _intresult = oDB.ExecuteScalar_Query(_strSQL);
    //            //        if (_intresult != null)
    //            //        {
    //            //            if (_intresult.ToString() != null)
    //            //            {
    //            //                if (_intresult.ToString().Trim() != "")
    //            //                {
    //            //                    _BatchTotAmount = Convert.ToDecimal(_intresult.ToString());
    //            //                }
    //            //            }
    //            //        }

    //            //        //Paid Amount
    //            //        _strSQL = "SELECT SUM(BL_Transaction_Payment_DTL.dPaymentAmt) AS dPaymentAmt " +
    //            //        " FROM BL_Transaction_Payment_MST INNER JOIN BL_Transaction_Payment_DTL ON BL_Transaction_Payment_MST.nTransactionPaymentID = BL_Transaction_Payment_DTL.nTransactionPaymentID AND BL_Transaction_Payment_MST.nClinicID = BL_Transaction_Payment_DTL.nClinicID " +
    //            //        " WHERE (BL_Transaction_Payment_MST.sBatchNumber = '" + BatchNumber + "' AND BL_Transaction_Payment_MST.nClinicID = " + ClinicID + ")";

    //            //        _intresult = oDB.ExecuteScalar_Query(_strSQL);
    //            //        if (_intresult != null)
    //            //        {
    //            //            if (_intresult.ToString() != null)
    //            //            {
    //            //                if (_intresult.ToString().Trim() != "")
    //            //                {
    //            //                    _result = Convert.ToDecimal(_intresult.ToString());
    //            //                }
    //            //            }
    //            //        }

    //            //    }

    //            //}
    //            //catch (Exception ex)
    //            //{
    //            //    MessageBox.Show(ex.Message, "gloPM", MessageBoxButtons.OK, MessageBoxIcon.Error);
    //            //}
    //            //finally
    //            //{
    //            //    if (oDB.Connect(false))
    //            //    { oDB.Disconnect(); }
    //            //    if (oDB != null)
    //            //    { oDB.Dispose(); }
    //            //}
    //            //return _BatchTotAmount - _result;
    //            return 0;
    //        }

    //    #endregion "Supporting Methods"

    //}

    public class EMRExam
    {
        #region " ICD9 Driven Functions "

        public static DataTable GetDiagnosis(Int64 nExamID, Int64 nVisitID, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            DataTable _dtICDCPT = new DataTable();
            gloDatabaseLayer.DBParameters oParameters = null;

            try
            {
                oParameters = new gloDatabaseLayer.DBParameters();
                oParameters.Add("@nExamID", nExamID, ParameterDirection.Input, SqlDbType.BigInt);
                oParameters.Add("@nTreatmentType", _ExternalChargesType.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                oDB.Connect(false);
                oDB.Retrive("BL_GetDiagnosis", oParameters, out _dtICDCPT);
                oDB.Disconnect();

                //string _sqlQuery = string.Empty;
                //if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                //{
                //    _sqlQuery = " SELECT DISTINCT ISNULL(ExamICD9CPT.sICD9Code,'') AS sICD9Code,  ISNULL(ExamICD9CPT.sICD9Description,'') AS sICD9Description," +
                //                " ISNULL(ExamICD9CPT.nLineNo,0) as nLineNo FROM ExamICD9CPT WITH (NOLOCK) " +
                //                " WHERE  ExamICD9CPT.nExamID = " + nExamID +
                //                " Order By nLineNo ";
                //}
                //else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                //{
                //    _sqlQuery = " SELECT DISTINCT ISNULL(BL_ExternalChargesDTL.sICD9Code,'') AS sICD9Code,  ISNULL(BL_ExternalChargesDTL.sICD9Description,'') AS sICD9Description," +
                //              " ISNULL(BL_ExternalChargesDTL.nLineNo,0) as nLineNo FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                //              " WHERE  BL_ExternalChargesDTL.nExternalChargesID = " + nExamID +
                //              " Order By nLineNo ";
 
                //}
                //else if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRnHL7InboundCharges)
                //{

                //}

                //oDB.Connect(false);
                //oDB.Retrive_Query(_sqlQuery, out _dtICDCPT);
                //oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _dtICDCPT;
        }

        public static string GetEMRExamDOS(Int64 nExamID, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            String _sEMRExamDOS = String.Empty;
            DataTable _dtICDCPT = new DataTable();

            try
            {
                string _sqlQuery = string.Empty;

                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = "SELECT CONVERT(VARCHAR(20),dtDOS,101) AS dtDOS from PatientExams WITH (NOLOCK) where nExamID = " + nExamID;
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    _sqlQuery = "SELECT CONVERT(VARCHAR(20),dtDOS,101) AS dtDOS from BL_ExternalChargesMST WITH (NOLOCK) where nExternalChargesID = " + nExamID;
                }
          
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtICDCPT);

                if (_dtICDCPT.Rows.Count > 0)
                {
                    if (_dtICDCPT.Rows[0]["dtDOS"] != DBNull.Value)
                    {
                        _sEMRExamDOS = Convert.ToString(_dtICDCPT.Rows[0]["dtDOS"]);
                    }
                    else
                    {
                        _sEMRExamDOS = String.Format("{0:MM/dd/yyyy}", DateTime.Now);
                    }
                }
               
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _sEMRExamDOS;
        }

        public static DataTable GetCPTs(Int64 nExamID, Int64 nVisitID, string ICD9Code, int LineNo, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            DataTable _dtICDCPT = new DataTable();

            try
            {
                string _sqlQuery = string.Empty;
                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " SELECT ISNULL(ExamICD9CPT.sCPTcode,'') AS sCPTcode , ISNULL(ExamICD9CPT.sCPTDescription,'') AS sCPTDescription, " +
                                " ISNULL(ExamICD9CPT.nUnit,0) AS nUnit, ISNULL(ExamICD9CPT.nLineNo,0) as nLineNo  FROM ExamICD9CPT WITH (NOLOCK) " +
                                " WHERE ExamICD9CPT.nExamID = " + nExamID +
                                " AND ExamICD9CPT.sICD9Code = '" + ICD9Code.Replace("'","''") + "'" +
                                " AND ExamICD9CPT.nLineNo = '" + LineNo + "'" +
                                " Order By nLineNo ";
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    _sqlQuery = " SELECT ISNULL(BL_ExternalChargesDTL.sCPTcode,'') AS sCPTcode , ISNULL(BL_ExternalChargesDTL.sCPTDescription,'') AS sCPTDescription, " +
                               " ISNULL(BL_ExternalChargesDTL.nUnit,0) AS nUnit, ISNULL(BL_ExternalChargesDTL.nLineNo,0) as nLineNo  FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                               " WHERE BL_ExternalChargesDTL.nExternalChargesID = " + nExamID +
                               //" AND BL_ExternalChargesDTL.sICD9Code = '" + ICD9Code + "'" +
                               " AND BL_ExternalChargesDTL.nLineNo = '" + LineNo + "'" +
                               " Order By nLineNo ";
                }

                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtICDCPT);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _dtICDCPT;
        }

        public static DataTable GetModifiers(Int64 nExamID, Int64 nVisitID, string ICD9Code, string CPTCode, int LineNo, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            DataTable _dtICDCPT = new DataTable();

            try
            {
                string _sqlQuery = string.Empty;
                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " SELECT ISNULL(ExamICD9CPT.sModCode,'') AS sModCode, ISNULL(ExamICD9CPT.sModDescription,'') AS sModDescription, nUnit, nLineNo FROM ExamICD9CPT WITH (NOLOCK)  " +
                                " WHERE ExamICD9CPT.nExamID = " + nExamID + " AND (ExamICD9CPT.sModCode <> '') " +
                                " AND UPPER(ExamICD9CPT.sICD9Code) = '" + ICD9Code.Replace("'","''") + "'" +
                                " AND UPPER(ExamICD9CPT.sCPTcode) = '" + CPTCode.Replace("'", "''") + "'" +
                                " AND ExamICD9CPT.nLineNo =" + LineNo +
                                " Order By nLineNo ";
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    _sqlQuery = " SELECT ISNULL(BL_ExternalChargesDTL.sModCode,'') AS sModCode, ISNULL(BL_ExternalChargesDTL.sModDescription,'') AS sModDescription, nUnit, nLineNo FROM BL_ExternalChargesDTL WITH (NOLOCK)  " +
                             " WHERE BL_ExternalChargesDTL.nExternalChargesID = " + nExamID + " AND (BL_ExternalChargesDTL.sModCode <> '') " +
                             " AND UPPER(BL_ExternalChargesDTL.sICD9Code) = '" + ICD9Code.Replace("'", "''") + "'" +
                             " AND UPPER(BL_ExternalChargesDTL.sCPTcode) = '" + CPTCode.Replace("'", "''") + "'" +
                             " AND BL_ExternalChargesDTL.nLineNo =" + LineNo +
                             " Order By nLineNo ";
                }
               
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtICDCPT);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _dtICDCPT;
        }

        #endregion

        #region " CPT Driven Functions "

        public static DataTable GetCPTs(Int64 nExamID, Int64 nVisitID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            DataTable _dtCPTICD = new DataTable();

            try
            {
                string _sqlQuery = string.Empty;
              
                    _sqlQuery = " SELECT DISTINCT ExamICD9CPT.sCPTcode, ExamICD9CPT.sCPTDescription,PatientExams.dtDOS,ISNULL(ExamICD9CPT.nUnit,1) AS nUnit, ExamICD9CPT.nLineNo " +
                                   " FROM  ExamICD9CPT WITH (NOLOCK) LEFT OUTER JOIN PatientExams WITH (NOLOCK) ON ExamICD9CPT.nExamID = PatientExams.nExamID  " +
                                   " WHERE (ExamICD9CPT.nExamID = " + nExamID + ")" +
                                   " ORDER BY ExamICD9CPT.nLineNo   ";
              
                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtCPTICD);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _dtCPTICD;
        }

        public static DataTable GetCPTs(Int64 nExamID, Int64 nVisitID, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            DataTable _dtCPTICD = new DataTable();

            try
            {
                string _sqlQuery = string.Empty;
                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " SELECT DISTINCT ExamICD9CPT.sCPTcode, ExamICD9CPT.sCPTDescription,PatientExams.dtDOS,ISNULL(ExamICD9CPT.nUnit,1) AS nUnit, ExamICD9CPT.nLineNo " +
                                   " FROM  ExamICD9CPT WITH (NOLOCK) LEFT OUTER JOIN PatientExams WITH (NOLOCK) ON ExamICD9CPT.nExamID = PatientExams.nExamID  " +
                                   " WHERE (ExamICD9CPT.nExamID = " + nExamID + ")" +
                                   " ORDER BY ExamICD9CPT.nLineNo   ";
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    _sqlQuery = " SELECT DISTINCT BL_ExternalChargesDTL.sCPTcode, BL_ExternalChargesDTL.sCPTDescription,BL_ExternalChargesMST.dtDOS, "+
                                " ISNULL(BL_ExternalChargesDTL.nUnit,1) AS nUnit, BL_ExternalChargesDTL.nLineNo  "+
                                " FROM  BL_ExternalChargesDTL WITH (NOLOCK) LEFT OUTER JOIN BL_ExternalChargesMST WITH (NOLOCK) ON BL_ExternalChargesMST.nExternalChargesID = BL_ExternalChargesDTL.nExternalChargesID  " +
                                " WHERE (BL_ExternalChargesDTL.nExternalChargesID = " + nExamID + ") " +
                                " ORDER BY BL_ExternalChargesDTL.nLineNo  ";
                }


                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtCPTICD);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _dtCPTICD;
        }

        public static string GetDiagnosisString(Int64 nExamID, Int64 nVisitID, string CPTCode, int LineNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string dxList = string.Empty;

            try
            {
                string _sqlQuery = string.Empty;

                    _sqlQuery = " DECLARE @ICD9 varchar(MAX) " +
                                  " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                  " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                  " FROM ExamICD9CPT WITH (NOLOCK) " +
                                  " WHERE (nExamID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'","''") + "' AND nLineNo=" + LineNo +
                                  " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                  " SELECT @ICD9 ";
               
                oDB.Connect(false);
                dxList = Convert.ToString(oDB.ExecuteScalar_Query(_sqlQuery));
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dxList;
        }

        public static string GetDiagnosisString(Int64 nExamID, Int64 nVisitID, string CPTCode, int LineNo, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string dxList = string.Empty;

            try
            {
                string _sqlQuery = string.Empty;

                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " DECLARE @ICD9 varchar(MAX) " +
                                  " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                  " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                  " FROM ExamICD9CPT WITH (NOLOCK) " +
                                  " WHERE (nExamID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                                  " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                  " SELECT @ICD9 ";
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    if (CPTCode != "")
                    {
                        _sqlQuery = " DECLARE @ICD9 varchar(MAX) " +
                                     " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                     " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                     " FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                                     " WHERE (nExternalChargesID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                                     " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                     " SELECT isnull(@ICD9,'') as sICD9Code ";
                    }
                    else
                    {
                        _sqlQuery = " DECLARE @ICD9 varchar(MAX) " +
                                " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                " FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                                " WHERE (nExternalChargesID = " + nExamID + ") AND nLineNo=" + LineNo +
                                " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                " SELECT isnull(@ICD9,'') as sICD9Code ";
                    }


                }

                oDB.Connect(false);
                dxList = Convert.ToString(oDB.ExecuteScalar_Query(_sqlQuery));
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return dxList;
        }

        public static DataTable GetDiagnosisDataTable(Int64 nExamID, Int64 nVisitID, string CPTCode, int LineNo, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string dxList = string.Empty;
            DataTable _dtDx = null;

            try
            {
                string _sqlQuery = string.Empty;

                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " DECLARE @ICD9 varchar(MAX)  DECLARE @ICD9Desc VARCHAR(MAX)" +
                                  " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                  " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                  ",@ICD9Desc=COALESCE(@ICD9Desc + ',  ', '')+ CAST(LTRIM(RTRIM(sICD9Description)) AS VARCHAR(255)) " +
                                  " FROM ExamICD9CPT WITH (NOLOCK) " +
                                  " WHERE (nExamID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                                  " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                  " SELECT isnull(@ICD9,'') as sICD9Code, isnull(@ICD9Desc,'') as sICD9Desc  ";
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    if (CPTCode != "")
                    {
                        _sqlQuery = "  DECLARE @ICD9 varchar(MAX)  DECLARE @ICD9Desc VARCHAR(MAX)" +
                                  " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                  " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                  ",@ICD9Desc=COALESCE(@ICD9Desc + ',  ', '')+ CAST(LTRIM(RTRIM(sICD9Description)) AS VARCHAR(255)) " +
                                     " FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                                     " WHERE (nExternalChargesID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                                     " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                     " SELECT isnull(@ICD9,'') as sICD9Code, isnull(@ICD9Desc,'') as sICD9Desc ";
                    }
                    else
                    {
                        _sqlQuery = "  DECLARE @ICD9 varchar(MAX)  DECLARE @ICD9Desc VARCHAR(MAX)" +
                                  " SELECT @ICD9 = COALESCE(@ICD9 + ',  ', '') + " +
                                  " CAST(LTRIM(RTRIM(sICD9Code)) AS varchar(50)) " +
                                  ",@ICD9Desc=COALESCE(@ICD9Desc + ',  ', '')+ CAST(LTRIM(RTRIM(sICD9Description)) AS VARCHAR(255)) " +
                                " FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                                " WHERE (nExternalChargesID = " + nExamID + ") AND nLineNo=" + LineNo +
                                " AND sICD9Code IS NOT NULL AND sICD9Code <> '' " +
                                " SELECT isnull(@ICD9,'') as sICD9Code, isnull(@ICD9Desc,'') as sICD9Desc  ";
                    }


                }

                oDB.Connect(false);
                oDB.Retrive_Query(_sqlQuery, out _dtDx);
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
            }
            return _dtDx;
        }

        public static string GetModifiersString(Int64 nExamID, Int64 nVisitID, string CPTCode, int LineNo)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string modList = string.Empty;
            object _retVal = null;
            try
            {
                string _sqlQuery = string.Empty;

               
                    _sqlQuery = " DECLARE @MOD varchar(MAX) " +
                                   " SELECT @MOD = COALESCE(@MOD + ',  ', '') + " +
                                   " CAST(LTRIM(RTRIM(sModCode)) AS varchar(50)) " +
                                   " FROM ExamICD9CPT WITH (NOLOCK) " +
                                   " WHERE (nExamID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                                   " AND sModCode IS NOT NULL AND sModCode <> '' " +
                                   " SELECT @MOD ";
                oDB.Connect(false);
                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                {
                    modList = Convert.ToString(_retVal);
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }
            return modList;
        }

        public static string GetModifiersString(Int64 nExamID, Int64 nVisitID, string CPTCode, int LineNo, gloSettings.ExternalChargesType _ExternalChargesType)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string modList = string.Empty;
            object _retVal = null;
            try
            {
                string _sqlQuery = string.Empty;


                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " DECLARE @MOD varchar(MAX) " +
                                   " SELECT @MOD = COALESCE(@MOD + ',  ', '') + " +
                                   " CAST(LTRIM(RTRIM(sModCode)) AS varchar(50)) " +
                                   " FROM ExamICD9CPT WITH (NOLOCK) " +
                                   " WHERE (nExamID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                                   " AND sModCode IS NOT NULL AND sModCode <> '' " +
                                   " SELECT @MOD ";
                }
                else if (_ExternalChargesType == gloSettings.ExternalChargesType.HL7InboundCharges)
                {
                    _sqlQuery = " DECLARE @MOD varchar(MAX) " +
                               " SELECT @MOD = COALESCE(@MOD + ',  ', '') + " +
                               " CAST(LTRIM(RTRIM(sModCode)) AS varchar(50)) " +
                               " FROM BL_ExternalChargesDTL WITH (NOLOCK) " +
                               " WHERE (nExternalChargesID = " + nExamID + ") AND UPPER(sCPTcode)='" + CPTCode.Replace("'", "''") + "' AND nLineNo=" + LineNo +
                               " AND sModCode IS NOT NULL AND sModCode <> '' " +
                               " SELECT isnull(@MOD,'') as sModCode ";
                }

              
                oDB.Connect(false);
                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                if (_retVal != null && Convert.ToString(_retVal).Trim() != "")
                {
                    modList = Convert.ToString(_retVal);
                }
                oDB.Disconnect();
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.ToString());
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), false);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }
            return modList;
        }

        #endregion

        public static bool IsExamICDDriven()
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string _sqlQuery = "";
            object _retVal = null;
            bool _isExamICDDriven = false;

            try
            {
                _sqlQuery = " SELECT CONVERT(BIT,ISNULL(sSettingsValue,'0')) AS sSettingsValue FROM Settings WITH (NOLOCK) WHERE sSettingsName='EXAM DIAGNOSIS ' AND nClinicID = " + AppSettings.ClinicID;

                oDB.Connect(false);
                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();

                if (_retVal != null && Convert.ToString(_retVal).Trim() != "" && Convert.ToBoolean(_retVal) == true)
                { _isExamICDDriven = true; }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.Message);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }
            return _isExamICDDriven;
        }

        public static bool IsFullyPosted(ExternalChargesType _ExternalChargesType, Int64 nExamID)
        {
            gloDatabaseLayer.DBLayer oDB = new gloDatabaseLayer.DBLayer(gloGlobal.gloPMGlobal.DatabaseConnectionString);
            string _sqlQuery = "";
            object _retVal = null;
            bool _isFullyPosted = false;

            try
            {
                if (_ExternalChargesType == gloSettings.ExternalChargesType.gloEMRTreatment)
                {
                    _sqlQuery = " SELECT isnull(bisFullyPosted,0) as bisFullyPosted FROM BL_Transaction_EMR_DTL WITH (NOLOCK) WHERE nEMRExamID = " + nExamID;
                }
                else
                {
                    _sqlQuery = " SELECT isnull(bIsChargesGenerated,0) as bisFullyPosted FROM BL_ExternalChargesMST WITH (NOLOCK) WHERE nExternalChargesID = " + nExamID;
                }

                oDB.Connect(false);
                _retVal = oDB.ExecuteScalar_Query(_sqlQuery);
                oDB.Disconnect();

                if (_retVal != null && Convert.ToString(_retVal).Trim() != "" && Convert.ToBoolean(_retVal) == true)
                { _isFullyPosted = true; }
            }
            catch (gloDatabaseLayer.DBException dbEx)
            {
                dbEx.ERROR_Log(dbEx.Message);
            }
            catch (Exception ex)
            {
                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.ToString(), true);
            }
            finally
            {
                if (oDB != null) { oDB.Dispose(); }
                if (_retVal != null) { _retVal = null; }
            }
            return _isFullyPosted;
        }
    }

    public class PatientAppointment
    {
        public Int64 AppointmentID { get; set; }

        public override int GetHashCode()
        {
            return this.AppointmentID.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is PatientAppointment)
            {
                return (obj as PatientAppointment).AppointmentID == this.AppointmentID;
            }
            else
            { return false; }

        }
    }
}
