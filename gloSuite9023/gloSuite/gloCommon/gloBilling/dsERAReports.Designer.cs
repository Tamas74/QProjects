//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace gloBilling {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsERAReports")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsERAReports : global::System.Data.DataSet {
        
        private dt_ERADataTable tabledt_ERA;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsERAReports() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsERAReports(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dt_ERA"] != null)) {
                    base.Tables.Add(new dt_ERADataTable(ds.Tables["dt_ERA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dt_ERADataTable dt_ERA {
            get {
                return this.tabledt_ERA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsERAReports cln = ((dsERAReports)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dt_ERA"] != null)) {
                    base.Tables.Add(new dt_ERADataTable(ds.Tables["dt_ERA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledt_ERA = ((dt_ERADataTable)(base.Tables["dt_ERA"]));
            if ((initTable == true)) {
                if ((this.tabledt_ERA != null)) {
                    this.tabledt_ERA.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsERAReports";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsERAReports.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledt_ERA = new dt_ERADataTable();
            base.Tables.Add(this.tabledt_ERA);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedt_ERA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsERAReports ds = new dsERAReports();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dt_ERARowChangeEventHandler(object sender, dt_ERARowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dt_ERADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnnERAFileID;
            
            private global::System.Data.DataColumn columnnBPRID;
            
            private global::System.Data.DataColumn columnnCLPID;
            
            private global::System.Data.DataColumn columnnSVCID;
            
            private global::System.Data.DataColumn columnnLQID;
            
            private global::System.Data.DataColumn columnPracticeName;
            
            private global::System.Data.DataColumn columnPayerName;
            
            private global::System.Data.DataColumn columnPayerAddr1;
            
            private global::System.Data.DataColumn columnPayerAddr2;
            
            private global::System.Data.DataColumn columnPayerCity;
            
            private global::System.Data.DataColumn columnPayerState;
            
            private global::System.Data.DataColumn columnPayerZIP;
            
            private global::System.Data.DataColumn columnPayerContactInfo;
            
            private global::System.Data.DataColumn columnPayerID;
            
            private global::System.Data.DataColumn columnCheckDate;
            
            private global::System.Data.DataColumn columnCheckNo;
            
            private global::System.Data.DataColumn columnPaymentMethod;
            
            private global::System.Data.DataColumn columnProductionDate;
            
            private global::System.Data.DataColumn columnTotalClaimPaid;
            
            private global::System.Data.DataColumn columnTotalPLBAmount;
            
            private global::System.Data.DataColumn columnCheckAmount;
            
            private global::System.Data.DataColumn columnClaimNo;
            
            private global::System.Data.DataColumn columnClaimBilled;
            
            private global::System.Data.DataColumn columnClaimPaid;
            
            private global::System.Data.DataColumn columnTotalClaimAdjustments;
            
            private global::System.Data.DataColumn columnPatientResponsibleAmount;
            
            private global::System.Data.DataColumn columnClaimLevelAdjustmentsCodes;
            
            private global::System.Data.DataColumn columnPatientName;
            
            private global::System.Data.DataColumn columnPatientMember;
            
            private global::System.Data.DataColumn columnInsuredName;
            
            private global::System.Data.DataColumn columnInsuredMember;
            
            private global::System.Data.DataColumn columnRenderingProvider;
            
            private global::System.Data.DataColumn columnRenderingNPI;
            
            private global::System.Data.DataColumn columnICN;
            
            private global::System.Data.DataColumn columnClaimStatus;
            
            private global::System.Data.DataColumn columnClaimSupplementalInfo;
            
            private global::System.Data.DataColumn columnCorrectedPriorityPayer;
            
            private global::System.Data.DataColumn columnCorrectedInsured;
            
            private global::System.Data.DataColumn columnDOS;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnProcedureModifiers;
            
            private global::System.Data.DataColumn columnBilledAmount;
            
            private global::System.Data.DataColumn columnAllowedAmount;
            
            private global::System.Data.DataColumn columnDeductAmount;
            
            private global::System.Data.DataColumn columnCoInsuranceAmount;
            
            private global::System.Data.DataColumn columnCoPayAmount;
            
            private global::System.Data.DataColumn columnWriteoffAmount;
            
            private global::System.Data.DataColumn columnWithholdAmount;
            
            private global::System.Data.DataColumn columnProviderPaidAmount;
            
            private global::System.Data.DataColumn columnChargeSupplementalInfo;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnProviderNumber;
            
            private global::System.Data.DataColumn columnProviderDate;
            
            private global::System.Data.DataColumn columnReferenceInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_ERADataTable() {
                this.TableName = "dt_ERA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dt_ERADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dt_ERADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nERAFileIDColumn {
                get {
                    return this.columnnERAFileID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nBPRIDColumn {
                get {
                    return this.columnnBPRID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nCLPIDColumn {
                get {
                    return this.columnnCLPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nSVCIDColumn {
                get {
                    return this.columnnSVCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nLQIDColumn {
                get {
                    return this.columnnLQID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PracticeNameColumn {
                get {
                    return this.columnPracticeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerNameColumn {
                get {
                    return this.columnPayerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerAddr1Column {
                get {
                    return this.columnPayerAddr1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerAddr2Column {
                get {
                    return this.columnPayerAddr2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerCityColumn {
                get {
                    return this.columnPayerCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerStateColumn {
                get {
                    return this.columnPayerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerZIPColumn {
                get {
                    return this.columnPayerZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerContactInfoColumn {
                get {
                    return this.columnPayerContactInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayerIDColumn {
                get {
                    return this.columnPayerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckDateColumn {
                get {
                    return this.columnCheckDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckNoColumn {
                get {
                    return this.columnCheckNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentMethodColumn {
                get {
                    return this.columnPaymentMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductionDateColumn {
                get {
                    return this.columnProductionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalClaimPaidColumn {
                get {
                    return this.columnTotalClaimPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPLBAmountColumn {
                get {
                    return this.columnTotalPLBAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckAmountColumn {
                get {
                    return this.columnCheckAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimNoColumn {
                get {
                    return this.columnClaimNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimBilledColumn {
                get {
                    return this.columnClaimBilled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimPaidColumn {
                get {
                    return this.columnClaimPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalClaimAdjustmentsColumn {
                get {
                    return this.columnTotalClaimAdjustments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientResponsibleAmountColumn {
                get {
                    return this.columnPatientResponsibleAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimLevelAdjustmentsCodesColumn {
                get {
                    return this.columnClaimLevelAdjustmentsCodes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientNameColumn {
                get {
                    return this.columnPatientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatientMemberColumn {
                get {
                    return this.columnPatientMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuredNameColumn {
                get {
                    return this.columnInsuredName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuredMemberColumn {
                get {
                    return this.columnInsuredMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RenderingProviderColumn {
                get {
                    return this.columnRenderingProvider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RenderingNPIColumn {
                get {
                    return this.columnRenderingNPI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICNColumn {
                get {
                    return this.columnICN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimStatusColumn {
                get {
                    return this.columnClaimStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClaimSupplementalInfoColumn {
                get {
                    return this.columnClaimSupplementalInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CorrectedPriorityPayerColumn {
                get {
                    return this.columnCorrectedPriorityPayer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CorrectedInsuredColumn {
                get {
                    return this.columnCorrectedInsured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOSColumn {
                get {
                    return this.columnDOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcedureModifiersColumn {
                get {
                    return this.columnProcedureModifiers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BilledAmountColumn {
                get {
                    return this.columnBilledAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowedAmountColumn {
                get {
                    return this.columnAllowedAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeductAmountColumn {
                get {
                    return this.columnDeductAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoInsuranceAmountColumn {
                get {
                    return this.columnCoInsuranceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoPayAmountColumn {
                get {
                    return this.columnCoPayAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WriteoffAmountColumn {
                get {
                    return this.columnWriteoffAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WithholdAmountColumn {
                get {
                    return this.columnWithholdAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderPaidAmountColumn {
                get {
                    return this.columnProviderPaidAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeSupplementalInfoColumn {
                get {
                    return this.columnChargeSupplementalInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderNumberColumn {
                get {
                    return this.columnProviderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderDateColumn {
                get {
                    return this.columnProviderDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceInfoColumn {
                get {
                    return this.columnReferenceInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_ERARow this[int index] {
                get {
                    return ((dt_ERARow)(this.Rows[index]));
                }
            }
            
            public event dt_ERARowChangeEventHandler dt_ERARowChanging;
            
            public event dt_ERARowChangeEventHandler dt_ERARowChanged;
            
            public event dt_ERARowChangeEventHandler dt_ERARowDeleting;
            
            public event dt_ERARowChangeEventHandler dt_ERARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddt_ERARow(dt_ERARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_ERARow Adddt_ERARow(
                        double nERAFileID, 
                        double nBPRID, 
                        double nCLPID, 
                        double nSVCID, 
                        double nLQID, 
                        string PracticeName, 
                        string PayerName, 
                        string PayerAddr1, 
                        string PayerAddr2, 
                        string PayerCity, 
                        string PayerState, 
                        string PayerZIP, 
                        string PayerContactInfo, 
                        string PayerID, 
                        string CheckDate, 
                        string CheckNo, 
                        string PaymentMethod, 
                        string ProductionDate, 
                        decimal TotalClaimPaid, 
                        decimal TotalPLBAmount, 
                        decimal CheckAmount, 
                        string ClaimNo, 
                        decimal ClaimBilled, 
                        decimal ClaimPaid, 
                        decimal TotalClaimAdjustments, 
                        decimal PatientResponsibleAmount, 
                        string ClaimLevelAdjustmentsCodes, 
                        string PatientName, 
                        string PatientMember, 
                        string InsuredName, 
                        string InsuredMember, 
                        string RenderingProvider, 
                        string RenderingNPI, 
                        string ICN, 
                        string ClaimStatus, 
                        string ClaimSupplementalInfo, 
                        string CorrectedPriorityPayer, 
                        string CorrectedInsured, 
                        string DOS, 
                        string Unit, 
                        string ProcedureModifiers, 
                        decimal BilledAmount, 
                        string AllowedAmount, 
                        decimal DeductAmount, 
                        decimal CoInsuranceAmount, 
                        decimal CoPayAmount, 
                        decimal WriteoffAmount, 
                        decimal WithholdAmount, 
                        decimal ProviderPaidAmount, 
                        string ChargeSupplementalInfo, 
                        string Remark, 
                        string ProviderNumber, 
                        string ProviderDate, 
                        string ReferenceInfo) {
                dt_ERARow rowdt_ERARow = ((dt_ERARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nERAFileID,
                        nBPRID,
                        nCLPID,
                        nSVCID,
                        nLQID,
                        PracticeName,
                        PayerName,
                        PayerAddr1,
                        PayerAddr2,
                        PayerCity,
                        PayerState,
                        PayerZIP,
                        PayerContactInfo,
                        PayerID,
                        CheckDate,
                        CheckNo,
                        PaymentMethod,
                        ProductionDate,
                        TotalClaimPaid,
                        TotalPLBAmount,
                        CheckAmount,
                        ClaimNo,
                        ClaimBilled,
                        ClaimPaid,
                        TotalClaimAdjustments,
                        PatientResponsibleAmount,
                        ClaimLevelAdjustmentsCodes,
                        PatientName,
                        PatientMember,
                        InsuredName,
                        InsuredMember,
                        RenderingProvider,
                        RenderingNPI,
                        ICN,
                        ClaimStatus,
                        ClaimSupplementalInfo,
                        CorrectedPriorityPayer,
                        CorrectedInsured,
                        DOS,
                        Unit,
                        ProcedureModifiers,
                        BilledAmount,
                        AllowedAmount,
                        DeductAmount,
                        CoInsuranceAmount,
                        CoPayAmount,
                        WriteoffAmount,
                        WithholdAmount,
                        ProviderPaidAmount,
                        ChargeSupplementalInfo,
                        Remark,
                        ProviderNumber,
                        ProviderDate,
                        ReferenceInfo};
                rowdt_ERARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdt_ERARow);
                return rowdt_ERARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dt_ERADataTable cln = ((dt_ERADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dt_ERADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnERAFileID = base.Columns["nERAFileID"];
                this.columnnBPRID = base.Columns["nBPRID"];
                this.columnnCLPID = base.Columns["nCLPID"];
                this.columnnSVCID = base.Columns["nSVCID"];
                this.columnnLQID = base.Columns["nLQID"];
                this.columnPracticeName = base.Columns["PracticeName"];
                this.columnPayerName = base.Columns["PayerName"];
                this.columnPayerAddr1 = base.Columns["PayerAddr1"];
                this.columnPayerAddr2 = base.Columns["PayerAddr2"];
                this.columnPayerCity = base.Columns["PayerCity"];
                this.columnPayerState = base.Columns["PayerState"];
                this.columnPayerZIP = base.Columns["PayerZIP"];
                this.columnPayerContactInfo = base.Columns["PayerContactInfo"];
                this.columnPayerID = base.Columns["PayerID"];
                this.columnCheckDate = base.Columns["CheckDate"];
                this.columnCheckNo = base.Columns["CheckNo"];
                this.columnPaymentMethod = base.Columns["PaymentMethod"];
                this.columnProductionDate = base.Columns["ProductionDate"];
                this.columnTotalClaimPaid = base.Columns["TotalClaimPaid"];
                this.columnTotalPLBAmount = base.Columns["TotalPLBAmount"];
                this.columnCheckAmount = base.Columns["CheckAmount"];
                this.columnClaimNo = base.Columns["ClaimNo"];
                this.columnClaimBilled = base.Columns["ClaimBilled"];
                this.columnClaimPaid = base.Columns["ClaimPaid"];
                this.columnTotalClaimAdjustments = base.Columns["TotalClaimAdjustments"];
                this.columnPatientResponsibleAmount = base.Columns["PatientResponsibleAmount"];
                this.columnClaimLevelAdjustmentsCodes = base.Columns["ClaimLevelAdjustmentsCodes"];
                this.columnPatientName = base.Columns["PatientName"];
                this.columnPatientMember = base.Columns["PatientMember"];
                this.columnInsuredName = base.Columns["InsuredName"];
                this.columnInsuredMember = base.Columns["InsuredMember"];
                this.columnRenderingProvider = base.Columns["RenderingProvider"];
                this.columnRenderingNPI = base.Columns["RenderingNPI"];
                this.columnICN = base.Columns["ICN"];
                this.columnClaimStatus = base.Columns["ClaimStatus"];
                this.columnClaimSupplementalInfo = base.Columns["ClaimSupplementalInfo"];
                this.columnCorrectedPriorityPayer = base.Columns["CorrectedPriorityPayer"];
                this.columnCorrectedInsured = base.Columns["CorrectedInsured"];
                this.columnDOS = base.Columns["DOS"];
                this.columnUnit = base.Columns["Unit"];
                this.columnProcedureModifiers = base.Columns["ProcedureModifiers"];
                this.columnBilledAmount = base.Columns["BilledAmount"];
                this.columnAllowedAmount = base.Columns["AllowedAmount"];
                this.columnDeductAmount = base.Columns["DeductAmount"];
                this.columnCoInsuranceAmount = base.Columns["CoInsuranceAmount"];
                this.columnCoPayAmount = base.Columns["CoPayAmount"];
                this.columnWriteoffAmount = base.Columns["WriteoffAmount"];
                this.columnWithholdAmount = base.Columns["WithholdAmount"];
                this.columnProviderPaidAmount = base.Columns["ProviderPaidAmount"];
                this.columnChargeSupplementalInfo = base.Columns["ChargeSupplementalInfo"];
                this.columnRemark = base.Columns["Remark"];
                this.columnProviderNumber = base.Columns["ProviderNumber"];
                this.columnProviderDate = base.Columns["ProviderDate"];
                this.columnReferenceInfo = base.Columns["ReferenceInfo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnERAFileID = new global::System.Data.DataColumn("nERAFileID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnERAFileID);
                this.columnnBPRID = new global::System.Data.DataColumn("nBPRID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnBPRID);
                this.columnnCLPID = new global::System.Data.DataColumn("nCLPID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnCLPID);
                this.columnnSVCID = new global::System.Data.DataColumn("nSVCID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnSVCID);
                this.columnnLQID = new global::System.Data.DataColumn("nLQID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnLQID);
                this.columnPracticeName = new global::System.Data.DataColumn("PracticeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPracticeName);
                this.columnPayerName = new global::System.Data.DataColumn("PayerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerName);
                this.columnPayerAddr1 = new global::System.Data.DataColumn("PayerAddr1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerAddr1);
                this.columnPayerAddr2 = new global::System.Data.DataColumn("PayerAddr2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerAddr2);
                this.columnPayerCity = new global::System.Data.DataColumn("PayerCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerCity);
                this.columnPayerState = new global::System.Data.DataColumn("PayerState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerState);
                this.columnPayerZIP = new global::System.Data.DataColumn("PayerZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerZIP);
                this.columnPayerContactInfo = new global::System.Data.DataColumn("PayerContactInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerContactInfo);
                this.columnPayerID = new global::System.Data.DataColumn("PayerID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayerID);
                this.columnCheckDate = new global::System.Data.DataColumn("CheckDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckDate);
                this.columnCheckNo = new global::System.Data.DataColumn("CheckNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckNo);
                this.columnPaymentMethod = new global::System.Data.DataColumn("PaymentMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentMethod);
                this.columnProductionDate = new global::System.Data.DataColumn("ProductionDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductionDate);
                this.columnTotalClaimPaid = new global::System.Data.DataColumn("TotalClaimPaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalClaimPaid);
                this.columnTotalPLBAmount = new global::System.Data.DataColumn("TotalPLBAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPLBAmount);
                this.columnCheckAmount = new global::System.Data.DataColumn("CheckAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckAmount);
                this.columnClaimNo = new global::System.Data.DataColumn("ClaimNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimNo);
                this.columnClaimBilled = new global::System.Data.DataColumn("ClaimBilled", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimBilled);
                this.columnClaimPaid = new global::System.Data.DataColumn("ClaimPaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimPaid);
                this.columnTotalClaimAdjustments = new global::System.Data.DataColumn("TotalClaimAdjustments", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalClaimAdjustments);
                this.columnPatientResponsibleAmount = new global::System.Data.DataColumn("PatientResponsibleAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientResponsibleAmount);
                this.columnClaimLevelAdjustmentsCodes = new global::System.Data.DataColumn("ClaimLevelAdjustmentsCodes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimLevelAdjustmentsCodes);
                this.columnPatientName = new global::System.Data.DataColumn("PatientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientName);
                this.columnPatientMember = new global::System.Data.DataColumn("PatientMember", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatientMember);
                this.columnInsuredName = new global::System.Data.DataColumn("InsuredName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuredName);
                this.columnInsuredMember = new global::System.Data.DataColumn("InsuredMember", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuredMember);
                this.columnRenderingProvider = new global::System.Data.DataColumn("RenderingProvider", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRenderingProvider);
                this.columnRenderingNPI = new global::System.Data.DataColumn("RenderingNPI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRenderingNPI);
                this.columnICN = new global::System.Data.DataColumn("ICN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICN);
                this.columnClaimStatus = new global::System.Data.DataColumn("ClaimStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimStatus);
                this.columnClaimSupplementalInfo = new global::System.Data.DataColumn("ClaimSupplementalInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClaimSupplementalInfo);
                this.columnCorrectedPriorityPayer = new global::System.Data.DataColumn("CorrectedPriorityPayer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCorrectedPriorityPayer);
                this.columnCorrectedInsured = new global::System.Data.DataColumn("CorrectedInsured", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCorrectedInsured);
                this.columnDOS = new global::System.Data.DataColumn("DOS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOS);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnProcedureModifiers = new global::System.Data.DataColumn("ProcedureModifiers", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcedureModifiers);
                this.columnBilledAmount = new global::System.Data.DataColumn("BilledAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBilledAmount);
                this.columnAllowedAmount = new global::System.Data.DataColumn("AllowedAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowedAmount);
                this.columnDeductAmount = new global::System.Data.DataColumn("DeductAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeductAmount);
                this.columnCoInsuranceAmount = new global::System.Data.DataColumn("CoInsuranceAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoInsuranceAmount);
                this.columnCoPayAmount = new global::System.Data.DataColumn("CoPayAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoPayAmount);
                this.columnWriteoffAmount = new global::System.Data.DataColumn("WriteoffAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWriteoffAmount);
                this.columnWithholdAmount = new global::System.Data.DataColumn("WithholdAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWithholdAmount);
                this.columnProviderPaidAmount = new global::System.Data.DataColumn("ProviderPaidAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProviderPaidAmount);
                this.columnChargeSupplementalInfo = new global::System.Data.DataColumn("ChargeSupplementalInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargeSupplementalInfo);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnProviderNumber = new global::System.Data.DataColumn("ProviderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProviderNumber);
                this.columnProviderDate = new global::System.Data.DataColumn("ProviderDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProviderDate);
                this.columnReferenceInfo = new global::System.Data.DataColumn("ReferenceInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceInfo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_ERARow Newdt_ERARow() {
                return ((dt_ERARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dt_ERARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dt_ERARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dt_ERARowChanged != null)) {
                    this.dt_ERARowChanged(this, new dt_ERARowChangeEvent(((dt_ERARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dt_ERARowChanging != null)) {
                    this.dt_ERARowChanging(this, new dt_ERARowChangeEvent(((dt_ERARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dt_ERARowDeleted != null)) {
                    this.dt_ERARowDeleted(this, new dt_ERARowChangeEvent(((dt_ERARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dt_ERARowDeleting != null)) {
                    this.dt_ERARowDeleting(this, new dt_ERARowChangeEvent(((dt_ERARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedt_ERARow(dt_ERARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsERAReports ds = new dsERAReports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dt_ERADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dt_ERARow : global::System.Data.DataRow {
            
            private dt_ERADataTable tabledt_ERA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dt_ERARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledt_ERA = ((dt_ERADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double nERAFileID {
                get {
                    try {
                        return ((double)(this[this.tabledt_ERA.nERAFileIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nERAFileID\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.nERAFileIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double nBPRID {
                get {
                    try {
                        return ((double)(this[this.tabledt_ERA.nBPRIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nBPRID\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.nBPRIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double nCLPID {
                get {
                    try {
                        return ((double)(this[this.tabledt_ERA.nCLPIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nCLPID\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.nCLPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double nSVCID {
                get {
                    try {
                        return ((double)(this[this.tabledt_ERA.nSVCIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nSVCID\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.nSVCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double nLQID {
                get {
                    try {
                        return ((double)(this[this.tabledt_ERA.nLQIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nLQID\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.nLQIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PracticeName {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PracticeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PracticeName\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PracticeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerName {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerName\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerAddr1 {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerAddr1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerAddr1\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerAddr1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerAddr2 {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerAddr2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerAddr2\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerAddr2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerCity {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerCity\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerState {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerState\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerZIP {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerZIP\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerContactInfo {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerContactInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerContactInfo\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerContactInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PayerID {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PayerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayerID\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PayerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckDate {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.CheckDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckDate\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CheckDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckNo {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.CheckNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckNo\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CheckNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentMethod {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PaymentMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentMethod\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PaymentMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductionDate {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ProductionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductionDate\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ProductionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalClaimPaid {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.TotalClaimPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalClaimPaid\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.TotalClaimPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalPLBAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.TotalPLBAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPLBAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.TotalPLBAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CheckAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.CheckAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CheckAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimNo {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ClaimNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimNo\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ClaimNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ClaimBilled {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.ClaimBilledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimBilled\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ClaimBilledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ClaimPaid {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.ClaimPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimPaid\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ClaimPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalClaimAdjustments {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.TotalClaimAdjustmentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalClaimAdjustments\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.TotalClaimAdjustmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PatientResponsibleAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.PatientResponsibleAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientResponsibleAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PatientResponsibleAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimLevelAdjustmentsCodes {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ClaimLevelAdjustmentsCodesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimLevelAdjustmentsCodes\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ClaimLevelAdjustmentsCodesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientName {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PatientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientName\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PatientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PatientMember {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.PatientMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PatientMember\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.PatientMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuredName {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.InsuredNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuredName\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.InsuredNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuredMember {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.InsuredMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuredMember\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.InsuredMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RenderingProvider {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.RenderingProviderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RenderingProvider\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.RenderingProviderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RenderingNPI {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.RenderingNPIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RenderingNPI\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.RenderingNPIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ICN {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ICNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICN\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ICNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimStatus {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ClaimStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimStatus\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ClaimStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClaimSupplementalInfo {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ClaimSupplementalInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClaimSupplementalInfo\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ClaimSupplementalInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CorrectedPriorityPayer {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.CorrectedPriorityPayerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CorrectedPriorityPayer\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CorrectedPriorityPayerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CorrectedInsured {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.CorrectedInsuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CorrectedInsured\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CorrectedInsuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOS {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.DOSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOS\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.DOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProcedureModifiers {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ProcedureModifiersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProcedureModifiers\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ProcedureModifiersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BilledAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.BilledAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BilledAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.BilledAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowedAmount {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.AllowedAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllowedAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.AllowedAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DeductAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.DeductAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeductAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.DeductAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CoInsuranceAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.CoInsuranceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoInsuranceAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CoInsuranceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CoPayAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.CoPayAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoPayAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.CoPayAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WriteoffAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.WriteoffAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WriteoffAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.WriteoffAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WithholdAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.WithholdAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WithholdAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.WithholdAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ProviderPaidAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledt_ERA.ProviderPaidAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProviderPaidAmount\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ProviderPaidAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChargeSupplementalInfo {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ChargeSupplementalInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChargeSupplementalInfo\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ChargeSupplementalInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProviderNumber {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ProviderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProviderNumber\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ProviderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProviderDate {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ProviderDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProviderDate\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ProviderDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferenceInfo {
                get {
                    try {
                        return ((string)(this[this.tabledt_ERA.ReferenceInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferenceInfo\' in table \'dt_ERA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_ERA.ReferenceInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnERAFileIDNull() {
                return this.IsNull(this.tabledt_ERA.nERAFileIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnERAFileIDNull() {
                this[this.tabledt_ERA.nERAFileIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnBPRIDNull() {
                return this.IsNull(this.tabledt_ERA.nBPRIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnBPRIDNull() {
                this[this.tabledt_ERA.nBPRIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnCLPIDNull() {
                return this.IsNull(this.tabledt_ERA.nCLPIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnCLPIDNull() {
                this[this.tabledt_ERA.nCLPIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnSVCIDNull() {
                return this.IsNull(this.tabledt_ERA.nSVCIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnSVCIDNull() {
                this[this.tabledt_ERA.nSVCIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnLQIDNull() {
                return this.IsNull(this.tabledt_ERA.nLQIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnLQIDNull() {
                this[this.tabledt_ERA.nLQIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPracticeNameNull() {
                return this.IsNull(this.tabledt_ERA.PracticeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPracticeNameNull() {
                this[this.tabledt_ERA.PracticeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerNameNull() {
                return this.IsNull(this.tabledt_ERA.PayerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerNameNull() {
                this[this.tabledt_ERA.PayerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerAddr1Null() {
                return this.IsNull(this.tabledt_ERA.PayerAddr1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerAddr1Null() {
                this[this.tabledt_ERA.PayerAddr1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerAddr2Null() {
                return this.IsNull(this.tabledt_ERA.PayerAddr2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerAddr2Null() {
                this[this.tabledt_ERA.PayerAddr2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerCityNull() {
                return this.IsNull(this.tabledt_ERA.PayerCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerCityNull() {
                this[this.tabledt_ERA.PayerCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerStateNull() {
                return this.IsNull(this.tabledt_ERA.PayerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerStateNull() {
                this[this.tabledt_ERA.PayerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerZIPNull() {
                return this.IsNull(this.tabledt_ERA.PayerZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerZIPNull() {
                this[this.tabledt_ERA.PayerZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerContactInfoNull() {
                return this.IsNull(this.tabledt_ERA.PayerContactInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerContactInfoNull() {
                this[this.tabledt_ERA.PayerContactInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayerIDNull() {
                return this.IsNull(this.tabledt_ERA.PayerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayerIDNull() {
                this[this.tabledt_ERA.PayerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckDateNull() {
                return this.IsNull(this.tabledt_ERA.CheckDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckDateNull() {
                this[this.tabledt_ERA.CheckDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckNoNull() {
                return this.IsNull(this.tabledt_ERA.CheckNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckNoNull() {
                this[this.tabledt_ERA.CheckNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentMethodNull() {
                return this.IsNull(this.tabledt_ERA.PaymentMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentMethodNull() {
                this[this.tabledt_ERA.PaymentMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionDateNull() {
                return this.IsNull(this.tabledt_ERA.ProductionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionDateNull() {
                this[this.tabledt_ERA.ProductionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalClaimPaidNull() {
                return this.IsNull(this.tabledt_ERA.TotalClaimPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalClaimPaidNull() {
                this[this.tabledt_ERA.TotalClaimPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPLBAmountNull() {
                return this.IsNull(this.tabledt_ERA.TotalPLBAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPLBAmountNull() {
                this[this.tabledt_ERA.TotalPLBAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckAmountNull() {
                return this.IsNull(this.tabledt_ERA.CheckAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckAmountNull() {
                this[this.tabledt_ERA.CheckAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimNoNull() {
                return this.IsNull(this.tabledt_ERA.ClaimNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimNoNull() {
                this[this.tabledt_ERA.ClaimNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimBilledNull() {
                return this.IsNull(this.tabledt_ERA.ClaimBilledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimBilledNull() {
                this[this.tabledt_ERA.ClaimBilledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimPaidNull() {
                return this.IsNull(this.tabledt_ERA.ClaimPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimPaidNull() {
                this[this.tabledt_ERA.ClaimPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalClaimAdjustmentsNull() {
                return this.IsNull(this.tabledt_ERA.TotalClaimAdjustmentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalClaimAdjustmentsNull() {
                this[this.tabledt_ERA.TotalClaimAdjustmentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientResponsibleAmountNull() {
                return this.IsNull(this.tabledt_ERA.PatientResponsibleAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientResponsibleAmountNull() {
                this[this.tabledt_ERA.PatientResponsibleAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimLevelAdjustmentsCodesNull() {
                return this.IsNull(this.tabledt_ERA.ClaimLevelAdjustmentsCodesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimLevelAdjustmentsCodesNull() {
                this[this.tabledt_ERA.ClaimLevelAdjustmentsCodesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientNameNull() {
                return this.IsNull(this.tabledt_ERA.PatientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientNameNull() {
                this[this.tabledt_ERA.PatientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatientMemberNull() {
                return this.IsNull(this.tabledt_ERA.PatientMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatientMemberNull() {
                this[this.tabledt_ERA.PatientMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuredNameNull() {
                return this.IsNull(this.tabledt_ERA.InsuredNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuredNameNull() {
                this[this.tabledt_ERA.InsuredNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuredMemberNull() {
                return this.IsNull(this.tabledt_ERA.InsuredMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuredMemberNull() {
                this[this.tabledt_ERA.InsuredMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRenderingProviderNull() {
                return this.IsNull(this.tabledt_ERA.RenderingProviderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRenderingProviderNull() {
                this[this.tabledt_ERA.RenderingProviderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRenderingNPINull() {
                return this.IsNull(this.tabledt_ERA.RenderingNPIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRenderingNPINull() {
                this[this.tabledt_ERA.RenderingNPIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICNNull() {
                return this.IsNull(this.tabledt_ERA.ICNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICNNull() {
                this[this.tabledt_ERA.ICNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimStatusNull() {
                return this.IsNull(this.tabledt_ERA.ClaimStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimStatusNull() {
                this[this.tabledt_ERA.ClaimStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClaimSupplementalInfoNull() {
                return this.IsNull(this.tabledt_ERA.ClaimSupplementalInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClaimSupplementalInfoNull() {
                this[this.tabledt_ERA.ClaimSupplementalInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCorrectedPriorityPayerNull() {
                return this.IsNull(this.tabledt_ERA.CorrectedPriorityPayerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCorrectedPriorityPayerNull() {
                this[this.tabledt_ERA.CorrectedPriorityPayerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCorrectedInsuredNull() {
                return this.IsNull(this.tabledt_ERA.CorrectedInsuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCorrectedInsuredNull() {
                this[this.tabledt_ERA.CorrectedInsuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOSNull() {
                return this.IsNull(this.tabledt_ERA.DOSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOSNull() {
                this[this.tabledt_ERA.DOSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabledt_ERA.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabledt_ERA.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcedureModifiersNull() {
                return this.IsNull(this.tabledt_ERA.ProcedureModifiersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcedureModifiersNull() {
                this[this.tabledt_ERA.ProcedureModifiersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBilledAmountNull() {
                return this.IsNull(this.tabledt_ERA.BilledAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBilledAmountNull() {
                this[this.tabledt_ERA.BilledAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowedAmountNull() {
                return this.IsNull(this.tabledt_ERA.AllowedAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowedAmountNull() {
                this[this.tabledt_ERA.AllowedAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeductAmountNull() {
                return this.IsNull(this.tabledt_ERA.DeductAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeductAmountNull() {
                this[this.tabledt_ERA.DeductAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoInsuranceAmountNull() {
                return this.IsNull(this.tabledt_ERA.CoInsuranceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoInsuranceAmountNull() {
                this[this.tabledt_ERA.CoInsuranceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoPayAmountNull() {
                return this.IsNull(this.tabledt_ERA.CoPayAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoPayAmountNull() {
                this[this.tabledt_ERA.CoPayAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWriteoffAmountNull() {
                return this.IsNull(this.tabledt_ERA.WriteoffAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWriteoffAmountNull() {
                this[this.tabledt_ERA.WriteoffAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWithholdAmountNull() {
                return this.IsNull(this.tabledt_ERA.WithholdAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWithholdAmountNull() {
                this[this.tabledt_ERA.WithholdAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderPaidAmountNull() {
                return this.IsNull(this.tabledt_ERA.ProviderPaidAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderPaidAmountNull() {
                this[this.tabledt_ERA.ProviderPaidAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeSupplementalInfoNull() {
                return this.IsNull(this.tabledt_ERA.ChargeSupplementalInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeSupplementalInfoNull() {
                this[this.tabledt_ERA.ChargeSupplementalInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tabledt_ERA.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tabledt_ERA.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderNumberNull() {
                return this.IsNull(this.tabledt_ERA.ProviderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderNumberNull() {
                this[this.tabledt_ERA.ProviderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderDateNull() {
                return this.IsNull(this.tabledt_ERA.ProviderDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderDateNull() {
                this[this.tabledt_ERA.ProviderDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceInfoNull() {
                return this.IsNull(this.tabledt_ERA.ReferenceInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceInfoNull() {
                this[this.tabledt_ERA.ReferenceInfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dt_ERARowChangeEvent : global::System.EventArgs {
            
            private dt_ERARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_ERARowChangeEvent(dt_ERARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_ERARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591