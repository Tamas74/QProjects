//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace gloEDI.AlphaIIWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EnterpriseServicesSoap", Namespace="https://filestaker.net/")]
    public partial class EnterpriseServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ScrubOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditCodeFlagsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EnterpriseServices() {
            this.Url = global::gloEDI.Properties.Settings.Default.gloEDI_AlphaIIWebService_EnterpriseServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ScrubCompletedEventHandler ScrubCompleted;
        
        /// <remarks/>
        public event EditCodeFlagsCompletedEventHandler EditCodeFlagsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://filestaker.net/Scrub", RequestNamespace="https://filestaker.net/", ResponseNamespace="https://filestaker.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Scrub(string EDIServer, string Submitter, string UID, string PW, string RPTType, string EDIData) {
            object[] results = this.Invoke("Scrub", new object[] {
                        EDIServer,
                        Submitter,
                        UID,
                        PW,
                        RPTType,
                        EDIData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ScrubAsync(string EDIServer, string Submitter, string UID, string PW, string RPTType, string EDIData) {
            this.ScrubAsync(EDIServer, Submitter, UID, PW, RPTType, EDIData, null);
        }
        
        /// <remarks/>
        public void ScrubAsync(string EDIServer, string Submitter, string UID, string PW, string RPTType, string EDIData, object userState) {
            if ((this.ScrubOperationCompleted == null)) {
                this.ScrubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScrubOperationCompleted);
            }
            this.InvokeAsync("Scrub", new object[] {
                        EDIServer,
                        Submitter,
                        UID,
                        PW,
                        RPTType,
                        EDIData}, this.ScrubOperationCompleted, userState);
        }
        
        private void OnScrubOperationCompleted(object arg) {
            if ((this.ScrubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScrubCompleted(this, new ScrubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://filestaker.net/EditCodeFlags", RequestNamespace="https://filestaker.net/", ResponseNamespace="https://filestaker.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EditItem[] EditCodeFlags(string submitterId, string userId, string passWord, string tokenString, string patientGender, string patientDOB, string serviceDate) {
            object[] results = this.Invoke("EditCodeFlags", new object[] {
                        submitterId,
                        userId,
                        passWord,
                        tokenString,
                        patientGender,
                        patientDOB,
                        serviceDate});
            return ((EditItem[])(results[0]));
        }
        
        /// <remarks/>
        public void EditCodeFlagsAsync(string submitterId, string userId, string passWord, string tokenString, string patientGender, string patientDOB, string serviceDate) {
            this.EditCodeFlagsAsync(submitterId, userId, passWord, tokenString, patientGender, patientDOB, serviceDate, null);
        }
        
        /// <remarks/>
        public void EditCodeFlagsAsync(string submitterId, string userId, string passWord, string tokenString, string patientGender, string patientDOB, string serviceDate, object userState) {
            if ((this.EditCodeFlagsOperationCompleted == null)) {
                this.EditCodeFlagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditCodeFlagsOperationCompleted);
            }
            this.InvokeAsync("EditCodeFlags", new object[] {
                        submitterId,
                        userId,
                        passWord,
                        tokenString,
                        patientGender,
                        patientDOB,
                        serviceDate}, this.EditCodeFlagsOperationCompleted, userState);
        }
        
        private void OnEditCodeFlagsOperationCompleted(object arg) {
            if ((this.EditCodeFlagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditCodeFlagsCompleted(this, new EditCodeFlagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://filestaker.net/AlphaII")]
    public partial class EditItem {
        
        private string idField;
        
        private string descriptionField;
        
        private string adjDescriptionField;
        
        private string nameField;
        
        private string severityField;
        
        private string categoryField;
        
        private string codeValueField;
        
        private int sequenceField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string AdjDescription {
            get {
                return this.adjDescriptionField;
            }
            set {
                this.adjDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public string CodeValue {
            get {
                return this.codeValueField;
            }
            set {
                this.codeValueField = value;
            }
        }
        
        /// <remarks/>
        public int Sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ScrubCompletedEventHandler(object sender, ScrubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScrubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScrubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EditCodeFlagsCompletedEventHandler(object sender, EditCodeFlagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditCodeFlagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditCodeFlagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EditItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EditItem[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591