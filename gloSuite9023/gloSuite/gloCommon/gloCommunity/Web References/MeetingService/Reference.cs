//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.544.
// 
#pragma warning disable 1591

namespace gloCommunity.MeetingService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MeetingsSoap", Namespace="http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class Meetings : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateWorkspaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWorkspaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeetingWorkspacesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWorkspaceTitleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMeetingFromICalOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMeetingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMeetingFromICalOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMeetingOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMeetingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAttendeeResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeetingsInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RestoreMeetingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Meetings() {
            this.Url = global::gloCommunity.Properties.Settings.Default.gloCommunity_MeetingService_Meetings;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateWorkspaceCompletedEventHandler CreateWorkspaceCompleted;
        
        /// <remarks/>
        public event DeleteWorkspaceCompletedEventHandler DeleteWorkspaceCompleted;
        
        /// <remarks/>
        public event GetMeetingWorkspacesCompletedEventHandler GetMeetingWorkspacesCompleted;
        
        /// <remarks/>
        public event SetWorkspaceTitleCompletedEventHandler SetWorkspaceTitleCompleted;
        
        /// <remarks/>
        public event AddMeetingFromICalCompletedEventHandler AddMeetingFromICalCompleted;
        
        /// <remarks/>
        public event AddMeetingCompletedEventHandler AddMeetingCompleted;
        
        /// <remarks/>
        public event UpdateMeetingFromICalCompletedEventHandler UpdateMeetingFromICalCompleted;
        
        /// <remarks/>
        public event UpdateMeetingCompletedEventHandler UpdateMeetingCompleted;
        
        /// <remarks/>
        public event RemoveMeetingCompletedEventHandler RemoveMeetingCompleted;
        
        /// <remarks/>
        public event SetAttendeeResponseCompletedEventHandler SetAttendeeResponseCompleted;
        
        /// <remarks/>
        public event GetMeetingsInformationCompletedEventHandler GetMeetingsInformationCompleted;
        
        /// <remarks/>
        public event RestoreMeetingCompletedEventHandler RestoreMeetingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/CreateWorkspace", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CreateWorkspace(string title, string templateName, uint lcid, TimeZoneInf timeZoneInformation) {
            object[] results = this.Invoke("CreateWorkspace", new object[] {
                        title,
                        templateName,
                        lcid,
                        timeZoneInformation});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWorkspaceAsync(string title, string templateName, uint lcid, TimeZoneInf timeZoneInformation) {
            this.CreateWorkspaceAsync(title, templateName, lcid, timeZoneInformation, null);
        }
        
        /// <remarks/>
        public void CreateWorkspaceAsync(string title, string templateName, uint lcid, TimeZoneInf timeZoneInformation, object userState) {
            if ((this.CreateWorkspaceOperationCompleted == null)) {
                this.CreateWorkspaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWorkspaceOperationCompleted);
            }
            this.InvokeAsync("CreateWorkspace", new object[] {
                        title,
                        templateName,
                        lcid,
                        timeZoneInformation}, this.CreateWorkspaceOperationCompleted, userState);
        }
        
        private void OnCreateWorkspaceOperationCompleted(object arg) {
            if ((this.CreateWorkspaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWorkspaceCompleted(this, new CreateWorkspaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/DeleteWorkspace", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWorkspace() {
            this.Invoke("DeleteWorkspace", new object[0]);
        }
        
        /// <remarks/>
        public void DeleteWorkspaceAsync() {
            this.DeleteWorkspaceAsync(null);
        }
        
        /// <remarks/>
        public void DeleteWorkspaceAsync(object userState) {
            if ((this.DeleteWorkspaceOperationCompleted == null)) {
                this.DeleteWorkspaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWorkspaceOperationCompleted);
            }
            this.InvokeAsync("DeleteWorkspace", new object[0], this.DeleteWorkspaceOperationCompleted, userState);
        }
        
        private void OnDeleteWorkspaceOperationCompleted(object arg) {
            if ((this.DeleteWorkspaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWorkspaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/GetMeetingWorkspaces", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMeetingWorkspaces(bool recurring) {
            object[] results = this.Invoke("GetMeetingWorkspaces", new object[] {
                        recurring});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMeetingWorkspacesAsync(bool recurring) {
            this.GetMeetingWorkspacesAsync(recurring, null);
        }
        
        /// <remarks/>
        public void GetMeetingWorkspacesAsync(bool recurring, object userState) {
            if ((this.GetMeetingWorkspacesOperationCompleted == null)) {
                this.GetMeetingWorkspacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeetingWorkspacesOperationCompleted);
            }
            this.InvokeAsync("GetMeetingWorkspaces", new object[] {
                        recurring}, this.GetMeetingWorkspacesOperationCompleted, userState);
        }
        
        private void OnGetMeetingWorkspacesOperationCompleted(object arg) {
            if ((this.GetMeetingWorkspacesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeetingWorkspacesCompleted(this, new GetMeetingWorkspacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/SetWorkspaceTitle", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWorkspaceTitle(string title) {
            this.Invoke("SetWorkspaceTitle", new object[] {
                        title});
        }
        
        /// <remarks/>
        public void SetWorkspaceTitleAsync(string title) {
            this.SetWorkspaceTitleAsync(title, null);
        }
        
        /// <remarks/>
        public void SetWorkspaceTitleAsync(string title, object userState) {
            if ((this.SetWorkspaceTitleOperationCompleted == null)) {
                this.SetWorkspaceTitleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWorkspaceTitleOperationCompleted);
            }
            this.InvokeAsync("SetWorkspaceTitle", new object[] {
                        title}, this.SetWorkspaceTitleOperationCompleted, userState);
        }
        
        private void OnSetWorkspaceTitleOperationCompleted(object arg) {
            if ((this.SetWorkspaceTitleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWorkspaceTitleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/AddMeetingFromICal", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddMeetingFromICal(string organizerEmail, string icalText) {
            object[] results = this.Invoke("AddMeetingFromICal", new object[] {
                        organizerEmail,
                        icalText});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddMeetingFromICalAsync(string organizerEmail, string icalText) {
            this.AddMeetingFromICalAsync(organizerEmail, icalText, null);
        }
        
        /// <remarks/>
        public void AddMeetingFromICalAsync(string organizerEmail, string icalText, object userState) {
            if ((this.AddMeetingFromICalOperationCompleted == null)) {
                this.AddMeetingFromICalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMeetingFromICalOperationCompleted);
            }
            this.InvokeAsync("AddMeetingFromICal", new object[] {
                        organizerEmail,
                        icalText}, this.AddMeetingFromICalOperationCompleted, userState);
        }
        
        private void OnAddMeetingFromICalOperationCompleted(object arg) {
            if ((this.AddMeetingFromICalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMeetingFromICalCompleted(this, new AddMeetingFromICalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/AddMeeting", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddMeeting(string organizerEmail, string uid, uint sequence, System.DateTime utcDateStamp, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian) {
            object[] results = this.Invoke("AddMeeting", new object[] {
                        organizerEmail,
                        uid,
                        sequence,
                        utcDateStamp,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddMeetingAsync(string organizerEmail, string uid, uint sequence, System.DateTime utcDateStamp, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian) {
            this.AddMeetingAsync(organizerEmail, uid, sequence, utcDateStamp, title, location, utcDateStart, utcDateEnd, nonGregorian, null);
        }
        
        /// <remarks/>
        public void AddMeetingAsync(string organizerEmail, string uid, uint sequence, System.DateTime utcDateStamp, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, object userState) {
            if ((this.AddMeetingOperationCompleted == null)) {
                this.AddMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMeetingOperationCompleted);
            }
            this.InvokeAsync("AddMeeting", new object[] {
                        organizerEmail,
                        uid,
                        sequence,
                        utcDateStamp,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian}, this.AddMeetingOperationCompleted, userState);
        }
        
        private void OnAddMeetingOperationCompleted(object arg) {
            if ((this.AddMeetingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMeetingCompleted(this, new AddMeetingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/UpdateMeetingFromICal", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateMeetingFromICal(string icalText, bool ignoreAttendees) {
            object[] results = this.Invoke("UpdateMeetingFromICal", new object[] {
                        icalText,
                        ignoreAttendees});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMeetingFromICalAsync(string icalText, bool ignoreAttendees) {
            this.UpdateMeetingFromICalAsync(icalText, ignoreAttendees, null);
        }
        
        /// <remarks/>
        public void UpdateMeetingFromICalAsync(string icalText, bool ignoreAttendees, object userState) {
            if ((this.UpdateMeetingFromICalOperationCompleted == null)) {
                this.UpdateMeetingFromICalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMeetingFromICalOperationCompleted);
            }
            this.InvokeAsync("UpdateMeetingFromICal", new object[] {
                        icalText,
                        ignoreAttendees}, this.UpdateMeetingFromICalOperationCompleted, userState);
        }
        
        private void OnUpdateMeetingFromICalOperationCompleted(object arg) {
            if ((this.UpdateMeetingFromICalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMeetingFromICalCompleted(this, new UpdateMeetingFromICalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/UpdateMeeting", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMeeting(string uid, uint sequence, System.DateTime utcDateStamp, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian) {
            this.Invoke("UpdateMeeting", new object[] {
                        uid,
                        sequence,
                        utcDateStamp,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian});
        }
        
        /// <remarks/>
        public void UpdateMeetingAsync(string uid, uint sequence, System.DateTime utcDateStamp, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian) {
            this.UpdateMeetingAsync(uid, sequence, utcDateStamp, title, location, utcDateStart, utcDateEnd, nonGregorian, null);
        }
        
        /// <remarks/>
        public void UpdateMeetingAsync(string uid, uint sequence, System.DateTime utcDateStamp, string title, string location, System.DateTime utcDateStart, System.DateTime utcDateEnd, bool nonGregorian, object userState) {
            if ((this.UpdateMeetingOperationCompleted == null)) {
                this.UpdateMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMeetingOperationCompleted);
            }
            this.InvokeAsync("UpdateMeeting", new object[] {
                        uid,
                        sequence,
                        utcDateStamp,
                        title,
                        location,
                        utcDateStart,
                        utcDateEnd,
                        nonGregorian}, this.UpdateMeetingOperationCompleted, userState);
        }
        
        private void OnUpdateMeetingOperationCompleted(object arg) {
            if ((this.UpdateMeetingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMeetingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/RemoveMeeting", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMeeting(uint recurrenceId, string uid, uint sequence, System.DateTime utcDateStamp, bool cancelMeeting) {
            this.Invoke("RemoveMeeting", new object[] {
                        recurrenceId,
                        uid,
                        sequence,
                        utcDateStamp,
                        cancelMeeting});
        }
        
        /// <remarks/>
        public void RemoveMeetingAsync(uint recurrenceId, string uid, uint sequence, System.DateTime utcDateStamp, bool cancelMeeting) {
            this.RemoveMeetingAsync(recurrenceId, uid, sequence, utcDateStamp, cancelMeeting, null);
        }
        
        /// <remarks/>
        public void RemoveMeetingAsync(uint recurrenceId, string uid, uint sequence, System.DateTime utcDateStamp, bool cancelMeeting, object userState) {
            if ((this.RemoveMeetingOperationCompleted == null)) {
                this.RemoveMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMeetingOperationCompleted);
            }
            this.InvokeAsync("RemoveMeeting", new object[] {
                        recurrenceId,
                        uid,
                        sequence,
                        utcDateStamp,
                        cancelMeeting}, this.RemoveMeetingOperationCompleted, userState);
        }
        
        private void OnRemoveMeetingOperationCompleted(object arg) {
            if ((this.RemoveMeetingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMeetingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/SetAttendeeResponse", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAttendeeResponse(string attendeeEmail, uint recurrenceId, string uid, uint sequence, System.DateTime utcDateTimeOrganizerCriticalChange, System.DateTime utcDateTimeAttendeeCriticalChange, AttendeeResponse response) {
            this.Invoke("SetAttendeeResponse", new object[] {
                        attendeeEmail,
                        recurrenceId,
                        uid,
                        sequence,
                        utcDateTimeOrganizerCriticalChange,
                        utcDateTimeAttendeeCriticalChange,
                        response});
        }
        
        /// <remarks/>
        public void SetAttendeeResponseAsync(string attendeeEmail, uint recurrenceId, string uid, uint sequence, System.DateTime utcDateTimeOrganizerCriticalChange, System.DateTime utcDateTimeAttendeeCriticalChange, AttendeeResponse response) {
            this.SetAttendeeResponseAsync(attendeeEmail, recurrenceId, uid, sequence, utcDateTimeOrganizerCriticalChange, utcDateTimeAttendeeCriticalChange, response, null);
        }
        
        /// <remarks/>
        public void SetAttendeeResponseAsync(string attendeeEmail, uint recurrenceId, string uid, uint sequence, System.DateTime utcDateTimeOrganizerCriticalChange, System.DateTime utcDateTimeAttendeeCriticalChange, AttendeeResponse response, object userState) {
            if ((this.SetAttendeeResponseOperationCompleted == null)) {
                this.SetAttendeeResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAttendeeResponseOperationCompleted);
            }
            this.InvokeAsync("SetAttendeeResponse", new object[] {
                        attendeeEmail,
                        recurrenceId,
                        uid,
                        sequence,
                        utcDateTimeOrganizerCriticalChange,
                        utcDateTimeAttendeeCriticalChange,
                        response}, this.SetAttendeeResponseOperationCompleted, userState);
        }
        
        private void OnSetAttendeeResponseOperationCompleted(object arg) {
            if ((this.SetAttendeeResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAttendeeResponseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/GetMeetingsInformation", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetMeetingsInformation(uint requestFlags, uint lcid) {
            object[] results = this.Invoke("GetMeetingsInformation", new object[] {
                        requestFlags,
                        lcid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetMeetingsInformationAsync(uint requestFlags, uint lcid) {
            this.GetMeetingsInformationAsync(requestFlags, lcid, null);
        }
        
        /// <remarks/>
        public void GetMeetingsInformationAsync(uint requestFlags, uint lcid, object userState) {
            if ((this.GetMeetingsInformationOperationCompleted == null)) {
                this.GetMeetingsInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeetingsInformationOperationCompleted);
            }
            this.InvokeAsync("GetMeetingsInformation", new object[] {
                        requestFlags,
                        lcid}, this.GetMeetingsInformationOperationCompleted, userState);
        }
        
        private void OnGetMeetingsInformationOperationCompleted(object arg) {
            if ((this.GetMeetingsInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeetingsInformationCompleted(this, new GetMeetingsInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/soap/meetings/RestoreMeeting", RequestNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/soap/meetings/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestoreMeeting(string uid) {
            this.Invoke("RestoreMeeting", new object[] {
                        uid});
        }
        
        /// <remarks/>
        public void RestoreMeetingAsync(string uid) {
            this.RestoreMeetingAsync(uid, null);
        }
        
        /// <remarks/>
        public void RestoreMeetingAsync(string uid, object userState) {
            if ((this.RestoreMeetingOperationCompleted == null)) {
                this.RestoreMeetingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRestoreMeetingOperationCompleted);
            }
            this.InvokeAsync("RestoreMeeting", new object[] {
                        uid}, this.RestoreMeetingOperationCompleted, userState);
        }
        
        private void OnRestoreMeetingOperationCompleted(object arg) {
            if ((this.RestoreMeetingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RestoreMeetingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.450")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class TimeZoneInf {
        
        private int biasField;
        
        private SysTime standardDateField;
        
        private int standardBiasField;
        
        private SysTime daylightDateField;
        
        private int daylightBiasField;
        
        /// <remarks/>
        public int bias {
            get {
                return this.biasField;
            }
            set {
                this.biasField = value;
            }
        }
        
        /// <remarks/>
        public SysTime standardDate {
            get {
                return this.standardDateField;
            }
            set {
                this.standardDateField = value;
            }
        }
        
        /// <remarks/>
        public int standardBias {
            get {
                return this.standardBiasField;
            }
            set {
                this.standardBiasField = value;
            }
        }
        
        /// <remarks/>
        public SysTime daylightDate {
            get {
                return this.daylightDateField;
            }
            set {
                this.daylightDateField = value;
            }
        }
        
        /// <remarks/>
        public int daylightBias {
            get {
                return this.daylightBiasField;
            }
            set {
                this.daylightBiasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.450")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public partial class SysTime {
        
        private ushort yearField;
        
        private ushort monthField;
        
        private ushort dayOfWeekField;
        
        private ushort dayField;
        
        private ushort hourField;
        
        private ushort minuteField;
        
        private ushort secondField;
        
        private ushort millisecondsField;
        
        /// <remarks/>
        public ushort year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
        
        /// <remarks/>
        public ushort month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
        
        /// <remarks/>
        public ushort dayOfWeek {
            get {
                return this.dayOfWeekField;
            }
            set {
                this.dayOfWeekField = value;
            }
        }
        
        /// <remarks/>
        public ushort day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
            }
        }
        
        /// <remarks/>
        public ushort hour {
            get {
                return this.hourField;
            }
            set {
                this.hourField = value;
            }
        }
        
        /// <remarks/>
        public ushort minute {
            get {
                return this.minuteField;
            }
            set {
                this.minuteField = value;
            }
        }
        
        /// <remarks/>
        public ushort second {
            get {
                return this.secondField;
            }
            set {
                this.secondField = value;
            }
        }
        
        /// <remarks/>
        public ushort milliseconds {
            get {
                return this.millisecondsField;
            }
            set {
                this.millisecondsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.450")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sharepoint/soap/meetings/")]
    public enum AttendeeResponse {
        
        /// <remarks/>
        responseAccepted,
        
        /// <remarks/>
        responseTentative,
        
        /// <remarks/>
        responseDeclined,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateWorkspaceCompletedEventHandler(object sender, CreateWorkspaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWorkspaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWorkspaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteWorkspaceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMeetingWorkspacesCompletedEventHandler(object sender, GetMeetingWorkspacesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeetingWorkspacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeetingWorkspacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetWorkspaceTitleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddMeetingFromICalCompletedEventHandler(object sender, AddMeetingFromICalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMeetingFromICalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMeetingFromICalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddMeetingCompletedEventHandler(object sender, AddMeetingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMeetingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMeetingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateMeetingFromICalCompletedEventHandler(object sender, UpdateMeetingFromICalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMeetingFromICalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMeetingFromICalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateMeetingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveMeetingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetAttendeeResponseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMeetingsInformationCompletedEventHandler(object sender, GetMeetingsInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeetingsInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeetingsInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RestoreMeetingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591