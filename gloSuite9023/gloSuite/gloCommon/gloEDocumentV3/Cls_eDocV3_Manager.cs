using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using gloEDocumentV3.Enumeration;
using gloEDocumentV3.DocumentContextMenu;
using System.IO;
using System.Data;
using gloEDocumentV3.SDKInteraction;
using System.Data.SqlClient;
using pdftron.Common;
using pdftron.PDF;
using pdftron.Filters;
using pdftron.SDF;
using System.Data.SqlTypes;
using System.Windows.Forms;
using gloUserControlLibrary;
using gloGlobal;
namespace gloEDocumentV3
{
    namespace eDocManager
    {

        public partial class eDocManager : IDisposable
        {

            ArrayList addPage;

            private string _ErrorMessage = "";
            bool _HasError = false;

            public string ErrorMessage
            {
                get { return _ErrorMessage; }
                set { _ErrorMessage = value; }
            }

            public bool HasError
            {
                get { return _HasError; }
                set { _HasError = value; }
            }
            //Sanjog
            //Boolean multipleRecipients = false;
            ArrayList gstrFAXContacts = new ArrayList();
            //String gstrFAXContactPerson = "";
            //String gstrFAXContactPersonFAXNo = "";
            //String gstrFAXOutputDirectory = "";
            //public string _ErrorMessage = "";
            //private Int64 _PatientID = 0;


            //enmFAXPriority CurrentSendingFAXPriority = enmFAXPriority.NormalPriority;




            public delegate void DocumentProgress(int Percentage, string Message);
            // public event DocumentProgress DocumentProgressEvent;


            #region "Constructor & Distructor"

            public eDocManager()
            {
            }

            private bool disposed = false;

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }
            protected virtual void Dispose(bool disposing)
            {
                if (!this.disposed)
                {
                    if (disposing)
                    {

                    }
                }
                disposed = true;
            }

            ~eDocManager()
            {
                Dispose(false);
            }

            #endregion

            //bool SendToEDoc(Int64 PatientID, string SendToCategory, string SendToYear, string SendToMonth, string SendToDocumentName, bool AutoDocumentName, ArrayList PDFDocuments, ArrayList ImageDocuments, Int64 ClinicID, out Int64 SendContainerID, out Int64 SendDocumentID);

            //bool Import(enum_DocumentEventType EventType, Int64 PatientID, ArrayList SourceDocuments, string DestDocumentName, string DestCategory, string DestYear, string DestMonth, Int64 ClinicID, out Int64 DestContainerID, out Int64 DestDocumentID);

            //bool UpdateContainer(Int64 PatientID, ArrayList SourceDocuments, string Year, Int64 ContainerID, Int64 ClinicID);

            //bool Delete(Int64 PatientID, Int64 ContainerID, Common.eDocContextMenuDocuments DocumentsToDelete, Int64 ClinicID);


            #region "Notes"
            #region "Dhruv 2010 -> AddNotes"
            //public bool AddNotes_Old(Int64 patientid, Int64 documentid, Int64 containerid, Int32 containerpagenumber, Int32 documentpagenumber, Int64 userid, string username, DateTime datetime, string note, Int64 clinicid)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
            //    bool _result = false;
            //    Int64 _PrefixID = 0;
            //    Object _NoteID = 0;

            //    try
            //    {
            //        oDB.Connect(false);
            //        _PrefixID = eDocValidator.GetPrefixTransactionID(patientid);

            //        oParameters.Add("@eDocumentID", documentid, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@eContainerID", containerid, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@ContainerPageNumber", containerpagenumber, ParameterDirection.Input, SqlDbType.Int);
            //        oParameters.Add("@DocumentPageNumber", documentpagenumber, ParameterDirection.Input, SqlDbType.Int);
            //        oParameters.Add("@NTAOID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
            //        oParameters.Add("@UserID", userid, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@UserName", username, ParameterDirection.Input, SqlDbType.VarChar);
            //        oParameters.Add("@NTAODateTime", datetime, ParameterDirection.Input, SqlDbType.DateTime);
            //        oParameters.Add("@NTAODescription ", note, ParameterDirection.Input, SqlDbType.VarChar, 1000);
            //        oParameters.Add("@IsPage", true, ParameterDirection.Input, SqlDbType.Bit);
            //        oParameters.Add("@NTAOType", enum_NTAOType.Notes.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
            //        oParameters.Add("@ClinicID", clinicid, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@PrefixID", _PrefixID, ParameterDirection.Input, SqlDbType.BigInt);

            //        int _res = oDB.Execute("gsp_eDoc_InUpNTAO_V3", oParameters, out _NoteID);
            //        if (_res > 0 && Convert.ToInt64(_NoteID) > 0)
            //        {
            //            _result = true;
            //            string _strUpdate = "UPDATE eDocument_Pages_V3 WITH(ROWLOCK) SET HasNote = 'true' WHERE eDocumentID = " + documentid + " AND eContainerID = " + containerid + " AND ClinicID = " + clinicid + " AND ContainerPageNumber = " + containerpagenumber + " AND DocumentPageNumber = " + documentpagenumber + "";
            //            if (oDB.Execute_Query(_strUpdate) <= 0)
            //            {
            //                _result = false;
            //            }

            //        }


            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        { oDB.Disconnect(); oDB.Dispose(); }
            //        if (oParameters != null) { oParameters.Dispose(); }
            //    }
            //    return _result;
            //}

            //Sanjog
            public Int64 AddPendingFAX(long nPatientID, string sFAXTo, string sFAXTYpe, string sFAXNo, string sLoginUser, string sFileName, DateTime dtFAXDate, string BinaryFile, string EFax_DocumentExtension, int CurrentFAXPriority, String EFax_CoverPageDocumentExtension, Int32 nNoOfAttempts, String sCurrentStatus, String TransactionID, String Status, String TransResultCode, Byte[] FaxCoverPageBinaryData, String EFax_Resolution, String EFax_DocumentEncodingType, String EFax_DocumentContentType, String EFax_BillingCode, String EFax_Tiff_image_flag)
            {

                //To set priority as either 0 or 1
                //NormalPriority,//0
                //SendImmediately//1
                //

                SqlConnection objCon = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                SqlCommand objCmd = new SqlCommand();
                Int64 nFaxID = 0;


                try
                {
                    objCmd.CommandType = CommandType.StoredProcedure;
                    objCmd.CommandText = "Fax_InUpPendingEFAX";

                    SqlParameter objParaPatientID = new SqlParameter();
                    {
                        objParaPatientID.ParameterName = "@PatientID";
                        objParaPatientID.Value = nPatientID;
                        objParaPatientID.Direction = ParameterDirection.Input;
                    }
                    objCmd.Parameters.Add(objParaPatientID);

                    SqlParameter objParaFAXTo = new SqlParameter();
                    {
                        objParaFAXTo.ParameterName = "@FAXTo";
                        objParaFAXTo.Value = sFAXTo;
                        objParaFAXTo.Direction = ParameterDirection.Input;
                        objParaFAXTo.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaFAXTo);

                    SqlParameter objParaFAXTYpe = new SqlParameter();
                    {
                        objParaFAXTYpe.ParameterName = "@FAXType";
                        objParaFAXTYpe.Value = sFAXTYpe;
                        objParaFAXTYpe.Direction = ParameterDirection.Input;
                        objParaFAXTYpe.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaFAXTYpe);

                    SqlParameter objParaFAXNo = new SqlParameter();
                    {
                        objParaFAXNo.ParameterName = "@FAXNo";
                        objParaFAXNo.Value = sFAXNo;
                        objParaFAXNo.Direction = ParameterDirection.Input;
                        objParaFAXNo.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaFAXNo);

                    SqlParameter objParaLoginUser = new SqlParameter();
                    {
                        objParaLoginUser.ParameterName = "@LoginUser";
                        objParaLoginUser.Value = sLoginUser;
                        objParaLoginUser.Direction = ParameterDirection.Input;
                        objParaLoginUser.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaLoginUser);

                    SqlParameter objParaFileName = new SqlParameter();
                    {
                        objParaFileName.ParameterName = "@FileName";
                        objParaFileName.Value = sFileName;
                        objParaFileName.Direction = ParameterDirection.Input;
                        objParaFileName.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaFileName);

                    SqlParameter objParaFaxDate = new SqlParameter();
                    {
                        objParaFaxDate.ParameterName = "@FAXDate";
                        objParaFaxDate.Value = dtFAXDate;
                        objParaFaxDate.Direction = ParameterDirection.Input;
                        objParaFaxDate.SqlDbType = SqlDbType.DateTime;
                    }
                    objCmd.Parameters.Add(objParaFaxDate);

                    SqlParameter objParaFaxFileBinaryData = new SqlParameter();
                    {
                        objParaFaxFileBinaryData.ParameterName = "@FaxFileBinaryData";
                        objParaFaxFileBinaryData.Value = BinaryFile;
                        objParaFaxFileBinaryData.Direction = ParameterDirection.Input;
                        objParaFaxFileBinaryData.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaFaxFileBinaryData);

                    SqlParameter objParaEFax_DocumentExtension = new SqlParameter();
                    {
                        objParaEFax_DocumentExtension.ParameterName = "@EFax_DocumentExtension";
                        objParaEFax_DocumentExtension.Value = EFax_DocumentExtension;
                        objParaEFax_DocumentExtension.Direction = ParameterDirection.Input;
                        objParaEFax_DocumentExtension.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaEFax_DocumentExtension);

                    SqlParameter objParaEFax_CoverPageDocumentExtension = new SqlParameter();
                    {
                        objParaEFax_CoverPageDocumentExtension.ParameterName = "@EFax_CoverPageDocumentExtension";
                        objParaEFax_CoverPageDocumentExtension.Value = EFax_CoverPageDocumentExtension;
                        objParaEFax_CoverPageDocumentExtension.Direction = ParameterDirection.Input;
                        objParaEFax_CoverPageDocumentExtension.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaEFax_CoverPageDocumentExtension);

                    SqlParameter objParaFaxPriority = new SqlParameter();
                    {
                        objParaFaxPriority.ParameterName = "@FAXPriority";
                        objParaFaxPriority.Value = CurrentFAXPriority;
                        objParaFaxPriority.Direction = ParameterDirection.Input;
                        objParaFaxPriority.SqlDbType = SqlDbType.Bit;
                    }
                    objCmd.Parameters.Add(objParaFaxPriority);

                    SqlParameter objParaNoOfAttempts = new SqlParameter();
                    {
                        objParaNoOfAttempts.ParameterName = "@nNoOfAttempts";
                        objParaNoOfAttempts.Value = nNoOfAttempts;
                        objParaNoOfAttempts.Direction = ParameterDirection.Input;
                        objParaNoOfAttempts.SqlDbType = SqlDbType.Int;
                    }
                    objCmd.Parameters.Add(objParaNoOfAttempts);

                    SqlParameter objParaCurrentStatus = new SqlParameter();
                    {
                        objParaCurrentStatus.ParameterName = "@sCurrentStatus";
                        objParaCurrentStatus.Value = sCurrentStatus;
                        objParaCurrentStatus.Direction = ParameterDirection.Input;
                        objParaCurrentStatus.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaCurrentStatus);

                    SqlParameter objParaTransactionID = new SqlParameter();
                    {
                        objParaTransactionID.ParameterName = "@TransactionID";
                        objParaTransactionID.Value = TransactionID;
                        objParaTransactionID.Direction = ParameterDirection.Input;
                        objParaTransactionID.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaTransactionID);

                    SqlParameter objParaStatus = new SqlParameter();
                    {
                        objParaStatus.ParameterName = "@Status";
                        objParaStatus.Value = Status;
                        objParaStatus.Direction = ParameterDirection.Input;
                        objParaStatus.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaStatus);

                    SqlParameter objParaTransResultCode = new SqlParameter();
                    {
                        objParaTransResultCode.ParameterName = "@TransResultCode";
                        objParaTransResultCode.Value = TransResultCode;
                        objParaTransResultCode.Direction = ParameterDirection.Input;
                        objParaTransResultCode.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaTransResultCode);

                    SqlParameter objParaFaxCoverPageBinaryData = new SqlParameter();
                    {
                        objParaFaxCoverPageBinaryData.ParameterName = "@FaxCoverPageBinaryData";
                        objParaFaxCoverPageBinaryData.Value = FaxCoverPageBinaryData;
                        objParaFaxCoverPageBinaryData.Direction = ParameterDirection.Input;
                        objParaFaxCoverPageBinaryData.SqlDbType = SqlDbType.Image;
                    }

                    objCmd.Parameters.Add(objParaFaxCoverPageBinaryData);

                    SqlParameter objParaEFax_Resolution = new SqlParameter();
                    {
                        objParaEFax_Resolution.ParameterName = "@EFax_Resolution";
                        objParaEFax_Resolution.Value = EFax_Resolution;
                        objParaEFax_Resolution.Direction = ParameterDirection.Input;
                        objParaEFax_Resolution.SqlDbType = SqlDbType.VarChar;
                    }

                    objCmd.Parameters.Add(objParaEFax_Resolution);

                    SqlParameter objParaEFax_DocumentEncodingType = new SqlParameter();
                    {
                        objParaEFax_DocumentEncodingType.ParameterName = "@EFax_DocumentEncodingType";
                        objParaEFax_DocumentEncodingType.Value = EFax_DocumentEncodingType;
                        objParaEFax_DocumentEncodingType.Direction = ParameterDirection.Input;
                        objParaEFax_DocumentEncodingType.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaEFax_DocumentEncodingType);

                    SqlParameter objParaEFax_DocumentContentType = new SqlParameter();
                    {
                        objParaEFax_DocumentContentType.ParameterName = "@EFax_DocumentContentType";
                        objParaEFax_DocumentContentType.Value = EFax_DocumentContentType;
                        objParaEFax_DocumentContentType.Direction = ParameterDirection.Input;
                        objParaEFax_DocumentContentType.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaEFax_DocumentContentType);

                    SqlParameter objParaEFax_BillingCode = new SqlParameter();
                    {
                        objParaEFax_BillingCode.ParameterName = "@EFax_BillingCode";
                        objParaEFax_BillingCode.Value = EFax_BillingCode;
                        objParaEFax_BillingCode.Direction = ParameterDirection.Input;
                        objParaEFax_BillingCode.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaEFax_BillingCode);

                    SqlParameter objParaEFax_Tiff_image_flag = new SqlParameter();
                    {
                        objParaEFax_Tiff_image_flag.ParameterName = "@EFax_Tiff_image_flag";
                        objParaEFax_Tiff_image_flag.Value = EFax_Tiff_image_flag;
                        objParaEFax_Tiff_image_flag.Direction = ParameterDirection.Input;
                        objParaEFax_Tiff_image_flag.SqlDbType = SqlDbType.VarChar;
                    }
                    objCmd.Parameters.Add(objParaEFax_Tiff_image_flag);

                    SqlParameter objParaFaxID = new SqlParameter();
                    {
                        objParaFaxID.ParameterName = "@FAXID";
                        objParaFaxID.Value = 0;
                        objParaFaxID.Direction = ParameterDirection.InputOutput;
                        objParaFaxID.SqlDbType = SqlDbType.BigInt;
                    }
                    objCmd.Parameters.Add(objParaFaxID);

                    objCmd.Connection = objCon;
                    objCon.Open();
                    objCmd.ExecuteNonQuery();

                    nFaxID = System.Convert.ToInt64(objParaFaxID.Value);

                    objCon.Close();
                    objCon.Dispose();
                    //objCmd = null;
                    objCon = null;
                    if (objParaPatientID != null)
                    {
                        objParaPatientID = null;
                    }

                    if (objParaFAXTo != null)
                    {
                        objParaFAXTo = null;
                    }

                    if (objParaFAXTYpe != null)
                    {
                        objParaFAXTYpe = null;
                    }

                    if (objParaFAXNo != null)
                    {
                        objParaFAXNo = null;
                    }

                    if (objParaLoginUser != null)
                    {
                        objParaLoginUser = null;
                    }

                    if (objParaNoOfAttempts != null)
                    {
                        objParaNoOfAttempts = null;
                    }
                    if (objParaFileName != null)
                    {
                        objParaFileName = null;
                    }

                    if (objParaFaxDate != null)
                    {
                        objParaFaxDate = null;
                    }

                    if (objParaFaxFileBinaryData != null)
                    {
                        objParaFaxFileBinaryData = null;
                    }

                    if (objParaEFax_DocumentExtension != null)
                    {
                        objParaEFax_DocumentExtension = null;
                    }

                    if (objParaEFax_CoverPageDocumentExtension != null)
                    {
                        objParaEFax_CoverPageDocumentExtension = null;
                    }

                    if (objParaFaxPriority != null)
                    {
                        objParaFaxPriority = null;
                    }

                    if (objParaCurrentStatus != null)
                    {
                        objParaCurrentStatus = null;
                    }

                    if (objParaTransactionID != null)
                    {
                        objParaTransactionID = null;
                    }

                    if (objParaStatus != null)
                    {
                        objParaStatus = null;
                    }

                    if (objParaTransResultCode != null)
                    {
                        objParaTransResultCode = null;
                    }

                    if (objParaFaxCoverPageBinaryData != null)
                    {
                        objParaFaxCoverPageBinaryData = null;
                    }


                    if (objParaEFax_Resolution != null)
                    {
                        objParaEFax_Resolution = null;
                    }


                    if (objParaEFax_DocumentEncodingType != null)
                    {
                        objParaEFax_DocumentEncodingType = null;
                    }

                    if (objParaEFax_DocumentContentType != null)
                    {
                        objParaEFax_DocumentContentType = null;
                    }

                    if (objParaEFax_BillingCode != null)
                    {
                        objParaEFax_BillingCode = null;
                    }

                    if (objParaEFax_Tiff_image_flag != null)
                    {
                        objParaEFax_Tiff_image_flag = null;
                    }

                    if (objParaFaxID != null)
                    {
                        objParaFaxID = null;
                    }
                }
                catch (SqlException ex)
                {
                    #region " Make Log Entry "

                    _ErrorMessage = ex.ToString();
                    //Code added on 7rd October 2008 By - Sagar Ghodke
                    //Make Log entry in DMSExceptionLog file for any exceptions found
                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    //End Code add
                    #endregion " Make Log Entry "


                    MessageBox.Show(ex.ToString(), "gloEMR", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    //UpdateLog("clsFAX -- AddPendingFAX -- " + ex.ToString); 
                }//catch 
                catch (Exception ex1)
                {
                    #region " Make Log Entry "

                    _ErrorMessage = ex1.ToString();
                    //Code added on 7rd October 2008 By - Sagar Ghodke
                    //Make Log entry in DMSExceptionLog file for any exceptions found
                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    //End Code add
                    #endregion " Make Log Entry "


                    //  UpdateLog("clsFAX -- AddPendingFAX -- " + ex.ToString); 
                    //  MessageBox.Show(ex.Message, gstrMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Error); 
                    MessageBox.Show(ex1.ToString(), "gloEMR", MessageBoxButtons.OK, MessageBoxIcon.Error);

                } //catch
                finally
                {

                    if (objCmd != null)
                    {
                        objCmd.Parameters.Clear();
                        objCmd.Dispose();
                        objCmd = null;
                    }
                }

                return nFaxID;

            } //func
            private String RetrieveFAXDocumentName(String _Extension, String _Path)
            {
                try
                {
                    ////String _Path = gloEDocV3Admin.gstrFaxOutputDirectory;
                    //String _NewDocumentName = "";



                    //DateTime _dtCurrentDateTime = System.DateTime.Now;
                    //int i = 0;

                    //_NewDocumentName = _dtCurrentDateTime.ToString("MM dd yyyy - hh mm ss tt") + _Extension;
                    //while ( (File.Exists(_Path + "\\" + _NewDocumentName) == true) && (i < int.MaxValue) )
                    //{
                    //    i = i + 1;
                    //    _NewDocumentName = _dtCurrentDateTime.ToString("MM dd yyyy - hh mm ss tt") + "-" + i.ToString() + _Extension;
                    //}//while

                    //return _Path + "\\" + _NewDocumentName;
                    return gloGlobal.clsFileExtensions.NewDocumentName(_Path, _Extension, "MMddyyyyHHmmssffff");
                }
                catch (Exception)
                {
                    //#region " Make Log Entry "

                    //_ErrorMessage = ex.ToString();
                    ////Code added on 7rd October 2008 By - Sagar Ghodke
                    ////Make Log entry in DMSExceptionLog file for any exceptions found
                    //if (_ErrorMessage.Trim() != "")
                    //{
                    //    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                    //    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                    //    _MessageString = "";
                    //}

                    ////End Code add
                    //#endregion " Make Log Entry "
                    throw;
                }
            }//RetrieveFAXDocumentName1

            //public void FaxUsingBlackIce(gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction oPDFToTif, string _pdfFileName)
            //{
            //    string _TifFileName = eDocValidator.GetNewDocumentName(gloEDocV3Admin.gTemporaryProcessPath, "tif");

            //    try
            //    {
            //        //copy the file 
            //        //add in faxpending_mst

            //        String sFileName = "";
            //        oPDFToTif.PDFToTIFF(_pdfFileName, _TifFileName);
            //        String _tsfilename = "";


            //        if (multipleRecipients == false)
            //        {

            //            //single contact
            //            //copy the tiff file to this path 
            //            sFileName = RetrieveFAXDocumentName(".tif", gloEDocV3Admin.gstrFaxOutputDirectory);
            //            _tsfilename = Path.GetFileNameWithoutExtension(sFileName);
            //            File.Copy(_TifFileName, sFileName);

            //            //NormalPriority,//0
            //            //SendImmediately//1
            //            AddPendingFAX(_PatientID, gstrFAXContactPerson, "DMS", gstrFAXContactPersonFAXNo, gloEDocV3Admin.gUserName, _tsfilename, System.DateTime.Now, "", ".tif",  0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "true");
            //            _tsfilename = "";
            //        }
            //        else
            //        {
            //            myTreeNode myNode;
            //            //multiple contacts
            //            for (int c = 0; c <= trvFaxTo.Nodes[0].Nodes.Count - 1; c++)
            //            {
            //                sFileName = RetrieveFAXDocumentName(".tif", gloEDocV3Admin.gstrFaxOutputDirectory);
            //                myNode = new myTreeNode();
            //                _tsfilename = Path.GetFileNameWithoutExtension(sFileName);
            //                File.Copy(_TifFileName, sFileName);

            //                myNode = (myTreeNode)trvFaxTo.Nodes[0].Nodes[c];
            //                //Added By Shweta 20091024
            //                //If fax cover page setting is true then while adding the fax details in pending faxes select the pdfFile path as per the cotactID
            //                //If the fax cover page setting is true then check the related pdfFile for selected contact from the treeview 
            //                if (gloEDocumentV3.gloEDocV3Admin.gblnAddFaxCoverpage == true)
            //                {

            //                    string ID = myNode.Key.ToString();

            //                    if (_pdfFileName.Contains(ID) == true)
            //                    {
            //                        AddPendingFAX(_PatientID, myNode.Text, "DMS", myNode.Tag.ToString(), gloEDocV3Admin.gUserName, _tsfilename, System.DateTime.Now, "", ".tif", 0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "true");
            //                    }
            //                }
            //                //End coding
            //                else
            //                {
            //                    AddPendingFAX(_PatientID, myNode.Text, "DMS", myNode.Tag.ToString(), gloEDocV3Admin.gUserName, _tsfilename, System.DateTime.Now, "", ".tif", 0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "true");

            //                }
            //                _tsfilename = "";
            //                myNode = null;
            //            }//for

            //        }//else

            //    }
            //    catch (Exception ex)
            //    {
            //        #region " Make Log Entry "

            //        _ErrorMessage = ex.ToString();
            //        //Code added on 7rd October 2008 By - Sagar Ghodke
            //        //Make Log entry in DMSExceptionLog file for any exceptions found
            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        //End Code add
            //        #endregion " Make Log Entry "
            //        //throw;
            //    }
            //    finally
            //    {
            //        //if (oPDFToTif != null)
            //        //{
            //        //    oPDFToTif.Dispose();
            //        //    oPDFToTif = null;
            //        //    if (File.Exists(_pdfFileName) == true)
            //        //    {
            //        //        File.Delete(_pdfFileName );
            //        //    }//if
            //        //}                
            //        //if (File.Exists(_TifFileName))
            //        //{
            //        //    File.Delete(_TifFileName);
            //        //}
            //    }//finally
            //}//FaxUsingBlackIce


            //public void eFax(string _pdfFileName)
            //{
            //    String sFileName = "";

            //    try
            //    {

            //        ////get the pdf document
            //        sFileName = RetrieveFAXDocumentName(".pdf", gloEDocV3Admin.gTemporaryProcessPath);

            //        ////use the pdf doc instead of tiff
            //        File.Copy(_pdfFileName, sFileName);

            //        Byte[] oByte = null;

            //        oByte = GenerateBinaryStream(sFileName);

            //        String strFileData = "";

            //        strFileData = System.Convert.ToBase64String(oByte);

            //        if (multipleRecipients == false)
            //        {

            //            //single contact
            //            //copy the tiff file to this path 

            //            AddPendingFAX(_PatientID, gstrFAXContactPerson, "DMS", gstrFAXContactPersonFAXNo, gloEDocV3Admin.gUserName, "", System.DateTime.Now, strFileData, ".pdf", 0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "false");

            //            //// Call Fax function

            //        }
            //        else
            //        {
            //            myTreeNode myNode;
            //            //multiple contacts
            //            for (int c = 0; c <= trvFaxTo.Nodes[0].Nodes.Count - 1; c++)
            //            {
            //                myNode = new myTreeNode();

            //                myNode = (myTreeNode)trvFaxTo.Nodes[0].Nodes[c];


            //                //If the fax cover page setting is true then check the related pdfFile for selected contact from the treeview 
            //                if (gloEDocumentV3.gloEDocV3Admin.gblnAddFaxCoverpage == true)
            //                {
            //                    string ID = myNode.Key.ToString();

            //                    if (_pdfFileName.Contains(ID) == true)
            //                    {
            //                        AddPendingFAX(_PatientID, myNode.Text, "DMS", myNode.Tag.ToString(), "", "", System.DateTime.Now, strFileData, ".pdf", 0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "false");
            //                    }
            //                }
            //                else
            //                {

            //                    AddPendingFAX(_PatientID, myNode.Text, "DMS", myNode.Tag.ToString(), "", "", System.DateTime.Now, strFileData, ".pdf", 0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "false");
            //                }

            //                // AddPendingFAX(_PatientID, myNode.Text, "DMS", myNode.Tag.ToString(), gloEDocV3Admin.gUserName, "", System.DateTime.Now, strFileData, ".pdf", 0, ".docx", 0, "Pending", "", "", "", null, "high", "base64", "", "", "false");
            //                myNode = null;
            //            }//for

            //        }//else
            //    }
            //    catch (Exception ex)
            //    {
            //        #region " Make Log Entry "

            //        _ErrorMessage = ex.ToString();
            //        //Code added on 7rd October 2008 By - Sagar Ghodke
            //        //Make Log entry in DMSExceptionLog file for any exceptions found
            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        //End Code add
            //        #endregion " Make Log Entry "


            //        MessageBox.Show(ex.Message, gloEDocV3Admin.gMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
            //        //throw ex;
            //    }
            //    finally
            //    {

            //    }
            //}

            private byte[] GenerateBinaryStream(string strfilename)
            {
                FileStream oFile;
                BinaryReader oReader;
                byte[] bytesRead = null;

                try
                {
                    // Dim strfilename As String = Application.StartupPath & "\SampleFax.docx" 
                    //Const CHUNK_SIZE As Integer = 1024 * 8 
                    //8K write buffer. 
                    if (File.Exists(strfilename))
                    {

                        //'Please uncomment the following line of code to read the file, even the file is in use by same or another process 
                        // oFile = new FileStream(strFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite, 8, FileOptions.Asynchronous); 

                        //'To read the file only when it is not in use by any process 
                        oFile = new FileStream(strfilename, FileMode.Open, FileAccess.Read);

                        oReader = new BinaryReader(oFile);

                        bytesRead = new byte[oReader.BaseStream.Length];
                        oReader.Read(bytesRead, 0, bytesRead.Length);
                        oFile.Close();
                        oFile.Dispose();
                        oReader.Close();
                        oReader.Dispose();
                        return bytesRead;
                    }

                    else
                    {
                        return null;
                    }
                }

                catch (Exception ex)
                {
                    #region " Make Log Entry "

                    _ErrorMessage = ex.ToString();
                    //Code added on 7rd October 2008 By - Sagar Ghodke
                    //Make Log entry in DMSExceptionLog file for any exceptions found
                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    //End Code add
                    #endregion " Make Log Entry "


                    throw ex;
                }
            }

            //Sanjog

            public bool AddNotes(Int64 patientid, Int64 documentid, Int64 containerid, Int32 containerpagenumber, Int32 documentpagenumber, Int64 userid, string username, DateTime datetime, string note, Int64 clinicid, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                bool _result = false;
                Int64 _PrefixID = 0;
                Object _NoteID = 0;

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            _PrefixID = eDocValidator.GetPrefixTransactionID(patientid);
                            if (oParameters != null)
                            {
                                oParameters.Add("@eDocumentID", documentid, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@eContainerID", containerid, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@ContainerPageNumber", containerpagenumber, ParameterDirection.Input, SqlDbType.Int);
                                oParameters.Add("@DocumentPageNumber", documentpagenumber, ParameterDirection.Input, SqlDbType.Int);
                                oParameters.Add("@NTAOID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oParameters.Add("@UserID", userid, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@UserName", username, ParameterDirection.Input, SqlDbType.VarChar);
                                oParameters.Add("@NTAODateTime", datetime, ParameterDirection.Input, SqlDbType.DateTime);
                                oParameters.Add("@NTAODescription ", note, ParameterDirection.Input, SqlDbType.VarChar, 1000);
                                oParameters.Add("@IsPage", true, ParameterDirection.Input, SqlDbType.Bit);
                                oParameters.Add("@NTAOType", enum_NTAOType.Notes.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                                oParameters.Add("@ClinicID", clinicid, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@PrefixID", _PrefixID, ParameterDirection.Input, SqlDbType.BigInt);

                                int _res;

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _res = oDB.Execute("gsp_eDoc_InUpNTAO_V3_RCM", oParameters, out _NoteID);
                                }
                                else
                                {
                                    _res = oDB.Execute("gsp_eDoc_InUpNTAO_V3", oParameters, out _NoteID);
                                }

                                if (_res > 0 && System.Convert.ToInt64(_NoteID) > 0)
                                {
                                    _result = true;

                                    string _strUpdate;

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _strUpdate = "UPDATE eDocument_Pages_V3_RCM WITH(ROWLOCK) SET HasNote = 'true' WHERE eDocumentID = " + documentid + " AND eContainerID = " + containerid + " AND ClinicID = " + clinicid + " AND ContainerPageNumber = " + containerpagenumber + " AND DocumentPageNumber = " + documentpagenumber + "";
                                    }
                                    else
                                    {
                                        _strUpdate = "UPDATE eDocument_Pages_V3 WITH(ROWLOCK) SET HasNote = 'true' WHERE eDocumentID = " + documentid + " AND eContainerID = " + containerid + " AND ClinicID = " + clinicid + " AND ContainerPageNumber = " + containerpagenumber + " AND DocumentPageNumber = " + documentpagenumber + "";
                                    }

                                    if (oDB.Execute_Query(_strUpdate) <= 0)
                                    {
                                        _result = false;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    if (oParameters != null)
                    {
                        oParameters.Dispose();
                        oParameters = null;
                    }
                }
                return _result;
            }
            #endregion "Dhruv 2010 -> AddNotes"


            #region "Dhruv 2010 -> ClearNoteHistory"
            //public bool ClearNoteHistory_Old(long documentid, long clinicid)
            //{
            //    gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Object _RetVal = new object();
            //    string _sqlQuery = "";
            //    bool _result = false;

            //    try
            //    {
            //        oDB.Connect(false);
            //        //clear all notes entries against selected user
            //        _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + documentid + " AND "
            //                           + "AND ClinicID=" + clinicid + " AND"
            //                           + "NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode();


            //        int _returnValue = oDB.Execute_Query(_sqlQuery);
            //        if (_returnValue > 0)
            //        {
            //            #region ".update the has note flag of document details"

            //            _sqlQuery = "";
            //            _returnValue = 0;
            //            _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
            //                        " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
            //            _returnValue = oDB.Execute_Query(_sqlQuery);

            //            #endregion "update the has note flag of document details"

            //            _result = true;
            //        }

            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //        _result = false;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion

            //    }
            //    finally
            //    {
            //        if (oDB.Connect(false)) { oDB.Disconnect(); }
            //        if (oDB != null) { oDB.Dispose(); }
            //        if (_RetVal != null) { _RetVal = null; }
            //    }
            //    return _result;
            //    //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode()
            //}
            public bool ClearNoteHistory(long documentid, long clinicid)
            {
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                //       Object _RetVal = new object();
                string _sqlQuery = "";
                bool _result = false;

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {

                            //clear all notes entries against selected user
                            _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + documentid + " AND "
                                               + "AND ClinicID=" + clinicid + " AND"
                                               + "NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode();


                            int _returnValue = oDB.Execute_Query(_sqlQuery);
                            if (_returnValue > 0)
                            {
                                #region ".update the has note flag of document details"

                                _sqlQuery = "";
                                _returnValue = 0;
                                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
                                            " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
                                _returnValue = oDB.Execute_Query(_sqlQuery);

                                #endregion "update the has note flag of document details"

                                _result = true;
                            }
                            if (oDB != null)
                            {
                                oDB.Disconnect();
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    _result = false;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    //                 if (_RetVal != null) { _RetVal = null; }
                }
                return _result;
                //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode()
            }
            #endregion "Dhruv 2010 -> ClearNoteHistory"

            #region "Dhruv 2010 -> DeleteNote"
            //public bool DeleteNote_Old(Int64 documentid, Int64 noteid, Int64 clinicid)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    bool _result = false;
            //    string _sqlQuery = "";
            //    Object _RetVal = new object();

            //    try
            //    {
            //        oDB.Connect(false);
            //        _sqlQuery = " DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE eDocumentID=" + documentid + " AND NTAOID=" + noteid + " " +
            //                           " AND ClinicID=" + clinicid + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode() + " ";
            //        int _res = oDB.Execute_Query(_sqlQuery);
            //        if (_res > 0)
            //        {
            //            #region ".Check if any other notes exists for the document if not update the has note flag of document details"

            //            _sqlQuery = "";
            //            _sqlQuery = " SELECT ISNULL(COUNT(NTAOID),0) AS NTAOID FROM eDocument_NTAO_V3 WITH(NOLOCK) WHERE eDocumentID = " + documentid + " AND  NTAOType= " + enum_NTAOType.Notes.GetHashCode() + " " +
            //                        " AND  ClinicID = " + clinicid + " ";
            //            _RetVal = oDB.ExecuteScalar_Query(_sqlQuery);

            //            if (Convert.ToInt64(_RetVal) <= 0)
            //            {
            //                _sqlQuery = "";
            //                _res = 0;
            //                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
            //                            " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
            //                _res = oDB.Execute_Query(_sqlQuery);
            //            }

            //            #endregion ".Check if any other notes exists for the document if not update the has note flag of document details"

            //            _result = true;
            //        }

            //    }

            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        { oDB.Disconnect(); oDB.Dispose(); }
            //        if (_RetVal != null) { _RetVal = null; }
            //    }
            //    return _result;
            //}
            public bool DeleteNote(Int64 documentid, Int64 noteid, Int64 clinicid, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                bool _result = false;
                string _sqlQuery = "";


                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE eDocumentID=" + documentid + " AND NTAOID=" + noteid + " " +
                                               " AND ClinicID=" + clinicid + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode() + " ";
                            }
                            else
                            {
                                _sqlQuery = " DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE eDocumentID=" + documentid + " AND NTAOID=" + noteid + " " +
                                               " AND ClinicID=" + clinicid + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode() + " ";
                            }

                            int _res = oDB.Execute_Query(_sqlQuery);
                            if (_res > 0)
                            {
                                #region ".Check if any other notes exists for the document if not update the has note flag of document details"

                                _sqlQuery = "";

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _sqlQuery = " SELECT ISNULL(COUNT(NTAOID),0) AS NTAOID FROM eDocument_NTAO_V3_RCM WITH(NOLOCK) WHERE eDocumentID = " + documentid + " AND  NTAOType= " + enum_NTAOType.Notes.GetHashCode() + " " +
                                            " AND  ClinicID = " + clinicid + " ";
                                }
                                else
                                {
                                    _sqlQuery = " SELECT ISNULL(COUNT(NTAOID),0) AS NTAOID FROM eDocument_NTAO_V3 WITH(NOLOCK) WHERE eDocumentID = " + documentid + " AND  NTAOType= " + enum_NTAOType.Notes.GetHashCode() + " " +
                                            " AND  ClinicID = " + clinicid + " ";
                                }

                                Object _RetVal = oDB.ExecuteScalar_Query(_sqlQuery);

                                if (System.Convert.ToInt64(_RetVal) <= 0)
                                {
                                    _sqlQuery = "";
                                    _res = 0;

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET HasNote = '" + false + "' " +
                                                " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
                                    }
                                    else
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
                                                " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
                                    }

                                    _res = oDB.Execute_Query(_sqlQuery);
                                }

                                #endregion ".Check if any other notes exists for the document if not update the has note flag of document details"

                                _result = true;

                            }
                            if (oDB != null)
                            {
                                oDB.Disconnect();
                            }
                        }
                    }

                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    ///    if (_RetVal != null) { _RetVal = null; }
                }
                return _result;
            }

            #endregion "Dhruv 2010 -> DeleteNote"

            #region "Dhruv 2010 -> DeleteNote"
            //public bool DeleteNote_Old(Int64 documentid, Int64 containerid, Int32 containerpagenumber, Int32 documentpagenumber, Int64 clinicid)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Object _RetVal = new object();
            //    string _sqlQuery = "";
            //    bool _result = false;

            //    try
            //    {
            //        oDB.Connect(false);
            //        _sqlQuery = "Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + documentid + " AND eContainerID=" + containerid + " AND ContainerPageNumber=" + containerpagenumber + " AND DocumentPageNumber=" + documentpagenumber + " AND ClinicID=" + clinicid + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode();
            //        int _res = oDB.Execute_Query(_sqlQuery);

            //        if (_res > 0)
            //        {
            //            #region ".Check if any other notes exists for the document if not update the has note flag of document details"

            //            _sqlQuery = "";
            //            _sqlQuery = " SELECT ISNULL(COUNT(NTAOID),0) AS NTAOID FROM eDocument_NTAO_V3 WITH(NOLOCK) WHERE eDocumentID = " + documentid + " AND  NTAOType= " + enum_NTAOType.Notes.GetHashCode() + " " +
            //                        " AND  ClinicID = " + clinicid + " ";
            //            _RetVal = oDB.ExecuteScalar_Query(_sqlQuery);

            //            if (Convert.ToInt64(_RetVal) <= 0)
            //            {
            //                _sqlQuery = "";
            //                _res = 0;
            //                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
            //                            " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
            //                _res = oDB.Execute_Query(_sqlQuery);
            //            }

            //            #endregion ".Check if any other notes exists for the document if not update the has note flag of document details"

            //            _result = true;
            //        }

            //    }

            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        {
            //            oDB.Disconnect();
            //            oDB.Dispose();
            //        }

            //    }
            //    return _result;
            //    //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode()
            //    //return false;
            //}
            public bool DeleteNote(Int64 documentid, Int64 containerid, Int32 containerpagenumber, Int32 documentpagenumber, Int64 clinicid)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                Object _RetVal = null;
                string _sqlQuery = "";
                bool _result = false;

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            _sqlQuery = "Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + documentid + " AND eContainerID=" + containerid + " AND ContainerPageNumber=" + containerpagenumber + " AND DocumentPageNumber=" + documentpagenumber + " AND ClinicID=" + clinicid + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode();
                            int _res = oDB.Execute_Query(_sqlQuery);

                            if (_res > 0)
                            {
                                #region ".Check if any other notes exists for the document if not update the has note flag of document details"

                                _sqlQuery = "";
                                _sqlQuery = " SELECT ISNULL(COUNT(NTAOID),0) AS NTAOID FROM eDocument_NTAO_V3 WITH(NOLOCK) WHERE eDocumentID = " + documentid + " AND  NTAOType= " + enum_NTAOType.Notes.GetHashCode() + " " +
                                            " AND  ClinicID = " + clinicid + " ";
                                _RetVal = oDB.ExecuteScalar_Query(_sqlQuery);

                                if (System.Convert.ToInt64(_RetVal) <= 0)
                                {
                                    _sqlQuery = "";
                                    _res = 0;
                                    _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
                                                " WHERE eDocumentID = " + documentid + " AND ClinicID = " + clinicid + " ";
                                    _res = oDB.Execute_Query(_sqlQuery);
                                }

                                #endregion ".Check if any other notes exists for the document if not update the has note flag of document details"

                                _result = true;
                            }
                            if (oDB != null)
                            {
                                oDB.Disconnect();
                            }
                        }
                    }

                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }

                }
                return _result;
                //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Notes.GetHashCode()
                //return false;
            }

            #endregion "Dhruv 2010 -> DeleteNote"


            #endregion

            #region "Acknowledge"
            //SUDHIR 20081220

            #region "Dhruv 2010 -> AddAcknowledge"

            //public bool AddAcknowledge_old(Int64 PatientID, Int64 DocumentID, Int64 ContainerID, Int64 UserID, string UserName, DateTime datetime, string Acknowledge, Int64 ClinicID)
            //{
            //    bool _result = false;
            //    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
            //    Int64 _PrefixTransactionID = 0;
            //    DateTime _NoteDateTime = DateTime.Now;
            //    //int _IsPage = 0;
            //    Int64 _AcknowledgeID = 0;
            //    object _DBCurrentAcknowledgeID = null;

            //    try
            //    {
            //        if (ContainerID > 0 && DocumentID > 0 && Acknowledge.Length > 0)
            //        {
            //            oDB.Connect(false);

            //            //DocumentProgressEvent(20, "");

            //            #region "1. eDocument_Container - Mandatory"
            //            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);
            //            _NoteDateTime = DateTime.Now;
            //            //if (IsPage == true) { _IsPage = 1; }

            //            //DocumentProgressEvent(40, "");

            //            oParameters.Add("@eDocumentID", DocumentID, ParameterDirection.Input, SqlDbType.BigInt);
            //            oParameters.Add("@eContainerID", ContainerID, ParameterDirection.Input, SqlDbType.BigInt);
            //            oParameters.Add("@ContainerPageNumber", 0, ParameterDirection.Input, SqlDbType.Int);
            //            oParameters.Add("@DocumentPageNumber", 0, ParameterDirection.Input, SqlDbType.Int);
            //            oParameters.Add("@NTAOID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
            //            oParameters.Add("@UserID", UserID, ParameterDirection.Input, SqlDbType.BigInt);
            //            oParameters.Add("@UserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
            //            oParameters.Add("@NTAODateTime", datetime, ParameterDirection.Input, SqlDbType.DateTime);
            //            oParameters.Add("@NTAODescription ", Acknowledge, ParameterDirection.Input, SqlDbType.VarChar, 1000);
            //            oParameters.Add("@IsPage", false, ParameterDirection.Input, SqlDbType.Bit);
            //            oParameters.Add("@NTAOType", enum_NTAOType.Acknowledge.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
            //            oParameters.Add("@ClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
            //            oParameters.Add("@PrefixID", _PrefixTransactionID, ParameterDirection.Input, SqlDbType.BigInt);

            //            //DocumentProgressEvent(60, "");

            //            int result = oDB.Execute("gsp_eDoc_InUpNTAO_V3", oParameters, out _DBCurrentAcknowledgeID);
            //            if (_DBCurrentAcknowledgeID != null)
            //            {
            //                if (_DBCurrentAcknowledgeID.ToString() != null)
            //                {
            //                    _AcknowledgeID = Convert.ToInt64(_DBCurrentAcknowledgeID);

            //                    //Make entry in Details Table (eDocument_Details) if acknowledgement for document
            //                    //Set the IsAcknowledge field true
            //                    //sagar - 20080207
            //                    if (_AcknowledgeID > 0)//&& IsPage == false)
            //                    {
            //                        string strQuery = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + true + "' " +
            //                                          " WHERE eDocumentID=" + DocumentID + " " +
            //                                          " AND ClinicID = " + ClinicID + " ";
            //                        int retVal = oDB.Execute_Query(strQuery);
            //                        strQuery = "";

            //                    }
            //                    //
            //                }
            //            }
            //            oParameters.Clear();

            //            //DocumentProgressEvent(80, "");
            //            #endregion

            //            oDB.Disconnect();

            //            if (_AcknowledgeID > 0) { _result = true; }
            //            //DocumentProgressEvent(100, "");
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        //Code added on 4rd Octomber 2008 By - Sagar Ghodke
            //        //Make Log entry in DMSExceptionLog file for any exceptions found
            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        //End Code add
            //    }
            //    finally
            //    {
            //        oDB.Disconnect();
            //        oDB.Dispose();
            //        oParameters.Dispose();
            //    }



            //    return _result;
            //    //ContainerPageNumber - 0
            //    //DocumentPageNumber - 0
            //    //NTAOID - auto generate
            //    //IsPage - false
            //    //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Acknowledge.GetHashCode()
            //    //return false;
            //}
            public bool AddAcknowledge(Int64 PatientID, Int64 DocumentID, Int64 ContainerID, Int64 UserID, string UserName, DateTime datetime, string Acknowledge, Int64 ClinicID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                bool _result = false;
                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                Int64 _PrefixTransactionID = 0;
                DateTime _NoteDateTime = DateTime.Now;

                Int64 _AcknowledgeID = 0;
                object _DBCurrentAcknowledgeID = null;

                try
                {
                    if (ContainerID > 0 && DocumentID > 0 && Acknowledge.Length > 0)
                    {
                        if (oDB != null)
                        {
                            if (oDB.Connect(false))
                            {



                                #region "1. eDocument_Container - Mandatory"
                                _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);
                                _NoteDateTime = DateTime.Now;

                                if (oParameters != null)
                                {
                                    oParameters.Add("@eDocumentID", DocumentID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oParameters.Add("@eContainerID", ContainerID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oParameters.Add("@ContainerPageNumber", 0, ParameterDirection.Input, SqlDbType.Int);
                                    oParameters.Add("@DocumentPageNumber", 0, ParameterDirection.Input, SqlDbType.Int);
                                    oParameters.Add("@NTAOID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                    oParameters.Add("@UserID", UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oParameters.Add("@UserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
                                    oParameters.Add("@NTAODateTime", datetime, ParameterDirection.Input, SqlDbType.DateTime);
                                    oParameters.Add("@NTAODescription ", Acknowledge, ParameterDirection.Input, SqlDbType.VarChar, 1000);
                                    oParameters.Add("@IsPage", false, ParameterDirection.Input, SqlDbType.Bit);
                                    oParameters.Add("@NTAOType", enum_NTAOType.Acknowledge.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                                    oParameters.Add("@ClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                    oParameters.Add("@PrefixID", _PrefixTransactionID, ParameterDirection.Input, SqlDbType.BigInt);

                                    int result;

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        result = oDB.Execute("gsp_eDoc_InUpNTAO_V3_RCM", oParameters, out _DBCurrentAcknowledgeID);
                                    }
                                    else
                                    {
                                        result = oDB.Execute("gsp_eDoc_InUpNTAO_V3", oParameters, out _DBCurrentAcknowledgeID);
                                    }

                                    if (_DBCurrentAcknowledgeID != null)
                                    {
                                        if (_DBCurrentAcknowledgeID.ToString() != null)
                                        {
                                            _AcknowledgeID = System.Convert.ToInt64(_DBCurrentAcknowledgeID);


                                            if (_AcknowledgeID > 0)
                                            {
                                                string strQuery;

                                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                {
                                                    strQuery = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET IsAcknowledge = '" + true + "' " +
                                                                  " WHERE eDocumentID=" + DocumentID + " " +
                                                                  " AND ClinicID = " + ClinicID + " ";
                                                }
                                                else
                                                {
                                                    strQuery = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + true + "' " +
                                                                  " WHERE eDocumentID=" + DocumentID + " " +
                                                                  " AND ClinicID = " + ClinicID + " ";
                                                }

                                                int retVal = oDB.Execute_Query(strQuery);
                                                strQuery = "";

                                            }
                                            //
                                        }
                                    }
                                    oParameters.Clear();


                                #endregion
                                    if (oDB != null)
                                    {
                                        oDB.Disconnect();
                                    }

                                    if (_AcknowledgeID > 0)
                                    {
                                        _result = true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        // oParameters.Dispose();
                        oDB = null;
                    }
                    if (oParameters != null)
                    {
                        oParameters.Dispose();
                        oParameters = null;
                    }
                }



                return _result;

            }

            #endregion "Dhruv 2010 -> AddAcknowledge"


            #region "Dhruv 2010 -> ClearAcknowledgeHistory"
            //public bool ClearAcknowledgeHistory_Old(long DocumentID, long ClinicID)
            //{
            //    bool _result = false;
            //    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    string _strDeleteQuery = "";

            //    try
            //    {
            //        oDB.Connect(false);
            //        //clear all Acknowledgement entries against selected user
            //        _strDeleteQuery = " DELETE FROM eDocument_NTAO_V3 WITH(READPAST)" + " " +
            //                          " WHERE eDocumentID = " + DocumentID + " " +
            //                          " AND ClinicID = " + ClinicID + " " +
            //                          " AND NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " ";
            //        int _returnValue = oDB.Execute_Query(_strDeleteQuery);

            //        if (_returnValue > 0)
            //        {
            //            string _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
            //                              " WHERE eDocumentID = " + DocumentID + " " +
            //                              " AND ClinicID = " + ClinicID + " ";
            //            _returnValue = oDB.Execute_Query(_sqlQuery);
            //            _result = true;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //        _result = false;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        _strDeleteQuery = "";

            //        if (_strDeleteQuery != null)
            //            _strDeleteQuery = null;

            //        if (oDB.Connect(false))
            //            oDB.Disconnect();

            //        if (oDB != null)
            //            oDB.Dispose();
            //    }

            //    return _result;
            //}
            public bool ClearAcknowledgeHistory(long DocumentID, long ClinicID)
            {
                bool _result = false;
                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                string _strDeleteQuery = "";

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {

                            //clear all Acknowledgement entries against selected user
                            _strDeleteQuery = " DELETE FROM eDocument_NTAO_V3 WITH(READPAST)" + " " +
                                              " WHERE eDocumentID = " + DocumentID + " " +
                                              " AND ClinicID = " + ClinicID + " " +
                                              " AND NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " ";
                            int _returnValue = oDB.Execute_Query(_strDeleteQuery);

                            if (_returnValue > 0)
                            {
                                string _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
                                                  " WHERE eDocumentID = " + DocumentID + " " +
                                                  " AND ClinicID = " + ClinicID + " ";
                                _returnValue = oDB.Execute_Query(_sqlQuery);
                                _result = true;
                            }
                        }
                        if (oDB != null)
                        {
                            oDB.Disconnect();
                        }
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    _result = false;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    _strDeleteQuery = "";

                    if (_strDeleteQuery != null)
                        _strDeleteQuery = null;

                    //   if (oDB.Connect(false))

                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }

                return _result;
            }
            #endregion "Dhruv 2010 -> ClearAcknowledgeHistory"



            #region "Dhruv 2010 -> DeleteAcknowledge"

            //public bool DeleteAcknowledge_Old(Int64 DocumentID, Int64 AcknowledgeID, Int64 ClinicID)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    bool _result = false;
            //    string _sqlQuery = "";
            //    try
            //    {
            //        _sqlQuery = " Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " AND NTAOID=" + AcknowledgeID + " " +
            //                           " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Acknowledge.GetHashCode() + " ";
            //        oDB.Connect(false);
            //        int _res = oDB.Execute_Query(_sqlQuery);
            //        if (_res > 0)
            //        {
            //            if (eDocValidator.IsAcknowledged(DocumentID, gloEDocV3Admin.gClinicID) == false)
            //            {
            //                _sqlQuery = "";
            //                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
            //                            " WHERE eDocumentID=" + DocumentID + " " +
            //                            " AND ClinicID = " + ClinicID + "";
            //                _res = oDB.Execute_Query(_sqlQuery);
            //            }
            //            _result = true;
            //        }
            //    }

            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //        _result = false;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        {
            //            oDB.Disconnect();
            //            oDB.Dispose();
            //        }
            //    }
            //    return _result;
            //}
            public bool DeleteAcknowledge(Int64 DocumentID, Int64 AcknowledgeID, Int64 ClinicID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                bool _result = false;
                string _sqlQuery = "";
                try
                {
                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                    {
                        _sqlQuery = " Delete from eDocument_NTAO_V3_RCM WITH(READPAST) Where eDocumentID=" + DocumentID + " AND NTAOID=" + AcknowledgeID + " " +
                                       " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Acknowledge.GetHashCode() + " ";
                    }
                    else
                    {
                        _sqlQuery = " Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " AND NTAOID=" + AcknowledgeID + " " +
                                       " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Acknowledge.GetHashCode() + " ";
                    }

                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            int _res = oDB.Execute_Query(_sqlQuery);
                            if (_res > 0)
                            {
                                if (eDocValidator.IsAcknowledged(DocumentID, gloEDocV3Admin.gClinicID, _OpenExternalSource) == false)
                                {
                                    _sqlQuery = "";

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
                                                " WHERE eDocumentID=" + DocumentID + " " +
                                                " AND ClinicID = " + ClinicID + "";
                                    }
                                    else
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
                                                " WHERE eDocumentID=" + DocumentID + " " +
                                                " AND ClinicID = " + ClinicID + "";
                                    }

                                    _res = oDB.Execute_Query(_sqlQuery);
                                }
                                _result = true;
                            }
                        }
                        if (oDB != null)
                        {
                            oDB.Disconnect();
                        }
                    }
                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    _result = false;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return _result;
            }

            #endregion "Dhruv 2010 -> DeleteAcknowledge"



            #region "Dhruv 2010 -> DeleteAcknowledge"
            public bool DeleteAcknowledge_Old(Int64 DocumentID, Int64 ClinicID)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                bool _result = false;
                string _sqlQuery = "";
                try
                {
                    _sqlQuery = "Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Acknowledge.GetHashCode() + " ";
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            int _res = oDB.Execute_Query(_sqlQuery);
                            if (_res > 0)
                            {
                                _sqlQuery = "";
                                _sqlQuery = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
                                            " WHERE eDocumentID=" + DocumentID + " " +
                                            " AND ClinicID = " + ClinicID + " ";
                                _res = oDB.Execute_Query(_sqlQuery);
                                _result = true;
                            }
                        }
                        if (oDB != null)
                        {
                            oDB.Disconnect();
                        }
                    }
                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    _result = false;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }

                }
                return _result;
            }
            public bool DeleteAcknowledge(Int64 DocumentID, Int64 ClinicID)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                bool _result = false;
                string _sqlQuery = "";
                try
                {
                    _sqlQuery = "Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Acknowledge.GetHashCode() + " ";
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            int _res = oDB.Execute_Query(_sqlQuery);
                            if (_res > 0)
                            {
                                _sqlQuery = "";
                                _sqlQuery = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsAcknowledge = '" + false + "' " +
                                            " WHERE eDocumentID=" + DocumentID + " " +
                                            " AND ClinicID = " + ClinicID + " ";
                                _res = oDB.Execute_Query(_sqlQuery);
                                _result = true;
                            }
                            else
                            {
                                return false;
                            }
                        }
                        if (oDB != null)
                        {

                            oDB.Disconnect();
                        }
                    }
                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    _result = false;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }

                }
                return _result;
            }
            #endregion "Dhruv 2010 -> DeleteAcknowledge"

            //END SUDHIR
            #endregion

            #region "User Tag"

            #region "Dhruv 2010 -> AddUserTag"

            //public bool AddUserTag_Old(Int64 PatientID, Int64 DocumentID, Int64 ContainerID, Int32 ContainerPageNumber, Int32 DocumentPageNumber, Int64 UserID, string UserName, DateTime datetime, string UserTag, Int64 ClinicID)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
            //    bool _result = false;
            //    Int64 _PrefixID = 0;
            //    Object _TagID = 0;

            //    try
            //    {
            //        oDB.Connect(false);
            //        _PrefixID = eDocValidator.GetPrefixTransactionID(PatientID);

            //        oParameters.Add("@eDocumentID", DocumentID, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@eContainerID", ContainerID, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@ContainerPageNumber", ContainerPageNumber, ParameterDirection.Input, SqlDbType.Int);
            //        oParameters.Add("@DocumentPageNumber", DocumentPageNumber, ParameterDirection.Input, SqlDbType.Int);
            //        oParameters.Add("@NTAOID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
            //        oParameters.Add("@UserID", UserID, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@UserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
            //        oParameters.Add("@NTAODateTime", datetime, ParameterDirection.Input, SqlDbType.DateTime);
            //        oParameters.Add("@NTAODescription ", UserTag, ParameterDirection.Input, SqlDbType.VarChar, 1000);
            //        oParameters.Add("@IsPage", true, ParameterDirection.Input, SqlDbType.Bit);
            //        oParameters.Add("@NTAOType", enum_NTAOType.Tag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
            //        oParameters.Add("@ClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@PrefixID", _PrefixID, ParameterDirection.Input, SqlDbType.BigInt);

            //        int _res = oDB.Execute("gsp_eDoc_InUpNTAO_V3", oParameters, out _TagID);
            //        if (_res > 0 && Convert.ToInt64(_TagID) > 0)
            //        {
            //            _result = true;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        { oDB.Disconnect(); oDB.Dispose(); }
            //        if (oParameters != null) { oParameters.Dispose(); }
            //    }
            //    return _result;
            //    //NTAOID - auto generate
            //    //IsPage - true
            //    //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode()
            //    return false;
            //}
            public bool AddUserTag(Int64 PatientID, Int64 DocumentID, Int64 ContainerID, Int32 ContainerPageNumber, Int32 DocumentPageNumber, Int64 UserID, string UserName, DateTime datetime, string UserTag, Int64 ClinicID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                bool _result = false;
                Int64 _PrefixID = 0;
                Object _TagID = 0;

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            _PrefixID = eDocValidator.GetPrefixTransactionID(PatientID);
                            if (oParameters != null)
                            {
                                oParameters.Add("@eDocumentID", DocumentID, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@eContainerID", ContainerID, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@ContainerPageNumber", ContainerPageNumber, ParameterDirection.Input, SqlDbType.Int);
                                oParameters.Add("@DocumentPageNumber", DocumentPageNumber, ParameterDirection.Input, SqlDbType.Int);
                                oParameters.Add("@NTAOID", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oParameters.Add("@UserID", UserID, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@UserName", UserName, ParameterDirection.Input, SqlDbType.VarChar);
                                oParameters.Add("@NTAODateTime", datetime, ParameterDirection.Input, SqlDbType.DateTime);
                                oParameters.Add("@NTAODescription ", UserTag, ParameterDirection.Input, SqlDbType.VarChar, 1000);
                                oParameters.Add("@IsPage", true, ParameterDirection.Input, SqlDbType.Bit);
                                oParameters.Add("@NTAOType", enum_NTAOType.Tag.GetHashCode(), ParameterDirection.Input, SqlDbType.Int);
                                oParameters.Add("@ClinicID", ClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@PrefixID", _PrefixID, ParameterDirection.Input, SqlDbType.BigInt);

                                int _res;

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _res = oDB.Execute("gsp_eDoc_InUpNTAO_V3_RCM", oParameters, out _TagID);
                                }
                                else
                                {
                                    _res = oDB.Execute("gsp_eDoc_InUpNTAO_V3", oParameters, out _TagID);
                                }

                                if (_res > 0 && System.Convert.ToInt64(_TagID) > 0)
                                {
                                    _result = true;
                                }
                            }
                            if (oDB != null)
                            {
                                oDB.Disconnect();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    if (oParameters != null)
                    {
                        oParameters.Dispose();
                        oParameters = null;
                    }
                }
                return _result;
                //NTAOID - auto generate
                //IsPage - true
                //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode()
                //return false;
            }
            #endregion "Dhruv 2010 -> AddUserTag"


            //code added by rohit to convert DOC TO PDF on 20110106
            public bool ImportWordDoc(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, bool appservices, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                gloEDocumentV3.gloEDocV3Admin.ConnectToPDFTron();
                using (System.Windows.Forms.ProgressBar pbDocument = new System.Windows.Forms.ProgressBar())
                {
                    pbDocument.Value = 0;
                    _isgloServices = appservices;
                    return ImportWordDoc(PatientID, SourceDocuments, DestDocumentName, DestCategoryID, DestCategory, DestYear, DestMonth, ClinicID, out  DestContainerID, out  DestDocumentID, PerformCompression, pbDocument, _OpenExternalSource);
                }
            }

            public bool ImportWordDoc(long PatientID, System.Collections.ArrayList oImageDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, System.Windows.Forms.ProgressBar pbDocument, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                //    #region " Variable Declaration "



                string _tempProcessPath = "";
                string _OutputFilePath = "";
                bool _result = false;
                bool oDialogResultIsOK = false;
                Int64 _DocumentID = 0;
                Int64 _ContainerID = 0;
                string sImage = "";


                _tempProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\ImportImages";
                if (_tempProcessPath != "")
                {
                    if (Directory.Exists(_tempProcessPath) == false)
                    {
                        Directory.CreateDirectory(_tempProcessPath);
                        if (Directory.Exists(_tempProcessPath) == false)
                        {
                            _ErrorMessage = "Unable to create directory. " + _tempProcessPath;
                            ErrorMessagees(_ErrorMessage);
                        }
                    }
                    _OutputFilePath = _tempProcessPath + "\\" + DestDocumentName + ".pdf";

                    for (int i = 0; i < oImageDocuments.Count; i++)
                    {

                        FileInfo ofileInfo = new FileInfo(oImageDocuments[i].ToString());
                        if (ofileInfo != null)
                        {
                            string fileExtension = ofileInfo.Extension.ToUpper();


                            //bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());

                            //if processed by another machine should be checked [Dhruv]
                            sImage = oImageDocuments[i].ToString();
                            // bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());
                        }
                    }
                    //SLR: 7/14 : Please check do we need to only copy the last file. Why?????

                    pdftron.PDF.PDFDoc doc = new pdftron.PDF.PDFDoc();
                    pdftron.PDF.Convert.ToPdf(doc, sImage);
                    doc.Save(_OutputFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_remove_unused);
                    doc.Close();
                    doc.Dispose();

                }

                if (File.Exists(_OutputFilePath) == true)
                {
                    ArrayList SourceDocment = new ArrayList();
                    SourceDocment.Add(_OutputFilePath);
                    oDialogResultIsOK = ImportSplit(PatientID, SourceDocment, DestDocumentName, DestCategoryID, DestCategory, "", DestYear, DestMonth, ClinicID, out _ContainerID, out _DocumentID, PerformCompression, pbDocument, _OpenExternalSource);
                    SourceDocment.Clear();
                    SourceDocment = null;
                }

                DestContainerID = _ContainerID;
                DestDocumentID = _DocumentID;
                return _result;
            }

            // code added end by rohit to convert DOC TO PDF on 20110106

            #region "Dhruv 2010 -> ClearTagHistory"
            //public bool ClearTagHistory_Old(long DocumentID, long ClinicID)
            //{
            //    gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Object _RetVal = new object();
            //    string _sqlQuery = "";
            //    bool _result = false;

            //    try
            //    {
            //        oDB.Connect(false);
            //        //clear all notes entries against selected user
            //        _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " AND "
            //                           + " AND ClinicID=" + ClinicID + " AND "
            //                           + " NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";


            //        int _returnValue = oDB.Execute_Query(_sqlQuery);
            //        if (_returnValue > 0)
            //        {
            //            #region ".update the has Tag flag of document details"

            //            _sqlQuery = "";
            //            _returnValue = 0;
            //            _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
            //                        " WHERE eDocumentID = " + DocumentID + " AND ClinicID = " + ClinicID + " ";
            //            _returnValue = oDB.Execute_Query(_sqlQuery);

            //            #endregion "update the has Tag flag of document details"

            //            _result = true;
            //        }

            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //        _result = false;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion

            //    }
            //    finally
            //    {
            //        if (oDB.Connect(false)) { oDB.Disconnect(); }
            //        if (oDB != null) { oDB.Dispose(); }
            //        if (_RetVal != null) { _RetVal = null; }
            //    }
            //    return _result;
            //    //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode()
            //}
            public bool ClearTagHistory(long DocumentID, long ClinicID)
            {
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                Object _RetVal = null;
                string _sqlQuery = "";
                bool _result = false;

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            //clear all notes entries against selected user
                            _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " AND "
                                               + " AND ClinicID=" + ClinicID + " AND "
                                               + " NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";


                            int _returnValue = oDB.Execute_Query(_sqlQuery);
                            if (_returnValue > 0)
                            {
                                #region ".update the has Tag flag of document details"

                                _sqlQuery = "";
                                _returnValue = 0;
                                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = '" + false + "' " +
                                            " WHERE eDocumentID = " + DocumentID + " AND ClinicID = " + ClinicID + " ";
                                _returnValue = oDB.Execute_Query(_sqlQuery);

                                #endregion "update the has Tag flag of document details"

                                _result = true;
                            }

                        }
                        if (oDB != null)
                        {
                            oDB.Disconnect();
                        }
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    _result = false;

                    ErrorMessagees(_ErrorMessage);

                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    if (_RetVal != null)
                    {
                        _RetVal = null;
                    }
                }
                return _result;
                //NTAOType - gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode()
            }

            #endregion "Dhruv 2010 -> ClearTagHistory"

            #region "Dhruv 2010 -> DeleteUserTag"
            //public bool DeleteUserTag_Old(Int64 DocumentID, Int64 UserTagID, Int64 ClinicID)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    bool _result = false;
            //    string _sqlQuery = "";
            //    Object _RetVal = new object();

            //    try
            //    {
            //        oDB.Connect(false);
            //        _sqlQuery = " DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE eDocumentID=" + DocumentID + " AND NTAOID=" + UserTagID + " " +
            //                    " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";
            //        int _res = oDB.Execute_Query(_sqlQuery);
            //        if (_res > 0)
            //        {
            //            _result = true;
            //        }

            //    }

            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        { oDB.Disconnect(); oDB.Dispose(); }
            //        if (_RetVal != null) { _RetVal = null; }
            //    }
            //    return _result;
            //}
            public bool DeleteUserTag(Int64 DocumentID, Int64 UserTagID, Int64 ClinicID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                bool _result = false;
                string _sqlQuery = "";
                Object _RetVal = null;

                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE eDocumentID=" + DocumentID + " AND NTAOID=" + UserTagID + " " +
                                        " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";
                            }
                            else
                            {
                                _sqlQuery = " DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE eDocumentID=" + DocumentID + " AND NTAOID=" + UserTagID + " " +
                                        " AND ClinicID=" + ClinicID + " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";
                            }

                            int _res = oDB.Execute_Query(_sqlQuery);
                            if (_res > 0)
                            {
                                _result = true;
                            }
                            if (oDB != null)
                            {
                                oDB.Disconnect();
                            }
                        }
                    }
                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    if (_RetVal != null)
                    {
                        _RetVal = null;
                    }
                }
                return _result;
            }
            #endregion "Dhruv 2010 -> DeleteUserTag"



            #region "Dhruv 2010 -> DeleteUserTag"
            //public bool DeleteUserTag_Old(Int64 DocumentID, Int64 ContainerID, Int32 ContainerPageNumber, Int32 DocumentPageNumber, Int64 ClinicID)
            //{
            //    Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    bool _result = false;
            //    try
            //    {
            //        string _sqlQuery = "Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " " +
            //                           " AND eContainerID=" + ContainerID + " AND ContainerPageNumber=" + ContainerPageNumber + " " +
            //                           " AND DocumentPageNumber=" + DocumentPageNumber + " AND ClinicID=" + ClinicID + " " +
            //                           " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";
            //        oDB.Connect(false);
            //        int _res = oDB.Execute_Query(_sqlQuery);
            //        if (_res > 0)
            //            _result = true;

            //    }

            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        {
            //            oDB.Disconnect();
            //            oDB.Dispose();
            //        }
            //    }
            //    return _result;
            //}
            public bool DeleteUserTag(Int64 DocumentID, Int64 ContainerID, Int32 ContainerPageNumber, Int32 DocumentPageNumber, Int64 ClinicID)
            {
                Database.DBLayer oDB = new Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                bool _result = false;
                try
                {
                    string _sqlQuery = "Delete from eDocument_NTAO_V3 WITH(READPAST) Where eDocumentID=" + DocumentID + " " +
                                       " AND eContainerID=" + ContainerID + " AND ContainerPageNumber=" + ContainerPageNumber + " " +
                                       " AND DocumentPageNumber=" + DocumentPageNumber + " AND ClinicID=" + ClinicID + " " +
                                       " AND NTAOType=" + gloEDocumentV3.Enumeration.enum_NTAOType.Tag.GetHashCode() + " ";
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            int _res = oDB.Execute_Query(_sqlQuery);
                            if (_res > 0)
                                _result = true;
                            if (oDB != null)
                            {
                                oDB.Disconnect();
                            }
                        }
                    }
                }

                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return _result;
            }
            #endregion "Dhruv 2010 -> DeleteUserTag"


            #endregion

            #region "Category"

            #region "Dhruv 2010 -> AddCategory"
            //public Int64 AddCategory_Old(string CategoryName)
            //{
            //    object _result = null;
            //    Int64 _CategoryId = 0;
            //    gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    gloEDocumentV3.Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();

            //    try
            //    {
            //        //@CategoryId,@CategoryName,@GroupId,@LevelID,@ClinicID
            //        oParameters.Add("@CategoryId", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
            //        oParameters.Add("@CategoryName", CategoryName, ParameterDirection.Input, SqlDbType.VarChar);
            //        oParameters.Add("@GroupId", 0, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@LevelID", 0, ParameterDirection.Input, SqlDbType.BigInt);
            //        oParameters.Add("@ClinicID", gloEDocV3Admin.gClinicID, ParameterDirection.Input, SqlDbType.BigInt);

            //        oDB.Connect(false);
            //        int _res = oDB.Execute("gsp_eDocV3_InUpCategory", oParameters, out _result);

            //        if (_result != null)
            //        {
            //            _CategoryId = Convert.ToInt64(_result);

            //        }
            //        else
            //        {
            //            _CategoryId = 0;
            //        }

            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion

            //        _CategoryId = 0;
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        {
            //            oDB.Disconnect();
            //            oDB.Dispose();
            //        }
            //    }
            //    return _CategoryId;
            //}
            public Int64 AddCategory(string CategoryName, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                object _result = null;
                Int64 _CategoryId = 0;
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);

                try
                {
                    //@CategoryId,@CategoryName,@GroupId,@LevelID,@ClinicID
                    if (oDB != null)
                    {
                        using (gloEDocumentV3.Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters())
                        {
                            if (oParameters != null)
                            {
                                oParameters.Add("@CategoryId", 0, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oParameters.Add("@CategoryName", CategoryName, ParameterDirection.Input, SqlDbType.VarChar);
                                oParameters.Add("@GroupId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@LevelID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@ClinicID", gloEDocV3Admin.gClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                                if (oDB.Connect(false))
                                {
                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        int _res = oDB.Execute("gsp_eDocV3_InUpCategory_RCM", oParameters, out _result);
                                    }
                                    else
                                    {
                                        int _res = oDB.Execute("gsp_eDocV3_InUpCategory", oParameters, out _result);
                                    }

                                    if (_result != null)
                                    {
                                        _CategoryId = System.Convert.ToInt64(_result);

                                    }
                                    else
                                    {
                                        _CategoryId = 0;
                                    }
                                }
                            }
                        }
                        if (oDB != null)
                        {
                            oDB.Disconnect();
                        }

                    }

                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);

                    _CategoryId = 0;
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }

                }
                return _CategoryId;
            }
            #endregion "Dhruv 2010 -> AddCategory"


            #region "Dhruv 2010 -> UpdateCategory"
            public Int64 UpdateCategory_old(Int32 CategoryID, string CategoryName)
            {
                int _result = 0;
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                gloEDocumentV3.Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                try
                {
                    //@CategoryId,@CategoryName,@GroupId,@LevelID,@ClinicID
                    oParameters.Add("@CategoryId", CategoryID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                    oParameters.Add("@CategoryName", CategoryName, ParameterDirection.Input, SqlDbType.VarChar);
                    oParameters.Add("@GroupId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@LevelID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@ClinicID", gloEDocV3Admin.gClinicID, ParameterDirection.Input, SqlDbType.BigInt);
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            _result = oDB.Execute("gsp_eDocV3_InUpCategory", oParameters, CategoryID);

                            if (_result != 0)
                            {
                                string _strQuery = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET Category = '" + CategoryName + "' WHERE CategoryID = " + CategoryID;
                                _result = oDB.Execute_Query(_strQuery);
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                    oDB.Disconnect();
                    oDB.Dispose();
                    oDB = null;
                    return 0;
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    if (oParameters != null)
                    {
                        oParameters.Dispose();
                        oParameters = null;
                    }

                }
                return _result;
            }
            public Int64 UpdateCategory(Int32 CategoryID, string CategoryName, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                int _result = 0;
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                //gloEDocumentV3.Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                try
                {
                    //@CategoryId,@CategoryName,@GroupId,@LevelID,@ClinicID
                    if (oDB != null)
                    {
                        using (gloEDocumentV3.Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters())
                        {
                            if (oParameters != null)
                            {
                                oParameters.Add("@CategoryId", CategoryID, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                oParameters.Add("@CategoryName", CategoryName, ParameterDirection.Input, SqlDbType.VarChar);
                                oParameters.Add("@GroupId", 0, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@LevelID", 0, ParameterDirection.Input, SqlDbType.BigInt);
                                oParameters.Add("@ClinicID", gloEDocV3Admin.gClinicID, ParameterDirection.Input, SqlDbType.BigInt);

                                if (oDB.Connect(false))
                                {
                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _result = oDB.Execute("gsp_eDocV3_InUpCategory_RCM", oParameters, CategoryID);
                                    }
                                    else
                                    {
                                        _result = oDB.Execute("gsp_eDocV3_InUpCategory", oParameters, CategoryID);
                                    }

                                    if (_result != 0)
                                    {
                                        string _strQuery;

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strQuery = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET Category = '" + CategoryName + "' WHERE CategoryID = " + CategoryID;
                                        }
                                        else
                                        {
                                            _strQuery = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET Category = '" + CategoryName + "' WHERE CategoryID = " + CategoryID;
                                        }

                                        _result = oDB.Execute_Query(_strQuery);
                                    }
                                }
                            }
                        }
                        if (oDB != null)
                        {
                            oDB.Disconnect();
                        }
                    }
                }
                catch (Exception ex)
                {
                    _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    return 0;

                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return _result;
            }

            #endregion "Dhruv 2010 -> UpdateCategory"

            #region "Dhruv 2010 -> DeleteCategory"
            //public Int64 DeleteCategory_Old(Int32 CategoryID)
            //{
            //    int _res = 0;
            //    gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    try
            //    {
            //        oDB.Connect(false);
            //        string _sqlQuery = "Delete from eDocument_Category_V3 WITH(READPAST) where CategoryId = " + CategoryID;
            //        _res = oDB.Execute_Query(_sqlQuery);

            //    }
            //    catch (Exception ex)
            //    {
            //    }
            //    finally
            //    {
            //        if (oDB != null)
            //        {
            //            oDB.Disconnect();
            //            oDB.Dispose();
            //        }
            //    }
            //    return _res;
            //}
            public Int64 DeleteCategory(Int32 CategoryID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                int _res = 0;
                string _sqlQuery = null;
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                try
                {
                    if (oDB != null)
                    {
                        if (oDB.Connect(false))
                        {
                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = "Delete from eDocument_Category_V3_RCM WITH(READPAST) where CategoryId = " + CategoryID;
                            }
                            else
                            {
                                _sqlQuery = "Delete from eDocument_Category_V3 WITH(READPAST) where CategoryId = " + CategoryID;
                            }

                            _res = oDB.Execute_Query(_sqlQuery);
                        }
                        if (oDB != null)
                        {

                            oDB.Disconnect();
                        }
                    }

                }
                catch (Exception ex)
                {
                    _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return _res;
            }



            #endregion "Dhruv 2010 -> DeleteCategory"
            #endregion

            #region "Document Manipulation"
            #region "dhruv 20100629 -> Import"
            //public bool Import_Old(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            //{
            //    SqlConnection _connection = null;
            //    SqlTransaction _transaction = null;
            //    SqlCommand _sqlcommand = null;
            //    SqlParameter _sqlParameter = null;

            //    #region " Variable Declaration "

            //    bool _result = false;
            //    int _sqlresult = 0;
            //    string _strSQL = "";
            //    Int64 _CurrentDocumentID = 0;
            //    Int64 _CurrentContainerID = 0;
            //    int _ImportDocumentPageCount = 0;
            //    Int64 _PrefixTransactionID = 0;
            //    Object _Returnvalue = null;
            //    int _PageCounter = 0;
            //    string _BookMarkTag = "";
            //    string _DocumentExtension = "pdf";
            //    string _FilePath = "";
            //    string _UsedMachine = "";
            //    Int32 _DocumentPageFrom = 0;
            //    Int32 _DocumentPageTo = 0;
            //    string _CompressedFilePath = "";
            //    string _DirectoryPathToCompress = "";

            //    #endregion

            //    try
            //    {
            //        _UsedMachine = Environment.MachineName;

            //        if (SourceDocuments != null && SourceDocuments.Count > 0)
            //        {
            //            for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //            {
            //                _CurrentDocumentID = 0;
            //                _CurrentContainerID = 0;
            //                _ImportDocumentPageCount = 0;
            //                _DocumentPageFrom = 0;
            //                _DocumentPageTo = 0;
            //                _FilePath = "";

            //                _FilePath = Convert.ToString(SourceDocuments[i]);

            //                if (File.Exists(_FilePath) == true)
            //                {
            //                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
            //                    _DocumentPageFrom = 1;
            //                    _DocumentPageTo = _ImportDocumentPageCount;

            //                    bool _UseCompressedDocument = false;
            //                    // 20090707 - Code Commeneted becoz we removed Luratech 
            //                    //#region " Compression Code "

            //                    //gloEDocumentV3.Compression.eDocV3Compression oSDKCompression = new gloEDocumentV3.Compression.eDocV3Compression();
            //                    //oSDKCompression.SDKCompressionProgressEvent += new gloEDocumentV3.Compression.eDocV3Compression.SDKCompressionProgress(oSDKCompression_SDKCompressionProgressEvent);

            //                    //if (PerformCompression == true)
            //                    //{
            //                    //    try
            //                    //    {
            //                    //        //1.Check for process dir existing or not if exists delete and create new 
            //                    //        _DirectoryPathToCompress = gloEDocumentV3.gloEDocV3Admin.gLuraTechTemporaryProcessPath;

            //                    //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //                    //        { Directory.Delete(_DirectoryPathToCompress, true); }

            //                    //        Directory.CreateDirectory(_DirectoryPathToCompress);

            //                    //        //2.Copy the file to temp compress process path
            //                    //        if (File.Exists(_FilePath))
            //                    //        {
            //                    //            FileInfo fInfo = new FileInfo(_FilePath);
            //                    //            string _strFileName = fInfo.Name;
            //                    //            fInfo = null;

            //                    //            _CompressedFilePath = "";
            //                    //            _CompressedFilePath = _DirectoryPathToCompress + "\\" + _strFileName.Substring(0, (_strFileName.Length - 4)) + "_cpr.pdf";
            //                    //            _UseCompressedDocument = oSDKCompression.CompressDocument(_FilePath, _CompressedFilePath);
            //                    //            if (File.Exists(_CompressedFilePath) == false && gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_CompressedFilePath) > 0)
            //                    //            { _UseCompressedDocument = false; }
            //                    //        }
            //                    //    }
            //                    //    catch (Exception ex)
            //                    //    {
            //                    //        _UseCompressedDocument = false;
            //                    //    }
            //                    //    finally
            //                    //    {

            //                    //    }
            //                    //}

            //                    //#endregion

            //                    _connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //                    _connection.Open();
            //                    try
            //                    {
            //                        _transaction = _connection.BeginTransaction();
            //                        #region "Database Operations"
            //                        #region " Document Details "
            //                        _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
            //                        _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                        _sqlcommand.CommandTimeout = 0;
            //                        _sqlcommand.Transaction = _transaction;

            //                        _sqlcommand.Parameters.Clear();

            //                        _sqlParameter = new SqlParameter();
            //                        _sqlParameter.ParameterName = "@eDocumentID";
            //                        _sqlParameter.Value = _CurrentDocumentID;
            //                        _sqlParameter.Direction = ParameterDirection.InputOutput;
            //                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
            //                        _sqlcommand.Parameters.Add(_sqlParameter);
            //                        _sqlParameter = null;

            //                        _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = DestDocumentName + Convert.ToString((i + 1));
            //                        _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestCategoryID;
            //                        _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestCategory;
            //                        _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = PatientID;
            //                        _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestYear;
            //                        _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestMonth;
            //                        _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
            //                        _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
            //                        _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
            //                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
            //                        _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
            //                        _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
            //                        _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
            //                        _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
            //                        _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
            //                        _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                        _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
            //                        _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
            //                        _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
            //                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
            //                        _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
            //                        _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
            //                        _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
            //                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
            //                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

            //                        _sqlresult = _sqlcommand.ExecuteNonQuery();
            //                        if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
            //                        {
            //                            _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
            //                        }

            //                        _CurrentDocumentID = Convert.ToInt64(_Returnvalue);

            //                        #endregion

            //                        #region " Container Details "

            //                        _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
            //                        _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                        _sqlcommand.CommandTimeout = 0;
            //                        _sqlcommand.Transaction = _transaction;

            //                        _sqlcommand.Parameters.Clear();
            //                        _sqlParameter = new SqlParameter();
            //                        _sqlParameter.ParameterName = "@eContainerID";
            //                        _sqlParameter.Value = _CurrentContainerID;
            //                        _sqlParameter.Direction = ParameterDirection.InputOutput;
            //                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
            //                        _sqlcommand.Parameters.Add(_sqlParameter);
            //                        _sqlParameter = null;

            //                        _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
            //                        _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
            //                        _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
            //                        _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
            //                        _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
            //                        _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
            //                        _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                        _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
            //                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

            //                        _Returnvalue = 0;
            //                        _sqlresult = _sqlcommand.ExecuteNonQuery();
            //                        if (_sqlcommand.Parameters["@eContainerID"].Value != null)
            //                        {
            //                            _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
            //                        }
            //                        _CurrentContainerID = Convert.ToInt64(_Returnvalue);

            //                        #endregion

            //                        #region "Insert File in to Database"
            //                        string _ChunkFilePath = "";
            //                        //bool _IsFileInserted = false;

            //                        if (_UseCompressedDocument == true)
            //                        {
            //                            //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
            //                            _ChunkFilePath = _CompressedFilePath;
            //                        }
            //                        else
            //                        {
            //                            //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath); 
            //                            _ChunkFilePath = _FilePath;
            //                        }

            //                        if (System.IO.File.Exists(_ChunkFilePath))
            //                        {
            //                            System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
            //                            System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                            using (BinaryReader br = new BinaryReader(oFileStream))
            //                            {
            //                                byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                Int64 offset = 0;

            //                                _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
            //                                _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                                _sqlcommand.CommandTimeout = 0;
            //                                _sqlcommand.Transaction = _transaction;

            //                                while (buffer.Length > 0)
            //                                {
            //                                    _sqlcommand.Parameters.Clear();
            //                                    _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
            //                                    _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
            //                                    _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                                    _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                                    //_sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;//dhruv 20100628
            //                                    _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = buffer.Length;
            //                                    _sqlcommand.ExecuteNonQuery();

            //                                    offset = offset + gloEDocV3Admin.gBufferSize;
            //                                    //buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);//dhruv 20100628
            //                                    buffer = br.ReadBytes(buffer.Length);
            //                                }
            //                            }
            //                            if (oFileStream != null) { oFileStream.Close(); oFileStream.Dispose(); }
            //                        }

            //                        #endregion "Insert File in to Database"

            //                        #region "Page Region"
            //                        for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
            //                        {
            //                            _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();
            //                            _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
            //                            "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
            //                            _sqlcommand = new SqlCommand(_strSQL, _connection);
            //                            _sqlcommand.Transaction = _transaction;
            //                            _sqlcommand.ExecuteNonQuery();
            //                        }

            //                        #endregion
            //                        #endregion
            //                        _transaction.Commit();
            //                    }
            //                    catch (Exception ex)
            //                    {
            //                        _transaction.Rollback();
            //                        _HasError = true;
            //                        _ErrorMessage = ex.Message;
            //                    }
            //                    finally
            //                    {
            //                        if (_connection.State == ConnectionState.Open) { _connection.Close(); }
            //                        if (_connection != null) { _connection.Dispose(); }
            //                    }

            //                }
            //            }
            //        }

            //        if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
            //        { _result = true; }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        _sqlParameter = null;
            //        if (_sqlcommand != null) { _sqlcommand.Dispose(); }
            //        if (_transaction != null) { _transaction.Dispose(); }
            //        if (_connection != null) { _connection.Dispose(); }

            //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //        { Directory.Delete(_DirectoryPathToCompress, true); }
            //    }

            //    DestContainerID = _CurrentContainerID;
            //    DestDocumentID = _CurrentDocumentID;
            //    return _result;
            //}
            public bool Import(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                SqlParameter _sqlParameter = null;

                #region " Variable Declaration "

                bool _result = false;
                int _sqlresult = 0;
                //   string _strSQL = "";
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;
                int _ImportDocumentPageCount = 0;
                Int64 _PrefixTransactionID = 0;
                Object _Returnvalue = null;
                //  int _PageCounter = 0;
                //  string _BookMarkTag = "";
                string _DocumentExtension = "pdf";
                string _FilePath = "";
                string _UsedMachine = "";
                Int32 _DocumentPageFrom = 0;
                Int32 _DocumentPageTo = 0;
                string _CompressedFilePath = "";
                string _DirectoryPathToCompress = "";

                #endregion

                try
                {
                    _UsedMachine = Environment.MachineName;

                    if (SourceDocuments != null && SourceDocuments.Count > 0)
                    {
                        for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                        {
                            _CurrentDocumentID = 0;
                            _CurrentContainerID = 0;
                            _ImportDocumentPageCount = 0;
                            _DocumentPageFrom = 0;
                            _DocumentPageTo = 0;
                            _FilePath = "";

                            _FilePath = System.Convert.ToString(SourceDocuments[i]);

                            if (File.Exists(_FilePath) == true)
                            {
                                _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                                _DocumentPageFrom = 1;
                                _DocumentPageTo = _ImportDocumentPageCount;

                                bool _UseCompressedDocument = false;

                                _connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                                if (_connection != null)
                                {

                                    _connection.Open();
                                    try
                                    {
                                        _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);
                                        _transaction = _connection.BeginTransaction();
                                        #region "Database Operations"
                                        #region " Document Details "
                                        // _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails_RCM", _connection);
                                        }
                                        else
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
                                        }

                                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                        _sqlcommand.CommandTimeout = 0;
                                        _sqlcommand.Transaction = _transaction;

                                        _sqlcommand.Parameters.Clear();

                                        _sqlParameter = new SqlParameter();
                                        _sqlParameter.ParameterName = "@eDocumentID";
                                        _sqlParameter.Value = _CurrentDocumentID;
                                        _sqlParameter.Direction = ParameterDirection.InputOutput;
                                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                        _sqlcommand.Parameters.Add(_sqlParameter);
                                        if (_sqlParameter != null)
                                        {
                                            _sqlParameter = null;
                                        }

                                        _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = DestDocumentName + System.Convert.ToString((i + 1));
                                        _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestCategoryID;
                                        _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestCategory;

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand.Parameters.Add("@SubCategory", System.Data.SqlDbType.VarChar).Value = "";
                                        }

                                        _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = PatientID;
                                        _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestYear;
                                        _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestMonth;
                                        _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                                        _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                        _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
                                        _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
                                        _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                        _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
                                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
                                        _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
                                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                        _sqlresult = _sqlcommand.ExecuteNonQuery();
                                        if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
                                        {
                                            _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
                                        }

                                        _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                        #endregion

                                        #region " Container Details "

                                        //_PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer_RCM", _connection);
                                        }
                                        else
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
                                        }

                                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                        _sqlcommand.CommandTimeout = 0;
                                        _sqlcommand.Transaction = _transaction;

                                        _sqlcommand.Parameters.Clear();
                                        _sqlParameter = new SqlParameter();
                                        _sqlParameter.ParameterName = "@eContainerID";
                                        _sqlParameter.Value = _CurrentContainerID;
                                        _sqlParameter.Direction = ParameterDirection.InputOutput;
                                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                        _sqlcommand.Parameters.Add(_sqlParameter);
                                        if (_sqlParameter != null)
                                        {
                                            _sqlParameter = null;
                                        }
                                        _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                        _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
                                        _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
                                        _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
                                        _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
                                        _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                        _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
                                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                        _Returnvalue = 0;
                                        _sqlresult = _sqlcommand.ExecuteNonQuery();
                                        if (_sqlcommand.Parameters["@eContainerID"].Value != null)
                                        {
                                            _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
                                        }
                                        _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                        #endregion

                                        #region "Insert File in to Database"
                                        string _ChunkFilePath = "";
                                        //bool _IsFileInserted = false;

                                        if (_UseCompressedDocument == true)
                                        {
                                            //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
                                            _ChunkFilePath = _CompressedFilePath;
                                        }
                                        else
                                        {
                                            //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath); 
                                            _ChunkFilePath = _FilePath;
                                        }

                                        if (System.IO.File.Exists(_ChunkFilePath))
                                        {
                                            System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
                                            System.IO.FileStream oFileStream = oFiledata.OpenRead();
                                            using (BinaryReader br = new BinaryReader(oFileStream))
                                            {
                                                byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
                                                Int64 offset = 0;

                                                _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
                                                _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                _sqlcommand.CommandTimeout = 0;
                                                _sqlcommand.Transaction = _transaction;

                                                while (buffer.Length > 0)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
                                                    _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
                                                    //_sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;//dhruv 20100628
                                                    _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = buffer.Length;
                                                    _sqlcommand.ExecuteNonQuery();

                                                    offset = offset + buffer.Length;//gloEDocV3Admin.gBufferSize;
                                                    buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);//dhruv 20100628
                                                    // buffer = br.ReadBytes(buffer.Length);
                                                }

                                            }
                                            if (oFiledata != null)
                                            {
                                                oFiledata = null;
                                            }
                                            if (oFileStream != null)
                                            {
                                                oFileStream.Close();
                                                oFileStream.Dispose();
                                                oFileStream = null;
                                            }
                                        }
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }

                                        #endregion "Insert File in to Database"

                                        #region "Page Region"
                                        //for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
                                        //{
                                        //    _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();

                                        //    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        //    {
                                        //        _strSQL = "INSERT INTO eDocument_Pages_V3_RCM (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        //    "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                        //    }
                                        //    else
                                        //    {
                                        //        _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        //    "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                        //    }

                                        //    _sqlcommand = new SqlCommand(_strSQL, _connection);
                                        //    _sqlcommand.Transaction = _transaction;
                                        //    _sqlcommand.ExecuteNonQuery();
                                        //    if (_sqlcommand != null)
                                        //    {
                                        //        _sqlcommand.Parameters.Clear();
                                        //        _sqlcommand.Dispose();
                                        //        _sqlcommand = null;
                                        //    }
                                        //}

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpPages_RCM", _connection);
                                        }
                                        else
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpPages", _connection);
                                        }

                                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                        _sqlcommand.CommandTimeout = 0;
                                        _sqlcommand.Transaction = _transaction;

                                        _sqlcommand.Parameters.Clear();

                                        _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                        _sqlcommand.Parameters.Add("@eContainerID", System.Data.SqlDbType.BigInt).Value = _CurrentContainerID;
                                        _sqlcommand.Parameters.Add("@ImportDocumentPageCount", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                                        _sqlcommand.Parameters.Add("@DestYear", System.Data.SqlDbType.VarChar).Value = DestYear;
                                        _sqlcommand.Parameters.Add("@DestCategory", System.Data.SqlDbType.VarChar).Value = DestCategory;
                                        _sqlcommand.Parameters.Add("@DestMonth", System.Data.SqlDbType.VarChar).Value = DestMonth;
                                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;

                                        _sqlcommand.ExecuteNonQuery();

                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }

                                        #endregion
                                        #endregion
                                        _transaction.Commit();
                                    }
                                    catch (Exception ex)
                                    {
                                        _transaction.Rollback();
                                        _HasError = true;
                                        _ErrorMessage = ex.Message;
                                    }
                                    finally
                                    {
                                        if (_connection.State == ConnectionState.Open)
                                        {
                                            _connection.Close();
                                        }
                                        if (_connection != null)
                                        {
                                            _connection.Dispose();
                                            _connection = null;
                                        }
                                        if (_transaction != null)
                                        {
                                            _transaction.Dispose();
                                            _transaction = null;
                                        }
                                    }
                                }

                            }
                        }
                    }

                    if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
                    { _result = true; }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    _sqlParameter = null;
                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }
                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (_connection != null)
                    {
                        _connection.Dispose();
                        _connection = null;
                    }

                    if (Directory.Exists(_DirectoryPathToCompress) == true)
                    {
                        Directory.Delete(_DirectoryPathToCompress, true);
                    }
                }


                DestContainerID = _CurrentContainerID;
                DestDocumentID = _CurrentDocumentID;
                return _result;
            }

            public bool Import(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, System.Windows.Forms.ProgressBar pbDocument, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                SqlParameter _sqlParameter = null;

                #region " Variable Declaration "

                bool _result = false;
                int _sqlresult = 0;
                //  string _strSQL = "";
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;
                int _ImportDocumentPageCount = 0;
                Int64 _PrefixTransactionID = 0;
                Object _Returnvalue = null;
                // int _PageCounter = 0;
                // string _BookMarkTag = "";
                string _DocumentExtension = "pdf";
                string _FilePath = "";
                string _UsedMachine = "";
                Int32 _DocumentPageFrom = 0;
                Int32 _DocumentPageTo = 0;
                string _CompressedFilePath = "";
                string _DirectoryPathToCompress = "";

                #endregion

                try
                {
                    _UsedMachine = Environment.MachineName;

                    if (SourceDocuments != null && SourceDocuments.Count > 0)
                    {
                        for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                        {
                            pbDocument.SuspendLayout();
                            if ((i * 100 - 20) > 0)
                            {
                                pbDocument.Value = i * 100 - 20;
                            }
                            else
                            {
                                pbDocument.Value = i;
                            }
                            pbDocument.ResumeLayout(false);
                            pbDocument.PerformLayout();
                            _CurrentDocumentID = 0;
                            _CurrentContainerID = 0;
                            _ImportDocumentPageCount = 0;
                            _DocumentPageFrom = 0;
                            _DocumentPageTo = 0;
                            _FilePath = "";

                            _FilePath = System.Convert.ToString(SourceDocuments[i]);

                            if (File.Exists(_FilePath) == true)
                            {
                                _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                                _DocumentPageFrom = 1;
                                _DocumentPageTo = _ImportDocumentPageCount;

                                bool _UseCompressedDocument = false;

                                _connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                                if (_connection != null)
                                {

                                    _connection.Open();
                                    try
                                    {
                                        _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);
                                        _transaction = _connection.BeginTransaction();
                                        #region "Database Operations"
                                        #region " Document Details "
                                        // _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails_RCM", _connection);
                                        }
                                        else
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
                                        }

                                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                        _sqlcommand.CommandTimeout = 0;
                                        _sqlcommand.Transaction = _transaction;

                                        _sqlcommand.Parameters.Clear();

                                        _sqlParameter = new SqlParameter();
                                        _sqlParameter.ParameterName = "@eDocumentID";
                                        _sqlParameter.Value = _CurrentDocumentID;
                                        _sqlParameter.Direction = ParameterDirection.InputOutput;
                                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                        _sqlcommand.Parameters.Add(_sqlParameter);
                                        if (_sqlParameter != null)
                                        {
                                            _sqlParameter = null;
                                        }

                                        _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = DestDocumentName + System.Convert.ToString((i + 1));
                                        _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestCategoryID;
                                        _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestCategory;

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand.Parameters.Add("@SubCategory", System.Data.SqlDbType.VarChar).Value = "";
                                        }

                                        _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = PatientID;
                                        _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestYear;
                                        _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestMonth;
                                        _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                                        _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                        _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
                                        _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
                                        _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                        _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
                                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
                                        _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
                                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
                                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                        _sqlresult = _sqlcommand.ExecuteNonQuery();
                                        if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
                                        {
                                            _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
                                        }

                                        _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                        #endregion

                                        #region " Container Details "

                                        //_PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer_RCM", _connection);
                                        }
                                        else
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
                                        }

                                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                        _sqlcommand.CommandTimeout = 0;
                                        _sqlcommand.Transaction = _transaction;

                                        _sqlcommand.Parameters.Clear();
                                        _sqlParameter = new SqlParameter();
                                        _sqlParameter.ParameterName = "@eContainerID";
                                        _sqlParameter.Value = _CurrentContainerID;
                                        _sqlParameter.Direction = ParameterDirection.InputOutput;
                                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                        _sqlcommand.Parameters.Add(_sqlParameter);
                                        if (_sqlParameter != null)
                                        {
                                            _sqlParameter = null;
                                        }
                                        _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                        _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
                                        _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
                                        _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
                                        _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
                                        _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
                                        _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                        _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
                                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                        _Returnvalue = 0;
                                        _sqlresult = _sqlcommand.ExecuteNonQuery();
                                        if (_sqlcommand.Parameters["@eContainerID"].Value != null)
                                        {
                                            _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
                                        }
                                        _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                        #endregion

                                        #region "Insert File in to Database"
                                        string _ChunkFilePath = "";
                                        //bool _IsFileInserted = false;

                                        if (_UseCompressedDocument == true)
                                        {
                                            //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
                                            _ChunkFilePath = _CompressedFilePath;
                                        }
                                        else
                                        {
                                            //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath); 
                                            _ChunkFilePath = _FilePath;
                                        }

                                        if (System.IO.File.Exists(_ChunkFilePath))
                                        {
                                            System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
                                            System.IO.FileStream oFileStream = oFiledata.OpenRead();
                                            using (BinaryReader br = new BinaryReader(oFileStream))
                                            {
                                                byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
                                                Int64 offset = 0;

                                                _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
                                                _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                _sqlcommand.CommandTimeout = 0;
                                                _sqlcommand.Transaction = _transaction;

                                                while (buffer.Length > 0)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
                                                    _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
                                                    //_sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;//dhruv 20100628
                                                    _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = buffer.Length;
                                                    _sqlcommand.ExecuteNonQuery();

                                                    offset = offset + buffer.Length;//gloEDocV3Admin.gBufferSize;
                                                    buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);//dhruv 20100628
                                                    // buffer = br.ReadBytes(buffer.Length);
                                                }

                                            }
                                            if (oFiledata != null)
                                            {
                                                oFiledata = null;
                                            }
                                            if (oFileStream != null)
                                            {
                                                oFileStream.Close();
                                                oFileStream.Dispose();
                                                oFileStream = null;
                                            }
                                        }
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }

                                        #endregion "Insert File in to Database"

                                        #region "Page Region"
                                        //for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
                                        //{
                                        //    _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();

                                        //    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        //    {
                                        //        _strSQL = "INSERT INTO eDocument_Pages_V3_RCM (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        //    "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                        //    }
                                        //    else
                                        //    {
                                        //        _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        //    "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                        //    }

                                        //    _sqlcommand = new SqlCommand(_strSQL, _connection);
                                        //    _sqlcommand.Transaction = _transaction;
                                        //    _sqlcommand.ExecuteNonQuery();
                                        //    if (_sqlcommand != null)
                                        //    {
                                        //        _sqlcommand.Parameters.Clear();
                                        //        _sqlcommand.Dispose();
                                        //        _sqlcommand = null;
                                        //    }
                                        //}

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpPages_RCM", _connection);
                                        }
                                        else
                                        {
                                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpPages", _connection);
                                        }

                                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                        _sqlcommand.CommandTimeout = 0;
                                        _sqlcommand.Transaction = _transaction;

                                        _sqlcommand.Parameters.Clear();

                                        _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                        _sqlcommand.Parameters.Add("@eContainerID", System.Data.SqlDbType.BigInt).Value = _CurrentContainerID;
                                        _sqlcommand.Parameters.Add("@ImportDocumentPageCount", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                                        _sqlcommand.Parameters.Add("@DestYear", System.Data.SqlDbType.VarChar).Value = DestYear;
                                        _sqlcommand.Parameters.Add("@DestCategory", System.Data.SqlDbType.VarChar).Value = DestCategory;
                                        _sqlcommand.Parameters.Add("@DestMonth", System.Data.SqlDbType.VarChar).Value = DestMonth;
                                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;

                                        _sqlcommand.ExecuteNonQuery();

                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }

                                        #endregion
                                        #endregion
                                        _transaction.Commit();
                                    }
                                    catch (Exception ex)
                                    {
                                        _transaction.Rollback();
                                        _HasError = true;
                                        _ErrorMessage = ex.Message;
                                    }
                                    finally
                                    {
                                        if (_connection.State == ConnectionState.Open)
                                        {
                                            _connection.Close();
                                        }
                                        if (_connection != null)
                                        {
                                            _connection.Dispose();
                                            _connection = null;
                                        }
                                        if (_transaction != null)
                                        {
                                            _transaction.Dispose();
                                            _transaction = null;
                                        }
                                    }
                                }

                            }
                        }
                    }
                    pbDocument.SuspendLayout();
                    if ((pbDocument.Maximum - 20) > 0)
                    {
                        pbDocument.Value = pbDocument.Maximum - 20;
                    }
                    else
                    {
                        pbDocument.Value = pbDocument.Maximum;
                    }
                    pbDocument.ResumeLayout(false);
                    pbDocument.PerformLayout();
                    if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
                    { _result = true; }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {
                    _sqlParameter = null;
                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }
                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (_connection != null)
                    {
                        _connection.Dispose();
                        _connection = null;
                    }

                    if (Directory.Exists(_DirectoryPathToCompress) == true)
                    {
                        Directory.Delete(_DirectoryPathToCompress, true);
                    }
                }


                DestContainerID = _CurrentContainerID;
                DestDocumentID = _CurrentDocumentID;
                return _result;
            }

            #endregion "dhruv 20100629 -> Import"




            //MultiDocument Single 
            //public bool ImportSplit(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            //{
            //    SqlConnection _connection = null;
            //    SqlTransaction _transaction = null;
            //    SqlCommand _sqlcommand = null;
            //    SqlParameter _sqlParameter = null;
            //    int _NextCntr = 0;
            //    #region " Variable Declaration "

            //    bool _result = false;
            //    int _sqlresult = 0;
            //    string _strSQL = "";
            //    Int64 _CurrentDocumentID = 0;
            //    Int64 _CurrentContainerID = 0;
            //    int _ImportDocumentPageCount = 0;
            //    Int64 _PrefixTransactionID = 0;
            //    Object _Returnvalue = null;
            //    int _PageCounter = 0;
            //    string _BookMarkTag = "";
            //    string _DocumentExtension = "pdf";
            //    string _FilePath = "";
            //    string _UsedMachine = "";
            //    Int32 _DocumentPageFrom = 0;
            //    Int32 _DocumentPageTo = 0;
            //    string _CompressedFilePath = "";
            //    string _DirectoryPathToCompress = "";

            //    #endregion

            //    try
            //    {
            //        _UsedMachine = Environment.MachineName;

            //        if (SourceDocuments != null && SourceDocuments.Count > 0)
            //        {
            //            ArrayList _SplitedDocs = new ArrayList();
            //            //Send and Get splitted list
            //            eDocGetList oList = new eDocGetList();
            //            bool _IsDocSplitted = oList.SpiltDocumentsOnSize(SourceDocuments, out _SplitedDocs);
            //            oList.Dispose();

            //            //bool _IsDocSplitted = SpiltDocuments(SourceDocuments, out _SplitedDocs);


            //            if (_IsDocSplitted == true) // && _SplitedDocs.Count > 0)
            //            {
            //                SourceDocuments.Clear();
            //                SourceDocuments = _SplitedDocs;
            //            }

            //            if (SourceDocuments != null)
            //            {

            //                for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //                {
            //                    _CurrentDocumentID = 0;
            //                    _CurrentContainerID = 0;
            //                    _ImportDocumentPageCount = 0;
            //                    _DocumentPageFrom = 0;
            //                    _DocumentPageTo = 0;
            //                    _FilePath = "";

            //                    _FilePath = Convert.ToString(SourceDocuments[i]);

            //                    if (File.Exists(_FilePath) == true)
            //                    {
            //                        _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
            //                        _DocumentPageFrom = 1;
            //                        _DocumentPageTo = _ImportDocumentPageCount;

            //                        #region " Compression Code "

            //                        bool _UseCompressedDocument = false;
            //                        gloEDocumentV3.Compression.eDocV3Compression oSDKCompression = new gloEDocumentV3.Compression.eDocV3Compression();
            //                        oSDKCompression.SDKCompressionProgressEvent += new gloEDocumentV3.Compression.eDocV3Compression.SDKCompressionProgress(oSDKCompression_SDKCompressionProgressEvent);

            //                        if (PerformCompression == true)
            //                        {
            //                            try
            //                            {
            //                                //1.Check for process dir existing or not if exists delete and create new 
            //                                _DirectoryPathToCompress = gloEDocumentV3.gloEDocV3Admin.gLuraTechTemporaryProcessPath;

            //                                if (Directory.Exists(_DirectoryPathToCompress) == true)
            //                                { Directory.Delete(_DirectoryPathToCompress, true); }

            //                                Directory.CreateDirectory(_DirectoryPathToCompress);

            //                                //2.Copy the file to temp compress process path
            //                                if (File.Exists(_FilePath))
            //                                {
            //                                    FileInfo fInfo = new FileInfo(_FilePath);
            //                                    string _strFileName = fInfo.Name;
            //                                    fInfo = null;

            //                                    _CompressedFilePath = "";
            //                                    _CompressedFilePath = _DirectoryPathToCompress + "\\" + _strFileName.Substring(0, (_strFileName.Length - 4)) + "_cpr.pdf";
            //                                    _UseCompressedDocument = oSDKCompression.CompressDocument(_FilePath, _CompressedFilePath);
            //                                    if (File.Exists(_CompressedFilePath) == false && gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_CompressedFilePath) > 0)
            //                                    { _UseCompressedDocument = false; }
            //                                }
            //                            }
            //                            catch (Exception ex)
            //                            {
            //                                _UseCompressedDocument = false;
            //                            }
            //                            finally
            //                            {

            //                            }
            //                        }

            //                        #endregion

            //                        _connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //                        _connection.Open();
            //                        try
            //                        {
            //                            _transaction = _connection.BeginTransaction();
            //                            #region "Database Operations"
            //                            #region " Document Details "
            //                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
            //                            _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                            _sqlcommand.CommandTimeout = 0;
            //                            _sqlcommand.Transaction = _transaction;

            //                            _sqlcommand.Parameters.Clear();

            //                            _sqlParameter = new SqlParameter();
            //                            _sqlParameter.ParameterName = "@eDocumentID";
            //                            _sqlParameter.Value = _CurrentDocumentID;
            //                            _sqlParameter.Direction = ParameterDirection.InputOutput;
            //                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
            //                            _sqlcommand.Parameters.Add(_sqlParameter);
            //                            _sqlParameter = null;

            //                            string _DestNewDocumentName = "";
            //                            int _RetNextCntr = _NextCntr;
            //                            _DestNewDocumentName = eDocValidator.GenerateDocumentName(PatientID, DestCategory, ClinicID, DestDocumentName, SourceDocuments.Count, _NextCntr, out _RetNextCntr);
            //                            _NextCntr = _RetNextCntr;

            //                            _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = _DestNewDocumentName;
            //                            _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestCategoryID;
            //                            _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestCategory;
            //                            _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = PatientID;
            //                            _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestYear;
            //                            _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestMonth;
            //                            _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
            //                            _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
            //                            _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
            //                            _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
            //                            _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
            //                            _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                            _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
            //                            _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
            //                            _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
            //                            _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

            //                            _sqlresult = _sqlcommand.ExecuteNonQuery();
            //                            if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
            //                            {
            //                                _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
            //                            }

            //                            _CurrentDocumentID = Convert.ToInt64(_Returnvalue);

            //                            #endregion

            //                            #region " Container Details "

            //                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
            //                            _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                            _sqlcommand.CommandTimeout = 0;
            //                            _sqlcommand.Transaction = _transaction;

            //                            _sqlcommand.Parameters.Clear();
            //                            _sqlParameter = new SqlParameter();
            //                            _sqlParameter.ParameterName = "@eContainerID";
            //                            _sqlParameter.Value = _CurrentContainerID;
            //                            _sqlParameter.Direction = ParameterDirection.InputOutput;
            //                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
            //                            _sqlcommand.Parameters.Add(_sqlParameter);
            //                            _sqlParameter = null;

            //                            _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
            //                            _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
            //                            _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
            //                            _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
            //                            _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
            //                            _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                            _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
            //                            _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

            //                            _Returnvalue = 0;
            //                            _sqlresult = _sqlcommand.ExecuteNonQuery();
            //                            if (_sqlcommand.Parameters["@eContainerID"].Value != null)
            //                            {
            //                                _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
            //                            }
            //                            _CurrentContainerID = Convert.ToInt64(_Returnvalue);

            //                            #endregion

            //                            #region "Insert File in to Database"
            //                            string _ChunkFilePath = "";
            //                            //bool _IsFileInserted = false;

            //                            if (_UseCompressedDocument == true)
            //                            {
            //                                //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
            //                                _ChunkFilePath = _CompressedFilePath;
            //                            }
            //                            else
            //                            {
            //                                //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath); 
            //                                _ChunkFilePath = _FilePath;
            //                            }

            //                            if (System.IO.File.Exists(_ChunkFilePath))
            //                            {
            //                                System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
            //                                System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                                using (BinaryReader br = new BinaryReader(oFileStream))
            //                                {
            //                                    byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                    Int64 offset = 0;

            //                                    _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
            //                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                                    _sqlcommand.CommandTimeout = 0;
            //                                    _sqlcommand.Transaction = _transaction;

            //                                    while (buffer.Length > 0)
            //                                    {
            //                                        _sqlcommand.Parameters.Clear();
            //                                        _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
            //                                        _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
            //                                        _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                                        _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                                        _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;

            //                                        _sqlcommand.ExecuteNonQuery();

            //                                        offset = offset + gloEDocV3Admin.gBufferSize;
            //                                        buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                    }
            //                                }
            //                                if (oFileStream != null) { oFileStream.Close(); oFileStream.Dispose(); }
            //                            }

            //                            #endregion "Insert File in to Database"

            //                            #region "Page Region"
            //                            for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
            //                            {
            //                                _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();
            //                                _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
            //                                "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
            //                                _sqlcommand = new SqlCommand(_strSQL, _connection);
            //                                _sqlcommand.Transaction = _transaction;
            //                                _sqlcommand.ExecuteNonQuery();
            //                            }

            //                            #endregion
            //                            #endregion
            //                            _transaction.Commit();
            //                        }
            //                        catch (Exception ex)
            //                        {
            //                            _transaction.Rollback();
            //                            _HasError = true;
            //                            _ErrorMessage = ex.Message;
            //                        }
            //                        finally
            //                        {
            //                            if (_connection.State == ConnectionState.Open) { _connection.Close(); }
            //                            if (_connection != null) { _connection.Dispose(); }
            //                        }

            //                    }
            //                }
            //            }

            //            if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
            //            { _result = true; }
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        _sqlParameter = null;
            //        if (_sqlcommand != null) { _sqlcommand.Dispose(); }
            //        if (_transaction != null) { _transaction.Dispose(); }
            //        if (_connection != null) { _connection.Dispose(); }

            //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //        { Directory.Delete(_DirectoryPathToCompress, true); }
            //    }

            //    DestContainerID = _CurrentContainerID;
            //    DestDocumentID = _CurrentDocumentID;
            //    return _result;
            //}


            public void IncreamentProgressBar(System.Windows.Forms.ProgressBar pbDocument, int counter)
            {
                try
                {
                    if (counter == 0)
                    {
                        pbDocument.Value = 0;

                    }
                    else
                    {
                        pbDocument.Value += counter;
                    }

                    pbDocument.Parent.Invalidate();
                    pbDocument.Parent.Refresh();
                    //System.Threading.Thread.Slseep(500);
                    System.Windows.Forms.Application.DoEvents();
                }
                catch (Exception)
                {

                }

            }

            #region "Dhruv 20100629 -> ImportSplit"
            //public bool ImportSplit_Old(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            //{
            //    SqlConnection _connection = null;
            //    SqlTransaction _transaction = null;
            //    SqlCommand _sqlcommand = null;
            //    SqlParameter _sqlParameter = null;
            //    int _NextCntr = 0;
            //    #region " Variable Declaration "

            //    bool _result = false;
            //    int _sqlresult = 0;
            //    string _strSQL = "";
            //    Int64 _CurrentDocumentID = 0;
            //    Int64 _CurrentContainerID = 0;
            //    int _ImportDocumentPageCount = 0;
            //    Int64 _PrefixTransactionID = 0;
            //    Object _Returnvalue = null;
            //    int _PageCounter = 0;
            //    string _BookMarkTag = "";
            //    string _DocumentExtension = "pdf";
            //    string _FilePath = "";
            //    string _UsedMachine = "";
            //    Int32 _DocumentPageFrom = 0;
            //    Int32 _DocumentPageTo = 0;
            //    string _CompressedFilePath = "";
            //    string _DirectoryPathToCompress = "";

            //    #endregion

            //    try
            //    {
            //        _UsedMachine = Environment.MachineName;

            //        if (SourceDocuments != null && SourceDocuments.Count > 0)
            //        {
            //            ArrayList _SplitedDocs = new ArrayList();
            //            //Send and Get splitted list
            //            eDocGetList oList = new eDocGetList();

            //            ///////************************* To change logic from split file to Single file*********************************************
            //            //bool _IsDocSplitted;
            //            //if (gloEDocumentV3.eDocManager.eDocValidator.IsSplitDocument() == true)
            //            //{
            //            //    _IsDocSplitted = oList.SpiltDocumentsOnSize(SourceDocuments, out _SplitedDocs);

            //            //}
            //            //else
            //            //{
            //            //Added by Shweta 20091221
            //            //Against the bugzilla Id :4521 
            //            //If the document is password protected then provide te password and load the document                            
            //            int _SourceFilePageCount = 0;
            //            bool _RetValue = false;
            //            string _SourceFilePath = "";
            //            string _DestinationFilePath = "";

            //            pdftron.PDF.PDFDoc oDestinationPDFDocument = null;
            //            pdftron.PDF.PDFDoc oSourcePDFDocument = null;
            //            pdftron.PDF.Page oPage = null;

            //            //Check the security handler for each document
            //            if (SourceDocuments != null && SourceDocuments.Count > 0)
            //            {
            //                for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //                {
            //                    _SourceFilePath = Convert.ToString(SourceDocuments[i]);

            //                    if (File.Exists(_SourceFilePath))
            //                    {
            //                        FileInfo oSourceFileInfo = null;
            //                        FileInfo oDestinationFileInfo = null;
            //                        long DestinationFileSize = 0;

            //                        oSourcePDFDocument = new pdftron.PDF.PDFDoc(_SourceFilePath);
            //                        oSourceFileInfo = new FileInfo(_SourceFilePath);




            //                        #region " PDF Security Handler Code "

            //                        oSourcePDFDocument.InitSecurityHandler();
            //                        //// Code Added by Pramod To check partial encrtypted pdf Start
            //                        pdftron.SDF.SecurityHandler oSec = oSourcePDFDocument.GetSecurityHandler();
            //                        bool IsPassword = false;
            //                        try
            //                        {
            //                            //oSec.Authorize(pdftron.SDF.SecurityHandler.Permission.e_all);
            //                            oSec.Authorize(pdftron.SDF.SecurityHandler.Permission.e_access_support);
            //                        }
            //                        catch (Exception ex)
            //                        {
            //                            IsPassword = true;
            //                        }
            //                        //// Code Added by Pramod To check partial encrtypted pdf End



            //                        if (oSourcePDFDocument.IsEncrypted() == true && IsPassword == true)
            //                        {

            //                            System.Windows.Forms.DialogResult oDlgRst = System.Windows.Forms.DialogResult.None;
            //                            string _Message = "";
            //                            _Message = " Selected pdf file for import is password protected " + Environment.NewLine + " File Name : " + oSourceFileInfo.Name + " " +
            //                                " " + Environment.NewLine + " OK - Enter the password " + Environment.NewLine + " Cancel - Abort file  ";

            //                            oDlgRst = System.Windows.Forms.MessageBox.Show(_Message, gloEDocV3Admin.gMessageBoxCaption, System.Windows.Forms.MessageBoxButtons.OKCancel, System.Windows.Forms.MessageBoxIcon.Information);
            //                            if (oDlgRst == System.Windows.Forms.DialogResult.OK)
            //                            {
            //                                gloEDocumentV3.Forms.frmEDocEvent_AuthorizeDlg oAuthorizeDlg = new gloEDocumentV3.Forms.frmEDocEvent_AuthorizeDlg(oSourcePDFDocument, oSourceFileInfo.Name);
            //                                oAuthorizeDlg.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            //                                oAuthorizeDlg.ShowDialog();
            //                                if (oAuthorizeDlg.DlgResult == System.Windows.Forms.DialogResult.OK)
            //                                {
            //                                    oSourcePDFDocument.InitStdSecurityHandler(oAuthorizeDlg.Password);
            //                                }
            //                                else if (oAuthorizeDlg.DlgResult == System.Windows.Forms.DialogResult.Cancel)
            //                                {
            //                                    if (i == SourceDocuments.Count - 1)
            //                                    { _RetValue = true; }
            //                                    continue;
            //                                }
            //                                oAuthorizeDlg.Dispose();
            //                            }
            //                            else
            //                            {
            //                                if (i == SourceDocuments.Count - 1)
            //                                { _RetValue = true; }
            //                                continue;

            //                            }
            //                        }



            //                        #endregion " PDF Security Handler Code "



            //                        #region "PDF WaterMark Adding"
            //                        ///Dhruv while loading inserting the document with the watermark
            //                        if (gloEDocV3Admin.ISDMSDEMO == true)
            //                        {
            //                            oSourcePDFDocument.InitSecurityHandler();
            //                            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
            //                            oViewer.InsertWaterMarkToWholeDcoument1(oSourcePDFDocument);
            //                        }

            //                        #endregion
            //                        //Create new destination document after removing the security
            //                        oDestinationPDFDocument = new pdftron.PDF.PDFDoc();
            //                        _SourceFilePageCount = oSourcePDFDocument.GetPageCount();

            //                        oSourcePDFDocument.RemoveSecurity();

            //                        _DestinationFilePath = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, i.ToString(), "pdf");

            //                        //Save the source document after removing the security handler at given destination path
            //                        oSourcePDFDocument.Save(_DestinationFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);

            //                        //add document in the arraylist 
            //                        _SplitedDocs.Add(_DestinationFilePath);

            //                        if (oDestinationPDFDocument != null)
            //                        { oDestinationPDFDocument.Close(); oDestinationPDFDocument.Dispose(); oDestinationPDFDocument = null; }

            //                    }
            //                }
            //                //}
            //                //End Shweta 20091221
            //                //_IsDocSplitted = false;
            //            }

            //            /////************************* To change logic from split file to Single file*********************************************

            //            oList.Dispose();

            //            //bool _IsDocSplitted = SpiltDocuments(SourceDocuments, out _SplitedDocs);

            //            //Commented By Shweta 20091221
            //            //Against the bugzilla Id :4521
            //            //Irrespective of the setting related to split document the _SplitedDocs arraylist gets assign to the source document to perform the next operation 
            //            //  if (_IsDocSplitted == true) // && _SplitedDocs.Count > 0)
            //            //{
            //            //End Shweta 20091221
            //            SourceDocuments.Clear();
            //            SourceDocuments = _SplitedDocs;
            //            // }
            //            //End Shweta 20091221

            //            if (SourceDocuments != null)
            //            {

            //                for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //                {
            //                    _CurrentDocumentID = 0;
            //                    _CurrentContainerID = 0;
            //                    _ImportDocumentPageCount = 0;
            //                    _DocumentPageFrom = 0;
            //                    _DocumentPageTo = 0;
            //                    _FilePath = "";

            //                    _FilePath = Convert.ToString(SourceDocuments[i]);

            //                    if (File.Exists(_FilePath) == true)
            //                    {
            //                        _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
            //                        _DocumentPageFrom = 1;
            //                        _DocumentPageTo = _ImportDocumentPageCount;


            //                        bool _UseCompressedDocument = false;
            //                        // 20090707 - Code Commented becoz we removed Luratech
            //                        //#region " Compression Code "

            //                        //gloEDocumentV3.Compression.eDocV3Compression oSDKCompression = new gloEDocumentV3.Compression.eDocV3Compression();
            //                        //oSDKCompression.SDKCompressionProgressEvent += new gloEDocumentV3.Compression.eDocV3Compression.SDKCompressionProgress(oSDKCompression_SDKCompressionProgressEvent);

            //                        //if (PerformCompression == true)
            //                        //{
            //                        //    try
            //                        //    {
            //                        //        //1.Check for process dir existing or not if exists delete and create new 
            //                        //        _DirectoryPathToCompress = gloEDocumentV3.gloEDocV3Admin.gLuraTechTemporaryProcessPath;

            //                        //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //                        //        { Directory.Delete(_DirectoryPathToCompress, true); }

            //                        //        Directory.CreateDirectory(_DirectoryPathToCompress);

            //                        //        //2.Copy the file to temp compress process path
            //                        //        if (File.Exists(_FilePath))
            //                        //        {
            //                        //            FileInfo fInfo = new FileInfo(_FilePath);
            //                        //            string _strFileName = fInfo.Name;
            //                        //            fInfo = null;

            //                        //            _CompressedFilePath = "";
            //                        //            _CompressedFilePath = _DirectoryPathToCompress + "\\" + _strFileName.Substring(0, (_strFileName.Length - 4)) + "_cpr.pdf";
            //                        //            _UseCompressedDocument = oSDKCompression.CompressDocument(_FilePath, _CompressedFilePath);
            //                        //            if (File.Exists(_CompressedFilePath) == false && gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_CompressedFilePath) > 0)
            //                        //            { _UseCompressedDocument = false; }
            //                        //        }
            //                        //    }
            //                        //    catch (Exception ex)
            //                        //    {
            //                        //        _UseCompressedDocument = false;
            //                        //    }
            //                        //    finally
            //                        //    {

            //                        //    }
            //                        //}

            //                        //#endregion

            //                        _connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //                        _connection.Open();
            //                        try
            //                        {
            //                            _transaction = _connection.BeginTransaction();
            //                            #region "Database Operations"
            //                            #region " Document Details "
            //                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
            //                            _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                            _sqlcommand.CommandTimeout = 0;
            //                            _sqlcommand.Transaction = _transaction;

            //                            _sqlcommand.Parameters.Clear();

            //                            _sqlParameter = new SqlParameter();
            //                            _sqlParameter.ParameterName = "@eDocumentID";
            //                            _sqlParameter.Value = _CurrentDocumentID;
            //                            _sqlParameter.Direction = ParameterDirection.InputOutput;
            //                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
            //                            _sqlcommand.Parameters.Add(_sqlParameter);
            //                            _sqlParameter = null;

            //                            string _DestNewDocumentName = "";
            //                            int _RetNextCntr = _NextCntr;
            //                            _DestNewDocumentName = eDocValidator.GenerateDocumentName(PatientID, DestCategory, ClinicID, DestDocumentName, SourceDocuments.Count, _NextCntr, out _RetNextCntr);
            //                            _NextCntr = _RetNextCntr;

            //                            _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = _DestNewDocumentName;
            //                            _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestCategoryID;
            //                            _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestCategory;
            //                            _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = PatientID;
            //                            _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestYear;
            //                            _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestMonth;
            //                            _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
            //                            _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
            //                            _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
            //                            _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
            //                            _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
            //                            _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                            _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
            //                            _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
            //                            _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
            //                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
            //                            _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

            //                            _sqlresult = _sqlcommand.ExecuteNonQuery();
            //                            if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
            //                            {
            //                                _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
            //                            }

            //                            _CurrentDocumentID = Convert.ToInt64(_Returnvalue);

            //                            #endregion

            //                            #region " Container Details "

            //                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                            _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
            //                            _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                            _sqlcommand.CommandTimeout = 0;
            //                            _sqlcommand.Transaction = _transaction;

            //                            _sqlcommand.Parameters.Clear();
            //                            _sqlParameter = new SqlParameter();
            //                            _sqlParameter.ParameterName = "@eContainerID";
            //                            _sqlParameter.Value = _CurrentContainerID;
            //                            _sqlParameter.Direction = ParameterDirection.InputOutput;
            //                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
            //                            _sqlcommand.Parameters.Add(_sqlParameter);
            //                            _sqlParameter = null;

            //                            _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
            //                            _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
            //                            _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
            //                            _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
            //                            _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
            //                            _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
            //                            _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                            _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
            //                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
            //                            _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

            //                            _Returnvalue = 0;
            //                            _sqlresult = _sqlcommand.ExecuteNonQuery();
            //                            if (_sqlcommand.Parameters["@eContainerID"].Value != null)
            //                            {
            //                                _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
            //                            }
            //                            _CurrentContainerID = Convert.ToInt64(_Returnvalue);

            //                            #endregion

            //                            #region "Insert File in to Database"
            //                            string _ChunkFilePath = "";
            //                            //bool _IsFileInserted = false;

            //                            if (_UseCompressedDocument == true)
            //                            {
            //                                //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
            //                                _ChunkFilePath = _CompressedFilePath;
            //                            }
            //                            else
            //                            {
            //                                //_IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath); 
            //                                _ChunkFilePath = _FilePath;
            //                            }

            //                            if (System.IO.File.Exists(_ChunkFilePath))
            //                            {
            //                                System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
            //                                System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                                using (BinaryReader br = new BinaryReader(oFileStream))
            //                                {
            //                                    byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                    Int64 offset = 0;

            //                                    _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
            //                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                                    _sqlcommand.CommandTimeout = 0;
            //                                    _sqlcommand.Transaction = _transaction;

            //                                    while (buffer.Length > 0)
            //                                    {
            //                                        _sqlcommand.Parameters.Clear();
            //                                        _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
            //                                        _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
            //                                        _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                                        _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                                        _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;

            //                                        _sqlcommand.ExecuteNonQuery();

            //                                        offset = offset + gloEDocV3Admin.gBufferSize;
            //                                        buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                    }
            //                                }
            //                                if (oFileStream != null) { oFileStream.Close(); oFileStream.Dispose(); }
            //                            }

            //                            #endregion "Insert File in to Database"

            //                            #region "Page Region"
            //                            for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
            //                            {
            //                                _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();
            //                                _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
            //                                "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
            //                                _sqlcommand = new SqlCommand(_strSQL, _connection);
            //                                _sqlcommand.Transaction = _transaction;
            //                                _sqlcommand.ExecuteNonQuery();
            //                            }

            //                            #endregion
            //                            #endregion
            //                            _transaction.Commit();
            //                        }
            //                        catch (Exception ex)
            //                        {
            //                            _transaction.Rollback();
            //                            _HasError = true;
            //                            _ErrorMessage = ex.Message;
            //                        }
            //                        finally
            //                        {
            //                            if (_connection.State == ConnectionState.Open) { _connection.Close(); }
            //                            if (_connection != null) { _connection.Dispose(); }
            //                        }

            //                    }
            //                }
            //            }

            //            if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
            //            {

            //                _result = true;
            //            }
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        _sqlParameter = null;
            //        if (_sqlcommand != null) { _sqlcommand.Dispose(); }
            //        if (_transaction != null) { _transaction.Dispose(); }
            //        if (_connection != null) { _connection.Dispose(); }

            //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //        { Directory.Delete(_DirectoryPathToCompress, true); }
            //    }

            //    DestContainerID = _CurrentContainerID;
            //    DestDocumentID = _CurrentDocumentID;
            //    return _result;
            //}

            private void CreateDirectroy()
            {
                if (Directory.Exists(gloEDocV3Admin.gTemporaryProcessPath) == false)
                {
                    Directory.CreateDirectory(gloEDocV3Admin.gTemporaryProcessPath);
                    if (Directory.Exists(gloEDocV3Admin.gTemporaryProcessPath) == false)
                    {
                        string _ErrorMessage = "Unable to create directory. " + gloEDocV3Admin.gTemporaryProcessPath;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_ErrorMessage);

                    }
                }

                gloEDocV3Admin.gPDFTronTemporaryProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\gloPDFTronTempData";
                if (Directory.Exists(gloEDocV3Admin.gPDFTronTemporaryProcessPath) == false)
                {
                    Directory.CreateDirectory(gloEDocV3Admin.gPDFTronTemporaryProcessPath);
                    if (Directory.Exists(gloEDocV3Admin.gPDFTronTemporaryProcessPath) == false)
                    {
                        string _ErrorMessage = "Unable to create directory. " + gloEDocV3Admin.gPDFTronTemporaryProcessPath;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_ErrorMessage);
                    }
                }

                gloEDocV3Admin.gLuraTechTemporaryProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\gloLuraTechTempData";
                if (Directory.Exists(gloEDocV3Admin.gLuraTechTemporaryProcessPath) == false)
                {
                    Directory.CreateDirectory(gloEDocV3Admin.gLuraTechTemporaryProcessPath);
                    if (Directory.Exists(gloEDocV3Admin.gLuraTechTemporaryProcessPath) == false)
                    {
                        string _ErrorMessage = "Unable to create directory. " + gloEDocV3Admin.gLuraTechTemporaryProcessPath;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_ErrorMessage);
                    }
                }

                gloEDocV3Admin.gDocumentOpenTemporaryProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\gloDocumentOpenData";
                if (Directory.Exists(gloEDocV3Admin.gDocumentOpenTemporaryProcessPath) == false)
                {
                    Directory.CreateDirectory(gloEDocV3Admin.gDocumentOpenTemporaryProcessPath);
                    if (Directory.Exists(gloEDocV3Admin.gDocumentOpenTemporaryProcessPath) == false)
                    {
                        string _ErrorMessage = "Unable to create directory. " + gloEDocV3Admin.gLuraTechTemporaryProcessPath;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_ErrorMessage);

                    }
                }
            }

            public bool ImportSplit(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestSubCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, System.Windows.Forms.ProgressBar pbDocument, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None, bool isprocessed = false)
            {
                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog("Date Time :" + DateTime.Now.ToString() + "ImportSplit() function start");
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                SqlParameter _sqlParameter = null;
                int _NextCntr = 0;

                #region " Variable Declaration "

                bool _result = false;
                int _sqlresult = 0;
                //    string _strSQL = "";
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;
                int _ImportDocumentPageCount = 0;
                Int64 _PrefixTransactionID = 0;
                Object _Returnvalue = null;
                //   int _PageCounter = 0;
                //   string _BookMarkTag = "";
                string _DocumentExtension = "pdf";
                string _FilePath = "";
                string _UsedMachine = "";
                Int32 _DocumentPageFrom = 0;
                Int32 _DocumentPageTo = 0;
                string _CompressedFilePath = "";
                string _DirectoryPathToCompress = "";
                pdftron.PDF.PDFDoc oDestinationPDFDocument = null;
                pdftron.PDF.PDFDoc oSourcePDFDocument = null;
                //  byte[] oFile = null;
                // FileStream _oFileStream = null;
                string _errorCatchFileName = "";
                string sTempImportPath = "";
                #endregion

                try
                {
                    //7955/Start/[scan docs >> if we scan from rx meds & delete any documents , Save&cls>> its showing an error message]Code writen for the Writting the Directory in the System
                    if (_isgloServices == false)
                    {
                        CreateDirectroy();
                    }
                    //7955/End/[scan docs >> if we scan from rx meds & delete any documents , Save&cls>> its showing an error message]Code writen for the Writting the Directory in the System
                    _UsedMachine = Environment.MachineName;

                    if (SourceDocuments != null && SourceDocuments.Count > 0)
                    {
                        ArrayList _SplitedDocs = new ArrayList();
                        //Send and Get splitted list
                        eDocGetList oList = new eDocGetList();

                        int _SourceFilePageCount = 0;
                        //  bool _RetValue = false;
                        string _SourceFilePath = "";
                        string _DestinationFilePath = "";

                        _errorCatchFileName = "";

                        if (SourceDocuments != null && SourceDocuments.Count > 0)
                        {
                            for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                            {
                                pbDocument.SuspendLayout();
                                if ((i * 100 - 20) > 0)
                                {
                                    pbDocument.Value = i * 100 - 20;
                                }
                                else
                                {
                                    pbDocument.Value = i;
                                }
                                pbDocument.ResumeLayout(false);
                                pbDocument.PerformLayout();

                                _SourceFilePath = System.Convert.ToString(SourceDocuments[i]);
                                _errorCatchFileName = _SourceFilePath;
                                if (isprocessed == false)
                                {
                                    var host = new Uri(_SourceFilePath).Host; //returns "foldera"
                                    if (!string.IsNullOrEmpty(host))
                                    {
                                        sTempImportPath = gloSettings.FolderSettings.AppTempFolderPath + "ImportPDF";
                                        if (Directory.Exists(sTempImportPath) == false)
                                        {
                                            Directory.CreateDirectory(sTempImportPath);
                                        }
                                        if (Directory.Exists(sTempImportPath) == true)
                                        {
                                            string filename = Path.GetFileName(_SourceFilePath);
                                            File.Copy(_SourceFilePath, sTempImportPath + "\\" + filename, true);
                                            _SourceFilePath = sTempImportPath + "\\" + filename;
                                            //string[] paths = Directory.GetFiles(sTempImportPath);
                                            //_SourceFilePath = paths[0].ToString();
                                        }
                                        //Network drive

                                    }
                                }
                                if (File.Exists(_SourceFilePath))
                                {
                                    FileInfo oSourceFileInfo = null;
                                    oSourcePDFDocument = new pdftron.PDF.PDFDoc(_SourceFilePath);
                                    if (oSourcePDFDocument != null)
                                    {
                                        oSourceFileInfo = new FileInfo(_SourceFilePath);


                                        #region " PDF Security Handler Code "
                                        try
                                        {
                                            oSourcePDFDocument.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        pdftron.SDF.SecurityHandler oSec = oSourcePDFDocument.GetSecurityHandler();
                                        bool IsPassword = false;
                                        try
                                        {
                                            oSec.Authorize(pdftron.SDF.SecurityHandler.Permission.e_access_support);
                                        }
                                        catch (Exception ex)
                                        {
                                            IsPassword = true;
                                            if (_isgloServices == false)
                                            {
                                                _ErrorMessage = "Password is set to the file. " + ex.ToString();
                                                ErrorMessagees(_ErrorMessage);
                                            }
                                        }




                                        if ((oSourcePDFDocument.IsEncrypted() == true && IsPassword == true) && (_isgloServices == false))
                                        {

                                            System.Windows.Forms.DialogResult oDlgRst = System.Windows.Forms.DialogResult.None;
                                            string _Message = "";
                                            _Message = " Selected pdf file for import is password protected " + Environment.NewLine + " File Name : " + oSourceFileInfo.Name + " " +
                                                " " + Environment.NewLine + " OK - Enter the password " + Environment.NewLine + " Cancel - Abort file  ";

                                            oDlgRst = System.Windows.Forms.MessageBox.Show(_Message, gloEDocV3Admin.gMessageBoxCaption, System.Windows.Forms.MessageBoxButtons.OKCancel, System.Windows.Forms.MessageBoxIcon.Information);
                                            if (oDlgRst == System.Windows.Forms.DialogResult.OK)
                                            {
                                                gloEDocumentV3.Forms.frmEDocEvent_AuthorizeDlg oAuthorizeDlg = new gloEDocumentV3.Forms.frmEDocEvent_AuthorizeDlg(oSourcePDFDocument, oSourceFileInfo.Name);
                                                oAuthorizeDlg.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
                                                oAuthorizeDlg.ShowDialog(oAuthorizeDlg.Parent);
                                                if (oAuthorizeDlg.DlgResult == System.Windows.Forms.DialogResult.OK)
                                                {
                                                    try
                                                    {
                                                        oSourcePDFDocument.InitStdSecurityHandler(oAuthorizeDlg.Password);
                                                    }
                                                    catch (Exception)
                                                    {

                                                        //Intetionally left Blank
                                                    }


                                                    oDestinationPDFDocument = new pdftron.PDF.PDFDoc();
                                                    if (oDestinationPDFDocument != null)
                                                    {
                                                        _SourceFilePageCount = oSourcePDFDocument.GetPageCount();

                                                        oSourcePDFDocument.RemoveSecurity();

                                                        _DestinationFilePath = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, i.ToString(), "pdf");

                                                        #region "PDF WaterMark Adding"
                                                        if (gloEDocV3Admin.ISDMSDEMO == true)
                                                        {
                                                            try
                                                            {
                                                                oSourcePDFDocument.InitSecurityHandler();
                                                            }
                                                            catch (Exception)
                                                            {

                                                                //Intetionally left Blank
                                                            }

                                                            using (gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer())
                                                            {
                                                                if (oViewer != null)
                                                                {
                                                                    oViewer.InsertWaterMarkToWholeDcoument1(oSourcePDFDocument);
                                                                }
                                                            }

                                                        }

                                                        #endregion

                                                        oSourcePDFDocument.Save(_DestinationFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_compatibility);

                                                        _SplitedDocs.Add(_DestinationFilePath);

                                                        if (oDestinationPDFDocument != null)
                                                        {
                                                            oDestinationPDFDocument.Close();
                                                            oDestinationPDFDocument.Dispose();
                                                            oDestinationPDFDocument = null;
                                                        }
                                                    }

                                                }
                                                else if (oAuthorizeDlg.DlgResult == System.Windows.Forms.DialogResult.Cancel)
                                                {
                                                    if (i == SourceDocuments.Count - 1)
                                                    {
                                                        //_RetValue = true;
                                                    }
                                                    if (oAuthorizeDlg != null)
                                                    {
                                                        oAuthorizeDlg.Dispose();
                                                        oAuthorizeDlg = null;
                                                    }
                                                    if (oSec != null)
                                                    {
                                                        oSec.Dispose();
                                                        oSec = null;
                                                    }
                                                    if (oSourcePDFDocument != null)
                                                    {
                                                        oSourcePDFDocument.Dispose();
                                                        oSourcePDFDocument = null;
                                                    }
                                                    continue;
                                                }
                                                if (oAuthorizeDlg != null)
                                                {
                                                    oAuthorizeDlg.Dispose();
                                                    oAuthorizeDlg = null;
                                                }
                                            }
                                            else
                                            {
                                                if (i == SourceDocuments.Count - 1)
                                                {
                                                    // _RetValue = true;
                                                }
                                                if (oSec != null)
                                                {
                                                    oSec.Dispose();
                                                    oSec = null;
                                                }
                                                if (oSourcePDFDocument != null)
                                                {
                                                    oSourcePDFDocument.Dispose();
                                                    oSourcePDFDocument = null;
                                                }

                                                continue;

                                            }

                                        }
                                        else
                                        {

                                            if (gloEDocV3Admin.ISDMSDEMO == true)
                                            {
                                                try
                                                {
                                                    oSourcePDFDocument.InitSecurityHandler();
                                                }
                                                catch (Exception)
                                                {

                                                    //Intetionally left Blank
                                                }

                                                using (gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer())
                                                {
                                                    if (oViewer != null)
                                                    {
                                                        oViewer.InsertWaterMarkToWholeDcoument1(oSourcePDFDocument);

                                                        oDestinationPDFDocument = new pdftron.PDF.PDFDoc();
                                                        if (oDestinationPDFDocument != null)
                                                        {
                                                            _SourceFilePageCount = oSourcePDFDocument.GetPageCount();

                                                            oSourcePDFDocument.RemoveSecurity();

                                                            _DestinationFilePath = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, i.ToString(), "pdf");

                                                            oSourcePDFDocument.Save(_DestinationFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);

                                                            _SplitedDocs.Add(_DestinationFilePath);

                                                            if (oDestinationPDFDocument != null)
                                                            {
                                                                oDestinationPDFDocument.Close();
                                                                oDestinationPDFDocument.Dispose();
                                                                oDestinationPDFDocument = null;
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                _SplitedDocs.Add(_SourceFilePath);
                                            }
                                        }


                                        #endregion " PDF Security Handler Code "




                                        #region " Save Temp File "

                                        //oDestinationPDFDocument = new pdftron.PDF.PDFDoc();
                                        //if (oDestinationPDFDocument != null)
                                        //{
                                        //    _SourceFilePageCount = oSourcePDFDocument.GetPageCount();

                                        //    oSourcePDFDocument.RemoveSecurity();

                                        //    _DestinationFilePath = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, i.ToString(), "pdf");

                                        //    oSourcePDFDocument.Save(_DestinationFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);

                                        //    _SplitedDocs.Add(_DestinationFilePath);

                                        //    if (oDestinationPDFDocument != null)
                                        //    {
                                        //        oDestinationPDFDocument.Close();
                                        //        oDestinationPDFDocument.Dispose();
                                        //        oDestinationPDFDocument = null;
                                        //    }
                                        //}

                                        #endregion " Save Temp File "
                                        oSourcePDFDocument.Dispose();
                                        oSourcePDFDocument = null;
                                        if (oSec != null)
                                        {
                                            oSec.Dispose();
                                            oSec = null;
                                        }
                                    }
                                }
                            }

                        }

                        if (oList != null)
                        {
                            oList.Dispose();
                            oList = null;
                        }

                        SourceDocuments.Clear();
                        SourceDocuments = _SplitedDocs;

                        if (SourceDocuments != null)
                        {

                            for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                            {
                                pbDocument.SuspendLayout();
                                if ((i * 100 - 20) > 0)
                                {
                                    pbDocument.Value = i * 100 - 20;
                                }
                                else
                                {
                                    pbDocument.Value = i;
                                }
                                pbDocument.ResumeLayout(false);
                                pbDocument.PerformLayout();

                                _CurrentDocumentID = 0;
                                _CurrentContainerID = 0;
                                _ImportDocumentPageCount = 0;
                                _DocumentPageFrom = 0;
                                _DocumentPageTo = 0;
                                _FilePath = "";

                                _FilePath = System.Convert.ToString(SourceDocuments[i]);

                                if (File.Exists(_FilePath) == true)
                                {
                                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                                    _DocumentPageFrom = 1;
                                    _DocumentPageTo = _ImportDocumentPageCount;


                                    bool _UseCompressedDocument = false;


                                    string _DestNewDocumentName = "";
                                    int _RetNextCntr = _NextCntr;
                                    _connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                                    if (_connection != null)
                                    {
                                        _connection.Open();
                                        try
                                        {

                                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);
                                            _DestNewDocumentName = eDocValidator.GenerateDocumentName(PatientID, DestCategory, DestSubCategory, ClinicID, DestDocumentName, SourceDocuments.Count, _NextCntr, out _RetNextCntr, _OpenExternalSource);

                                            _transaction = _connection.BeginTransaction();
                                            #region "Database Operations"
                                            #region " Document Details "
                                            // _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails_RCM", _connection);
                                            }
                                            else
                                            {
                                                _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
                                            }

                                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                                            _sqlcommand.CommandTimeout = 0;
                                            _sqlcommand.Transaction = _transaction;

                                            _sqlcommand.Parameters.Clear();

                                            _sqlParameter = new SqlParameter();
                                            _sqlParameter.ParameterName = "@eDocumentID";
                                            _sqlParameter.Value = _CurrentDocumentID;
                                            _sqlParameter.Direction = ParameterDirection.InputOutput;
                                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                            _sqlcommand.Parameters.Add(_sqlParameter);
                                            if (_sqlParameter != null)
                                            {
                                                _sqlParameter = null;
                                            }


                                            _NextCntr = _RetNextCntr;

                                            _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = _DestNewDocumentName;
                                            _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestCategoryID;
                                            _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestCategory;

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlcommand.Parameters.Add("@SubCategory", System.Data.SqlDbType.VarChar).Value = DestSubCategory;
                                            }

                                            _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = PatientID;
                                            _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestYear;
                                            _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestMonth;
                                            _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                                            _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                            _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                            _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
                                            _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
                                            _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
                                            _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
                                            _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
                                            _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
                                            _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                            _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
                                            _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
                                            _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
                                            _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
                                            _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
                                            _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
                                            _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
                                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
                                            _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                            _sqlresult = _sqlcommand.ExecuteNonQuery();
                                            if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
                                            {
                                                _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
                                            }

                                            _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);
                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                            }
                                            #endregion

                                            #region " Container Details "

                                            string _ChunkFilePath = "";

                                            if (_UseCompressedDocument == true)
                                            {

                                                _ChunkFilePath = _CompressedFilePath;
                                            }
                                            else
                                            {

                                                _ChunkFilePath = _FilePath;
                                            }


                                            //_PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer_RCM", _connection);
                                            }
                                            else
                                            {
                                                _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
                                            }

                                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                                            _sqlcommand.CommandTimeout = 0;
                                            _sqlcommand.Transaction = _transaction;

                                            _sqlcommand.Parameters.Clear();
                                            _sqlParameter = new SqlParameter();
                                            _sqlParameter.ParameterName = "@eContainerID";
                                            _sqlParameter.Value = _CurrentContainerID;
                                            _sqlParameter.Direction = ParameterDirection.InputOutput;
                                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                            _sqlcommand.Parameters.Add(_sqlParameter);
                                            if (_sqlParameter != null)
                                            {
                                                _sqlParameter = null;
                                            }

                                            _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                            _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
                                            _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
                                            _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
                                            _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
                                            _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
                                            _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                            _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;
                                            _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;
                                            _sqlcommand.Parameters.Add("@fileStream", SqlDbType.VarBinary).Value = DBNull.Value;

                                            _Returnvalue = 0;
                                            _sqlresult = _sqlcommand.ExecuteNonQuery();
                                            if (_sqlcommand.Parameters["@eContainerID"].Value != null)
                                            {
                                                _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
                                            }
                                            _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);

                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                            }
                                            #endregion

                                            if (_isgloServices == true)
                                            {
                                                Cls_SQLFileStream.ShowMessageBox = false;
                                            }
                                            Cls_SQLFileStream.SaveFile(_CurrentContainerID, _CurrentDocumentID, _ChunkFilePath, _transaction, ClinicID, _OpenExternalSource);


                                            //#endregion "Insert File in to Database"

                                            #region "Page Region"
                                            //for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
                                            //{

                                            //    _BookMarkTag = DestYear + "~" + DestCategory.Replace("'","''") + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();

                                            //    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            //    {
                                            //        _strSQL = "INSERT INTO eDocument_Pages_V3_RCM (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                            //"(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                            //    }
                                            //    else
                                            //    {
                                            //        _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                            //    "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                            //    }

                                            //    _sqlcommand = new SqlCommand(_strSQL, _connection);
                                            //    _sqlcommand.Transaction = _transaction;
                                            //    _sqlcommand.ExecuteNonQuery();
                                            //    if (_sqlcommand != null)
                                            //    {
                                            //        _sqlcommand.Parameters.Clear();
                                            //        _sqlcommand.Dispose();
                                            //        _sqlcommand = null;
                                            //    }
                                            //}


                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlcommand = new SqlCommand("gsp_eDocV3_InUpPages_RCM", _connection);
                                            }
                                            else
                                            {
                                                _sqlcommand = new SqlCommand("gsp_eDocV3_InUpPages", _connection);
                                            }

                                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                                            _sqlcommand.CommandTimeout = 0;
                                            _sqlcommand.Transaction = _transaction;

                                            _sqlcommand.Parameters.Clear();

                                            _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                            _sqlcommand.Parameters.Add("@eContainerID", System.Data.SqlDbType.BigInt).Value = _CurrentContainerID;
                                            _sqlcommand.Parameters.Add("@ImportDocumentPageCount", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                                            _sqlcommand.Parameters.Add("@DestYear", System.Data.SqlDbType.VarChar).Value = DestYear;
                                            _sqlcommand.Parameters.Add("@DestCategory", System.Data.SqlDbType.VarChar).Value = DestCategory;
                                            _sqlcommand.Parameters.Add("@DestMonth", System.Data.SqlDbType.VarChar).Value = DestMonth;
                                            _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = ClinicID;

                                            _sqlcommand.ExecuteNonQuery();

                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                            }


                                            #endregion
                                            #endregion
                                            _transaction.Commit();
                                            if (isprocessed == true)
                                            {
                                                //Update file as processed;
                                                gloEDocumentV3.eDocManager.eDocGetList.UpdateFileProcessed(_CurrentDocumentID, _CurrentContainerID, ClinicID);
                                            }
                                        }

                                        catch (Exception ex)
                                        {
                                            _transaction.Rollback();
                                            _HasError = true;
                                            _ErrorMessage = ex.Message;
                                            ErrorMessagees(_ErrorMessage);
                                        }
                                        finally
                                        {
                                            if (_connection.State == ConnectionState.Open)
                                            {
                                                _connection.Close();
                                            }
                                            if (_connection != null)
                                            {
                                                _connection.Dispose();
                                                _connection = null;
                                            }
                                            if (_transaction != null)
                                            {
                                                _transaction.Dispose();
                                                _transaction = null;
                                            }
                                        }
                                    }

                                }
                            } // for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                        }

                        if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
                        {

                            _result = true;
                        }
                    }

                    //pbDocument.Value = 90;
                    pbDocument.SuspendLayout();
                    if ((pbDocument.Maximum - 20) > 0)
                    {
                        pbDocument.Value = pbDocument.Maximum - 20;
                    }
                    else
                    {
                        pbDocument.Value = pbDocument.Maximum;
                    }
                    pbDocument.ResumeLayout(false);
                    pbDocument.PerformLayout();
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog("Date Time :" + DateTime.Now.ToString() + "ImportSplit() function End");
                }
                catch (PDFNetException ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    ErrorMessagees(_ErrorMessage);
                    string _strMessage = "";
                    FileInfo _fileInf = new FileInfo(_errorCatchFileName);
                    _strMessage = "Could not import file '" + _fileInf.Name + "' because it is " + Environment.NewLine + "either not a supported file type or because the file has been damaged " + Environment.NewLine + "(for example, it was sent as an email attachment and wasn't correctly decoded).";
                    _fileInf = null;
                    if (_isgloServices == false)
                    {
                        MessageBox.Show(_strMessage, gloEDocV3Admin.gMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    ErrorMessagees(_ErrorMessage);
                }
                finally
                {

                    if (_sqlParameter != null)
                    {

                        _sqlParameter = null;
                    }

                    if (oDestinationPDFDocument != null)
                    {
                        oDestinationPDFDocument.Dispose();
                        oDestinationPDFDocument = null;
                    }
                    if (oSourcePDFDocument != null)
                    {
                        oSourcePDFDocument.Dispose();
                        oSourcePDFDocument = null;
                    }
                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }
                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (_connection != null)
                    {
                        _connection.Dispose();
                        _connection = null;
                    }

                    if (Directory.Exists(_DirectoryPathToCompress) == true)
                    {
                        Directory.Delete(_DirectoryPathToCompress, true);
                        if (Directory.Exists(_DirectoryPathToCompress) == true)
                        {
                            _ErrorMessage = "Unable to delete the directory. " + _DirectoryPathToCompress;
                            ErrorMessagees(_ErrorMessage);
                        }
                    }
                    if (Directory.Exists(sTempImportPath))
                    {
                        System.IO.DirectoryInfo di = new DirectoryInfo(sTempImportPath);
                        foreach (FileInfo file in di.GetFiles())
                        {
                            file.Delete();
                        }
                    }
                }

                DestContainerID = _CurrentContainerID;
                DestDocumentID = _CurrentDocumentID;
                return _result;
            }

            private byte[] GetStream(string filePath)
            {
                Byte[] _fileByteArray;
                FileStream _fileStream = null;
                BinaryReader _binaryReader = null;
                _fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read);
                _binaryReader = new BinaryReader(_fileStream);
                _fileByteArray = _binaryReader.ReadBytes((int)_fileStream.Length);
                _binaryReader.Close();
                _fileStream.Close();
                _binaryReader.Dispose();
                _fileStream.Dispose();
                return _fileByteArray;
            }

            //private void InsertDocument(string _FilePath, Int64 DocumentID, Int64 ContainerID, Int64 ClinicID)
            //{
            //    DataTable dt = new DataTable();
            //    SqlDataReader reader = null;
            //    string _strSQL = "";
            //    byte[] context = null;
            //    string serverFilePath = "";
            //    string clientFilePath = _FilePath;
            //    SqlCommand sqlCommand = new SqlCommand();
            //    SqlTransaction transaction = null;
            //    using (SqlConnection sqlConnection = new SqlConnection("SERVER=DEV91;DATABASE=5070_DMS;Integrated Security=true"))
            //    {
            //        try
            //        {
            //            sqlConnection.Open();
            //            sqlCommand = sqlConnection.CreateCommand();
            //            sqlCommand.CommandType = CommandType.Text;

            //            _strSQL = " SELECT iDocumentStream.PathName() AS filePath"
            //                + " FROM dbo.eDocument_Container_V3 WITH(NOLOCK) WHERE "
            //                + " eContainerID = " + ContainerID + " AND eDocumentID = " + DocumentID + " AND ClinicID = " + ClinicID;


            //            sqlCommand.CommandText = _strSQL;
            //            sqlCommand.Connection = sqlConnection;

            //            Object pathObj = sqlCommand.ExecuteScalar();
            //            if (DBNull.Value != pathObj)
            //                serverFilePath = (string)pathObj;
            //            else
            //            {
            //                throw new System.Exception(
            //                    "Chart.PathName() failed"
            //                  + " to read the path name "
            //                  + " for the Chart column.");
            //            }

            //            transaction = sqlConnection.BeginTransaction("mainTranaction");
            //            sqlCommand.Transaction = transaction;

            //            sqlCommand.CommandText = "SELECT GET_FILESTREAM_TRANSACTION_CONTEXT()";

            //            Object obj = sqlCommand.ExecuteScalar();
            //            byte[] txContext = (byte[])obj;


            //            using (SqlFileStream serverStream = new SqlFileStream(serverFilePath, txContext, FileAccess.Write))
            //                {
            //                    using (FileStream clientStream = new FileStream(clientFilePath, FileMode.Open, FileAccess.Read))
            //                    {
            //                        int bytesRead = 0;
            //                        int bufferSize = 4096;

            //                        byte[] buffer = new byte[bufferSize];
            //                        do
            //                        {
            //                            bytesRead = clientStream.Read(buffer, 0, bufferSize);
            //                            if (bytesRead == 0)
            //                            {
            //                                break; // TODO: might not be correct. Was : Exit Do

            //                            }
            //                            serverStream.Write(buffer, 0, bytesRead);
            //                            serverStream.Flush();
            //                        } while (true);
            //                        clientStream.Close();
            //                    }
            //                    serverStream.Close();
            //                }
            //            transaction.Commit();
            //        }
            //        catch (Exception ex)
            //        {

            //            try
            //            {
            //                //attempt to rollback the transaction
            //                transaction.Rollback();
            //             }
            //            catch (Exception ex2)
            //            {
            //                //rollback was unsuccessful (connection may be closed)
            //            }
            //            MessageBox.Show(ex.Message);
            //        }
            //        finally
            //        {
            //            if (reader != null && !reader.IsClosed)
            //                reader.Close();
            //            if (sqlCommand.Connection != null) { sqlConnection.Close(); }
            //        }

            //    }

            //    //LoadDocuments();
            //}

            public bool _isgloServices = false;
            //public bool ImportSplit(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            //{
            //    using (System.Windows.Forms.ProgressBar pbDocument = new System.Windows.Forms.ProgressBar())
            //    {
            //        pbDocument.Value = 0;
            //        return ImportSplit(PatientID, SourceDocuments, DestDocumentName, DestCategoryID, DestCategory, DestYear, DestMonth, ClinicID, out  DestContainerID, out  DestDocumentID, PerformCompression, pbDocument);
            //    }
            //}
            public bool ImportSplit(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, bool appservices, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                using (System.Windows.Forms.ProgressBar pbDocument = new System.Windows.Forms.ProgressBar())
                {
                    pbDocument.Value = 0;
                    _isgloServices = appservices;
                    return ImportSplit(PatientID, SourceDocuments, DestDocumentName, DestCategoryID, DestCategory, "", DestYear, DestMonth, ClinicID, out  DestContainerID, out  DestDocumentID, PerformCompression, pbDocument, _OpenExternalSource);
                }
            }
            #endregion "Dhruv 20100629 -> ImportSplit"

            //Single Document Multi Container
            #region "Dhruv 2010 -> SplitImport"
            //public bool SplitImport_Old(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            //{
            //    gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    gloEDocumentV3.Database.DBParameters oDBParameters = new gloEDocumentV3.Database.DBParameters();

            //    #region " Variable Declaration "

            //    string _strSQL = "";
            //    bool _result = false;
            //    Int64 _CurrentDocumentID = 0;
            //    Int64 _CurrentContainerID = 0;
            //    int _ImportDocumentPageCount = 0;
            //    int _FilePageMaxThreshold = 20;
            //    int _FilePageMinThreshold = 10;
            //    Int64 _PrefixTransactionID = 0;
            //    Object _Returnvalue = null;
            //    int _PageCounter = 0;
            //    int _DocumentPageNumber = 0;
            //    string _BookMarkTag = "";
            //    string _DocumentExtension = "pdf";
            //    string _FilePath = "";
            //    string _UsedMachine = "";
            //    Int32 _DocumentPageFrom = 0;
            //    Int32 _DocumentPageTo = 0;
            //    string _CompressedFilePath = "";
            //    string _DirectoryPathToCompress = "";

            //    #endregion

            //    try
            //    {
            //        _UsedMachine = Environment.MachineName;

            //        if (SourceDocuments != null && SourceDocuments.Count > 0)
            //        {
            //            oDB.Connect(false);

            //            for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //            {
            //                _FilePath = "";
            //                _CurrentDocumentID = 0;
            //                _CurrentContainerID = 0;
            //                _ImportDocumentPageCount = 0;
            //                _DocumentPageFrom = 0;
            //                _DocumentPageTo = 0;

            //                _FilePath = Convert.ToString(SourceDocuments[i]);

            //                if (File.Exists(_FilePath) == true)
            //                {
            //                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
            //                    _DocumentPageFrom = 1;
            //                    _DocumentPageTo = _ImportDocumentPageCount;

            //                    #region " Document Details "

            //                    oDBParameters.Clear();
            //                    _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                    oDBParameters.Add("@eDocumentID", _CurrentDocumentID, System.Data.ParameterDirection.InputOutput, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@DocumentName", DestDocumentName + Convert.ToString((i + 1)), System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@CategoryID", DestCategoryID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@Category", DestCategory, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@PatientID", PatientID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@Year", DestYear, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@Month", DestMonth, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@PageCounts", _ImportDocumentPageCount, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
            //                    oDBParameters.Add("@CreatedDateTime", DateTime.Now, System.Data.ParameterDirection.Input, System.Data.SqlDbType.DateTime);
            //                    oDBParameters.Add("@ModifiedDateTime", DateTime.Now, System.Data.ParameterDirection.Input, System.Data.SqlDbType.DateTime);
            //                    oDBParameters.Add("@IsAcknowledge", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                    oDBParameters.Add("@HasNote", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                    oDBParameters.Add("@ExternalID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@ExternalCode", "", System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@ExternalDescription", "", System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@UsedStatus", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                    oDBParameters.Add("@UsedMachine", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@ArchiveID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@ArchiveStatus", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                    oDBParameters.Add("@ArchiveDescription", "", System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                    oDBParameters.Add("@IsCompressed", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                    oDBParameters.Add("@DMSV1ID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@DMSV2ContainerID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@DMSV2DocumentID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@ClinicID", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                    oDBParameters.Add("@PrefixID", _PrefixTransactionID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);

            //                    int retVal = oDB.Execute("gsp_eDocV3_InUpDocumentDetails", oDBParameters, out _Returnvalue);
            //                    _CurrentDocumentID = Convert.ToInt64(_Returnvalue);

            //                    #endregion

            //                    int _Count = _ImportDocumentPageCount;
            //                    string _OutputSplittedFile = "";

            //                    if (_ImportDocumentPageCount > _FilePageMaxThreshold)
            //                    {
            //                        for (int c = 0; c <= Convert.ToInt64(_ImportDocumentPageCount / _FilePageMaxThreshold); c++)
            //                        {
            //                            int _FromPage = 0;
            //                            int _ToPage = 0;
            //                            _CurrentContainerID = 0;
            //                            _OutputSplittedFile = "";

            //                            #region " Split File Logic "

            //                            FileInfo fInfo = new FileInfo(_FilePath);

            //                            _OutputSplittedFile = fInfo.DirectoryName + "\\" + fInfo.Name.Substring(0, fInfo.Name.Length - 4) + "_" + Convert.ToString(c + 1) + ".pdf";



            //                            fInfo = null;

            //                            if ((_Count - _FilePageMaxThreshold) >= _FilePageMinThreshold)
            //                            {
            //                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
            //                                _FromPage = (c * _FilePageMaxThreshold) + 1;
            //                                _ToPage = (c + 1) * _FilePageMaxThreshold;
            //                                oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
            //                                if (oSDKInteraction != null) { oSDKInteraction.Dispose(); }
            //                            }
            //                            else
            //                            {
            //                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
            //                                _FromPage = (c * _FilePageMaxThreshold) + 1;
            //                                _ToPage = _ImportDocumentPageCount;
            //                                oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
            //                                if (oSDKInteraction != null) { oSDKInteraction.Dispose(); }
            //                                _Count = 0;
            //                            }

            //                            #endregion

            //                            #region " Insert Splitted File "

            //                            oDBParameters.Clear();
            //                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

            //                            oDBParameters.Add("@eDocumentID", _CurrentDocumentID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                            oDBParameters.Add("@eContainerID", _CurrentContainerID, System.Data.ParameterDirection.InputOutput, System.Data.SqlDbType.BigInt);
            //                            oDBParameters.Add("@DocumentPageFrom", _FromPage, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                            oDBParameters.Add("@DocumentPageTo", _ToPage, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                            oDBParameters.Add("@DocumentExtension", _DocumentExtension, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                            oDBParameters.Add("@IsModified", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                            oDBParameters.Add("@SourceBin", enum_DocumentSourceBin.Import.GetHashCode(), System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
            //                            oDBParameters.Add("@SourceMachine", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                            oDBParameters.Add("@MachineID", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                            oDBParameters.Add("@ClinicID", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                            oDBParameters.Add("@PrefixID", _PrefixTransactionID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);

            //                            _Returnvalue = 0;
            //                            retVal = oDB.Execute("gsp_eDocV3_InUpContainer", oDBParameters, out _Returnvalue);
            //                            _CurrentContainerID = Convert.ToInt64(_Returnvalue);

            //                            bool _UseCompressedDocument = false;
            //                            // Code Commented on 20090707 - becoz we removed the Luratech
            //                            //#region " Compression Code "
            //                            //gloEDocumentV3.Compression.eDocV3Compression oSDKCompression = new gloEDocumentV3.Compression.eDocV3Compression();
            //                            //oSDKCompression.SDKCompressionProgressEvent += new gloEDocumentV3.Compression.eDocV3Compression.SDKCompressionProgress(oSDKCompression_SDKCompressionProgressEvent);

            //                            //if (PerformCompression == true)
            //                            //{
            //                            //    try
            //                            //    {
            //                            //        //1.Check for process dir existing or not if exists delete and create new 
            //                            //        _DirectoryPathToCompress = gloEDocumentV3.gloEDocV3Admin.gLuraTechTemporaryProcessPath;

            //                            //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //                            //        { Directory.Delete(_DirectoryPathToCompress, true); }

            //                            //        Directory.CreateDirectory(_DirectoryPathToCompress);

            //                            //        //2.Copy the file to temp compress process path
            //                            //        if (File.Exists(_OutputSplittedFile))
            //                            //        {
            //                            //            FileInfo fileInfo = new FileInfo(_OutputSplittedFile);
            //                            //            string _strFileName = fileInfo.Name;
            //                            //            fileInfo = null;

            //                            //            _CompressedFilePath = "";
            //                            //            _CompressedFilePath = _DirectoryPathToCompress + "\\" + _strFileName.Substring(0, (_strFileName.Length - 4)) + "_cpr.pdf";
            //                            //            _UseCompressedDocument = oSDKCompression.CompressDocument(_OutputSplittedFile, _CompressedFilePath);
            //                            //            if (File.Exists(_CompressedFilePath) == false && gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_CompressedFilePath) > 0)
            //                            //            { _UseCompressedDocument = false; }
            //                            //        }
            //                            //    }
            //                            //    catch (Exception ex)
            //                            //    {
            //                            //        _UseCompressedDocument = false;
            //                            //    }
            //                            //    finally
            //                            //    {

            //                            //    }
            //                            //}

            //                            //#endregion

            //                            #region "Insert File in to Database"

            //                            if (_UseCompressedDocument == true)
            //                            { bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath); }
            //                            else
            //                            { bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _OutputSplittedFile); }
            //                            #endregion "Insert File in to Database"

            //                            #region "Page Region"
            //                            //.Pages entry
            //                            _PageCounter = 0;
            //                            _DocumentPageNumber = 0;

            //                            for (_PageCounter = _FromPage; _PageCounter <= _ToPage; _PageCounter++)
            //                            {
            //                                _DocumentPageNumber = _DocumentPageNumber + 1;

            //                                _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _DocumentPageNumber.ToString();
            //                                _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
            //                                "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _DocumentPageNumber + ",'Page ' + '" + _DocumentPageNumber.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
            //                                oDB.Execute_Query(_strSQL);
            //                            }
            //                            #endregion

            //                            #region " Update Docment Details - If Compression Performed "

            //                            if (_UseCompressedDocument)
            //                            {
            //                                string _sqlQuery = "";
            //                                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsCompressed = '" + _UseCompressedDocument + "' "
            //                                           + " WHERE eDocumentID = " + _CurrentDocumentID + "  AND PatientID =" + PatientID + " "
            //                                           + " AND [Year] ='" + DestYear + "' AND [Month]='" + DestMonth + "' AND ClinicID = " + ClinicID + "";
            //                                int val = oDB.Execute_Query(_sqlQuery);
            //                            }

            //                            #endregion

            //                            #endregion

            //                            _Count = _Count - _FilePageMaxThreshold;
            //                            if (_Count <= 0) { break; }
            //                        }
            //                    }
            //                    else
            //                    {

            //                        bool _UseCompressedDocument = false;
            //                       // Commented 20090707 -- Luratech is removed
            //                        //#region " Compression Code " 
            //                        //gloEDocumentV3.Compression.eDocV3Compression oSDKCompression = new gloEDocumentV3.Compression.eDocV3Compression();
            //                        //oSDKCompression.SDKCompressionProgressEvent += new gloEDocumentV3.Compression.eDocV3Compression.SDKCompressionProgress(oSDKCompression_SDKCompressionProgressEvent);

            //                        //if (PerformCompression == true)
            //                        //{
            //                        //    try
            //                        //    {
            //                        //        //1.Check for process dir existing or not if exists delete and create new 
            //                        //        _DirectoryPathToCompress = gloEDocumentV3.gloEDocV3Admin.gLuraTechTemporaryProcessPath;

            //                        //        if (Directory.Exists(_DirectoryPathToCompress) == true)
            //                        //        { Directory.Delete(_DirectoryPathToCompress, true); }

            //                        //        Directory.CreateDirectory(_DirectoryPathToCompress);

            //                        //        //2.Copy the file to temp compress process path
            //                        //        if (File.Exists(_FilePath))
            //                        //        {
            //                        //            FileInfo fileInfo = new FileInfo(_FilePath);
            //                        //            string _strFileName = fileInfo.Name;
            //                        //            fileInfo = null;

            //                        //            _CompressedFilePath = "";
            //                        //            _CompressedFilePath = _DirectoryPathToCompress + "\\" + _strFileName.Substring(0, (_strFileName.Length - 4)) + "_cpr" + ".pdf";
            //                        //            _UseCompressedDocument = oSDKCompression.CompressDocument(_FilePath, _CompressedFilePath);
            //                        //            if (File.Exists(_CompressedFilePath) == false && gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_CompressedFilePath) > 0)
            //                        //            { _UseCompressedDocument = false; }
            //                        //        }
            //                        //    }
            //                        //    catch (Exception ex)
            //                        //    {
            //                        //        _UseCompressedDocument = false;
            //                        //    }
            //                        //    finally
            //                        //    {

            //                        //    }
            //                        //}

            //                        //#endregion

            //                        #region " Update Docment Details - If Compression Performed "

            //                        if (_UseCompressedDocument)
            //                        {
            //                            string _sqlQuery = "";
            //                            _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsCompressed = " + _UseCompressedDocument + " "
            //                                       + " WHERE eDocumentID = " + _CurrentDocumentID + "  AND PatientID =" + PatientID + " "
            //                                       + " AND Year='" + DestYear + "' Month='" + DestMonth + "' AND ClinicID = " + ClinicID + "";
            //                            oDB.Execute_Query(_sqlQuery);
            //                        }

            //                        #endregion

            //                        #region " Container Details "

            //                        oDBParameters.Clear();
            //                        oDBParameters.Add("@eDocumentID", _CurrentDocumentID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                        oDBParameters.Add("@eContainerID", _CurrentContainerID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                        oDBParameters.Add("@DocumentPageFrom", _DocumentPageFrom, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                        oDBParameters.Add("@DocumentPageTo", _DocumentPageTo, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                        oDBParameters.Add("@DocumentExtension", _DocumentExtension, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                        oDBParameters.Add("@IsModified", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
            //                        oDBParameters.Add("@SourceBin", enum_DocumentSourceBin.Import.GetHashCode(), System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
            //                        oDBParameters.Add("@SourceMachine", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                        oDBParameters.Add("@MachineID", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
            //                        oDBParameters.Add("@ClinicID", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
            //                        oDBParameters.Add("@PrefixID", _PrefixTransactionID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);

            //                        _Returnvalue = 0;
            //                        retVal = oDB.Execute("gsp_eDocV3_InUpContainer", oDBParameters, out _Returnvalue);
            //                        _CurrentContainerID = Convert.ToInt64(_Returnvalue);

            //                        #endregion

            //                        #region "Insert File in to Database"

            //                        if (_UseCompressedDocument == true)
            //                        { bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath); }
            //                        else
            //                        { bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath); }

            //                        #endregion "Insert File in to Database"

            //                        #region "Page Region"

            //                        for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
            //                        {
            //                            _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();
            //                            _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
            //                            "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
            //                            oDB.Execute_Query(_strSQL);
            //                        }

            //                        #endregion
            //                    }

            //                }
            //            }
            //        }
            //        if (_CurrentContainerID > 0 && _CurrentContainerID > 0)
            //        { _result = true; }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion

            //    }
            //    finally
            //    {
            //        oDB.Disconnect();
            //        if (oDB != null) { oDB.Dispose(); }
            //        if (oDBParameters != null) { oDBParameters.Dispose(); }
            //    }

            //    DestContainerID = _CurrentContainerID;
            //    DestDocumentID = _CurrentDocumentID;
            //    return _result;
            //}
            public bool SplitImport(long PatientID, ArrayList SourceDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            {
                gloEDocumentV3.Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                gloEDocumentV3.Database.DBParameters oDBParameters = new gloEDocumentV3.Database.DBParameters();

                #region " Variable Declaration "

                string _strSQL = "";
                bool _result = false;
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;
                int _ImportDocumentPageCount = 0;
                int _FilePageMaxThreshold = 20;
                int _FilePageMinThreshold = 10;
                Int64 _PrefixTransactionID = 0;
                Object _Returnvalue = null;
                int _PageCounter = 0;
                int _DocumentPageNumber = 0;
                string _BookMarkTag = "";
                string _DocumentExtension = "pdf";
                string _FilePath = "";
                string _UsedMachine = "";
                Int32 _DocumentPageFrom = 0;
                Int32 _DocumentPageTo = 0;
                string _CompressedFilePath = "";
                //string _DirectoryPathToCompress = "";

                #endregion

                try
                {
                    _UsedMachine = Environment.MachineName;

                    if (SourceDocuments != null && SourceDocuments.Count > 0)
                    {
                        if (oDB != null)
                        {
                            if (oDB.Connect(false))
                            {
                                for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                                {
                                    _FilePath = "";
                                    _CurrentDocumentID = 0;
                                    _CurrentContainerID = 0;
                                    _ImportDocumentPageCount = 0;
                                    _DocumentPageFrom = 0;
                                    _DocumentPageTo = 0;

                                    _FilePath = System.Convert.ToString(SourceDocuments[i]);

                                    if (File.Exists(_FilePath) == true)
                                    {
                                        _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                                        _DocumentPageFrom = 1;
                                        _DocumentPageTo = _ImportDocumentPageCount;

                                        #region " Document Details "
                                        if (oDBParameters != null)
                                        {
                                            oDBParameters.Clear();
                                            _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                            oDBParameters.Add("@eDocumentID", _CurrentDocumentID, System.Data.ParameterDirection.InputOutput, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@DocumentName", DestDocumentName + System.Convert.ToString((i + 1)), System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@CategoryID", DestCategoryID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@Category", DestCategory, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@PatientID", PatientID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@Year", DestYear, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@Month", DestMonth, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@PageCounts", _ImportDocumentPageCount, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
                                            oDBParameters.Add("@CreatedDateTime", DateTime.Now, System.Data.ParameterDirection.Input, System.Data.SqlDbType.DateTime);
                                            oDBParameters.Add("@ModifiedDateTime", DateTime.Now, System.Data.ParameterDirection.Input, System.Data.SqlDbType.DateTime);
                                            oDBParameters.Add("@IsAcknowledge", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                            oDBParameters.Add("@HasNote", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                            oDBParameters.Add("@ExternalID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@ExternalCode", "", System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@ExternalDescription", "", System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@UsedStatus", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                            oDBParameters.Add("@UsedMachine", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@ArchiveID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@ArchiveStatus", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                            oDBParameters.Add("@ArchiveDescription", "", System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                            oDBParameters.Add("@IsCompressed", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                            oDBParameters.Add("@DMSV1ID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@DMSV2ContainerID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@DMSV2DocumentID", 0, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@ClinicID", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                            oDBParameters.Add("@PrefixID", _PrefixTransactionID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);

                                            int retVal = oDB.Execute("gsp_eDocV3_InUpDocumentDetails", oDBParameters, out _Returnvalue);
                                            _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);

                                        #endregion

                                            int _Count = _ImportDocumentPageCount;
                                            string _OutputSplittedFile = "";

                                            if (_ImportDocumentPageCount > _FilePageMaxThreshold)
                                            {
                                                for (int c = 0; c <= System.Convert.ToInt64(_ImportDocumentPageCount / _FilePageMaxThreshold); c++)
                                                {
                                                    int _FromPage = 0;
                                                    int _ToPage = 0;
                                                    _CurrentContainerID = 0;
                                                    _OutputSplittedFile = "";

                                                    #region " Split File Logic "

                                                    FileInfo fInfo = new FileInfo(_FilePath);
                                                    _OutputSplittedFile = fInfo.DirectoryName + "\\" + fInfo.Name.Substring(0, fInfo.Name.Length - 4) + "_" + System.Convert.ToString(c + 1) + ".pdf";
                                                    fInfo = null;

                                                    if ((_Count - _FilePageMaxThreshold) >= _FilePageMinThreshold)
                                                    {
                                                        SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
                                                        _FromPage = (c * _FilePageMaxThreshold) + 1;
                                                        _ToPage = (c + 1) * _FilePageMaxThreshold;
                                                        oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
                                                        if (oSDKInteraction != null)
                                                        {
                                                            oSDKInteraction.Dispose();
                                                            oSDKInteraction = null;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
                                                        _FromPage = (c * _FilePageMaxThreshold) + 1;
                                                        _ToPage = _ImportDocumentPageCount;
                                                        oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
                                                        if (oSDKInteraction != null)
                                                        {
                                                            oSDKInteraction.Dispose();
                                                            oSDKInteraction = null;
                                                        }
                                                        _Count = 0;
                                                    }

                                                    #endregion

                                                    #region " Insert Splitted File "
                                                    if (oDBParameters != null)
                                                    {
                                                        oDBParameters.Clear();
                                                        _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(PatientID);

                                                        oDBParameters.Add("@eDocumentID", _CurrentDocumentID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                        oDBParameters.Add("@eContainerID", _CurrentContainerID, System.Data.ParameterDirection.InputOutput, System.Data.SqlDbType.BigInt);
                                                        oDBParameters.Add("@DocumentPageFrom", _FromPage, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                        oDBParameters.Add("@DocumentPageTo", _ToPage, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                        oDBParameters.Add("@DocumentExtension", _DocumentExtension, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                        oDBParameters.Add("@IsModified", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                                        oDBParameters.Add("@SourceBin", enum_DocumentSourceBin.Import.GetHashCode(), System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
                                                        oDBParameters.Add("@SourceMachine", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                        oDBParameters.Add("@MachineID", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                        oDBParameters.Add("@ClinicID", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                        oDBParameters.Add("@PrefixID", _PrefixTransactionID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);

                                                        _Returnvalue = 0;
                                                        retVal = oDB.Execute("gsp_eDocV3_InUpContainer", oDBParameters, out _Returnvalue);
                                                        _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);

                                                        bool _UseCompressedDocument = false;


                                                        #region "Insert File in to Database"

                                                        if (_UseCompressedDocument == true)
                                                        {
                                                            bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
                                                        }
                                                        else
                                                        {
                                                            bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _OutputSplittedFile);
                                                        }
                                                        #endregion "Insert File in to Database"

                                                        #region "Page Region"

                                                        _PageCounter = 0;
                                                        _DocumentPageNumber = 0;

                                                        for (_PageCounter = _FromPage; _PageCounter <= _ToPage; _PageCounter++)
                                                        {
                                                            _DocumentPageNumber = _DocumentPageNumber + 1;

                                                            _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _DocumentPageNumber.ToString();
                                                            _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                                            "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _DocumentPageNumber + ",'Page ' + '" + _DocumentPageNumber.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                                            oDB.Execute_Query(_strSQL);
                                                        }
                                                        #endregion

                                                        #region " Update Docment Details - If Compression Performed "

                                                        if (_UseCompressedDocument)
                                                        {
                                                            string _sqlQuery = "";
                                                            _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsCompressed = '" + _UseCompressedDocument + "' "
                                                                       + " WHERE eDocumentID = " + _CurrentDocumentID + "  AND PatientID =" + PatientID + " "
                                                                       + " AND [Year] ='" + DestYear + "' AND [Month]='" + DestMonth + "' AND ClinicID = " + ClinicID + "";
                                                            int val = oDB.Execute_Query(_sqlQuery);
                                                        }

                                                        #endregion
                                                    }
                                                    #endregion

                                                    _Count = _Count - _FilePageMaxThreshold;
                                                    if (_Count <= 0)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            else
                                            {

                                                bool _UseCompressedDocument = false;


                                                #region " Update Docment Details - If Compression Performed "

                                                if (_UseCompressedDocument)
                                                {
                                                    string _sqlQuery = "";
                                                    _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET IsCompressed = " + _UseCompressedDocument + " "
                                                               + " WHERE eDocumentID = " + _CurrentDocumentID + "  AND PatientID =" + PatientID + " "
                                                               + " AND Year='" + DestYear + "' Month='" + DestMonth + "' AND ClinicID = " + ClinicID + "";
                                                    oDB.Execute_Query(_sqlQuery);
                                                }

                                                #endregion

                                                #region " Container Details "
                                                if (oDBParameters != null)
                                                {
                                                    oDBParameters.Clear();
                                                    oDBParameters.Add("@eDocumentID", _CurrentDocumentID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                    oDBParameters.Add("@eContainerID", _CurrentContainerID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                    oDBParameters.Add("@DocumentPageFrom", _DocumentPageFrom, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                    oDBParameters.Add("@DocumentPageTo", _DocumentPageTo, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                    oDBParameters.Add("@DocumentExtension", _DocumentExtension, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                    oDBParameters.Add("@IsModified", false, System.Data.ParameterDirection.Input, System.Data.SqlDbType.Bit);
                                                    oDBParameters.Add("@SourceBin", enum_DocumentSourceBin.Import.GetHashCode(), System.Data.ParameterDirection.Input, System.Data.SqlDbType.Int);
                                                    oDBParameters.Add("@SourceMachine", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                    oDBParameters.Add("@MachineID", _UsedMachine, System.Data.ParameterDirection.Input, System.Data.SqlDbType.VarChar);
                                                    oDBParameters.Add("@ClinicID", ClinicID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);
                                                    oDBParameters.Add("@PrefixID", _PrefixTransactionID, System.Data.ParameterDirection.Input, System.Data.SqlDbType.BigInt);

                                                    _Returnvalue = 0;
                                                    retVal = oDB.Execute("gsp_eDocV3_InUpContainer", oDBParameters, out _Returnvalue);
                                                    _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);
                                                }
                                                #endregion

                                                #region "Insert File in to Database"

                                                if (_UseCompressedDocument == true)
                                                {
                                                    bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _CompressedFilePath);
                                                }
                                                else
                                                {
                                                    bool _IsFileInserted = oDB.ConvertnInsertFile(_CurrentDocumentID, _CurrentContainerID, _FilePath);
                                                }

                                                #endregion "Insert File in to Database"

                                                #region "Page Region"

                                                for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
                                                {
                                                    _BookMarkTag = DestYear + "~" + DestCategory + "~" + DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();
                                                    _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                                    "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + ClinicID + ")";
                                                    oDB.Execute_Query(_strSQL);
                                                }

                                                #endregion
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (_CurrentContainerID > 0 && _CurrentContainerID > 0)
                    { _result = true; }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);

                }
                finally
                {

                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                    if (oDBParameters != null)
                    {
                        oDBParameters.Dispose();
                        oDBParameters = null;
                    }
                }

                DestContainerID = _CurrentContainerID;
                DestDocumentID = _CurrentDocumentID;
                return _result;
            }

            #endregion "Dhruv 2010 -> SplitImport"

            void oSDKCompression_SDKCompressionProgressEvent(int Percentage, string Message)
            {
            }

            #region "Dhruv 2010 -> SpiltDocuments"
            //public bool SpiltDocuments_Old(ArrayList SourceDocuments, out ArrayList SplittedList)
            //{
            //    int _ImportDocumentPageCount = 0;
            //    int _FilePageMaxThreshold = gloEDocV3Admin.gFilePageMaxThreshold;
            //    int _FilePageMinThreshold = gloEDocV3Admin.gFilePageMinThreshold;
            //    Int32 _DocumentPageFrom = 0;
            //    Int32 _DocumentPageTo = 0;
            //    string _FilePath = "";
            //    ArrayList _SplittedList = new ArrayList();
            //    bool _RetValue = false;

            //    try
            //    {
            //        if (SourceDocuments != null && SourceDocuments.Count > 0)
            //        {
            //            for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //            {
            //                _FilePath = Convert.ToString(SourceDocuments[i]);

            //                if (File.Exists(_FilePath))
            //                {
            //                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
            //                    int _Count = _ImportDocumentPageCount;
            //                    string _OutputSplittedFile = "";

            //                    if (_ImportDocumentPageCount > _FilePageMaxThreshold)
            //                    {
            //                        for (int c = 0; c <= Convert.ToInt64(_ImportDocumentPageCount / _FilePageMaxThreshold); c++)
            //                        {
            //                            int _FromPage = 0;
            //                            int _ToPage = 0;
            //                            //_CurrentContainerID = 0;
            //                            _OutputSplittedFile = "";

            //                            #region " Split File Logic "

            //                            FileInfo fInfo = new FileInfo(_FilePath);
            //                            _OutputSplittedFile = fInfo.DirectoryName + "\\" + fInfo.Name.Substring(0, fInfo.Name.Length - 4) + "_" + Convert.ToString(c + 1) + ".pdf";
            //                            fInfo = null;

            //                            if ((_Count - _FilePageMaxThreshold) >= _FilePageMinThreshold)
            //                            {
            //                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
            //                                _FromPage = (c * _FilePageMaxThreshold) + 1;
            //                                _ToPage = (c + 1) * _FilePageMaxThreshold;
            //                                oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
            //                                if (oSDKInteraction != null) { oSDKInteraction.Dispose(); }
            //                            }
            //                            else
            //                            {
            //                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
            //                                _FromPage = (c * _FilePageMaxThreshold) + 1;
            //                                _ToPage = _ImportDocumentPageCount;
            //                                oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
            //                                if (oSDKInteraction != null) { oSDKInteraction.Dispose(); }
            //                                _Count = 0;
            //                            }

            //                            #endregion

            //                            _SplittedList.Add(_OutputSplittedFile);
            //                            _Count = _Count - _FilePageMaxThreshold;
            //                            if (_Count <= 0) { break; }
            //                        }
            //                    }
            //                    else
            //                    {
            //                        _SplittedList.Add(_FilePath);
            //                    }
            //                }
            //            }
            //            _RetValue = true;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion

            //        _RetValue = false;
            //        _SplittedList = null;

            //    }
            //    finally
            //    { }

            //    SplittedList = _SplittedList;
            //    return _RetValue;
            //}
            public bool SpiltDocuments(ArrayList SourceDocuments, out ArrayList SplittedList)
            {
                int _ImportDocumentPageCount = 0;
                int _FilePageMaxThreshold = gloEDocV3Admin.gFilePageMaxThreshold;
                int _FilePageMinThreshold = gloEDocV3Admin.gFilePageMinThreshold;
                // Int32 _DocumentPageFrom = 0;
                // Int32 _DocumentPageTo = 0;
                string _FilePath = "";
                ArrayList _SplittedList = new ArrayList();
                bool _RetValue = false;

                try
                {
                    if (SourceDocuments != null && SourceDocuments.Count > 0)
                    {
                        for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                        {
                            _FilePath = System.Convert.ToString(SourceDocuments[i]);
                            if (_FilePath != "")
                            {
                                if (File.Exists(_FilePath))
                                {
                                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                                    int _Count = _ImportDocumentPageCount;
                                    string _OutputSplittedFile = "";

                                    if (_ImportDocumentPageCount > _FilePageMaxThreshold)
                                    {
                                        for (int c = 0; c <= System.Convert.ToInt64(_ImportDocumentPageCount / _FilePageMaxThreshold); c++)
                                        {
                                            int _FromPage = 0;
                                            int _ToPage = 0;

                                            _OutputSplittedFile = "";

                                            #region " Split File Logic "

                                            FileInfo fInfo = new FileInfo(_FilePath);
                                            _OutputSplittedFile = fInfo.DirectoryName + "\\" + fInfo.Name.Substring(0, fInfo.Name.Length - 4) + "_" + System.Convert.ToString(c + 1) + ".pdf";
                                            fInfo = null;

                                            if ((_Count - _FilePageMaxThreshold) >= _FilePageMinThreshold)
                                            {
                                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
                                                if (oSDKInteraction != null)
                                                {
                                                    _FromPage = (c * _FilePageMaxThreshold) + 1;
                                                    _ToPage = (c + 1) * _FilePageMaxThreshold;
                                                    oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
                                                    if (oSDKInteraction != null)
                                                    {
                                                        oSDKInteraction.Dispose();
                                                        oSDKInteraction = null;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
                                                if (oSDKInteraction != null)
                                                {
                                                    _FromPage = (c * _FilePageMaxThreshold) + 1;
                                                    _ToPage = _ImportDocumentPageCount;
                                                    oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
                                                    if (oSDKInteraction != null)
                                                    {
                                                        oSDKInteraction.Dispose();
                                                        oSDKInteraction = null;
                                                    }
                                                }
                                                _Count = 0;
                                            }

                                            #endregion

                                            _SplittedList.Add(_OutputSplittedFile);
                                            _Count = _Count - _FilePageMaxThreshold;
                                            if (_Count <= 0)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        _SplittedList.Add(_FilePath);
                                    }
                                }
                            }
                        }
                        _RetValue = true;
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);

                    _RetValue = false;
                    _SplittedList = null;

                }


                SplittedList = _SplittedList;
                return _RetValue;
            }

            #endregion "Dhruv 2010 -> SpiltDocuments"


            #region "Dhruv 2010 -> SpiltDocumentsOnSize"
            //public bool SpiltDocumentsOnSize_Old(ArrayList SourceDocuments, out ArrayList SplittedList)
            //{
            //    int _ImportDocumentPageCount = 0;
            //    int _FilePageMaxThreshold = gloEDocV3Admin.gFilePageMaxThreshold;
            //    int _FilePageMinThreshold = gloEDocV3Admin.gFilePageMinThreshold;
            //    Int32 _DocumentPageFrom = 0;
            //    Int32 _DocumentPageTo = 0;
            //    string _FilePath = "";
            //    ArrayList _SplittedList = new ArrayList();
            //    bool _RetValue = false;

            //    try
            //    {
            //        if (SourceDocuments != null && SourceDocuments.Count > 0)
            //        {
            //            for (int i = 0; i <= SourceDocuments.Count - 1; i++)
            //            {
            //                _FilePath = Convert.ToString(SourceDocuments[i]);

            //                if (File.Exists(_FilePath))
            //                {
            //                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
            //                    int _Count = _ImportDocumentPageCount;
            //                    string _OutputSplittedFile = "";

            //                    if (_ImportDocumentPageCount > _FilePageMaxThreshold)
            //                    {
            //                        for (int c = 0; c <= Convert.ToInt64(_ImportDocumentPageCount / _FilePageMaxThreshold); c++)
            //                        {
            //                            int _FromPage = 0;
            //                            int _ToPage = 0;
            //                            //_CurrentContainerID = 0;
            //                            _OutputSplittedFile = "";

            //                            #region " Split File Logic "

            //                            FileInfo fInfo = new FileInfo(_FilePath);
            //                            _OutputSplittedFile = fInfo.DirectoryName + "\\" + fInfo.Name.Substring(0, fInfo.Name.Length - 4) + "_" + Convert.ToString(c + 1) + ".pdf";
            //                            fInfo = null;

            //                            if ((_Count - _FilePageMaxThreshold) >= _FilePageMinThreshold)
            //                            {
            //                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
            //                                _FromPage = (c * _FilePageMaxThreshold) + 1;
            //                                _ToPage = (c + 1) * _FilePageMaxThreshold;
            //                                oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
            //                                if (oSDKInteraction != null) { oSDKInteraction.Dispose(); }
            //                            }
            //                            else
            //                            {
            //                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
            //                                _FromPage = (c * _FilePageMaxThreshold) + 1;
            //                                _ToPage = _ImportDocumentPageCount;
            //                                oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
            //                                if (oSDKInteraction != null) { oSDKInteraction.Dispose(); }
            //                                _Count = 0;
            //                            }

            //                            #endregion

            //                            _SplittedList.Add(_OutputSplittedFile);
            //                            _Count = _Count - _FilePageMaxThreshold;
            //                            if (_Count <= 0) { break; }
            //                        }
            //                    }
            //                    else
            //                    {
            //                        _SplittedList.Add(_FilePath);
            //                    }
            //                }
            //            }
            //            _RetValue = true;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion

            //        _RetValue = false;
            //        _SplittedList = null;

            //    }
            //    finally
            //    { }

            //    SplittedList = _SplittedList;
            //    return _RetValue;
            //}
            public bool SpiltDocumentsOnSize(ArrayList SourceDocuments, out ArrayList SplittedList)
            {
                int _ImportDocumentPageCount = 0;
                int _FilePageMaxThreshold = gloEDocV3Admin.gFilePageMaxThreshold;
                int _FilePageMinThreshold = gloEDocV3Admin.gFilePageMinThreshold;
                //  Int32 _DocumentPageFrom = 0;
                //  Int32 _DocumentPageTo = 0;
                string _FilePath = "";
                ArrayList _SplittedList = new ArrayList();
                bool _RetValue = false;

                try
                {
                    if (SourceDocuments != null && SourceDocuments.Count > 0)
                    {
                        for (int i = 0; i <= SourceDocuments.Count - 1; i++)
                        {
                            _FilePath = System.Convert.ToString(SourceDocuments[i]);
                            if (_FilePath != "")
                            {
                                if (File.Exists(_FilePath))
                                {
                                    _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                                    int _Count = _ImportDocumentPageCount;
                                    string _OutputSplittedFile = "";

                                    if (_ImportDocumentPageCount > _FilePageMaxThreshold)
                                    {
                                        for (int c = 0; c <= System.Convert.ToInt64(_ImportDocumentPageCount / _FilePageMaxThreshold); c++)
                                        {
                                            int _FromPage = 0;
                                            int _ToPage = 0;

                                            _OutputSplittedFile = "";

                                            #region " Split File Logic "

                                            FileInfo fInfo = new FileInfo(_FilePath);
                                            if (fInfo != null)
                                            {
                                                _OutputSplittedFile = fInfo.DirectoryName + "\\" + fInfo.Name.Substring(0, fInfo.Name.Length - 4) + "_" + System.Convert.ToString(c + 1) + ".pdf";
                                                if (fInfo != null)
                                                {
                                                    fInfo = null;
                                                }
                                            }


                                            if ((_Count - _FilePageMaxThreshold) >= _FilePageMinThreshold)
                                            {
                                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
                                                if (oSDKInteraction != null)
                                                {
                                                    _FromPage = (c * _FilePageMaxThreshold) + 1;
                                                    _ToPage = (c + 1) * _FilePageMaxThreshold;
                                                    oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
                                                    if (oSDKInteraction != null)
                                                    {
                                                        oSDKInteraction.Dispose();
                                                        oSDKInteraction = null;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new eDocV3SDKInteraction();
                                                if (oSDKInteraction != null)
                                                {
                                                    _FromPage = (c * _FilePageMaxThreshold) + 1;
                                                    _ToPage = _ImportDocumentPageCount;
                                                    oSDKInteraction.SplitPagesIntoOneFile(_FromPage, _ToPage, _FilePath, _OutputSplittedFile);
                                                    if (oSDKInteraction != null)
                                                    {
                                                        oSDKInteraction.Dispose();
                                                        oSDKInteraction = null;
                                                    }
                                                }
                                                _Count = 0;
                                            }

                                            #endregion

                                            _SplittedList.Add(_OutputSplittedFile);
                                            _Count = _Count - _FilePageMaxThreshold;
                                            if (_Count <= 0) { break; }
                                        }
                                    }
                                    else
                                    {
                                        _SplittedList.Add(_FilePath);
                                    }
                                }
                            }
                        }
                        _RetValue = true;
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    ErrorMessagees(_ErrorMessage);

                    _RetValue = false;
                    _SplittedList = null;

                }


                SplittedList = _SplittedList;
                return _RetValue;
            }
            #endregion "Dhruv 2010 -> SpiltDocumentsOnSize"


            #region "Dhruv 20100621 -> ImportImages"
            //public bool ImportImages_Old(long PatientID, System.Collections.ArrayList oImageDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression)
            //{
            //    #region " Variable Declaration "

            //    pdftron.PDF.PDFDoc doc = new pdftron.PDF.PDFDoc();
            //    pdftron.PDF.Image img = null;
            //    pdftron.PDF.ElementBuilder oElementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
            //    pdftron.PDF.ElementWriter oElementWriter = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
            //    string _returnResult = "";
            //    pdftron.PDF.Element element = null;
            //    System.Drawing.Bitmap bmp = null;
            //    pdftron.PDF.Rect oRect = null;
            //    pdftron.PDF.Page page = null;
            //    string _tempProcessPath = "";
            //    string _OutputFilePath = "";
            //    bool _result = false;
            //    int _returnPageCount = 0;
            //    bool oDialogResultIsOK = false;
            //    Int64 _DocumentID = 0;
            //    Int64 _ContainerID = 0;

            //    #endregion

            //    try
            //    {
            //        _tempProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\ImportImages";
            //        if (Directory.Exists(_tempProcessPath) == false)
            //        { Directory.CreateDirectory(_tempProcessPath); }
            //        _OutputFilePath = _tempProcessPath + "\\" + DestDocumentName + ".pdf";

            //        for (int i = 0; i < oImageDocuments.Count; i++)
            //        {
            //            bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());
            //            int imgCount = bmp.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);

            //            oRect = new pdftron.PDF.Rect();

            //            float _hr = bmp.HorizontalResolution;
            //            float _vr = bmp.VerticalResolution;
            //            float _wd = bmp.Width;
            //            float _ht = bmp.Height;


            //            int XWidth = 0;
            //            int YHeight = 0;
            //            bool XYRet = false;

            //            XYRet = GetXWidthYHeight(_hr, _vr, _ht, _wd, out XWidth, out YHeight);

            //            oRect = new pdftron.PDF.Rect();
            //            oRect.x1 = XWidth;// img.GetBitmap().Width;
            //            oRect.x2 = 0;
            //            oRect.y1 = YHeight;// img.GetBitmap().Height;
            //            oRect.y2 = 0;


            //            for (int j = 0; j < imgCount; j++)
            //            {
            //                if (j >= 1)
            //                {
            //                    // Select the current TIFF page using SelectActiveFrame
            //                    bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, j);
            //                }

            //                //Set Page Size as of Rect
            //                page = doc.PageCreate(oRect);
            //                oElementWriter.Begin(page);
            //                img = pdftron.PDF.Image.Create(doc, bmp);
            //                element = oElementBuilder.CreateImage(img, new Matrix2D(XWidth, 0, 0, YHeight, 0, 0));// );//new Matrix2D(612, 0, 0, 794, 0, 0) //
            //                oElementWriter.WritePlacedElement(element);
            //                oElementWriter.End();
            //                doc.PagePushBack(page);
            //            }

            //            if (oRect != null)
            //                oRect = null;

            //            if (page != null)
            //                page = null;

            //            if (bmp != null)
            //                bmp.Dispose();

            //        }

            //        doc.Save(_OutputFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
            //        doc.Close();


            //        if (File.Exists(_OutputFilePath) == true)
            //        {
            //            ArrayList SourceDocment = new ArrayList();
            //            SourceDocment.Add(_OutputFilePath);
            //            oDialogResultIsOK = ImportSplit(PatientID, SourceDocment, DestDocumentName, DestCategoryID, DestCategory, DestYear, DestMonth, ClinicID, out _ContainerID, out _DocumentID, PerformCompression);
            //            SourceDocment.Clear();
            //            SourceDocment = null;
            //        }
            //        if (oDialogResultIsOK == true) { _result = true; }

            //    }
            //    catch (Exception ex)
            //    {
            //        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + ex.ToString();
            //        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //        _MessageString = "";
            //        System.Windows.Forms.MessageBox.Show(ex.ToString());
            //        _returnResult = "";
            //    }
            //    finally
            //    {
            //        if (doc != null) { doc.Dispose(); }
            //        if (oElementBuilder != null) { oElementBuilder.Dispose(); }
            //        if (oElementBuilder != null) { oElementWriter.Dispose(); }
            //        if (oRect != null) { oRect = null; }
            //        if (page != null) { page = null; }
            //        if (Directory.Exists(_tempProcessPath) == true) { Directory.Delete(_tempProcessPath, true); }
            //    }
            //    DestContainerID = _ContainerID;
            //    DestDocumentID = _DocumentID;
            //    return _result;
            //}
            public bool ImportImages(long PatientID, System.Collections.ArrayList oImageDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestSubCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, System.Windows.Forms.ProgressBar pbDocument, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None, bool isprocessed = false)
            {
                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog("Date Time :" + DateTime.Now.ToString() + "Import Images Start");
                #region " Variable Declaration "

                pdftron.PDF.PDFDoc doc = new pdftron.PDF.PDFDoc();
                pdftron.PDF.Image img = null;
                pdftron.PDF.ElementBuilder oElementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
                pdftron.PDF.ElementWriter oElementWriter = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
                //    string _returnResult = "";
                pdftron.PDF.Element element = null;
                System.Drawing.Bitmap bmp = null;
                pdftron.PDF.Rect oRect = null;
                pdftron.PDF.Page page = null;
                string _tempProcessPath = "";
                string _OutputFilePath = "";
                bool _result = false;
                //   int _returnPageCount = 0;
                bool oDialogResultIsOK = false;
                Int64 _DocumentID = 0;
                Int64 _ContainerID = 0;
                bool _isResult = false; // Checked the file modified from the recieved fax

                #endregion

                try
                {
                    _tempProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\ImportImages";
                    if (_tempProcessPath != "")
                    {
                        if (Directory.Exists(_tempProcessPath) == false)
                        {
                            Directory.CreateDirectory(_tempProcessPath);
                            if (Directory.Exists(_tempProcessPath) == false)
                            {
                                _ErrorMessage = "Unable to create directory. " + _tempProcessPath;
                                ErrorMessagees(_ErrorMessage);
                            }
                        }
                        _OutputFilePath = _tempProcessPath + "\\" + DestDocumentName + ".pdf";

                        if (oImageDocuments.Count > 1)
                        {
                            pbDocument.Maximum = (100 * (oImageDocuments.Count - 1)) - 20;   // added for bugid 93465 
                        }
                        for (int i = 0; i < oImageDocuments.Count; i++)
                        {
                            pbDocument.SuspendLayout();
                            if ((i * 100 - 20) > 0)
                            {
                                pbDocument.Value = (i * 100) - 20;
                            }
                            else
                            {

                                pbDocument.Value = i;
                            }
                            pbDocument.ResumeLayout(false);
                            pbDocument.PerformLayout();

                            FileInfo ofileInfo = new FileInfo(oImageDocuments[i].ToString());
                            if (ofileInfo != null)
                            {
                                string fileExtension = ofileInfo.Extension.ToUpper();

                                try
                                {
                                    //bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());

                                    //if processed by another machine should be checked [Dhruv]
                                    string sImage = oImageDocuments[i].ToString();
                                    // bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());
                                    if (File.Exists(sImage) == true)
                                    {
                                        bmp = new System.Drawing.Bitmap(sImage);
                                    }
                                    else
                                    {
                                        if (_isgloServices == false)
                                        {
                                            System.Windows.Forms.MessageBox.Show("This fax has already been processed by another user.", gloEDocV3Admin.gMessageBoxCaption, System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Information);
                                        }
                                        _isResult = true;
                                        break;

                                    }
                                    //End [Dhruv]

                                }
                                catch (Exception ex)
                                {
                                    _ErrorMessage = "Error is due to the bmp object is null";
                                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                    _MessageString = "";
                                    //_returnResult = "";
                                    if (_isgloServices == false)
                                    {
                                        System.Windows.Forms.MessageBox.Show("Exception in the BMP", ex.ToString());
                                    }
                                    break;
                                }
                                if (bmp == null)
                                {
                                    _ErrorMessage = "Error is due to the bmp object is null";
                                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                    _MessageString = "";
                                    //_returnResult = "";
                                    break;
                                }
                                //the fICount will holds the Frames into one image
                                int fICount = bmp.FrameDimensionsList.Length;
                                if (fICount <= 0)
                                {
                                    fICount = 1;
                                }
                                //Loop it upto the image count
                                for (int ij = 0; ij < fICount; ij++)
                                {
                                    int imgCount = 0;
                                    System.Drawing.Imaging.FrameDimension myFramedimention = null;
                                    try
                                    {
                                        if (bmp.FrameDimensionsList.Length > ij) //if the is > then the framecount
                                        {

                                            myFramedimention = new System.Drawing.Imaging.FrameDimension(bmp.FrameDimensionsList[ij]);
                                            imgCount = bmp.GetFrameCount(myFramedimention);
                                        }
                                        //imgCount = bmp.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);
                                    }
                                    catch (Exception ex)
                                    {
                                        imgCount = 1;
                                        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                    }
                                    //Image count should not be less then 0
                                    if (imgCount <= 0)
                                    {
                                        imgCount = 1;
                                    }

                                    float _hr = bmp.HorizontalResolution;
                                    float _vr = bmp.VerticalResolution;
                                    float _wd = bmp.Width;
                                    float _ht = bmp.Height;

                                    /* SLR: Don't know why it was disposed, but later it is used?
                                                                        if ((imgCount <= 1) && (fICount <= 1))
                                                                        {
                                                                            bmp.Dispose();
                                                                            bmp = null;
                                                                        }

                                      */
                                    int XWidth = 0;
                                    int YHeight = 0;
                                    bool XYRet = false;
                                    XYRet = GetXWidthYHeight(_hr, _vr, _ht, _wd, out XWidth, out YHeight);
                                    oRect = new pdftron.PDF.Rect();
                                    oRect.x1 = XWidth;// img.GetBitmap().Width;
                                    oRect.x2 = 0;
                                    oRect.y1 = YHeight;// img.GetBitmap().Height;
                                    oRect.y2 = 0;


                                    for (int j = 0; j < imgCount; j++)
                                    {
                                        //if fcount is greater then one then add more data from one file
                                        if (((j >= 1) || (ij >= 1)) && (bmp != null))
                                        {
                                            if (myFramedimention != null)
                                            {
                                                // Select the current TIFF page using SelectActiveFrame
                                                try
                                                {
                                                    bmp.SelectActiveFrame(myFramedimention, j);
                                                }
                                                catch //(Exception ex1)
                                                {
                                                    try
                                                    {
                                                        bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, ij);
                                                    }
                                                    catch //(Exception ex2)
                                                    {
                                                        bmp.Dispose();
                                                        bmp = null;
                                                    }
                                                }
                                            }

                                            else
                                            {
                                                try
                                                {
                                                    bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, ij);
                                                }
                                                catch //(Exception ex3)
                                                {
                                                    bmp.Dispose();
                                                    bmp = null;
                                                }
                                            }
                                        }

                                        //Set Page Size as of Rect
                                        page = doc.PageCreate(oRect);
                                        oElementWriter.Begin(page);
                                        if (bmp == null)
                                        {
                                            //Sanjog - Added on 2011 June 6 to convert first into bmp file n then create the PDF - Issue no.13885
                                            bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());
                                        }

                                        if ((imgCount <= 1) && (fICount <= 1))
                                        {
                                            try
                                            {
                                                //Sanjog - Added on 2011 June 6 to convert first into bmp file n then create the PDF - Issue no.13885
                                                img = pdftron.PDF.Image.Create(doc, bmp);
                                            }
                                            catch (Exception ex)
                                            {
                                                _ErrorMessage = "Error is due to the img object is null";
                                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                                _MessageString = "";
                                                //_returnResult = "";
                                                if (_isgloServices == false)
                                                {
                                                    System.Windows.Forms.MessageBox.Show("Error in Img", ex.ToString());
                                                }
                                                oElementWriter.End();
                                                doc.PagePushBack(page);
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            try
                                            {
                                                img = pdftron.PDF.Image.Create(doc, bmp);
                                            }
                                            catch (Exception ex)
                                            {
                                                _ErrorMessage = "Error is due to the img object is null";
                                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                                _MessageString = "";
                                                //_returnResult = "";
                                                if (_isgloServices == false)
                                                {
                                                    System.Windows.Forms.MessageBox.Show("Error in Img", ex.ToString());
                                                }
                                                oElementWriter.End();
                                                doc.PagePushBack(page);
                                                break;
                                            }
                                        }
                                        if (img == null)
                                        {
                                            _ErrorMessage = "Error is due to the img object is null";
                                            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                            _MessageString = "";
                                            //  _returnResult = "";
                                            oElementWriter.End();
                                            doc.PagePushBack(page);
                                            break;
                                        }

                                        element = oElementBuilder.CreateImage(img, new Matrix2D(XWidth, 0, 0, YHeight, 0, 0));// );//new Matrix2D(612, 0, 0, 794, 0, 0) //
                                        if (element == null)
                                        {
                                            _ErrorMessage = "Error is due to the element object is null";
                                            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                            _MessageString = "";
                                            // _returnResult = "";
                                            oElementWriter.End();
                                            doc.PagePushBack(page);
                                            img.Dispose();
                                            img = null;
                                            break;
                                        }
                                        oElementWriter.WritePlacedElement(element);
                                        oElementWriter.End();
                                        doc.PagePushBack(page);
                                        img.Dispose();
                                        img = null;
                                    }

                                    if (oRect != null)
                                        oRect = null;

                                    if (page != null)
                                        page = null;

                                    if (ofileInfo != null)
                                    {
                                        ofileInfo = null;
                                    }


                                }
                                if (bmp != null)
                                {
                                    bmp.Dispose();
                                    bmp = null;
                                }

                            }
                        }
                        if (_isResult == false) // Recieved fax + bmp file if exists or not - do not process [Dhruv]
                        {
                            doc.Save(_OutputFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                            doc.Close();
                            //IncreamentProgressBar(pbDocument, 20);

                            if (File.Exists(_OutputFilePath) == true)
                            {
                                ArrayList SourceDocment = new ArrayList();
                                SourceDocment.Add(_OutputFilePath);
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog("Date Time :" + DateTime.Now.ToString() + "ImportSplit() called from Import Images at Line 7381");
                                oDialogResultIsOK = ImportSplit(PatientID, SourceDocment, DestDocumentName, DestCategoryID, DestCategory, DestSubCategory, DestYear, DestMonth, ClinicID, out _ContainerID, out _DocumentID, PerformCompression, pbDocument, _OpenExternalSource, isprocessed);
                                SourceDocment.Clear();
                                SourceDocment = null;
                            }
                            if (oDialogResultIsOK == true) { _result = true; }
                        }

                    }

                    pbDocument.SuspendLayout();
                    //if (pbDocument.Maximum - 20 > 0)
                    //{
                    //    pbDocument.Maximum = pbDocument.Maximum - 20;
                    //}
                    //else
                    //{
                    pbDocument.Maximum = pbDocument.Maximum;
                    //  }

                    pbDocument.ResumeLayout(false);
                    pbDocument.PerformLayout();

                }
                catch (PDFNetException ex)
                {
                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + ex.ToString();
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                    _MessageString = "";
                    System.Windows.Forms.MessageBox.Show(ex.ToString());
                    //  _returnResult = "";
                }
                finally
                {
                    if (doc != null)
                    {
                        doc.Dispose();
                        doc = null;
                    }
                    if (oElementBuilder != null)
                    {
                        oElementBuilder.Dispose();
                        oElementBuilder = null;
                    }
                    if (oElementBuilder != null)
                    {
                        oElementWriter.Dispose();
                        oElementWriter = null;
                    }
                    if (oRect != null)
                    {
                        oRect = null;
                    }
                    if (page != null)
                    {
                        page = null;
                    }
                    if (Directory.Exists(_tempProcessPath) == true)
                    {
                        Directory.Delete(_tempProcessPath, true);
                        if (Directory.Exists(_tempProcessPath) == true)
                        {
                            _ErrorMessage = "Unable to delete the folder. " + _tempProcessPath;
                            ErrorMessagees(_ErrorMessage);
                        }
                    }
                }
                DestContainerID = _ContainerID;
                DestDocumentID = _DocumentID;
                return _result;
            }
            public bool ImportImages(long PatientID, System.Collections.ArrayList oImageDocuments, string DestDocumentName, Int64 DestCategoryID, string DestCategory, string DestYear, string DestMonth, long ClinicID, out long DestContainerID, out long DestDocumentID, bool PerformCompression, bool appservices, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                using (System.Windows.Forms.ProgressBar pbDocument = new System.Windows.Forms.ProgressBar())
                {
                    _isgloServices = appservices;
                    pbDocument.Value = 0;
                    return ImportImages(PatientID, oImageDocuments, DestDocumentName, DestCategoryID, DestCategory, "", DestYear, DestMonth, ClinicID, out DestContainerID, out  DestDocumentID, PerformCompression, pbDocument, _OpenExternalSource);
                }

            }
            #endregion"Dhruv 20100621 -> ImportImages"


            #endregion



            #region"Dhruv  -> GetXWidthYHeight"
            //private bool GetXWidthYHeight_Old(float HorRes, float VerRes, float pxHeight, float pxWidth, out int XWidth, out int YHeight)
            //{
            //    bool _result = false;
            //    float _XWidth = 0;
            //    float _YHeight = 0;
            //    try
            //    {
            //        float _ResDactor = 0;
            //        bool _XMajor = false;
            //        string _Orientation = "S"; // P-Potrait, L-Landscape, S-Same
            //        float _XInch = 0;
            //        float _YInch = 0;

            //        //Factor + Major X or Y
            //        if (HorRes > VerRes) { _ResDactor = HorRes / VerRes; _XMajor = true; }
            //        else if (HorRes < VerRes) { _ResDactor = VerRes / HorRes; _XMajor = false; }
            //        else if (HorRes == VerRes) { _ResDactor = 1; }

            //        //Height & Width in Inches
            //        _XInch = pxHeight / HorRes;
            //        _YInch = pxWidth / VerRes;

            //        //Page Orientation
            //        if (_XInch > _YInch) { _Orientation = "L"; }
            //        else if (_XInch < _YInch) { _Orientation = "P"; }

            //        //Calculate Return Height and Width in Pixcel
            //        if (_XMajor == true)
            //        {
            //            _XWidth = pxWidth;
            //            _YHeight = pxHeight * _ResDactor;
            //        }
            //        else
            //        {
            //            _XWidth = pxWidth * _ResDactor;
            //            _YHeight = pxHeight;
            //        }

            //        _result = true;
            //    }
            //    catch (Exception ex)
            //    {
            //        #region " Make Log Entry "

            //        _ErrorMessage = ex.ToString();
            //        //Code added on 7rd October 2008 By - Sagar Ghodke
            //        //Make Log entry in DMSExceptionLog file for any exceptions found
            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        //End Code add
            //        #endregion " Make Log Entry "


            //    }
            //    finally
            //    {
            //    }

            //    XWidth = Convert.ToInt32(_XWidth);
            //    YHeight = Convert.ToInt32(_YHeight);
            //    return _result;
            //}
            private bool GetXWidthYHeight(float HorRes, float VerRes, float pxHeight, float pxWidth, out int  XWidth, out int  YHeight)
            {
                bool _result = false;
                float _XWidth = 0;
                float _YHeight = 0;
                try
                {

                    bool _XMajor = false;
                    //string _Orientation = "S"; // P-Potrait, L-Landscape, S-Same
                    float _XInch = 0;
                    float _YInch = 0;

                    //Factor + Major X or Y
                    //if (HorRes > VerRes) { _ResDactor = HorRes / VerRes; _XMajor = true; }
                    //else if (HorRes < VerRes) { _ResDactor = VerRes / HorRes; _XMajor = false; }
                    //else if (HorRes == VerRes) { _ResDactor = 1; }

                    //Height & Width in Inches
                    if (HorRes != 0) _XInch = pxHeight / HorRes;


                    if (VerRes != 0) _YInch = pxWidth / VerRes;

                    //Page Orientation
                    if (_XInch > _YInch)
                    { //_Orientation = "L";
                        _XMajor = false;
                    }
                    else if (_XInch < _YInch)
                    { //_Orientation = "P";
                        _XMajor = true;
                    }



                    //Calculate Return Height and Width in Pixcel
                    if (_XMajor == true)
                    {
                        _XWidth = pxWidth;
                        if (VerRes != 0) _YHeight = pxHeight * HorRes / VerRes;
                        else _YHeight = pxHeight;
                    }
                    else
                    {
                        _YHeight = pxHeight;
                        if (HorRes != 0) _XWidth = pxWidth * VerRes / HorRes;
                        else _XWidth = pxWidth;

                    }

                    _result = true;
                }
                catch (Exception ex)
                {
                    #region " Make Log Entry "

                    _ErrorMessage = ex.ToString();
                    //Code added on 7rd October 2008 By - Sagar Ghodke
                    //Make Log entry in DMSExceptionLog file for any exceptions found
                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    //End Code add
                    #endregion " Make Log Entry "


                }


                XWidth = System.Convert.ToInt32(_XWidth);
                YHeight = System.Convert.ToInt32(_YHeight);
                return _result;
            }
            #endregion"Dhruv  -> GetXWidthYHeight"



            #region "Dhruv 2010 -> UpdateContainer"
            //public bool UpdateContainer_Old(Int64 edocumentid, Int64 econtainerid, string filepath, bool isstream)
            //{
            //    SqlConnection _connection = null;
            //    SqlTransaction _transaction = null;
            //    SqlCommand _sqlcommand = null;
            //    SqlParameter _sqlParameter = null;

            //    bool _result = false;
            //    int _sqlresult = 0;

            //    try
            //    {
            //        if (File.Exists(filepath) == true)
            //        {
            //            _connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //            _connection.Open();
            //            try
            //            {
            //                _transaction = _connection.BeginTransaction();
            //                #region "Database Operations"
            //                #region "Insert File in to Database"
            //                string _ChunkFilePath = "";

            //                _ChunkFilePath = filepath;

            //                if (System.IO.File.Exists(_ChunkFilePath))
            //                {
            //                    System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
            //                    System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                    using (BinaryReader br = new BinaryReader(oFileStream))
            //                    {
            //                        byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                        Int64 offset = 0;

            //                        _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
            //                        _sqlcommand.CommandType = CommandType.StoredProcedure;
            //                        _sqlcommand.CommandTimeout = 0;
            //                        _sqlcommand.Transaction = _transaction;

            //                        while (buffer.Length > 0)
            //                        {
            //                            _sqlcommand.Parameters.Clear();
            //                            _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = edocumentid;
            //                            _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = econtainerid;
            //                            _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                            _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                            //_sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize; //dhruv 20100628

            //                            _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value =buffer.Length;
            //                            _sqlcommand.ExecuteNonQuery();

            //                            offset = offset + gloEDocV3Admin.gBufferSize;
            //                            //buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);//dhruv 20100628
            //                            buffer = br.ReadBytes(buffer.Length);
            //                        }
            //                    }
            //                    if (oFileStream != null) 
            //                    {
            //                        oFileStream.Close();
            //                        oFileStream.Dispose();
            //                        oFileStream = null;
            //                    }
            //                }

            //                #endregion "Insert File in to Database"
            //                #endregion
            //                _transaction.Commit();
            //            }
            //            catch (Exception ex)
            //            {
            //                _transaction.Rollback();
            //                //_HasError = true;
            //                //_ErrorMessage = ex.Message;
            //            }
            //            finally
            //            {
            //                if (_connection.State == ConnectionState.Open) { _connection.Close(); }
            //                if (_connection != null)
            //                {
            //                    _connection.Dispose();
            //                    _connection = null;
            //                }
            //            }
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        //_HasError = true;
            //        //_ErrorMessage = ex.Message;

            //        #region " Log Exception "

            //        if (_ErrorMessage.Trim() != "")
            //        {
            //            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //            _MessageString = "";
            //        }

            //        #endregion
            //    }
            //    finally
            //    {
            //        _sqlParameter = null;
            //        if (_sqlcommand != null) 
            //        {
            //            _sqlcommand.Dispose();
            //            _sqlcommand = null;
            //        }
            //        if (_transaction != null)
            //        {
            //            _transaction.Dispose();
            //            _transaction = null;
            //        }
            //        if (_connection != null) 
            //        {
            //            _connection.Dispose();
            //            _connection = null;
            //        }
            //    }
            //    return _result;
            //}
            public bool UpdateContainer(Int64 edocumentid, Int64 econtainerid, string filepath, bool isstream, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                //  SqlParameter _sqlParameter = null;

                bool _result = false;
                //   int _sqlresult = 0;

                try
                {
                    if (File.Exists(filepath) == true)
                    {
                        using (_connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString))
                            if (_connection != null)
                            {
                                _connection.Open();
                                try
                                {
                                    _transaction = _connection.BeginTransaction();
                                    #region "Database Operations"
                                    Cls_SQLFileStream.SaveFile(econtainerid, edocumentid, filepath, _transaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);
                                    //#region "Insert File in to Database"
                                    //string _ChunkFilePath = "";

                                    //_ChunkFilePath = filepath;

                                    //if (System.IO.File.Exists(_ChunkFilePath))
                                    //{
                                    //    System.IO.FileInfo oFiledata = new System.IO.FileInfo(_ChunkFilePath);
                                    //    System.IO.FileStream oFileStream = oFiledata.OpenRead();
                                    //    using (BinaryReader br = new BinaryReader(oFileStream))
                                    //    {
                                    //        byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
                                    //        Int64 offset = 0;

                                    //        _sqlcommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _connection);
                                    //        _sqlcommand.CommandType = CommandType.StoredProcedure;
                                    //        _sqlcommand.CommandTimeout = 0;
                                    //        _sqlcommand.Transaction = _transaction;

                                    //        while (buffer.Length > 0)
                                    //        {
                                    //            _sqlcommand.Parameters.Clear();
                                    //            _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = edocumentid;
                                    //            _sqlcommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = econtainerid;
                                    //            _sqlcommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
                                    //            _sqlcommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
                                    //            //_sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize; //dhruv 20100628
                                    //            _sqlcommand.Parameters.Add("@length", SqlDbType.Int).Value = buffer.Length;
                                    //            _sqlcommand.ExecuteNonQuery();

                                    //            //offset = offset + gloEDocV3Admin.gBufferSize;
                                    //            offset = offset + buffer.Length;
                                    //            buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);//dhruv 20100628
                                    //            //buffer = br.ReadBytes(buffer.Length);
                                    //        }
                                    //        br.Close();
                                    //    }

                                    //    if (oFileStream != null)
                                    //    {
                                    //        oFileStream.Close();
                                    //        oFileStream.Dispose();
                                    //        oFileStream = null;
                                    //    }
                                    //}

                                    //#endregion "Insert File in to Database"
                                    #endregion
                                    _transaction.Commit();
                                }
                                catch (Exception ex)
                                {
                                    _transaction.Rollback();
                                    _ErrorMessage = ex.ToString();

                                    //_HasError = true;
                                    //_ErrorMessage = ex.Message;
                                }
                                finally
                                {
                                    if (_connection != null)
                                    {
                                        if (_connection.State == ConnectionState.Open)
                                        {
                                            _connection.Close();
                                        }
                                        if (_connection != null)
                                        {
                                            _connection.Dispose();
                                            _connection = null;
                                        }
                                    }
                                }
                            }
                    }
                }
                catch (Exception ex)
                {
                    //_HasError = true;
                    //_ErrorMessage = ex.Message;
                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                    #region " Log Exception "

                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    #endregion
                }
                finally
                {
                    //_sqlParameter = null;
                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }
                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (_connection != null)
                    {
                        _connection.Dispose();
                        _connection = null;
                    }
                }
                return _result;
            }
            #endregion "Dhruv 2010 -> UpdateContainer"


            #region "Dhruv 2010 -> Delete"
            //public bool Delete_Old(DocumentContextMenu.eContextDocuments oSelectedDocuments)
            //{
            //    #region  " Variable Declarations "
            //    pdftron.PDF.PDFDoc FileContainer = null;
            //    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
            //    DataTable dt = new DataTable();
            //    bool _Result = false;
            //    string _sqlQuery = "";
            //    Int64 DocumentID = 0;
            //    Int64 ContainerID = 0;

            //    string _FilePath = "";
            //    string _FileOutputPath = "";
            //    string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();
            //    int _PageFrom = 0;
            //    int _PageTo = 0;
            //    #endregion



            //    try
            //    {
            //        if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
            //            oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
            //        {
            //            for (int i = 0; i <= oSelectedDocuments.Count - 1; i++)
            //            {
            //                DocumentID = oSelectedDocuments[i].DocumentID;
            //                ContainerID = oSelectedDocuments[i].Containers[0].ContainerID;
            //                bool _DeleteFile = false;
            //                _PageFrom = 1;
            //                _PageTo = 0;

            //                #region "Decide whether delete file or pages"
            //                if (oSelectedDocuments[i].Containers[0].Pages.Count == oSelectedDocuments[i].PageCount)
            //                {
            //                    _DeleteFile = true;
            //                }
            //                #endregion

            //                if (_DeleteFile == false)
            //                {
            //                    #region "Generate PDF Doc Object"
            //                    if (System.IO.Directory.Exists(_FolderPath) == true)
            //                    {
            //                        System.IO.Directory.Delete(_FolderPath, true);
            //                    }
            //                    System.IO.Directory.CreateDirectory(_FolderPath);
            //                    _FilePath = _FolderPath + "\\" + DocumentID.ToString() + "~" + ContainerID.ToString() + ".pdf";
            //                    _FileOutputPath = _FolderPath + "\\" + DocumentID.ToString() + "~" + ContainerID.ToString() + "Out.pdf";

            //                    gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
            //                    oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, _FilePath);
            //                    oList.Dispose();

            //                    FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
            //                    #endregion

            //                    #region "Delete Pages from Physical File"
            //                    pdftron.PDF.PageIterator pageIterator;

            //                    if (oSelectedDocuments[i].Containers[0].Pages.Count > 0)
            //                    {
            //                        for (int p = oSelectedDocuments[i].Containers[0].Pages.Count - 1; p >= 0; p--)
            //                        {
            //                            int _PageIndex = 0;
            //                            _PageIndex = oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber;
            //                            pageIterator = FileContainer.GetPageIterator(_PageIndex);
            //                            if (pageIterator != null)
            //                            { FileContainer.PageRemove(pageIterator); }
            //                            pageIterator = null;
            //                        }
            //                        FileContainer.Save(_FileOutputPath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
            //                        _PageTo = FileContainer.GetPageCount();
            //                        if (FileContainer != null) { FileContainer.Close(); FileContainer.Dispose(); FileContainer = null; }
            //                    }
            //                    #endregion
            //                    _Result = true;
            //                }
            //                else
            //                {
            //                    _Result = true;
            //                }


            //                if (_Result == true)
            //                {
            //                    _Result = false;

            //                    #region " Update Database Details "

            //                    SqlConnection _sqlConnnetion = null;
            //                    SqlTransaction _sqlTransaction = null;
            //                    SqlParameter _sqlParameter = null;
            //                    SqlCommand _sqlCommand = null;

            //                    try
            //                    {
            //                        _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //                        _sqlConnnetion.Open();

            //                        _sqlTransaction = _sqlConnnetion.BeginTransaction();

            //                        #region " Update Container Details "
            //                        if (_DeleteFile == false)
            //                        {
            //                            _sqlQuery = "";
            //                            _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = " + _PageTo + " " +
            //                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();

            //                            #region "Insert File by Chunk"
            //                            if (System.IO.File.Exists(_FileOutputPath) == true)
            //                            {
            //                                System.IO.FileInfo oFiledata = new System.IO.FileInfo(_FileOutputPath);
            //                                System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                                using (BinaryReader br = new BinaryReader(oFileStream))
            //                                {
            //                                    byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                    Int64 offset = 0;

            //                                    _sqlCommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _sqlConnnetion);
            //                                    _sqlCommand.CommandType = CommandType.StoredProcedure;
            //                                    _sqlCommand.CommandTimeout = 0;
            //                                    _sqlCommand.Transaction = _sqlTransaction;

            //                                    while (buffer.Length > 0)
            //                                    {
            //                                        _sqlCommand.Parameters.Clear();
            //                                        _sqlCommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = DocumentID;
            //                                        _sqlCommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = ContainerID;
            //                                        _sqlCommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                                        _sqlCommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                                       // _sqlCommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;
            //                                        _sqlCommand.Parameters.Add("@length", SqlDbType.Int).Value =buffer.Length;
            //                                        _sqlCommand.ExecuteNonQuery();

            //                                        offset = offset + gloEDocV3Admin.gBufferSize;
            //                                        //buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                                        buffer = br.ReadBytes(buffer.Length);
            //                                    }
            //                                }
            //                                if (oFileStream != null) { oFileStream.Close(); oFileStream.Dispose(); }
            //                                if (oFiledata != null) { oFiledata = null; }
            //                            }
            //                            #endregion
            //                        }
            //                        #endregion

            //                        #region " Update Document Details "
            //                        if (_DeleteFile == false)
            //                        {
            //                            _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = " + _PageTo + " , ModifiedDateTime = dbo.gloGetDate() " +
            //                                                        " WHERE PatientID = " + oSelectedDocuments[i].PatientID + " AND eDocumentID = " + DocumentID + " " +
            //                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                        }
            //                        else
            //                        {
            //                            _sqlQuery = " DELETE FROM eDocument_Details_V3 WITH(ROWLOCK) WHERE PatientID = " + oSelectedDocuments[i].PatientID + " " +
            //                                " AND eDocumentID = " + DocumentID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                            //To delete the data from the Container table
            //                            _sqlQuery = _sqlQuery + "; DELETE FROM eDocument_Container_V3 WITH(READPAST) WHERE eDocumentID = " + DocumentID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";


            //                        }

            //                        _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                        _sqlCommand.ExecuteNonQuery();

            //                        #endregion

            //                        #region " Update Page Details "
            //                        if (_DeleteFile == true)
            //                        {
            //                            //Pages
            //                            _sqlQuery = "DELETE FROM eDocument_Pages_V3 WITH(READPAST) WHERE " +
            //                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();

            //                            //Note, Acknowledge, User Tag
            //                            _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
            //                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();
            //                        }
            //                        else
            //                        {
            //                            for (int p = oSelectedDocuments[i].Containers[0].Pages.Count - 1; p >= 0; p--)
            //                            {
            //                                //Pages Detail
            //                                //Delete
            //                                _sqlQuery = "DELETE FROM eDocument_Pages_V3 WITH(READPAST) WHERE " +
            //                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
            //                                "ContainerPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
            //                                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                                _sqlCommand.ExecuteNonQuery();
            //                                //Update
            //                                _sqlQuery = "";
            //                                string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber.ToString();
            //                                _sqlQuery = "UPDATE eDocument_Pages_V3 WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
            //                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
            //                                "ContainerPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";

            //                                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                                _sqlCommand.ExecuteNonQuery();

            //                                //Note, Acknowledge, User Tag
            //                                //Delete
            //                                _sqlQuery = "";
            //                                _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
            //                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
            //                                "ContainerPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";

            //                                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                                _sqlCommand.ExecuteNonQuery();
            //                                //Update
            //                                _sqlQuery = "";
            //                                _sqlQuery = "UPDATE eDocument_NTAO_V3 WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
            //                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
            //                                "ContainerPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";

            //                                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                                _sqlCommand.ExecuteNonQuery();
            //                            }

            //                            #region "Update Note Flag"

            //                            int _NoteFlag = 0;
            //                            Object _res = 0;

            //                            _sqlQuery = "select count(*) from eDocument_NTAO_V3 WITH(NOLOCK) where eDocumentID = " + DocumentID + " and ClinicID = " + gloEDocV3Admin.gClinicID + " and NTAOType = " + enum_NTAOType.Notes.GetHashCode() + "";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _res = _sqlCommand.ExecuteScalar();
            //                            if (Convert.ToInt16(_res) > 0)
            //                            { _NoteFlag = 1; }


            //                            _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = " + _NoteFlag + " " +
            //                                                       " WHERE PatientID = " + oSelectedDocuments[i].PatientID + " AND eDocumentID = " + DocumentID + " " +
            //                                                       " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();
            //                            #endregion

            //                        }
            //                        #endregion
            //                        //Sandip Darade 20090807
            //                         #region "Update DocumentID in Orders,Lab,Task Table "

            //                         //Update  DocumentID in Lab master table 
            //                            _sqlQuery = " UPDATE  Lab_Order_MST WITH(ROWLOCK) SET labom_DMSID= 0 WHERE  labom_DMSID= "+  oSelectedDocuments[i].DocumentID  +" ";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();

            //                        //Update  DocumentID in Lab detail Table
            //                            _sqlQuery = " UPDATE  Lab_Order_TestDtl WITH(ROWLOCK) SET labotd_DMSID= 0 WHERE  labotd_DMSID= " + oSelectedDocuments[i].DocumentID + " ";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();


            //                        //Update  DocumentID in order Table
            //                         _sqlQuery = "UPDATE  LM_Orders WITH(ROWLOCK) SET lm_DMSID='' WHERE  lm_DMSID='" +  Convert.ToString(oSelectedDocuments[i].DocumentID)  + "'";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();

            //                        //Update  DocumentID in task  Table for receiverd faxes
            //                            _sqlQuery = " UPDATE TM_TaskMST WITH(ROWLOCK) SET nReferenceID2 = 0 WHERE nReferenceID2 = " + oSelectedDocuments[i].DocumentID + " ";
            //                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                            _sqlCommand.ExecuteNonQuery();                              
            //                        #endregion
            //                        _sqlTransaction.Commit();

            //                    }
            //                    catch (Exception ex)
            //                    {
            //                        _sqlTransaction.Rollback();
            //                    }
            //                    finally
            //                    {
            //                        if (_sqlParameter != null) { _sqlParameter = null; }
            //                        if (_sqlCommand != null) { _sqlCommand.Dispose(); }
            //                        if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
            //                        if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

            //                        #region " Delete Temporary Files "

            //                        try
            //                        {
            //                            if (File.Exists(_FileOutputPath)) { File.Delete(_FileOutputPath); }
            //                            if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
            //                        }
            //                        catch (Exception ex)
            //                        { }

            //                        #endregion
            //                    }

            //                    #endregion " Update Database Details "
            //                }


            //                if (FileContainer != null) { FileContainer.Dispose(); }
            //            }

            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //    }
            //    finally
            //    {

            //    }
            //    return _Result;
            //}

            //Sanjog - Added On 2011 Aug 9 to get page count of Document to bind this value to C1document grid
            public Int32 GetPageCount(Int64 DocID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                SqlConnection oSqlConnection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                SqlCommand oCmd = null;
                try
                {
                    string strQuerry = "";

                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                    {
                        strQuerry = "SELECT PageCounts from eDocument_Details_V3_RCM WHERE eDocumentID=" + DocID + " ";
                    }
                    else
                    {
                        strQuerry = "SELECT PageCounts from eDocument_Details_V3 WHERE eDocumentID=" + DocID + " ";
                    }

                    oCmd = new SqlCommand(strQuerry, oSqlConnection);
                    oSqlConnection.Open();
                    Int32 cnt = System.Convert.ToInt32(oCmd.ExecuteScalar().ToString());
                    oSqlConnection.Close();
                    return cnt;
                }
                catch //(Exception exe)
                {
                    return 0;
                }
                finally
                {
                    if (oSqlConnection.State == ConnectionState.Open)
                    {
                        oSqlConnection.Close();
                    }
                    if (oCmd != null)
                    {
                        oCmd.Parameters.Clear();
                        oCmd.Dispose();
                        oCmd = null;
                    }
                    if (oSqlConnection != null)
                    {
                        oSqlConnection.Dispose();
                        oSqlConnection = null;
                    }
                }
            }
            //Sanjog - Added On 2011 Aug 9 to get page count of Document to bind this value to C1document grid

            public bool Delete(DocumentContextMenu.eContextDocuments oSelectedDocuments, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                #region  " Variable Declarations "
                pdftron.PDF.PDFDoc FileContainer = null;
                //    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                //   Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                // DataTable dt = new DataTable();
                bool _Result = false;
                string _sqlQuery = "";
                Int64 DocumentID = 0;
                Int64 ContainerID = 0;

                string _FilePath = "";
                string _FileOutputPath = "";
                string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();
                // int _PageFrom = 0;
                int _PageTo = 0;
                #endregion



                try
                {
                    if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
                        oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
                    {
                        for (int i = 0; i <= oSelectedDocuments.Count - 1; i++)
                        {
                            DocumentID = oSelectedDocuments[i].DocumentID;
                            ContainerID = oSelectedDocuments[i].Containers[0].ContainerID;
                            bool _DeleteFile = false;
                            //  _PageFrom = 1;
                            _PageTo = 0;

                            #region "Decide whether delete file or pages"
                            if (oSelectedDocuments[i].Containers[0].Pages.Count == oSelectedDocuments[i].PageCount)
                            {
                                _DeleteFile = true;
                            }
                            #endregion

                            if (_DeleteFile == false)
                            {
                                #region "Generate PDF Doc Object"
                                if (System.IO.Directory.Exists(_FolderPath) == true)
                                {
                                    System.IO.Directory.Delete(_FolderPath, true);
                                }
                                System.IO.Directory.CreateDirectory(_FolderPath);
                                _FilePath = _FolderPath + "\\" + DocumentID.ToString() + "~" + ContainerID.ToString() + ".pdf";
                                _FileOutputPath = _FolderPath + "\\" + DocumentID.ToString() + "~" + ContainerID.ToString() + "Out.pdf";

                                gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                                oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, ref  _FilePath, _OpenExternalSource);
                                if (oList != null)
                                {
                                    oList.Dispose();
                                    oList = null;
                                }

                                #endregion
                                FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
                                if (FileContainer != null)
                                {
                                    #region "Delete Pages from Physical File"

                                    if (oSelectedDocuments != null)
                                    {
                                        if (oSelectedDocuments[i].Containers[0].Pages.Count > 0)
                                        {
                                            for (int p = oSelectedDocuments[i].Containers[0].Pages.Count - 1; p >= 0; p--)
                                            {
                                                int _PageIndex = 0;
                                                _PageIndex = oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber;
                                                pdftron.PDF.PageIterator pageIterator = FileContainer.GetPageIterator(_PageIndex);
                                                if (pageIterator != null)
                                                {
                                                    FileContainer.PageRemove(pageIterator);
                                                }
                                                if (pageIterator != null)
                                                {
                                                    pageIterator = null;
                                                }
                                            }
                                            FileContainer.Save(_FileOutputPath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                                            _PageTo = FileContainer.GetPageCount();

                                        }

                                    }
                                    if (FileContainer != null)
                                    {
                                        FileContainer.Close();
                                        FileContainer.Dispose();
                                        FileContainer = null;
                                    }
                                    #endregion
                                }
                                _Result = true;
                            }
                            else
                            {
                                _Result = true;
                            }


                            if (_Result == true)
                            {
                                _Result = false;

                                #region " Update Database Details "

                                SqlConnection _sqlConnnetion = null;
                                SqlTransaction _sqlTransaction = null;
                                SqlParameter _sqlParameter = null;
                                SqlCommand _sqlCommand = null;

                                SqlConnection _sqlDMSConnnetion = null;
                                SqlTransaction _sqlDMSTransaction = null;
                                SqlParameter _sqlDMSParameter = null;
                                SqlCommand _sqlDMSCommand = null;


                                try
                                {
                                    _sqlDMSConnnetion = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                                    if (_sqlDMSConnnetion != null)
                                    {
                                        _sqlDMSConnnetion.Open();

                                        _sqlDMSTransaction = _sqlDMSConnnetion.BeginTransaction();

                                        #region " Update Container Details "
                                        if (_DeleteFile == false)
                                        {
                                            _sqlQuery = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = " UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET  DocumentPageTo = " + _PageTo + " " +
                                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                            }
                                            else
                                            {
                                                _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = " + _PageTo + " " +
                                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                            }

                                            _sqlDMSCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);

                                            if (_sqlDMSCommand != null)
                                            {
                                                _sqlDMSCommand.ExecuteNonQuery();
                                                _sqlDMSCommand.Parameters.Clear();
                                                _sqlDMSCommand.Dispose();
                                                _sqlDMSCommand = null;
                                            }

                                            Cls_SQLFileStream.SaveFile(ContainerID, DocumentID, _FileOutputPath, _sqlDMSTransaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);

                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                        }
                                        #endregion

                                        #region " Update Document Details "
                                        if (_DeleteFile == false)
                                        {
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = " UPDATE eDocument_Details_V3_RCM  WITH(ROWLOCK) SET PageCounts = " + _PageTo + " , ModifiedDateTime = dbo.gloGetDate() " +
                                                                        " WHERE PatientID = " + oSelectedDocuments[i].PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                            else
                                            {
                                                _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = " + _PageTo + " , ModifiedDateTime = dbo.gloGetDate() " +
                                                                        " WHERE PatientID = " + oSelectedDocuments[i].PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                        }
                                        else
                                        {
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = " DELETE FROM eDocument_Details_V3_RCM WITH(ROWLOCK) WHERE PatientID = " + oSelectedDocuments[i].PatientID + " " +
                                                " AND eDocumentID = " + DocumentID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                                //To delete the data from the Container table
                                                _sqlQuery = _sqlQuery + "; DELETE FROM eDocument_Container_V3_RCM WITH(READPAST) WHERE eDocumentID = " + DocumentID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                            else
                                            {
                                                _sqlQuery = " DELETE FROM eDocument_Details_V3 WITH(ROWLOCK) WHERE PatientID = " + oSelectedDocuments[i].PatientID + " " +
                                                " AND eDocumentID = " + DocumentID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                                //To delete the data from the Container table
                                                _sqlQuery = _sqlQuery + "; DELETE FROM eDocument_Container_V3 WITH(READPAST) WHERE eDocumentID = " + DocumentID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }

                                        }

                                        _sqlDMSCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                        _sqlDMSCommand.ExecuteNonQuery();
                                        if (_sqlDMSCommand != null)
                                        {
                                            _sqlDMSCommand.Parameters.Clear();
                                            _sqlDMSCommand.Dispose();
                                            _sqlDMSCommand = null;
                                        }

                                        #endregion

                                        #region " Update Page Details "
                                        if (_DeleteFile == true)
                                        {
                                            //Pages
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = "DELETE FROM eDocument_Pages_V3_RCM WITH(READPAST) WHERE " +
                                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                            else
                                            {
                                                _sqlQuery = "DELETE FROM eDocument_Pages_V3 WITH(READPAST) WHERE " +
                                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }

                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }

                                            //Note, Acknowledge, User Tag
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = "DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE " +
                                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                            else
                                            {
                                                _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
                                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }

                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                        }
                                        else
                                        {
                                            for (int p = oSelectedDocuments[i].Containers[0].Pages.Count - 1; p >= 0; p--)
                                            {
                                                //Pages Detail
                                                //Delete
                                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                {
                                                    _sqlQuery = "DELETE FROM eDocument_Pages_V3_RCM WITH(READPAST) WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }
                                                else
                                                {
                                                    _sqlQuery = "DELETE FROM eDocument_Pages_V3 WITH(READPAST) WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }

                                                _sqlDMSCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                                _sqlDMSCommand.ExecuteNonQuery();
                                                if (_sqlDMSCommand != null)
                                                {
                                                    _sqlDMSCommand.Parameters.Clear();
                                                    _sqlDMSCommand.Dispose();
                                                    _sqlDMSCommand = null;
                                                }

                                                //Update
                                                _sqlQuery = "";
                                                string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber.ToString();

                                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                {
                                                    _sqlQuery = "UPDATE eDocument_Pages_V3_RCM WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }
                                                else
                                                {
                                                    _sqlQuery = "UPDATE eDocument_Pages_V3 WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }

                                                _sqlDMSCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                                _sqlDMSCommand.ExecuteNonQuery();

                                                if (_sqlDMSCommand != null)
                                                {
                                                    _sqlDMSCommand.Parameters.Clear();
                                                    _sqlDMSCommand.Dispose();
                                                    _sqlDMSCommand = null;
                                                }
                                                //Note, Acknowledge, User Tag
                                                //Delete
                                                _sqlQuery = "";

                                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                {
                                                    _sqlQuery = "DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }
                                                else
                                                {
                                                    _sqlQuery = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber = " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }

                                                _sqlDMSCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                                _sqlDMSCommand.ExecuteNonQuery();
                                                if (_sqlDMSCommand != null)
                                                {
                                                    _sqlDMSCommand.Parameters.Clear();
                                                    _sqlDMSCommand.Dispose();
                                                    _sqlDMSCommand = null;
                                                }
                                                //Update
                                                _sqlQuery = "";

                                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                {
                                                    _sqlQuery = "UPDATE eDocument_NTAO_V3_RCM WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }
                                                else
                                                {
                                                    _sqlQuery = "UPDATE eDocument_NTAO_V3 WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                                "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                                "ContainerPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].ContainerPageNumber + " AND DocumentPageNumber > " + oSelectedDocuments[i].Containers[0].Pages[p].DocumentPageNumber + "";
                                                }

                                                _sqlDMSCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                                _sqlDMSCommand.ExecuteNonQuery();
                                                if (_sqlDMSCommand != null)
                                                {
                                                    _sqlDMSCommand.Parameters.Clear();
                                                    _sqlDMSCommand.Dispose();
                                                    _sqlDMSCommand = null;
                                                }
                                            }

                                            #region "Update Note Flag"

                                            int _NoteFlag = 0;
                                            Object _res = 0;

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = "select count(*) from eDocument_NTAO_V3_RCM WITH(NOLOCK) where eDocumentID = " + DocumentID + " and ClinicID = " + gloEDocV3Admin.gClinicID + " and NTAOType = " + enum_NTAOType.Notes.GetHashCode() + "";
                                            }
                                            else
                                            {
                                                _sqlQuery = "select count(*) from eDocument_NTAO_V3 WITH(NOLOCK) where eDocumentID = " + DocumentID + " and ClinicID = " + gloEDocV3Admin.gClinicID + " and NTAOType = " + enum_NTAOType.Notes.GetHashCode() + "";
                                            }

                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                            _res = _sqlCommand.ExecuteScalar();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                            if (System.Convert.ToInt16(_res) > 0)
                                            { _NoteFlag = 1; }

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _sqlQuery = " UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET HasNote = " + _NoteFlag + " " +
                                                                       " WHERE PatientID = " + oSelectedDocuments[i].PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                                       " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                            else
                                            {
                                                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET HasNote = " + _NoteFlag + " " +
                                                                       " WHERE PatientID = " + oSelectedDocuments[i].PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                                       " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }

                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlDMSConnnetion, _sqlDMSTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                            #endregion

                                        }
                                        #endregion
                                    }
                                    //Sandip Darade 20090807
                                    #region "Update DocumentID in Orders,Lab,Task Table "

                                    // Added by Rahul Patel on 26-10-2010
                                    try
                                    {
                                        _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                                        if (_sqlConnnetion != null)
                                        {
                                            _sqlConnnetion.Open();

                                            _sqlTransaction = _sqlConnnetion.BeginTransaction();
                                            //Update  DocumentID in Lab master table 
                                            _sqlQuery = " UPDATE  Lab_Order_MST WITH(ROWLOCK) SET labom_DMSID= 0 WHERE  labom_DMSID= " + oSelectedDocuments[i].DocumentID + " ";
                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }

                                            Del_Up_LabDMS_Documents(oSelectedDocuments[i].DocumentID);

                                            ////Update  DocumentID in Lab detail Table
                                            //_sqlQuery = " UPDATE  Lab_Order_TestDtl WITH(ROWLOCK) SET labotd_DMSID= 0 WHERE  labotd_DMSID= " + oSelectedDocuments[i].DocumentID + " ";
                                            //_sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                            //_sqlCommand.ExecuteNonQuery();

                                            //if (_sqlCommand != null)
                                            //{
                                            //    _sqlCommand.Dispose();
                                            //    _sqlCommand = null;
                                            //}

                                            //Update  DocumentID in order Table
                                            _sqlQuery = "UPDATE  LM_Orders WITH(ROWLOCK) SET lm_DMSID='' WHERE  lm_DMSID='" + System.Convert.ToString(oSelectedDocuments[i].DocumentID) + "'";
                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                            //Update  DocumentID in task  Table for receiverd faxes
                                            _sqlQuery = " UPDATE TM_TaskMST WITH(ROWLOCK) SET nReferenceID2 = 0 WHERE nReferenceID2 = " + oSelectedDocuments[i].DocumentID + " ";
                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                            //Update  DocumentID in Table CV_ElectroCardioGrams
                                            _sqlQuery = " UPDATE CV_ElectroCardioGrams SET nDMSDocumentID = 0 WHERE nDMSDocumentID = " + oSelectedDocuments[i].DocumentID + " ";
                                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                            _sqlCommand.ExecuteNonQuery();
                                            if (_sqlCommand != null)
                                            {
                                                _sqlCommand.Parameters.Clear();
                                                _sqlCommand.Dispose();
                                                _sqlCommand = null;
                                            }
                                    #endregion
                                        }
                                        _sqlTransaction.Commit();
                                        _sqlDMSTransaction.Commit();
                                    }
                                    catch (Exception ex)
                                    {
                                        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                        _sqlTransaction.Rollback();
                                        _sqlDMSTransaction.Rollback();
                                    }
                                    finally
                                    {
                                        if (_sqlParameter != null)
                                        {
                                            _sqlParameter = null;
                                        }
                                        if (_sqlCommand != null)
                                        {
                                            _sqlCommand.Parameters.Clear();
                                            _sqlCommand.Dispose();
                                            _sqlCommand = null;
                                        }
                                        if (_sqlTransaction != null)
                                        {
                                            _sqlTransaction.Dispose();
                                            _sqlTransaction = null;
                                        }
                                        if (_sqlConnnetion != null)
                                        {
                                            _sqlConnnetion.Dispose();
                                            _sqlConnnetion = null;
                                        }

                                    }
                                }
                                catch (Exception ex)
                                {
                                    _sqlDMSTransaction.Rollback();
                                    _ErrorMessage = ex.ToString();
                                    ErrorMessagees(_ErrorMessage);
                                }
                                finally
                                {
                                    if (_sqlDMSParameter != null)
                                    {
                                        _sqlDMSParameter = null;
                                    }
                                    if (_sqlDMSCommand != null)
                                    {
                                        _sqlDMSCommand.Dispose();
                                        _sqlDMSCommand = null;
                                    }
                                    if (_sqlDMSTransaction != null)
                                    {
                                        _sqlDMSTransaction.Dispose();
                                        _sqlDMSTransaction = null;
                                    }
                                    if (_sqlDMSConnnetion != null)
                                    {
                                        _sqlDMSConnnetion.Dispose();
                                        _sqlDMSConnnetion = null;
                                    }

                                    #region " Delete Temporary Files "

                                    try
                                    {
                                        if (File.Exists(_FileOutputPath))
                                        {
                                            File.Delete(_FileOutputPath);
                                        }
                                        if (File.Exists(_FilePath) == true)
                                        {
                                            File.Delete(_FilePath);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        _ErrorMessage = ex.ToString();
                                        ErrorMessagees(_ErrorMessage);
                                    }

                                    #endregion
                                }

                                #endregion " Update Database Details "
                            }


                            if (FileContainer != null)
                            {
                                FileContainer.Dispose();
                                FileContainer = null;
                            }
                        }

                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                }

                return _Result;
            }
            #endregion "Dhruv 2010 -> Delete"

            private bool Del_Up_LabDMS_Documents(Int64 _DocumentID)
            {
                //SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                SqlConnection _connection = null;

                try
                {
                    _connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                    if (_connection != null)
                    {
                        _connection.Open();

                        // _transaction = _connection.BeginTransaction();

                        _sqlcommand = new SqlCommand();
                        if (_sqlcommand != null)
                        {
                            _sqlcommand.Connection = _connection;
                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                            //_sqlcommand.Transaction = _transaction;
                            _sqlcommand.CommandText = "Lab_DEL_Test_Attachment";
                            _sqlcommand.Parameters.Clear();


                            _sqlcommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = _DocumentID;

                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                            {
                                // _transaction.Rollback();
                                if (_sqlcommand != null)
                                {
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                }
                                return false;
                            }
                            if (_sqlcommand != null)
                            {
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }

                        }
                        _connection.Close();
                        _connection.Dispose();
                        _connection = null;
                    }
                    //_transaction.Commit();
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    return false;
                }
                return true;
            }



            private void ErrorMessagees(string _ErrorMessage)
            {
                #region " Make Log Entry "
                try
                {
                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }
                }
                catch (Exception ex)
                {
                    string _ErrorHere = ex.ToString();
                    //MessageBox.Show("Unable to update Log with " + _ErrorMessage, _ErrorHere);
                }

                //End Code add
                #endregion " Make Log Entry "

            }



            #region "Dhruv 2010 -> InsertTextBox (Commented)"
            //private Annot InsertTextBox(pdftron.PDF.PDFDoc oPDFDoc, string strnotes, double pHeight, double pWidth)
            //{
            //   // Field textbox = oPDFDoc.FieldCreate("text000", Field.Type.e_text, "my text1", "");
            //    Field textbox = oPDFDoc.FieldCreate("text000", Field.Type.e_text, strnotes, "");
            //    textbox.SetFlag(Field.Flag.e_multiline, true);
            //    double XTextPos1 = (pWidth / 2) - (pHeight / 4);
            //    double YTextPos1 = (pHeight) - 500;
            //     //element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
            //    //pdftron.PDF.Annots.Widget a = pdftron.PDF.Annots.Widget.Create(oPDFDoc, new Rect(64, 356, 120, 410), textbox); //Main setting
            //     pdftron.PDF.Annots.Widget a = pdftron.PDF.Annots.Widget.Create(oPDFDoc,new Rect(10, 10, XTextPos1, YTextPos1), textbox); //Main setting 
            //     return a;

            //}
            #endregion "Dhruv 2010 -> InsertTextBox"

            #region "Dhruv 2010 -> InsertSignInPDFDoc_old (Commented)"
            //public bool InsertSignInPDFDoc_old(Int64 PatientID, Int64 documentid, Int64 containerid, DocumentContextMenu.eContextDocuments oSelectedDocuments, out bool signaturefound,string strNotes)
            //    {
            //    #region  " Variable Declarations "

            //    pdftron.PDF.PDFDoc FileContainer = null;
            //    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
            //    DataTable dt = new DataTable();
            //    string _SignetureText = "";
            //    string _SignetureName = "";
            //    System.Drawing.Bitmap _ProviderSign = null;
            //    System.Drawing.PointF SignTextLocation = new System.Drawing.PointF();
            //    bool _Result = false;
            //    string _strSignFileName = "";
            //    string _sqlQuery = "";
            //    string _signedPDFFile = "";
            //    Int64 DocumentID = documentid;
            //    Int64 ContainerID = containerid;
            //    int _SignaturePageNumber = 0;
            //    string _SignaturePageName = "";
            //    bool _signaturefound = false;
            //    string sNotes = "";
            //    pdftron.PDF.Page page = null;
            //    #endregion

            //    try
            //    {
            //        #region "Generate PDF Doc Object"
            //        string _FilePath = "";
            //        string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

            //        if (System.IO.Directory.Exists(_FolderPath) == true)
            //        {
            //            System.IO.Directory.Delete(_FolderPath, true);
            //        }
            //        System.IO.Directory.CreateDirectory(_FolderPath);
            //        _FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

            //        gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
            //        oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, _FilePath);
            //        oList.Dispose();

            //        FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
            //        #endregion

            //        if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
            //            oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
            //        {
            //            DocumentID = oSelectedDocuments[0].DocumentID;
            //            ContainerID = oSelectedDocuments[0].Containers[0].ContainerID;
            //        }
            //        else
            //        { signaturefound = _signaturefound; return false; }

            //        #region "Retrive Binary Image"

            //        oDB.Connect(false);
            //        oParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
            //        oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);

            //        if (dt != null)
            //        {
            //            if (dt.Rows.Count > 0)
            //            {
            //                if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
            //                {
            //                    byte[] content = null;
            //                    content = (byte[])dt.Rows[0][0];
            //                    _strSignFileName = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";
            //                    MemoryStream oDataStream = new MemoryStream(content);
            //                    FileStream fileStream = new FileStream(_strSignFileName, FileMode.Create);
            //                    oDataStream.WriteTo(fileStream);
            //                    fileStream.Flush();
            //                    fileStream.Close();
            //                    fileStream.Dispose();


            //                    _ProviderSign = new System.Drawing.Bitmap(_strSignFileName);
            //                    _SignetureName = dt.Rows[0]["ProviderName"].ToString();
            //                    _SignetureText = "Document reviewed by " + _SignetureName + " on " + DateTime.Now;


            //                    _signaturefound = true;
            //                }
            //            }
            //        }
            //        if (dt != null) { dt.Dispose(); }

            //        #endregion

            //        #region " Generate PDF Tron Page & Insert into PDF Doc "

            //        if (_ProviderSign != null)
            //        {
            //            #region "New Code"

            //            pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
            //            pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
            //            pdftron.PDF.Element element;
            //            System.Drawing.Bitmap bmp;
            //            pdftron.PDF.Font fnt;




            //            //dhruv
            //            //pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
            //            page = FileContainer.PageCreate(); // Start a new page 
            //            writer.Begin(page);

            //            #region " Set Page Font "

            //            try
            //            {
            //                //System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 8F);
            //                System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 2F);
            //                fnt = pdftron.PDF.Font.CreateCIDTrueTypeFont(FileContainer, myfont, true, true);
            //            }
            //            catch (Exception e)
            //            { _ErrorMessage = e.Message; signaturefound = _signaturefound; return _Result; }

            //            #endregion

            //            double pHeight = page.GetPageHeight();
            //            double pWidth = page.GetPageWidth();

            //            #region " Set the Text Matrix for Provider Name (text) in Page "

            //            element = elementBuilder.CreateTextBegin(fnt, 1);

            //            string SigText = _SignetureText;
            //            double XTextPos = (pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //            double YTextPos = (pHeight) - 100;

            //            element.SetTextMatrix(10, 0, 0, 10, XTextPos, YTextPos);
            //            element.GetGState().SetLeading(2);
            //            writer.WriteElement(element);
            //            writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
            //            writer.WriteElement(elementBuilder.CreateTextNewLine());
            //            writer.WriteElement(elementBuilder.CreateTextEnd());

            //            #endregion " Set the Text Matrix for Provider Name (text) in Page "






            //            //dhruv  Notes
            //            //Annot a = InsertTextBox(FileContainer, sNotes,pHeight,pWidth);
            //            //page.AnnotPushBack(a);
            //            //sNotes = "Notes" + "\n" + strNotes;
            //            //Notes
            //            #region " Set the Text Matrix for Notes (text) in Page "
            //            sNotes = "Notes" + "\n" + strNotes;
            //            string[] split = sNotes.Split('\n');
            //            int counterheight = 10;
            //            foreach (string word in split)
            //            {
            //                element = elementBuilder.CreateTextBegin(fnt, 1);
            //                double XTextPos1 = (pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                double YTextPos1 = (pHeight) - counterheight;
            //                element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
            //                element.GetGState().SetLeading(2);
            //                writer.WriteElement(element);
            //                writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                writer.WriteElement(elementBuilder.CreateUnicodeTextRun(word));
            //                writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                writer.WriteElement(elementBuilder.CreateTextEnd());
            //                counterheight += 10;
            //            }
            //            #endregion " Set the Text Matrix for Provider Name (text) in Page "

            //            #region " Set the Text Matrix for Acknowledge (text) in Page "
            //            //acknowledge
            //            Common.NTAOs oNTAOs = new gloEDocumentV3.Common.NTAOs();
            //            Int64 oClinicID = gloEDocV3Admin.gClinicID; ;
            //            gloEDocumentV3.eDocManager.eDocGetList oList1 = new gloEDocumentV3.eDocManager.eDocGetList();

            //                oNTAOs = oList1.GetAcknowledges(oSelectedDocuments, oClinicID);

            //                string Ack = "";
            //            for (int i = 0; i <= oNTAOs.Count - 1; i++)
            //            {
            //                 Ack = oNTAOs[i].NTAODescription.Replace("\n", "").ToString();
            //            }
            //            string[] splitAck = Ack.Split('\r');
            //            counterheight += 10;
            //            foreach (string wordAck in splitAck)
            //            {

            //                element = elementBuilder.CreateTextBegin(fnt, 1);
            //                double XTextPos2 = (pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                double YTextPos2 = (pHeight) - counterheight;
            //                element.SetTextMatrix(10, 0, 0, 10, XTextPos2, XTextPos2);
            //                element.GetGState().SetLeading(2);
            //                writer.WriteElement(element);
            //                writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                writer.WriteElement(elementBuilder.CreateUnicodeTextRun(wordAck));
            //                writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                writer.WriteElement(elementBuilder.CreateTextEnd());
            //                counterheight += 10;
            //            }
            //            #endregion " Set the Text Matrix for Provider Name (text) in Page "







            //            #region " Add Signature Image to PDF Page "

            //            elementBuilder = new pdftron.PDF.ElementBuilder();
            //            double XImagepos = ((pWidth / 2) - (_ProviderSign.Width / 2));
            //            double YImagepas = (YTextPos - 110);
            //            pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, _ProviderSign);
            //            element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XImagepos, YImagepas));
            //            writer.WritePlacedElement(element);

            //            #endregion " Add Signature Image to PDF Page "

            //            elementBuilder = new pdftron.PDF.ElementBuilder();
            //            element = elementBuilder.CreateTextBegin(fnt, 1);
            //            string SigTextFotter = _SignetureName;
            //            double XBotmTextPos = (pWidth / 2) - (SigTextFotter.Length) - 20;
            //            double YBotmTextPos = (YImagepas - 13);
            //            element.SetTextMatrix(10, 0, 0, 10, XBotmTextPos, YBotmTextPos);
            //            element.GetGState().SetLeading(2);		 // Set the spacing between lines
            //            writer.WriteElement(element);

            //            #region " Add Provider Name to end of signature "

            //            writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
            //            writer.WriteElement(elementBuilder.CreateTextNewLine());
            //            writer.WriteElement(elementBuilder.CreateTextEnd());

            //            #endregion " Add Provider Name to end of signature "

            //            writer.End();// Finish writing to the page
            //            FileContainer.PagePushBack(page);
            //            _SignaturePageNumber = page.GetIndex();

            //            _signedPDFFile = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + Convert.ToString(DateTime.Now.ToFileTime()) + ".pdf";
            //            FileContainer.Save(_signedPDFFile, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
            //            FileContainer.Close();

            //            if (writer != null) { writer = null; }
            //            if (element != null) { element = null; }
            //            if (elementBuilder != null) { elementBuilder = null; }

            //            _Result = true;
            //            #endregion
            //        }

            //        #endregion " Generate PDF Tron Page & Insert into PDF Doc "

            //        if (_Result == true)
            //        {
            //            #region " Update Database Details "

            //            SqlConnection _sqlConnnetion = null;
            //            SqlTransaction _sqlTransaction = null;
            //            SqlParameter _sqlParameter = null;
            //            SqlCommand _sqlCommand = null;

            //            try
            //            {
            //                _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //                _sqlConnnetion.Open();

            //                _sqlTransaction = _sqlConnnetion.BeginTransaction();

            //                #region " Update Document Details "

            //                _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = (PageCounts +1) , ModifiedDateTime = dbo.gloGetDate() " +
            //                                            " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
            //                                            " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                _sqlCommand.ExecuteNonQuery();

            //                #endregion

            //                #region " Update Container Details "

            //                _sqlQuery = "";
            //                _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+1) " +
            //                            " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                _sqlCommand.ExecuteNonQuery();


            //                if (System.IO.File.Exists(_signedPDFFile) == true)
            //                {
            //                    System.IO.FileInfo oFiledata = new System.IO.FileInfo(_signedPDFFile);
            //                    System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                    using (BinaryReader br = new BinaryReader(oFileStream))
            //                    {
            //                        byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                        Int64 offset = 0;

            //                        _sqlCommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _sqlConnnetion);
            //                        _sqlCommand.CommandType = CommandType.StoredProcedure;
            //                        _sqlCommand.CommandTimeout = 0;
            //                        _sqlCommand.Transaction = _sqlTransaction;

            //                        while (buffer.Length > 0)
            //                        {
            //                            _sqlCommand.Parameters.Clear();
            //                            _sqlCommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = DocumentID;
            //                            _sqlCommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = ContainerID;
            //                            _sqlCommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                            _sqlCommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                            //_sqlCommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize; //dhruv 20100628
            //                            _sqlCommand.Parameters.Add("@length", SqlDbType.Int).Value = buffer.Length;

            //                            _sqlCommand.ExecuteNonQuery();

            //                            offset = offset + gloEDocV3Admin.gBufferSize;//dhruv 20100628
            //                            buffer = br.ReadBytes(buffer.Length);
            //                        }
            //                    }
            //                    if (oFileStream != null) { oFileStream.Close(); oFileStream.Dispose(); }
            //                    if (oFiledata != null) { oFiledata = null; }
            //                }


            //                #endregion

            //                #region " Update Page Details "

            //                _sqlQuery = "";
            //                _sqlQuery = " SELECT ISNULL(MAX(Substring(PageName,5,6)),0) + 1 FROM eDocument_Pages_V3 WITH(NOLOCK)" +
            //                            " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
            //                            " AND eDocumentID = " + DocumentID + " " +
            //                            " AND eContainerID = " + ContainerID + " " +
            //                            " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                Object retVal = _sqlCommand.ExecuteScalar();

            //                if (retVal != null && Convert.ToInt16(retVal) > 0)
            //                { _SignaturePageName = "Sign " + (Convert.ToInt16(retVal)); }
            //                else
            //                { _SignaturePageName = "Sign " + _SignaturePageNumber.ToString(); }

            //                if (retVal != null) { retVal = null; }


            //                _sqlQuery = "";
            //                string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + _SignaturePageNumber.ToString();
            //                _sqlQuery = "INSERT INTO eDocument_Pages_V3 " +
            //                " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
            //                " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";

            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                _sqlCommand.ExecuteNonQuery();

            //                #endregion

            //                _sqlTransaction.Commit();

            //            }
            //            catch (Exception ex)
            //            {
            //                _sqlTransaction.Rollback();
            //            }
            //            finally
            //            {
            //                if (_sqlParameter != null) { _sqlParameter = null; }
            //                if (_sqlCommand != null) { _sqlCommand.Dispose(); }
            //                if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
            //                if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

            //                #region " Delete Temporary Files "

            //                try
            //                {
            //                    if (_ProviderSign != null) { _ProviderSign.Dispose(); }
            //                    if (File.Exists(_strSignFileName)) { File.Delete(_strSignFileName); }
            //                    if (File.Exists(_signedPDFFile) == true) { File.Delete(_signedPDFFile); }
            //                    if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
            //                }
            //                catch (Exception ex)
            //                { }

            //                #endregion
            //            }

            //            #endregion " Update Database Details "
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //    }
            //    finally
            //    {

            //    }
            //    signaturefound = _signaturefound;
            //    return _Result;
            //    }
            #endregion "Dhruv 2010 -> InsertSignInPDFDoc_old"

            #region "Dhruv 2010 -> InsertSignInPDFDoc_working"
            //public bool InsertSignInPDFDoc_working(Int64 PatientID, Int64 documentid, Int64 containerid, DocumentContextMenu.eContextDocuments oSelectedDocuments, out bool signaturefound, string strNotes)
            //{
            //    #region  " Variable Declarations "

            //    pdftron.PDF.PDFDoc FileContainer = null;
            //    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
            //    Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
            //    DataTable dt = new DataTable();
            //    string _SignetureText = "";
            //    string _SignetureName = "";
            //    System.Drawing.Bitmap _ProviderSign = null;
            //    System.Drawing.PointF SignTextLocation = new System.Drawing.PointF();
            //    bool _Result = false;
            //    string _strSignFileName = "";
            //    string _sqlQuery = "";
            //    string _signedPDFFile = "";
            //    Int64 DocumentID = documentid;
            //    Int64 ContainerID = containerid;
            //    int _SignaturePageNumber = 0;
            //    string _SignaturePageName = "";
            //    bool _signaturefound = false;
            //    string sNotes = "";
            //    pdftron.PDF.Page page = null;
            //    #endregion

            //    try
            //    {
            //        #region "Generate PDF Doc Object"
            //        string _FilePath = "";
            //        string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

            //        if (System.IO.Directory.Exists(_FolderPath) == true)
            //        {
            //            System.IO.Directory.Delete(_FolderPath, true);
            //        }
            //        System.IO.Directory.CreateDirectory(_FolderPath);
            //        _FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

            //        gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
            //        oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, _FilePath);
            //        oList.Dispose();

            //        FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
            //        #endregion

            //        if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
            //            oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
            //        {
            //            DocumentID = oSelectedDocuments[0].DocumentID;
            //            ContainerID = oSelectedDocuments[0].Containers[0].ContainerID;
            //        }
            //        else
            //        { signaturefound = _signaturefound; return false; }

            //        #region "Retrive Binary Image"

            //        oDB.Connect(false);
            //        oParameters.Add("@nPatientID", PatientID, ParameterDirection.Input, SqlDbType.BigInt);
            //        oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);

            //        if (dt != null)
            //        {
            //            if (dt.Rows.Count > 0)
            //            {
            //                if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
            //                {
            //                    byte[] content = null;
            //                    content = (byte[])dt.Rows[0][0];
            //                    _strSignFileName = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";
            //                    MemoryStream oDataStream = new MemoryStream(content);
            //                    FileStream fileStream = new FileStream(_strSignFileName, FileMode.Create);
            //                    oDataStream.WriteTo(fileStream);
            //                    fileStream.Flush();
            //                    fileStream.Close();
            //                    fileStream.Dispose();


            //                    _ProviderSign = new System.Drawing.Bitmap(_strSignFileName);
            //                    _SignetureName = dt.Rows[0]["ProviderName"].ToString();
            //                    _SignetureText = "Document reviewed by " + _SignetureName + " on " + DateTime.Now;


            //                    _signaturefound = true;
            //                }
            //            }
            //        }
            //        if (dt != null) { dt.Dispose(); }

            //        #endregion

            //        #region " Generate PDF Tron Page & Insert into PDF Doc "

            //        if (_ProviderSign != null)
            //        {
            //            #region "New Code"

            //            pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
            //            pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
            //            pdftron.PDF.Element element;
            //            //System.Drawing.Bitmap bmp;
            //            pdftron.PDF.Font fnt;


            //            //commneted by dhruv: Declared this variable above this loop
            //            //pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
            //            page = FileContainer.PageCreate(); // Start a new page 
            //            writer.Begin(page);

            //            #region " Set Page Font "

            //            try
            //            {
            //                //System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 8F);
            //                System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 2F);
            //                fnt = pdftron.PDF.Font.CreateCIDTrueTypeFont(FileContainer, myfont, true, true);
            //            }
            //            catch (Exception e)
            //            { _ErrorMessage = e.Message; signaturefound = _signaturefound; return _Result; }

            //            #endregion

            //            double pHeight = page.GetPageHeight();
            //            double pWidth = page.GetPageWidth();

            //            int counterheight = 10;
            //            double XTextPos1 = 20 ;
            //            double YTextPos1 = pHeight;

            //            #region"Notes and Acknowledge"

            //            //dhruv  Notes
            //            //Annot a = InsertTextBox(FileContainer, sNotes,pHeight,pWidth);
            //            //page.AnnotPushBack(a);
            //            //sNotes = "Notes" + "\n" + strNotes;
            //            //Notes
            //            //InsertNewPage(ContainerID, DocumentID, _FilePath);


            //            Common.NTAOs oNTAOs = new gloEDocumentV3.Common.NTAOs();
            //            Int64 oClinicID = gloEDocV3Admin.gClinicID; 
            //            gloEDocumentV3.eDocManager.eDocGetList oList1 = new gloEDocumentV3.eDocManager.eDocGetList();

            //            #region " Set the Text Matrix for Notes (text) in Page "

            //            string SigText = "";
            //            //sNotes = "Notes" + "\n" + strNotes;
            //            //string[] split = sNotes.Split('\n');
            //            //string natoDiscription="";
            //            string natoPagename="";
            //            try
            //            {
            //                ArrayList arrNoteDescriptions = new ArrayList();
            //                oNTAOs = oList.GetNotes(oSelectedDocuments, oClinicID);
            //                if (oNTAOs != null)
            //                {
            //                    for (int i = 0; i <= oNTAOs.Count - 1; i++)
            //                    {
            //                        arrNoteDescriptions.Add("Page" + oNTAOs[i].DocumentPageNumber.ToString());
            //                        arrNoteDescriptions.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString());
            //                    }


            //                    if (oNTAOs.Count > 0)
            //                    {

            //                        //dhruv To Print only the Acknowledgement text--------------------------------
            //                        element = elementBuilder.CreateTextBegin(fnt, 1);
            //                        // XTextPos1 = 20; //(pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                        YTextPos1 = YTextPos1 - counterheight - 5;
            //                        element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
            //                        element.GetGState().SetLeading(2);
            //                        writer.WriteElement(element);
            //                        writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                        writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Notes"));
            //                        writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                        writer.WriteElement(elementBuilder.CreateTextEnd());
            //                    }
            //                //---------------------------------------------------------------------------
            //                }

            //                foreach (string word in arrNoteDescriptions)
            //                {


            //                    element = elementBuilder.CreateTextBegin(fnt, 1);
            //                    // XTextPos1 = 20; //(pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                    YTextPos1 = YTextPos1 - counterheight;
            //                    element.SetTextMatrix(10, 0, 0, 10, XTextPos1 + 5, YTextPos1);
            //                    element.GetGState().SetLeading(2);
            //                    writer.WriteElement(element);
            //                    writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    writer.WriteElement(elementBuilder.CreateUnicodeTextRun(word));
            //                    writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    writer.WriteElement(elementBuilder.CreateTextEnd());
            //                    //counterheight += 2;
            //                }



            //            #endregion " Set the Text Matrix for Provider Name (text) in Page "


            //            #region " Set the Text Matrix for Acknowledge (text) in Page "
            //                //acknowledge
            //                oNTAOs = oList1.GetAcknowledges(oSelectedDocuments, oClinicID);
            //                //string Ack = "";
            //                ArrayList arrAcknowledgement = new ArrayList();
            //                if (oNTAOs != null)
            //                {
            //                    for (int i = 0; i <= oNTAOs.Count - 1; i++)
            //                    {
            //                        //Ack = "Acknowledgement" + "\n" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString();
            //                        arrAcknowledgement.Add(oNTAOs[i].NTAODateTime +  ":" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString());
            //                    }
            //                    if (oNTAOs.Count > 0)
            //                    {
            //                        //dhruv To Print only the Acknowledgement text--------------------------------
            //                        element = elementBuilder.CreateTextBegin(fnt, 1);
            //                        // XTextPos1 = 20; //(pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                        YTextPos1 = YTextPos1 - counterheight - 5;
            //                        element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
            //                        element.GetGState().SetLeading(2);
            //                        writer.WriteElement(element);
            //                        writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                        writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Acknowledgement"));
            //                        writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                        writer.WriteElement(elementBuilder.CreateTextEnd());
            //                    }
            //                    //---------------------------------------------------------------------------
            //                }

            //                foreach (string wordAcknowledgement in arrAcknowledgement)
            //                {
            //                    element = elementBuilder.CreateTextBegin(fnt, 1);
            //                    // XTextPos1 = 20; //(pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                    YTextPos1 = YTextPos1 - counterheight;
            //                    element.SetTextMatrix(10, 0, 0, 10, XTextPos1 + 5, YTextPos1);
            //                    element.GetGState().SetLeading(2);
            //                    writer.WriteElement(element);
            //                    writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    writer.WriteElement(elementBuilder.CreateUnicodeTextRun(wordAcknowledgement));
            //                    writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    writer.WriteElement(elementBuilder.CreateTextEnd());


            //                    //Actual code ----------------------------------------------------------
            //                    //string[] splitAck = Ack.Split('\n');
            //                    //YTextPos1 -= 5;
            //                    //foreach (string wordAck in splitAck)
            //                    //{
            //                    //    element = elementBuilder.CreateTextBegin(fnt, 1);
            //                    //    // XTextPos1 = 20; //(pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //                    //    YTextPos1 = YTextPos1 - counterheight;
            //                    //    element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
            //                    //    element.GetGState().SetLeading(2);
            //                    //    writer.WriteElement(element);
            //                    //    writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    //    writer.WriteElement(elementBuilder.CreateUnicodeTextRun(wordAck));
            //                    //    writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    //    writer.WriteElement(elementBuilder.CreateTextEnd());
            //                    //counterheight += 2;
            //                    //-----------------------------------------------------------------------


            //                    //element = elementBuilder.CreateTextBegin(fnt, 1);
            //                    ////double XTextPos2 = 20; //(pWidth / 2) - (wordAck.Length) - (_ProviderSign.Width / 2);
            //                    ////double YTextPos2 = (pHeight) - 0;
            //                    //YTextPos1 = (YTextPos1) - counterheight;
            //                    //element.SetTextMatrix(10, 0, 0, 10, XTextPos1, XTextPos1);
            //                    //element.GetGState().SetLeading(2);
            //                    //writer.WriteElement(element);
            //                    //writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    //writer.WriteElement(elementBuilder.CreateUnicodeTextRun(wordAck));
            //                    //writer.WriteElement(elementBuilder.CreateTextNewLine());
            //                    //writer.WriteElement(elementBuilder.CreateTextEnd());
            //                    ////counterheight += 10;
            //                }

            //            }

            //            catch (PDFNetException ex)
            //            {
            //                string _ErrorMessage = ex.ToString();
            //                #region " Log Exception "

            //                if (_ErrorMessage.Trim() != "")
            //                {
            //                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
            //                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //                    _MessageString = "";
            //                }

            //                #endregion
            //            }
            //            finally
            //            {
            //                if (oNTAOs != null)
            //                {
            //                    oNTAOs.Dispose();
            //                    oNTAOs = null;
            //                }
            //                if (oList != null)
            //                {
            //                    oList.Dispose();
            //                    oList = null;
            //                }

            //            }
            //            #endregion " Set the Text Matrix for Provider Name (text) in Page "


            //            #endregion

            //            #region " Set the Text Matrix for Provider Name (text) in Page "

            //            element = elementBuilder.CreateTextBegin(fnt, 1);

            //             SigText = _SignetureText;
            //             //counterheight += 10;
            //             YTextPos1 -= 5;
            //            //double XTextPos = (pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
            //            //double YTextPos = (pHeight) - counterheight;

            //            element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1-50);
            //            element.GetGState().SetLeading(2);
            //            writer.WriteElement(element);
            //            writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
            //            writer.WriteElement(elementBuilder.CreateTextNewLine());
            //            writer.WriteElement(elementBuilder.CreateTextEnd());

            //            #endregion " Set the Text Matrix for Provider Name (text) in Page "


            //            #region " Add Signature Image to PDF Page "

            //            elementBuilder = new pdftron.PDF.ElementBuilder();
            //             //counterheight += 10;
            //            //double XImagepos = ((pWidth / 2) - (_ProviderSign.Width / 2));
            //            YTextPos1  = (YTextPos1 - counterheight);
            //            pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, _ProviderSign);
            //            YTextPos1 -= (img.GetImageHeight() + 10);
            //            //element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XTextPos1 , YTextPos1));
            //            element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XTextPos1, YTextPos1 - _ProviderSign.Height));
            //            writer.WritePlacedElement(element);

            //            #endregion " Add Signature Image to PDF Page "

            //            elementBuilder = new pdftron.PDF.ElementBuilder();
            //            element = elementBuilder.CreateTextBegin(fnt, 1);
            //            string SigTextFotter = _SignetureName;
            //            //counterheight += 10;
            //            YTextPos1 -= (img.GetImageHeight() + 10);
            //            //counterheight += (img.GetImageHeight() +10);
            //            //double XBotmTextPos = (pWidth / 2) - (SigTextFotter.Length) - 20;
            //            //double YBotmTextPos = (YImagepas - counterheight);
            //            //YTextPos1  = (YTextPos1  - counterheight);
            //            element.SetTextMatrix(10, 0, 0, 10, XTextPos1 , YTextPos1 );
            //            element.GetGState().SetLeading(2);		 // Set the spacing between lines
            //            writer.WriteElement(element);

            //            #region "Insert pagees"


            //            #endregion



            //            #region " Add Provider Name to end of signature "

            //            writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
            //            writer.WriteElement(elementBuilder.CreateTextNewLine());
            //            writer.WriteElement(elementBuilder.CreateTextEnd());


            //            //if (YTextPos1 <= 100)
            //            //{
            //            //    page = FileContainer.PageCreate(); // Start a new page 
            //            //    writer.Begin(page);
            //            //    FileContainer.PagePushBack(page);

            //            //}

            //            #endregion " Add Provider Name to end of signature "

            //            writer.End();// Finish writing to the page
            //            FileContainer.PagePushBack(page);

            //            #region "Insert the Watermark to the page"
            //            ///dhruv Adding the watermark tag to the newly inserted page
            //            if (gloEDocV3Admin.ISDMSDEMO == true)
            //            {
            //                FileContainer.InitSecurityHandler();
            //                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
            //                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
            //            }
            //            #endregion

            //            _SignaturePageNumber = page.GetIndex();

            //            _signedPDFFile = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + Convert.ToString(DateTime.Now.ToFileTime()) + ".pdf";
            //            FileContainer.Save(_signedPDFFile, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
            //            FileContainer.Close();


            //            if (writer != null) { writer = null; }
            //            if (element != null) { element = null; }
            //            if (elementBuilder != null) { elementBuilder = null; }

            //            _Result = true;
            //            #endregion
            //        }

            //        #endregion " Generate PDF Tron Page & Insert into PDF Doc "

            //        if (_Result == true)
            //        {
            //            #region " Update Database Details "

            //            SqlConnection _sqlConnnetion = null;
            //            SqlTransaction _sqlTransaction = null;
            //            SqlParameter _sqlParameter = null;
            //            SqlCommand _sqlCommand = null;

            //            try
            //            {
            //                _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
            //                _sqlConnnetion.Open();

            //                _sqlTransaction = _sqlConnnetion.BeginTransaction();

            //                #region " Update Document Details "

            //                _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = (PageCounts +1) , ModifiedDateTime = dbo.gloGetDate() " +
            //                                            " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
            //                                            " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                _sqlCommand.ExecuteNonQuery();

            //                #endregion

            //                #region " Update Container Details "

            //                _sqlQuery = "";
            //                _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+1) " +
            //                            " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                _sqlCommand.ExecuteNonQuery();


            //                if (System.IO.File.Exists(_signedPDFFile) == true)
            //                {
            //                    System.IO.FileInfo oFiledata = new System.IO.FileInfo(_signedPDFFile);
            //                    System.IO.FileStream oFileStream = oFiledata.OpenRead();
            //                    using (BinaryReader br = new BinaryReader(oFileStream))
            //                    {
            //                        byte[] buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);
            //                        Int64 offset = 0;

            //                        _sqlCommand = new SqlCommand("gsp_eDocV3_DataFile_InsertChunk", _sqlConnnetion);
            //                        _sqlCommand.CommandType = CommandType.StoredProcedure;
            //                        _sqlCommand.CommandTimeout = 0;
            //                        _sqlCommand.Transaction = _sqlTransaction;

            //                        while (buffer.Length > 0)
            //                        {
            //                            _sqlCommand.Parameters.Clear();
            //                            _sqlCommand.Parameters.Add("@DocumentID", SqlDbType.BigInt).Value = DocumentID;
            //                            _sqlCommand.Parameters.Add("@ContainerID", SqlDbType.BigInt).Value = ContainerID;
            //                            _sqlCommand.Parameters.Add("@data", SqlDbType.VarBinary).Value = buffer;
            //                            _sqlCommand.Parameters.Add("@offset", SqlDbType.BigInt).Value = offset;
            //                            //_sqlCommand.Parameters.Add("@length", SqlDbType.Int).Value = gloEDocV3Admin.gBufferSize;//dhruv 20100628
            //                            _sqlCommand.Parameters.Add("@length", SqlDbType.Int).Value = buffer.Length;

            //                            _sqlCommand.ExecuteNonQuery();

            //                            offset = offset + gloEDocV3Admin.gBufferSize;
            //                            //buffer = br.ReadBytes(gloEDocV3Admin.gBufferSize);//dhruv 20100628
            //                            buffer = br.ReadBytes(buffer.Length);
            //                        }
            //                    }
            //                    if (oFileStream != null) { oFileStream.Close(); oFileStream.Dispose(); }
            //                    if (oFiledata != null) { oFiledata = null; }
            //                }


            //                #endregion

            //                #region " Update Page Details "

            //                _sqlQuery = "";
            //                _sqlQuery = " SELECT ISNULL(MAX(Substring(PageName,5,6)),0) + 1 FROM eDocument_Pages_V3 WITH(NOLOCK)" +
            //                            " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
            //                            " AND eDocumentID = " + DocumentID + " " +
            //                            " AND eContainerID = " + ContainerID + " " +
            //                            " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                Object retVal = _sqlCommand.ExecuteScalar();

            //                if (retVal != null && Convert.ToInt16(retVal) > 0)
            //                { _SignaturePageName = "Sign " + (Convert.ToInt16(retVal)); }
            //                else
            //                { _SignaturePageName = "Sign " + _SignaturePageNumber.ToString(); }

            //                if (retVal != null) { retVal = null; }


            //                _sqlQuery = "";
            //                string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + _SignaturePageNumber.ToString();
            //                _sqlQuery = "INSERT INTO eDocument_Pages_V3 " +
            //                " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
            //                " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";

            //                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
            //                _sqlCommand.ExecuteNonQuery();

            //                #endregion

            //                _sqlTransaction.Commit();

            //            }
            //            catch (Exception ex)
            //            {
            //                _sqlTransaction.Rollback();
            //            }
            //            finally
            //            {
            //                if (_sqlParameter != null) { _sqlParameter = null; }
            //                if (_sqlCommand != null) { _sqlCommand.Dispose(); }
            //                if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
            //                if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

            //                #region " Delete Temporary Files "

            //                try
            //                {
            //                    if (_ProviderSign != null) { _ProviderSign.Dispose(); }
            //                    if (File.Exists(_strSignFileName)) { File.Delete(_strSignFileName); }
            //                    if (File.Exists(_signedPDFFile) == true) { File.Delete(_signedPDFFile); }
            //                    if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
            //                }
            //                catch (Exception ex)
            //                { }

            //                #endregion
            //            }

            //            #endregion " Update Database Details "
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _HasError = true;
            //        _ErrorMessage = ex.Message;
            //    }
            //    finally
            //    {

            //    }
            //    signaturefound = _signaturefound;
            //    return _Result;
            //}
            #endregion "Dhruv 2010 -> InsertSignInPDFDoc_working"

            #region "Signature with notes / Acknowlegement "
            #region "Dhruv "
            #region "Inserting the new page when required"
            private ArrayList AddPages(pdftron.PDF.Page oPage, pdftron.PDF.PDFDoc oPDFDoc)
            {
                #region "Variable Declaration"
                ArrayList TempArrPage = new ArrayList();
                //ArrayList Page;
                ArrayList temppdfdoc;
                #endregion


                TempArrPage.Add(oPage);
                addPage = TempArrPage;


                temppdfdoc = InsertPDFDocument(oPDFDoc);
                return temppdfdoc;

            }
            #endregion

            #region "Insert PDFDocument"
            private ArrayList InsertPDFDocument(pdftron.PDF.PDFDoc oPDFDoc)
            {
                #region "Variable Declaration"
                ArrayList TempArrdoc = new ArrayList();
                //  ArrayList doc;
                #endregion


                TempArrdoc.Add(oPDFDoc);
                return TempArrdoc;
                //  return doc;
            }
            #endregion

            #region "Counter Part How many Pages inserted"


            #endregion
            #endregion

            public bool InsertSignInPDFDocWithNotesAndAcknowledgement(Int64 PatientID, Int64 documentid, Int64 containerid, DocumentContextMenu.eContextDocuments oSelectedDocuments, Int64 SignatureID, int flag, out bool signaturefound, string strNotes, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                #region  " Variable Declarations "
                pdftron.PDF.PDFDoc FileContainer = null;
                //DataTable dt = new DataTable();
                string _SignetureText = "";
                string _SignetureName = "";
                System.Drawing.Bitmap _ProviderSign = null;
                //      System.Drawing.PointF SignTextLocation = new System.Drawing.PointF();
                bool _Result = false;
                string _strSignFileName = "";
                string _sqlQuery = "";
                string _signedPDFFile = "";
                Int64 DocumentID = documentid;
                Int64 ContainerID = containerid;
                int _SignaturePageNumber = 0;
                string _SignaturePageName = "";
                bool _signaturefound = false;
                //   string sNotes = "";
                pdftron.PDF.Page page = null;
                ArrayList temoarry = new ArrayList();
                ArrayList arrPage = new ArrayList();
                Common.NTAOs oNTAOs = null;
                gloEDocumentV3.eDocManager.eDocGetList oList1 = null;
                #endregion

                try
                {
                    #region "Generate PDF Doc Object"
                    string _FilePath = "";
                    string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

                    if (System.IO.Directory.Exists(_FolderPath) == true)
                    {
                        System.IO.Directory.Delete(_FolderPath, true);
                    }
                    System.IO.Directory.CreateDirectory(_FolderPath);
                    _FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

                    gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                    oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, ref _FilePath, _OpenExternalSource);
                    oList.Dispose();

                    FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
                    #endregion

                    if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
                        oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
                    {
                        DocumentID = oSelectedDocuments[0].DocumentID;
                        ContainerID = oSelectedDocuments[0].Containers[0].ContainerID;
                    }
                    else
                    { signaturefound = _signaturefound; return false; }


                    //Developer: Yatin N.Bhagat
                    //Date:01/29/2012
                    //Bug ID/PRD Name/Salesforce Case:Salesforce Case No.GLO2010-0009688 - Provider Signature Format
                    //Reason: If Condition is added to check the Setting to add login user name in the Sign


                    //string _FFolderPath = gloEDocV3Admin.gPDFTronTemporaryProcessPath;
                    //if (System.IO.Directory.Exists(_FFolderPath) == false)
                    //{
                    //    //System.IO.Directory.Delete(_FFolderPath, true);
                    //    System.IO.Directory.CreateDirectory(_FFolderPath);
                    //}

                    //#region "Retrive Binary Image"

                    //oDB.Connect(false);
                    //oParameters.Add("@nPatientID", SignatureID, ParameterDirection.Input, SqlDbType.BigInt);
                    ////Sanjog - Added On 20101011 to insert signature 
                    //oParameters.Add("@nFlag", flag, ParameterDirection.Input, SqlDbType.Int);
                    ////Sanjog - Added On 20101011 to insert signature

                    //oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);

                    //if (dt != null)
                    //{
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
                    //        {
                    //            byte[] content = null;
                    //            content = (byte[])dt.Rows[0][0];
                    //            _strSignFileName = _FFolderPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";
                    //            MemoryStream oDataStream = new MemoryStream(content);
                    //            FileStream fileStream = new FileStream(_strSignFileName, FileMode.Create);
                    //            oDataStream.WriteTo(fileStream);
                    //            fileStream.Flush();
                    //            fileStream.Close();
                    //            fileStream.Dispose();


                    //            _ProviderSign = new System.Drawing.Bitmap(_strSignFileName);
                    //            _SignetureName = dt.Rows[0]["ProviderName"].ToString();
                    //            _SignetureText = "Document reviewed by " + _SignetureName + " on " + DateTime.Now;


                    //            _signaturefound = true;
                    //        }
                    //    }
                    //}
                    //if (dt != null) { dt.Dispose(); }


                    ArrayList arSignature = GetSignatureFormat(SignatureID, flag, 0);
                    //SLR: stream not needed 12/22
                    byte[] arrByte = (byte[])arSignature[0];
                    //MemoryStream oDataStream = new MemoryStream((byte[])arSignature[0]);
                    if (arrByte != null)
                    {
                        FileStream fileStream = new FileStream(arSignature[1].ToString(), FileMode.Create);
                        fileStream.Write(arrByte, 0, arrByte.Length);
                        //oDataStream.WriteTo(fileStream);
                        fileStream.Flush();
                        fileStream.Close();
                        fileStream.Dispose();
                    }
                    //oDataStream.Close();
                    //oDataStream.Dispose();
                    _ProviderSign = new System.Drawing.Bitmap(arSignature[1].ToString());
                    _SignetureText = arSignature[3].ToString();
                    _signaturefound = System.Convert.ToBoolean(arSignature[4].ToString());






            #endregion

                    //#region " Generate PDF Tron Page & Insert into PDF Doc "

                    if (_ProviderSign != null)
                    {
                        #region "New Code"


                        pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
                        pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
                        pdftron.PDF.Element element = null;
                        //System.Drawing.Bitmap bmp;
                        pdftron.PDF.Font fnt = null;


                        //commneted by dhruv: Declared this variable above this loop
                        //pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
                        page = FileContainer.PageCreate(); // Start a new page 
                        writer.Begin(page);




                        #region " Set Page Font "

                        try
                        {
                            //System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 8F);
                            System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 2F);
                            fnt = pdftron.PDF.Font.CreateCIDTrueTypeFont(FileContainer, myfont, true, true);
                            myfont.Dispose();
                            myfont = null;
                        }
                        catch (Exception e)
                        {
                            _ErrorMessage = e.Message;
                            signaturefound = _signaturefound;
                            if (writer != null) { writer.Dispose(); writer = null; }
                            if (element != null) { element = null; }
                            if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                            if (fnt != null) { fnt.Dispose(); fnt = null; };
                            if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                            return _Result;
                        }

                        #endregion

                        double pHeight = page.GetPageHeight();
                        double pWidth = page.GetPageWidth();

                        int counterheight = 11;
                        double XTextPos1 = 20;
                        double YTextPos1 = pHeight - counterheight;
                        double lastY = counterheight * 2;
                        #region"Notes and Acknowledge"

                        //oNTAOs = new gloEDocumentV3.Common.NTAOs();
                        Int64 oClinicID = gloEDocV3Admin.gClinicID;
                        oList1 = new gloEDocumentV3.eDocManager.eDocGetList();

                        #region " Set the Text Matrix for Notes (text) in Page "

                        string SigText = "";
                        //   string natoPagename = "";
                        try
                        {
                            ArrayList arrNoteDescriptions = new ArrayList();
                            oNTAOs = oList.GetNotes(oSelectedDocuments, oClinicID, _OpenExternalSource);
                            if (oNTAOs != null)
                            {
                                for (int i = 0; i <= oNTAOs.Count - 1; i++)
                                {
                                    // arrNoteDescriptions.Add("Page" + oNTAOs[i].DocumentPageNumber.ToString());
                                    arrNoteDescriptions.Add(oNTAOs[i].PageName);
                                    //arrNoteDescriptions.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString());
                                    arrNoteDescriptions.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.ToString());

                                }


                                if (oNTAOs.Count > 0)
                                {

                                    //dhruv To Print only the Acknowledgement text--------------------------------
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = YTextPos1 - counterheight;

                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Notes"));
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateTextEnd());
                                    YTextPos1 = YTextPos1 - 2 * counterheight;
                                }
                                else
                                {
                                    signaturefound = false;
                                    MessageBox.Show("Please enter notes", gloEDocV3Admin.gMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    writer.End();
                                    oNTAOs.Dispose();
                                    oNTAOs = null;
                                    if (writer != null) { writer.Dispose(); writer = null; }
                                    if (element != null) { element = null; }
                                    if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                                    if (fnt != null) { fnt.Dispose(); fnt = null; };
                                    if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                                    return false;
                                }
                                //---------------------------------------------------------------------------
                            }

                            #region "Print the Multiline Annots"
                            foreach (string word in arrNoteDescriptions)
                            {
                                element = WriteTextToPDF(FileContainer, ref page, ref temoarry, arrPage, elementBuilder, writer, fnt, pHeight, pWidth, counterheight, XTextPos1, ref YTextPos1, lastY, word);


                            }
                            #endregion
                            //counterheight += 2;




                        #endregion

                            #region " Set the Text Matrix for Acknowledge (text) in Page "
                            //acknowledge
                            if (oNTAOs != null)
                            {
                                oNTAOs.Dispose();
                                oNTAOs = null;
                            }
                            oNTAOs = oList1.GetAcknowledges(oSelectedDocuments, oClinicID, _OpenExternalSource);
                            //string Ack = "";
                            ArrayList arrAcknowledgement = new ArrayList();
                            if (oNTAOs != null)
                            {
                                for (int i = 0; i <= oNTAOs.Count - 1; i++)
                                {
                                    //Ack = "Acknowledgement" + "\n" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString();
                                    //arrAcknowledgement.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString());
                                    arrAcknowledgement.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.ToString());
                                }

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                if (oNTAOs.Count > 0)
                                {
                                    //dhruv To Print only the Acknowledgement text--------------------------------
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = YTextPos1 - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Acknowledgement"));
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateTextEnd());
                                    YTextPos1 = YTextPos1 - 2 * counterheight;
                                }
                                else
                                {
                                    signaturefound = false;
                                    MessageBox.Show("Please enter acknowledgement", gloEDocV3Admin.gMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    writer.End();
                                    oNTAOs.Dispose();
                                    oNTAOs = null;
                                    if (writer != null) { writer.Dispose(); writer = null; }
                                    if (element != null) { element = null; }
                                    if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                                    if (fnt != null) { fnt.Dispose(); fnt = null; };
                                    if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                                    return false;
                                }
                                //---------------------------------------------------------------------------
                            }





                            #region "Print the Multiline Annots Text"
                            foreach (string wordAcknowledgement in arrAcknowledgement)
                            {

                                element = WriteTextToPDF(FileContainer, ref page, ref temoarry, arrPage, elementBuilder, writer, fnt, pHeight, pWidth, counterheight, XTextPos1, ref YTextPos1, lastY, wordAcknowledgement);


                                //element = elementBuilder.CreateTextBegin(fnt, 10);
                                //element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //element.GetGState().SetLeading(10);
                                //writer.WriteElement(element);
                                ////writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                ////YTextPos1 = YTextPos1 - counterheight;
                                ////#region "Page Break Code"
                                ////if (YTextPos1 <= lastY)
                                ////{
                                ////    element=elementBuilder.CreateTextEnd();
                                ////    writer.WriteElement(element);

                                ////    writer.End();
                                ////    FileContainer.PagePushBack(page);

                                ////    temoarry = AddPages(page, FileContainer);
                                ////    arrPage.Add(page.GetIndex());

                                ////    #region "Insert water Mark"
                                ////    if (gloEDocV3Admin.ISDMSDEMO == true)
                                ////    {
                                ////        FileContainer.InitSecurityHandler();
                                ////        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                ////        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                ////    }
                                ////    #endregion

                                ////    page = FileContainer.PageCreate();
                                ////    writer.Begin(page);
                                ////    element = elementBuilder.CreateTextBegin(fnt, 10);
                                ////    YTextPos1 = pHeight-counterheight;
                                ////    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                ////    element.GetGState().SetLeading(10);
                                ////    writer.WriteElement(element);



                                ////}

                                ////#endregion

                                //int para_run = 0;
                                //int para_run_end;
                                //int sentence_end = wordAcknowledgement.Length;
                                //while (para_run < sentence_end)
                                //{
                                //    para_run_end = wordAcknowledgement.IndexOf('\r', para_run);
                                //    //if (para_run_end < 0) para_run_end = sentence_end - 1;
                                //    if (para_run_end < 0) para_run_end = sentence_end;
                                //    string para = wordAcknowledgement.Substring(para_run, para_run_end - para_run);
                                //    int para_end = para.Length;
                                //    int text_run = 0;
                                //    int text_run_end;

                                //    double para_width = pWidth - 100; // paragraph/column width is xx units
                                //    double cur_width = 0;

                                //    while (text_run < para_end)
                                //    {

                                //        text_run_end = para.IndexOf(' ', text_run);
                                //        if (text_run_end < 0) text_run_end = para_end - 1;

                                //        string text = para.Substring(text_run, text_run_end - text_run + 1);
                                //        element = elementBuilder.CreateUnicodeTextRun(text);
                                //        if (cur_width + element.GetTextLength() < para_width)
                                //        {

                                //            writer.WriteElement(element);
                                //            cur_width += element.GetTextLength();
                                //            text_run = text_run_end + 1;



                                //        }

                                //        else
                                //        {

                                //            if (cur_width == 0)
                                //            {

                                //                while (text_run < text_run_end)
                                //                {



                                //                    string text1 = para.Substring(text_run, 1);
                                //                    element = elementBuilder.CreateUnicodeTextRun(text1);
                                //                    if (cur_width + element.GetTextLength() < para_width)
                                //                    {

                                //                        writer.WriteElement(element);
                                //                        cur_width += element.GetTextLength();

                                //                    }

                                //                    else
                                //                    {

                                //                        writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                //                        YTextPos1 = YTextPos1 - counterheight;
                                //                        #region "Page Break Code"
                                //                        if (YTextPos1 <= lastY)
                                //                        {
                                //                            element = elementBuilder.CreateTextEnd();
                                //                            writer.WriteElement(element);

                                //                            writer.End();
                                //                            FileContainer.PagePushBack(page);

                                //                            temoarry = AddPages(page, FileContainer);
                                //                            arrPage.Add(page.GetIndex());

                                //                            #region "Insert water Mark"
                                //                            if (gloEDocV3Admin.ISDMSDEMO == true)
                                //                            {
                                //                                FileContainer.InitSecurityHandler();
                                //                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //                                oViewer.Dispose();
                                //                                oViewer = null;
                                //                            }
                                //                            #endregion

                                //                            page = FileContainer.PageCreate();
                                //                            writer.Begin(page);
                                //                            element = elementBuilder.CreateTextBegin(fnt, 10);
                                //                            YTextPos1 = pHeight - counterheight;
                                //                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //                            element.GetGState().SetLeading(10);
                                //                            writer.WriteElement(element);



                                //                        }

                                //                        #endregion
                                //                        text1 = para.Substring(text_run, 1);
                                //                        element = elementBuilder.CreateUnicodeTextRun(text1);
                                //                        cur_width = element.GetTextLength();
                                //                        writer.WriteElement(element);


                                //                    }
                                //                    text_run++;
                                //                }




                                //            }
                                //            else
                                //            {
                                //                //text = para.Substring(text_run, text_run_end - text_run + 1);
                                //                //element = elementBuilder.CreateUnicodeTextRun(text);
                                //                //cur_width = element.GetTextLength();
                                //                //writer.WriteElement(element);
                                //                writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                //                cur_width = 0;
                                //                YTextPos1 = YTextPos1 - counterheight;

                                //                #region "Page Break Code"
                                //                if (YTextPos1 <= lastY)
                                //                {
                                //                    element = elementBuilder.CreateTextEnd();
                                //                    writer.WriteElement(element);

                                //                    writer.End();
                                //                    FileContainer.PagePushBack(page);

                                //                    temoarry = AddPages(page, FileContainer);
                                //                    arrPage.Add(page.GetIndex());

                                //                    #region "Insert water Mark"
                                //                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                //                    {
                                //                        FileContainer.InitSecurityHandler();
                                //                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //                        oViewer.Dispose();
                                //                        oViewer = null;
                                //                    }
                                //                    #endregion

                                //                    page = FileContainer.PageCreate();
                                //                    writer.Begin(page);
                                //                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                //                    YTextPos1 = pHeight - counterheight;
                                //                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //                    element.GetGState().SetLeading(10);
                                //                    writer.WriteElement(element);


                                //                }
                                //                #endregion

                                //            }

                                //        }



                                //    }
                                //    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                //    YTextPos1 = YTextPos1 - counterheight;
                                //    para_run = para_run_end + 2;  // {to skip \n)
                                //    #region "Page Break Code"
                                //    if (YTextPos1 <= lastY)
                                //    {
                                //        element = elementBuilder.CreateTextEnd();
                                //        writer.WriteElement(element);

                                //        writer.End();
                                //        FileContainer.PagePushBack(page);

                                //        temoarry = AddPages(page, FileContainer);
                                //        arrPage.Add(page.GetIndex());

                                //        #region "Insert water Mark"
                                //        if (gloEDocV3Admin.ISDMSDEMO == true)
                                //        {
                                //            FileContainer.InitSecurityHandler();
                                //            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //            oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //            oViewer.Dispose();
                                //            oViewer = null;
                                //        }
                                //        #endregion

                                //        page = FileContainer.PageCreate();

                                //        writer.Begin(page);
                                //        element = elementBuilder.CreateTextBegin(fnt, 10);
                                //        YTextPos1 = pHeight - counterheight;
                                //        element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //        element.GetGState().SetLeading(10);
                                //        writer.WriteElement(element);



                                //    }

                                //    #endregion

                                //}
                                //// Finish the block of text
                                //writer.WriteElement(elementBuilder.CreateTextEnd());


                            }
                            #endregion


                        }


                        catch (PDFNetException ex)
                        {
                            string _ErrorMessage = ex.ToString();
                            #region " Log Exception "

                            if (_ErrorMessage.Trim() != "")
                            {
                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _MessageString = "";
                            }

                            #endregion
                        }

                        // #endregion " Set the Text Matrix for Provider Name (text) in Page "


                            #endregion

                        //Commented By Dhruv
                        #region " Set the Text Matrix for Acknowledge (text) in Page "
                        //        if (YTextPos1 <= 100)
                        //        {
                        //            writer.End();
                        //            FileContainer.PagePushBack(page);

                        //            temoarry = AddPages(page, FileContainer);
                        //            arrPage.Add(page.GetIndex());

                        //            #region "Insert water Mark"
                        //            if (gloEDocV3Admin.ISDMSDEMO == true)
                        //            {
                        //                FileContainer.InitSecurityHandler();
                        //                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                        //                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                        //            }
                        //            #endregion


                        //            page = FileContainer.PageCreate();
                        //            writer.Begin(page);

                        //            YTextPos1 = pHeight;
                        //        }


                        //        //acknowledge

                        //        oNTAOs = oList1.GetAcknowledges(oSelectedDocuments, oClinicID);
                        //        //string Ack = "";
                        //        ArrayList arrAcknowledgement = new ArrayList();
                        //        if (oNTAOs != null)
                        //        {
                        //            for (int i = 0; i <= oNTAOs.Count - 1; i++)
                        //            {
                        //                //Ack = "Acknowledgement" + "\n" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString();
                        //                //arrAcknowledgement.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.Replace("\r\n", " ").ToString());
                        //                arrAcknowledgement.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.ToString());
                        //            }
                        //            if (oNTAOs.Count > 0)
                        //            {
                        //                //dhruv To Print only the Acknowledgement text--------------------------------
                        //                element = elementBuilder.CreateTextBegin(fnt, 10);
                        //                YTextPos1 = YTextPos1 - counterheight - 5;
                        //                element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                        //                element.GetGState().SetLeading(2);
                        //                writer.WriteElement(element);
                        //                writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //                writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Acknowledgement"));
                        //                writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //                writer.WriteElement(elementBuilder.CreateTextEnd());
                        //            }
                        //            //---------------------------------------------------------------------------
                        //        }





                        //        #region "Print the Multiline Annots Text"
                        //        foreach (string wordAcknowledgement in arrAcknowledgement)
                        //        {
                        //            element = elementBuilder.CreateTextBegin(fnt, 10);
                        //            YTextPos1 = YTextPos1 - counterheight - 10;
                        //            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                        //            element.GetGState().SetLeading(10);
                        //            writer.WriteElement(element);


                        //            if (YTextPos1 <= 100)
                        //            {
                        //                writer.End();
                        //                FileContainer.PagePushBack(page);

                        //                temoarry = AddPages(page, FileContainer);
                        //                arrPage.Add(page.GetIndex());


                        //                #region "Insert water Mark"
                        //                if (gloEDocV3Admin.ISDMSDEMO == true)
                        //                {
                        //                    FileContainer.InitSecurityHandler();
                        //                    gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                        //                    oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                        //                }
                        //                #endregion


                        //                page = FileContainer.PageCreate();
                        //                writer.Begin(page);

                        //                YTextPos1 = pHeight;
                        //            }



                        //            int para_run = 0;
                        //            int para_run_end;
                        //            int sentence_end = wordAcknowledgement.Length;
                        //            while (para_run < sentence_end)
                        //            {
                        //                para_run_end = wordAcknowledgement.IndexOf('\r', para_run);
                        //                //if (para_run_end < 0) para_run_end = sentence_end - 1;
                        //                if (para_run_end < 0) para_run_end = sentence_end;
                        //                string para = wordAcknowledgement.Substring(para_run, para_run_end - para_run);
                        //                int para_end = para.Length;
                        //                int text_run = 0;
                        //                int text_run_end;

                        //                double para_width = pWidth - 100; // paragraph/column width is xx units
                        //                double cur_width = 0;

                        //                while (text_run < para_end)
                        //                {

                        //                    text_run_end = para.IndexOf(' ', text_run);
                        //                    if (text_run_end < 0) text_run_end = para_end - 1;

                        //                    string text = para.Substring(text_run, text_run_end - text_run + 1);
                        //                    element = elementBuilder.CreateUnicodeTextRun(text);
                        //                    if (cur_width + element.GetTextLength() < para_width)
                        //                    {

                        //                        writer.WriteElement(element);
                        //                        cur_width += element.GetTextLength();

                        //                    }

                        //                    else
                        //                    {

                        //                        writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                        //                        text = para.Substring(text_run, text_run_end - text_run + 1);
                        //                        element = elementBuilder.CreateUnicodeTextRun(text);
                        //                        cur_width = element.GetTextLength();
                        //                        writer.WriteElement(element);
                        //                        YTextPos1 = YTextPos1 - counterheight - 5;

                        //                    }

                        //                    text_run = text_run_end + 1;

                        //                }
                        //                writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //                YTextPos1 = YTextPos1 - counterheight - 5;
                        //                para_run = para_run_end + 2;  // {to skip \n)
                        //            }
                        //            // Finish the block of text
                        //            writer.WriteElement(elementBuilder.CreateTextEnd());



                        //            if (YTextPos1 <= 150)
                        //            {
                        //                writer.End();
                        //                FileContainer.PagePushBack(page);

                        //                temoarry = AddPages(page, FileContainer);
                        //                arrPage.Add(page.GetIndex());

                        //                #region "Insert water Mark"
                        //                if (gloEDocV3Admin.ISDMSDEMO == true)
                        //                {
                        //                    FileContainer.InitSecurityHandler();
                        //                    gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                        //                    oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                        //                }
                        //                #endregion

                        //                page = FileContainer.PageCreate();
                        //                writer.Begin(page);

                        //                YTextPos1 = pHeight;

                        //            }
                        //        }
                        //        #endregion


                        //}


                        //catch (PDFNetException ex)
                        //{

                        //}
                        //finally
                        //{
                        //    if (oNTAOs != null)
                        //    {
                        //        oNTAOs.Dispose();
                        //        oNTAOs = null;
                        //    }
                        //    if (oList != null)
                        //    {
                        //        oList.Dispose();
                        //        oList = null;
                        //    }

                        //}
                        //// #endregion " Set the Text Matrix for Provider Name (text) in Page "


                        #endregion
                        //Commented By Dhruv
                        #region " Set the Text Matrix for Provider Name (text) in Page "


                        //#region "Page Break Code"
                        //if (YTextPos1 <= lastY)
                        //{
                        //    element = elementBuilder.CreateTextEnd();
                        //    writer.WriteElement(element);

                        //    writer.End();
                        //    FileContainer.PagePushBack(page);

                        //    temoarry = AddPages(page, FileContainer);
                        //    arrPage.Add(page.GetIndex());

                        //    #region "Insert water Mark"
                        //    if (gloEDocV3Admin.ISDMSDEMO == true)
                        //    {
                        //        FileContainer.InitSecurityHandler();
                        //        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                        //        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                        //    }
                        //    #endregion

                        //    page = FileContainer.PageCreate();
                        //    writer.Begin(page);
                        //    element = elementBuilder.CreateTextBegin(fnt, 10);
                        //    YTextPos1 = pHeight - counterheight;
                        //    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                        //    element.GetGState().SetLeading(10);
                        //    writer.WriteElement(element);



                        //}

                        //#endregion
                        //SigText = _SignetureText;
                        //element = elementBuilder.CreateTextBegin(fnt, 10);
                        //YTextPos1 = YTextPos1 - counterheight;
                        //element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                        //element.GetGState().SetLeading(10);
                        //writer.WriteElement(element);
                        //writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
                        //writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //writer.WriteElement(elementBuilder.CreateTextEnd());
                        //YTextPos1 = YTextPos1 - 2 * counterheight;

                        #endregion " Set the Text Matrix for Provider Name (text) in Page "


                        #region " Set the Text Matrix for Provider Name (text) in Page "

                        #region "Page Break Code"
                        if (YTextPos1 <= lastY)
                        {
                            element = elementBuilder.CreateTextEnd();
                            writer.WriteElement(element);

                            writer.End();
                            FileContainer.PagePushBack(page);

                            temoarry = AddPages(page, FileContainer);
                            arrPage.Add(page.GetIndex());

                            #region "Insert water Mark"
                            if (gloEDocV3Admin.ISDMSDEMO == true)
                            {
                                try
                                {
                                    FileContainer.InitSecurityHandler();
                                }
                                catch (Exception)
                                {

                                    //Intetionally left Blank
                                }

                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                oViewer.Dispose();
                                oViewer = null;
                            }
                            #endregion

                            page = FileContainer.PageCreate();
                            writer.Begin(page);
                            element = elementBuilder.CreateTextBegin(fnt, 10);
                            YTextPos1 = pHeight - counterheight;
                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                            element.GetGState().SetLeading(10);
                            writer.WriteElement(element);



                        }

                        #endregion

                        element = elementBuilder.CreateTextBegin(fnt, 1);
                        SigText = _SignetureText;
                        YTextPos1 -= 5;
                        element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1 - 50);
                        element.GetGState().SetLeading(2);
                        writer.WriteElement(element);
                        writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
                        writer.WriteElement(elementBuilder.CreateTextNewLine());
                        writer.WriteElement(elementBuilder.CreateTextEnd());

                        #endregion " Set the Text Matrix for Provider Name (text) in Page "


                        #region " Add Signature Image to PDF Page "

                        if (elementBuilder != null)
                        {
                            elementBuilder.Dispose();
                            elementBuilder = null;
                        }

                        elementBuilder = new pdftron.PDF.ElementBuilder();
                        YTextPos1 = YTextPos1 - counterheight;
                        pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, _ProviderSign);
                        YTextPos1 -= (img.GetImageHeight() + 10);

                        #region "Page Break Code"
                        if (YTextPos1 <= lastY)
                        {
                            element = elementBuilder.CreateTextEnd();
                            writer.WriteElement(element);

                            writer.End();
                            FileContainer.PagePushBack(page);

                            temoarry = AddPages(page, FileContainer);
                            arrPage.Add(page.GetIndex());

                            #region "Insert water Mark"
                            if (gloEDocV3Admin.ISDMSDEMO == true)
                            {
                                try
                                {
                                    FileContainer.InitSecurityHandler();
                                }
                                catch (Exception)
                                {

                                    //Intetionally left Blank
                                }

                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                oViewer.Dispose();
                                oViewer = null;
                            }
                            #endregion

                            page = FileContainer.PageCreate();
                            writer.Begin(page);
                            element = elementBuilder.CreateTextBegin(fnt, 10);
                            YTextPos1 = pHeight - counterheight;
                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                            element.GetGState().SetLeading(10);
                            writer.WriteElement(element);



                        }

                        #endregion

                        element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XTextPos1, YTextPos1 - _ProviderSign.Height));
                        writer.WritePlacedElement(element);

                        #endregion " Add Signature Image to PDF Page "
                        if (elementBuilder != null)
                        {
                            elementBuilder.Dispose();
                            elementBuilder = null;
                        }
                        elementBuilder = new pdftron.PDF.ElementBuilder();
                        element = elementBuilder.CreateTextBegin(fnt, 1);
                        string SigTextFotter = _SignetureName;
                        YTextPos1 -= (img.GetImageHeight() + 10);

                        #region "Page Break Code"
                        if (YTextPos1 <= lastY)
                        {
                            element = elementBuilder.CreateTextEnd();
                            writer.WriteElement(element);

                            writer.End();
                            FileContainer.PagePushBack(page);

                            temoarry = AddPages(page, FileContainer);
                            arrPage.Add(page.GetIndex());

                            #region "Insert water Mark"
                            if (gloEDocV3Admin.ISDMSDEMO == true)
                            {
                                try
                                {
                                    FileContainer.InitSecurityHandler();
                                }
                                catch (Exception)
                                {

                                    //Intetionally left Blank
                                }

                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                oViewer.Dispose();
                                oViewer = null;
                            }
                            #endregion

                            page = FileContainer.PageCreate();
                            writer.Begin(page);
                            element = elementBuilder.CreateTextBegin(fnt, 10);
                            YTextPos1 = pHeight;
                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                            element.GetGState().SetLeading(10);
                            writer.WriteElement(element);



                        }

                        #endregion

                        element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
                        element.GetGState().SetLeading(2);		 // Set the spacing between lines
                        writer.WriteElement(element);

                        #region " Add Provider Name to end of signature "

                        #region "Page Break Code"
                        if (YTextPos1 <= lastY)
                        {
                            element = elementBuilder.CreateTextEnd();
                            writer.WriteElement(element);

                            writer.End();
                            FileContainer.PagePushBack(page);

                            temoarry = AddPages(page, FileContainer);
                            arrPage.Add(page.GetIndex());

                            #region "Insert water Mark"
                            if (gloEDocV3Admin.ISDMSDEMO == true)
                            {
                                try
                                {
                                    FileContainer.InitSecurityHandler();
                                }
                                catch (Exception)
                                {

                                    //Intetionally left Blank
                                }

                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                oViewer.Dispose();
                                oViewer = null;
                            }
                            #endregion

                            page = FileContainer.PageCreate();
                            writer.Begin(page);
                            element = elementBuilder.CreateTextBegin(fnt, 10);
                            YTextPos1 = pHeight - counterheight;
                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                            element.GetGState().SetLeading(10);
                            writer.WriteElement(element);



                        }

                        #endregion

                        writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
                        writer.WriteElement(elementBuilder.CreateTextNewLine());
                        writer.WriteElement(elementBuilder.CreateTextEnd());


                        #endregion " Add Provider Name to end of signature "


                        writer.End();// Finish writing to the page
                        FileContainer.PagePushBack(page);
                        arrPage.Add(page.GetIndex());
                        temoarry.Add(FileContainer);




                        #region "Insert the Watermark to the page"
                        if (gloEDocV3Admin.ISDMSDEMO == true)
                        {
                            foreach (PDFDoc pd in temoarry)
                            {
                                if (temoarry[temoarry.Count - 1] != null)
                                {
                                    try
                                    {
                                        FileContainer.InitSecurityHandler();
                                    }
                                    catch (Exception)
                                    {

                                        //Intetionally left Blank
                                    }

                                    gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                    oViewer.InsertWaterMarkToWholeDcoument1(pd, page);
                                    oViewer.Dispose();
                                    oViewer = null;
                                    break;
                                }
                            }
                        }
                        #endregion


                        //_SignaturePageNumber = page.GetIndex();


                        foreach (PDFDoc fd in temoarry)
                        {
                            if (temoarry[temoarry.Count - 1] != null)
                            {
                                _signedPDFFile = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".pdf";
                                FileContainer.Save(_signedPDFFile, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                                //int pagecount = FileContainer.GetPageCount();
                                FileContainer.Close();
                                break;
                            }
                        }




                        if (writer != null) { writer.Dispose(); writer = null; }
                        if (element != null) { element = null; }
                        if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                        if (fnt != null) { fnt.Dispose(); fnt = null; }
                        if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                        if (img != null) { img.Dispose(); img = null; }
                        _Result = true;




                        #endregion
                    }

                        #endregion " Generate PDF Tron Page & Insert into PDF Doc "


                    if (_Result == true)
                    {
                        #region " Update Database Details "

                        SqlConnection _sqlConnnetion = null;
                        SqlTransaction _sqlTransaction = null;
                        SqlParameter _sqlParameter = null;
                        SqlCommand _sqlCommand = null;

                        try
                        {
                            //Change by Rahul Patel on 26-10-2010 
                            // change made for DMS connection string
                            _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                            _sqlConnnetion.Open();

                            _sqlTransaction = _sqlConnnetion.BeginTransaction();


                            #region " Update Document Details "

                            int PageCnt = arrPage.Count;

                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " UPDATE eDocument_Details_V3_RCM  WITH(ROWLOCK) SET PageCounts = (PageCounts +" + PageCnt + ") , ModifiedDateTime = dbo.gloGetDate() " +
                                                        " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                            }
                            else
                            {
                                _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = (PageCounts +" + PageCnt + ") , ModifiedDateTime = dbo.gloGetDate() " +
                                                        " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                            }

                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                            _sqlCommand.ExecuteNonQuery();

                            #endregion

                            #region " Update Container Details "

                            _sqlQuery = "";

                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+" + PageCnt + ") " +
                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                            }
                            else
                            {
                                _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+" + PageCnt + ") " +
                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                            }

                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;

                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);

                            _sqlCommand.ExecuteNonQuery();
                            ///Problem arrPage Count was not set properly by default it was set to 1.
                            //14709-Start/ Scan Docs>>Import Pdf>>Give acknowledge and Notes to document>>shifting to other category>>Data is Loss



                            if (System.IO.File.Exists(_signedPDFFile) == true)
                            {
                                Cls_SQLFileStream.SaveFile(ContainerID, DocumentID, _signedPDFFile, _sqlTransaction, gloEDocV3Admin.gClinicID, _OpenExternalSource);
                            }
                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;

                            #endregion

                            #region " Update Page Details "
                            foreach (int i in arrPage)
                            {
                                _sqlQuery = "";

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3_RCM WITH(NOLOCK)" +
                                            " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                            " AND eDocumentID = " + DocumentID + " " +
                                            " AND eContainerID = " + ContainerID + " " +
                                            " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                }
                                else
                                {
                                    _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3 WITH(NOLOCK)" +
                                            " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                            " AND eDocumentID = " + DocumentID + " " +
                                            " AND eContainerID = " + ContainerID + " " +
                                            " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                }

                                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                Object retVal = _sqlCommand.ExecuteScalar();

                                if (retVal != null && System.Convert.ToInt16(retVal) > 0)
                                { _SignaturePageName = "Sign " + (System.Convert.ToInt16(retVal)); }
                                else
                                { _SignaturePageName = "Sign " + _SignaturePageNumber.ToString(); }

                                if (retVal != null) { retVal = null; }

                                _SignaturePageNumber = i;

                                _sqlQuery = "";

                                string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + _SignaturePageNumber.ToString();

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _sqlQuery = "INSERT INTO eDocument_Pages_V3_RCM " +
                                " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                                " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                                }
                                else
                                {
                                    _sqlQuery = "INSERT INTO eDocument_Pages_V3 " +
                                " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                                " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                                }

                                _sqlCommand.Parameters.Clear();
                                _sqlCommand.Dispose();
                                _sqlCommand = null;
                                _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                _sqlCommand.ExecuteNonQuery();
                                _sqlCommand.Parameters.Clear();
                                _sqlCommand.Dispose();
                                _sqlCommand = null;
                                //}
                            }
                            #endregion

                            _sqlTransaction.Commit();

                        }
                        catch (Exception ex)
                        {
                            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                            _sqlTransaction.Rollback();
                        }
                        finally
                        {
                            if (_sqlParameter != null) { _sqlParameter = null; }
                            if (_sqlCommand != null)
                            {
                                _sqlCommand.Parameters.Clear();
                                _sqlCommand.Dispose();
                                _sqlCommand = null;
                            }
                            if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
                            if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

                            #region " Delete Temporary Files "

                            try
                            {

                                if (File.Exists(_strSignFileName)) { File.Delete(_strSignFileName); }
                                if (File.Exists(_signedPDFFile) == true) { File.Delete(_signedPDFFile); }
                                if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
                            }
                            catch (Exception ex)
                            {
                                string _ErrorMessage = ex.ToString();
                                #region " Log Exception "

                                if (_ErrorMessage.Trim() != "")
                                {
                                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                    _MessageString = "";
                                }

                                #endregion
                            }

                            #endregion
                        }

                        #endregion " Update Database Details "
                    }


                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                    #region " Log Exception "

                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    #endregion

                }
                finally
                {
                    if (oNTAOs != null)
                    {
                        oNTAOs.Dispose();
                        oNTAOs = null;
                    }
                    if (oList1 != null)
                    {
                        oList1.Dispose();
                        oList1 = null;
                    }
                    if (FileContainer != null)
                    {
                        FileContainer.Dispose();
                        FileContainer = null;
                    }

                    if (_ProviderSign != null)
                    {
                        _ProviderSign.Dispose();
                        _ProviderSign = null;
                    }
                }
                signaturefound = _signaturefound;
                return _Result;
            }

            private pdftron.PDF.Element WriteTextToPDF(pdftron.PDF.PDFDoc FileContainer, ref pdftron.PDF.Page page, ref ArrayList temoarry, ArrayList arrPage, pdftron.PDF.ElementBuilder elementBuilder, pdftron.PDF.ElementWriter writer, pdftron.PDF.Font fnt, double pHeight, double pWidth, int counterheight, double XTextPos1, ref double YTextPos1, double lastY, string word)
            {
                pdftron.PDF.Element element;
                element = elementBuilder.CreateTextBegin(fnt, 10);
                element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                element.GetGState().SetLeading(10);
                writer.WriteElement(element);

                int para_run = 0;
                int para_run_end;
                int sentence_end = word.Length;
                while (para_run < sentence_end)
                {
                    para_run_end = word.IndexOf('\r', para_run);
                    //if (para_run_end < 0) para_run_end = sentence_end - 1;
                    if (para_run_end < 0) para_run_end = sentence_end;
                    string para = word.Substring(para_run, para_run_end - para_run);
                    int para_end = para.Length;
                    int text_run = 0;
                    int text_run_end;

                    double para_width = pWidth - 100; // paragraph/column width is xx units
                    double cur_width = 0;

                    while (text_run < para_end)
                    {

                        text_run_end = para.IndexOf(' ', text_run);
                        if (text_run_end < 0) text_run_end = para_end - 1;

                        string text = para.Substring(text_run, text_run_end - text_run + 1);
                        element = elementBuilder.CreateUnicodeTextRun(text);
                        if (cur_width + element.GetTextLength() < para_width)
                        {

                            writer.WriteElement(element);
                            cur_width += element.GetTextLength();
                            text_run = text_run_end + 1;



                        }

                        else
                        {

                            if (cur_width == 0)
                            {

                                while (text_run < text_run_end)
                                {



                                    string text1 = para.Substring(text_run, 1);
                                    element = elementBuilder.CreateUnicodeTextRun(text1);
                                    if (cur_width + element.GetTextLength() < para_width)
                                    {

                                        writer.WriteElement(element);
                                        cur_width += element.GetTextLength();

                                    }

                                    else
                                    {

                                        writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                        YTextPos1 = YTextPos1 - counterheight;
                                        #region "Page Break Code"
                                        if (YTextPos1 <= lastY)
                                        {
                                            element = elementBuilder.CreateTextEnd();
                                            writer.WriteElement(element);

                                            writer.End();
                                            FileContainer.PagePushBack(page);

                                            temoarry = AddPages(page, FileContainer);
                                            arrPage.Add(page.GetIndex());

                                            #region "Insert water Mark"
                                            if (gloEDocV3Admin.ISDMSDEMO == true)
                                            {
                                                try
                                                {
                                                    FileContainer.InitSecurityHandler();
                                                }
                                                catch (Exception)
                                                {

                                                    //Intetionally left Blank
                                                }

                                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                                oViewer.Dispose();
                                                oViewer = null;
                                            }
                                            #endregion

                                            page = FileContainer.PageCreate();
                                            writer.Begin(page);
                                            element = elementBuilder.CreateTextBegin(fnt, 10);
                                            YTextPos1 = pHeight - counterheight;
                                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                            element.GetGState().SetLeading(10);
                                            writer.WriteElement(element);



                                        }

                                        #endregion
                                        text1 = para.Substring(text_run, 1);
                                        element = elementBuilder.CreateUnicodeTextRun(text1);
                                        cur_width = element.GetTextLength();
                                        writer.WriteElement(element);


                                    }
                                    text_run++;
                                }




                            }
                            else
                            {
                                writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                cur_width = 0;
                                YTextPos1 = YTextPos1 - counterheight;

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);


                                }
                                #endregion

                            }

                        }



                    }
                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                    YTextPos1 = YTextPos1 - counterheight;
                    para_run = para_run_end + 2;  // {to skip \n)
                    #region "Page Break Code"
                    if (YTextPos1 <= lastY)
                    {
                        element = elementBuilder.CreateTextEnd();
                        writer.WriteElement(element);

                        writer.End();
                        FileContainer.PagePushBack(page);

                        temoarry = AddPages(page, FileContainer);
                        arrPage.Add(page.GetIndex());

                        #region "Insert water Mark"
                        if (gloEDocV3Admin.ISDMSDEMO == true)
                        {
                            try
                            {
                                FileContainer.InitSecurityHandler();
                            }
                            catch (Exception)
                            {

                                //Intetionally left Blank
                            }

                            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                            oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                            oViewer.Dispose();
                            oViewer = null;
                        }
                        #endregion

                        page = FileContainer.PageCreate();

                        writer.Begin(page);
                        element = elementBuilder.CreateTextBegin(fnt, 10);
                        YTextPos1 = pHeight - counterheight;
                        element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                        element.GetGState().SetLeading(10);
                        writer.WriteElement(element);



                    }

                    #endregion

                }
                // Finish the block of text
                writer.WriteElement(elementBuilder.CreateTextEnd());
                return element;
            }

            public bool InsertSignInPDFDocWithAcknowledgement(Int64 PatientID, Int64 documentid, Int64 containerid, DocumentContextMenu.eContextDocuments oSelectedDocuments, Int64 SignatureID, int flag, out bool signaturefound, string strNotes, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {

                #region  " Variable Declarations "
                pdftron.PDF.PDFDoc FileContainer = null;
                //Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                //Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                //DataTable dt = new DataTable();
                string _SignetureText = "";
                string _SignetureName = "";
                System.Drawing.Bitmap _ProviderSign = null;
                //   System.Drawing.PointF SignTextLocation = new System.Drawing.PointF();
                bool _Result = false;
                string _strSignFileName = "";
                string _sqlQuery = "";
                string _signedPDFFile = "";
                Int64 DocumentID = documentid;
                Int64 ContainerID = containerid;
                int _SignaturePageNumber = 0;
                string _SignaturePageName = "";
                bool _signaturefound = false;
                //     bool _isAcknowledgementPresent = false; //to check wheather acknowledgement present or not
                //    string sNotes = "";
                pdftron.PDF.Page page = null;
                ArrayList temoarry = new ArrayList();
                ArrayList arrPage = new ArrayList();
                string SigText = "";
                Common.NTAOs oNTAOs = null; //object of the nato class
                gloEDocumentV3.eDocManager.eDocGetList oList1; //object of the getdoclist class
                #endregion

                try
                {
                    #region "Generate PDF Doc Object"
                    string _FilePath = "";
                    string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

                    if (System.IO.Directory.Exists(_FolderPath) == true)
                    {
                        System.IO.Directory.Delete(_FolderPath, true);
                    }
                    System.IO.Directory.CreateDirectory(_FolderPath);
                    _FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

                    gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                    oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, ref  _FilePath, _OpenExternalSource);
                    oList.Dispose();

                    FileContainer = new pdftron.PDF.PDFDoc(_FilePath);

                    #endregion

                    if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
                        oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
                    {
                        DocumentID = oSelectedDocuments[0].DocumentID;
                        ContainerID = oSelectedDocuments[0].Containers[0].ContainerID;
                    }
                    else
                    { signaturefound = _signaturefound; return false; }



                    //Developer: Yatin N.Bhagat
                    //Date:01/29/2012
                    //Bug ID/PRD Name/Salesforce Case:Salesforce Case No.GLO2010-0009688 - Provider Signature Format
                    //Reason: If Condition is added to check the Setting to add login user name in the Sign


                    //string _FFolderPath = gloEDocV3Admin.gPDFTronTemporaryProcessPath;
                    //if (System.IO.Directory.Exists(_FFolderPath) == false)
                    //{
                    //    //System.IO.Directory.Delete(_FFolderPath, true);
                    //    System.IO.Directory.CreateDirectory(_FFolderPath);
                    //}
                    //#region "Retrive Binary Image"
                    //oDB.Connect(false);
                    //oParameters.Add("@nPatientID", SignatureID, ParameterDirection.Input, SqlDbType.BigInt);
                    ////Sanjog - Added On 20101011 to insert signature 
                    //oParameters.Add("@nFlag", flag, ParameterDirection.Input, SqlDbType.Int);
                    ////Sanjog - Added On 20101011 to insert signature
                    //oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);
                    //if (dt != null)
                    //{
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
                    //        {
                    //            byte[] content = null;
                    //            content = (byte[])dt.Rows[0][0];
                    //            _strSignFileName = _FFolderPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";
                    //            MemoryStream oDataStream = new MemoryStream(content);
                    //            FileStream fileStream = new FileStream(_strSignFileName, FileMode.Create);
                    //            oDataStream.WriteTo(fileStream);
                    //            fileStream.Flush();
                    //            fileStream.Close();
                    //            fileStream.Dispose();
                    //            _ProviderSign = new System.Drawing.Bitmap(_strSignFileName);
                    //            _SignetureName = dt.Rows[0]["ProviderName"].ToString();
                    //            _SignetureText = "Document reviewed by " + _SignetureName + " on " + DateTime.Now;
                    //            _signaturefound = true;
                    //        }
                    //    }
                    //}
                    //if (dt != null) { dt.Dispose(); }
                    //#endregion
                    //#region " Generate PDF Tron Page & Insert into PDF Doc "

                    ArrayList arSignature = GetSignatureFormat(SignatureID, flag, 0);
                    //SLR: stream not needed 12/22
                    byte[] arrByte = (byte[])arSignature[0];
                    //MemoryStream oDataStream = new MemoryStream((byte[])arSignature[0]);
                    if (arrByte != null)
                    {
                        FileStream fileStream = new FileStream(arSignature[1].ToString(), FileMode.Create);
                        fileStream.Write(arrByte, 0, arrByte.Length);
                        //oDataStream.WriteTo(fileStream);
                        fileStream.Flush();
                        fileStream.Close();
                        fileStream.Dispose();
                    }
                    //oDataStream.Close();
                    //oDataStream.Dispose();
                    _ProviderSign = new System.Drawing.Bitmap(arSignature[1].ToString());
                    _SignetureText = arSignature[3].ToString();
                    _signaturefound = System.Convert.ToBoolean(arSignature[4].ToString());

                    /////

                    if (_ProviderSign != null)
                    {
                        #region "New Code"



                        pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
                        pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
                        pdftron.PDF.Element element = null;
                        //System.Drawing.Bitmap bmp;
                        pdftron.PDF.Font fnt;


                        //commneted by dhruv: Declared this variable above this loop
                        //pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
                        page = FileContainer.PageCreate(); // Start a new page 
                        writer.Begin(page);




                        #region " Set Page Font "
                        try
                        {
                            //System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 8F);
                            System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 2F);
                            fnt = pdftron.PDF.Font.CreateCIDTrueTypeFont(FileContainer, myfont, true, true);
                            myfont.Dispose();
                            myfont = null;
                        }
                        catch (Exception e)
                        { _ErrorMessage = e.Message; signaturefound = _signaturefound; return _Result; }

                        #endregion

                        double pHeight = page.GetPageHeight();
                        double pWidth = page.GetPageWidth();

                        int counterheight = 11;
                        double XTextPos1 = 20;
                        double YTextPos1 = pHeight - counterheight;
                        double lastY = counterheight * 2;
                        #region"Notes and Acknowledge"


                        Int64 oClinicID = gloEDocV3Admin.gClinicID;
                        oList1 = new gloEDocumentV3.eDocManager.eDocGetList(); //initalizing the obj
                        //                 oNTAOs = new gloEDocumentV3.Common.NTAOs();//initalizing the obj

                        #region " Set the Text Matrix for Acknowledge (text) in Page "
                        //acknowledge
                        try
                        {
                            oNTAOs = oList1.GetAcknowledges(oSelectedDocuments, oClinicID, _OpenExternalSource);
                            //string Ack = "";
                            ArrayList arrAcknowledgement = new ArrayList();
                            if (oNTAOs != null)
                            {
                                for (int i = 0; i <= oNTAOs.Count - 1; i++)
                                {
                                    arrAcknowledgement.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.ToString());

                                }


                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                if (oNTAOs.Count > 0)
                                {
                                    //dhruv To Print only the Acknowledgement text--------------------------------
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = YTextPos1 - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Acknowledgement"));
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateTextEnd());
                                    YTextPos1 = YTextPos1 - 2 * counterheight;
                                }
                                else
                                {
                                    signaturefound = false;
                                    MessageBox.Show("Please enter acknowledgement", gloEDocV3Admin.gMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    writer.End();
                                    oNTAOs.Dispose();
                                    oNTAOs = null;
                                    if (writer != null) { writer.Dispose(); writer = null; }
                                    if (element != null) { element = null; }
                                    if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                                    if (fnt != null) { fnt.Dispose(); fnt = null; };
                                    if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                                    return false;
                                }
                                //---------------------------------------------------------------------------
                            }





                            #region "Print the Multiline Annots Text"
                            foreach (string wordAcknowledgement in arrAcknowledgement)
                            {
                                element = WriteTextToPDF(FileContainer, ref page, ref temoarry, arrPage, elementBuilder, writer, fnt, pHeight, pWidth, counterheight, XTextPos1, ref YTextPos1, lastY, wordAcknowledgement);

                                //element = elementBuilder.CreateTextBegin(fnt, 10);
                                //element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //element.GetGState().SetLeading(10);
                                //writer.WriteElement(element);
                                //int para_run = 0;
                                //int para_run_end;
                                //int sentence_end = wordAcknowledgement.Length;
                                //while (para_run < sentence_end)
                                //{
                                //    para_run_end = wordAcknowledgement.IndexOf('\r', para_run);
                                //    //if (para_run_end < 0) para_run_end = sentence_end - 1;
                                //    if (para_run_end < 0) para_run_end = sentence_end;
                                //    string para = wordAcknowledgement.Substring(para_run, para_run_end - para_run);
                                //    int para_end = para.Length;
                                //    int text_run = 0;
                                //    int text_run_end;

                                //    double para_width = pWidth - 100; // paragraph/column width is xx units
                                //    double cur_width = 0;

                                //    while (text_run < para_end)
                                //    {

                                //        text_run_end = para.IndexOf(' ', text_run);
                                //        if (text_run_end < 0) text_run_end = para_end - 1;

                                //        string text = para.Substring(text_run, text_run_end - text_run + 1);
                                //        element = elementBuilder.CreateUnicodeTextRun(text);
                                //        if (cur_width + element.GetTextLength() < para_width)
                                //        {

                                //            writer.WriteElement(element);
                                //            cur_width += element.GetTextLength();
                                //            text_run = text_run_end + 1;

                                //        }

                                //        else
                                //        {

                                //            if (cur_width == 0)
                                //            {

                                //                while (text_run < text_run_end)
                                //                {



                                //                    string text1 = para.Substring(text_run, 1);
                                //                    element = elementBuilder.CreateUnicodeTextRun(text1);
                                //                    if (cur_width + element.GetTextLength() < para_width)
                                //                    {

                                //                        writer.WriteElement(element);
                                //                        cur_width += element.GetTextLength();

                                //                    }

                                //                    else
                                //                    {

                                //                        writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                //                        YTextPos1 = YTextPos1 - counterheight;
                                //                        #region "Page Break Code"
                                //                        if (YTextPos1 <= lastY)
                                //                        {
                                //                            element = elementBuilder.CreateTextEnd();
                                //                            writer.WriteElement(element);

                                //                            writer.End();
                                //                            FileContainer.PagePushBack(page);

                                //                            temoarry = AddPages(page, FileContainer);
                                //                            arrPage.Add(page.GetIndex());

                                //                            #region "Insert water Mark"
                                //                            if (gloEDocV3Admin.ISDMSDEMO == true)
                                //                            {
                                //                                FileContainer.InitSecurityHandler();
                                //                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //                                oViewer.Dispose();
                                //                                oViewer = null;
                                //                            }
                                //                            #endregion

                                //                            page = FileContainer.PageCreate();
                                //                            writer.Begin(page);
                                //                            element = elementBuilder.CreateTextBegin(fnt, 10);
                                //                            YTextPos1 = pHeight - counterheight;
                                //                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //                            element.GetGState().SetLeading(10);
                                //                            writer.WriteElement(element);

                                //                        }

                                //                        #endregion
                                //                        text1 = para.Substring(text_run, 1);
                                //                        element = elementBuilder.CreateUnicodeTextRun(text1);
                                //                        cur_width = element.GetTextLength();
                                //                        writer.WriteElement(element);

                                //                    }
                                //                    text_run++;
                                //                }

                                //            }
                                //            else
                                //            {
                                //                writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                //                cur_width = 0;
                                //                YTextPos1 = YTextPos1 - counterheight;

                                //                #region "Page Break Code"
                                //                if (YTextPos1 <= lastY)
                                //                {
                                //                    element = elementBuilder.CreateTextEnd();
                                //                    writer.WriteElement(element);

                                //                    writer.End();
                                //                    FileContainer.PagePushBack(page);

                                //                    temoarry = AddPages(page, FileContainer);
                                //                    arrPage.Add(page.GetIndex());

                                //                    #region "Insert water Mark"
                                //                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                //                    {
                                //                        FileContainer.InitSecurityHandler();
                                //                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //                        oViewer.Dispose();
                                //                        oViewer = null;
                                //                    }
                                //                    #endregion

                                //                    page = FileContainer.PageCreate();
                                //                    writer.Begin(page);
                                //                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                //                    YTextPos1 = pHeight - counterheight;
                                //                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //                    element.GetGState().SetLeading(10);
                                //                    writer.WriteElement(element);


                                //                }
                                //                #endregion

                                //            }

                                //        }

                                //    }
                                //    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                //    YTextPos1 = YTextPos1 - counterheight;
                                //    para_run = para_run_end + 2;  // {to skip \n)
                                //    #region "Page Break Code"
                                //    if (YTextPos1 <= lastY)
                                //    {
                                //        element = elementBuilder.CreateTextEnd();
                                //        writer.WriteElement(element);

                                //        writer.End();
                                //        FileContainer.PagePushBack(page);

                                //        temoarry = AddPages(page, FileContainer);
                                //        arrPage.Add(page.GetIndex());

                                //        #region "Insert water Mark"
                                //        if (gloEDocV3Admin.ISDMSDEMO == true)
                                //        {
                                //            FileContainer.InitSecurityHandler();
                                //            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //            oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //            oViewer.Dispose();
                                //            oViewer = null;
                                //        }
                                //        #endregion

                                //        page = FileContainer.PageCreate();

                                //        writer.Begin(page);
                                //        element = elementBuilder.CreateTextBegin(fnt, 10);
                                //        YTextPos1 = pHeight - counterheight;
                                //        element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //        element.GetGState().SetLeading(10);
                                //        writer.WriteElement(element);

                                //    }

                                //    #endregion

                                //}
                                //// Finish the block of text
                                //writer.WriteElement(elementBuilder.CreateTextEnd());

                            }
                            #endregion


                        }

                        catch (PDFNetException ex)
                        {
                            _ErrorMessage = ex.ToString();
                            #region " Log Exception "

                            if (_ErrorMessage.Trim() != "")
                            {
                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _MessageString = "";
                            }

                            #endregion
                        }
                        finally
                        {
                            if (oList1 != null)
                            {
                                oList1.Dispose();
                                oList1 = null;
                            }

                        }

                        #endregion
                        if (oNTAOs != null)
                        {
                            if (oNTAOs.Count > 0)
                            {

                                #region " Set the Text Matrix for Provider Name (text) in Page "

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                element = elementBuilder.CreateTextBegin(fnt, 1);
                                SigText = _SignetureText;
                                YTextPos1 -= 5;
                                element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1 - 50);
                                element.GetGState().SetLeading(2);
                                writer.WriteElement(element);
                                writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
                                writer.WriteElement(elementBuilder.CreateTextNewLine());
                                writer.WriteElement(elementBuilder.CreateTextEnd());

                                #endregion " Set the Text Matrix for Provider Name (text) in Page "


                                #region " Add Signature Image to PDF Page "


                                if (elementBuilder != null)
                                {
                                    elementBuilder.Dispose();
                                    elementBuilder = null;
                                }
                                elementBuilder = new pdftron.PDF.ElementBuilder();
                                YTextPos1 = YTextPos1 - counterheight;
                                pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, _ProviderSign);
                                YTextPos1 -= (img.GetImageHeight() + 10);

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XTextPos1, YTextPos1 - _ProviderSign.Height));
                                writer.WritePlacedElement(element);

                                #endregion " Add Signature Image to PDF Page "
                                if (elementBuilder != null)
                                {
                                    elementBuilder.Dispose();
                                    elementBuilder = null;
                                }
                                elementBuilder = new pdftron.PDF.ElementBuilder();
                                element = elementBuilder.CreateTextBegin(fnt, 1);
                                string SigTextFotter = _SignetureName;
                                YTextPos1 -= (img.GetImageHeight() + 10);

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
                                element.GetGState().SetLeading(2);		 // Set the spacing between lines
                                writer.WriteElement(element);

                                #region " Add Provider Name to end of signature "

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
                                writer.WriteElement(elementBuilder.CreateTextNewLine());
                                writer.WriteElement(elementBuilder.CreateTextEnd());


                                #endregion " Add Provider Name to end of signature "


                                writer.End();// Finish writing to the page
                                FileContainer.PagePushBack(page);
                                arrPage.Add(page.GetIndex());
                                temoarry.Add(FileContainer);




                                #region "Insert the Watermark to the page"
                                if (gloEDocV3Admin.ISDMSDEMO == true)
                                {
                                    foreach (PDFDoc pd in temoarry)
                                    {
                                        if (temoarry[temoarry.Count - 1] != null)
                                        {
                                            try
                                            {
                                                FileContainer.InitSecurityHandler();
                                            }
                                            catch (Exception)
                                            {

                                                //Intetionally left Blank
                                            }

                                            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                            oViewer.InsertWaterMarkToWholeDcoument1(pd, page);
                                            oViewer.Dispose();
                                            oViewer = null;
                                            break;
                                        }
                                    }
                                }
                                #endregion


                                //_SignaturePageNumber = page.GetIndex();


                                foreach (PDFDoc fd in temoarry)
                                {
                                    if (temoarry[temoarry.Count - 1] != null)
                                    {
                                        _signedPDFFile = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".pdf";
                                        FileContainer.Save(_signedPDFFile, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                                        //int pagecount = FileContainer.GetPageCount();
                                        FileContainer.Close();
                                        break;
                                    }
                                }




                                if (writer != null) { writer.Dispose(); writer = null; }
                                if (element != null) { element = null; }
                                if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                                if (fnt != null) { fnt.Dispose(); fnt = null; }
                                if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                                if (img != null) { img.Dispose(); img = null; }

                                _Result = true;
                        #endregion
                            }// nato count greater then 0
                        }//Nato != null
                    }

                        #endregion " Generate PDF Tron Page & Insert into PDF Doc "


                    if (oNTAOs != null)
                    {
                        if (oNTAOs.Count > 0)
                        {
                            if (_Result == true)
                            {
                                #region " Update Database Details "

                                SqlConnection _sqlConnnetion = null;
                                SqlTransaction _sqlTransaction = null;
                                SqlParameter _sqlParameter = null;
                                SqlCommand _sqlCommand = null;

                                try
                                {
                                    // Changed By Rahul Patel on 26-10-2010
                                    // For DMS Database connection string
                                    _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                                    _sqlConnnetion.Open();

                                    _sqlTransaction = _sqlConnnetion.BeginTransaction();


                                    #region " Update Document Details "



                                    //14709-Start/ Scan Docs>>Import Pdf>>Give acknowledge and Notes to document>>shifting to other category>>Data is Loss
                                    ///Problem arrPage Count was not set properly by default it was set to 1.

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3_RCM  WITH(ROWLOCK) SET PageCounts = (PageCounts + " + arrPage.Count.ToString() + ") , ModifiedDateTime = dbo.gloGetDate() " +
                                                 " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                                " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                    }
                                    else
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = (PageCounts + " + arrPage.Count.ToString() + ") , ModifiedDateTime = dbo.gloGetDate() " +
                                                 " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                                " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                    }

                                    _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                    _sqlCommand.ExecuteNonQuery();

                                    #endregion

                                    #region " Update Container Details "

                                    _sqlQuery = "";

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlQuery = " UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo + " + arrPage.Count.ToString() + ") " +
                                                " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                    }
                                    else
                                    {
                                        _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo + " + arrPage.Count.ToString() + ") " +
                                                " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                    }

                                    _sqlCommand.Parameters.Clear();
                                    _sqlCommand.Dispose();
                                    _sqlCommand = null;

                                    _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                    _sqlCommand.ExecuteNonQuery();
                                    ///Problem arrPage Count was not set properly by default it was set to 1.
                                    //14709-End/ Scan Docs>>Import Pdf>>Give acknowledge and Notes to document>>shifting to other category>>Data is Loss



                                    if (System.IO.File.Exists(_signedPDFFile) == true)
                                    {
                                        Cls_SQLFileStream.SaveFile(ContainerID, DocumentID, _signedPDFFile, _sqlTransaction, gloEDocV3Admin.gClinicID, _OpenExternalSource);
                                    }

                                    _sqlCommand.Parameters.Clear();
                                    _sqlCommand.Dispose();
                                    _sqlCommand = null;
                                    #endregion

                                    #region " Update Page Details "
                                    foreach (int i in arrPage)
                                    {
                                        _sqlQuery = "";

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3_RCM WITH(NOLOCK)" +
                                                    " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                                    " AND eDocumentID = " + DocumentID + " " +
                                                    " AND eContainerID = " + ContainerID + " " +
                                                    " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                        }
                                        else
                                        {
                                            _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3 WITH(NOLOCK)" +
                                                    " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                                    " AND eDocumentID = " + DocumentID + " " +
                                                    " AND eContainerID = " + ContainerID + " " +
                                                    " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                        }

                                        _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                        Object retVal = _sqlCommand.ExecuteScalar();

                                        if (retVal != null && System.Convert.ToInt16(retVal) > 0)
                                        { _SignaturePageName = "Sign " + (System.Convert.ToInt16(retVal)); }
                                        else
                                        { _SignaturePageName = "Sign " + _SignaturePageNumber.ToString(); }

                                        if (retVal != null) { retVal = null; }

                                        _SignaturePageNumber = i;

                                        _sqlQuery = "";

                                        string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + _SignaturePageNumber.ToString();

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlQuery = "INSERT INTO eDocument_Pages_V3_RCM " +
                                        " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                                        " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                                        }
                                        else
                                        {
                                            _sqlQuery = "INSERT INTO eDocument_Pages_V3 " +
                                        " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                                        " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                                        }

                                        _sqlCommand.Parameters.Clear();
                                        _sqlCommand.Dispose();
                                        _sqlCommand = null;
                                        _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                        _sqlCommand.ExecuteNonQuery();
                                        _sqlCommand.Parameters.Clear();
                                        _sqlCommand.Dispose();
                                        _sqlCommand = null;
                                        //}
                                    }
                                    #endregion

                                    _sqlTransaction.Commit();

                                }
                                catch (Exception ex)
                                {
                                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                    _sqlTransaction.Rollback();
                                }
                                finally
                                {
                                    if (_sqlParameter != null) { _sqlParameter = null; }
                                    if (_sqlCommand != null) { _sqlCommand.Parameters.Clear(); _sqlCommand.Dispose(); _sqlCommand = null; }
                                    if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
                                    if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

                                    #region " Delete Temporary Files "

                                    try
                                    {

                                        if (File.Exists(_strSignFileName)) { File.Delete(_strSignFileName); }
                                        if (File.Exists(_signedPDFFile) == true) { File.Delete(_signedPDFFile); }
                                        if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
                                    }
                                    catch (Exception ex)
                                    {
                                        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                    }

                                    #endregion
                                }

                                #endregion " Update Database Details "
                            }
                        }//Nato count greater then 0
                    }//nato not equal to null


                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;

                    #region " Log Exception "

                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }

                    #endregion
                }
                finally
                {
                    if (oNTAOs != null)
                    {
                        oNTAOs.Dispose();
                        oNTAOs = null;
                    }

                    if (FileContainer != null)
                    {
                        FileContainer.Dispose();
                        FileContainer = null;
                    }

                    if (_ProviderSign != null)
                    {
                        _ProviderSign.Dispose();
                        _ProviderSign = null;
                    }
                    //if (oList1 != null)
                    //{
                    //    oList1.Dispose();
                    //    oList1 = null;
                    //}
                }

                signaturefound = _signaturefound;
                return _Result;
            }

            public bool InsertSignInPDFDocWithNotes(Int64 PatientID, Int64 documentid, Int64 containerid, DocumentContextMenu.eContextDocuments oSelectedDocuments, Int64 SignatureID, int flag, out bool signaturefound, string strNotes, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                #region  " Variable Declarations "
                pdftron.PDF.PDFDoc FileContainer = null;
                //Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                //Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                //   DataTable dt = new DataTable();
                string _SignetureText = "";
                string _SignetureName = "";
                System.Drawing.Bitmap _ProviderSign = null;
                //   System.Drawing.PointF SignTextLocation = new System.Drawing.PointF();
                bool _Result = false;
                string _strSignFileName = "";
                string _sqlQuery = "";
                string _signedPDFFile = "";
                Int64 DocumentID = documentid;
                Int64 ContainerID = containerid;
                int _SignaturePageNumber = 0;
                string _SignaturePageName = "";
                bool _signaturefound = false;
                //    string sNotes = "";
                pdftron.PDF.Page page = null;
                ArrayList temoarry = new ArrayList();
                ArrayList arrPage = new ArrayList();
                string SigText = "";
                Common.NTAOs oNTAOs = null; //object of the nato class
                gloEDocumentV3.eDocManager.eDocGetList oList1; //object of the getdoclist class
                #endregion

                try
                {
                    #region "Generate PDF Doc Object"
                    string _FilePath = "";
                    string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

                    if (System.IO.Directory.Exists(_FolderPath) == true)
                    {
                        System.IO.Directory.Delete(_FolderPath, true);
                    }
                    System.IO.Directory.CreateDirectory(_FolderPath);
                    _FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

                    gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                    oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, ref  _FilePath, _OpenExternalSource);
                    oList.Dispose();

                    FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
                    #endregion

                    if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
                        oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
                    {
                        DocumentID = oSelectedDocuments[0].DocumentID;
                        ContainerID = oSelectedDocuments[0].Containers[0].ContainerID;
                    }
                    else
                    { signaturefound = _signaturefound; return false; }


                    //Developer: Yatin N.Bhagat
                    //Date:01/29/2012
                    //Bug ID/PRD Name/Salesforce Case:Salesforce Case No.GLO2010-0009688 - Provider Signature Format
                    //Reason: If Condition is added to check the Setting to add login user name in the Sign


                    //string _FFolderPath = gloEDocV3Admin.gPDFTronTemporaryProcessPath;
                    //if (System.IO.Directory.Exists(_FFolderPath) == false)
                    //{
                    //    //System.IO.Directory.Delete(_FFolderPath, true);
                    //    System.IO.Directory.CreateDirectory(_FFolderPath);
                    //}
                    //#region "Retrive Binary Image"

                    //oDB.Connect(false);
                    //oParameters.Add("@nPatientID", SignatureID, ParameterDirection.Input, SqlDbType.BigInt);
                    ////Sanjog - Added On 20101011 to insert signature 
                    //oParameters.Add("@nFlag", flag, ParameterDirection.Input, SqlDbType.Int);
                    ////Sanjog - Added On 20101011 to insert signature

                    //oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);

                    //if (dt != null)
                    //{
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
                    //        {
                    //            byte[] content = null;
                    //            content = (byte[])dt.Rows[0][0];
                    //            _strSignFileName = _FFolderPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";
                    //            MemoryStream oDataStream = new MemoryStream(content);
                    //            FileStream fileStream = new FileStream(_strSignFileName, FileMode.Create);
                    //            oDataStream.WriteTo(fileStream);
                    //            fileStream.Flush();
                    //            fileStream.Close();
                    //            fileStream.Dispose();


                    //            _ProviderSign = new System.Drawing.Bitmap(_strSignFileName);
                    //            _SignetureName = dt.Rows[0]["ProviderName"].ToString();
                    //            _SignetureText = "Document reviewed by " + _SignetureName + " on " + DateTime.Now;


                    //            _signaturefound = true;
                    //        }
                    //    }
                    //}
                    //if (dt != null) { dt.Dispose(); }

                    //#endregion

                    ////#region " Generate PDF Tron Page & Insert into PDF Doc "


                    ArrayList arSignature = GetSignatureFormat(SignatureID, flag, 0);
                    //SLR: stream not needed 12/22
                    byte[] arrByte = (byte[])arSignature[0];
                    //MemoryStream oDataStream = new MemoryStream((byte[])arSignature[0]);
                    if (arrByte != null)
                    {
                        FileStream fileStream = new FileStream(arSignature[1].ToString(), FileMode.Create);
                        fileStream.Write(arrByte, 0, arrByte.Length);
                        //oDataStream.WriteTo(fileStream);
                        fileStream.Flush();
                        fileStream.Close();
                        fileStream.Dispose();
                    }
                    //oDataStream.Close();
                    //oDataStream.Dispose();
                    _ProviderSign = new System.Drawing.Bitmap(arSignature[1].ToString());
                    _SignetureText = arSignature[3].ToString();
                    _signaturefound = System.Convert.ToBoolean(arSignature[4].ToString());




                    if (_ProviderSign != null)
                    {
                        #region "New Code"



                        pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
                        pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
                        pdftron.PDF.Element element = null;
                        //System.Drawing.Bitmap bmp;
                        pdftron.PDF.Font fnt;


                        //commneted by dhruv: Declared this variable above this loop
                        //pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
                        page = FileContainer.PageCreate(); // Start a new page 
                        writer.Begin(page);




                        #region " Set Page Font "
                        try
                        {
                            //System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 8F);
                            System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 2F);
                            fnt = pdftron.PDF.Font.CreateCIDTrueTypeFont(FileContainer, myfont, true, true);
                            myfont.Dispose();
                            myfont = null;
                        }
                        catch (Exception e)
                        { _ErrorMessage = e.Message; signaturefound = _signaturefound; return _Result; }

                        #endregion

                        double pHeight = page.GetPageHeight();
                        double pWidth = page.GetPageWidth();

                        int counterheight = 11;
                        double XTextPos1 = 20;
                        double YTextPos1 = pHeight - counterheight;
                        double lastY = counterheight * 2;

                        #region"Notes and Acknowledge"


                        Int64 oClinicID = gloEDocV3Admin.gClinicID;
                        oList1 = new gloEDocumentV3.eDocManager.eDocGetList(); //initalizing the obj
                        oNTAOs = new gloEDocumentV3.Common.NTAOs();//initalizing the obj


                        #region " Set the Text Matrix for Notes (text) in Page "
                        //    string natoPagename = "";
                        try
                        {
                            ArrayList arrNoteDescriptions = new ArrayList();
                            oNTAOs = oList.GetNotes(oSelectedDocuments, oClinicID, _OpenExternalSource);
                            if (oNTAOs != null)
                            {
                                for (int i = 0; i <= oNTAOs.Count - 1; i++)
                                {
                                    arrNoteDescriptions.Add(oNTAOs[i].PageName);
                                    arrNoteDescriptions.Add(oNTAOs[i].NTAODateTime + ":" + oNTAOs[i].NTAODescription.ToString());

                                }


                                if (oNTAOs.Count > 0)
                                {

                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = YTextPos1 - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateUnicodeTextRun("Notes"));
                                    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                    writer.WriteElement(elementBuilder.CreateTextEnd());
                                    YTextPos1 = YTextPos1 - 2 * counterheight;
                                }
                                else
                                {
                                    signaturefound = false;
                                    MessageBox.Show("Please enter notes", gloEDocV3Admin.gMessageBoxCaption, MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    writer.End();
                                    oNTAOs.Dispose();
                                    oNTAOs = null;
                                    if (writer != null) { writer.Dispose(); writer = null; }
                                    if (element != null) { element = null; }
                                    if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                                    if (fnt != null) { fnt.Dispose(); fnt = null; };
                                    if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                                    return false;
                                }
                            }

                            #region "Print the Multiline Annots"
                            foreach (string word in arrNoteDescriptions)
                            {
                                element = WriteTextToPDF(FileContainer, ref page, ref temoarry, arrPage, elementBuilder, writer, fnt, pHeight, pWidth, counterheight, XTextPos1, ref YTextPos1, lastY, word);

                                //element = elementBuilder.CreateTextBegin(fnt, 10);
                                //element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //element.GetGState().SetLeading(10);
                                //writer.WriteElement(element);


                                //int para_run = 0;
                                //int para_run_end;
                                //int sentence_end = word.Length;
                                //while (para_run < sentence_end)
                                //{
                                //    para_run_end = word.IndexOf('\r', para_run);
                                //    //if (para_run_end < 0) para_run_end = sentence_end - 1;
                                //    if (para_run_end < 0) para_run_end = sentence_end;
                                //    string para = word.Substring(para_run, para_run_end - para_run);
                                //    int para_end = para.Length;
                                //    int text_run = 0;
                                //    int text_run_end;

                                //    double para_width = pWidth - 100; // paragraph/column width is xx units
                                //    double cur_width = 0;

                                //    while (text_run < para_end)
                                //    {

                                //        text_run_end = para.IndexOf(' ', text_run);
                                //        if (text_run_end < 0) text_run_end = para_end - 1;

                                //        string text = para.Substring(text_run, text_run_end - text_run + 1);
                                //        element = elementBuilder.CreateUnicodeTextRun(text);
                                //        if (cur_width + element.GetTextLength() < para_width)
                                //        {

                                //            writer.WriteElement(element);
                                //            cur_width += element.GetTextLength();
                                //            text_run = text_run_end + 1;



                                //        }

                                //        else
                                //        {

                                //            if (cur_width == 0)
                                //            {

                                //                while (text_run < text_run_end)
                                //                {



                                //                    string text1 = para.Substring(text_run, 1);
                                //                    element = elementBuilder.CreateUnicodeTextRun(text1);
                                //                    if (cur_width + element.GetTextLength() < para_width)
                                //                    {

                                //                        writer.WriteElement(element);
                                //                        cur_width += element.GetTextLength();

                                //                    }

                                //                    else
                                //                    {

                                //                        writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                //                        YTextPos1 = YTextPos1 - counterheight;
                                //                        #region "Page Break Code"
                                //                        if (YTextPos1 <= lastY)
                                //                        {
                                //                            element = elementBuilder.CreateTextEnd();
                                //                            writer.WriteElement(element);

                                //                            writer.End();
                                //                            FileContainer.PagePushBack(page);

                                //                            temoarry = AddPages(page, FileContainer);
                                //                            arrPage.Add(page.GetIndex());

                                //                            #region "Insert water Mark"
                                //                            if (gloEDocV3Admin.ISDMSDEMO == true)
                                //                            {
                                //                                FileContainer.InitSecurityHandler();
                                //                                gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //                                oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //                                oViewer.Dispose();
                                //                                oViewer = null;
                                //                            }
                                //                            #endregion

                                //                            page = FileContainer.PageCreate();
                                //                            writer.Begin(page);
                                //                            element = elementBuilder.CreateTextBegin(fnt, 10);
                                //                            YTextPos1 = pHeight - counterheight;
                                //                            element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //                            element.GetGState().SetLeading(10);
                                //                            writer.WriteElement(element);



                                //                        }

                                //                        #endregion
                                //                        text1 = para.Substring(text_run, 1);
                                //                        element = elementBuilder.CreateUnicodeTextRun(text1);
                                //                        cur_width = element.GetTextLength();
                                //                        writer.WriteElement(element);


                                //                    }
                                //                    text_run++;
                                //                }




                                //            }
                                //            else
                                //            {
                                //                //text = para.Substring(text_run, text_run_end - text_run + 1);
                                //                //element = elementBuilder.CreateUnicodeTextRun(text);
                                //                //cur_width = element.GetTextLength();
                                //                //writer.WriteElement(element);
                                //                writer.WriteElement(elementBuilder.CreateTextNewLine()); // New line
                                //                cur_width = 0;
                                //                YTextPos1 = YTextPos1 - counterheight;

                                //                #region "Page Break Code"
                                //                if (YTextPos1 <= lastY)
                                //                {
                                //                    element = elementBuilder.CreateTextEnd();
                                //                    writer.WriteElement(element);

                                //                    writer.End();
                                //                    FileContainer.PagePushBack(page);

                                //                    temoarry = AddPages(page, FileContainer);
                                //                    arrPage.Add(page.GetIndex());

                                //                    #region "Insert water Mark"
                                //                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                //                    {
                                //                        FileContainer.InitSecurityHandler();
                                //                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //                        oViewer.Dispose();
                                //                        oViewer = null;
                                //                    }
                                //                    #endregion

                                //                    page = FileContainer.PageCreate();
                                //                    writer.Begin(page);
                                //                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                //                    YTextPos1 = pHeight - counterheight;
                                //                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //                    element.GetGState().SetLeading(10);
                                //                    writer.WriteElement(element);


                                //                }
                                //                #endregion

                                //            }

                                //        }



                                //    }
                                //    writer.WriteElement(elementBuilder.CreateTextNewLine());
                                //    YTextPos1 = YTextPos1 - counterheight;
                                //    para_run = para_run_end + 2;  // {to skip \n)
                                //    #region "Page Break Code"
                                //    if (YTextPos1 <= lastY)
                                //    {
                                //        element = elementBuilder.CreateTextEnd();
                                //        writer.WriteElement(element);

                                //        writer.End();
                                //        FileContainer.PagePushBack(page);

                                //        temoarry = AddPages(page, FileContainer);
                                //        arrPage.Add(page.GetIndex());

                                //        #region "Insert water Mark"
                                //        if (gloEDocV3Admin.ISDMSDEMO == true)
                                //        {
                                //            FileContainer.InitSecurityHandler();
                                //            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                //            oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                //            oViewer.Dispose();
                                //            oViewer = null;
                                //        }
                                //        #endregion

                                //        page = FileContainer.PageCreate();

                                //        writer.Begin(page);
                                //        element = elementBuilder.CreateTextBegin(fnt, 10);
                                //        YTextPos1 = pHeight - counterheight;
                                //        element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                //        element.GetGState().SetLeading(10);
                                //        writer.WriteElement(element);



                                //    }

                                //    #endregion

                                //}
                                //// Finish the block of text
                                //writer.WriteElement(elementBuilder.CreateTextEnd());


                            }
                            #endregion
                            //counterheight += 2;


                        }
                        catch (PDFNetException ex)
                        {
                            string _ErrorMessage = ex.ToString();
                            #region " Log Exception "

                            if (_ErrorMessage.Trim() != "")
                            {
                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _MessageString = "";
                            }

                            #endregion
                        }
                        finally
                        {
                            if (oList1 != null)
                            {
                                oList1.Dispose();
                                oList1 = null;
                            }

                        }

                        #endregion


                        if (oNTAOs != null)
                        {
                            if (oNTAOs.Count > 0)
                            {

                                #region " Set the Text Matrix for Provider Name (text) in Page "

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                element = elementBuilder.CreateTextBegin(fnt, 1);
                                SigText = _SignetureText;
                                YTextPos1 -= 5;
                                element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1 - 50);
                                element.GetGState().SetLeading(2);
                                writer.WriteElement(element);
                                writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
                                writer.WriteElement(elementBuilder.CreateTextNewLine());
                                writer.WriteElement(elementBuilder.CreateTextEnd());

                                #endregion " Set the Text Matrix for Provider Name (text) in Page "


                                #region " Add Signature Image to PDF Page "


                                if (elementBuilder != null)
                                {
                                    elementBuilder.Dispose();
                                    elementBuilder = null;
                                }
                                elementBuilder = new pdftron.PDF.ElementBuilder();
                                YTextPos1 = YTextPos1 - counterheight;
                                pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, _ProviderSign);
                                YTextPos1 -= (img.GetImageHeight() + 10);

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XTextPos1, YTextPos1 - _ProviderSign.Height));
                                writer.WritePlacedElement(element);

                                #endregion " Add Signature Image to PDF Page "
                                if (elementBuilder != null)
                                {
                                    elementBuilder.Dispose();
                                    elementBuilder = null;
                                }
                                elementBuilder = new pdftron.PDF.ElementBuilder();
                                element = elementBuilder.CreateTextBegin(fnt, 1);
                                string SigTextFotter = _SignetureName;
                                YTextPos1 -= (img.GetImageHeight() + 10);

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                element.SetTextMatrix(10, 0, 0, 10, XTextPos1, YTextPos1);
                                element.GetGState().SetLeading(2);		 // Set the spacing between lines
                                writer.WriteElement(element);

                                #region " Add Provider Name to end of signature "

                                #region "Page Break Code"
                                if (YTextPos1 <= lastY)
                                {
                                    element = elementBuilder.CreateTextEnd();
                                    writer.WriteElement(element);

                                    writer.End();
                                    FileContainer.PagePushBack(page);

                                    temoarry = AddPages(page, FileContainer);
                                    arrPage.Add(page.GetIndex());

                                    #region "Insert water Mark"
                                    if (gloEDocV3Admin.ISDMSDEMO == true)
                                    {
                                        try
                                        {
                                            FileContainer.InitSecurityHandler();
                                        }
                                        catch (Exception)
                                        {

                                            //Intetionally left Blank
                                        }

                                        gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                        oViewer.InsertWaterMarkToWholeDcoument1(FileContainer, page);
                                        oViewer.Dispose();
                                        oViewer = null;
                                    }
                                    #endregion

                                    page = FileContainer.PageCreate();
                                    writer.Begin(page);
                                    element = elementBuilder.CreateTextBegin(fnt, 10);
                                    YTextPos1 = pHeight - counterheight;
                                    element.SetTextMatrix(1, 0, 0, 1, XTextPos1, YTextPos1);
                                    element.GetGState().SetLeading(10);
                                    writer.WriteElement(element);



                                }

                                #endregion

                                writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
                                writer.WriteElement(elementBuilder.CreateTextNewLine());
                                writer.WriteElement(elementBuilder.CreateTextEnd());


                                #endregion " Add Provider Name to end of signature "


                                writer.End();// Finish writing to the page
                                FileContainer.PagePushBack(page);
                                arrPage.Add(page.GetIndex());
                                temoarry.Add(FileContainer);




                                #region "Insert the Watermark to the page"
                                if (gloEDocV3Admin.ISDMSDEMO == true)
                                {
                                    foreach (PDFDoc pd in temoarry)
                                    {
                                        if (temoarry[temoarry.Count - 1] != null)
                                        {
                                            try
                                            {
                                                FileContainer.InitSecurityHandler();
                                            }
                                            catch (Exception)
                                            {

                                                //Intetionally left Blank
                                            }

                                            gloEDocumentV3.Forms.frmEDocumentViewer oViewer = new gloEDocumentV3.Forms.frmEDocumentViewer();
                                            oViewer.InsertWaterMarkToWholeDcoument1(pd, page);
                                            oViewer.Dispose();
                                            oViewer = null;
                                            break;
                                        }
                                    }
                                }
                                #endregion


                                //_SignaturePageNumber = page.GetIndex();


                                foreach (PDFDoc fd in temoarry)
                                {
                                    if (temoarry[temoarry.Count - 1] != null)
                                    {
                                        _signedPDFFile = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".pdf";
                                        FileContainer.Save(_signedPDFFile, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                                        //int pagecount = FileContainer.GetPageCount();
                                        FileContainer.Close();
                                        break;
                                    }
                                }



                                if (writer != null) { writer.Dispose(); writer = null; }
                                if (element != null) { element = null; }
                                if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                                if (fnt != null) { fnt.Dispose(); fnt = null; }
                                if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                                if (img != null) { img.Dispose(); img = null; }

                                _Result = true;
                        #endregion
                            }// nato count greater then 0
                        }//Nato != null
                    }

                        #endregion " Generate PDF Tron Page & Insert into PDF Doc "


                    if (oNTAOs != null)
                    {
                        if (oNTAOs.Count > 0)
                        {
                            if (_Result == true)
                            {
                                #region " Update Database Details "

                                SqlConnection _sqlConnnetion = null;
                                SqlTransaction _sqlTransaction = null;
                                SqlParameter _sqlParameter = null;
                                SqlCommand _sqlCommand = null;

                                try
                                {
                                    //Added By Rahul Patel on 26-10-2010
                                    // For DMS connection string changes
                                    _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                                    _sqlConnnetion.Open();

                                    _sqlTransaction = _sqlConnnetion.BeginTransaction();


                                    #region " Update Document Details "
                                    //Sanjog- added on 2011 August 08 to resolve bug no.7070
                                    int PageCnt = arrPage.Count;

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3_RCM  WITH(ROWLOCK) SET PageCounts = (PageCounts +" + PageCnt + ") , ModifiedDateTime = dbo.gloGetDate() " +
                                                               " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                               " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                    }
                                    else
                                    {
                                        _sqlQuery = " UPDATE eDocument_Details_V3  WITH(ROWLOCK) SET PageCounts = (PageCounts +" + PageCnt + ") , ModifiedDateTime = dbo.gloGetDate() " +
                                                               " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                               " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                    }

                                    _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                    _sqlCommand.ExecuteNonQuery();

                                    #endregion

                                    #region " Update Container Details "


                                    _sqlQuery = "";

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlQuery = " UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+" + PageCnt + ") " +
                                                " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                    }
                                    else
                                    {
                                        _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+" + PageCnt + ") " +
                                                " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                    }

                                    _sqlCommand.Parameters.Clear();
                                    _sqlCommand.Dispose();
                                    _sqlCommand = null;
                                    _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                    _sqlCommand.ExecuteNonQuery();
                                    ///Problem arrPage Count was not set properly by default it was set to 1.
                                    //14709-End/ Scan Docs>>Import Pdf>>Give acknowledge and Notes to document>>shifting to other category>>Data is Loss


                                    if (System.IO.File.Exists(_signedPDFFile) == true)
                                    {
                                        Cls_SQLFileStream.SaveFile(ContainerID, DocumentID, _signedPDFFile, _sqlTransaction, gloEDocV3Admin.gClinicID, _OpenExternalSource);
                                    }

                                    _sqlCommand.Parameters.Clear();
                                    _sqlCommand.Dispose();
                                    _sqlCommand = null;
                                    #endregion

                                    #region " Update Page Details "
                                    foreach (int i in arrPage)
                                    {
                                        _sqlQuery = "";

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3_RCM WITH(NOLOCK)" +
                                                    " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                                    " AND eDocumentID = " + DocumentID + " " +
                                                    " AND eContainerID = " + ContainerID + " " +
                                                    " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                        }
                                        else
                                        {
                                            _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3 WITH(NOLOCK)" +
                                                    " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                                    " AND eDocumentID = " + DocumentID + " " +
                                                    " AND eContainerID = " + ContainerID + " " +
                                                    " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                                        }

                                        _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                        Object retVal = _sqlCommand.ExecuteScalar();

                                        if (retVal != null && System.Convert.ToInt16(retVal) > 0)
                                        { _SignaturePageName = "Sign " + (System.Convert.ToInt16(retVal)); }
                                        else
                                        { _SignaturePageName = "Sign " + _SignaturePageNumber.ToString(); }

                                        if (retVal != null) { retVal = null; }

                                        _SignaturePageNumber = i;

                                        _sqlQuery = "";

                                        string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + _SignaturePageNumber.ToString();

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _sqlQuery = "INSERT INTO eDocument_Pages_V3_RCM " +
                                        " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                                        " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                                        }
                                        else
                                        {
                                            _sqlQuery = "INSERT INTO eDocument_Pages_V3 " +
                                        " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                                        " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                                        }

                                        _sqlCommand.Parameters.Clear();
                                        _sqlCommand.Dispose();
                                        _sqlCommand = null;
                                        _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                                        _sqlCommand.ExecuteNonQuery();
                                        _sqlCommand.Parameters.Clear();
                                        _sqlCommand.Dispose();
                                        _sqlCommand = null;
                                        //}
                                    }
                                    #endregion

                                    _sqlTransaction.Commit();

                                }
                                catch (Exception ex)
                                {
                                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                    _sqlTransaction.Rollback();
                                }
                                finally
                                {
                                    if (_sqlParameter != null) { _sqlParameter = null; }
                                    if (_sqlCommand != null)
                                    {
                                        _sqlCommand.Parameters.Clear();
                                        _sqlCommand.Dispose();
                                        _sqlCommand = null;
                                    }
                                    if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
                                    if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

                                    #region " Delete Temporary Files "

                                    try
                                    {

                                        if (File.Exists(_strSignFileName)) { File.Delete(_strSignFileName); }
                                        if (File.Exists(_signedPDFFile) == true) { File.Delete(_signedPDFFile); }
                                        if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
                                    }
                                    catch (Exception ex)
                                    {
                                        gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                    }

                                    #endregion
                                }

                                #endregion " Update Database Details "
                            }
                        }//Nato count greater then 0
                    }//nato not equal to null


                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                }
                finally
                {
                    if (oNTAOs != null)
                    {
                        oNTAOs.Dispose();
                        oNTAOs = null;
                    }

                    if (FileContainer != null)
                    {
                        FileContainer.Dispose();
                        FileContainer = null;
                    }

                    if (_ProviderSign != null)
                    {
                        _ProviderSign.Dispose();
                        _ProviderSign = null;
                    }
                    //if (oList1 != null)
                    //{
                    //    oList1.Dispose();
                    //    oList1 = null;
                    //}
                }

                signaturefound = _signaturefound;
                return _Result;
            }
            public DataTable GetAllAssignProviders(Int64 userid)
            {
                DataTable dt = null;
                string str = "";
                //str = "select DISTINCT pr.nProviderID ,ISNULL(pr.sFirstName,'') + ' ' + CASE ISNULL(pr.sMiddleName,'') WHEN  '' THEN '' When ISNULL(pr.sMiddleName,'') then  ISNULL(pr.sMiddleName,'') + ' 'END + ISNULL(pr.sLastName,'') AS sProviderName from ProviderSignature_DTl p inner join provider_mst pr on p.nproviderid=pr.nproviderid where p.nUSerID =" + userid + "";
                str = "select DISTINCT pr.nProviderID ,CASE ISNULL(pr.sPrefix,'') WHEN '' THEN '' WHEN ISNULL(pr.sPrefix,'') THEN ISNULL(pr.sPrefix,'')+' 'END +ISNULL(pr.sFirstName,'') + ' ' + CASE ISNULL(pr.sMiddleName,'') WHEN  '' THEN '' When ISNULL(pr.sMiddleName,'') then  ISNULL(pr.sMiddleName,'') + ' 'END + ISNULL(pr.sLastName,'')+ CASE ISNULL(pr.sSuffix,'') WHEN '' THen '' WHEN ISNULL(pr.sSuffix,'') THEN +' '+ ISNULL(pr.sSuffix,'') END AS sProviderName from ProviderSignature_DTl p inner join provider_mst pr on p.nproviderid=pr.nproviderid where p.nUSerID =" + userid + "";
                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                oDB.Connect(false);
                oDB.Retrive_Query(str, out dt);
                oDB.Disconnect();
                oDB.Dispose();
                return dt;
                //return dt;
            }

            //SAnjog Added on 2011 Jan 28 to show patient Provider
            public Int64 GetPatientProviderRights(Int64 nUserID)
            {
                //DataTable dt = new DataTable();
                string strSQL = null;
                object nProviderId;
                try
                {
                    //strSQL = "Select nProviderId from Patient where nPatientID = " + nPatientID;
                    strSQL = "select user_mst.nproviderid from user_mst INNER JOIN Provider_mst ON user_mst.nproviderid=Provider_mst.nproviderid WHERE user_mst.nuserid=" + nUserID;

                    Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                    oDB.Connect(false);
                    nProviderId = oDB.ExecuteScalar_Query(strSQL);
                    oDB.Disconnect();
                    oDB.Dispose();
                    oDB = null;
                    if (nProviderId.ToString() != "0" && nProviderId.ToString() != "")
                    {
                        return System.Convert.ToInt64(nProviderId);
                    }
                    else
                    {
                        return 0;
                    }

                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {

                }

            }
            //
            //Sanjog

            //Developer: Yatin N.Bhagat
            //Date:01/29/2012
            //Bug ID/PRD Name/Salesforce Case:Salesforce Case No.GLO2010-0009688 - Provider Signature Format
            //Reason: Function Created For Makeing Comman Code to Get Provider Signature Format
            public ArrayList GetSignatureFormat(Int64 SignatureID, int nflag, int flagUser)
            {
                string Signature = "";
                ArrayList arSign = new ArrayList();

                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();

                try
                {
                    DataTable dt = null;
                    string _SignetureText = "";
                    string _SignetureFont = "Arial";
                    int _SignetureFontSize = 12;
                    decimal _MaxScale = 0.30M;
                    decimal _MinScale = 0.30M;
                    //string _SignetureName = "";
                    //   string _SignetureName = "";
                    string _strSignFileName = "";
                    bool _signaturefound = false;
                    System.Drawing.Bitmap _ProviderSign = null;

                    string _FFolderPath = gloEDocV3Admin.gPDFTronTemporaryProcessPath;
                    if (System.IO.Directory.Exists(_FFolderPath) == false)
                    {
                        //System.IO.Directory.Delete(_FFolderPath, true);
                        System.IO.Directory.CreateDirectory(_FFolderPath);
                    }
                    oDB.Connect(false);
                    oParameters.Add("@nPatientID", SignatureID, ParameterDirection.Input, SqlDbType.BigInt);
                    oParameters.Add("@nFlag", nflag, ParameterDirection.Input, SqlDbType.Int);
                    oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);
                    if (dt != null)
                    {
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
                            {

                                string strProviderName = dt.Rows[0]["ProviderName"].ToString();
                                string strSuffix = "";
                                string strPrefix = "";

                                int signFlag = 0;
                                for (int i = 0; i < dt.Columns.Count; i++)
                                {
                                    if (dt.Columns[i].Caption.ToString() == "sSuffix")
                                        signFlag = 1;
                                    else if (dt.Columns[i].Caption.ToString() == "sPrefix")
                                        signFlag = 1;
                                }
                                if (signFlag == 1)
                                {
                                    strSuffix = dt.Rows[0]["sSuffix"].ToString();
                                    //Incident: 00003308 
                                    //Description: Change made in Signature format replace 'Document Reviewed by' with signature text in admin.
                                    //Reason for change: To apply signature text set in admin in signature inplace of hard code value 'Document Reviewed by'.
                                    //start
                                    if (strSuffix != "")
                                    {
                                        strProviderName = strProviderName + " " + strSuffix;
                                    }
                                    strPrefix = dt.Rows[0]["sPrefix"].ToString();
                                    if (strPrefix != "")
                                    {
                                        strProviderName = strPrefix + " " + strProviderName;
                                    }
                                    //end
                                }

                                string strSQL = "";
                                strSQL = "SELECT sSettingsValue from settings where sSettingsName Like '%signatureformatvalue%'";
                                object SignFormat;
                                oDB.Connect(false);
                                SignFormat = oDB.ExecuteScalar_Query(strSQL);
                                oDB.Disconnect();

                                //Incident: 00003308 
                                //Description: Change made in Signature format replace 'Document Reviewed by' with signature text in admin.
                                //Reason for change: To apply signature text set in admin in signature inplace of hard code value 'Document Reviewed by'.
                                //Start
                                string strSQLSigText = "";
                                strSQLSigText = "SELECT sSettingsValue from settings where sSettingsName Like '%signaturetext%'";
                                object SignatureText;
                                oDB.Connect(false);
                                SignatureText = oDB.ExecuteScalar_Query(strSQLSigText);
                                oDB.Disconnect();
                                //end

                                byte[] content = null;
                                content = (byte[])dt.Rows[0][0];
                                _strSignFileName = _FFolderPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";


                                //Getting Logged in User Name
                                string _username = "";
                                System.Collections.Specialized.NameValueCollection appSettings = System.Configuration.ConfigurationManager.AppSettings;
                                if (appSettings["UserName"] != null)
                                {
                                    if (appSettings["UserName"] != "")
                                        _username = System.Convert.ToString(appSettings["UserName"]);
                                }

                                //Incident: 00003308 
                                //Description: Change made in Signature format replace 'Document Reviewed by' with signature text in admin.
                                //Reason for change: To apply signature text set in admin in signature inplace of hard code value 'Document Reviewed by'.
                                //start
                                if (SignFormat.ToString() == "1")
                                    //Signature = "Document reviewed by " + " '" + strPrefix + "'. " + strProviderName + "'. " + strSuffix + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt") + " (" + _username + ")";
                                    Signature = SignatureText + " '" + strProviderName + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt") + " (" + _username + ")";
                                else if (SignFormat.ToString() == "2")
                                    //Signature = "Document reviewed by " + " '" + strProviderName + "'. " + strSuffix + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt") + " (" + _username + ")";
                                    Signature = SignatureText + " '" + strProviderName + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt") + " (" + _username + ")";
                                else if (SignFormat.ToString() == "3")
                                    //Signature = "Document reviewed by " + " '" + strPrefix + "'. " + strProviderName + "'. " + strSuffix + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt");
                                    Signature = SignatureText + " '" + strProviderName + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt");
                                else if (SignFormat.ToString() == "4")
                                    //Signature = "Document reviewed by " + " '" + strProviderName + "'. " + strSuffix + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt");
                                    Signature = SignatureText + " '" + strProviderName + "'. " + System.DateTime.Now.Date.ToString("MM/dd/yyyy") + " " + System.DateTime.Now.ToString("hh:mm:ss tt");
                                //end                              

                                _SignetureText = Signature;
                                _signaturefound = true;
                                //Resolved Bug No.72333::DMS - Signature - Sign is not working for user who is not provider(If Condition Added)
                                //if (nflag != 1)
                                //{
                                _SignetureFont = System.Convert.ToString(dt.Rows[0]["sSignFont"]);
                                _SignetureFontSize = System.Convert.ToInt32(dt.Rows[0]["nSignFontSize"]);
                                _MaxScale = System.Convert.ToDecimal(dt.Rows[0]["nMaxSignScale"]);
                                _MinScale = System.Convert.ToDecimal(dt.Rows[0]["nMinSignScale"]);
                                //}

                                arSign.Add(content);
                                arSign.Add(_strSignFileName);
                                arSign.Add(_ProviderSign);
                                arSign.Add(_SignetureText);
                                arSign.Add(_signaturefound);
                                arSign.Add(_SignetureFont);
                                arSign.Add(_SignetureFontSize);
                                arSign.Add(_MaxScale);
                                arSign.Add(_MinScale);

                            }
                        }
                    }
                    if (dt != null) { dt.Dispose(); }
                    if (oDB != null)
                    {
                        oDB.Dispose();
                        oDB = null;
                    }
                    return arSign;
                }
                catch //(Exception ex)
                {
                    return arSign;
                }
                finally
                {
                    if (oParameters != null)
                    {
                        oParameters.Dispose();
                        oParameters = null;
                    }
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }

            }

            public bool InsertSignInPDFDocWithText(Int64 PatientID, Int64 documentid, Int64 containerid, DocumentContextMenu.eContextDocuments oSelectedDocuments, Int64 SignatureID, int nflag, out bool signaturefound, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                #region  " Variable Declarations "

                pdftron.PDF.PDFDoc FileContainer = null;
                //                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                //                Database.DBParameters oParameters = new gloEDocumentV3.Database.DBParameters();
                //DataTable dt = new DataTable();
                string _SignetureText = "";
                string _SignetureName = "";
                System.Drawing.Bitmap _ProviderSign = null;
                //  System.Drawing.PointF SignTextLocation = new System.Drawing.PointF();
                bool _Result = false;
                string _strSignFileName = "";
                string _sqlQuery = "";
                string _signedPDFFile = "";
                Int64 DocumentID = documentid;
                Int64 ContainerID = containerid;
                int _SignaturePageNumber = 0;
                string _SignaturePageName = "";
                bool _signaturefound = false;

                #endregion

                try
                {
                    #region "Generate PDF Doc Object"
                    string _FilePath = "";
                    string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

                    if (System.IO.Directory.Exists(_FolderPath) == true)
                    {
                        System.IO.Directory.Delete(_FolderPath, true);
                    }
                    System.IO.Directory.CreateDirectory(_FolderPath);
                    _FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

                    gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                    oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, ref  _FilePath, _OpenExternalSource);
                    oList.Dispose();

                    FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
                    #endregion

                    if (oSelectedDocuments != null && oSelectedDocuments.Count > 0 &&
                        oSelectedDocuments[0].Containers != null && oSelectedDocuments[0].Containers.Count > 0)
                    {
                        DocumentID = oSelectedDocuments[0].DocumentID;
                        ContainerID = oSelectedDocuments[0].Containers[0].ContainerID;
                    }
                    else
                    { signaturefound = _signaturefound; return false; }


                    //Developer: Yatin N.Bhagat
                    //Date:01/29/2012
                    //Bug ID/PRD Name/Salesforce Case:Salesforce Case No.GLO2010-0009688 - Provider Signature Format
                    //Reason: If Condition is added to check the Setting to add login user name in the Sign


                    //string _FFolderPath = gloEDocV3Admin.gPDFTronTemporaryProcessPath;
                    //if (System.IO.Directory.Exists(_FFolderPath) == false)
                    //{
                    //    //System.IO.Directory.Delete(_FFolderPath, true);
                    //    System.IO.Directory.CreateDirectory(_FFolderPath);
                    //}
                    //#region "Retrive Binary Image"

                    //oDB.Connect(false);
                    //oParameters.Add("@nPatientID", SignatureID, ParameterDirection.Input, SqlDbType.BigInt);
                    //oParameters.Add("@nFlag", nflag, ParameterDirection.Input, SqlDbType.Int);
                    //oDB.Retrive("gsp_eDoc_GetProviderSignature", oParameters, out dt);
                    //if (dt != null)
                    //{
                    //    if (dt.Rows.Count > 0)
                    //    {
                    //        if (dt.Rows[0][0].GetType() != typeof(System.DBNull))
                    //        {
                    //            byte[] content = null;
                    //            content = (byte[])dt.Rows[0][0];
                    //            _strSignFileName = _FFolderPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".bmp";
                    //            MemoryStream oDataStream = new MemoryStream(content);
                    //            FileStream fileStream = new FileStream(_strSignFileName, FileMode.Create);
                    //            oDataStream.WriteTo(fileStream);
                    //            fileStream.Flush();
                    //            fileStream.Close();
                    //            fileStream.Dispose();
                    //            _ProviderSign = new System.Drawing.Bitmap(_strSignFileName);
                    //            _SignetureName = dt.Rows[0]["ProviderName"].ToString();
                    //            _SignetureText = "Document reviewed by " + _SignetureName + " on " + DateTime.Now;
                    //            _signaturefound = true;
                    //        }
                    //    }
                    //}
                    //if (dt != null) { dt.Dispose(); }

                    //#endregion

                    ArrayList arSignature = GetSignatureFormat(SignatureID, nflag, 1);
                    //SLR: stream not needed 12/22
                    byte[] arrByte = (byte[])arSignature[0];
                    //MemoryStream oDataStream = new MemoryStream((byte[])arSignature[0]);
                    if (arrByte != null)
                    {
                        FileStream fileStream = new FileStream(arSignature[1].ToString(), FileMode.Create);
                        fileStream.Write(arrByte, 0, arrByte.Length);
                        //oDataStream.WriteTo(fileStream);
                        fileStream.Flush();
                        fileStream.Close();
                        fileStream.Dispose();
                    }
                    //oDataStream.Close();
                    //oDataStream.Dispose();
                    _ProviderSign = new System.Drawing.Bitmap(arSignature[1].ToString());
                    _SignetureText = arSignature[3].ToString();
                    _signaturefound = System.Convert.ToBoolean(arSignature[4].ToString());


                    #region " Generate PDF Tron Page & Insert into PDF Doc "

                    if (_ProviderSign != null)
                    {
                        #region "New Code"

                        pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
                        pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
                        pdftron.PDF.Element element;
                        //  System.Drawing.Bitmap bmp;
                        pdftron.PDF.Font fnt;


                        pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
                        writer.Begin(page);

                        #region " Set Page Font "

                        try
                        {
                            System.Drawing.Font myfont = new System.Drawing.Font("Arial Unicode MS", 8F);
                            fnt = pdftron.PDF.Font.CreateCIDTrueTypeFont(FileContainer, myfont, true, true);
                            myfont.Dispose();
                            myfont = null;
                        }
                        catch (Exception e)
                        { _ErrorMessage = e.Message; signaturefound = _signaturefound; return _Result; }

                        #endregion


                        #region "Commented :: as New code added against it"
                        //double pHeight = page.GetPageHeight();
                        //double pWidth = page.GetPageWidth();

                        //#region " Set the Text Matrix for Provider Name (text) in Page "

                        //element = elementBuilder.CreateTextBegin(fnt, 1);

                        //string SigText = _SignetureText;
                        //double XTextPos = (pWidth / 2) - (SigText.Length) - (_ProviderSign.Width / 2);
                        //double YTextPos = (pHeight) - 100;

                        //element.SetTextMatrix(10, 0, 0, 10, XTextPos, YTextPos);
                        //element.GetGState().SetLeading(2);
                        //writer.WriteElement(element);
                        //writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));
                        //writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //writer.WriteElement(elementBuilder.CreateTextEnd());

                        //#endregion " Set the Text Matrix for Provider Name (text) in Page "

                        //#region " Add Signature Image to PDF Page "

                        //elementBuilder = new pdftron.PDF.ElementBuilder();
                        //double XImagepos = ((pWidth / 2) - (_ProviderSign.Width / 2));
                        //double YImagepas = (YTextPos - 100);
                        //pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, _ProviderSign);
                        //element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(_ProviderSign.Width, 0, 0, _ProviderSign.Height, XImagepos, YImagepas));
                        //writer.WritePlacedElement(element);

                        //#endregion " Add Signature Image to PDF Page "

                        //elementBuilder = new pdftron.PDF.ElementBuilder();
                        //element = elementBuilder.CreateTextBegin(fnt, 1);
                        //string SigTextFotter = _SignetureName;
                        //double XBotmTextPos = (pWidth / 2) - (SigTextFotter.Length) - 20;
                        //double YBotmTextPos = (YImagepas - 13);
                        //element.SetTextMatrix(10, 0, 0, 10, XBotmTextPos, YBotmTextPos);
                        //element.GetGState().SetLeading(2);		 // Set the spacing between lines
                        //writer.WriteElement(element);

                        //#region " Add Provider Name to end of signature "

                        //writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
                        //writer.WriteElement(elementBuilder.CreateTextNewLine());
                        //writer.WriteElement(elementBuilder.CreateTextEnd());

                        //#endregion " Add Provider Name to end of signature "

                        #endregion "Commented :: as New code added against it"

                        #region "NewCode Against Commented Code :: To Bring the Large text/Image in between"
                        //Note :: Writinf is done from top to bottom
                        double pHeight = page.GetPageHeight(); //Page hegith
                        double pWidth = page.GetPageWidth(); // Page width
                        double rHeight = _ProviderSign.Height; // Image Height 
                        double rWidth = _ProviderSign.Width; // Image width
                        double toReduce = 1; // to Reduce the image upto the position 
                        double ppHeight = pHeight - 60; //reduce upto the area we required
                        double mLength = 0; // it will hold the text length
                        //double XImagepos = 0;
                        // double YImagepas = 0;
                        System.Drawing.Image myImage = null;
                        if ((ppHeight < rHeight) || (pWidth < rWidth)) //checking is pageheight - 60 less then image heigth or page width is less then image width
                        {
                            double YHeight = ppHeight / rHeight; // yheight = page height - 60 / imageheght
                            double XWidth = pWidth / rWidth; // xwidth = pagewidth / imagewidth
                            if (XWidth < YHeight)
                            {
                                toReduce = XWidth;
                            }
                            else
                            {
                                toReduce = YHeight;
                            }
                            rHeight *= toReduce;
                            rWidth *= toReduce;
                        }
                        if (toReduce != 1)
                        {
                            myImage = new System.Drawing.Bitmap((int)rWidth, (int)rHeight);
                        }

                        if (myImage != null)
                        {
                            System.Drawing.Graphics myGraphics = System.Drawing.Graphics.FromImage(myImage);
                            myGraphics.DrawImage(_ProviderSign, 0, 0, (float)rWidth, (float)rHeight);
                            myGraphics.Dispose();
                            myGraphics = null;
                        }
                        else
                        {
                            myImage = (System.Drawing.Image)_ProviderSign.Clone();
                        }


                        //

                        #region " Set the Text Matrix for Provider Name (text) in Page "

                        element = elementBuilder.CreateTextBegin(fnt, 1);

                        string SigText = _SignetureText;
                        element = elementBuilder.CreateUnicodeTextRun(SigText);
                        double mReduce = 1.0;
                        mLength = element.GetTextLength() * 10; // To bring txt in between of the page width 
                        if (mLength > pWidth)
                        {
                            mReduce = pWidth / mLength;
                            mLength = pWidth;
                        }
                        element = elementBuilder.CreateTextEnd();
                        //Note :: While doing the image/Text metrix pdftron required the sequence
                        element = elementBuilder.CreateTextBegin(fnt, 1);
                        double XTextPos = (pWidth / 2) - (mLength / 2); //- (myImage.Width / 2);
                        double YTextPos = (pHeight) - 20;
                        if (XTextPos < 0) { XTextPos = 0; }
                        element.SetTextMatrix((int)(10.0 * mReduce), 0, 0, (int)(10.0 * mReduce), XTextPos, YTextPos);
                        element.GetGState().SetLeading(2);
                        writer.WriteElement(element);
                        writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigText));//Builder.CreateUnicodeTextRun(SigText));
                        writer.WriteElement(elementBuilder.CreateTextNewLine());
                        writer.WriteElement(elementBuilder.CreateTextEnd());

                        #endregion " Set the Text Matrix for Provider Name (text) in Page "

                        #region " Add Signature Image to PDF Page "
                        if (elementBuilder != null)
                        {
                            elementBuilder.Dispose();
                            elementBuilder = null;
                        }
                        elementBuilder = new pdftron.PDF.ElementBuilder();
                        Double XImagepos = ((pWidth / 2) - (myImage.Width / 2));
                        Double YImagepas = (YTextPos - 20 - myImage.Height);
                        pdftron.PDF.Image img = pdftron.PDF.Image.Create(FileContainer, (System.Drawing.Bitmap)myImage);
                        element = elementBuilder.CreateImage(img, new pdftron.Common.Matrix2D(myImage.Width, 0, 0, myImage.Height, XImagepos, YImagepas));
                        writer.WritePlacedElement(element);
                        //if (toReduce != 1)
                        {
                            if (myImage != null)
                            {
                                myImage.Dispose();
                                myImage = null;
                            }
                        }
                        #endregion " Add Signature Image to PDF Page "
                        if (elementBuilder != null)
                        {
                            elementBuilder.Dispose();
                            elementBuilder = null;
                        }
                        elementBuilder = new pdftron.PDF.ElementBuilder();
                        element = elementBuilder.CreateTextBegin(fnt, 1);

                        string SigTextFotter = _SignetureName;
                        element = elementBuilder.CreateUnicodeTextRun(SigTextFotter);
                        mLength = element.GetTextLength() * 10; // To bring txt in between of the page width
                        mReduce = 1.0;
                        if (mLength > pWidth)
                        {
                            mReduce = pWidth / mLength;
                            mLength = pWidth;
                        }
                        element = elementBuilder.CreateTextEnd();
                        //Note :: While doing the image/Text metrix pdftron required the sequence
                        element = elementBuilder.CreateTextBegin(fnt, 1);
                        double XBotmTextPos = (pWidth / 2) - (mLength / 2);
                        double YBotmTextPos = (YImagepas - 20);
                        if (XBotmTextPos < 0)
                        {
                            XBotmTextPos = 0;
                        }
                        element.SetTextMatrix((int)(10.0 * mReduce), 0, 0, (int)(10.0 * mReduce), XBotmTextPos, YBotmTextPos);
                        element.GetGState().SetLeading(2);		 // Set the spacing between lines
                        writer.WriteElement(element);

                        #region " Add Provider Name to end of signature "
                        writer.WriteElement(elementBuilder.CreateUnicodeTextRun(SigTextFotter));
                        writer.WriteElement(elementBuilder.CreateTextNewLine());
                        writer.WriteElement(elementBuilder.CreateTextEnd());
                        #endregion " Add Provider Name to end of signature "

                        #endregion "NewCode Against Commented Code :: To Bring the Large text/Image in between"


                        writer.End();// Finish writing to the page
                        FileContainer.PagePushBack(page);
                        _SignaturePageNumber = page.GetIndex();

                        _signedPDFFile = gloEDocV3Admin.gPDFTronTemporaryProcessPath + "\\" + System.Convert.ToString(DateTime.Now.ToFileTime()) + ".pdf";
                        FileContainer.Save(_signedPDFFile, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                        //FileContainer.Save(_signedPDFFile, 0);
                        FileContainer.Close();

                        if (writer != null) { writer.Dispose(); writer = null; }
                        if (element != null) { element = null; }
                        if (elementBuilder != null) { elementBuilder.Dispose(); elementBuilder = null; }
                        if (fnt != null) { fnt.Dispose(); fnt = null; }
                        if (_ProviderSign != null) { _ProviderSign.Dispose(); _ProviderSign = null; }
                        if (img != null) { img.Dispose(); img = null; }

                        _Result = true;
                        #endregion
                    }

                    #endregion " Generate PDF Tron Page & Insert into PDF Doc "

                    if (_Result == true)
                    {
                        #region " Update Database Details "

                        SqlConnection _sqlConnnetion = null;
                        SqlTransaction _sqlTransaction = null;
                        SqlParameter _sqlParameter = null;
                        SqlCommand _sqlCommand = null;

                        try
                        {
                            //Changed By Rahul Patel on 26-10-2010
                            //For DMS Connection String change
                            _sqlConnnetion = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                            _sqlConnnetion.Open();

                            _sqlTransaction = _sqlConnnetion.BeginTransaction();

                            #region " Update Document Details "

                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = (PageCounts +1) , ModifiedDateTime = dbo.gloGetDate() " +
                                                        " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                            }
                            else
                            {
                                _sqlQuery = " UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = (PageCounts +1) , ModifiedDateTime = dbo.gloGetDate() " +
                                                        " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " " +
                                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                            }

                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                            _sqlCommand.ExecuteNonQuery();

                            #endregion

                            #region " Update Container Details "

                            _sqlQuery = "";

                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+1) " +
                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                            }
                            else
                            {
                                _sqlQuery = " UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET  DocumentPageTo = (DocumentPageTo+1) " +
                                        " WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                            }

                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;
                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                            _sqlCommand.ExecuteNonQuery();


                            if (System.IO.File.Exists(_signedPDFFile) == true)
                            {
                                Cls_SQLFileStream.SaveFile(ContainerID, DocumentID, _signedPDFFile, _sqlTransaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);
                            }

                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;
                            #endregion

                            #region " Update Page Details "

                            _sqlQuery = "";
                            // _sqlQuery = //" SELECT ISNULL(MAX(Substring(PageName,5,6)),0) + 1 FROM eDocument_Pages_V3 " +
                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3_RCM WITH(NOLOCK) " +
                                        " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                        " AND eDocumentID = " + DocumentID + " " +
                                        " AND eContainerID = " + ContainerID + " " +
                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                            }
                            else
                            {
                                _sqlQuery = " SELECT ISNULL(MAX(CONVERT(NUMERIC(18,0),ISNULL(Substring(PageName,5,6),0))),0) + 1 FROM eDocument_Pages_V3 WITH(NOLOCK) " +
                                        " WHERE SUBSTRING(PageName,1,4) = 'Sign' " +
                                        " AND eDocumentID = " + DocumentID + " " +
                                        " AND eContainerID = " + ContainerID + " " +
                                        " AND ClinicID = " + gloEDocV3Admin.gClinicID + " ";
                            }

                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                            Object retVal = _sqlCommand.ExecuteScalar();

                            if (retVal != null && System.Convert.ToInt16(retVal) > 0)
                            { _SignaturePageName = "Sign " + (System.Convert.ToInt16(retVal)); }
                            else
                            { _SignaturePageName = "Sign " + _SignaturePageNumber.ToString(); }

                            if (retVal != null) { retVal = null; }


                            _sqlQuery = "";
                            string _BookMarkTag = oSelectedDocuments[0].Year + "~" + oSelectedDocuments[0].Category + "~" + oSelectedDocuments[0].Month + "~" + DocumentID.ToString() + "~" + _SignaturePageNumber.ToString();

                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                            {
                                _sqlQuery = "INSERT INTO eDocument_Pages_V3_RCM " +
                            " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                            " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                            }
                            else
                            {
                                _sqlQuery = "INSERT INTO eDocument_Pages_V3 " +
                            " (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) " +
                            " VALUES (" + DocumentID + "," + ContainerID + "," + _SignaturePageNumber + "," + _SignaturePageNumber + ",'" + _SignaturePageName + "','" + _BookMarkTag + "','" + false + "'," + gloEDocV3Admin.gClinicID + ")";
                            }

                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;
                            _sqlCommand = new SqlCommand(_sqlQuery, _sqlConnnetion, _sqlTransaction);
                            _sqlCommand.ExecuteNonQuery();
                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;
                            #endregion

                            _sqlTransaction.Commit();

                        }
                        catch (Exception ex)
                        {
                            gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                            _sqlTransaction.Rollback();
                        }
                        finally
                        {
                            if (_sqlParameter != null) { _sqlParameter = null; }
                            if (_sqlCommand != null)
                            {
                                _sqlCommand.Parameters.Clear();
                                _sqlCommand.Dispose();
                                _sqlCommand = null;
                            }
                            if (_sqlTransaction != null) { _sqlTransaction.Dispose(); }
                            if (_sqlConnnetion != null) { _sqlConnnetion.Dispose(); }

                            #region " Delete Temporary Files "

                            try
                            {
                                if (_ProviderSign != null) { _ProviderSign.Dispose(); }
                                if (File.Exists(_strSignFileName)) { File.Delete(_strSignFileName); }
                                if (File.Exists(_signedPDFFile) == true) { File.Delete(_signedPDFFile); }
                                if (File.Exists(_FilePath) == true) { File.Delete(_FilePath); }
                            }
                            catch (Exception ex)
                            {
                                gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                            }

                            #endregion
                        }

                        #endregion " Update Database Details "
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                }
                finally
                {

                }
                signaturefound = _signaturefound;
                return _Result;
            }




            //private void InsertNewPage(Int64 ContainerID, Int64 DocumentID, string _FilePath)
            //{
            //    #region "Variable Declaration"
            //    pdftron.PDF.Page page = null;
            //    pdftron.PDF.PDFDoc FileContainer = null;
            //    #endregion
            //    try
            //    {
            //        #region "Generate PDF Doc Object"
            //        //string _FilePath = "";
            //        //string _FolderPath = gloEDocV3Admin.gTemporaryProcessPath + "\\" + ContainerID.ToString();

            //        //if (System.IO.Directory.Exists(_FolderPath) == true)
            //        //{
            //        //    System.IO.Directory.Delete(_FolderPath, true);
            //        //}
            //        //System.IO.Directory.CreateDirectory(_FolderPath);
            //        //_FilePath = _FolderPath + "\\" + ContainerID.ToString() + ".pdf";

            //        //gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
            //        //oList.GetContainerStream(DocumentID, ContainerID, gloEDocV3Admin.gClinicID, _FilePath);
            //        //oList.Dispose();
            //        //FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
            //        #endregion

            //        #region "Create an new page"
            //        FileContainer = new pdftron.PDF.PDFDoc(_FilePath);
            //        pdftron.PDF.ElementBuilder elementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
            //        pdftron.PDF.ElementWriter writer = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
            //        pdftron.PDF.Element element;
            //        //System.Drawing.Bitmap bmp;
            //        pdftron.PDF.Font fnt;


            //        //commneted by dhruv: Declared this variable above this loop
            //        //pdftron.PDF.Page page = FileContainer.PageCreate(); // Start a new page 
            //        page = FileContainer.PageCreate(); // Start a new page 
            //        writer.Begin(page);
            //        #endregion
            //    }
            //    catch (PDFNetException ex)
            //    {

            //    }
            //}


            //#endregion


            #region "Categorize Document"

            public bool SendtoExistingDocument(DocumentContextMenu.eContextDocuments SelectedDocuments, DocumentContextMenu.eContextEventParameter DestinationDocument, out Int64 _retDocumentID, out Int64 _retContainerID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                //   SqlParameter _sqlParameter = null;
                SqlDataAdapter _sqlAdpter = null;
                DataTable dt;
                ArrayList oPages;

                #region "Variable Declaration"
                Int32 DestinationDocPageCount = 0;
                Int32 SelectedDocPageCount = 0;
                Int32 SelectedDocNewPageCount = 0;
                Int32 DestinationDocNewPageCount = 0;
                string _strUpdate = "";
                string _strQry = "";
                //Int64 ContainerID = 0;
                string DestFileName = "";
                string SourceFileName = "";
                Int64 DocumentID = 0;
                Int64 ContainerID = 0;
                Int32 ContainerPageNo = 0;
                Int32 DocumentPageNo = 0;
                Int64 _PrefixID = 0;
                //   Int64 NATOID = 0;
                bool _return = false;

                //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                SqlConnection _mainConnection = null;
                Boolean _bMeargeDocHaveTask = false;
                #endregion
                gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                try
                {

                    _retDocumentID = 0;
                    _retContainerID = 0;

                    //Changed by Rahul patel on 27-10-2010
                    //For Hybrid database change i.e for DMS Database
                    //_connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                    _connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                    if (_connection != null)
                    {
                        _connection.Open();

                        _transaction = _connection.BeginTransaction();
                        for (int _DocCounter = 0; _DocCounter <= SelectedDocuments.Count - 1; _DocCounter++)
                        {
                            for (int _ContCounter = 0; _ContCounter <= SelectedDocuments[_DocCounter].Containers.Count - 1; _ContCounter++)
                            {
                                #region "GetDocumentInfo"
                                if (oList != null)
                                {
                                    SelectedDocPageCount = oList.GetDocumentPageCount(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].PatientID, SelectedDocuments[_DocCounter].ClinicID, _OpenExternalSource);
                                    DestinationDocPageCount = oList.GetDocumentPageCount(DestinationDocument.DocumentID, DestinationDocument.PatientID, DestinationDocument.ClinicID, _OpenExternalSource);
                                    SelectedDocNewPageCount = SelectedDocPageCount - SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    DestinationDocNewPageCount = DestinationDocPageCount + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    oPages = new ArrayList();
                                    for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                    {
                                        oPages.Add(SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber);
                                    }
                                #endregion

                                    #region "Database Region"
                                    #region "Update Selected Document details and Pages"
                                    //// Update Details Table
                                    if (SelectedDocNewPageCount == 0)
                                    {
                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strQry = "DELETE FROM eDocument_Details_V3_RCM WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }
                                        else
                                        {
                                            _strQry = "DELETE FROM eDocument_Details_V3 WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }

                                        _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                        if (_sqlcommand != null)
                                        {
                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                            {
                                                _transaction.Rollback();
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                                //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                                                _bMeargeDocHaveTask = false;
                                                return _return;
                                            }
                                            //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                                            _bMeargeDocHaveTask = true;
                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //// Check Remaining Pages has Notes or Not
                                        string _selectedPages = "";

                                        for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                        {
                                            _selectedPages = _selectedPages + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber.ToString() + ",";
                                        }
                                        _selectedPages = _selectedPages.TrimEnd(',');
                                        bool _HasNoteForRemainingPages = false;
                                        if (_selectedPages.Trim() != "")
                                        {
                                            _strQry = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = " SELECT ISNULL(count(HasNote),0) AS IsNoteExits FROM eDocument_Pages_V3_RCM WITH(NOLOCK) " +
                                                      " WHERE HasNote = 'true'  " +
                                                      " AND DocumentPageNumber NOT IN (" + _selectedPages + ") " +
                                                      " AND eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " " +
                                                      " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " " +
                                                      " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }
                                            else
                                            {
                                                _strQry = " SELECT ISNULL(count(HasNote),0) AS IsNoteExits FROM eDocument_Pages_V3 WITH(NOLOCK) " +
                                                      " WHERE HasNote = 'true'  " +
                                                      " AND DocumentPageNumber NOT IN (" + _selectedPages + ") " +
                                                      " AND eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " " +
                                                      " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " " +
                                                      " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                            }

                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {
                                                Object retVal = _sqlcommand.ExecuteScalar();
                                                if (retVal != null && retVal != DBNull.Value && System.Convert.ToInt32(retVal) > 0)
                                                {
                                                    _HasNoteForRemainingPages = true;
                                                    retVal = null;
                                                }
                                                else
                                                {
                                                    _HasNoteForRemainingPages = false;
                                                }
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }

                                        }

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strUpdate = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = " + SelectedDocNewPageCount + ",HasNote = '" + _HasNoteForRemainingPages + "' WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }
                                        else
                                        {
                                            _strUpdate = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = " + SelectedDocNewPageCount + ",HasNote = '" + _HasNoteForRemainingPages + "' WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }

                                        _sqlcommand = new SqlCommand(_strUpdate, _connection, _transaction);
                                        if (_sqlcommand != null)
                                        {
                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                            {
                                                _transaction.Rollback();
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                                return _return;
                                            }

                                        }
                                    }

                                    string BookMarkTag = "";
                                    /// Update Page Table
                                    for (int _ContConter = 0; _ContConter <= SelectedDocuments[_DocCounter].Containers.Count - 1; _ContConter++)
                                    {
                                        for (int i = SelectedDocuments[_DocCounter].Containers[_ContConter].Pages.Count - 1; i >= 0; i--)
                                        {

                                            _strQry = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = "DELETE eDocument_Pages_V3_RCM WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContConter].ContainerID + " AND ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContConter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContConter].Pages[i].DocumentPageNumber + "";
                                            }
                                            else
                                            {
                                                _strQry = "DELETE eDocument_Pages_V3 WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContConter].ContainerID + " AND ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContConter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContConter].Pages[i].DocumentPageNumber + "";
                                            }

                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {
                                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                {
                                                    _transaction.Rollback();
                                                    if (_sqlcommand != null)
                                                    {
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                    }
                                                    return _return;
                                                }
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                            _strQry = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = "SELECT ContainerPageNumber,DocumentPageNumber FROM eDocument_Pages_V3_RCM WITH(NOLOCK) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContConter].ContainerID + " AND ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContConter].Pages[i].ContainerPageNumber + " Order by ContainerPageNumber";
                                            }
                                            else
                                            {
                                                _strQry = "SELECT ContainerPageNumber,DocumentPageNumber FROM eDocument_Pages_V3 WITH(NOLOCK) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContConter].ContainerID + " AND ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContConter].Pages[i].ContainerPageNumber + " Order by ContainerPageNumber";
                                            }

                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {
                                                _sqlAdpter = new SqlDataAdapter(_sqlcommand);
                                                if (_sqlAdpter != null)
                                                {
                                                    dt = new DataTable();
                                                    _sqlAdpter.Fill(dt);
                                                    if (dt != null)
                                                    {
                                                        if (dt.Rows.Count > 0)
                                                        {
                                                            for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                            {
                                                                _strQry = "";
                                                                BookMarkTag = SelectedDocuments[_DocCounter].Year.ToString() + "~" + SelectedDocuments[_DocCounter].Category.ToString() + "~" + SelectedDocuments[_DocCounter].Month.ToString() + "~" + SelectedDocuments[_DocCounter].DocumentID.ToString() + "~" + System.Convert.ToString(System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) - 1);

                                                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                                {
                                                                    _strQry = "UPDATE eDocument_Pages_V3_RCM WITH(ROWLOCK) SET ContainerPageNumber =" + (System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) - 1) + ",DocumentPageNumber=" + (System.Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) - 1) + ",BookMarkTag = '" + BookMarkTag + "' " +
                                                                          "WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContConter].ContainerID + " AND ContainerPageNumber = " + System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) + " AND DocumentPageNumber = " + System.Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) + "AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "  ";
                                                                }
                                                                else
                                                                {
                                                                    _strQry = "UPDATE eDocument_Pages_V3 WITH(ROWLOCK) SET ContainerPageNumber =" + (System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) - 1) + ",DocumentPageNumber=" + (System.Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) - 1) + ",BookMarkTag = '" + BookMarkTag + "' " +
                                                                          "WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContConter].ContainerID + " AND ContainerPageNumber = " + System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) + " AND DocumentPageNumber = " + System.Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) + "AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "  ";
                                                                }

                                                                _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                                {
                                                                    _transaction.Rollback();
                                                                    if (_sqlcommand != null)
                                                                    {
                                                                        _sqlcommand.Dispose();
                                                                        _sqlcommand = null;
                                                                    }
                                                                    dt.Dispose();
                                                                    dt = null;
                                                                    _sqlAdpter.Dispose();
                                                                    _sqlAdpter = null;
                                                                    return _return;
                                                                }
                                                            }
                                                        }
                                                        dt.Dispose();
                                                        dt = null;
                                                    }
                                                    _sqlAdpter.Dispose();
                                                    _sqlAdpter = null;
                                                }
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    #region "Update Destination Document details and Pages"
                                    bool HasNotes = false;
                                    bool IsAcknowledge = false;
                                    for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                    {
                                        if (SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].HasNotes == true)
                                        {
                                            HasNotes = true;
                                            break;
                                        }
                                    }
                                    //// Update Details Table
                                    if (SelectedDocNewPageCount == 0)
                                    {
                                        if (SelectedDocuments[_DocCounter].IsAcknowledge == true || gloEDocumentV3.eDocManager.eDocValidator.IsAcknowledged(DestinationDocument.DocumentID, DestinationDocument.ClinicID, _OpenExternalSource) == true)
                                        {
                                            IsAcknowledge = true;
                                        }
                                        if (HasNotes == true) //// if selected document contains Notes then only update HasNote Flag
                                        {
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + ", IsAcknowledge = '" + IsAcknowledge + "',HasNote = '" + HasNotes + "' WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                            else
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + ", IsAcknowledge = '" + IsAcknowledge + "',HasNote = '" + HasNotes + "' WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                        }
                                        else
                                        {
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + ", IsAcknowledge = '" + IsAcknowledge + "' WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                            else
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + ", IsAcknowledge = '" + IsAcknowledge + "' WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (HasNotes == true) //// if selected document contains Notes then only update HasNote Flag
                                        {
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + ",HasNote = '" + HasNotes + "' WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                            else
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + ",HasNote = '" + HasNotes + "' WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                        }
                                        else
                                        {
                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + " WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                            else
                                            {
                                                _strUpdate = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = " + DestinationDocNewPageCount + " WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND PatientID = " + DestinationDocument.PatientID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                            }
                                        }
                                    }
                                    _sqlcommand = new SqlCommand(_strUpdate, _connection, _transaction);
                                    if (_sqlcommand != null)
                                    {
                                        if (_sqlcommand.ExecuteNonQuery() <= 0)
                                        {
                                            _transaction.Rollback();
                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                            }
                                            return _return;
                                        }
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                    }

                                    ////Update Page Table
                                    string _strInsertQry = "";
                                    Int32 ContanierPageNumber = DestinationDocPageCount;
                                    Int32 DocumentPageNumber = DestinationDocPageCount;
                                    string PageName = "";
                                    for (int _ConCounter = 0; _ConCounter <= SelectedDocuments[_DocCounter].Containers.Count - 1; _ConCounter++)
                                    {
                                        for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ConCounter].Pages.Count - 1; i++)
                                        {

                                            _strInsertQry = "";
                                            ContanierPageNumber = ContanierPageNumber + 1;
                                            DocumentPageNumber = DocumentPageNumber + 1;
                                            BookMarkTag = DestinationDocument.Year.ToString() + "~" + DestinationDocument.Category.ToString() + "~" + DestinationDocument.Month.ToString() + "~" + DestinationDocument.DocumentID.ToString() + "~" + ContanierPageNumber.ToString();
                                            PageName = GetPageName(SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].PageName, DestinationDocument.DocumentID, DestinationDocument.ContainerID, DestinationDocument.ClinicID, _connection, _transaction, _OpenExternalSource);

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strInsertQry = "INSERT eDocument_Pages_V3_RCM(eDocumentID, eContainerID, ContainerPageNumber, DocumentPageNumber, PageName, BookMarkTag, HasNote, ClinicID) "
                                                             + "VALUES(" + DestinationDocument.DocumentID + "," + DestinationDocument.ContainerID + "," + ContanierPageNumber + "," + DocumentPageNumber + ",'" + PageName + "','" + BookMarkTag + "','" + SelectedDocuments[_DocCounter].Containers[_ConCounter].Pages[i].HasNotes + "'," + DestinationDocument.ClinicID + ")";
                                            }
                                            else
                                            {
                                                _strInsertQry = "INSERT eDocument_Pages_V3(eDocumentID, eContainerID, ContainerPageNumber, DocumentPageNumber, PageName, BookMarkTag, HasNote, ClinicID) "
                                                             + "VALUES(" + DestinationDocument.DocumentID + "," + DestinationDocument.ContainerID + "," + ContanierPageNumber + "," + DocumentPageNumber + ",'" + PageName + "','" + BookMarkTag + "','" + SelectedDocuments[_DocCounter].Containers[_ConCounter].Pages[i].HasNotes + "'," + DestinationDocument.ClinicID + ")";
                                            }

                                            _sqlcommand = new SqlCommand(_strInsertQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {
                                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                {
                                                    _transaction.Rollback();
                                                    if (_sqlcommand != null)
                                                    {
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                    }
                                                    return _return;
                                                }
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }

                                            #region "Insert Notes Into Destination"
                                            // dt = new DataTable();
                                            DocumentID = SelectedDocuments[_DocCounter].DocumentID;
                                            ContainerID = SelectedDocuments[_DocCounter].Containers[_ConCounter].ContainerID;
                                            ContainerPageNo = SelectedDocuments[_DocCounter].Containers[_ConCounter].Pages[i].ContainerPageNumber;
                                            DocumentPageNo = SelectedDocuments[_DocCounter].Containers[_ConCounter].Pages[i].DocumentPageNumber;
                                            dt = GetNATODetails(DocumentID, ContainerID, ContainerPageNo, DocumentPageNo, enum_NTAOType.Notes, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);
                                            if (dt != null)
                                            {
                                                if (dt.Rows.Count > 0)
                                                {
                                                    for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                    {
                                                        _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                        _sqlcommand = new SqlCommand();
                                                        if (_sqlcommand != null)
                                                        {
                                                            _sqlcommand.Connection = _connection;
                                                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                            _sqlcommand.Transaction = _transaction;

                                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                            {
                                                                _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3_RCM";
                                                            }
                                                            else
                                                            {
                                                                _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";
                                                            }

                                                            _sqlcommand.Parameters.Clear();

                                                            _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = DestinationDocument.DocumentID;
                                                            _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = DestinationDocument.ContainerID; //, ParameterDirection.Input,);
                                                            _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = ContanierPageNumber;//, ParameterDirection.Input, SqlDbType.Int);
                                                            _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = DocumentPageNumber; //, ParameterDirection.Input, SqlDbType.Int);
                                                            _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0; //, ParameterDirection.InputOutput, SqlDbType.BigInt);
                                                            _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"]; //, ParameterDirection.Input, SqlDbType.BigInt);
                                                            _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"]; //, ParameterDirection.Input, SqlDbType.VarChar);
                                                            _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"]; //, ParameterDirection.Input, SqlDbType.DateTime);
                                                            _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"]; //, ParameterDirection.Input, SqlDbType.VarChar, 1000);
                                                            _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"]; //, ParameterDirection.Input, SqlDbType.Bit);
                                                            _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Notes.GetHashCode(); //, ParameterDirection.Input, SqlDbType.Int);
                                                            _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = DestinationDocument.ClinicID; //, ParameterDirection.Input, SqlDbType.BigInt);
                                                            _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID; //, ParameterDirection.Input, SqlDbType.BigInt);

                                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                            {
                                                                _transaction.Rollback();
                                                                if (_sqlcommand != null)
                                                                {
                                                                    _sqlcommand.Parameters.Clear();
                                                                    _sqlcommand.Dispose();
                                                                    _sqlcommand = null;
                                                                }
                                                                return _return;
                                                            }
                                                            if (_sqlcommand != null)
                                                            {
                                                                _sqlcommand.Parameters.Clear();
                                                                _sqlcommand.Dispose();
                                                                _sqlcommand = null;
                                                            }
                                                        }

                                                    }
                                                }
                                                dt.Dispose();
                                                dt = null;
                                            }
                                            #endregion

                                            #region "Insert Tags into Destination"
                                            dt = GetNATODetails(DocumentID, ContainerID, ContainerPageNo, DocumentPageNo, enum_NTAOType.Tag, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);
                                            if (dt != null)
                                            {
                                                if (dt.Rows.Count > 0)
                                                {
                                                    for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                    {
                                                        _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                        _sqlcommand = new SqlCommand();
                                                        if (_sqlcommand != null)
                                                        {
                                                            _sqlcommand.Connection = _connection;
                                                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                            _sqlcommand.Transaction = _transaction;

                                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                            {
                                                                _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3_RCM";
                                                            }
                                                            else
                                                            {
                                                                _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";
                                                            }

                                                            _sqlcommand.Parameters.Clear();

                                                            _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = DestinationDocument.DocumentID;
                                                            _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = DestinationDocument.ContainerID;
                                                            _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = ContanierPageNumber;
                                                            _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = DocumentPageNumber;
                                                            _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                            _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                            _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                            _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                            _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                            _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                            _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Tag.GetHashCode();
                                                            _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = DestinationDocument.ClinicID;
                                                            _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                            {
                                                                _transaction.Rollback();
                                                                if (_sqlcommand != null)
                                                                {
                                                                    _sqlcommand.Parameters.Clear();
                                                                    _sqlcommand.Dispose();
                                                                    _sqlcommand = null;
                                                                }
                                                                return _return;
                                                            }
                                                            if (_sqlcommand != null)
                                                            {
                                                                _sqlcommand.Parameters.Clear();
                                                                _sqlcommand.Dispose();
                                                                _sqlcommand = null;
                                                            }
                                                        }


                                                    }
                                                }
                                                dt.Dispose();
                                                dt = null;
                                            }
                                            #endregion
                                        }
                                        #region "Insert Acknowledge Into Destination"
                                        if (SelectedDocuments[_DocCounter].IsAcknowledge == true && SelectedDocuments[_DocCounter].PageCount == SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count)
                                        {
                                            dt = GetNATODetails(DocumentID, ContainerID, 0, 0, enum_NTAOType.Acknowledge, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);

                                            if (dt != null)
                                            {
                                                if (dt.Rows.Count > 0)
                                                {
                                                    for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                    {

                                                        _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                        _sqlcommand = new SqlCommand();
                                                        if (_sqlcommand != null)
                                                        {
                                                            _sqlcommand.Connection = _connection;
                                                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                            _sqlcommand.Transaction = _transaction;

                                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                            {
                                                                _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3_RCM";
                                                            }
                                                            else
                                                            {
                                                                _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";
                                                            }

                                                            _sqlcommand.Parameters.Clear();

                                                            _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = DestinationDocument.DocumentID;
                                                            _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = DestinationDocument.ContainerID;
                                                            _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = 0;
                                                            _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = 0;
                                                            _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                            _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                            _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                            _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                            _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                            _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                            _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Acknowledge.GetHashCode();
                                                            _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                            _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                            {
                                                                _transaction.Rollback();
                                                                if (_sqlcommand != null)
                                                                {
                                                                    _sqlcommand.Parameters.Clear();
                                                                    _sqlcommand.Dispose();
                                                                    _sqlcommand = null;
                                                                }
                                                                return _return;
                                                            }
                                                            if (_sqlcommand != null)
                                                            {
                                                                _sqlcommand.Parameters.Clear();
                                                                _sqlcommand.Dispose();
                                                                _sqlcommand = null;
                                                            }
                                                        }
                                                    }
                                                }
                                                dt.Dispose();
                                                dt = null;
                                            }
                                            _strQry = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = "DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE " +
                                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                            "NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " ";
                                            }
                                            else
                                            {
                                                _strQry = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
                                            "eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                            "NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " ";
                                            }

                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.ExecuteNonQuery();
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region "Delete Notes,Tags From Source Document"
                                        for (int i = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i >= 0; i--)
                                        {
                                            //Note, Acknowledge, User Tag
                                            //Delete
                                            _strQry = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = "DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE " +
                                            "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                            "ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                            }
                                            else
                                            {
                                                _strQry = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
                                            "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                            "ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                            }

                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {

                                                _sqlcommand.ExecuteNonQuery();
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                            //Update
                                            _strQry = "";

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = "UPDATE eDocument_NTAO_V3_RCM WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                            "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                            "ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                            }
                                            else
                                            {
                                                _strQry = "UPDATE eDocument_NTAO_V3 WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                            "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                            "ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                            }

                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.ExecuteNonQuery();
                                                if (_sqlcommand != null)
                                                {
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }

                                        }
                                        #endregion

                                    }

                                    #endregion
                                    #endregion
                                    #region "File operation"

                                    gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction();
                                    //  byte[] InputStream = null;
                                    //  byte[] OutputStream = null;
                                    //  Int32 OutPutFilePageCount = 0;

                                    if (oSDKInteraction != null)
                                    {
                                        for (int _ConCounter = 0; _ConCounter <= SelectedDocuments[_DocCounter].Containers.Count - 1; _ConCounter++)
                                        {


                                            if (oPages != null)
                                            {
                                                //   InputStream = null;
                                                //   OutputStream = null;

                                                //Start/Code Case No -GLO2011-0011693- While moving the large file it throws th error
                                                //InputStream = (byte[])oList.GetContainerStream(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].Containers[_ConCounter].ContainerID, SelectedDocuments[_DocCounter].ClinicID);
                                                //SourceFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Source", "pdf");
                                                //if (SourceFileName != "")
                                                //{
                                                //    if (File.Exists(SourceFileName) == true)
                                                //    {
                                                //        File.Delete(SourceFileName);
                                                //    }
                                                //}
                                                //ConvertBinaryToFile(InputStream, SourceFileName);
                                                SourceFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Source", "pdf");
                                                if (SourceFileName != "")
                                                {
                                                    if (File.Exists(SourceFileName) == true)
                                                    {
                                                        File.Delete(SourceFileName);
                                                    }
                                                }
                                                oList.GetContainerStream(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].Containers[_ConCounter].ContainerID, SelectedDocuments[_DocCounter].ClinicID, ref  SourceFileName, _OpenExternalSource);
                                                //End/Code Case No -GLO2011-0011693- While moving the large file it throws th error


                                                //ContainerID = 0;
                                                //ContainerID = GetContainerID(DestinationDocument.DocumentID,SelectedDocuments[_DocCounter].Containers[_ConCounter].DocumentPageFrom, SelectedDocuments[_DocCounter].Containers[_ConCounter].DocumentPageTo, SelectedDocuments[_DocCounter].ClinicID);
                                                //Start/Code Case No -GLO2011-0011693- While moving the large file it throws th error
                                                //OutputStream = (byte[])oList.GetContainerStream(DestinationDocument.DocumentID, DestinationDocument.ContainerID, DestinationDocument.ClinicID);
                                                //DestFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Dest", "pdf");
                                                //if (File.Exists(DestFileName) == true)
                                                //{
                                                //    File.Delete(DestFileName);
                                                //}
                                                //ConvertBinaryToFile(OutputStream, DestFileName);
                                                DestFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Dest", "pdf");
                                                if (File.Exists(DestFileName) == true)
                                                {
                                                    File.Delete(DestFileName);
                                                }
                                                oList.GetContainerStream(DestinationDocument.DocumentID, DestinationDocument.ContainerID, DestinationDocument.ClinicID, ref  DestFileName, _OpenExternalSource);
                                                //End/Code Case No -GLO2011-0011693- While moving the large file it throws th error

                                                if (oSDKInteraction.MergePagesinExistingDocument(oPages, SourceFileName, DestFileName) == false)
                                                {
                                                    _transaction.Rollback();
                                                    if (_sqlcommand != null)
                                                    {
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                    }
                                                    return _return;
                                                }
                                                _strUpdate = "";
                                                if (File.Exists(SourceFileName) == true)
                                                {
                                                    Int32 SourcePageFrom = 0;
                                                    Int32 SourcePageTo = 0;
                                                    SourcePageFrom = SelectedDocuments[_DocCounter].Containers[_ContCounter].DocumentPageFrom;
                                                    SourcePageTo = SelectedDocuments[_DocCounter].Containers[_ContCounter].DocumentPageFrom - SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                                    if (SourcePageTo == 0)
                                                    {
                                                        SourcePageTo = 1;
                                                    }


                                                    if (SelectedDocNewPageCount != 0)
                                                    {
                                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                        {
                                                            _strUpdate = "UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET iDocumentStream = " + 0x0 + ",DocumentPageFrom = " + SourcePageFrom + ", DocumentPageTo = " + SourcePageTo + " WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                                        }
                                                        else
                                                        {
                                                            _strUpdate = "UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET iDocumentStream = " + 0x0 + ",DocumentPageFrom = " + SourcePageFrom + ", DocumentPageTo = " + SourcePageTo + " WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                                        }

                                                        _sqlcommand = new SqlCommand(_strUpdate, _connection, _transaction);
                                                        if (_sqlcommand != null)
                                                        {
                                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                            {
                                                                _transaction.Rollback();
                                                                if (_sqlcommand != null)
                                                                {
                                                                    _sqlcommand.Parameters.Clear();
                                                                    _sqlcommand.Dispose();
                                                                    _sqlcommand = null;
                                                                }

                                                                return _return;


                                                            }
                                                            if (_sqlcommand != null)
                                                            {
                                                                _sqlcommand.Parameters.Clear();
                                                                _sqlcommand.Dispose();
                                                                _sqlcommand = null;
                                                            }
                                                        }

                                                        Cls_SQLFileStream.SaveFile(SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID, SelectedDocuments[_DocCounter].DocumentID, SourceFileName, _transaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);
                                                    }
                                                    else
                                                    {
                                                        string _strDelete = null;

                                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                        {
                                                            _strDelete = "DELETE FROM eDocument_Container_V3_RCM WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                                        }
                                                        else
                                                        {
                                                            _strDelete = "DELETE FROM eDocument_Container_V3 WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                                        }

                                                        _sqlcommand = new SqlCommand(_strDelete, _connection, _transaction);
                                                        if (_sqlcommand != null)
                                                        {
                                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                            {
                                                                _transaction.Rollback();
                                                                if (_sqlcommand != null)
                                                                {
                                                                    _sqlcommand.Parameters.Clear();
                                                                    _sqlcommand.Dispose();
                                                                    _sqlcommand = null;
                                                                }
                                                                return _return;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (File.Exists(DestFileName) == true)
                                                {
                                                    Int32 DestPageFrom = 0;
                                                    Int32 DestPageTo = 0;
                                                    DestPageFrom = GetDestinationPageFrom(DestinationDocument.DocumentID, DestinationDocument.ContainerID, DestinationDocument.ClinicID, _OpenExternalSource);
                                                    DestPageTo = GetDestinationPageTo(DestinationDocument.DocumentID, DestinationDocument.ContainerID, DestinationDocument.ClinicID, _OpenExternalSource) + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;

                                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                    {
                                                        _strUpdate = "UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET iDocumentStream = " + 0x0 + ",DocumentPageFrom = " + DestPageFrom + ", DocumentPageTo = " + DestPageTo + " WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND eContainerID = " + DestinationDocument.ContainerID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                                    }
                                                    else
                                                    {
                                                        _strUpdate = "UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET iDocumentStream = " + 0x0 + ",DocumentPageFrom = " + DestPageFrom + ", DocumentPageTo = " + DestPageTo + " WHERE eDocumentID = " + DestinationDocument.DocumentID + " AND eContainerID = " + DestinationDocument.ContainerID + " AND ClinicID = " + DestinationDocument.ClinicID + "";
                                                    }

                                                    _sqlcommand = new SqlCommand(_strUpdate, _connection, _transaction);
                                                    if (_sqlcommand != null)
                                                    {
                                                        if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                        {
                                                            _transaction.Rollback();
                                                            if (_sqlcommand != null)
                                                            {
                                                                _sqlcommand.Parameters.Clear();
                                                                _sqlcommand.Dispose();
                                                                _sqlcommand = null;
                                                            }
                                                            return _return;
                                                        }
                                                        if (_sqlcommand != null)
                                                        {
                                                            _sqlcommand.Parameters.Clear();
                                                            _sqlcommand.Dispose();
                                                            _sqlcommand = null;
                                                        }
                                                    }

                                                    Cls_SQLFileStream.SaveFile(DestinationDocument.ContainerID, DestinationDocument.DocumentID, DestFileName, _transaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);
                                                }
                                                if (File.Exists(SourceFileName) == true)
                                                {
                                                    File.Delete(SourceFileName);
                                                }
                                                if (File.Exists(DestFileName) == true)
                                                {
                                                    File.Delete(DestFileName);
                                                }
                                            }
                                            else
                                            {
                                                if (File.Exists(SourceFileName) == true)
                                                {
                                                    File.Delete(SourceFileName);
                                                }
                                                if (File.Exists(DestFileName) == true)
                                                {
                                                    File.Delete(DestFileName);
                                                }
                                                _transaction.Rollback();
                                                break;
                                            }
                                        }
                                        if (oSDKInteraction != null)
                                        {
                                            oSDKInteraction.Dispose();
                                            oSDKInteraction = null;
                                        }
                                    }

                                    #endregion
                                }
                            }

                            //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                            if (_bMeargeDocHaveTask)
                            {
                                _mainConnection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                                _mainConnection.Open();

                                Int64 nTaskID = 0;
                                string _strTaskSelect = "SELECT nTaskID FROM TM_TaskMST WHERE nPatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND nTaskType=5 AND nReferenceID2= " + SelectedDocuments[_DocCounter].DocumentID + "";
                                _sqlcommand = new SqlCommand(_strTaskSelect, _mainConnection);
                                nTaskID = System.Convert.ToInt64(_sqlcommand.ExecuteScalar());
                                if (nTaskID != 0)
                                {
                                    string _strTaskUpdate = "UPDATE TM_TaskMST WITH(ROWLOCK) SET nReferenceID2 = " + DestinationDocument.DocumentID + "  WHERE nTaskID = " + nTaskID.ToString();
                                    _sqlcommand = new SqlCommand(_strTaskUpdate, _mainConnection);
                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                    {
                                        _sqlcommand.Parameters.Clear();
                                        _sqlcommand.Dispose();
                                        _sqlcommand = null;
                                        return _return;
                                    }
                                }

                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }
                        }

                        _transaction.Commit();
                        _return = true;
                    }
                }
                catch (Exception ex)
                {

                    _transaction.Rollback();
                    _ErrorMessage = ex.Message;
                    _return = false;
                }
                finally
                {
                    if (_connection != null)
                    {
                        if (_connection.State == ConnectionState.Open)
                        {
                            _connection.Close();


                        }
                        _connection.Dispose();
                        _connection = null;
                    }
                    //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                    if (_mainConnection != null)
                    {
                        if (_mainConnection.State == ConnectionState.Open)
                        {
                            _mainConnection.Close();
                        }
                        _mainConnection.Dispose();
                        _mainConnection = null;
                    }

                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }

                    if (File.Exists(SourceFileName) == true)
                    {
                        File.Delete(SourceFileName);
                    }
                    if (File.Exists(DestFileName) == true)
                    {
                        File.Delete(DestFileName);
                    }
                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (oList != null)
                    {
                        oList.Dispose();
                        oList = null;
                    }
                }
                _retDocumentID = DestinationDocument.DocumentID;
                _retContainerID = DestinationDocument.ContainerID;
                return _return;
            }

            public bool SendtoNewDocument(DocumentContextMenu.eContextDocuments SelectedDocuments, DocumentContextMenu.eContextEventParameter DestinationDocument, string DocumentName, out Int64 _retDocumentID, out Int64 _retContainerID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                SqlParameter _sqlParameter = null;
                SqlDataAdapter _sqlAdpter = null;
                DataTable dt;
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;

                //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                SqlConnection _mainConnection = null;
                Boolean _bCreateFullNewDocument = false;
                //byte[] InputStream = null;//Start/Case No -GLO2011-0011693- While moving the large file it throws th error


                #region "Variable Declaration"
                Int32 SelectedDocPageCount = 0;
                Int32 SelectedDocNewPageCount = 0;
                string _strUpdate = "";
                // string _strInsert = "";
                string _strQry = "";
                string DestFileName = "";
                string SourceFileName = "";
                ArrayList oPages;
                Int64 DocumentID = 0;
                Int64 ContainerID = 0;
                Int64 _PrefixID = 0;
                Int32 ContainerPageNo = 0;
                Int32 DocumentPageNo = 0;
                //  Int64 NATOID = 0;
                bool _return = false;
                #endregion
                gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                try
                {

                    _retDocumentID = 0;
                    _retContainerID = 0;
                    //gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                    //Changed by rahul patel on 27-10-2010
                    //for Hybrid database change i.e DMS connection string change.
                    //_connection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                    _connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                    _connection.Open();
                    _transaction = _connection.BeginTransaction();
                    for (int _DocCounter = 0; _DocCounter <= SelectedDocuments.Count - 1; _DocCounter++)
                    {
                        for (int _ContCounter = 0; _ContCounter <= SelectedDocuments[_DocCounter].Containers.Count - 1; _ContCounter++)
                        {

                            #region "GetDocumentInfo"
                            SelectedDocPageCount = oList.GetDocumentPageCount(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].PatientID, SelectedDocuments[_DocCounter].ClinicID, _OpenExternalSource);
                            SelectedDocNewPageCount = SelectedDocPageCount - SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                            #endregion

                            #region "Database Region"
                            #region "Update Selected Document details And Pages"
                            //// Update Details Table
                            if (SelectedDocNewPageCount == 0)
                            {
                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _strQry = "DELETE FROM eDocument_Details_V3_RCM WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                }
                                else
                                {
                                    _strQry = "DELETE FROM eDocument_Details_V3 WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                }

                                _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                {
                                    _transaction.Rollback();
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                                    _bCreateFullNewDocument = false;
                                    return _return;
                                }
                                //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                                _bCreateFullNewDocument = true;
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }
                            else
                            {
                                //// Check Remaining Pages has Notes or Not
                                string _selectedPages = "";

                                for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                {
                                    _selectedPages = _selectedPages + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber.ToString() + ",";
                                }
                                _selectedPages = _selectedPages.TrimEnd(',');
                                bool _HasNoteForRemainingPages = false;
                                if (_selectedPages.Trim() != "")
                                {

                                    _strQry = "";

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _strQry = " SELECT ISNULL(count(HasNote),0) AS IsNoteExits FROM eDocument_Pages_V3_RCM WITH(NOLOCK)" +
                                              " WHERE HasNote = 'true'  " +
                                              " AND DocumentPageNumber NOT IN (" + _selectedPages + ") " +
                                              " AND eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " " +
                                              " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " " +
                                              " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                    }
                                    else
                                    {
                                        _strQry = " SELECT ISNULL(count(HasNote),0) AS IsNoteExits FROM eDocument_Pages_V3 WITH(NOLOCK)" +
                                              " WHERE HasNote = 'true'  " +
                                              " AND DocumentPageNumber NOT IN (" + _selectedPages + ") " +
                                              " AND eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " " +
                                              " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " " +
                                              " AND ClinicID = " + gloEDocV3Admin.gClinicID + "";
                                    }

                                    _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);

                                    Object retVal = _sqlcommand.ExecuteScalar();
                                    if (retVal != null && retVal != DBNull.Value && System.Convert.ToInt32(retVal) > 0)
                                    { _HasNoteForRemainingPages = true; retVal = null; }
                                    else
                                    { _HasNoteForRemainingPages = false; }
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;

                                }

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _strUpdate = "UPDATE eDocument_Details_V3_RCM WITH(ROWLOCK) SET PageCounts = " + SelectedDocNewPageCount + ",HasNote = '" + _HasNoteForRemainingPages + "'  WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                }
                                else
                                {
                                    _strUpdate = "UPDATE eDocument_Details_V3 WITH(ROWLOCK) SET PageCounts = " + SelectedDocNewPageCount + ",HasNote = '" + _HasNoteForRemainingPages + "'  WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND PatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                }

                                _sqlcommand = new SqlCommand(_strUpdate, _connection, _transaction);
                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                {
                                    _transaction.Rollback();
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    return _return;
                                }
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }

                            string BookMarkTag = "";
                            /// Update Page Table

                            for (int i = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i >= 0; i--)
                            {

                                _strQry = "";

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _strQry = "DELETE eDocument_Pages_V3_RCM WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                }
                                else
                                {
                                    _strQry = "DELETE eDocument_Pages_V3 WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                }

                                _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                {
                                    _transaction.Rollback();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    return _return;
                                }
                                _strQry = "";

                                if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                {
                                    _strQry = "SELECT ContainerPageNumber,DocumentPageNumber,HasNote FROM eDocument_Pages_V3_RCM WITH(NOLOCK) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " Order by ContainerPageNumber";
                                }
                                else
                                {
                                    _strQry = "SELECT ContainerPageNumber,DocumentPageNumber,HasNote FROM eDocument_Pages_V3 WITH(NOLOCK) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " Order by ContainerPageNumber";
                                }

                                _sqlcommand.Dispose();
                                _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                _sqlAdpter = new SqlDataAdapter(_sqlcommand);
                                dt = new DataTable();
                                _sqlAdpter.Fill(dt);
                                if (dt != null)
                                {
                                    if (dt.Rows.Count > 0)
                                    {
                                        for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                        {
                                            _strQry = "";
                                            BookMarkTag = SelectedDocuments[0].Year.ToString() + "~" + SelectedDocuments[_DocCounter].Category.ToString() + "~" + SelectedDocuments[_DocCounter].Month.ToString() + "~" + SelectedDocuments[_DocCounter].DocumentID.ToString() + "~" + System.Convert.ToString(System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) - 1);

                                            if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                            {
                                                _strQry = "UPDATE eDocument_Pages_V3_RCM WITH(ROWLOCK) SET " +
                                            " ContainerPageNumber = (ContainerPageNumber - 1) , " +
                                            " DocumentPageNumber= (DocumentPageNumber -1), " +
                                            " BookMarkTag = '" + BookMarkTag + "' " +
                                            " WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + "  " +
                                            " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " " +
                                            " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + " " +
                                            " AND ContainerPageNumber =" + System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) + " " +
                                            " AND DocumentPageNumber=" + System.Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) + " ";
                                            }
                                            else
                                            {
                                                _strQry = "UPDATE eDocument_Pages_V3 WITH(ROWLOCK) SET " +
                                            " ContainerPageNumber = (ContainerPageNumber - 1) , " +
                                            " DocumentPageNumber= (DocumentPageNumber -1), " +
                                            " BookMarkTag = '" + BookMarkTag + "' " +
                                            " WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + "  " +
                                            " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " " +
                                            " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + " " +
                                            " AND ContainerPageNumber =" + System.Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) + " " +
                                            " AND DocumentPageNumber=" + System.Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) + " ";
                                            }

                                            //_strQry = "UPDATE eDocument_Pages_V3 SET ContainerPageNumber =" + (Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) - 1) + ",DocumentPageNumber=" + (Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) - 1) + ",BookMarkTag = '" + BookMarkTag + "' WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + " AND ContainerPageNumber =" + Convert.ToInt32(dt.Rows[j]["ContainerPageNumber"]) + " AND DocumentPageNumber=" + Convert.ToInt32(dt.Rows[j]["DocumentPageNumber"]) + "  ";
                                            _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                            if (_sqlcommand.ExecuteNonQuery() <= 0)
                                            {
                                                _transaction.Rollback();
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                                _sqlAdpter.Dispose();
                                                _sqlAdpter = null;
                                                dt.Dispose();
                                                dt = null;
                                                return _return;
                                            }
                                            if (_sqlcommand != null)
                                            {
                                                _sqlcommand.Parameters.Clear();
                                                _sqlcommand.Dispose();
                                                _sqlcommand = null;
                                            }
                                        }
                                    }
                                    dt.Dispose();
                                    dt = null;
                                }
                                _sqlAdpter.Dispose();
                                _sqlAdpter = null;
                            }

                            #endregion
                            #endregion

                            #region "File Operation"
                            gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction();

                            //Start/Case No -GLO2011-0011693- While moving the large file it throws th error
                            //InputStream = (byte[])oList.GetContainerStream(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID, SelectedDocuments[_DocCounter].ClinicID);
                            //SourceFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Source", "pdf");
                            //if (File.Exists(SourceFileName) == true)
                            //{
                            //    File.Delete(SourceFileName);
                            //}
                            //ConvertBinaryToFile(InputStream, SourceFileName);
                            SourceFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Source", "pdf");
                            if (File.Exists(SourceFileName) == true)
                            {
                                File.Delete(SourceFileName);
                            }
                            oList.GetContainerStream(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID, SelectedDocuments[_DocCounter].ClinicID, ref SourceFileName, _OpenExternalSource);

                            //End/Case No -GLO2011-0011693- While moving the large file it throws th error
                            if (File.Exists(SourceFileName) == true)
                            {
                                DestFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Dest", "pdf");
                                if (File.Exists(DestFileName) == true)
                                {
                                    File.Delete(DestFileName);
                                }
                                oPages = new ArrayList();
                                for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                {
                                    oPages.Add(SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber);
                                }
                                if (oSDKInteraction.MergePagesinExistingDocument(oPages, SourceFileName, DestFileName) == false)
                                {
                                    _transaction.Rollback();
                                    if (_sqlcommand != null)
                                    {
                                        _sqlcommand.Parameters.Clear();
                                        _sqlcommand.Dispose();
                                        _sqlcommand = null;
                                    }
                                    return _return;
                                }
                                if (_sqlcommand != null)
                                {
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                }
                                #region "Update Source File in DataBase"
                                if (File.Exists(SourceFileName) == true)
                                {
                                    Int32 SourcePageFrom = 0;
                                    Int32 SourcePageTo = 0;
                                    SourcePageFrom = SelectedDocuments[_DocCounter].Containers[_ContCounter].DocumentPageFrom;
                                    SourcePageTo = SelectedDocuments[_DocCounter].Containers[_ContCounter].DocumentPageTo - SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    if (SourcePageTo == 0)
                                    {
                                        SourcePageTo = 1;
                                    }


                                    if (SelectedDocNewPageCount != 0)
                                    {
                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strUpdate = "UPDATE eDocument_Container_V3_RCM WITH(ROWLOCK) SET iDocumentStream = " + 0x0 + ",DocumentPageFrom = " + SourcePageFrom + ", DocumentPageTo = " + SourcePageTo + " WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }
                                        else
                                        {
                                            _strUpdate = "UPDATE eDocument_Container_V3 WITH(ROWLOCK) SET iDocumentStream = " + 0x0 + ",DocumentPageFrom = " + SourcePageFrom + ", DocumentPageTo = " + SourcePageTo + " WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }

                                        _sqlcommand = new SqlCommand(_strUpdate, _connection, _transaction);
                                        if (_sqlcommand.ExecuteNonQuery() <= 0)
                                        {
                                            _transaction.Rollback();
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                            return _return;
                                        }
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                        #region "Update Source File"
                                        Cls_SQLFileStream.SaveFile(SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID, SelectedDocuments[_DocCounter].DocumentID, SourceFileName, _transaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);

                                        #endregion
                                    }
                                    else
                                    {
                                        string _strDelete = null;

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strDelete = "DELETE FROM eDocument_Container_V3_RCM WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }
                                        else
                                        {
                                            _strDelete = "DELETE FROM eDocument_Container_V3 WITH(READPAST) WHERE eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + SelectedDocuments[_DocCounter].ClinicID + "";
                                        }

                                        _sqlcommand = new SqlCommand(_strDelete, _connection, _transaction);
                                        if (_sqlcommand.ExecuteNonQuery() <= 0)
                                        {
                                            _transaction.Rollback();
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                            return _return;
                                        }
                                        if (_sqlcommand != null)
                                        {
                                            _sqlcommand.Parameters.Clear();
                                            _sqlcommand.Dispose();
                                            _sqlcommand = null;
                                        }
                                    }
                                }
                                #endregion
                                #region "Insert Destination File in DataBase"
                                if (File.Exists(DestFileName) == true)
                                {
                                    Int32 DestPageFrom = 0;
                                    Int32 DestPageTo = 0;
                                    DestPageFrom = 1;
                                    DestPageTo = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    #region " Document Details "
                                    Int64 _PrefixTransactionID = GetPrefixTransactionID(DestinationDocument.PatientID, _connection, _transaction);

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails_RCM", _connection);
                                    }
                                    else
                                    {
                                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
                                    }

                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                    _sqlcommand.CommandTimeout = 0;
                                    _sqlcommand.Transaction = _transaction;

                                    _sqlcommand.Parameters.Clear();

                                    _sqlParameter = new SqlParameter();
                                    _sqlParameter.ParameterName = "@eDocumentID";
                                    _sqlParameter.Value = _CurrentDocumentID;
                                    _sqlParameter.Direction = ParameterDirection.InputOutput;
                                    _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                    _sqlcommand.Parameters.Add(_sqlParameter);
                                    _sqlParameter = null;

                                    _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = DocumentName;
                                    _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestinationDocument.CategoryID;
                                    _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestinationDocument.Category;

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {

                                        if (string.IsNullOrEmpty(DestinationDocument.SubCategory))
                                        {
                                            _sqlcommand.Parameters.Add("@SubCategory", System.Data.SqlDbType.VarChar).Value = DateTime.Now.ToString("MM dd yyyy");
                                        }
                                        else
                                        {
                                            _sqlcommand.Parameters.Add("@SubCategory", System.Data.SqlDbType.VarChar).Value = DestinationDocument.SubCategory;
                                        }


                                    }

                                    _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = DestinationDocument.PatientID;
                                    _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestinationDocument.Year;
                                    _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestinationDocument.Month;
                                    _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                    _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;

                                    if (SelectedDocNewPageCount == 0)
                                    {

                                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = SelectedDocuments[_DocCounter].IsAcknowledge;
                                    }
                                    else
                                    {
                                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
                                    }
                                    bool HasNotes = false;
                                    for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                    {
                                        if (SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].HasNotes == true)
                                        {
                                            HasNotes = true;
                                            break;
                                        }
                                    }
                                    _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = HasNotes;
                                    _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
                                    _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
                                    _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
                                    _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = Environment.MachineName;
                                    _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
                                    _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
                                    bool IsCompress = false;
                                    if (SelectedDocNewPageCount == 0)
                                    {

                                        IsCompress = IsDocumentCompressed(SelectedDocuments[_DocCounter].PatientID, SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);
                                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = IsCompress;
                                    }
                                    else
                                    {
                                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = false;
                                    }


                                    _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = SelectedDocuments[_DocCounter].ClinicID;
                                    _PrefixTransactionID = 0;
                                    _PrefixTransactionID = GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID, _connection, _transaction);
                                    _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                    object _sqlresult = _sqlcommand.ExecuteNonQuery();
                                    object _Returnvalue = null;
                                    if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
                                    {
                                        _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
                                    }
                                    _CurrentDocumentID = 0;
                                    _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    #endregion

                                    #region " Container Details "

                                    _PrefixTransactionID = GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID, _connection, _transaction);

                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                    {
                                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer_RCM", _connection, _transaction);
                                    }
                                    else
                                    {
                                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection, _transaction);
                                    }

                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                    _sqlcommand.CommandTimeout = 0;
                                    _sqlcommand.Transaction = _transaction;

                                    _sqlcommand.Parameters.Clear();
                                    _sqlParameter = new SqlParameter();
                                    _sqlParameter.ParameterName = "@eContainerID";
                                    _sqlParameter.Value = _CurrentContainerID;
                                    _sqlParameter.Direction = ParameterDirection.InputOutput;
                                    _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                    _sqlcommand.Parameters.Add(_sqlParameter);
                                    _sqlParameter = null;

                                    _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                    _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = DestPageFrom;
                                    _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = DestPageTo;
                                    _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = "pdf";
                                    _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
                                    _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Category.GetHashCode();
                                    _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = Environment.MachineName;
                                    _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = Environment.MachineName;
                                    _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = SelectedDocuments[_DocCounter].ClinicID;
                                    _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;
                                    _sqlcommand.Parameters.Add("@fileStream", SqlDbType.VarBinary).Value = DBNull.Value;
                                    _Returnvalue = 0;
                                    _sqlresult = null;
                                    _sqlresult = _sqlcommand.ExecuteNonQuery();
                                    if (_sqlcommand.Parameters["@eContainerID"].Value != null)
                                    {
                                        _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
                                    }
                                    _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    #endregion

                                    #region "Insert File in to Database"
                                    string _filePath = System.Convert.ToString(DestFileName);

                                    Cls_SQLFileStream.SaveFile(_CurrentContainerID, _CurrentDocumentID, _filePath, _transaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, _OpenExternalSource);

                                    #endregion "Insert File in to Database"

                                    #region "Page Region"
                                    for (Int32 _PageCounter = 0; _PageCounter <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; _PageCounter++)
                                    {
                                        string _BookMarkTag = DestinationDocument.Year + "~" + DestinationDocument.Category + "~" + DestinationDocument.Month + "~" + _CurrentDocumentID.ToString() + "~" + System.Convert.ToString(_PageCounter + 1);
                                        //string _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        //"(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + (_PageCounter + 1) + "," + (_PageCounter + 1) + ",'Page ' + '" + Convert.ToString(_PageCounter + 1) + "','" + _BookMarkTag + "','" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].HasNotes + "'," + DestinationDocument.ClinicID + ")";

                                        string _strSQL = null;

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strSQL = "INSERT INTO eDocument_Pages_V3_RCM (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + (_PageCounter + 1) + "," + (_PageCounter + 1) + ",'" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].PageName + "','" + _BookMarkTag + "','" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].HasNotes + "'," + DestinationDocument.ClinicID + ")";
                                        }
                                        else
                                        {
                                            _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + (_PageCounter + 1) + "," + (_PageCounter + 1) + ",'" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].PageName + "','" + _BookMarkTag + "','" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].HasNotes + "'," + DestinationDocument.ClinicID + ")";
                                        }

                                        _sqlcommand = new SqlCommand(_strSQL, _connection, _transaction);
                                        _sqlcommand.Transaction = _transaction;
                                        _sqlcommand.ExecuteNonQuery();

                                        #region "Insert Notes for Destination Document"
                                        //  dt = new DataTable();
                                        DocumentID = SelectedDocuments[_DocCounter].DocumentID;
                                        ContainerID = SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID;
                                        ContainerPageNo = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].ContainerPageNumber;
                                        DocumentPageNo = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].DocumentPageNumber;
                                        dt = GetNATODetails(DocumentID, ContainerID, ContainerPageNo, DocumentPageNo, enum_NTAOType.Notes, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);
                                        if (dt != null)
                                        {
                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                {
                                                    _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                    _sqlcommand = new SqlCommand();
                                                    _sqlcommand.Connection = _connection;
                                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlcommand.Transaction = _transaction;

                                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                    {
                                                        _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3_RCM";
                                                    }
                                                    else
                                                    {
                                                        _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";
                                                    }

                                                    _sqlcommand.Parameters.Clear();


                                                    _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                    _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                    _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                    _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                    _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                    _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                    _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Notes.GetHashCode();
                                                    _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                    _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                    {
                                                        _transaction.Rollback();
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                        return _return;
                                                    }
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                            dt.Dispose();
                                            dt = null;
                                        }
                                        #endregion

                                        #region "Insert Tags in Destination Document"
                                        dt = GetNATODetails(DocumentID, ContainerID, ContainerPageNo, DocumentPageNo, enum_NTAOType.Tag, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);
                                        if (dt != null)
                                        {
                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                {
                                                    _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                    _sqlcommand = new SqlCommand();
                                                    _sqlcommand.Connection = _connection;
                                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlcommand.Transaction = _transaction;

                                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                    {
                                                        _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3_RCM";
                                                    }
                                                    else
                                                    {
                                                        _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";
                                                    }

                                                    _sqlcommand.Parameters.Clear();

                                                    _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                    _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                    _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                    _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                    _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                    _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                    _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Tag.GetHashCode();
                                                    _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                    _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                    {
                                                        _transaction.Rollback();
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                        return _return;
                                                    }
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;

                                                }
                                            }
                                            dt.Dispose();
                                            dt = null;
                                        }
                                        #endregion
                                    }

                                    #region "Insert Acknowledgement for New Document and Delete it from Souce Document"
                                    if (SelectedDocuments[_DocCounter].IsAcknowledge == true && SelectedDocuments[_DocCounter].PageCount == SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count)
                                    {
                                        dt = GetNATODetails(DocumentID, ContainerID, 0, 0, enum_NTAOType.Acknowledge, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, _OpenExternalSource);

                                        if (dt != null)
                                        {
                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                {

                                                    _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                    _sqlcommand = new SqlCommand();
                                                    _sqlcommand.Connection = _connection;
                                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlcommand.Transaction = _transaction;

                                                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                                    {
                                                        _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3_RCM";
                                                    }
                                                    else
                                                    {
                                                        _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";
                                                    }

                                                    _sqlcommand.Parameters.Clear();


                                                    _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = 0;
                                                    _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = 0;
                                                    _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                    _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                    _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                    _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                    _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                    _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                    _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Acknowledge.GetHashCode();
                                                    _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                    _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                    {
                                                        _transaction.Rollback();
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                        return _return;
                                                    }
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                            dt.Dispose();
                                            dt = null;
                                        }
                                        _strQry = "";

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strQry = "DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE " +
                                        "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                        "NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " ";
                                        }
                                        else
                                        {
                                            _strQry = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
                                        "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                        "NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " ";
                                        }


                                        _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                        _sqlcommand.ExecuteNonQuery();
                                        _sqlcommand.Parameters.Clear();
                                        _sqlcommand.Dispose();
                                        _sqlcommand = null;
                                    }
                                    #endregion



                                    #region "Delete Notes and Tags For Source Document
                                    for (int i = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i >= 0; i--)
                                    {
                                        _strQry = "";

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strQry = "DELETE FROM eDocument_NTAO_V3_RCM WITH(READPAST) WHERE " +
                                        "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                        "ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                        }
                                        else
                                        {
                                            _strQry = "DELETE FROM eDocument_NTAO_V3 WITH(READPAST) WHERE " +
                                        "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                        "ContainerPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                        }


                                        _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                        _sqlcommand.ExecuteNonQuery();

                                        _strQry = "";

                                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                                        {
                                            _strQry = "UPDATE eDocument_NTAO_V3_RCM WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                        "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                        "ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                        }
                                        else
                                        {
                                            _strQry = "UPDATE eDocument_NTAO_V3 WITH(ROWLOCK) SET ContainerPageNumber = ContainerPageNumber - 1 , DocumentPageNumber = DocumentPageNumber - 1 WHERE " +
                                        "eDocumentID = " + SelectedDocuments[_DocCounter].DocumentID + " AND eContainerID = " + SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID + " AND ClinicID = " + gloEDocV3Admin.gClinicID + " AND " +
                                        "ContainerPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber + " AND DocumentPageNumber > " + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].DocumentPageNumber + "";
                                        }

                                        _sqlcommand.Parameters.Clear();
                                        _sqlcommand.Dispose();
                                        _sqlcommand = null;
                                        _sqlcommand = new SqlCommand(_strQry, _connection, _transaction);
                                        _sqlcommand.ExecuteNonQuery();
                                        _sqlcommand.Parameters.Clear();
                                        _sqlcommand.Dispose();
                                        _sqlcommand = null;

                                    }
                                    #region
                                }
                                    #endregion
                            }
                            else
                            {
                                _transaction.Rollback();
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                                return _return;
                            }

                                    #endregion
                                    #endregion
                                #endregion
                            #endregion
                        }

                        //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                        if (_bCreateFullNewDocument)
                        {
                            _mainConnection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                            _mainConnection.Open();

                            Int64 nTaskID = 0;
                            string _strTaskSelect = "SELECT nTaskID FROM TM_TaskMST WHERE nPatientID = " + SelectedDocuments[_DocCounter].PatientID + " AND nTaskType=5 AND nReferenceID2= " + SelectedDocuments[_DocCounter].DocumentID + "";
                            _sqlcommand = new SqlCommand(_strTaskSelect, _mainConnection);
                            nTaskID = System.Convert.ToInt64(_sqlcommand.ExecuteScalar());
                            if (nTaskID != 0)
                            {
                                string _strTaskUpdate = "UPDATE TM_TaskMST WITH(ROWLOCK) SET nReferenceID2 = " + _CurrentDocumentID + "  WHERE nTaskID = " + nTaskID.ToString();
                                _sqlcommand = new SqlCommand(_strTaskUpdate, _mainConnection);
                                if (_sqlcommand.ExecuteNonQuery() <= 0)
                                {
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    return _return;
                                }
                            }

                            _sqlcommand.Parameters.Clear();
                            _sqlcommand.Dispose();
                            _sqlcommand = null;
                        }
                    }
                    _transaction.Commit();
                    _return = true;
                }
                catch (Exception ex)
                {
                    _transaction.Rollback();
                    _ErrorMessage = ex.Message;
                    _return = false;
                }
                finally
                {
                    if (File.Exists(SourceFileName) == true)
                    {
                        File.Delete(SourceFileName);
                    }
                    if (File.Exists(DestFileName) == true)
                    {
                        File.Delete(DestFileName);
                    }
                    if (_connection.State == ConnectionState.Open) { _connection.Close(); }
                    if (_connection != null) { _connection.Dispose(); }
                    //Bug #79927 and Bug #79925 gloEMR: Scan Docs should not loose task association.
                    if (_mainConnection != null)
                    {
                        if (_mainConnection.State == ConnectionState.Open)
                        {
                            _mainConnection.Close();
                        }
                        _mainConnection.Dispose();
                        _mainConnection = null;
                    }
                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (oList != null)
                    {
                        oList.Dispose();
                        oList = null;
                    }
                }
                _retDocumentID = _CurrentDocumentID;
                _retContainerID = _CurrentContainerID;
                return _return;
            }

            public bool SendtoNewDocument_RCM_To_DMS(DocumentContextMenu.eContextDocuments SelectedDocuments, DocumentContextMenu.eContextEventParameter DestinationDocument, string DocumentName, out Int64 _retDocumentID, out Int64 _retContainerID)
            {
                SqlConnection _connection = null;
                SqlTransaction _transaction = null;
                SqlCommand _sqlcommand = null;
                SqlParameter _sqlParameter = null;
                //SqlDataAdapter _sqlAdpter = null;
                DataTable dt;
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;

                #region "Variable Declaration"
                Int32 SelectedDocPageCount = 0;
                Int32 SelectedDocNewPageCount = 0;
                //string _strUpdate = "";
                // string _strInsert = "";
                //string _strQry = "";
                string DestFileName = "";
                string SourceFileName = "";
                ArrayList oPages;
                Int64 DocumentID = 0;
                Int64 ContainerID = 0;
                Int64 _PrefixID = 0;
                Int32 ContainerPageNo = 0;
                Int32 DocumentPageNo = 0;
                //  Int64 NATOID = 0;
                bool _return = false;
                #endregion
                gloEDocumentV3.eDocManager.eDocGetList oList = new eDocGetList();
                try
                {

                    _retDocumentID = 0;
                    _retContainerID = 0;

                    _connection = new SqlConnection(gloEDocV3Admin.gDMSDatabaseConnectionString);
                    _connection.Open();
                    _transaction = _connection.BeginTransaction();
                    for (int _DocCounter = 0; _DocCounter <= SelectedDocuments.Count - 1; _DocCounter++)
                    {
                        DestinationDocument.Month = SelectedDocuments[_DocCounter].Month;
                        DestinationDocument.Year = SelectedDocuments[_DocCounter].Year;

                        for (int _ContCounter = 0; _ContCounter <= SelectedDocuments[_DocCounter].Containers.Count - 1; _ContCounter++)
                        {

                            #region "GetDocumentInfo"
                            SelectedDocPageCount = oList.GetDocumentPageCount(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].PatientID, SelectedDocuments[_DocCounter].ClinicID, enum_OpenExternalSource.RCM);
                            SelectedDocNewPageCount = SelectedDocPageCount - SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                            #endregion


                            #region "File Operation"
                            gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction oSDKInteraction = new gloEDocumentV3.SDKInteraction.eDocV3SDKInteraction();

                            SourceFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Source", "pdf");
                            if (File.Exists(SourceFileName) == true)
                            {
                                File.Delete(SourceFileName);
                            }
                            oList.GetContainerStream(SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID, SelectedDocuments[_DocCounter].ClinicID, ref SourceFileName, enum_OpenExternalSource.RCM);


                            if (File.Exists(SourceFileName) == true)
                            {
                                DestFileName = gloEDocumentV3.eDocManager.eDocValidator.GetNewDocumentName(gloEDocV3Admin.gPDFTronTemporaryProcessPath, "Dest", "pdf");
                                if (File.Exists(DestFileName) == true)
                                {
                                    File.Delete(DestFileName);
                                }
                                oPages = new ArrayList();
                                for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                {
                                    oPages.Add(SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].ContainerPageNumber);
                                }
                                if (oSDKInteraction.MergePagesinExistingDocument(oPages, SourceFileName, DestFileName) == false)
                                {
                                    _transaction.Rollback();
                                    if (_sqlcommand != null)
                                    {
                                        _sqlcommand.Parameters.Clear();
                                        _sqlcommand.Dispose();
                                        _sqlcommand = null;
                                    }
                                    return _return;
                                }
                                if (_sqlcommand != null)
                                {
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                }

                                #region "Insert Destination File in DataBase"
                                if (File.Exists(DestFileName) == true)
                                {
                                    Int32 DestPageFrom = 0;
                                    Int32 DestPageTo = 0;
                                    DestPageFrom = 1;
                                    DestPageTo = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    #region " Document Details "
                                    Int64 _PrefixTransactionID = GetPrefixTransactionID(DestinationDocument.PatientID, _connection, _transaction);

                                    _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);

                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                    _sqlcommand.CommandTimeout = 0;
                                    _sqlcommand.Transaction = _transaction;

                                    _sqlcommand.Parameters.Clear();

                                    _sqlParameter = new SqlParameter();
                                    _sqlParameter.ParameterName = "@eDocumentID";
                                    _sqlParameter.Value = _CurrentDocumentID;
                                    _sqlParameter.Direction = ParameterDirection.InputOutput;
                                    _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                    _sqlcommand.Parameters.Add(_sqlParameter);
                                    _sqlParameter = null;

                                    _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = DocumentName;
                                    _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = DestinationDocument.CategoryID;
                                    _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = DestinationDocument.Category;
                                    _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = DestinationDocument.PatientID;
                                    _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = DestinationDocument.Year;
                                    _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = DestinationDocument.Month;
                                    _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count;
                                    _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                                    _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;

                                    if (SelectedDocNewPageCount == 0)
                                    {

                                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = SelectedDocuments[_DocCounter].IsAcknowledge;
                                    }
                                    else
                                    {
                                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
                                    }
                                    bool HasNotes = false;
                                    for (int i = 0; i <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; i++)
                                    {
                                        if (SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[i].HasNotes == true)
                                        {
                                            HasNotes = true;
                                            break;
                                        }
                                    }
                                    _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = HasNotes;
                                    _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
                                    _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
                                    _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
                                    _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = Environment.MachineName;
                                    _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
                                    _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
                                    bool IsCompress = false;
                                    if (SelectedDocNewPageCount == 0)
                                    {

                                        IsCompress = IsDocumentCompressed(SelectedDocuments[_DocCounter].PatientID, SelectedDocuments[_DocCounter].DocumentID, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, enum_OpenExternalSource.RCM);
                                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = IsCompress;
                                    }
                                    else
                                    {
                                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = false;
                                    }


                                    _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
                                    _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = SelectedDocuments[_DocCounter].ClinicID;
                                    _PrefixTransactionID = 0;
                                    _PrefixTransactionID = GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID, _connection, _transaction);
                                    _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;

                                    object _sqlresult = _sqlcommand.ExecuteNonQuery();
                                    object _Returnvalue = null;
                                    if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
                                    {
                                        _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
                                    }
                                    _CurrentDocumentID = 0;
                                    _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    #endregion

                                    #region " Container Details "

                                    _PrefixTransactionID = GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID, _connection, _transaction);

                                    _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection, _transaction);

                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                    _sqlcommand.CommandTimeout = 0;
                                    _sqlcommand.Transaction = _transaction;

                                    _sqlcommand.Parameters.Clear();
                                    _sqlParameter = new SqlParameter();
                                    _sqlParameter.ParameterName = "@eContainerID";
                                    _sqlParameter.Value = _CurrentContainerID;
                                    _sqlParameter.Direction = ParameterDirection.InputOutput;
                                    _sqlParameter.SqlDbType = SqlDbType.BigInt;
                                    _sqlcommand.Parameters.Add(_sqlParameter);
                                    _sqlParameter = null;

                                    _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                                    _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = DestPageFrom;
                                    _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = DestPageTo;
                                    _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = "pdf";
                                    _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
                                    _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Category.GetHashCode();
                                    _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = Environment.MachineName;
                                    _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = Environment.MachineName;
                                    _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = SelectedDocuments[_DocCounter].ClinicID;
                                    _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;
                                    _sqlcommand.Parameters.Add("@fileStream", SqlDbType.VarBinary).Value = DBNull.Value;
                                    _Returnvalue = 0;
                                    _sqlresult = null;
                                    _sqlresult = _sqlcommand.ExecuteNonQuery();
                                    if (_sqlcommand.Parameters["@eContainerID"].Value != null)
                                    {
                                        _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
                                    }
                                    _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;
                                    #endregion

                                    #region "Insert File in to Database"
                                    string _filePath = System.Convert.ToString(DestFileName);

                                    Cls_SQLFileStream.SaveFile(_CurrentContainerID, _CurrentDocumentID, _filePath, _transaction, gloEDocumentV3.gloEDocV3Admin.gClinicID, enum_OpenExternalSource.None);

                                    #endregion "Insert File in to Database"

                                    #region "Page Region"
                                    for (Int32 _PageCounter = 0; _PageCounter <= SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count - 1; _PageCounter++)
                                    {
                                        string _BookMarkTag = DestinationDocument.Year + "~" + DestinationDocument.Category + "~" + DestinationDocument.Month + "~" + _CurrentDocumentID.ToString() + "~" + System.Convert.ToString(_PageCounter + 1);

                                        string _strSQL = null;

                                        _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                        "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + (_PageCounter + 1) + "," + (_PageCounter + 1) + ",'" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].PageName + "','" + _BookMarkTag + "','" + SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].HasNotes + "'," + DestinationDocument.ClinicID + ")";

                                        _sqlcommand = new SqlCommand(_strSQL, _connection, _transaction);
                                        _sqlcommand.Transaction = _transaction;
                                        _sqlcommand.ExecuteNonQuery();

                                        #region "Insert Notes for Destination Document"
                                        //  dt = new DataTable();
                                        DocumentID = SelectedDocuments[_DocCounter].DocumentID;
                                        ContainerID = SelectedDocuments[_DocCounter].Containers[_ContCounter].ContainerID;
                                        ContainerPageNo = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].ContainerPageNumber;
                                        DocumentPageNo = SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages[_PageCounter].DocumentPageNumber;
                                        dt = GetNATODetails(DocumentID, ContainerID, ContainerPageNo, DocumentPageNo, enum_NTAOType.Notes, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, enum_OpenExternalSource.RCM);
                                        if (dt != null)
                                        {
                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                {
                                                    _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                    _sqlcommand = new SqlCommand();
                                                    _sqlcommand.Connection = _connection;
                                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlcommand.Transaction = _transaction;

                                                    _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";


                                                    _sqlcommand.Parameters.Clear();


                                                    _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                    _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                    _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                    _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                    _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                    _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                    _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Notes.GetHashCode();
                                                    _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                    _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                    {
                                                        _transaction.Rollback();
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                        return _return;
                                                    }
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                            dt.Dispose();
                                            dt = null;
                                        }
                                        #endregion

                                        #region "Insert Tags in Destination Document"
                                        dt = GetNATODetails(DocumentID, ContainerID, ContainerPageNo, DocumentPageNo, enum_NTAOType.Tag, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, enum_OpenExternalSource.RCM);
                                        if (dt != null)
                                        {
                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                {
                                                    _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                    _sqlcommand = new SqlCommand();
                                                    _sqlcommand.Connection = _connection;
                                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlcommand.Transaction = _transaction;

                                                    _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";

                                                    _sqlcommand.Parameters.Clear();

                                                    _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = _PageCounter + 1;
                                                    _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                    _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                    _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                    _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                    _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                    _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                    _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Tag.GetHashCode();
                                                    _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                    _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                    {
                                                        _transaction.Rollback();
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                        return _return;
                                                    }
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;

                                                }
                                            }
                                            dt.Dispose();
                                            dt = null;
                                        }
                                        #endregion
                                    }

                                    #region "Insert Acknowledgement for New Document and Delete it from Souce Document"
                                    if (SelectedDocuments[_DocCounter].IsAcknowledge == true && SelectedDocuments[_DocCounter].PageCount == SelectedDocuments[_DocCounter].Containers[_ContCounter].Pages.Count)
                                    {
                                        dt = GetNATODetails(DocumentID, ContainerID, 0, 0, enum_NTAOType.Acknowledge, SelectedDocuments[_DocCounter].ClinicID, _connection, _transaction, enum_OpenExternalSource.RCM);

                                        if (dt != null)
                                        {
                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int j = 0; j <= dt.Rows.Count - 1; j++)
                                                {

                                                    _PrefixID = eDocValidator.GetPrefixTransactionID(SelectedDocuments[_DocCounter].PatientID);
                                                    _sqlcommand = new SqlCommand();
                                                    _sqlcommand.Connection = _connection;
                                                    _sqlcommand.CommandType = CommandType.StoredProcedure;
                                                    _sqlcommand.Transaction = _transaction;

                                                    _sqlcommand.CommandText = "gsp_eDoc_InUpNTAO_V3";


                                                    _sqlcommand.Parameters.Clear();


                                                    _sqlcommand.Parameters.Add("@eDocumentID", SqlDbType.BigInt).Value = _CurrentDocumentID;
                                                    _sqlcommand.Parameters.Add("@eContainerID", SqlDbType.BigInt).Value = _CurrentContainerID;
                                                    _sqlcommand.Parameters.Add("@ContainerPageNumber", SqlDbType.Int).Value = 0;
                                                    _sqlcommand.Parameters.Add("@DocumentPageNumber", SqlDbType.Int).Value = 0;
                                                    _sqlcommand.Parameters.Add("@NTAOID", SqlDbType.BigInt).Value = 0;
                                                    _sqlcommand.Parameters.Add("@UserID", SqlDbType.BigInt).Value = dt.Rows[j]["UserID"];
                                                    _sqlcommand.Parameters.Add("@UserName", SqlDbType.VarChar).Value = dt.Rows[j]["UserName"];
                                                    _sqlcommand.Parameters.Add("@NTAODateTime", SqlDbType.DateTime).Value = dt.Rows[j]["NTAODateTime"];
                                                    _sqlcommand.Parameters.Add("@NTAODescription ", SqlDbType.VarChar).Value = dt.Rows[j]["NTAODescription"];
                                                    _sqlcommand.Parameters.Add("@IsPage", SqlDbType.Bit).Value = dt.Rows[j]["IsPage"];
                                                    _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = enum_NTAOType.Acknowledge.GetHashCode();
                                                    _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = gloEDocV3Admin.gClinicID;
                                                    _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixID;

                                                    if (_sqlcommand.ExecuteNonQuery() <= 0)
                                                    {
                                                        _transaction.Rollback();
                                                        _sqlcommand.Parameters.Clear();
                                                        _sqlcommand.Dispose();
                                                        _sqlcommand = null;
                                                        return _return;
                                                    }
                                                    _sqlcommand.Parameters.Clear();
                                                    _sqlcommand.Dispose();
                                                    _sqlcommand = null;
                                                }
                                            }
                                            dt.Dispose();
                                            dt = null;
                                        }

                                    }
                                    #endregion

                                }
                                   
                            }
                            else
                            {
                                _transaction.Rollback();
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                                return _return;
                            }

                                   
                                    #endregion
                                #endregion
                            #endregion
                        }

                    }
                    _transaction.Commit();
                    _return = true;
                }
                catch (Exception ex)
                {
                    _transaction.Rollback();
                    _ErrorMessage = ex.Message;
                    _return = false;
                }
                finally
                {
                    if (File.Exists(SourceFileName) == true)
                    {
                        File.Delete(SourceFileName);
                    }
                    if (File.Exists(DestFileName) == true)
                    {
                        File.Delete(DestFileName);
                    }
                    if (_connection.State == ConnectionState.Open) { _connection.Close(); }
                    if (_connection != null) { _connection.Dispose(); }

                    if (_transaction != null)
                    {
                        _transaction.Dispose();
                        _transaction = null;
                    }
                    if (oList != null)
                    {
                        oList.Dispose();
                        oList = null;
                    }
                }
                _retDocumentID = _CurrentDocumentID;
                _retContainerID = _CurrentContainerID;
                return _return;
            }

            private bool IsDocumentNameExists(string DocumentName, Int64 PatientID, string Category, Int64 ClinicID, SqlConnection oConnection, SqlTransaction oTranscation)
            {

                bool _result = false;
                string _strQuery = "";
                SqlCommand oSqlCommand = null;
                try
                {

                    _strQuery = "SELECT COUNT(*) FROM eDocument_Details_V3 WITH(NOLOCK) WHERE UPPER(DocumentName) ='" + DocumentName.ToUpper() + "' AND ClinicID=" + ClinicID + " AND UPPER(Category) = '" + Category.ToUpper() + "' AND PatientID=" + PatientID + "";
                    oSqlCommand = new SqlCommand(_strQuery, oConnection, oTranscation);
                    if (oSqlCommand != null)
                    {
                        Object _value = oSqlCommand.ExecuteScalar();
                        if (System.Convert.ToInt64(_value) > 0)
                        {
                            _result = true;
                        }
                        else
                        {
                            _result = false;
                        }
                        _value = null;
                    }

                }
                catch (Exception ex)
                {

                    string _ErrorMessage = ex.ToString();

                    ErrorMessagees(_ErrorMessage);
                    _result = false;
                }
                finally
                {
                    if (oSqlCommand != null)
                    {
                        oSqlCommand.Parameters.Clear();
                        oSqlCommand.Dispose();
                        oSqlCommand = null;
                    }

                    if (_strQuery != "")
                    {
                        _strQuery = null;
                    }


                }

                return _result;
            }
            private Int64 GetNATOID(Int64 DocumentID, Int64 ContainerID, Int32 ContainerPageNo, Int32 DocumentPageNo, enum_NTAOType Type, Int64 ClinicID, SqlConnection oConnection, SqlTransaction oTranscation)
            {
                object _internalresult = null;
                Int64 _NATOID = 0;
                string _strSQL = "";
                SqlCommand oCommand = null;
                try
                {


                    _strSQL = "SELECT NTAOID FROM eDocument_NTAO_V3 WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ContainerPageNumber = " + ContainerPageNo + " AND DocumentPageNumber = " + DocumentPageNo + " AND NTAOType = " + Type.GetHashCode() + " AND ClinicID = " + ClinicID + " ";
                    oCommand = new SqlCommand(_strSQL, oConnection, oTranscation);
                    if (oCommand != null)
                    {
                        _internalresult = oCommand.ExecuteScalar();

                        if (_internalresult != null)
                        {
                            if (_internalresult.GetType() != typeof(System.DBNull))
                            {

                                _NATOID = System.Convert.ToInt64(_internalresult);

                            }

                        }
                    }


                    return _NATOID;

                }
                catch (Exception ex)
                {

                    string _ErrorMessage = ex.ToString();

                    ErrorMessagees(_ErrorMessage);
                    if (oCommand != null)
                    {
                        oCommand.Parameters.Clear();
                        oCommand.Dispose();
                        oCommand = null;
                    }


                }
                finally
                {
                    if (oCommand != null)
                    {
                        oCommand.Parameters.Clear();
                        oCommand.Dispose();
                        oCommand = null;
                    }
                    if (_internalresult != null)
                    {
                        _internalresult = null;
                    }
                }
                return _NATOID;
            }
            private Int64 GetNATOID(Int64 DocumentID, Int64 ContainerID, enum_NTAOType Type, Int64 ClinicID, SqlConnection oConnection, SqlTransaction oTranscation)
            {
                object _internalresult = null;
                Int64 _NATOID = 0;
                string _strSQL = "";
                SqlCommand oSqlCommand = null;
                try
                {

                    _strSQL = "SELECT NTAOID FROM eDocument_NTAO_V3 WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND NTAOType = " + enum_NTAOType.Acknowledge.GetHashCode() + " AND ClinicID = " + ClinicID + " ";
                    oSqlCommand = new SqlCommand(_strSQL, oConnection, oTranscation);
                    if (oSqlCommand != null)
                    {
                        _internalresult = oSqlCommand.ExecuteScalar();
                        if (_internalresult != null)
                        {
                            if (_internalresult.GetType() != typeof(System.DBNull))
                            {

                                _NATOID = System.Convert.ToInt64(_internalresult);

                            }
                        }
                    }


                    return _NATOID;

                }
                catch (Exception ex)
                {

                    string _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);

                }
                finally
                {
                    if (oSqlCommand != null)
                    {
                        oSqlCommand.Parameters.Clear();
                        oSqlCommand.Dispose();
                        oSqlCommand = null;
                    }
                    if (_internalresult != null)
                    {
                        _internalresult = null;
                    }

                }
                return _NATOID;
            }
            private bool IsDocumentCompressed(Int64 PatientID, Int64 DocumentID, Int64 ClinicID, SqlConnection oConnection, SqlTransaction otranscation, enum_OpenExternalSource _OpenExternalSource)
            {
                object _internalresult = null;
                bool _result = false;
                string _strSQL = "";
                SqlCommand osqlCommand = null;
                try
                {
                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                    {
                        _strSQL = " SELECT ISNULL(IsCompressed,'false') AS IsCompressed " +
                              " FROM eDocument_Details_V3_RCM WITH(NOLOCK)" +
                              " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " AND ClinicID = " + ClinicID + "";
                    }
                    else
                    {
                        _strSQL = " SELECT ISNULL(IsCompressed,'false') AS IsCompressed " +
                              " FROM eDocument_Details_V3 WITH(NOLOCK)" +
                              " WHERE PatientID = " + PatientID + " AND eDocumentID = " + DocumentID + " AND ClinicID = " + ClinicID + "";
                    }

                    osqlCommand = new SqlCommand(_strSQL, oConnection, otranscation);
                    if (osqlCommand != null)
                    {
                        _internalresult = osqlCommand.ExecuteScalar();
                        if (_internalresult != null)
                        {
                            _result = System.Convert.ToBoolean(_internalresult);
                        }
                    }


                }
                catch (Exception ex)
                {

                    string _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);
                    _result = false;
                }
                finally
                {
                    if (osqlCommand != null)
                    {
                        osqlCommand.Parameters.Clear();
                        osqlCommand.Dispose();
                        osqlCommand = null;
                    }
                    if (_internalresult != null)
                    {
                        _internalresult = null;
                    }

                }
                return _result;
            }
            private Int64 GetPrefixTransactionID(Int64 PatientID, SqlConnection oConnection, SqlTransaction oTranscation)
            {
                Int64 _Result = 0;
                string _result = "";
                DateTime _PatientDOB = DateTime.Now;
                DateTime _CurrentDate = DateTime.Now;
                DateTime _BaseDate = System.Convert.ToDateTime("1/1/1900");

                string strID1 = "";
                string strID2 = "";
                string strID3 = "";
                SqlCommand oSqlCommand = null;
                TimeSpan oTS;

                object _internalresult = null;
                string _strSQL = "";
                try
                {
                    oConnection = new SqlConnection(gloEDocV3Admin.gDatabaseConnectionString);
                    oConnection.Open();
                    oTranscation = oConnection.BeginTransaction("mainTranaction");
                    _strSQL = "SELECT dtDOB FROM Patient WITH(NOLOCK) WHERE nPatientID = " + PatientID + "";
                    oSqlCommand = new SqlCommand(_strSQL, oConnection, oTranscation);
                    if (oSqlCommand != null)
                    {
                        _internalresult = oSqlCommand.ExecuteScalar();
                        if (_internalresult != null)
                        {
                            if (_internalresult.ToString() != null)
                            {
                                if (_internalresult.GetType() != typeof(System.DBNull))
                                {
                                    if (_internalresult.ToString() != "")
                                    {
                                        _PatientDOB = System.Convert.ToDateTime(_internalresult);
                                    }
                                }
                            }
                        }


                        _result = "";

                        oTS = new TimeSpan();
                        oTS = _CurrentDate.Subtract(_BaseDate);
                        strID1 = oTS.Days.ToString().Replace("-", "");

                        oTS = new TimeSpan();
                        oTS = _CurrentDate.Subtract(_CurrentDate.Date);
                        strID2 = System.Convert.ToInt32(oTS.TotalSeconds).ToString().Replace("-", "");

                        oTS = new TimeSpan();
                        oTS = _PatientDOB.Subtract(_BaseDate);
                        strID3 = oTS.Days.ToString().Replace("-", "");

                        _result = strID1 + strID2 + strID3;

                        _Result = System.Convert.ToInt64(_result);
                    }
                    oTranscation.Commit();
                }
                catch (Exception ex)
                {
                    oTranscation.Rollback();
                    string _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);
                    return 0;
                }
                finally
                {
                    if (oSqlCommand != null)
                    {
                        oSqlCommand.Parameters.Clear();
                        oSqlCommand.Dispose();
                        oSqlCommand = null;
                    }
                    if (_internalresult != null)
                    {
                        _internalresult = null;
                    }
                    if (oConnection.State == ConnectionState.Open)
                    { oConnection.Close(); }
                    if (oConnection != null)
                    { oConnection.Dispose(); }


                }
                return _Result;
            }
            private string GetNewDocumentName(Int64 PatientID, string Category, Int64 ClinicID, SqlConnection oConnection, SqlTransaction oTranscation)
            {
                string _result = "";
                object _internalresult = null;
                string _strSQL = "";
                SqlCommand oCommand = null;
                try
                {

                    string _DocumentStartName = DateTime.Now.ToString("MM dd yyyy hh mm ss tt");
                    string _DocumentName = _DocumentStartName;
                    int i = 0;
                    Int64 _DocID = 0;
                    bool _DocNameFound = true;
                    while (_DocNameFound == true)
                    {
                        _strSQL = "SELECT eDocumentID FROM eDocument_Details_V3 WITH(NOLOCK) WHERE DocumentName = '" + _DocumentName + "' AND PatientID = " + PatientID + " and Category = '" + Category + "' and clinicid = " + ClinicID + "";
                        oCommand = new SqlCommand(_strSQL, oConnection, oTranscation);
                        if (oCommand != null)
                        {
                            _internalresult = oCommand.ExecuteScalar();
                            if (_internalresult != null)
                            {
                                if (_internalresult.ToString() != null)
                                {
                                    if (_internalresult.GetType() != typeof(System.DBNull))
                                    {
                                        if (_internalresult.ToString() != "")
                                        {
                                            _DocID = System.Convert.ToInt32(_internalresult.ToString());
                                            if (_DocID > 0) { _DocNameFound = true; }
                                        }
                                        else
                                        {
                                            _DocNameFound = false;
                                            _ErrorMessage = "Document name not found. ";
                                            ErrorMessagees(_ErrorMessage);
                                        }
                                    }
                                    else
                                    {
                                        _DocNameFound = false;
                                        _ErrorMessage = "Document name not found. ";
                                        ErrorMessagees(_ErrorMessage);
                                    }
                                }
                                else
                                {
                                    _DocNameFound = false;
                                    _ErrorMessage = "Document name not found. ";
                                    ErrorMessagees(_ErrorMessage);
                                }
                            }
                            else
                            {
                                _DocNameFound = false;
                                _ErrorMessage = "Document name not found. ";
                                ErrorMessagees(_ErrorMessage);
                            }
                            i++;
                            if (_internalresult != null)
                            {
                                _internalresult = null;
                            }
                            _DocID = 0;
                            _DocumentName = _DocumentStartName + "-" + i.ToString();
                            oCommand.Parameters.Clear();
                            oCommand.Dispose();
                            oCommand = null;
                        }

                    }


                    _result = _DocumentName;
                }
                catch (Exception ex)
                {

                    string _ErrorMessage = ex.ToString();


                    //Make Log entry in DMSExceptionLog file for any exceptions found
                    if (_ErrorMessage.Trim() != "")
                    {
                        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage.ToString();
                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                        _MessageString = "";
                    }


                    _result = "";
                }
                finally
                {
                    if (oCommand != null)
                    {
                        oCommand.Parameters.Clear();
                        oCommand.Dispose();
                        oCommand = null;
                    }
                    if (_internalresult != null)
                    {
                        _internalresult = null;
                    }

                }
                return _result;
            }

            public Int64 GetContainerID(Int64 DocumentID, Int32 PageFrom, Int32 PageTo, Int64 ClincID)
            {
                Int64 ContainerID = 0;
                //Changed by rahul patel on 27-10-2010
                //For Hybrid Database change i.e changing the connection string for DMS Database
                //Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);

                if (oDB != null)
                {
                    if (oDB.Connect(false))
                    {
                        string _strQry = "SELECT eContainerID FROM eDocument_Container_V3 WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND DocumentPageFrom = " + PageFrom + " AND DocumentPageTo = " + PageTo + " AND ClinicID = " + ClincID + "";
                        ContainerID = System.Convert.ToInt64(oDB.ExecuteScalar_Query(_strQry));


                    }
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return ContainerID;
            }

            public Int32 GetDestinationPageFrom(Int64 DocumentID, Int64 ContainerID, Int64 ClincID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Int32 PageFrom = 0;
                //Changed by rahul patel on 27-10-2010
                //For Hybrid Database change i.e changing the connection string for DMS Database
                //Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);

                if (oDB != null)
                {
                    if (oDB.Connect(false))
                    {
                        string _strQry;

                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                        {
                            _strQry = "SELECT DocumentPageFrom FROM  eDocument_Container_V3_RCM WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + ClincID + "";
                        }
                        else
                        {
                            _strQry = "SELECT DocumentPageFrom FROM  eDocument_Container_V3 WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + ClincID + "";
                        }

                        PageFrom = System.Convert.ToInt32(oDB.ExecuteScalar_Query(_strQry));

                    }
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return PageFrom;
            }

            public Int32 GetDestinationPageTo(Int64 DocumentID, Int64 ContainerID, Int64 ClincID, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {
                Int32 PageTo = 0;
                //Changed by rahul patel on 27-10-2010
                //For Hybrid Database change i.e changing the connection string for DMS Database
                //Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDatabaseConnectionString);
                Database.DBLayer oDB = new gloEDocumentV3.Database.DBLayer(gloEDocV3Admin.gDMSDatabaseConnectionString);
                if (oDB != null)
                {
                    if (oDB.Connect(false))
                    {
                        string _strQry;

                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                        {
                            _strQry = "SELECT DocumentPageTo FROM eDocument_Container_V3_RCM WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + ClincID + "";
                        }
                        else
                        {
                            _strQry = "SELECT DocumentPageTo FROM eDocument_Container_V3 WITH(NOLOCK) WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND ClinicID = " + ClincID + "";
                        }

                        PageTo = System.Convert.ToInt32(oDB.ExecuteScalar_Query(_strQry));

                    }
                    if (oDB != null)
                    {
                        oDB.Disconnect();
                        oDB.Dispose();
                        oDB = null;
                    }
                }
                return PageTo;
            }

            public bool ConvertBinaryToFile(object StreamData, string FilePath)
            {
                bool _result = false;
                string _FilePath = FilePath;
                try
                {
                    FileStream oFile;
                    if (StreamData != null)
                    {
                        Byte[] byteRead = (byte[])StreamData;
                        if (byteRead != null)
                        //SLR: Stream is not needed 12/22
                        //MemoryStream oDataStream = new MemoryStream(byteRead);
                        //if (oDataStream != null)
                        {
                            if (System.IO.File.Exists(_FilePath))
                            {
                                oFile = new FileStream(_FilePath, FileMode.Append);
                            }
                            else
                            {
                                oFile = new FileStream(_FilePath, FileMode.Create);
                            }
                            oFile.Write(byteRead, 0, byteRead.Length);
                            //oDataStream.WriteTo(oFile);
                            if (oFile != null)
                            {
                                oFile.Close();
                                oFile.Dispose();
                                oFile = null;
                            }
                            //if (oDataStream != null)
                            //{
                            //    oDataStream.Close();
                            //    oDataStream.Dispose();
                            //    oDataStream = null;
                            //}
                        }
                        _result = true;
                    }
                }
                catch (Exception ex)
                {
                    _HasError = true;
                    _ErrorMessage = ex.Message;
                }
                FilePath = _FilePath;

                if (_ErrorMessage.Trim() != "")
                {
                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "ERROR : " + _ErrorMessage.ToString();
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                    _MessageString = "";
                }

                return _result;
            }

            public DataTable GetNATODetails(Int64 DocumentID, Int64 ContainerID, Int32 ContainerPageNumber, Int32 DocumentPageNumber, enum_NTAOType Type, Int64 ClinicID, SqlConnection oConnection, SqlTransaction oTransaction, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {

                SqlCommand _sqlcommand = null;
                SqlDataAdapter _sqlAdpter = null;
                DataTable dt = null;
                try
                {


                    string _strQry = "";

                    if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                    {
                        _strQry = " SELECT ISNULL(NTAOID,0) AS NTAOID,ISNULL(UserID,0) AS UserID,"
                                + " ISNULL(UserName,'') AS UserName,ISNULL(NTAODateTime,NULL) AS NTAODateTime,"
                                + "ISNULL(NTAODescription,'') AS NTAODescription,ISNULL(IsPage,'false') AS IsPage FROM eDocument_NTAO_V3_RCM WITH(NOLOCK)"
                                + "WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND "
                                + "ContainerPageNumber = " + ContainerPageNumber + " AND DocumentPageNumber = " + DocumentPageNumber + "AND "
                                + "NTAOType = " + Type.GetHashCode() + " AND ClinicID = " + ClinicID + "";
                    }
                    else
                    {
                        _strQry = " SELECT ISNULL(NTAOID,0) AS NTAOID,ISNULL(UserID,0) AS UserID,"
                                + " ISNULL(UserName,'') AS UserName,ISNULL(NTAODateTime,NULL) AS NTAODateTime,"
                                + "ISNULL(NTAODescription,'') AS NTAODescription,ISNULL(IsPage,'false') AS IsPage FROM eDocument_NTAO_V3 WITH(NOLOCK)"
                                + "WHERE eDocumentID = " + DocumentID + " AND eContainerID = " + ContainerID + " AND "
                                + "ContainerPageNumber = " + ContainerPageNumber + " AND DocumentPageNumber = " + DocumentPageNumber + "AND "
                                + "NTAOType = " + Type.GetHashCode() + " AND ClinicID = " + ClinicID + "";
                    }

                    _sqlcommand = new SqlCommand(_strQry, oConnection, oTransaction);
                    if (_sqlcommand != null)
                    {
                        _sqlAdpter = new SqlDataAdapter(_sqlcommand);
                        if (_sqlAdpter != null)
                        {
                            dt = new DataTable();
                            if (dt != null)
                            {

                                _sqlAdpter.Fill(dt);
                                if (_sqlAdpter != null)
                                {
                                    _sqlAdpter.Dispose();
                                    _sqlAdpter = null;
                                }
                                if (_sqlcommand != null)
                                {
                                    _sqlcommand.Parameters.Clear();
                                    _sqlcommand.Dispose();
                                    _sqlcommand = null;

                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    _ErrorMessage = ex.ToString();
                    ErrorMessagees(_ErrorMessage);

                }
                finally
                {
                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }
                    if (_sqlAdpter != null)
                    {
                        _sqlAdpter.Dispose();
                        _sqlAdpter = null;
                    }
                }
                return dt;
            }

            public string GetPageName(string PageName, Int64 DocumentID, Int64 ContainerID, Int64 ClinicID, SqlConnection oConnection, SqlTransaction oTranscation, enum_OpenExternalSource _OpenExternalSource = enum_OpenExternalSource.None)
            {


                string _strQuery = "";
                SqlCommand _sqlCommand = null;

                object _internalresult = null;
                string _PageName = "";
                Int64 _DocID = 0;
                int i = 0;
                try
                {
                    bool _PageNameFound = true;
                    _PageName = PageName;
                    while (_PageNameFound == true)
                    {
                        if (_OpenExternalSource == enum_OpenExternalSource.RCM)
                        {
                            _strQuery = "SELECT COUNT(*) FROM eDocument_Pages_V3_RCM WITH(NOLOCK) WHERE UPPER(PageName) ='" + _PageName.ToUpper() + "' AND ClinicID=" + ClinicID + " AND eDocumentID =" + DocumentID + " AND eContainerID = " + ContainerID + "";
                        }
                        else
                        {
                            _strQuery = "SELECT COUNT(*) FROM eDocument_Pages_V3 WITH(NOLOCK) WHERE UPPER(PageName) ='" + _PageName.ToUpper() + "' AND ClinicID=" + ClinicID + " AND eDocumentID =" + DocumentID + " AND eContainerID = " + ContainerID + "";
                        }

                        _sqlCommand = new SqlCommand(_strQuery, oConnection, oTranscation);
                        if (_sqlCommand != null)
                        {
                            _internalresult = _sqlCommand.ExecuteScalar();
                            if (_internalresult != null)
                            {
                                if (_internalresult.ToString() != null)
                                {
                                    if (_internalresult.GetType() != typeof(System.DBNull))
                                    {
                                        if (_internalresult.ToString() != "")
                                        {
                                            _DocID = System.Convert.ToInt64(_internalresult.ToString());
                                            //if (_DocID > 0) { _PageNameFound = true; }
                                            if (_DocID <= 0) { _PageNameFound = false; }
                                        }
                                        else
                                        {
                                            _PageNameFound = false;
                                            _ErrorMessage = "Page name does not found. ";
                                            ErrorMessagees(_ErrorMessage);
                                        }
                                    }
                                    else
                                    {
                                        _PageNameFound = false;
                                        _ErrorMessage = "Page name does not found. ";
                                        ErrorMessagees(_ErrorMessage);
                                    }
                                }
                                else
                                {
                                    _PageNameFound = false;
                                    _ErrorMessage = "Page name does not found. ";
                                    ErrorMessagees(_ErrorMessage);
                                }
                            }
                            else
                            {
                                _PageNameFound = false;
                                _ErrorMessage = "Page name does not found. ";
                                ErrorMessagees(_ErrorMessage);
                            }
                            if (_PageNameFound == true)
                            {
                                i++;
                            }
                            _internalresult = null;
                            _DocID = 0;
                            if (i > 0)
                            {
                                _PageName = PageName + "-" + i.ToString();
                            }
                            else
                            {
                                _PageName = PageName;
                            }
                            _sqlCommand.Parameters.Clear();
                            _sqlCommand.Dispose();
                            _sqlCommand = null;
                        }

                    }
                }
                catch (Exception ex)
                {

                    string _ErrorMessage = ex.ToString();

                    ErrorMessagees(_ErrorMessage);

                }
                finally
                {
                    if (_strQuery != "")
                        _strQuery = null;
                    if (_sqlCommand != null)
                    {
                        _sqlCommand.Parameters.Clear();
                        _sqlCommand.Dispose();
                        _sqlCommand = null;
                    }

                }
                return _PageName;

            }
            #endregion


            #region "To Generate Report Under the Recieved Fax"
            #region "Dhruv 2010 -> GenerateImportReport"
            //public static void GenerateImportReport_Old(string DocumentName, string DocumentPath, string Result, string Comments)
            //{
            //    try
            //    {

            //        string _FilePath = System.Windows.Forms.Application.StartupPath + "\\DocumentExportLog.csv";
            //        string oData = "";
            //        StreamWriter oStreamWriter = default(StreamWriter);
            //        string mStatus = "";
            //        if (File.Exists(_FilePath) == false)
            //        {
            //            File.Create(_FilePath).Close();
            //        }

            //        if (File.Exists(_FilePath) == true)
            //        {

            //            StreamReader oStreamReader = new StreamReader(_FilePath);
            //            oData = oStreamReader.ReadToEnd().Trim();
            //            oStreamReader.Close();


            //            //switch (oDocumentImportReport.Status)
            //            //{
            //            //    case DMSStatus.eSuccess:
            //            //        mStatus = "Success";
            //            //        break;
            //            //    case DMSStatus.eUnSuccessful:
            //            //        mStatus = "UnSuccessful";
            //            //        break;
            //            //    case DMSStatus.eError:
            //            //        mStatus = "Error";
            //            //        break;
            //            //}


            //            if (!string.IsNullOrEmpty(oData.Trim()))
            //            {
            //                oData = oData + Environment.NewLine + DateTime.Now.ToString() + "," + DocumentName + "," + DocumentPath + "," + Result + "," + Comments + "";
            //            }
            //            else
            //            {
            //                //oData = "Date" & "," & "MessageControlID" & "," & "FileName" & "," & "EventName" & "," & "PatientName" & "," & "Status" & "," & "TransactionType" & "," & "Data" & vbNewLine 
            //                oData = DateTime.Now.ToString() + "," + DocumentName + "," + DocumentPath + "," + Result + "," + Comments + "";
            //            }


            //            oStreamWriter = new StreamWriter(_FilePath);
            //            oStreamWriter.Write(oData);
            //            oStreamWriter.Close();
            //        }

            //    }
            //    catch (Exception ex)
            //    {
            //        throw ex;
            //    }
            //}
            public static void GenerateImportReport(string DocumentName, string DocumentPath, string Result, string Comments)
            {
                try
                {

                    string _FilePath = System.Windows.Forms.Application.StartupPath + "\\DocumentExportLog.csv";
                    string oData = "";
                    StreamWriter oStreamWriter = default(StreamWriter);
                    // string mStatus = "";
                    if (File.Exists(_FilePath) == false)
                    {
                        using (FileStream myFile = File.Create(_FilePath) ) //SLR: to be freed..
                        {
                            try
                            {
                                myFile.Close();
                            }
                            catch
                            {
                            }
                        }
                        
                    }

                    if (File.Exists(_FilePath) == true)
                    {

                        using (StreamReader oStreamReader = new StreamReader(_FilePath))
                        {
                            oData = oStreamReader.ReadToEnd().Trim();
                            oStreamReader.Close();
                        }


                        //switch (oDocumentImportReport.Status)
                        //{
                        //    case DMSStatus.eSuccess:
                        //        mStatus = "Success";
                        //        break;
                        //    case DMSStatus.eUnSuccessful:
                        //        mStatus = "UnSuccessful";
                        //        break;
                        //    case DMSStatus.eError:
                        //        mStatus = "Error";
                        //        break;
                        //}


                        if (!string.IsNullOrEmpty(oData.Trim()))
                        {
                            oData = oData + Environment.NewLine + DateTime.Now.ToString() + "," + DocumentName + "," + DocumentPath + "," + Result + "," + Comments + "";
                        }
                        else
                        {
                            //oData = "Date" & "," & "MessageControlID" & "," & "FileName" & "," & "EventName" & "," & "PatientName" & "," & "Status" & "," & "TransactionType" & "," & "Data" & vbNewLine 
                            oData = DateTime.Now.ToString() + "," + DocumentName + "," + DocumentPath + "," + Result + "," + Comments + "";
                        }


                        using (oStreamWriter = new StreamWriter(_FilePath))
                        {
                            oStreamWriter.Write(oData);
                            oStreamWriter.Close();
                        }
                    }

                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
            #endregion "Dhruv 2010 -> GenerateImportReport"


            #endregion

            #region "To imports images"
            #region "Dhruv 2010 -> ImportImages"
            //public bool ImportImages_Old(System.Collections.ArrayList oImageDocuments, string DestDocumentName, string SDocumentName)
            //{
            //    #region " Variable Declaration "

            //    pdftron.PDF.PDFDoc doc = new pdftron.PDF.PDFDoc();
            //    pdftron.PDF.Image img = null;
            //    pdftron.PDF.ElementBuilder oElementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
            //    pdftron.PDF.ElementWriter oElementWriter = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
            //    string _returnResult = "";
            //    pdftron.PDF.Element element = null;
            //    System.Drawing.Bitmap bmp = null;
            //    pdftron.PDF.Rect oRect = null;
            //    pdftron.PDF.Page page = null;
            //    string _tempProcessPath = "";
            //    string _OutputFilePath = "";
            //    bool _result = false;
            //    int _returnPageCount = 0;
            //    bool oDialogResultIsOK = false;
            //    Int64 _DocumentID = 0;
            //    Int64 _ContainerID = 0;

            //    #endregion

            //    try
            //    {
            //        _tempProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\ImportImages";
            //        if (Directory.Exists(_tempProcessPath) == false)
            //        { Directory.CreateDirectory(_tempProcessPath); }
            //        //_OutputFilePath = _tempProcessPath + "\\" + DestDocumentName + ".pdf";
            //        _OutputFilePath = DestDocumentName + "\\" + SDocumentName + ".pdf";
            //        for (int i = 0; i < oImageDocuments.Count; i++)
            //        {
            //            bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());
            //            int imgCount = bmp.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);

            //            oRect = new pdftron.PDF.Rect();

            //            float _hr = bmp.HorizontalResolution;
            //            float _vr = bmp.VerticalResolution;
            //            float _wd = bmp.Width;
            //            float _ht = bmp.Height;


            //            int XWidth = 0;
            //            int YHeight = 0;
            //            bool XYRet = false;

            //            XYRet = GetXWidthYHeight(_hr, _vr, _ht, _wd, out XWidth, out YHeight);

            //            oRect = new pdftron.PDF.Rect();
            //            oRect.x1 = XWidth;// img.GetBitmap().Width;
            //            oRect.x2 = 0;
            //            oRect.y1 = YHeight;// img.GetBitmap().Height;
            //            oRect.y2 = 0;


            //            for (int j = 0; j < imgCount; j++)
            //            {
            //                if (j >= 1)
            //                {
            //                    // Select the current TIFF page using SelectActiveFrame
            //                    bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, j);
            //                }

            //                //Set Page Size as of Rect
            //                page = doc.PageCreate(oRect);
            //                oElementWriter.Begin(page);
            //                img = pdftron.PDF.Image.Create(doc, bmp);
            //                element = oElementBuilder.CreateImage(img, new Matrix2D(XWidth, 0, 0, YHeight, 0, 0));// );//new Matrix2D(612, 0, 0, 794, 0, 0) //
            //                oElementWriter.WritePlacedElement(element);
            //                oElementWriter.End();
            //                doc.PagePushBack(page);
            //            }

            //            if (oRect != null)
            //                oRect = null;

            //            if (page != null)
            //                page = null;

            //            if (bmp != null)
            //                bmp.Dispose();

            //        }



            //        doc.Save(_OutputFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
            //        doc.Close();


            //    }
            //    catch (Exception ex)
            //    {
            //        string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + ex.ToString();
            //        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
            //        _MessageString = "";
            //        System.Windows.Forms.MessageBox.Show(ex.ToString());
            //        _returnResult = "";
            //    }
            //    finally
            //    {
            //        if (doc != null) { doc.Dispose(); }
            //        if (oElementBuilder != null) { oElementBuilder.Dispose(); }
            //        if (oElementBuilder != null) { oElementWriter.Dispose(); }
            //        if (oRect != null) { oRect = null; }
            //        if (page != null) { page = null; }
            //        if (Directory.Exists(_tempProcessPath) == true) { Directory.Delete(_tempProcessPath, true); }
            //    }
            //    //DestContainerID = _ContainerID;
            //    // DestDocumentID = _DocumentID;
            //    return _result;
            //}
            public bool ImportImages(System.Collections.ArrayList oImageDocuments, string DestDocumentName, string SDocumentName, bool _isDirectMessage = false)
            {
                #region " Variable Declaration "

                pdftron.PDF.PDFDoc doc = new pdftron.PDF.PDFDoc();
                pdftron.PDF.Image img = null;
                pdftron.PDF.ElementBuilder oElementBuilder = new pdftron.PDF.ElementBuilder();	// Used to build new Element objects
                pdftron.PDF.ElementWriter oElementWriter = new pdftron.PDF.ElementWriter();	// Used to write Elements to the page	
                //    string _returnResult = "";
                pdftron.PDF.Element element = null;
                System.Drawing.Bitmap bmp = null;
                pdftron.PDF.Rect oRect = null;
                pdftron.PDF.Page page = null;
                string _tempProcessPath = "";
                string _OutputFilePath = "";
                bool _result = false;
                //   int _returnPageCount = 0;
                //   bool oDialogResultIsOK = false;
                //    Int64 _DocumentID = 0;
                //   Int64 _ContainerID = 0;

                #endregion

                try
                {
                    _tempProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\ImportImages";
                    if (Directory.Exists(_tempProcessPath) == false)
                    {
                        Directory.CreateDirectory(_tempProcessPath);
                    }
                    //_OutputFilePath = _tempProcessPath + "\\" + DestDocumentName + ".pdf";
                    if (_isDirectMessage == true)
                    {
                        _OutputFilePath = DestDocumentName;
                    }
                    else
                    {
                        _OutputFilePath = DestDocumentName + "\\" + SDocumentName + ".pdf";
                    }

                    for (int i = 0; i < oImageDocuments.Count; i++)
                    {
                        try
                        {
                            bmp = new System.Drawing.Bitmap(oImageDocuments[i].ToString());

                        }
                        catch (Exception ex)
                        {
                            _ErrorMessage = "Error is due to the bmp object is null";
                            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                            _MessageString = "";
                            //   _returnResult = "";

                            System.Windows.Forms.MessageBox.Show("Exception in the BMP", ex.ToString());
                            break;
                        }
                        if (bmp == null)
                        {
                            _ErrorMessage = "Error is due to the bmp object is null";
                            string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                            _MessageString = "";
                            //  _returnResult = "";
                            break;
                        }

                        int imgCount = 0;
                        try
                        {
                            imgCount = bmp.GetFrameCount(System.Drawing.Imaging.FrameDimension.Page);
                        }
                        catch
                        {
                        }


                        oRect = new pdftron.PDF.Rect();

                        float _hr = bmp.HorizontalResolution;
                        float _vr = bmp.VerticalResolution;
                        float _wd = bmp.Width;
                        float _ht = bmp.Height;


                        if (imgCount <= 1)
                        {
                            imgCount = 1;
                            //bmp.Dispose();
                            //bmp = null;
                        }

                        int XWidth = 0;
                        int YHeight = 0;
                        bool XYRet = false;

                        XYRet = GetXWidthYHeight(_hr, _vr, _ht, _wd, out XWidth, out YHeight);

                        oRect = new pdftron.PDF.Rect();
                        oRect.x1 = XWidth;// img.GetBitmap().Width;
                        oRect.x2 = 0;
                        oRect.y1 = YHeight;// img.GetBitmap().Height;
                        oRect.y2 = 0;


                        for (int j = 0; j < imgCount; j++)
                        {
                            if ((j >= 1) && (bmp != null))
                            {

                                // Select the current TIFF page using SelectActiveFrame
                                try
                                {
                                    bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, j);
                                }
                                catch //(Exception ex)
                                {
                                }
                            }

                            //Set Page Size as of Rect
                            page = doc.PageCreate(oRect);
                            oElementWriter.Begin(page);

                            if ((imgCount <= 1) || (bmp == null))
                            {
                                try
                                {
                                    img = pdftron.PDF.Image.Create(doc, oImageDocuments[i].ToString());

                                }
                                catch (Exception ex)
                                {
                                    _ErrorMessage = "Error is due to the img object is null";
                                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                    _MessageString = "";
                                    //  _returnResult = "";

                                    System.Windows.Forms.MessageBox.Show("Error in Img", ex.ToString());
                                    oElementWriter.End();
                                    doc.PagePushBack(page);
                                    break;
                                }
                            }
                            else
                            {
                                try
                                {
                                    img = pdftron.PDF.Image.Create(doc, bmp);
                                }
                                catch (Exception ex)
                                {
                                    _ErrorMessage = "Error is due to the img object is null";
                                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                    _MessageString = "";
                                    //  _returnResult = "";

                                    System.Windows.Forms.MessageBox.Show("Error in Img", ex.ToString());
                                    oElementWriter.End();
                                    doc.PagePushBack(page);
                                    break;
                                }
                            }
                            if (img == null)
                            {
                                _ErrorMessage = "Error is due to the img object is null";
                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _MessageString = "";
                                // _returnResult = "";
                                oElementWriter.End();
                                doc.PagePushBack(page);
                                break;
                            }

                            element = oElementBuilder.CreateImage(img, new Matrix2D(XWidth, 0, 0, YHeight, 0, 0));// );//new Matrix2D(612, 0, 0, 794, 0, 0) //
                            if (element == null)
                            {
                                _ErrorMessage = "Error is due to the element object is null";
                                string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _MessageString = "";
                                //  _returnResult = "";
                                oElementWriter.End();
                                doc.PagePushBack(page);
                                break;
                            }
                            //img = pdftron.PDF.Image.Create(doc, bmp);
                            oElementWriter.WritePlacedElement(element);
                            oElementWriter.End();
                            doc.PagePushBack(page);
                            img.Dispose();
                            img = null;
                        }

                        if (oRect != null)
                            oRect = null;

                        if (page != null)
                            page = null;

                        if (bmp != null)
                        {
                            bmp.Dispose();
                            bmp = null;
                        }



                    }



                    doc.Save(_OutputFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                    doc.Close();


                }
                catch (Exception ex)
                {
                    string _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + ex.ToString();
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                    _MessageString = "";
                    System.Windows.Forms.MessageBox.Show(ex.ToString());
                    //  _returnResult = "";
                }
                finally
                {
                    if (doc != null)
                    {
                        doc.Dispose();
                        doc = null;
                    }
                    if (oElementBuilder != null)
                    {
                        oElementBuilder.Dispose();
                        oElementBuilder = null;
                    }
                    if (oElementBuilder != null)
                    {
                        oElementWriter.Dispose();
                        oElementWriter = null;
                    }
                    if (oRect != null)
                    {

                        oRect = null;
                    }
                    if (page != null)
                    {

                        page = null;
                    }
                    if (Directory.Exists(_tempProcessPath) == true) { Directory.Delete(_tempProcessPath, true); }
                }
                //DestContainerID = _ContainerID;
                // DestDocumentID = _DocumentID;
                return _result;
            }
            #endregion "Dhruv 2010 -> ImportImages"
            #endregion

            #region "Get the received fax user"

            //Added by Shweta 20100105
            //Changes against bug id:5378 to get the receive fax user name and id 

            #region "Dhruv 2010 -> GetRecieveFaxUserID"
            //public Int64 GetRecieveFaxUserID_Old()
            //{

            //    SqlConnection objCon = new SqlConnection();
            //    objCon.ConnectionString = gloEDocV3Admin.gDatabaseConnectionString;
            //    SqlCommand objCmd = new SqlCommand();

            //    string sRecieveFaxUserID = "";
            //    Int64 nRecieveFaxUserID=0;

            //    try
            //    {
            //        objCon.Open();
            //        objCmd.Connection = objCon;
            //        objCmd.CommandType = CommandType.Text;
            //        objCmd.CommandText = "select isnull(sSettingsValue,'') from Settings WITH(NOLOCK) where sSettingsName = 'Recieve Fax User'";

            //        sRecieveFaxUserID =Convert.ToString(objCmd.ExecuteScalar());

            //        if (sRecieveFaxUserID != "")
            //        {
            //            nRecieveFaxUserID = Convert.ToInt64(sRecieveFaxUserID);
            //        }
            //        else 
            //        {
            //            nRecieveFaxUserID = 0;

            //        }
            //        return nRecieveFaxUserID;
            //    }
            //    catch (SqlException ex)
            //    {
            //        return 0;
            //        throw ex;
            //    }
            //    catch (Exception ex)
            //    {
            //        return 0;
            //        throw ex;
            //    }
            //    finally
            //    {
            //        objCon.Close();
            //        objCmd = null;
            //    }
            //}
            public Int64 GetRecieveFaxUserID()
            {

                SqlConnection objCon = new SqlConnection();
                objCon.ConnectionString = gloEDocV3Admin.gDatabaseConnectionString;
                SqlCommand objCmd = new SqlCommand();

                string sRecieveFaxUserID = "";
                Int64 nRecieveFaxUserID = 0;

                try
                {
                    if (objCon != null)
                    {
                        objCon.Open();
                        objCmd.Connection = objCon;
                        objCmd.CommandType = CommandType.Text;
                        objCmd.CommandText = "select isnull(sSettingsValue,'') from Settings WITH(NOLOCK) where sSettingsName = 'Recieve Fax User'";

                        sRecieveFaxUserID = System.Convert.ToString(objCmd.ExecuteScalar());

                        if (sRecieveFaxUserID != "")
                        {
                            nRecieveFaxUserID = System.Convert.ToInt64(sRecieveFaxUserID);
                        }
                        else
                        {
                            nRecieveFaxUserID = 0;

                        }
                    }
                    return nRecieveFaxUserID;


                }
                catch (SqlException ex)
                {
                    return 0;
                    throw ex;
                }
                catch (Exception ex)
                {
                    return 0;
                    throw ex;
                }
                finally
                {
                    if (objCmd != null)
                    {
                        objCmd.Parameters.Clear();
                        objCmd.Dispose();
                        objCmd = null;
                    }
                    if (objCon != null)
                    {
                        objCon.Close();
                        objCon.Dispose();
                        objCmd = null;
                    }
                }
            }
            #endregion "Dhruv 2010 -> GetRecieveFaxUserID"


            #region "Dhruv 2010 -> GetRecieveFaxUserName"
            //public string GetRecieveFaxUserName_Old()
            //{
            //    string sRecieveFaxUserName = "";
            //    Int64 nReceiveFaxUserID;
            //    nReceiveFaxUserID=GetRecieveFaxUserID();

            //    if (nReceiveFaxUserID != 0)
            //    {               
            //        SqlConnection objCon = new SqlConnection();
            //        objCon.ConnectionString = gloEDocV3Admin.gDatabaseConnectionString;
            //        SqlCommand objCmd = new SqlCommand();
            //        try
            //        {
            //            objCon.Open();

            //            objCmd.Connection = objCon;
            //            objCmd.CommandType = CommandType.Text;
            //            objCmd.CommandText = "SELECT ISNULL(sLoginName,'') FROM User_MST WITH(NOLOCK) WHERE nUserID= " + nReceiveFaxUserID;

            //            sRecieveFaxUserName = objCmd.ExecuteScalar().ToString();

            //            return sRecieveFaxUserName;
            //        }
            //        catch (SqlException ex)
            //        {
            //            return sRecieveFaxUserName;
            //            throw ex;
            //        }
            //        catch (Exception ex)
            //        {
            //            return sRecieveFaxUserName;
            //            throw ex;
            //        }
            //        finally
            //        {
            //            objCon.Close();
            //            objCmd = null;
            //        }
            //    }
            //    else
            //    {
            //        return sRecieveFaxUserName;
            //    }
            //}

            public string GetRecieveFaxUserName(Int64 userid = 0)
            {
                string sRecieveFaxUserName = "";
                Int64 nReceiveFaxUserID;
                // Bug #39873: 00000317 : Tasks 
                // parameter and following condition added to avoid unneccessary call of GetRecieveFaxUserID()
                if (userid == 0)
                {
                    nReceiveFaxUserID = GetRecieveFaxUserID();
                }
                else
                {
                    nReceiveFaxUserID = userid;
                }

                if (nReceiveFaxUserID != 0)
                {
                    SqlConnection objCon = new SqlConnection();
                    objCon.ConnectionString = gloEDocV3Admin.gDatabaseConnectionString;
                    SqlCommand objCmd = new SqlCommand();
                    try
                    {
                        if (objCon != null)
                        {
                            objCon.Open();
                            objCmd.Connection = objCon;
                            objCmd.CommandType = CommandType.Text;
                            objCmd.CommandText = "SELECT ISNULL(sLoginName,'') FROM User_MST WITH(NOLOCK) WHERE nUserID= " + nReceiveFaxUserID;

                            sRecieveFaxUserName = objCmd.ExecuteScalar().ToString();
                        }
                        return sRecieveFaxUserName;
                    }
                    catch (SqlException ex)
                    {
                        return sRecieveFaxUserName;
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        return sRecieveFaxUserName;
                        throw ex;
                    }
                    finally
                    {
                        if (objCmd != null)
                        {
                            objCmd.Parameters.Clear();
                            objCmd.Dispose();
                            objCmd = null;
                        }
                        if (objCon != null)
                        {
                            objCon.Close();
                            objCon.Dispose();
                            objCmd = null;
                        }
                    }
                }
                else
                {
                    return sRecieveFaxUserName;
                }
            }
            #endregion "Dhruv 2010 -> GetRecieveFaxUserName"
            //End Shweta 20100105
            #endregion
            public Int64 GetDirectMsgAttachmentUserID()
            {

                SqlConnection objCon = new SqlConnection();
                objCon.ConnectionString = gloEDocV3Admin.gDatabaseConnectionString;
                SqlCommand objCmd = new SqlCommand();

                string sDirectUserID = "";
                Int64 nDirectUserID = 0;

                try
                {
                    if (objCon != null)
                    {
                        objCon.Open();
                        objCmd.Connection = objCon;
                        objCmd.CommandType = CommandType.Text;
                        objCmd.CommandText = "select isnull(sSettingsValue,'') from Settings WITH(NOLOCK) where sSettingsName = 'DIRECT MESSAGE ATTACHMENT USER'";

                        sDirectUserID = System.Convert.ToString(objCmd.ExecuteScalar());

                        if (sDirectUserID != "")
                        {
                            nDirectUserID = System.Convert.ToInt64(sDirectUserID);
                        }
                        else
                        {
                            nDirectUserID = 0;

                        }
                    }
                    return nDirectUserID;


                }
                catch (SqlException ex)
                {
                    return 0;
                    throw ex;
                }
                catch (Exception ex)
                {
                    return 0;
                    throw ex;
                }
                finally
                {
                    if (objCmd != null)
                    {
                        objCmd.Parameters.Clear();
                        objCmd.Dispose();
                        objCmd = null;
                    }
                    if (objCon != null)
                    {
                        objCon.Close();
                        objCon.Dispose();
                        objCmd = null;
                    }
                }
            }

            public string GetDirectMsgAttachUserName(Int64 userid = 0)
            {
                string sDirectUserName = "";
                Int64 nDirectUserID;
                // Bug #39873: 00000317 : Tasks 
                // parameter and following condition added to avoid unneccessary call of GetRecieveFaxUserID()
                if (userid == 0)
                {
                    nDirectUserID = GetDirectMsgAttachmentUserID();
                }
                else
                {
                    nDirectUserID = userid;
                }

                if (nDirectUserID != 0)
                {
                    SqlConnection objCon = new SqlConnection();
                    objCon.ConnectionString = gloEDocV3Admin.gDatabaseConnectionString;
                    SqlCommand objCmd = new SqlCommand();
                    try
                    {
                        if (objCon != null)
                        {
                            objCon.Open();
                            objCmd.Connection = objCon;
                            objCmd.CommandType = CommandType.Text;
                            objCmd.CommandText = "SELECT ISNULL(sLoginName,'') FROM User_MST WITH(NOLOCK) WHERE nUserID= " + nDirectUserID;

                            sDirectUserName = objCmd.ExecuteScalar().ToString();
                        }
                        return sDirectUserName;
                    }
                    catch (SqlException ex)
                    {
                        return sDirectUserName;
                        throw ex;
                    }
                    catch (Exception ex)
                    {
                        return sDirectUserName;
                        throw ex;
                    }
                    finally
                    {
                        if (objCmd != null)
                        {
                            objCmd.Parameters.Clear();
                            objCmd.Dispose();
                            objCmd = null;
                        }
                        if (objCon != null)
                        {
                            objCon.Close();
                            objCon.Dispose();
                            objCmd = null;
                        }
                    }
                }
                else
                {
                    return sDirectUserName;
                }
            }
            //Developer: Manoj R. Jadhav
            //Date:02/19/2013
            //Bug ID/PRD Name/Salesforce Case: 
            //Reason: New Region Created for Processing Dms document from HL7 service using external DMS trascation
            #region "HL7 functions Import DMS Documents"

            public long HL7_PatientID { get; set; }
            public string HL7_SourceDocuments { get; set; }
            public string HL7_DestDocumentName { get; set; }
            public long HL7_DestCategoryID { get; set; }
            public string HL7_DestCategory { get; set; }
            public string HL7_DestYear { get; set; }
            public string HL7_DestMonth { get; set; }
            public long HL7_ClinicID { get; set; }
            public long HL7_DestContainerID { get; set; }
            public long HL7_DestDocumentID { get; set; }
            public string HL7_DocumentNotes { get; set; }
            public long HL7_UserID { get; set; }
            public string HL7_UserName { get; set; }

            //added New function by manoj jadhav for processing Images in DMS module from HL7
            public bool HL7_ImportImages(ref SqlConnection _connection, ref  SqlTransaction _transaction)
            {
                pdftron.PDF.PDFDoc doc = null;
                pdftron.PDF.Image img = null;
                pdftron.PDF.ElementBuilder oElementBuilder = null;
                pdftron.PDF.ElementWriter oElementWriter = null;
                pdftron.PDF.Element element = null;
                System.Drawing.Bitmap bmp = null;
                pdftron.PDF.Rect oRect = null;
                pdftron.PDF.Page page = null;
                string _tempProcessPath = "";
                string _OutputFilePath = "";
                bool _result = false;
                string _MessageString = string.Empty;
                try
                {
                    doc = new pdftron.PDF.PDFDoc();

                    oElementBuilder = new pdftron.PDF.ElementBuilder();
                    oElementWriter = new pdftron.PDF.ElementWriter();

                    _tempProcessPath = gloEDocV3Admin.gTemporaryProcessPath + "\\ImportImages";

                    if (_tempProcessPath != "")
                    {
                        if (!Directory.Exists(_tempProcessPath))
                        {
                            Directory.CreateDirectory(_tempProcessPath);
                        }
                        _OutputFilePath = _tempProcessPath + "\\" + HL7_DestDocumentName + ".pdf";
                        FileInfo ofileInfo = new FileInfo(HL7_SourceDocuments);
                        if (ofileInfo != null)
                        {
                            string fileExtension = ofileInfo.Extension.ToUpper();
                            try
                            {
                                string sImage = HL7_SourceDocuments;
                                if (File.Exists(sImage) == true)
                                {
                                    bmp = new System.Drawing.Bitmap(sImage);
                                }
                                else
                                {
                                    _result = false;
                                }
                            }
                            catch (Exception)
                            {
                                _ErrorMessage = "Error is due to the bmp object is null";
                                _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _ErrorMessage = string.Empty;
                            }
                            if (bmp == null)
                            {
                                _ErrorMessage = "Error is due to the bmp object is null";
                                _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                _ErrorMessage = string.Empty;
                            }

                            int fICount = bmp.FrameDimensionsList.Length;
                            if (fICount <= 0)
                            {
                                fICount = 1;
                            }
                            //Loop it upto the image count
                            for (int ij = 0; ij < fICount; ij++)
                            {

                                int imgCount = 0;

                                System.Drawing.Imaging.FrameDimension myFramedimention = null;
                                try
                                {
                                    if (bmp.FrameDimensionsList.Length > ij) //if the is > then the framecount
                                    {
                                        myFramedimention = new System.Drawing.Imaging.FrameDimension(bmp.FrameDimensionsList[ij]);
                                        imgCount = bmp.GetFrameCount(myFramedimention);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    imgCount = 1;
                                    gloAuditTrail.gloAuditTrail.ExceptionLog(ex.Message, false);
                                }
                                //Image count should not be less then 0
                                if (imgCount <= 0)
                                {
                                    imgCount = 1;
                                }

                                float _hr = bmp.HorizontalResolution;
                                float _vr = bmp.VerticalResolution;
                                float _wd = bmp.Width;
                                float _ht = bmp.Height;
                                //SLR: Why it was diposed here?
                                //if ((imgCount <= 1) && (fICount <= 1))
                                //{
                                //    bmp.Dispose();
                                //    bmp = null;
                                //}
                                int XWidth = 0;
                                int YHeight = 0;
                                bool XYRet = false;
                                XYRet = GetXWidthYHeight(_hr, _vr, _ht, _wd, out XWidth, out YHeight);
                                oRect = new pdftron.PDF.Rect();
                                oRect.x1 = XWidth;// img.GetBitmap().Width;
                                oRect.x2 = 0;
                                oRect.y1 = YHeight;// img.GetBitmap().Height;
                                oRect.y2 = 0;


                                for (int j = 0; j < imgCount; j++)
                                {
                                    //if fcount is greater then one then add more data from one file
                                    if (((j >= 1) || (ij >= 1)) && (bmp != null))
                                    {
                                        if (myFramedimention != null)
                                        {
                                            // Select the current TIFF page using SelectActiveFrame
                                            try
                                            {
                                                bmp.SelectActiveFrame(myFramedimention, j);
                                            }
                                            catch //(Exception ex1)
                                            {
                                                try
                                                {
                                                    bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, ij);
                                                }
                                                catch //(Exception ex2)
                                                {
                                                    bmp.Dispose();
                                                    bmp = null;
                                                }
                                            }
                                        }

                                        else
                                        {
                                            try
                                            {
                                                bmp.SelectActiveFrame(System.Drawing.Imaging.FrameDimension.Page, ij);
                                            }
                                            catch //(Exception ex2)
                                            {
                                                bmp.Dispose();
                                                bmp = null;
                                            }
                                        }
                                    }

                                    //Set Page Size as of Rect
                                    page = doc.PageCreate(oRect);
                                    oElementWriter.Begin(page);
                                    if (bmp == null)
                                    {
                                        //Sanjog - Added on 2011 June 6 to convert first into bmp file n then create the PDF - Issue no.13885
                                        bmp = new System.Drawing.Bitmap(HL7_SourceDocuments);

                                    }
                                    if ((imgCount <= 1) && (fICount <= 1))
                                    {
                                        //Sanjog - Added on 2011 June 6 to convert first into bmp file n then create the PDF - Issue no.13885
                                        try
                                        {
                                            img = pdftron.PDF.Image.Create(doc, bmp);
                                        }
                                        catch (Exception)
                                        {
                                            _ErrorMessage = "Error is due to the img object is null";
                                            _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                            _ErrorMessage = string.Empty;
                                            oElementWriter.End();
                                            doc.PagePushBack(page);
                                            break;
                                        }
                                        //img = pdftron.PDF.Image.Create(doc, ofileInfo.Name);
                                    }
                                    else
                                    {
                                        try
                                        {
                                            img = pdftron.PDF.Image.Create(doc, bmp);
                                        }
                                        catch (Exception)
                                        {
                                            _ErrorMessage = "Error is due to the img object is null";
                                            _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                            _ErrorMessage = string.Empty;
                                            oElementWriter.End();
                                            doc.PagePushBack(page);
                                            break;
                                        }
                                    }
                                    if (img == null)
                                    {
                                        _ErrorMessage = "Error is due to the img object is null";
                                        _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                        _ErrorMessage = string.Empty;
                                        oElementWriter.End();
                                        doc.PagePushBack(page);
                                        break;
                                    }

                                    element = oElementBuilder.CreateImage(img, new Matrix2D(XWidth, 0, 0, YHeight, 0, 0));// );//new Matrix2D(612, 0, 0, 794, 0, 0) //
                                    if (element == null)
                                    {
                                        _ErrorMessage = "Error is due to the element object is null";
                                        _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + _ErrorMessage;
                                        gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                                        _ErrorMessage = string.Empty;
                                        oElementWriter.End();
                                        doc.PagePushBack(page);
                                        break;
                                    }
                                    oElementWriter.WritePlacedElement(element);
                                    oElementWriter.End();
                                    doc.PagePushBack(page);
                                    img.Dispose();
                                    img = null;
                                }

                                if (oRect != null)
                                    oRect = null;

                                if (page != null)
                                    page = null;

                                ofileInfo = null;
                            }
                            if (bmp != null)
                            {
                                bmp.Dispose();
                                bmp = null;
                            }

                        }
                        doc.Save(_OutputFilePath, pdftron.SDF.SDFDoc.SaveOptions.e_linearized);
                        doc.Close();
                        if (File.Exists(_OutputFilePath) == true)
                        {
                            HL7_SourceDocuments = _OutputFilePath;
                            _result = HL7_ImportSplit(ref _connection, ref  _transaction);
                        }
                    }
                    if (Directory.Exists(_tempProcessPath) == true)
                    {
                        Directory.Delete(_tempProcessPath, true);
                    }
                }
                catch (PDFNetException ex)
                {
                    _MessageString = "Date Time : " + DateTime.Now.ToString() + Environment.NewLine + "Module : " + "ConvertImagesToPDF" + Environment.NewLine + "ERROR : " + ex.ToString();
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_MessageString);
                    _result = false;
                }
                finally
                {
                    if (doc != null)
                    {
                        doc.Dispose();
                        doc = null;
                    }
                    if (oElementBuilder != null)
                    {
                        oElementBuilder.Dispose();
                        oElementBuilder = null;
                    }
                    if (oElementWriter != null)
                    {
                        oElementWriter.Dispose();
                        oElementWriter = null;
                    }
                    oRect = null;
                    page = null;
                }
                return _result;
            }

            //added New function by manoj jadhav for processing PDF in DMS module from HL7
            public bool HL7_ImportSplit(ref SqlConnection _connection, ref  SqlTransaction _transaction)
            {
                SqlCommand _sqlcommand = null;
                SqlParameter _sqlParameter = null;
                int _NextCntr = 0;
                bool _result = false;
                string _strSQL = string.Empty;
                Int64 _CurrentDocumentID = 0;
                Int64 _CurrentContainerID = 0;
                int _ImportDocumentPageCount = 0;
                Int64 _PrefixTransactionID = 0;
                Object _Returnvalue = null;
                int _PageCounter = 0;
                string _BookMarkTag = string.Empty;
                string _DocumentExtension = "pdf";
                string _FilePath = string.Empty;
                string _UsedMachine = string.Empty;
                Int32 _DocumentPageFrom = 0;
                Int32 _DocumentPageTo = 0;
                string _CompressedFilePath = string.Empty;
                string _DirectoryPathToCompress = string.Empty;
                bool _UseCompressedDocument = false;
                string _DestNewDocumentName = string.Empty;
                int _RetNextCntr = 0;
                pdftron.PDF.PDFDoc oSourcePDFDocument = null;
                pdftron.SDF.SecurityHandler oSec = null;
                bool IsPassword = false;
                try
                {
                    _UsedMachine = Environment.MachineName;
                    _CurrentDocumentID = 0;
                    _CurrentContainerID = 0;
                    _ImportDocumentPageCount = 0;
                    _DocumentPageFrom = 0;
                    _DocumentPageTo = 0;
                    if (string.IsNullOrEmpty(HL7_SourceDocuments) || !File.Exists(HL7_SourceDocuments))
                    {
                        _result = false;
                    }
                    else
                    {
                        oSourcePDFDocument = new pdftron.PDF.PDFDoc(HL7_SourceDocuments);

                        if (oSourcePDFDocument == null)
                        {
                            _result = false;
                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_ErrorMessage);
                            return _result;
                        }
                        try
                        {
                            oSourcePDFDocument.InitSecurityHandler();
                        }
                        catch (Exception)
                        {

                            //Intetionally left Blank
                        }

                        oSec = oSourcePDFDocument.GetSecurityHandler();
                        try
                        {
                            oSec.Authorize(pdftron.SDF.SecurityHandler.Permission.e_access_support);
                        }
                        catch (Exception)
                        {
                            IsPassword = true;
                        }

                        if (oSourcePDFDocument.IsEncrypted() && IsPassword)
                        {
                            _result = false;
                            _ErrorMessage = "'" + HL7_DestDocumentName + "' is password protected.";
                            gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(_ErrorMessage);
                            if (oSec != null)
                            {
                                oSec.Dispose();
                                oSec = null;
                            }
                            return _result;
                        }
                        if (oSourcePDFDocument != null)
                        {
                            oSourcePDFDocument.Close();
                            oSourcePDFDocument.Dispose();
                            oSourcePDFDocument = null;
                        }

                        _FilePath = System.Convert.ToString(HL7_SourceDocuments);
                        _ImportDocumentPageCount = gloEDocumentV3.eDocManager.eDocValidator.GetFilePageCount(_FilePath);
                        _DocumentPageFrom = 1;
                        _DocumentPageTo = _ImportDocumentPageCount;
                        _RetNextCntr = _NextCntr;
                        _PrefixTransactionID = eDocValidator.GetPrefixTransactionID(HL7_PatientID);
                        _DestNewDocumentName = eDocValidator.GenerateDocumentName(HL7_PatientID, HL7_DestCategory, "", HL7_ClinicID, HL7_DestDocumentName, 0, _NextCntr, out _RetNextCntr, enum_OpenExternalSource.None);

                        #region " Document Details "
                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpDocumentDetails", _connection);
                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                        _sqlcommand.CommandTimeout = 0;
                        _sqlcommand.Transaction = _transaction;
                        _sqlcommand.Parameters.Clear();
                        _sqlParameter = new SqlParameter();
                        _sqlParameter.ParameterName = "@eDocumentID";
                        _sqlParameter.Value = _CurrentDocumentID;
                        _sqlParameter.Direction = ParameterDirection.InputOutput;
                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
                        _sqlcommand.Parameters.Add(_sqlParameter);
                        if (_sqlParameter != null)
                        {
                            _sqlParameter = null;
                        }

                        _NextCntr = _RetNextCntr;
                        _sqlcommand.Parameters.Add("@DocumentName", SqlDbType.VarChar).Value = _DestNewDocumentName;
                        _sqlcommand.Parameters.Add("@CategoryID", System.Data.SqlDbType.BigInt).Value = HL7_DestCategoryID;
                        _sqlcommand.Parameters.Add("@Category", System.Data.SqlDbType.VarChar).Value = HL7_DestCategory;
                        _sqlcommand.Parameters.Add("@PatientID", System.Data.SqlDbType.BigInt).Value = HL7_PatientID;
                        _sqlcommand.Parameters.Add("@Year", System.Data.SqlDbType.VarChar).Value = HL7_DestYear;
                        _sqlcommand.Parameters.Add("@Month", System.Data.SqlDbType.VarChar).Value = HL7_DestMonth;
                        _sqlcommand.Parameters.Add("@PageCounts", System.Data.SqlDbType.Int).Value = _ImportDocumentPageCount;
                        _sqlcommand.Parameters.Add("@CreatedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                        _sqlcommand.Parameters.Add("@ModifiedDateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;
                        _sqlcommand.Parameters.Add("@IsAcknowledge", System.Data.SqlDbType.Bit).Value = false;
                        _sqlcommand.Parameters.Add("@HasNote", System.Data.SqlDbType.Bit).Value = false;
                        _sqlcommand.Parameters.Add("@ExternalID", System.Data.SqlDbType.BigInt).Value = 0;
                        _sqlcommand.Parameters.Add("@ExternalCode", System.Data.SqlDbType.VarChar).Value = "";
                        _sqlcommand.Parameters.Add("@ExternalDescription", System.Data.SqlDbType.VarChar).Value = "";
                        _sqlcommand.Parameters.Add("@UsedStatus", System.Data.SqlDbType.Bit).Value = false;
                        _sqlcommand.Parameters.Add("@UsedMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                        _sqlcommand.Parameters.Add("@ArchiveID", System.Data.SqlDbType.BigInt).Value = 0;
                        _sqlcommand.Parameters.Add("@ArchiveStatus", System.Data.SqlDbType.Bit).Value = false;
                        _sqlcommand.Parameters.Add("@ArchiveDescription", System.Data.SqlDbType.VarChar).Value = "";
                        _sqlcommand.Parameters.Add("@IsCompressed", System.Data.SqlDbType.Bit).Value = _UseCompressedDocument;
                        _sqlcommand.Parameters.Add("@DMSV1ID", System.Data.SqlDbType.BigInt).Value = 0;
                        _sqlcommand.Parameters.Add("@DMSV2ContainerID", System.Data.SqlDbType.BigInt).Value = 0;
                        _sqlcommand.Parameters.Add("@DMSV2DocumentID", System.Data.SqlDbType.BigInt).Value = 0;
                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = HL7_ClinicID;
                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;
                        _sqlcommand.ExecuteNonQuery();
                        if (_sqlcommand.Parameters["@eDocumentID"].Value != null)
                        {
                            _Returnvalue = _sqlcommand.Parameters["@eDocumentID"].Value;
                        }
                        _CurrentDocumentID = System.Convert.ToInt64(_Returnvalue);
                        if (_sqlcommand != null)
                        {
                            _sqlcommand.Parameters.Clear();
                            _sqlcommand.Dispose();
                            _sqlcommand = null;
                        }
                        #endregion

                        #region " Container Details "

                        string _ChunkFilePath = "";
                        if (_UseCompressedDocument == true)
                            _ChunkFilePath = _CompressedFilePath;
                        else
                            _ChunkFilePath = _FilePath;


                        _sqlcommand = new SqlCommand("gsp_eDocV3_InUpContainer", _connection);
                        _sqlcommand.CommandType = CommandType.StoredProcedure;
                        _sqlcommand.CommandTimeout = 0;
                        _sqlcommand.Transaction = _transaction;

                        _sqlcommand.Parameters.Clear();
                        _sqlParameter = new SqlParameter();
                        _sqlParameter.ParameterName = "@eContainerID";
                        _sqlParameter.Value = _CurrentContainerID;
                        _sqlParameter.Direction = ParameterDirection.InputOutput;
                        _sqlParameter.SqlDbType = SqlDbType.BigInt;
                        _sqlcommand.Parameters.Add(_sqlParameter);
                        if (_sqlParameter != null)
                        {
                            _sqlParameter = null;
                        }

                        _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                        _sqlcommand.Parameters.Add("@DocumentPageFrom", System.Data.SqlDbType.BigInt).Value = _DocumentPageFrom;
                        _sqlcommand.Parameters.Add("@DocumentPageTo", System.Data.SqlDbType.BigInt).Value = _DocumentPageTo;
                        _sqlcommand.Parameters.Add("@DocumentExtension", System.Data.SqlDbType.VarChar).Value = _DocumentExtension;
                        _sqlcommand.Parameters.Add("@IsModified", System.Data.SqlDbType.Bit).Value = false;
                        _sqlcommand.Parameters.Add("@SourceBin", System.Data.SqlDbType.Int).Value = enum_DocumentSourceBin.Import.GetHashCode();
                        _sqlcommand.Parameters.Add("@SourceMachine", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                        _sqlcommand.Parameters.Add("@MachineID", System.Data.SqlDbType.VarChar).Value = _UsedMachine;
                        _sqlcommand.Parameters.Add("@ClinicID", System.Data.SqlDbType.BigInt).Value = HL7_ClinicID;
                        _sqlcommand.Parameters.Add("@PrefixID", System.Data.SqlDbType.BigInt).Value = _PrefixTransactionID;
                        _sqlcommand.Parameters.Add("@fileStream", SqlDbType.VarBinary).Value = DBNull.Value;

                        _Returnvalue = 0;
                        _sqlcommand.ExecuteNonQuery();
                        if (_sqlcommand.Parameters["@eContainerID"].Value != null)
                        {
                            _Returnvalue = _sqlcommand.Parameters["@eContainerID"].Value;
                        }
                        _CurrentContainerID = System.Convert.ToInt64(_Returnvalue);

                        if (_sqlcommand != null)
                        {
                            _sqlcommand.Parameters.Clear();
                            _sqlcommand.Dispose();
                            _sqlcommand = null;
                        }
                        #endregion

                        Cls_SQLFileStream.SaveFile(_CurrentContainerID, _CurrentDocumentID, _ChunkFilePath, _transaction, HL7_ClinicID, enum_OpenExternalSource.None);

                        #region "Page Numbers"
                        for (_PageCounter = 1; _PageCounter <= _ImportDocumentPageCount; _PageCounter++)
                        {

                            _BookMarkTag = HL7_DestYear + "~" + HL7_DestCategory.Replace("'", "''") + "~" + HL7_DestMonth + "~" + _CurrentDocumentID.ToString() + "~" + _PageCounter.ToString();
                            _strSQL = "INSERT INTO eDocument_Pages_V3 (eDocumentID,eContainerID,ContainerPageNumber,DocumentPageNumber,PageName,BookMarkTag,HasNote,ClinicID) VALUES " +
                                "(" + _CurrentDocumentID + "," + _CurrentContainerID + "," + _PageCounter + "," + _PageCounter + ",'Page ' + '" + _PageCounter.ToString() + "','" + _BookMarkTag + "','" + false + "'," + HL7_ClinicID + ")";
                            _sqlcommand = new SqlCommand(_strSQL, _connection);
                            _sqlcommand.Transaction = _transaction;
                            _sqlcommand.ExecuteNonQuery();
                            if (_sqlcommand != null)
                            {
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }
                        }

                        #endregion

                        #region "Page Notes"

                        if (!string.IsNullOrEmpty(HL7_DocumentNotes))
                        {
                            _strSQL = "Update eDocument_Pages_V3 SET HasNote=1 WHERE eDocumentID=" + _CurrentDocumentID + " AND eContainerID=" + _CurrentContainerID + " AND ContainerPageNumber=1";
                            _sqlcommand = new SqlCommand(_strSQL, _connection);
                            _sqlcommand.Transaction = _transaction;
                            _sqlcommand.ExecuteNonQuery();
                            if (_sqlcommand != null)
                            {
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }

                            _sqlcommand = new SqlCommand("gsp_eDoc_InUpNTAO_V3", _connection);
                            _sqlcommand.CommandType = CommandType.StoredProcedure;
                            _sqlcommand.CommandTimeout = 0;
                            _sqlcommand.Transaction = _transaction;
                            _sqlcommand.Parameters.Clear();
                            _sqlParameter = new SqlParameter();
                            _sqlParameter.ParameterName = "@NTAOID";
                            _sqlParameter.Value = 0;
                            _sqlParameter.Direction = ParameterDirection.InputOutput;
                            _sqlParameter.SqlDbType = SqlDbType.BigInt;
                            _sqlcommand.Parameters.Add(_sqlParameter);
                            if (_sqlParameter != null)
                            {
                                _sqlParameter = null;
                            }
                            _sqlcommand.Parameters.Add("@eDocumentID", System.Data.SqlDbType.BigInt).Value = _CurrentDocumentID;
                            _sqlcommand.Parameters.Add("@eContainerID", System.Data.SqlDbType.BigInt).Value = _CurrentContainerID;
                            _sqlcommand.Parameters.Add("@ContainerPageNumber", System.Data.SqlDbType.Int).Value = 1;
                            _sqlcommand.Parameters.Add("@DocumentPageNumber", System.Data.SqlDbType.Int).Value = 1;
                            _sqlcommand.Parameters.Add("@UserID", System.Data.SqlDbType.BigInt).Value = HL7_UserID;
                            _sqlcommand.Parameters.Add("@UserName", System.Data.SqlDbType.VarChar).Value = HL7_UserName;
                            _sqlcommand.Parameters.Add("@NTAODateTime", System.Data.SqlDbType.DateTime).Value = DateTime.Now;//.ToString("MM/dd/yyy hh:mm:ss tt") ;
                            _sqlcommand.Parameters.Add("@NTAODescription", System.Data.SqlDbType.VarChar).Value = HL7_DocumentNotes;
                            _sqlcommand.Parameters.Add("@IsPage", System.Data.SqlDbType.BigInt).Value = true;
                            _sqlcommand.Parameters.Add("@NTAOType", SqlDbType.Int).Value = 1;
                            _sqlcommand.Parameters.Add("@ClinicID", SqlDbType.BigInt).Value = HL7_ClinicID;
                            _sqlcommand.Parameters.Add("@PrefixID", SqlDbType.BigInt).Value = _PrefixTransactionID;
                            _sqlcommand.ExecuteNonQuery();
                            if (_sqlcommand != null)
                            {
                                _sqlcommand.Parameters.Clear();
                                _sqlcommand.Dispose();
                                _sqlcommand = null;
                            }

                        }
                        #endregion
                    }

                    if (Directory.Exists(_DirectoryPathToCompress) == true)
                        Directory.Delete(_DirectoryPathToCompress, true);

                    if (_CurrentContainerID > 0 && _CurrentDocumentID > 0)
                        _result = true;
                }
                catch (PDFNetException ex)
                {
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(ex.Message);
                    _result = false;
                }
                catch (Exception ex)
                {
                    gloEDocumentV3.eDocManager.eDocValidator.UpdateExceptionLog(ex.Message);
                    _result = false;
                }
                finally
                {

                    HL7_DestContainerID = _CurrentContainerID;
                    HL7_DestDocumentID = _CurrentDocumentID;
                    HL7_DestDocumentName = _DestNewDocumentName;
                    if (oSec != null)
                    {
                        oSec.Dispose();
                        oSec = null;
                    }
                    if (oSourcePDFDocument != null)
                    {
                        oSourcePDFDocument.Close();
                        oSourcePDFDocument.Dispose();
                        oSourcePDFDocument = null;
                    }

                    _sqlParameter = null;
                    if (_sqlcommand != null)
                    {
                        _sqlcommand.Parameters.Clear();
                        _sqlcommand.Dispose();
                        _sqlcommand = null;
                    }
                    _NextCntr = 0;
                    _strSQL = string.Empty;
                    _CurrentDocumentID = 0;
                    _CurrentContainerID = 0;
                    _ImportDocumentPageCount = 0;
                    _PrefixTransactionID = 0;
                    _Returnvalue = null;
                    _PageCounter = 0;
                    _BookMarkTag = string.Empty;
                    _DocumentExtension = string.Empty;
                    _FilePath = string.Empty;
                    _UsedMachine = string.Empty;
                    _DocumentPageFrom = 0;
                    _DocumentPageTo = 0;
                    _CompressedFilePath = string.Empty;
                    _DirectoryPathToCompress = string.Empty;
                    _UseCompressedDocument = false;
                    _DestNewDocumentName = string.Empty;
                    _RetNextCntr = 0;
                }
                return _result;
            }

            #endregion


            #region PatientPortal

            public void SetSettings(string DatabaseConnectionString, string DMSDatabaseConnectionString, string ErrorLogFilePath, string TemporaryProcessPath)
            {
                gloEDocV3Admin.gDatabaseConnectionString = DatabaseConnectionString;
                gloEDocV3Admin.gDMSDatabaseConnectionString = DMSDatabaseConnectionString;
                gloEDocV3Admin.gErrorLogFilePath = ErrorLogFilePath;
                gloEDocV3Admin.gTemporaryProcessPath = TemporaryProcessPath;
            }
            public void ConnectToPDFTron()
            {
                gloEDocV3Admin.ConnectToPDFTron();
            }

            #endregion


        }



    }
}
