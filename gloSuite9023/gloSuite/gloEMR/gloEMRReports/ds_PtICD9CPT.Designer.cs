//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace gloEMRReports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ds_PtICD9CPT")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ds_PtICD9CPT : global::System.Data.DataSet {
        
        private Dt_PatientICD9_CPTDataTable tableDt_PatientICD9_CPT;
        
        private dt_Clinic_MSTDataTable tabledt_Clinic_MST;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ds_PtICD9CPT() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ds_PtICD9CPT(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Dt_PatientICD9_CPT"] != null)) {
                    base.Tables.Add(new Dt_PatientICD9_CPTDataTable(ds.Tables["Dt_PatientICD9_CPT"]));
                }
                if ((ds.Tables["dt_Clinic_MST"] != null)) {
                    base.Tables.Add(new dt_Clinic_MSTDataTable(ds.Tables["dt_Clinic_MST"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Dt_PatientICD9_CPTDataTable Dt_PatientICD9_CPT {
            get {
                return this.tableDt_PatientICD9_CPT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dt_Clinic_MSTDataTable dt_Clinic_MST {
            get {
                return this.tabledt_Clinic_MST;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ds_PtICD9CPT cln = ((ds_PtICD9CPT)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Dt_PatientICD9_CPT"] != null)) {
                    base.Tables.Add(new Dt_PatientICD9_CPTDataTable(ds.Tables["Dt_PatientICD9_CPT"]));
                }
                if ((ds.Tables["dt_Clinic_MST"] != null)) {
                    base.Tables.Add(new dt_Clinic_MSTDataTable(ds.Tables["dt_Clinic_MST"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDt_PatientICD9_CPT = ((Dt_PatientICD9_CPTDataTable)(base.Tables["Dt_PatientICD9_CPT"]));
            if ((initTable == true)) {
                if ((this.tableDt_PatientICD9_CPT != null)) {
                    this.tableDt_PatientICD9_CPT.InitVars();
                }
            }
            this.tabledt_Clinic_MST = ((dt_Clinic_MSTDataTable)(base.Tables["dt_Clinic_MST"]));
            if ((initTable == true)) {
                if ((this.tabledt_Clinic_MST != null)) {
                    this.tabledt_Clinic_MST.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ds_PtICD9CPT";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ds_PtICD9CPT.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDt_PatientICD9_CPT = new Dt_PatientICD9_CPTDataTable();
            base.Tables.Add(this.tableDt_PatientICD9_CPT);
            this.tabledt_Clinic_MST = new dt_Clinic_MSTDataTable();
            base.Tables.Add(this.tabledt_Clinic_MST);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDt_PatientICD9_CPT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedt_Clinic_MST() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ds_PtICD9CPT ds = new ds_PtICD9CPT();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Dt_PatientICD9_CPTRowChangeEventHandler(object sender, Dt_PatientICD9_CPTRowChangeEvent e);
        
        public delegate void dt_Clinic_MSTRowChangeEventHandler(object sender, dt_Clinic_MSTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Dt_PatientICD9_CPTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnnPatientID;
            
            private global::System.Data.DataColumn columnDiagnosis;
            
            private global::System.Data.DataColumn columnProcedures;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnDOS;
            
            private global::System.Data.DataColumn columnPatient_Code;
            
            private global::System.Data.DataColumn columnPatient_Name;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnProvider;
            
            private global::System.Data.DataColumn columnExam_Name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dt_PatientICD9_CPTDataTable() {
                this.TableName = "Dt_PatientICD9_CPT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Dt_PatientICD9_CPTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Dt_PatientICD9_CPTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPatientIDColumn {
                get {
                    return this.columnnPatientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiagnosisColumn {
                get {
                    return this.columnDiagnosis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProceduresColumn {
                get {
                    return this.columnProcedures;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOSColumn {
                get {
                    return this.columnDOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Patient_CodeColumn {
                get {
                    return this.columnPatient_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Patient_NameColumn {
                get {
                    return this.columnPatient_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProviderColumn {
                get {
                    return this.columnProvider;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Exam_NameColumn {
                get {
                    return this.columnExam_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dt_PatientICD9_CPTRow this[int index] {
                get {
                    return ((Dt_PatientICD9_CPTRow)(this.Rows[index]));
                }
            }
            
            public event Dt_PatientICD9_CPTRowChangeEventHandler Dt_PatientICD9_CPTRowChanging;
            
            public event Dt_PatientICD9_CPTRowChangeEventHandler Dt_PatientICD9_CPTRowChanged;
            
            public event Dt_PatientICD9_CPTRowChangeEventHandler Dt_PatientICD9_CPTRowDeleting;
            
            public event Dt_PatientICD9_CPTRowChangeEventHandler Dt_PatientICD9_CPTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDt_PatientICD9_CPTRow(Dt_PatientICD9_CPTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dt_PatientICD9_CPTRow AddDt_PatientICD9_CPTRow(long nPatientID, string Diagnosis, string Procedures, int Units, System.DateTime DOS, string Patient_Code, string Patient_Name, string Location, string Provider, string Exam_Name) {
                Dt_PatientICD9_CPTRow rowDt_PatientICD9_CPTRow = ((Dt_PatientICD9_CPTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        nPatientID,
                        Diagnosis,
                        Procedures,
                        Units,
                        DOS,
                        Patient_Code,
                        Patient_Name,
                        Location,
                        Provider,
                        Exam_Name};
                rowDt_PatientICD9_CPTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDt_PatientICD9_CPTRow);
                return rowDt_PatientICD9_CPTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Dt_PatientICD9_CPTDataTable cln = ((Dt_PatientICD9_CPTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Dt_PatientICD9_CPTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnPatientID = base.Columns["nPatientID"];
                this.columnDiagnosis = base.Columns["Diagnosis"];
                this.columnProcedures = base.Columns["Procedures"];
                this.columnUnits = base.Columns["Units"];
                this.columnDOS = base.Columns["DOS"];
                this.columnPatient_Code = base.Columns["Patient Code"];
                this.columnPatient_Name = base.Columns["Patient Name"];
                this.columnLocation = base.Columns["Location"];
                this.columnProvider = base.Columns["Provider"];
                this.columnExam_Name = base.Columns["Exam Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnPatientID = new global::System.Data.DataColumn("nPatientID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPatientID);
                this.columnDiagnosis = new global::System.Data.DataColumn("Diagnosis", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiagnosis);
                this.columnProcedures = new global::System.Data.DataColumn("Procedures", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcedures);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnDOS = new global::System.Data.DataColumn("DOS", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOS);
                this.columnPatient_Code = new global::System.Data.DataColumn("Patient Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatient_Code);
                this.columnPatient_Name = new global::System.Data.DataColumn("Patient Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPatient_Name);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnProvider = new global::System.Data.DataColumn("Provider", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvider);
                this.columnExam_Name = new global::System.Data.DataColumn("Exam Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExam_Name);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dt_PatientICD9_CPTRow NewDt_PatientICD9_CPTRow() {
                return ((Dt_PatientICD9_CPTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Dt_PatientICD9_CPTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Dt_PatientICD9_CPTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Dt_PatientICD9_CPTRowChanged != null)) {
                    this.Dt_PatientICD9_CPTRowChanged(this, new Dt_PatientICD9_CPTRowChangeEvent(((Dt_PatientICD9_CPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Dt_PatientICD9_CPTRowChanging != null)) {
                    this.Dt_PatientICD9_CPTRowChanging(this, new Dt_PatientICD9_CPTRowChangeEvent(((Dt_PatientICD9_CPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Dt_PatientICD9_CPTRowDeleted != null)) {
                    this.Dt_PatientICD9_CPTRowDeleted(this, new Dt_PatientICD9_CPTRowChangeEvent(((Dt_PatientICD9_CPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Dt_PatientICD9_CPTRowDeleting != null)) {
                    this.Dt_PatientICD9_CPTRowDeleting(this, new Dt_PatientICD9_CPTRowChangeEvent(((Dt_PatientICD9_CPTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDt_PatientICD9_CPTRow(Dt_PatientICD9_CPTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_PtICD9CPT ds = new ds_PtICD9CPT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Dt_PatientICD9_CPTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dt_Clinic_MSTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnsClinicName;
            
            private global::System.Data.DataColumn columnsAddress1;
            
            private global::System.Data.DataColumn columnsAddress2;
            
            private global::System.Data.DataColumn columnsStreet;
            
            private global::System.Data.DataColumn columnsCity;
            
            private global::System.Data.DataColumn columnsState;
            
            private global::System.Data.DataColumn columnsZIP;
            
            private global::System.Data.DataColumn columnsPhoneNo;
            
            private global::System.Data.DataColumn columnsMobileNo;
            
            private global::System.Data.DataColumn columnsFAX;
            
            private global::System.Data.DataColumn columnsEmail;
            
            private global::System.Data.DataColumn columnsURL;
            
            private global::System.Data.DataColumn columnimgClinicLogo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_Clinic_MSTDataTable() {
                this.TableName = "dt_Clinic_MST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dt_Clinic_MSTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dt_Clinic_MSTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sClinicNameColumn {
                get {
                    return this.columnsClinicName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sAddress1Column {
                get {
                    return this.columnsAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sAddress2Column {
                get {
                    return this.columnsAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sStreetColumn {
                get {
                    return this.columnsStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sCityColumn {
                get {
                    return this.columnsCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sStateColumn {
                get {
                    return this.columnsState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sZIPColumn {
                get {
                    return this.columnsZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sPhoneNoColumn {
                get {
                    return this.columnsPhoneNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sMobileNoColumn {
                get {
                    return this.columnsMobileNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sFAXColumn {
                get {
                    return this.columnsFAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sEmailColumn {
                get {
                    return this.columnsEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sURLColumn {
                get {
                    return this.columnsURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imgClinicLogoColumn {
                get {
                    return this.columnimgClinicLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_Clinic_MSTRow this[int index] {
                get {
                    return ((dt_Clinic_MSTRow)(this.Rows[index]));
                }
            }
            
            public event dt_Clinic_MSTRowChangeEventHandler dt_Clinic_MSTRowChanging;
            
            public event dt_Clinic_MSTRowChangeEventHandler dt_Clinic_MSTRowChanged;
            
            public event dt_Clinic_MSTRowChangeEventHandler dt_Clinic_MSTRowDeleting;
            
            public event dt_Clinic_MSTRowChangeEventHandler dt_Clinic_MSTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddt_Clinic_MSTRow(dt_Clinic_MSTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_Clinic_MSTRow Adddt_Clinic_MSTRow(string sClinicName, string sAddress1, string sAddress2, string sStreet, string sCity, string sState, string sZIP, string sPhoneNo, string sMobileNo, string sFAX, string sEmail, string sURL, byte[] imgClinicLogo) {
                dt_Clinic_MSTRow rowdt_Clinic_MSTRow = ((dt_Clinic_MSTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sClinicName,
                        sAddress1,
                        sAddress2,
                        sStreet,
                        sCity,
                        sState,
                        sZIP,
                        sPhoneNo,
                        sMobileNo,
                        sFAX,
                        sEmail,
                        sURL,
                        imgClinicLogo};
                rowdt_Clinic_MSTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdt_Clinic_MSTRow);
                return rowdt_Clinic_MSTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dt_Clinic_MSTDataTable cln = ((dt_Clinic_MSTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dt_Clinic_MSTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsClinicName = base.Columns["sClinicName"];
                this.columnsAddress1 = base.Columns["sAddress1"];
                this.columnsAddress2 = base.Columns["sAddress2"];
                this.columnsStreet = base.Columns["sStreet"];
                this.columnsCity = base.Columns["sCity"];
                this.columnsState = base.Columns["sState"];
                this.columnsZIP = base.Columns["sZIP"];
                this.columnsPhoneNo = base.Columns["sPhoneNo"];
                this.columnsMobileNo = base.Columns["sMobileNo"];
                this.columnsFAX = base.Columns["sFAX"];
                this.columnsEmail = base.Columns["sEmail"];
                this.columnsURL = base.Columns["sURL"];
                this.columnimgClinicLogo = base.Columns["imgClinicLogo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsClinicName = new global::System.Data.DataColumn("sClinicName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsClinicName);
                this.columnsAddress1 = new global::System.Data.DataColumn("sAddress1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsAddress1);
                this.columnsAddress2 = new global::System.Data.DataColumn("sAddress2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsAddress2);
                this.columnsStreet = new global::System.Data.DataColumn("sStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsStreet);
                this.columnsCity = new global::System.Data.DataColumn("sCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsCity);
                this.columnsState = new global::System.Data.DataColumn("sState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsState);
                this.columnsZIP = new global::System.Data.DataColumn("sZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsZIP);
                this.columnsPhoneNo = new global::System.Data.DataColumn("sPhoneNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsPhoneNo);
                this.columnsMobileNo = new global::System.Data.DataColumn("sMobileNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsMobileNo);
                this.columnsFAX = new global::System.Data.DataColumn("sFAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsFAX);
                this.columnsEmail = new global::System.Data.DataColumn("sEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsEmail);
                this.columnsURL = new global::System.Data.DataColumn("sURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsURL);
                this.columnimgClinicLogo = new global::System.Data.DataColumn("imgClinicLogo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimgClinicLogo);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_Clinic_MSTRow Newdt_Clinic_MSTRow() {
                return ((dt_Clinic_MSTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dt_Clinic_MSTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dt_Clinic_MSTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dt_Clinic_MSTRowChanged != null)) {
                    this.dt_Clinic_MSTRowChanged(this, new dt_Clinic_MSTRowChangeEvent(((dt_Clinic_MSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dt_Clinic_MSTRowChanging != null)) {
                    this.dt_Clinic_MSTRowChanging(this, new dt_Clinic_MSTRowChangeEvent(((dt_Clinic_MSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dt_Clinic_MSTRowDeleted != null)) {
                    this.dt_Clinic_MSTRowDeleted(this, new dt_Clinic_MSTRowChangeEvent(((dt_Clinic_MSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dt_Clinic_MSTRowDeleting != null)) {
                    this.dt_Clinic_MSTRowDeleting(this, new dt_Clinic_MSTRowChangeEvent(((dt_Clinic_MSTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedt_Clinic_MSTRow(dt_Clinic_MSTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ds_PtICD9CPT ds = new ds_PtICD9CPT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dt_Clinic_MSTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Dt_PatientICD9_CPTRow : global::System.Data.DataRow {
            
            private Dt_PatientICD9_CPTDataTable tableDt_PatientICD9_CPT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Dt_PatientICD9_CPTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDt_PatientICD9_CPT = ((Dt_PatientICD9_CPTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long nPatientID {
                get {
                    try {
                        return ((long)(this[this.tableDt_PatientICD9_CPT.nPatientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nPatientID\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.nPatientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Diagnosis {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.DiagnosisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Diagnosis\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.DiagnosisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Procedures {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.ProceduresColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Procedures\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.ProceduresColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Units {
                get {
                    try {
                        return ((int)(this[this.tableDt_PatientICD9_CPT.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOS {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDt_PatientICD9_CPT.DOSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOS\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.DOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Patient_Code {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.Patient_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Patient Code\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.Patient_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Patient_Name {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.Patient_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Patient Name\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.Patient_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Provider {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.ProviderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Provider\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.ProviderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exam_Name {
                get {
                    try {
                        return ((string)(this[this.tableDt_PatientICD9_CPT.Exam_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exam Name\' in table \'Dt_PatientICD9_CPT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDt_PatientICD9_CPT.Exam_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnPatientIDNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.nPatientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnPatientIDNull() {
                this[this.tableDt_PatientICD9_CPT.nPatientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiagnosisNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.DiagnosisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiagnosisNull() {
                this[this.tableDt_PatientICD9_CPT.DiagnosisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProceduresNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.ProceduresColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProceduresNull() {
                this[this.tableDt_PatientICD9_CPT.ProceduresColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableDt_PatientICD9_CPT.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOSNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.DOSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOSNull() {
                this[this.tableDt_PatientICD9_CPT.DOSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatient_CodeNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.Patient_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatient_CodeNull() {
                this[this.tableDt_PatientICD9_CPT.Patient_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPatient_NameNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.Patient_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPatient_NameNull() {
                this[this.tableDt_PatientICD9_CPT.Patient_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableDt_PatientICD9_CPT.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProviderNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.ProviderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProviderNull() {
                this[this.tableDt_PatientICD9_CPT.ProviderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExam_NameNull() {
                return this.IsNull(this.tableDt_PatientICD9_CPT.Exam_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExam_NameNull() {
                this[this.tableDt_PatientICD9_CPT.Exam_NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dt_Clinic_MSTRow : global::System.Data.DataRow {
            
            private dt_Clinic_MSTDataTable tabledt_Clinic_MST;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dt_Clinic_MSTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledt_Clinic_MST = ((dt_Clinic_MSTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sClinicName {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sClinicNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sClinicName\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sClinicNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sAddress1 {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sAddress1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sAddress1\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sAddress1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sAddress2 {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sAddress2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sAddress2\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sAddress2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sStreet {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sStreet\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sCity {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sCity\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sState {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sState\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sZIP {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sZIP\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sPhoneNo {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sPhoneNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sPhoneNo\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sPhoneNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sMobileNo {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sMobileNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sMobileNo\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sMobileNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sFAX {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sFAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sFAX\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sFAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sEmail {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sEmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sEmail\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sURL {
                get {
                    try {
                        return ((string)(this[this.tabledt_Clinic_MST.sURLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sURL\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.sURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] imgClinicLogo {
                get {
                    try {
                        return ((byte[])(this[this.tabledt_Clinic_MST.imgClinicLogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'imgClinicLogo\' in table \'dt_Clinic_MST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledt_Clinic_MST.imgClinicLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssClinicNameNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sClinicNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsClinicNameNull() {
                this[this.tabledt_Clinic_MST.sClinicNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssAddress1Null() {
                return this.IsNull(this.tabledt_Clinic_MST.sAddress1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsAddress1Null() {
                this[this.tabledt_Clinic_MST.sAddress1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssAddress2Null() {
                return this.IsNull(this.tabledt_Clinic_MST.sAddress2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsAddress2Null() {
                this[this.tabledt_Clinic_MST.sAddress2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssStreetNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsStreetNull() {
                this[this.tabledt_Clinic_MST.sStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssCityNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsCityNull() {
                this[this.tabledt_Clinic_MST.sCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssStateNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsStateNull() {
                this[this.tabledt_Clinic_MST.sStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssZIPNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsZIPNull() {
                this[this.tabledt_Clinic_MST.sZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssPhoneNoNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sPhoneNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsPhoneNoNull() {
                this[this.tabledt_Clinic_MST.sPhoneNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssMobileNoNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sMobileNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsMobileNoNull() {
                this[this.tabledt_Clinic_MST.sMobileNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssFAXNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sFAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsFAXNull() {
                this[this.tabledt_Clinic_MST.sFAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssEmailNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sEmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsEmailNull() {
                this[this.tabledt_Clinic_MST.sEmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssURLNull() {
                return this.IsNull(this.tabledt_Clinic_MST.sURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsURLNull() {
                this[this.tabledt_Clinic_MST.sURLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimgClinicLogoNull() {
                return this.IsNull(this.tabledt_Clinic_MST.imgClinicLogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimgClinicLogoNull() {
                this[this.tabledt_Clinic_MST.imgClinicLogoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Dt_PatientICD9_CPTRowChangeEvent : global::System.EventArgs {
            
            private Dt_PatientICD9_CPTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dt_PatientICD9_CPTRowChangeEvent(Dt_PatientICD9_CPTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Dt_PatientICD9_CPTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dt_Clinic_MSTRowChangeEvent : global::System.EventArgs {
            
            private dt_Clinic_MSTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_Clinic_MSTRowChangeEvent(dt_Clinic_MSTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dt_Clinic_MSTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591